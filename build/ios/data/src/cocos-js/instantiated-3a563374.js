System.register([], function (exports, module) {
  'use strict';
  return {
    execute: function () {

      exports({
        $: void 0,
        A: void 0,
        B: void 0,
        C: void 0,
        E: void 0,
        F: void 0,
        H: void 0,
        I: void 0,
        J: void 0,
        K: void 0,
        L: void 0,
        M: void 0,
        N: void 0,
        O: void 0,
        Q: void 0,
        R: void 0,
        U: void 0,
        V: void 0,
        W: void 0,
        X: void 0,
        Y: void 0,
        Z: void 0,
        _: void 0,
        a: assertsArrayIndex,
        a$: alignTo,
        aR: void 0,
        aV: IsPowerOf2,
        aW: FormatSize,
        aX: FormatSurfaceSize,
        aY: GetTypeSize,
        aZ: getTypedArrayConstructor,
        a_: formatAlignment,
        b$: find,
        b9: void 0,
        bC: ColorTemperatureToRGB,
        bD: void 0,
        bX: void 0,
        bY: fastRemove,
        ba: void 0,
        be: clamp,
        bi: void 0,
        bj: void 0,
        bm: void 0,
        bn: void 0,
        bo: void 0,
        bp: void 0,
        bq: void 0,
        br: void 0,
        bs: void 0,
        bt: void 0,
        bw: void 0,
        bx: void 0,
        c: void 0,
        c4: warnID,
        c9: errorID,
        cA: approx,
        cG: ccenum,
        cM: debug,
        cN: Enum,
        cR: deprecateModuleExportedName,
        cT: toRadian,
        cU: void 0,
        cW: void 0,
        cX: Eventify,
        cb: void 0,
        cc: void 0,
        ce: void 0,
        cf: applyDecoratedInitializer,
        cg: createMap,
        ci: getClassId,
        cj: _applyDecoratedDescriptor,
        cm: extname,
        cn: type,
        co: warn,
        cp: mixin,
        cs: assertIsTrue,
        ct: getError,
        cu: assertID,
        cv: assert,
        cx: void 0,
        d: void 0,
        d0: void 0,
        d1: setClassAlias,
        d3: void 0,
        d6: void 0,
        d9: void 0,
        dA: getClassByName,
        dC: getClassName,
        dE: _initializerDefineProperty,
        dI: isCCObject,
        dJ: updateChildrenForDeserialize,
        dL: isCCClassOrFastDefined,
        dO: assertIsNonNullable,
        dP: removeIf,
        dQ: binarySearchEpsilon,
        dS: bezierByTime,
        dT: lerp,
        dU: void 0,
        dV: void 0,
        dW: void 0,
        dX: void 0,
        dZ: clamp01,
        d_: contains,
        da: clampf,
        db: addon,
        dc: logID,
        de: void 0,
        dg: void 0,
        dh: remove,
        di: void 0,
        dj: removeAt,
        dw: formerlySerializedAs,
        dx: equals,
        dz: void 0,
        e0: void 0,
        e1: fastRemoveAt,
        e2: log,
        e3: error,
        e4: _throw,
        e6: join,
        e7: mainFileName,
        e8: basename,
        e9: dirname,
        eB: createCommonjsModule,
        eC: unwrapExports,
        eH: absMax,
        eI: void 0,
        eJ: void 0,
        eK: absMaxComponent,
        eO: isValid,
        eP: void 0,
        eU: contains$1,
        eV: void 0,
        e_: void 0,
        ea: changeExtname,
        eb: changeBasename,
        ec: _normalize,
        ed: stripSep,
        ee: getSeperator,
        ef: supportsR32FloatTexture,
        eh: CCClass,
        ei: nextPow2$1,
        ej: void 0,
        ek: void 0,
        en: toDegree,
        eo: constructLegacyCurveAndConvert,
        eq: repeat,
        es: randomRange,
        et: randomRangeInt,
        eu: sign,
        ev: pseudoRandom,
        ew: pingPong,
        ey: degreesToRadians,
        ez: radiansToDegrees,
        f4: mat4,
        f9: v2,
        fA: getSerializationMetadata,
        fC: isDisplayStats,
        fD: setDisplayStats,
        fE: void 0,
        fF: void 0,
        fG: bezier,
        fW: applyMixins,
        fX: _resetDebugSetting,
        fY: binarySearch,
        fZ: binarySearchBy,
        f_: flattenCodeArray,
        fa: v3,
        fb: v4,
        fc: quat,
        fe: size,
        ff: rect,
        fg: color,
        fh: pseudoRandomRange,
        fi: pseudoRandomRangeInt,
        fj: inverseLerp,
        fk: enumerableProps,
        fn: BitMask,
        fr: setDefaultLogTimes,
        fs: __checkObsolete__,
        ft: __checkObsoleteInNamespace__,
        fu: WorldNode3DToLocalNodeUI,
        fv: WorldNode3DToWorldNodeUI,
        gB: deserialize,
        gZ: waitForAmmoInstantiation,
        gi: void 0,
        gl: void 0,
        h: void 0,
        i: void 0,
        j: void 0,
        k: void 0,
        l: void 0,
        m: void 0,
        n: void 0,
        o: void 0,
        p: void 0,
        q: void 0,
        r: void 0,
        s: void 0,
        t: void 0,
        u: void 0,
        v: void 0,
        w: void 0,
        x: void 0,
        y: void 0,
        z: void 0
      });

      function _initializerDefineProperty(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
          enumerable: descriptor.enumerable,
          configurable: descriptor.configurable,
          writable: descriptor.writable,
          value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }

      function tryDefineGlobal (name, value) {
          const _global = typeof window === 'undefined' ? global : window;
          if (typeof _global[name] === 'undefined') {
              return (_global[name] = value);
          } else {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-return
              return _global[name];
          }
      }

      const NATIVE = true;
      tryDefineGlobal('CC_WECHAT', false);

      const WECHAT_MINI_PROGRAM = exports('el', false);
      tryDefineGlobal('CC_BAIDU', false);

      const XIAOMI = false;
      tryDefineGlobal('CC_XIAOMI', false);
      tryDefineGlobal('CC_ALIPAY', false);
      tryDefineGlobal('CC_BYTEDANCE', false);
      tryDefineGlobal('CC_OPPO', false);
      tryDefineGlobal('CC_VIVO', false);
      tryDefineGlobal('CC_HUAWEI', false);
      tryDefineGlobal('CC_COCOSPLAY', false);
      tryDefineGlobal('CC_QTT', false);
      tryDefineGlobal('CC_LINKSURE', false);

      const EDITOR$1 = exports('em', false);
      tryDefineGlobal('CC_EDITOR', false);

      const PREVIEW = false;
      tryDefineGlobal('CC_PREVIEW', false);
      tryDefineGlobal('CC_BUILD', true);

      const TEST$1 = false;
      tryDefineGlobal('CC_TEST', false);
      tryDefineGlobal('CC_DEBUG', true);
      tryDefineGlobal('CC_DEV', false);

      const MINIGAME = exports('eW', false);
      tryDefineGlobal('CC_MINIGAME', false);

      const RUNTIME_BASED = exports('eY', false);
      tryDefineGlobal('CC_RUNTIME_BASED', false);
      tryDefineGlobal('CC_SUPPORT_JIT', true);

      const JSB = exports('eX', true);
      tryDefineGlobal('CC_JSB', true);

      const _global = typeof window === 'undefined' ? global : window;

      const legacyCC = exports('bg', {
        _global
      });
      legacyCC.internal = {};

      const engineVersion = exports('eS', '3.7.3');
      _global.CocosEngine = legacyCC.ENGINE_VERSION = engineVersion;
      _global.cc = legacyCC;

      const ccwindow = exports('ca', typeof globalThis.jsb !== 'undefined' ? typeof jsb.window !== 'undefined' ? jsb.window : globalThis : globalThis);
      _global.ccwindow = ccwindow;

      const INT_BITS = 32;
      const INT_MAX = exports('ex', 0x7fffffff);
      const INT_MIN = -1 << INT_BITS - 1;
      function sign(v) {
        return (v > 0) - (v < 0);
      }
      function abs(v) {
        const mask = v >> INT_BITS - 1;
        return (v ^ mask) - mask;
      }
      function min(x, y) {
        return y ^ (x ^ y) & -(x < y);
      }
      function max(x, y) {
        return x ^ (x ^ y) & -(x < y);
      }
      function isPow2(v) {
        return !(v & v - 1) && !!v;
      }
      function log2(v) {
        let r;
        let shift;
        r = (v > 0xFFFF) << 4;
        v >>>= r;
        shift = (v > 0xFF) << 3;
        v >>>= shift;
        r |= shift;
        shift = (v > 0xF) << 2;
        v >>>= shift;
        r |= shift;
        shift = (v > 0x3) << 1;
        v >>>= shift;
        r |= shift;
        return r | v >> 1;
      }
      function log10(v) {
        return v >= 1000000000 ? 9 : v >= 100000000 ? 8 : v >= 10000000 ? 7 : v >= 1000000 ? 6 : v >= 100000 ? 5 : v >= 10000 ? 4 : v >= 1000 ? 3 : v >= 100 ? 2 : v >= 10 ? 1 : 0;
      }
      function popCount(v) {
        v -= v >>> 1 & 0x55555555;
        v = (v & 0x33333333) + (v >>> 2 & 0x33333333);
        return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24;
      }
      function countTrailingZeros(v) {
        let c = 32;
        v &= -v;

        if (v) {
          c--;
        }

        if (v & 0x0000FFFF) {
          c -= 16;
        }

        if (v & 0x00FF00FF) {
          c -= 8;
        }

        if (v & 0x0F0F0F0F) {
          c -= 4;
        }

        if (v & 0x33333333) {
          c -= 2;
        }

        if (v & 0x55555555) {
          c -= 1;
        }

        return c;
      }
      function nextPow2(v) {
        --v;
        v |= v >>> 1;
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        v |= v >>> 16;
        return v + 1;
      }
      function prevPow2(v) {
        v |= v >>> 1;
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        v |= v >>> 16;
        return v - (v >>> 1);
      }
      function parity(v) {
        v ^= v >>> 16;
        v ^= v >>> 8;
        v ^= v >>> 4;
        v &= 0xf;
        return 0x6996 >>> v & 1;
      }
      const REVERSE_TABLE = new Array(256);

      (tab => {
        for (let i = 0; i < 256; ++i) {
          let v = i;
          let r = i;
          let s = 7;

          for (v >>>= 1; v; v >>>= 1) {
            r <<= 1;
            r |= v & 1;
            --s;
          }

          tab[i] = r << s & 0xff;
        }
      })(REVERSE_TABLE);

      function reverse(v) {
        return REVERSE_TABLE[v & 0xff] << 24 | REVERSE_TABLE[v >>> 8 & 0xff] << 16 | REVERSE_TABLE[v >>> 16 & 0xff] << 8 | REVERSE_TABLE[v >>> 24 & 0xff];
      }
      function interleave2(x, y) {
        x &= 0xFFFF;
        x = (x | x << 8) & 0x00FF00FF;
        x = (x | x << 4) & 0x0F0F0F0F;
        x = (x | x << 2) & 0x33333333;
        x = (x | x << 1) & 0x55555555;
        y &= 0xFFFF;
        y = (y | y << 8) & 0x00FF00FF;
        y = (y | y << 4) & 0x0F0F0F0F;
        y = (y | y << 2) & 0x33333333;
        y = (y | y << 1) & 0x55555555;
        return x | y << 1;
      }
      function deinterleave2(v, n) {
        v = v >>> n & 0x55555555;
        v = (v | v >>> 1) & 0x33333333;
        v = (v | v >>> 2) & 0x0F0F0F0F;
        v = (v | v >>> 4) & 0x00FF00FF;
        v = (v | v >>> 16) & 0x000FFFF;
        return v << 16 >> 16;
      }
      function interleave3(x, y, z) {
        x &= 0x3FF;
        x = (x | x << 16) & 4278190335;
        x = (x | x << 8) & 251719695;
        x = (x | x << 4) & 3272356035;
        x = (x | x << 2) & 1227133513;
        y &= 0x3FF;
        y = (y | y << 16) & 4278190335;
        y = (y | y << 8) & 251719695;
        y = (y | y << 4) & 3272356035;
        y = (y | y << 2) & 1227133513;
        x |= y << 1;
        z &= 0x3FF;
        z = (z | z << 16) & 4278190335;
        z = (z | z << 8) & 251719695;
        z = (z | z << 4) & 3272356035;
        z = (z | z << 2) & 1227133513;
        return x | z << 2;
      }
      function deinterleave3(v, n) {
        v = v >>> n & 1227133513;
        v = (v | v >>> 2) & 3272356035;
        v = (v | v >>> 4) & 251719695;
        v = (v | v >>> 8) & 4278190335;
        v = (v | v >>> 16) & 0x3FF;
        return v << 22 >> 22;
      }
      function nextCombination(v) {
        const t = v | v - 1;
        return t + 1 | (~t & -~t) - 1 >>> countTrailingZeros(v) + 1;
      }

      var bits = /*#__PURE__*/Object.freeze({
        __proto__: null,
        INT_BITS: INT_BITS,
        INT_MAX: INT_MAX,
        INT_MIN: INT_MIN,
        sign: sign,
        abs: abs,
        min: min,
        max: max,
        isPow2: isPow2,
        log2: log2,
        log10: log10,
        popCount: popCount,
        countTrailingZeros: countTrailingZeros,
        nextPow2: nextPow2,
        prevPow2: prevPow2,
        parity: parity,
        reverse: reverse,
        interleave2: interleave2,
        deinterleave2: deinterleave2,
        interleave3: interleave3,
        deinterleave3: deinterleave3,
        nextCombination: nextCombination
      });
      exports('f8', bits);

      var debugInfos = {
      	"1006": "[Action step]. override me",
      	"1007": "[Action update]. override me",
      	"1008": "[Action reverse]. override me",
      	"1100": "Expected 'data' dict, but not found. Config file: %s",
      	"1101": "Please load the resource first : %s",
      	"1200": "cocos2d: Director: Error in gettimeofday",
      	"1204": "Running scene should not be null",
      	"1205": "The scene should not be null",
      	"1206": "loadScene: The scene index to load (%s) is out of range.",
      	"1207": "loadScene: Unknown name type to load: '%s'",
      	"1208": "loadScene: Failed to load scene '%s' because '%s' is already being loaded.",
      	"1209": "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
      	"1210": "Failed to preload '%s', %s",
      	"1211": "loadScene: The scene index to load (%s) is out of range.",
      	"1212": "loadScene: Unknown name type to load: '%s'",
      	"1213": "loadScene: Failed to load scene '%s' because '%s' is already loading",
      	"1214": "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
      	"1215": "Failed to preload '%s', %s",
      	"1216": "Director.runSceneImmediate: scene is not valid",
      	"1217": "Director._initOnEngineInitialized: renderer root initialization failed",
      	"1218": "Forward render pipeline initialized.",
      	"1219": "Deferred render pipeline initialized. Note that non-transparent materials with no lighting will not be rendered, such as builtin-unlit.",
      	"1220": "Failed to set shading scale, pipelineSceneData is invalid.",
      	"1221": "Setting orientation is not supported yet.",
      	"1300": "%s is not in the model pool and cannot be destroyed by destroyModel.",
      	"1400": "'%s' is deprecated, please use '%s' instead.",
      	"1404": "cc.spriteFrameCache is removed, please use cc.loader to load and cache sprite frames of atlas format.",
      	"1406": "'%s.%s' is removed",
      	"1408": "'%s' is removed",
      	"1409": "element type is wrong!",
      	"1502": "cc.scheduler.scheduleCallbackForTarget(): target should be non-null.",
      	"1503": "cc.Scheduler.pauseTarget():target should be non-null",
      	"1504": "cc.Scheduler.resumeTarget():target should be non-null",
      	"1505": "cc.Scheduler.isTargetPaused():target should be non-null",
      	"1506": "warning: you CANNOT change update priority in scheduled function",
      	"1507": "scheduler#scheduleSelector. Selector already scheduled. Updating interval from: %.4f to %.4f",
      	"1508": "Argument callback must not be empty",
      	"1509": "Argument target must be non-nullptr",
      	"1510": "cc.Scheduler: Illegal target which doesn't have id, you should do Scheduler.enableForTarget(target) before all scheduler API usage on target",
      	"1511": "cc.Scheduler: pause state of the scheduled task doesn't match the element pause state in Scheduler, the given paused state will be ignored.",
      	"1513": "cc.Scheduler: scheduler stopped using `__instanceId` as id since v2.0, you should do Scheduler.enableForTarget(target) before all scheduler API usage on target",
      	"1607": "removeFromParentAndCleanup is deprecated. Use removeFromParent instead",
      	"1619": "callback function must be non-null",
      	"1620": "interval must be positive",
      	"1623": "Set '%s' to normal node (not persist root node).",
      	"1624": "Replacing with the same sgNode",
      	"1625": "The replacement sgNode should not contain any child.",
      	"1626": "Should not set alpha via 'color', set 'opacity' please.",
      	"1627": "Not support for asynchronous creating node in SG",
      	"1632": "Node name can not include '/'.",
      	"1633": "Internal error, should not remove unknown node from parent.",
      	"1635": "reorderChild: this child is not in children list.",
      	"1636": "Node's zIndex value can't be greater than cc.macro.MAX_ZINDEX, setting to the maximum value",
      	"1637": "Node's zIndex value can't be smaller than cc.macro.MIN_ZINDEX, setting to the minimum value",
      	"1638": "Private node's zIndex can't be set, it will keep cc.macro.MIN_ZINDEX as its value",
      	"1800": "cc._EventListenerKeyboard.checkAvailable(): Invalid EventListenerKeyboard!",
      	"1801": "cc._EventListenerTouchOneByOne.checkAvailable(): Invalid EventListenerTouchOneByOne!",
      	"1802": "cc._EventListenerTouchAllAtOnce.checkAvailable(): Invalid EventListenerTouchAllAtOnce!",
      	"1803": "cc._EventListenerAcceleration.checkAvailable():_onAccelerationEvent must be non-nil",
      	"1900": "Invalid parameter.",
      	"2104": "Layer collision. The name of layer (%s) is collided with the name or value of some layer",
      	"2200": "Design resolution not valid",
      	"2201": "should set resolutionPolicy",
      	"2300": "The touches is more than MAX_TOUCHES, nUnusedIndex = %s",
      	"2402": "Forward pipeline startup failed!",
      	"3103": "cc.Texture.addImage(): path should be non-null",
      	"3119": "Lazy init texture with image element failed due to image loading failure: %s",
      	"3120": "Loading texture with unsupported type: '%s'. Add '%s' into 'cc.macro.SUPPORT_TEXTURE_FORMATS' please.",
      	"3121": "Can't find a texture format supported by the current platform! Please add a fallback format in the editor.",
      	"3122": "Error Texture in %s.",
      	"3123": "Set same texture %s.",
      	"3124": "Texture: setMipRange failed because base level is larger than max level",
      	"3300": "Rect width exceeds maximum margin: %s",
      	"3301": "Rect height exceeds maximum margin: %s",
      	"3500": "0 priority is forbidden for fixed priority since it's used for scene graph based priority.",
      	"3501": "Invalid listener type!",
      	"3502": "Can't set fixed priority with scene graph based listener.",
      	"3503": "Invalid parameters.",
      	"3504": "listener must be a cc.EventListener object when adding a fixed priority listener",
      	"3505": "The listener has been registered, please don't register it again.",
      	"3506": "Unsupported listener target.",
      	"3507": "Invalid scene graph priority!",
      	"3508": "If program goes here, there should be event in dispatch.",
      	"3509": "_inDispatch should be 1 here.",
      	"3510": "%s's scene graph node not contains in the parent's children",
      	"3511": "event is undefined",
      	"3512": "Event manager only support scene graph priority for ui nodes which contain UIComponent",
      	"3520": "Device Motion Event request permission: %s",
      	"3521": "Device Motion Event request permission failed: %s",
      	"3601": "The editor property 'playOnFocus' should be used with 'executeInEditMode' in class '%s'",
      	"3602": "Unknown editor property '%s' in class '%s'.",
      	"3603": "Use 'cc.Float' or 'cc.Integer' instead of 'cc.Number' please.",
      	"3604": "Can only indicate one type attribute for %s.",
      	"3605": "The default value of %s is not instance of %s.",
      	"3606": "No needs to indicate the '%s' attribute for %s, which its default value is type of %s.",
      	"3607": "The default value of %s must be an empty string.",
      	"3608": "The type of %s must be CCString, not String.",
      	"3609": "The type of %s must be CCBoolean, not Boolean.",
      	"3610": "The type of %s must be CCFloat or CCInteger, not Number.",
      	"3611": "Can not indicate the '%s' attribute for %s, which its default value is type of %s.",
      	"3612": "%s Just set the default value to 'new %s()' and it will be handled properly.",
      	"3613": "'No need to use 'serializable: false' or 'editorOnly: true' for the getter of '%s.%s', every getter is actually non-serialized.",
      	"3614": "Should not define constructor for cc.Component %s.",
      	"3615": "Each script can have at most one Component.",
      	"3616": "Should not specify class name %s for Component which defines in project.",
      	"3618": "ctor of '%s' can not be another CCClass",
      	"3623": "Can not use 'editor' attribute, '%s' not inherits from Components.",
      	"3625": "[isChildClassOf] superclass should be function type, not",
      	"3626": "Can't remove '%s' because '%s' depends on it.",
      	"3627": "Should not add renderer component (%s) to a Canvas node.",
      	"3628": "Should not add %s to a node which size is already used by its other component.",
      	"3633": "Properties function of '%s' should return an object!",
      	"3634": "Disallow to use '.' in property name",
      	"3637": "Can not declare %s.%s, it is already defined in the prototype of %s",
      	"3639": "Can not apply the specified attribute to the getter of '%s.%s', attribute index: %s",
      	"3640": "'%s': the setter of '%s' is already defined!",
      	"3641": "Can not construct %s because it contains object property.",
      	"3644": "Please define 'type' parameter of %s.%s as the actual constructor.",
      	"3645": "Please define 'type' parameter of %s.%s as the constructor of %s.",
      	"3646": "Unknown 'type' parameter of %s.%s：%s",
      	"3647": "The length of range array must be equal or greater than 2",
      	"3648": "Can not declare %s.%s method, it is already defined in the properties of %s.",
      	"3652": "Failed to `new %s()` under the hood, %s\nIt is used for getting default values declared in TypeScript in the first place.\nPlease ensure the constructor can be called during the script's initialization.",
      	"3653": "Please do not specifiy \"default\" attribute in decorator of \"%s\" property in \"%s\" class.\nDefault value must be initialized at their declaration:\n\n \n// Before:\n@property({\n  type: cc.SpriteFrame\n  default: null  // <--\n})\nmyProp;\n// After:\n@property({\n  type: cc.SpriteFrame\n})\nmyProp = null;   // <--",
      	"3654": "Please specifiy a default value for \"%s.%s\" property at its declaration:\n\n \n// Before:\n@property(...)\nmyProp;\n// After:\n@property(...)\nmyProp = 0;",
      	"3655": "Can not specifiy \"get\" or \"set\"  attribute in decorator for \"%s\" property in \"%s\" class.\nPlease use:\n\n \n@property(...)\nget %s () {\n    ...\n}\n@property\nset %s (value) {\n    ...\n}",
      	"3659": "Violation error: extending enumerations shall have non-overlaped member names or member values",
      	"3660": "You are explicitly specifying `undefined` type to cc property \"%s\" of cc class \"%s\".\nIs this intended? If not, this may indicate a circular reference.\nFor example:\n\n \n// foo.ts\nimport { _decorator } from 'cc';\nimport { Bar } from './bar';  // Given that './bar' also reference 'foo.ts'.\n                              // When importing './bar', execution of './bar' is hung on to wait execution of 'foo.ts',\n                              // the `Bar` imported here is `undefined` until './bar' finish its execution.\n                              // It leads to that\n@_decorator.ccclass           //  ↓\nexport class Foo {            //  ↓\n    @_decorator.type(Bar)     //  → is equivalent to `@_decorator.type(undefined)`\n    public bar: Bar;          // To eliminate this error, either:\n                              // - Refactor your module structure(recommended), or\n                              // - specify the type as cc class name: `@_decorator.type('Bar'/* or any name you specified for `Bar` */)`\n}",
      	"3700": "internal error: _prefab is undefined",
      	"3701": "Failed to load prefab asset for node '%s'",
      	"3800": "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
      	"3801": "The node can not be made persist because it's not under root node.",
      	"3802": "The node can not be made persist because it's not in current scene.",
      	"3803": "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
      	"3804": "getComponent: Type must be non-nil",
      	"3805": "Can't add component '%s' because %s already contains the same component.",
      	"3806": "Can't add component '%s' to %s because it conflicts with the existing '%s' derived component.",
      	"3807": "addComponent: Failed to get class '%s'",
      	"3808": "addComponent: Should not add component ('%s') when the scripts are still loading.",
      	"3809": "addComponent: The component to add must be a constructor",
      	"3810": "addComponent: The component to add must be child class of cc.Component",
      	"3811": "_addComponentAt: The component to add must be a constructor",
      	"3812": "_addComponentAt: Index out of range",
      	"3813": "removeComponent: Component must be non-nil",
      	"3814": "Argument must be non-nil",
      	"3815": "Component not owned by this entity",
      	"3816": "Node '%s' is already activating",
      	"3817": "Sorry, the component of '%s' which with an index of %s is corrupted! It has been removed.",
      	"3818": "Failed to read or parse project.json",
      	"3819": "Warning: target element is not a DIV or CANVAS",
      	"3820": "The renderer doesn't support the renderMode %s",
      	"3821": "Cannot change hierarchy while activating or deactivating the parent.",
      	"3822": "addComponent: Cannot add any component to the scene.",
      	"3823": "The enabled component (id: %s, name: %s) doesn't have a valid node",
      	"3900": "Invalid clip to add",
      	"3901": "Invalid clip to remove",
      	"3902": "clip is defaultClip, set force to true to force remove clip and animation state",
      	"3903": "animation state is playing, set force to true to force stop and remove clip and animation state",
      	"3904": "motion path of target [%s] in prop [%s] frame [%s] is not valid",
      	"3905": "sprite frames must be an Array.",
      	"3906": "Can't find easing type [%s]",
      	"3907": "Animation state is not playing or already removed",
      	"3912": "already-playing",
      	"3920": "Current context does not allow root motion.",
      	"3921": "You provided a ill-formed track path. The last component of track path should be property key, or the setter should not be empty.",
      	"3923": "Root motion is ignored since root bone could not be located in animation.",
      	"3924": "Root motion is ignored since the root bone could not be located in scene.",
      	"3925": "Target of hierarchy path should be of type Node.",
      	"3926": "Node \"%s\" has no path \"%s\".",
      	"3927": "Target of component path should be of type Node.",
      	"3928": "Node \"%s\" has no component \"%s\".",
      	"3929": "Target object has no property \"%s\".",
      	"3930": "Can not decide type for untyped track: runtime binding does not provide a getter.",
      	"3931": "Can not decide type for untyped track: got a unsupported value from runtime binding.",
      	"3932": "Common targets should only target Vectors/`Size`/`Color`.",
      	"3933": "Each curve that has common target should be numeric curve and targets string property.",
      	"3934": "Misconfigured legacy curve: the first keyframe value is number but others aren't.",
      	"3935": "We don't currently support conversion of \\`CubicSplineQuatValue\\`.",
      	"3936": "Instancing/Batching enabled for non-baked skinning model '%s', this may result in unexpected rendering artifacts. Consider turning it off in the material if you do not intend to do this.",
      	"3937": "Previous error occurred when instantiating animation clip %s on node %s.",
      	"3938": "'%s' is not found from '%s'. It's specified as the root node to play animation clip '%s'.",
      	"3940": "Error when animation attempted to bind material uniform target: target %s is not a material.",
      	"3941": "Error when animation attempted to bind material uniform target: material %s has no recorded pass %s.",
      	"3942": "Error when animation attempted to bind material uniform target: material %s at pass %s has no recorded uniform %s.",
      	"3943": "Error when animation attempted to bind material uniform target: material %s at pass %s's uniform %s has no recorded channel %s.",
      	"4003": "Label font size can't be shirnked less than 0!",
      	"4004": "force notify all fonts loaded!",
      	"4011": "Property spriteFrame of Font '%s' is invalid. Using system font instead.",
      	"4012": "The texture of Font '%s' must be already loaded on JSB. Using system font instead.",
      	"4013": "Sorry, lineHeight of system font not supported on JSB.",
      	"4200": "MaskType: IMAGE_STENCIL only support WebGL mode.",
      	"4201": "The alphaThreshold invalid in Canvas Mode.",
      	"4202": "The inverted invalid in Canvas Mode.",
      	"4300": "Can not found the %s page.",
      	"4301": "Can not add a page without UITransform.",
      	"4302": "Can not set the scroll view content when it hasn't UITransform or its parent hasn't UITransform.",
      	"4303": "The %s scrollBar on the '%s' node is not available, please check it.",
      	"4400": "Invalid RichText img tag! The sprite frame name can't be found in the ImageAtlas!",
      	"4500": "Graphics: There is no model in %s.",
      	"4600": "Script attached to '%s' is missing or invalid.",
      	"4700": "The dom control is not created!",
      	"4800": "unknown asset type",
      	"4901": "loadRes: should not specify the extname in %s %s",
      	"4902": "No need to release non-cached asset.",
      	"4914": "Resources url '%s' does not exist.",
      	"4915": "Pack indices and data do not match in size",
      	"4916": "Failed to download package for %s",
      	"4921": "Invalid pipe or invalid index provided!",
      	"4922": "The pipe to be inserted is already in the pipeline!",
      	"4923": "Uuid Loader: Parse asset [ %s ] failed : %s",
      	"4924": "JSON Loader: Input item doesn't contain string content",
      	"4925": "Uuid Loader: Deserialize asset [ %s ] failed : %s",
      	"4926": "Audio Downloader: no web audio context.",
      	"4927": "Audio Downloader: audio not supported on this browser!",
      	"4928": "Load %s failed!",
      	"4929": "Load Webp ( %s ) failed",
      	"4930": "Load image ( %s ) failed",
      	"4932": "Since v1.10, for any atlas (\"%s\") in the \"resources\" directory, it is not possible to find the contained SpriteFrames via `loadRes`, `getRes` or `releaseRes`. Load the SpriteAtlas first and then use `spriteAtlas.getSpriteFrame(name)` instead please.",
      	"4933": "Download Font [ %s ] failed, using Arial or system default font instead",
      	"4934": "Please assure that the full path of sub asset is correct!",
      	"4935": "Failed to skip prefab asset while deserializing PrefabInfo",
      	"5000": "You are trying to destroy a object twice or more.",
      	"5001": "object not yet destroyed",
      	"5100": "Not a plist file!",
      	"5200": "Warning: localStorage isn't enabled. Please confirm browser cookie or privacy option",
      	"5201": "browser don't support web audio",
      	"5202": "This feature supports WebGL render mode only.",
      	"5300": "Type of target to deserialize not matched with data: target is %s, data is %s",
      	"5301": "Can not find script '%s'",
      	"5302": "Can not find class '%s'",
      	"5303": "Failed to deserialize %s, missing _deserialize function.",
      	"5304": "Unable to deserialize version %s data.",
      	"5402": "cc.js.addon called on non-object:",
      	"5403": "cc.js.mixin: arguments must be type object:",
      	"5404": "The base class to extend from must be non-nil",
      	"5405": "The class to extend must be non-nil",
      	"5406": "Class should be extended before assigning any prototype members.",
      	"5500": "'notify' can not be used in 'get/set' !",
      	"5501": "'notify' must be used with 'default' !",
      	"5507": "The 'default' attribute of '%s.%s' must be an array",
      	"5508": "Invalid type of %s.%s",
      	"5510": "The 'type' attribute of '%s.%s' can not be 'Number', use cc.Float or cc.Integer instead please.",
      	"5511": "The 'type' attribute of '%s.%s' is undefined when loading script",
      	"5512": "Can not serialize '%s.%s' because the specified type is anonymous, please provide a class name or set the 'serializable' attribute of '%s.%s' to 'false'.",
      	"5513": "The 'default' value of '%s.%s' should not be used with a 'get' function.",
      	"5514": "The 'default' value of '%s.%s' should not be used with a 'set' function.",
      	"5515": "The 'default' value of '%s.%s' can not be an constructor. Set default to null please.",
      	"5517": "'%s.%s' hides inherited property '%s.%s'. To make the current property override that implementation, add the `override: true` attribute please.",
      	"5601": "Can not get current scene.",
      	"5602": "Scene is destroyed",
      	"5603": "reference node is destroyed",
      	"5700": "no %s or %s on %s",
      	"5800": "%s.lerp not yet implemented.",
      	"5801": "%s.clone not yet implemented.",
      	"5802": "%s.equals not yet implemented.",
      	"5900": "MotionStreak only support WebGL mode.",
      	"5901": "cc.MotionStreak.getOpacity has not been supported.",
      	"5902": "cc.MotionStreak.setOpacity has not been supported.",
      	"6000": "Custom should not be false if file is not specified.",
      	"6001": "The new %s must not be NaN",
      	"6017": "Incomplete or corrupt PNG file",
      	"6018": "Invalid filter algorithm: %s",
      	"6019": "Invalid byte order value.",
      	"6020": "You forgot your towel!",
      	"6021": "Unknown Field Tag: %s",
      	"6022": "Too many bits requested",
      	"6023": "No bits requested",
      	"6024": "Cannot recover from missing StripByteCounts",
      	"6025": "Cannot handle sub-byte bits per sample",
      	"6026": "Cannot handle sub-byte bits per pixel",
      	"6027": "Palette image missing color map",
      	"6028": "Unknown Photometric Interpretation: %s",
      	"6029": "Unkown error",
      	"6030": "cc.ParticleSystem: error decoding or ungzipping textureImageData",
      	"6031": "cc.ParticleSystem: unknown image format with Data",
      	"6032": "cc.ParticleSystem.initWithDictionary() : error loading the texture",
      	"6033": "cc.ParticleSystem: not allowing create to be invoked twice with different particle system",
      	"6034": "cc.ParticleSystem: shouldn't be initialized repetitively, otherwise there will be potential leak",
      	"6035": "cc.ParticleSystem: change material failed, please use proper particle material",
      	"6036": "cc.ParticleSystem: life time should bigger than 1 or buffer will be insufficient",
      	"6400": "asset.url is not usable in core process",
      	"6402": "AssetLibrary has already been initialized!",
      	"6500": "Widget target must be one of the parent nodes of it",
      	"6600": "collider not added or already removed",
      	"6601": "Can't find testFunc for (%s, $s).",
      	"6700": "Can't init canvas '%s' because it conflicts with the existing '%s', the scene should only have one active canvas at the same time.",
      	"6705": "Argument must be non-nil",
      	"6706": "Priority can't be set in RenderRoot2D node",
      	"6800": "Callback of event must be non-nil",
      	"6801": "The message must be provided",
      	"6900": "The thing you want to instantiate must be an object",
      	"6901": "The thing you want to instantiate is nil",
      	"6902": "The thing you want to instantiate is destroyed",
      	"6903": "The instantiate method for given asset do not implemented",
      	"6904": "Can not instantiate array",
      	"6905": "Can not instantiate DOM element",
      	"7100": "%s already defined in Enum.",
      	"7101": "Sorry, 'cc.Enum' not available on this platform, please report this error here: <https://github.com/cocos-creator/engine/issues/new>",
      	"7200": "Method 'initWithTMXFile' is no effect now, please set property 'tmxAsset' instead.",
      	"7201": "Method 'initWithXML' is no effect now, please set property 'tmxAsset' instead.",
      	"7202": "Add component TiledLayer into node failed.",
      	"7203": "Property 'mapLoaded' is unused now. Please write the logic to the callback 'start'.",
      	"7210": "TMX Hexa zOrder not supported",
      	"7211": "TMX invalid value",
      	"7215": "cocos2d: Warning: TMX Layer %s has no tiles",
      	"7216": "cocos2d: TMXFormat: Unsupported TMX version: %s",
      	"7217": "cocos2d: TMXFomat: Unsupported orientation: %s",
      	"7218": "cc.TMXMapInfo.parseXMLFile(): unsupported compression method",
      	"7219": "cc.TMXMapInfo.parseXMLFile(): Only base64 and/or gzip/zlib maps are supported",
      	"7221": "cc.TMXMapInfo.parseXMLFile(): Texture '%s' not found.",
      	"7222": "Parse %s failed.",
      	"7236": "cc.TMXLayer.getTileAt(): TMXLayer: the tiles map has been released",
      	"7237": "cc.TMXLayer.getTileGIDAt(): TMXLayer: the tiles map has been released",
      	"7238": "cc.TMXLayer.setTileGID(): TMXLayer: the tiles map has been released",
      	"7239": "cc.TMXLayer.setTileGID(): invalid gid: %s",
      	"7240": "cc.TMXLayer.getTileFlagsAt(): TMXLayer: the tiles map has been released",
      	"7241": "cc.TiledMap.initWithXML(): Map not found. Please check the filename.",
      	"7401": "Failed to set _defaultArmatureIndex for '%s' because the index is out of range.",
      	"7402": "Failed to set _animationIndex for '%s' because the index is out of range.",
      	"7501": "Failed to set _defaultSkinIndex for '%s' because the index is out of range.",
      	"7502": "Failed to set _animationIndex for '%s' because its skeletonData is invalid.",
      	"7503": "Failed to set _animationIndex for '%s' because the index is out of range.",
      	"7504": "Can not render dynamic created SkeletonData",
      	"7506": "Failed to load spine atlas '$s'",
      	"7507": "Please re-import '%s' because its textures is not initialized! (This workflow will be improved in the future.)",
      	"7508": "The atlas asset of '%s' is not exists!",
      	"7509": "Spine: Animation not found: %s",
      	"7510": "Spine: Animation not found: %s",
      	"7600": "The context of RenderTexture is invalid.",
      	"7601": "cc.RenderTexture._initWithWidthAndHeightForWebGL() : only RGB and RGBA formats are valid for a render texture;",
      	"7602": "Could not attach texture to the framebuffer",
      	"7603": "clearDepth isn't supported on Cocos2d-Html5",
      	"7604": "saveToFile isn't supported on Cocos2d-Html5",
      	"7605": "newCCImage isn't supported on Cocos2d-Html5",
      	"7606": "GFXTexture is null",
      	"7607": "readPixels buffer size smaller than %d",
      	"7700": "On the web is always keep the aspect ratio",
      	"7701": "Can't know status",
      	"7702": "Video player's duration is not ready to get now!",
      	"7703": "Video Downloader: video not supported on this browser!",
      	"7800": "Web does not support loading",
      	"7801": "Web does not support query history",
      	"7802": "Web does not support query history",
      	"7803": "The current browser does not support the GoBack",
      	"7804": "The current browser does not support the GoForward",
      	"7805": "Web does not support zoom",
      	"7900": "cc.math.Matrix3.assign(): current matrix equals matIn",
      	"7901": "cc.math.mat4Assign(): pOut equals pIn",
      	"7902": "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
      	"7903": "cc.math.Matrix4 equal: pMat1 and pMat2 are same object.",
      	"7904": "cc.math.Matrix4.extractPlane: Invalid plane index",
      	"7905": "cc.math.mat4Assign(): pOut equals pIn",
      	"7906": "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
      	"7907": "cc.math.Matrix4 equals: pMat1 and pMat2 are same object.",
      	"7908": "Invalid matrix mode specified",
      	"7909": "current quaternion is an invalid value",
      	"8000": "Can't handle this field type or size",
      	"8001": "No bytes requested",
      	"8002": "Too many bytes requested",
      	"8003": "Missing StripByteCounts!",
      	"8100": "cocos2d: ERROR: Failed to compile shader:\n %s",
      	"8101": "cocos2d: ERROR: Failed to compile vertex shader",
      	"8102": "cocos2d: ERROR: Failed to compile fragment shader",
      	"8103": "cc.GLProgram.link(): Cannot link invalid program",
      	"8104": "cocos2d: ERROR: Failed to link program: %s",
      	"8105": "cocos2d: cc.shaderCache._loadDefaultShader, error shader type",
      	"8106": "Please load the resource firset : %s",
      	"8107": "cc.GLProgram.getUniformLocationForName(): uniform name should be non-null",
      	"8108": "cc.GLProgram.getUniformLocationForName(): Invalid operation. Cannot get uniform location when program is not initialized",
      	"8109": "modelView matrix is undefined.",
      	"8200": "Please set node's active instead of rigidbody's enabled.",
      	"8300": "Should only one camera exists, please check your project.",
      	"8301": "Camera does not support Canvas Mode.",
      	"8302": "Camera.viewport is deprecated, please use setViewportInOrientedSpace instead.",
      	"8400": "Wrong type arguments, 'filePath' must be a String.",
      	"9000": "Stencil manager does not support level bigger than %d in this device.",
      	"9001": "Stencil manager is already empty, cannot pop any mask",
      	"9002": "Failed to request any buffer from a mesh buffer without accessor",
      	"9003": "The internal state of LinearBufferAccessor have severe issue and irreversible, please check the reason",
      	"9004": "Failed to allocate chunk in StaticVBAccessor, the requested buffer might be too large: %d bytes",
      	"9005": "BATCHER2D_MEM_INCREMENT is too large, the Max value for BATCHER2D_MEM_INCREMENT is 2303KB (smaller than 65536 *9* 4 / 1024 = 2304KB)",
      	"9006": "QuadRenderData is removed, please use MeshRenderData instead.",
      	"9007": "Since v3.6, Because mask changes the inheritance relationship, you can directly manipulate the rendering components under the same node to complete the operation.",
      	"9100": "texture size exceeds current device limits %d/%d",
      	"9201": "Cannot access game frame or container.",
      	"9202": "Setting window size is not supported.",
      	"9300": "The current buffer beyond the limit in ui static component, please reduce the amount",
      	"9301": "The UI has not been initialized",
      	"9302": "Can't getGFXSampler with out device",
      	"9600": "[Physics]: please check to see if physics modules are included",
      	"9610": "[Physics]: cannon.js physics system doesn't support capsule collider",
      	"9611": "[Physics]: builtin physics system doesn't support mesh collider",
      	"9612": "[Physics]: builtin physics system doesn't support cylinder collider",
      	"9620": "[Physics][Ammo]: changing the mesh is not supported after the initialization is completed",
      	"10001": "The sub-mesh contains %d vertices, which beyonds the capability (%d vertices most) of renderer of your platform.",
      	"10002": "Sub-mesh may include at most %d morph targets, but you specified %d.",
      	"11000": "WebGL context lost.",
      	"12001": "BlendFactors are disabled when using custom material, please modify the blend state in the material instead.",
      	"12002": "Can't add renderable component to this node because it already have one.",
      	"12004": "SubModel can only support %d passes.",
      	"12005": "Material already initialized, request aborted.",
      	"12006": "Pass already destroyed.",
      	"12007": "This is old usage, please swap the parameters.",
      	"12008": "GeometryRenderer: too many lines.",
      	"12009": "GeometryRenderer: too many triangles.",
      	"12010": "PassUtils: illegal uniform handle, accessing uniform at offset %d",
      	"12011": "Pass: setUniform is invoked with incompatible uniform data type for binding %d, expected type is %s",
      	"12100": "The font size is too big to be fitted into texture atlas. Please switch to other label cache modes or choose a smaller font size.",
      	"12101": "The asset %s has been destroyed!",
      	"13100": "Incorrect CCON magic.",
      	"13101": "Unknown CCON version number: %d.",
      	"13102": "CCON Format error.",
      	"13103": "Can not encode CCON binary: lack of text encoder.",
      	"13104": "Can not decode CCON binary: lack of text decoder.",
      	"14000": "Graph update has been interrupted since too many transitions(greater than %s) occurred during one frame.",
      	"14100": "Pool.destroy no longer take a function as parameter, Please specify destruct function in the construction of Pool instead",
      	"14200": "Can not update a static mesh.",
      	"14201": "The primitiveIndex is out of range.",
      	"14300": "Can not keep world transform due to the zero scaling of parent node",
      	"14400": "Spline error: less than 2 knots.",
      	"14401": "Spline error: less than 4 knots or not a multiple of 4.\n\n<!-- Rendering algorithm reserved: 15000 - 16000 -->",
      	"15000": "Can not find corresponding diffuse map for environment lighting, use hemisphere diffuse instead, change environment lighting type to regenerate diffuse map",
      	"15001": "Can not find environment map, disable IBL lighting",
      	"15002": "Diffuse map resource is missing, please change environment lighting type to regenerate resource",
      	"15003": "The shadow visible distance is so small that CSM stratification is not effective, Please change the value of shadowDistance so that it is 10 times greater than 0.1",
      	"15004": "The native folder may be generated from older versions, please refer https://docs.cocos.com/creator/manual/en/release-notes/ to upgrade.",
      	"15100": "Camera '%s' clear flag is skybox, but skybox is disabled,  may cause strange background effect, please set camera clear flag to solid color.",
      	"16000": "'%s' is deprecated since v%s.",
      	"16001": "'%s' is deprecated since v%s, please use '%s' instead.",
      	"16002": "'%s' is removed since v%s.",
      	"16003": "'%s' is removed since v%s, please use '%s' instead.",
      	"16101": "The effect('%s') you are looking for does not exist, please confirm the effect name in the editor. NOTE: Since 3.6, the name of the built-in effect has been changed to its name in the editor, please check it out. More information please refer to https://docs.cocos.com/creator/manual/en/shader/effect-inspector.html",
      	"16201": "The asset replacing failed, can not found override asset('%s') for '%s'",
      	"16301": "node '%s' doesn't have any ModelRenderer component, this component will not work. please add ModelRenderer component first",
      	"16302": "There is no reflection probe in the scene or no probe is near the current object. No reflection probe will take effect on this object. Please create a new reflection probe or move existing ones closer.",
      	"0100": "%s not yet implemented.",
      	"0200": "You should specify a valid DOM canvas element."
      };

      const ccdocument = ccwindow.document;
      let logList = null;
      let ccLog = console.log.bind(console);
      let ccWarn = ccLog;
      let ccError = ccLog;

      let ccAssert = (condition, message, ...optionalParams) => {
        if (!condition) {
          console.log(`ASSERT: ${formatString(message, ...optionalParams)}`);
        }
      };

      let ccDebug = ccLog;

      function formatString(message, ...optionalParams) {
        return legacyCC.js.formatStr.apply(null, [message].concat(optionalParams));
      }

      function log(message, ...optionalParams) {
        return ccLog(message, ...optionalParams);
      }
      function warn(message, ...optionalParams) {
        return ccWarn(message, ...optionalParams);
      }
      function error(message, ...optionalParams) {
        return ccError(message, ...optionalParams);
      }
      function assert(value, message, ...optionalParams) {
        return ccAssert(value, message, ...optionalParams);
      }
      function debug(...data) {
        return ccDebug(...data);
      }
      function _resetDebugSetting(mode) {
        ccLog = ccWarn = ccError = ccAssert = ccDebug = () => {};

        if (mode === DebugMode.NONE) {
          return;
        }

        if (mode > DebugMode.ERROR) {
          const logToWebPage = msg => {
            if (!legacyCC.game.canvas) {
              return;
            }

            if (!logList) {
              const logDiv = ccdocument.createElement('Div');
              logDiv.setAttribute('id', 'logInfoDiv');
              logDiv.setAttribute('width', '200');
              logDiv.setAttribute('height', legacyCC.game.canvas.height);
              const logDivStyle = logDiv.style;
              logDivStyle.zIndex = '99999';
              logDivStyle.position = 'absolute';
              logDivStyle.top = logDivStyle.left = '0';
              logList = ccdocument.createElement('textarea');
              logList.setAttribute('rows', '20');
              logList.setAttribute('cols', '30');
              logList.setAttribute('disabled', 'true');
              const logListStyle = logList.style;
              logListStyle.backgroundColor = 'transparent';
              logListStyle.borderBottom = '1px solid #cccccc';
              logListStyle.borderTopWidth = logListStyle.borderLeftWidth = logListStyle.borderRightWidth = '0px';
              logListStyle.borderTopStyle = logListStyle.borderLeftStyle = logListStyle.borderRightStyle = 'none';
              logListStyle.padding = '0px';
              logListStyle.margin = '0px';
              logDiv.appendChild(logList);
              legacyCC.game.canvas.parentNode.appendChild(logDiv);
            }

            logList.value = `${logList.value + msg}\r\n`;
            logList.scrollTop = logList.scrollHeight;
          };

          ccError = (message, ...optionalParams) => {
            logToWebPage(`ERROR :  ${formatString(message, ...optionalParams)}`);
          };

          ccAssert = (condition, message, ...optionalParams) => {
            if (!condition) {
              logToWebPage(`ASSERT: ${formatString(message, ...optionalParams)}`);
            }
          };

          if (mode !== DebugMode.ERROR_FOR_WEB_PAGE) {
            ccWarn = (message, ...optionalParams) => {
              logToWebPage(`WARN :  ${formatString(message, ...optionalParams)}`);
            };
          }

          if (mode === DebugMode.INFO_FOR_WEB_PAGE) {
            ccLog = (message, ...optionalParams) => {
              logToWebPage(formatString(message, ...optionalParams));
            };
          }
        } else if (console) {
          if (!console.error) {
            console.error = console.log;
          }

          if (!console.warn) {
            console.warn = console.log;
          }

          if ( console.error.bind) {
            ccError = console.error.bind(console);
          } else {
            ccError =  console.error ;
          }

          ccAssert = (condition, message, ...optionalParams) => {
            if (!condition) {
              const errorText = formatString(message, ...optionalParams);

              {
                throw new Error(errorText);
              }
            }
          };
        }

        if (mode !== DebugMode.ERROR) {
          if (console.warn.bind) {
            ccWarn = console.warn.bind(console);
          } else {
            ccWarn =  console.warn ;
          }
        }

        if (mode <= DebugMode.INFO) {
          {
            if (scriptEngineType === 'JavaScriptCore') {
              ccLog = (message, ...optionalParams) => console.log.apply(console, [message, ...optionalParams]);
            } else {
              ccLog = console.log;
            }
          }
        }

        if (mode <= DebugMode.VERBOSE) {
          if (typeof console.debug === 'function') {
            const vendorDebug = console.debug.bind(console);

            ccDebug = (...data) => vendorDebug(...data);
          }
        }
      }
      function _throw(error_) {
        {
          const stack = error_.stack;

          if (stack) {
            error( `${error_}\n${stack}` );
          } else {
            error(error_);
          }

          return undefined;
        }
      }

      function getTypedFormatter(type) {
        return (id, ...args) => {
          const msg =  debugInfos[id] || 'unknown id' ;

          if (args.length === 0) {
            return msg;
          }

          return  formatString(msg, ...args) ;
        };
      }

      const logFormatter = getTypedFormatter();
      function logID(id, ...optionalParams) {
        log(logFormatter(id, ...optionalParams));
      }
      const warnFormatter = getTypedFormatter();
      function warnID(id, ...optionalParams) {
        warn(warnFormatter(id, ...optionalParams));
      }
      const errorFormatter = getTypedFormatter();
      function errorID(id, ...optionalParams) {
        error(errorFormatter(id, ...optionalParams));
      }
      const assertFormatter = getTypedFormatter();
      function assertID(condition, id, ...optionalParams) {
        if (condition) {
          return;
        }

        assert(false, assertFormatter(id, ...optionalParams));
      }
      let DebugMode;

      (function (DebugMode) {
        DebugMode[DebugMode["NONE"] = 0] = "NONE";
        DebugMode[DebugMode["VERBOSE"] = 1] = "VERBOSE";
        DebugMode[DebugMode["INFO"] = 2] = "INFO";
        DebugMode[DebugMode["WARN"] = 3] = "WARN";
        DebugMode[DebugMode["ERROR"] = 4] = "ERROR";
        DebugMode[DebugMode["INFO_FOR_WEB_PAGE"] = 5] = "INFO_FOR_WEB_PAGE";
        DebugMode[DebugMode["WARN_FOR_WEB_PAGE"] = 6] = "WARN_FOR_WEB_PAGE";
        DebugMode[DebugMode["ERROR_FOR_WEB_PAGE"] = 7] = "ERROR_FOR_WEB_PAGE";
      })(DebugMode || (DebugMode = exports('fE', {})));

      function getError(errorId, ...param) {
        return errorFormatter(errorId, ...param);
      }
      function isDisplayStats() {
        return legacyCC.profiler ? legacyCC.profiler.isShowingStats() : false;
      }
      function setDisplayStats(displayStats) {
        if (legacyCC.profiler) {
          displayStats ? legacyCC.profiler.showStats() : legacyCC.profiler.hideStats();
        }
      }

      var debug$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        log: log,
        warn: warn,
        error: error,
        assert: assert,
        debug: debug,
        _resetDebugSetting: _resetDebugSetting,
        _throw: _throw,
        logID: logID,
        warnID: warnID,
        errorID: errorID,
        assertID: assertID,
        get DebugMode () { return DebugMode; },
        getError: getError,
        isDisplayStats: isDisplayStats,
        setDisplayStats: setDisplayStats
      });
      exports('e5', debug$1);

      let defaultLogTimes = 10;
      function setDefaultLogTimes(times) {
        if (times > 0) {
          defaultLogTimes = times;
        }
      }
      let replaceProperty;
      let removeProperty;
      let markAsWarning;
      let replacePropertyLog;
      let markAsWarningLog;
      let removePropertyLog;
      let messageID = 0;
      const messageMap = new Map();

      replacePropertyLog = (n, dp, n2, newp, f, id, s) => {
        const item = messageMap.get(id);

        if (item && item.logTimes > item.count) {
          f(`'%s' is deprecated, please use '%s' instead. ${s}`, `${n}.${dp}`, `${n2}.${newp}`);
          item.count++;
        }
      };

      replaceProperty = exports('ce', (owner, ownerName, properties) => {
        if (owner == null) return;
        properties.forEach(item => {
          const id = messageID++;
          messageMap.set(id, {
            id,
            count: 0,
            logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
          });
          const target = item.target != null ? item.target : owner;
          const newName = item.newName != null ? item.newName : item.name;
          const targetName = item.targetName != null ? item.targetName : ownerName;
          const sameTarget = target === owner;
          const suggest = item.suggest ? `(${item.suggest})` : '';

          if (item.customFunction != null) {
            owner[item.name] = function () {
              replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
              return item.customFunction.call(this, ...arguments);
            };
          } else if (item.customSetter != null || item.customGetter != null) {
            const hasSetter = item.customSetter != null;
            const hasGetter = item.customGetter != null;

            if (hasSetter && hasGetter) {
              Object.defineProperty(owner, item.name, {
                get() {
                  replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                  return item.customGetter.call(this);
                },

                set(v) {
                  replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                  item.customSetter.call(this, v);
                },

                enumerable: false
              });
            } else if (hasSetter) {
              Object.defineProperty(owner, item.name, {
                set(v) {
                  replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                  item.customSetter.call(this, v);
                },

                enumerable: false
              });
            } else if (hasGetter) {
              Object.defineProperty(owner, item.name, {
                get() {
                  replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                  return item.customGetter.call(this);
                },

                enumerable: false
              });
            }
          } else {
            Object.defineProperty(owner, item.name, {
              get() {
                replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                return sameTarget ? this[newName] : target[newName];
              },

              set(v) {
                replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);

                if (sameTarget) {
                  this[newName] = v;
                } else {
                  target[newName] = v;
                }
              },

              enumerable: false
            });
          }
        });
      });

      removePropertyLog = (n, dp, f, id, s) => {
        const item = messageMap.get(id);

        if (item && item.logTimes > item.count) {
          f(`'%s' has been removed. ${s}`, `${n}.${dp}`);
          item.count++;
        }
      };

      removeProperty = exports('cc', (owner, ownerName, properties) => {
        if (owner == null) return;
        properties.forEach(item => {
          const id = messageID++;
          messageMap.set(id, {
            id,
            count: 0,
            logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
          });
          const suggest = item.suggest ? `(${item.suggest})` : '';
          Object.defineProperty(owner, item.name, {
            get() {
              return removePropertyLog(ownerName, item.name, error, id, suggest);
            },

            set() {
              removePropertyLog(ownerName, item.name, error, id, suggest);
            },

            enumerable: false
          });
        });
      });

      markAsWarningLog = (n, dp, f, id, s) => {
        const item = messageMap.get(id);

        if (item && item.logTimes > item.count) {
          f(`'%s' is deprecated. ${s}`, `${n}.${dp}`);
          item.count++;
        }
      };

      markAsWarning = exports('d0', (owner, ownerName, properties) => {
        if (owner == null) return;

        const _defaultGetSet = (d, n, dp, f, id, s) => {
          if (d.get) {
            const oldGet = d.get;

            d.get = function () {
              markAsWarningLog(n, dp, f, id, s);
              return oldGet.call(this);
            };
          }

          if (d.set) {
            const oldSet = d.set;

            d.set = function (v) {
              markAsWarningLog(n, dp, f, id, s);
              oldSet.call(this, v);
            };
          }

          Object.defineProperty(owner, dp, d);
        };

        properties.forEach(item => {
          const deprecatedProp = item.name;
          const descriptor = Object.getOwnPropertyDescriptor(owner, deprecatedProp);

          if (!descriptor || !descriptor.configurable) {
            return;
          }

          const id = messageID++;
          messageMap.set(id, {
            id,
            count: 0,
            logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
          });
          const suggest = item.suggest ? `(${item.suggest})` : '';

          if (typeof descriptor.value !== 'undefined') {
            if (typeof descriptor.value === 'function') {
              const oldValue = descriptor.value;

              owner[deprecatedProp] = function () {
                markAsWarningLog(ownerName, deprecatedProp, warn, id, suggest);
                return oldValue.call(this, ...arguments);
              };
            } else {
              let oldValue = descriptor.value;
              Object.defineProperty(owner, deprecatedProp, {
                configurable: true,

                get() {
                  markAsWarningLog(ownerName, deprecatedProp, warn, id, suggest);
                  return oldValue;
                }

              });

              if (descriptor.writable) {
                Object.defineProperty(owner, deprecatedProp, {
                  set(value) {
                    markAsWarningLog(ownerName, deprecatedProp, warn, id, suggest);
                    oldValue = value;
                  }

                });
              }
            }
          } else {
            _defaultGetSet(descriptor, ownerName, deprecatedProp, warn, id, suggest);
          }

          Object.defineProperty(owner, deprecatedProp, {
            enumerable: false
          });
        });
      });

      const topLevelDeprecateList = {};
      function deprecateModuleExportedName(deprecateList) {
        for (let deprecateName in deprecateList) {
          const deprecateInfo = deprecateList[deprecateName];
          topLevelDeprecateList[deprecateName] = deprecateInfo;
        }
      }

      function _checkObsoleteByName(checkName) {
        const deprecateInfo = topLevelDeprecateList[checkName];

        if (!deprecateInfo) {
          return;
        }

        const {
          newName,
          since,
          removed
        } = deprecateInfo;

        if (removed) {
          if (newName) {
            errorID(16003, checkName, since, newName);
          } else {
            errorID(16002, checkName, since);
          }
        } else if (newName) {
          warnID(16001, checkName, since, newName);
        } else {
          warnID(16000, checkName, since);
        }
      }

      function __checkObsolete__(checkList) {
        for (let checkName of checkList) {
          _checkObsoleteByName(checkName);
        }
      }

      let _cachedProxy;

      function __checkObsoleteInNamespace__(ccNamespace) {
        if (!_cachedProxy) {
          if (typeof Proxy === 'undefined') {
            _cachedProxy = {};
          } else {
            _cachedProxy = new Proxy(ccNamespace, {
              get(target, name, receiver) {
                _checkObsoleteByName(name);

                return Reflect.get(target, name, receiver);
              }

            });
          }
        }

        return _cachedProxy;
      }

      const NonUuidMark = '.';
      class IDGenerator {
        constructor(category) {
          this.id = void 0;
          this.prefix = void 0;
          this.id = 0 | Math.random() * 998;
          this.prefix = category ? category + NonUuidMark : '';
        }

        getNewId() {

          return this.prefix + (++this.id).toString();
        }

      }
      IDGenerator.global = new IDGenerator('global');

      const tempCIDGenerator = new IDGenerator('TmpCId.');
      const aliasesTag = typeof Symbol === 'undefined' ? '__aliases__' : Symbol('[[Aliases]]');
      const classNameTag = '__classname__';
      const classIdTag = '__cid__';
      function isNumber(object) {
        return typeof object === 'number' || object instanceof Number;
      }
      function isString(object) {
        return typeof object === 'string' || object instanceof String;
      }
      function isEmptyObject(obj) {
        for (const key in obj) {
          return false;
        }

        return true;
      }
      const value = exports('dK', (() => {
        const descriptor = {
          value: undefined,
          enumerable: false,
          writable: false,
          configurable: true
        };
        return (object, propertyName, value_, writable, enumerable) => {
          descriptor.value = value_;
          descriptor.writable = writable;
          descriptor.enumerable = enumerable;
          Object.defineProperty(object, propertyName, descriptor);
          descriptor.value = undefined;
        };
      })());
      const getset = (() => {
        const descriptor = {
          get: undefined,
          set: undefined,
          enumerable: false
        };
        return (object, propertyName, getter, setter, enumerable = false, configurable = false) => {
          if (typeof setter === 'boolean') {
            console.log('Set `setter` to boolean is deprecated. Please don not use like this again.');
            enumerable = setter;
            setter = undefined;
          }

          descriptor.get = getter;
          descriptor.set = setter;
          descriptor.enumerable = enumerable;
          descriptor.configurable = configurable;
          Object.defineProperty(object, propertyName, descriptor);
          descriptor.get = undefined;
          descriptor.set = undefined;
        };
      })();
      const get = (() => {
        const descriptor = {
          get: undefined,
          enumerable: false,
          configurable: false
        };
        return (object, propertyName, getter, enumerable, configurable) => {
          descriptor.get = getter;
          descriptor.enumerable = enumerable;
          descriptor.configurable = configurable;
          Object.defineProperty(object, propertyName, descriptor);
          descriptor.get = undefined;
        };
      })();
      const set = (() => {
        const descriptor = {
          set: undefined,
          enumerable: false,
          configurable: false
        };
        return (object, propertyName, setter, enumerable, configurable) => {
          descriptor.set = setter;
          descriptor.enumerable = enumerable;
          descriptor.configurable = configurable;
          Object.defineProperty(object, propertyName, descriptor);
          descriptor.set = undefined;
        };
      })();
      function createMap(forceDictMode) {
        const map = Object.create(null);

        if (forceDictMode) {
          const INVALID_IDENTIFIER_1 = '.';
          const INVALID_IDENTIFIER_2 = '/';
          map[INVALID_IDENTIFIER_1] = 1;
          map[INVALID_IDENTIFIER_2] = 1;
          delete map[INVALID_IDENTIFIER_1];
          delete map[INVALID_IDENTIFIER_2];
        }

        return map;
      }
      function getClassName(objOrCtor) {
        if (typeof objOrCtor === 'function') {
          const prototype = objOrCtor.prototype;

          if (prototype && prototype.hasOwnProperty(classNameTag) && prototype[classNameTag]) {
            return prototype[classNameTag];
          }

          let ret = '';

          if (objOrCtor.name) {
            ret = objOrCtor.name;
          }

          if (objOrCtor.toString) {
            let arr;
            const str = objOrCtor.toString();

            if (str.charAt(0) === '[') {
              arr = /\[\w+\s*(\w+)\]/.exec(str);
            } else {
              arr = /function\s*(\w+)/.exec(str);
            }

            if (arr && arr.length === 2) {
              ret = arr[1];
            }
          }

          return ret !== 'Object' ? ret : '';
        } else if (objOrCtor && objOrCtor.constructor) {
          return getClassName(objOrCtor.constructor);
        }

        return '';
      }
      function obsolete(object, obsoleted, newExpr, writable) {
        const extractPropName = /([^.]+)$/;
        const oldProp = extractPropName.exec(obsoleted)[0];
        const newProp = extractPropName.exec(newExpr)[0];

        function getter() {

          return this[newProp];
        }

        function setter(value_) {

          this[newProp] = value_;
        }

        if (writable) {
          getset(object, oldProp, getter, setter);
        } else {
          get(object, oldProp, getter);
        }
      }
      function obsoletes(obj, objName, props, writable) {
        for (const obsoleted in props) {
          const newName = props[obsoleted];
          obsolete(obj, `${objName}.${obsoleted}`, newName, writable);
        }
      }
      const REGEXP_NUM_OR_STR = /(%d)|(%s)/;
      const REGEXP_STR = /%s/;
      function formatStr(msg, ...subst) {
        if (arguments.length === 0) {
          return '';
        }

        if (subst.length === 0) {
          return `${msg}`;
        }

        const hasSubstitution = typeof msg === 'string' && REGEXP_NUM_OR_STR.test(msg);

        if (hasSubstitution) {
          for (const arg of subst) {
            const regExpToTest = typeof arg === 'number' ? REGEXP_NUM_OR_STR : REGEXP_STR;

            if (regExpToTest.test(msg)) {
              const notReplaceFunction = `${arg}`;
              msg = msg.replace(regExpToTest, notReplaceFunction);
            } else {
              msg += ` ${arg}`;
            }
          }
        } else {
          for (const arg of subst) {
            msg += ` ${arg}`;
          }
        }

        return msg;
      }
      function shiftArguments() {
        const len = arguments.length - 1;
        const args = new Array(len);

        for (let i = 0; i < len; ++i) {
          args[i] = arguments[i + 1];
        }

        return args;
      }
      function getPropertyDescriptor(object, propertyName) {
        while (object) {
          const pd = Object.getOwnPropertyDescriptor(object, propertyName);

          if (pd) {
            return pd;
          }

          object = Object.getPrototypeOf(object);
        }

        return null;
      }

      function _copyProp(name, source, target) {
        const pd = getPropertyDescriptor(source, name);

        if (pd) {
          Object.defineProperty(target, name, pd);
        }
      }

      function copyAllProperties(source, target, excepts) {
        const propertyNames = Object.getOwnPropertyNames(source);

        for (let i = 0, len = propertyNames.length; i < len; ++i) {
          const propertyName = propertyNames[i];

          if (excepts.indexOf(propertyName) !== -1) {
            continue;
          }

          _copyProp(propertyName, source, target);
        }
      }
      function addon(object, ...sources) {
        object = object || {};

        for (const source of sources) {
          if (source) {
            if (typeof source !== 'object') {
              errorID(5402, source);
              continue;
            }

            for (const name in source) {
              if (!(name in object)) {
                _copyProp(name, source, object);
              }
            }
          }
        }

        return object;
      }
      function mixin(object, ...sources) {
        object = object || {};

        for (const source of sources) {
          if (source) {
            if (typeof source !== 'object') {
              errorID(5403, source);
              continue;
            }

            for (const name in source) {
              _copyProp(name, source, object);
            }
          }
        }

        return object;
      }
      function extend(cls, base) {

        for (const p in base) {
          if (base.hasOwnProperty(p)) {
            cls[p] = base[p];
          }
        }

        cls.prototype = Object.create(base.prototype, {
          constructor: {
            value: cls,
            writable: true,
            configurable: true
          }
        });
        return cls;
      }
      function getSuper(constructor) {
        const proto = constructor.prototype;
        const dunderProto = proto && Object.getPrototypeOf(proto);
        return dunderProto && dunderProto.constructor;
      }
      function isChildClassOf(subclass, superclass) {
        if (subclass && superclass) {
          if (typeof subclass !== 'function') {
            return false;
          }

          if (typeof superclass !== 'function') {

            return false;
          }

          if (subclass === superclass) {
            return true;
          }

          for (;;) {
            subclass = getSuper(subclass);

            if (!subclass) {
              return false;
            }

            if (subclass === superclass) {
              return true;
            }
          }
        }

        return false;
      }
      function clear(object) {
        for (const key of Object.keys(object)) {
          delete object[key];
        }
      }

      function isTempClassId(id) {
        return typeof id !== 'string' || id.startsWith(tempCIDGenerator.prefix);
      }

      const _idToClass = createMap(true);
      const _nameToClass = createMap(true);

      function setup(tag, table, allowExist) {
        return function (id, constructor) {
          if (constructor.prototype.hasOwnProperty(tag)) {
            delete table[constructor.prototype[tag]];
          }

          value(constructor.prototype, tag, id);

          if (id) {
            const registered = table[id];

            if (!allowExist && registered && registered !== constructor) {
              let err = `A Class already exists with the same ${tag} : "${id}".`;

              error(err);
            } else {
              table[id] = constructor;
            }
          }
        };
      }

      const _setClassId = setup('__cid__', _idToClass, false);
      const doSetClassName = setup('__classname__', _nameToClass, true);
      function setClassName(className, constructor) {
        doSetClassName(className, constructor);

        if (!constructor.prototype.hasOwnProperty(classIdTag)) {
          const id = className || tempCIDGenerator.getNewId();

          if (id) {
            _setClassId(id, constructor);
          }
        }
      }
      function setClassAlias(target, alias) {
        const nameRegistry = _nameToClass[alias];
        const idRegistry = _idToClass[alias];
        let ok = true;

        if (nameRegistry && nameRegistry !== target) {
          error(`"${alias}" has already been set as name or alias of another class.`);
          ok = false;
        }

        if (idRegistry && idRegistry !== target) {
          error(`"${alias}" has already been set as id or alias of another class.`);
          ok = false;
        }

        if (ok) {
          let classAliases = target[aliasesTag];

          if (!classAliases) {
            classAliases = [];
            target[aliasesTag] = classAliases;
          }

          classAliases.push(alias);
          _nameToClass[alias] = target;
          _idToClass[alias] = target;
        }
      }
      function unregisterClass(...constructors) {
        for (const constructor of constructors) {
          const p = constructor.prototype;
          const classId = p[classIdTag];

          if (classId) {
            delete _idToClass[classId];
          }

          const classname = p[classNameTag];

          if (classname) {
            delete _nameToClass[classname];
          }

          const aliases = p[aliasesTag];

          if (aliases) {
            for (let iAlias = 0; iAlias < aliases.length; ++iAlias) {
              const alias = aliases[iAlias];
              delete _nameToClass[alias];
              delete _idToClass[alias];
            }
          }
        }
      }
      function _getClassById(classId) {
        return getClassById(classId);
      }
      function getClassById(classId) {
        return _idToClass[classId];
      }
      function getClassByName(classname) {
        return _nameToClass[classname];
      }
      function _getClassId(obj, allowTempId) {
        return getClassId(obj, allowTempId);
      }
      function getClassId(obj, allowTempId) {
        allowTempId = typeof allowTempId !== 'undefined' ? allowTempId : true;
        let res;

        if (typeof obj === 'function' && obj.prototype.hasOwnProperty(classIdTag)) {
          res = obj.prototype[classIdTag];

          if (!allowTempId && ( EDITOR$1) && isTempClassId(res)) {
            return '';
          }

          return res;
        }

        if (obj && obj.constructor) {
          const prototype = obj.constructor.prototype;

          if (prototype && prototype.hasOwnProperty(classIdTag)) {
            res = obj[classIdTag];

            if (!allowTempId && ( EDITOR$1) && isTempClassId(res)) {
              return '';
            }

            return res;
          }
        }

        return '';
      }

      class Pool {
        get() {
          return this._get();
        }

        constructor(_0, _1) {
          this.count = void 0;
          this._pool = void 0;
          this._cleanup = void 0;
          const size = _1 === undefined ? _0 : _1;
          const cleanupFunc = _1 === undefined ? null : _0;
          this.count = 0;
          this._pool = new Array(size);
          this._cleanup = cleanupFunc;
        }

        _get() {
          if (this.count > 0) {
            --this.count;
            const cache = this._pool[this.count];
            this._pool[this.count] = null;
            return cache;
          }

          return null;
        }

        put(obj) {
          const pool = this._pool;

          if (this.count < pool.length) {
            if (this._cleanup && this._cleanup(obj) === false) {
              return;
            }

            pool[this.count] = obj;
            ++this.count;
          }
        }

        resize(length) {
          if (length >= 0) {
            this._pool.length = length;

            if (this.count > length) {
              this.count = length;
            }
          }
        }

      } exports('cq', Pool);

      class MutableForwardIterator {
        constructor(array) {
          this.i = 0;
          this.array = array;
        }

        get length() {
          return this.array.length;
        }

        set length(value) {
          this.array.length = value;

          if (this.i >= value) {
            this.i = value - 1;
          }
        }

        remove(value) {
          const index = this.array.indexOf(value);

          if (index >= 0) {
            this.removeAt(index);
          }
        }

        removeAt(i) {
          this.array.splice(i, 1);

          if (i <= this.i) {
            --this.i;
          }
        }

        fastRemove(value) {
          const index = this.array.indexOf(value);

          if (index >= 0) {
            this.fastRemoveAt(index);
          }
        }

        fastRemoveAt(i) {
          const array = this.array;
          array[i] = array[array.length - 1];
          --array.length;

          if (i <= this.i) {
            --this.i;
          }
        }

        push(item) {
          this.array.push(item);
        }

      } exports('dY', MutableForwardIterator);

      function removeAt(array, index) {
        array.splice(index, 1);
      }
      function fastRemoveAt(array, index) {
        const length = array.length;

        if (index < 0 || index >= length) {
          return;
        }

        array[index] = array[length - 1];
        array.length = length - 1;
      }
      function remove(array, value) {
        const index = array.indexOf(value);

        if (index >= 0) {
          removeAt(array, index);
          return true;
        } else {
          return false;
        }
      }
      function fastRemove(array, value) {
        const index = array.indexOf(value);

        if (index >= 0) {
          array[index] = array[array.length - 1];
          --array.length;
        }
      }
      function removeIf(array, predicate) {
        const index = array.findIndex(predicate);

        if (index >= 0) {
          const value = array[index];
          removeAt(array, index);
          return value;
        }
      }
      function verifyType(array, type) {
        if (array && array.length > 0) {
          for (const item of array) {
            if (!(item instanceof type)) {
              logID(1300);
              return false;
            }
          }
        }

        return true;
      }
      function removeArray(array, removals) {
        for (let i = 0, l = removals.length; i < l; i++) {
          remove(array, removals[i]);
        }
      }
      function appendObjectsAt(array, objects, index) {
        array.splice.apply(array, [index, 0, ...objects]);
        return array;
      }
      function contains(array, value) {
        return array.indexOf(value) >= 0;
      }
      function copy(array) {
        const len = array.length;
        const cloned = new Array(len);

        for (let i = 0; i < len; i += 1) {
          cloned[i] = array[i];
        }

        return cloned;
      }

      var array = /*#__PURE__*/Object.freeze({
        __proto__: null,
        removeAt: removeAt,
        fastRemoveAt: fastRemoveAt,
        remove: remove,
        fastRemove: fastRemove,
        removeIf: removeIf,
        verifyType: verifyType,
        removeArray: removeArray,
        appendObjectsAt: appendObjectsAt,
        contains: contains,
        copy: copy,
        MutableForwardIterator: MutableForwardIterator
      });

      const js = {
        IDGenerator,
        Pool,
        array,
        isNumber,
        isString,
        isEmptyObject,
        getPropertyDescriptor,
        addon,
        mixin,
        extend,
        getSuper,
        isChildClassOf,
        clear,
        value,
        getset,
        get,
        set,
        unregisterClass,
        getClassName,
        setClassName,
        setClassAlias,
        getClassByName,
        getClassById,

        get _registeredClassNames() {
          return { ..._nameToClass
          };
        },

        set _registeredClassNames(value) {
          clear(_nameToClass);
          Object.assign(_nameToClass, value);
        },

        get _registeredClassIds() {
          return { ..._idToClass
          };
        },

        set _registeredClassIds(value) {
          clear(_idToClass);
          Object.assign(_idToClass, value);
        },

        _getClassId,
        getClassId,
        _setClassId,
        _getClassById,
        obsolete,
        obsoletes,
        formatStr,
        shiftArguments,
        createMap
      };
      legacyCC.js = js;

      var js$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        array: array,
        js: js,
        IDGenerator: IDGenerator,
        Pool: Pool,
        isNumber: isNumber,
        isString: isString,
        isEmptyObject: isEmptyObject,
        value: value,
        getset: getset,
        get: get,
        set: set,
        createMap: createMap,
        getClassName: getClassName,
        obsolete: obsolete,
        obsoletes: obsoletes,
        formatStr: formatStr,
        shiftArguments: shiftArguments,
        getPropertyDescriptor: getPropertyDescriptor,
        copyAllProperties: copyAllProperties,
        addon: addon,
        mixin: mixin,
        extend: extend,
        getSuper: getSuper,
        isChildClassOf: isChildClassOf,
        clear: clear,
        _idToClass: _idToClass,
        _nameToClass: _nameToClass,
        _setClassId: _setClassId,
        setClassName: setClassName,
        setClassAlias: setClassAlias,
        unregisterClass: unregisterClass,
        _getClassById: _getClassById,
        getClassById: getClassById,
        getClassByName: getClassByName,
        _getClassId: _getClassId,
        getClassId: getClassId
      });
      exports('fo', js$1);

      function BitMask(obj) {
        if ('__bitmask__' in obj) {
          return obj;
        }

        value(obj, '__bitmask__', null, true);
        let lastIndex = -1;
        const keys = Object.keys(obj);

        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          let val = obj[key];

          if (val === -1) {
            val = ++lastIndex;
            obj[key] = val;
          } else if (typeof val === 'number') {
            lastIndex = val;
          } else if (typeof val === 'string' && Number.isInteger(parseFloat(key))) {
            continue;
          }

          const reverseKey = `${val}`;

          if (key !== reverseKey) {

            value(obj, reverseKey, key);
          }
        }

        return obj;
      }

      BitMask.isBitMask = BitMaskType => BitMaskType && BitMaskType.hasOwnProperty('__bitmask__');

      BitMask.getList = BitMaskDef => {
        if (BitMaskDef.__bitmask__) {
          return BitMaskDef.__bitmask__;
        }

        return BitMask.update(BitMaskDef);
      };

      BitMask.update = BitMaskDef => {
        if (!Array.isArray(BitMaskDef.__bitmask__)) {
          BitMaskDef.__bitmask__ = [];
        }

        const bitList = BitMaskDef.__bitmask__;
        bitList.length = 0;

        for (const name in BitMaskDef) {
          const v = BitMaskDef[name];

          if (Number.isInteger(v)) {
            bitList.push({
              name,
              value: v
            });
          }
        }

        bitList.sort((a, b) => a.value - b.value);
        return bitList;
      };
      legacyCC.BitMask = BitMask;

      function assertIsNonNullable(expr, message) {
        assertIsTrue(!(expr === null || expr === undefined), message);
      }
      function assertIsTrue(expr, message) {
        if ( !expr) {
          throw new Error(`Assertion failed: ${message !== null && message !== void 0 ? message : '<no-message>'}`);
        }
      }
      function assertsArrayIndex(array, index) {
        assertIsTrue(index >= 0 && index < array.length, `Array index ${index} out of bounds: [0, ${array.length})`);
      }

      function Enum(obj) {
        if ('__enums__' in obj) {
          return obj;
        }

        value(obj, '__enums__', null, true);
        return Enum.update(obj);
      }

      Enum.update = obj => {
        let lastIndex = -1;
        const keys = Object.keys(obj);

        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          let val = obj[key];

          if (val === -1) {
            val = ++lastIndex;
            obj[key] = val;
          } else if (typeof val === 'number') {
            lastIndex = val;
          } else if (typeof val === 'string' && Number.isInteger(parseFloat(key))) {
            continue;
          }

          const reverseKey = `${val}`;

          if (key !== reverseKey) {

            value(obj, reverseKey, key);
          }
        }

        if (Array.isArray(obj.__enums__)) {
          updateList(obj);
        }

        return obj;
      };

      (function (_Enum) {})(Enum || (Enum = exports('cN', {})));

      Enum.isEnum = enumType => enumType && enumType.hasOwnProperty('__enums__');

      function assertIsEnum(enumType) {
        assertIsTrue(enumType.hasOwnProperty('__enums__'));
      }

      Enum.getList = enumType => {
        assertIsEnum(enumType);

        if (enumType.__enums__) {
          return enumType.__enums__;
        }

        return updateList(enumType);
      };

      function updateList(enumType) {
        assertIsEnum(enumType);
        const enums = enumType.__enums__ || [];
        enums.length = 0;

        for (const name in enumType) {
          const v = enumType[name];

          if (Number.isInteger(v)) {
            enums.push({
              name,
              value: v
            });
          }
        }

        enums.sort((a, b) => a.value - b.value);
        enumType.__enums__ = enums;
        return enums;
      }

      Enum.sortList = (enumType, compareFn) => {
        assertIsEnum(enumType);

        if (!Array.isArray(enumType.__enums__)) {
          return;
        }

        enumType.__enums__.sort(compareFn);
      };

      function ccenum(enumType) {
        if (!('__enums__' in enumType)) {
          value(enumType, '__enums__', null, true);
        }
      }
      legacyCC.Enum = Enum;

      class ValueType {
        clone() {
          errorID(100, `${getClassName(this)}.clone`);
          return this;
        }

        equals(other) {
          return false;
        }

        set(other) {
          errorID(100, `${getClassName(this)}.set`);
        }

        toString() {
          return `${''}`;
        }

      } exports('dM', ValueType);
      setClassName('cc.ValueType', ValueType);
      legacyCC.ValueType = ValueType;

      var Category;

      (function (Category) {
        Category["PATH"] = "path";
        Category["ENGINE"] = "engine";
        Category["ASSETS"] = "assets";
        Category["SCRIPTING"] = "scripting";
        Category["PHYSICS"] = "physics";
        Category["RENDERING"] = "rendering";
        Category["LAUNCH"] = "launch";
        Category["SCREEN"] = "screen";
        Category["SPLASH_SCREEN"] = "splashScreen";
        Category["ANIMATION"] = "animation";
        Category["PROFILING"] = "profiling";
        Category["PLUGINS"] = "plugins";
        Category["XR"] = "xr";
      })(Category || (Category = {}));

      class Settings {
        constructor() {
          this._settings = {};
          this._override = {};
        }

        init(path = '', overrides = {}) {
          for (const categoryName in overrides) {
            const category = overrides[categoryName];

            if (category) {
              for (const name in category) {
                this.overrideSettings(categoryName, name, category[name]);
              }
            }
          }

          if (!path) return Promise.resolve();
          return new Promise((resolve, reject) => {
            if ( !path.startsWith('http')) {
              {
                const result = fsUtils.readJsonSync(path);

                if (result instanceof Error) {
                  reject(result);
                } else {
                  this._settings = result;
                  resolve();
                }
              }
            } else {
              const xhr = new XMLHttpRequest();
              xhr.open('GET', path);
              xhr.responseType = 'text';

              xhr.onload = () => {
                this._settings = JSON.parse(xhr.response);
                resolve();
              };

              xhr.onerror = () => {
                reject(new Error('request settings failed!'));
              };

              xhr.send(null);
            }
          });
        }

        overrideSettings(category, name, value) {
          if (!(category in this._override)) {
            this._override[category] = {};
          }

          this._override[category][name] = value;
        }

        querySettings(category, name) {
          if (category in this._override) {
            const categorySettings = this._override[category];

            if (categorySettings && name in categorySettings) {
              return categorySettings[name];
            }
          }

          if (category in this._settings) {
            const categorySettings = this._settings[category];

            if (categorySettings && name in categorySettings) {
              return categorySettings[name];
            }
          }

          return null;
        }

      } exports('cZ', Settings);
      Settings.Category = Category;
      const settings = exports('cY', new Settings());
      legacyCC.settings = settings;

      const SUPPORT_TEXTURE_FORMATS = ['.astc', '.pkm', '.pvr', '.webp', '.jpg', '.jpeg', '.bmp', '.png'];
      const KEY = {
        none: 0,
        back: 6,
        menu: 18,
        backspace: 8,
        tab: 9,
        enter: 13,
        shift: 16,
        ctrl: 17,
        alt: 18,
        pause: 19,
        capslock: 20,
        escape: 27,
        space: 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        select: 41,
        insert: 45,
        Delete: 46,
        0: 48,
        1: 49,
        2: 50,
        3: 51,
        4: 52,
        5: 53,
        6: 54,
        7: 55,
        8: 56,
        9: 57,
        a: 65,
        b: 66,
        c: 67,
        d: 68,
        e: 69,
        f: 70,
        g: 71,
        h: 72,
        i: 73,
        j: 74,
        k: 75,
        l: 76,
        m: 77,
        n: 78,
        o: 79,
        p: 80,
        q: 81,
        r: 82,
        s: 83,
        t: 84,
        u: 85,
        v: 86,
        w: 87,
        x: 88,
        y: 89,
        z: 90,
        num0: 96,
        num1: 97,
        num2: 98,
        num3: 99,
        num4: 100,
        num5: 101,
        num6: 102,
        num7: 103,
        num8: 104,
        num9: 105,
        '*': 106,
        '+': 107,
        '-': 109,
        numdel: 110,
        '/': 111,
        f1: 112,
        f2: 113,
        f3: 114,
        f4: 115,
        f5: 116,
        f6: 117,
        f7: 118,
        f8: 119,
        f9: 120,
        f10: 121,
        f11: 122,
        f12: 123,
        numlock: 144,
        scrolllock: 145,
        ';': 186,
        semicolon: 186,
        equal: 187,
        '=': 187,
        ',': 188,
        comma: 188,
        dash: 189,
        '.': 190,
        period: 190,
        forwardslash: 191,
        grave: 192,
        '[': 219,
        openbracket: 219,
        backslash: 220,
        ']': 221,
        closebracket: 221,
        quote: 222,
        dpadLeft: 1000,
        dpadRight: 1001,
        dpadUp: 1003,
        dpadDown: 1004,
        dpadCenter: 1005
      };
      const macro = exports('bW', {
        SUPPORT_TEXTURE_FORMATS,
        KEY,
        RAD: Math.PI / 180,
        DEG: 180 / Math.PI,
        REPEAT_FOREVER: Number.MAX_VALUE - 1,
        FLT_EPSILON: 0.0000001192092896,
        ORIENTATION_PORTRAIT: 1,
        ORIENTATION_LANDSCAPE: 2,
        ORIENTATION_AUTO: 3,
        ENABLE_TILEDMAP_CULLING: true,
        TOUCH_TIMEOUT: 5000,
        ENABLE_TRANSPARENT_CANVAS: false,
        ENABLE_WEBGL_ANTIALIAS: true,
        ENABLE_ANTIALIAS_FXAA: false,
        ENABLE_BLOOM: false,
        CLEANUP_IMAGE_CACHE: false,
        ENABLE_MULTI_TOUCH: true,
        MAX_LABEL_CANVAS_POOL_SIZE: 20,
        ENABLE_WEBGL_HIGHP_STRUCT_VALUES: false,
        BATCHER2D_MEM_INCREMENT: 144,
        CUSTOM_PIPELINE_NAME: '',

        init() {
          {
            this.CLEANUP_IMAGE_CACHE = true;
          }

          const defaultValues = settings.querySettings(Settings.Category.ENGINE, 'macros');

          if (defaultValues) {
            for (const key in defaultValues) {
              macro[key] = defaultValues[key];
            }
          }
        }

      });
      legacyCC.macro = macro;

      function setTimeoutRAF(callback, delay, ...args) {
        var _globalThis$__globalX;

        const start = performance.now();
        const raf = requestAnimationFrame || window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;

        if ( raf === undefined || (_globalThis$__globalX = globalThis.__globalXR) !== null && _globalThis$__globalX !== void 0 && _globalThis$__globalX.isWebXR) {
          return setTimeout(callback, delay, ...args);
        }

        const handleRAF = () => {
          if (performance.now() - start < delay) {
            raf(handleRAF);
          } else {
            callback(...args);
          }
        };

        return raf(handleRAF);
      }

      const BUILTIN_CLASSID_RE = /^(?:cc|dragonBones|sp|ccsg)\..+/;
      const BASE64_KEYS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
      const values = new Array(123);

      for (let i = 0; i < 123; ++i) {
        values[i] = 64;
      }

      for (let i = 0; i < 64; ++i) {
        values[BASE64_KEYS.charCodeAt(i)] = i;
      }

      const BASE64_VALUES = values;
      function propertyDefine(ctor, sameNameGetSets, diffNameGetSets) {
        function define(np, propName, getter, setter) {
          const pd = Object.getOwnPropertyDescriptor(np, propName);

          if (pd) {
            if (pd.get) {
              np[getter] = pd.get;
            }

            if (pd.set && setter) {
              np[setter] = pd.set;
            }
          } else {
            const getterFunc = np[getter];

            {
              getset(np, propName, getterFunc, np[setter]);
            }
          }
        }

        let propName;
        const np = ctor.prototype;

        for (let i = 0; i < sameNameGetSets.length; i++) {
          propName = sameNameGetSets[i];
          const suffix = propName[0].toUpperCase() + propName.slice(1);
          define(np, propName, `get${suffix}`, `set${suffix}`);
        }

        for (propName in diffNameGetSets) {
          const gs = diffNameGetSets[propName];
          define(np, propName, gs[0], gs[1]);
        }
      }
      function pushToMap(map, key, value, pushFront) {
        const exists = map[key];

        if (exists) {
          if (Array.isArray(exists)) {
            if (pushFront) {
              exists.push(exists[0]);
              exists[0] = value;
            } else {
              exists.push(value);
            }
          } else {
            map[key] = pushFront ? [value, exists] : [exists, value];
          }
        } else {
          map[key] = value;
        }
      }
      function contains$1(refNode, otherNode) {
        if (typeof refNode.contains === 'function') {
          return refNode.contains(otherNode);
        } else if (typeof refNode.compareDocumentPosition === 'function') {
          return !!(refNode.compareDocumentPosition(otherNode) & 16);
        } else {
          let node = otherNode.parentNode;

          if (node) {
            do {
              if (node === refNode) {
                return true;
              } else {
                node = node.parentNode;
              }
            } while (node !== null);
          }

          return false;
        }
      }
      function isDomNode(node) {
        if (typeof window === 'object' && typeof Node === 'function') {
          return node instanceof Node;
        } else {
          return !!node && typeof node === 'object' && typeof node.nodeType === 'number' && typeof node.nodeName === 'string';
        }
      }
      function callInNextTick(callback, p1, p2) {
        if (callback) {
          setTimeoutRAF(() => {
            callback(p1, p2);
          }, 0);
        }
      }
      function tryCatchFunctor_EDITOR(funcName) {
        return Function('target', `${'try {\n' + '  target.'}${funcName}();\n` + `}\n` + `catch (e) {\n` + `  cc._throw(e);\n` + `}`);
      }
      function isPlainEmptyObj_DEV(obj) {
        if (!obj || obj.constructor !== Object) {
          return false;
        }

        return isEmptyObject(obj);
      }
      function clampf(value, min_inclusive, max_inclusive) {
        if (min_inclusive > max_inclusive) {
          const temp = min_inclusive;
          min_inclusive = max_inclusive;
          max_inclusive = temp;
        }

        return value < min_inclusive ? min_inclusive : value < max_inclusive ? value : max_inclusive;
      }
      function degreesToRadians(angle) {
        return angle * macro.RAD;
      }
      function radiansToDegrees(angle) {
        return angle * macro.DEG;
      }
      legacyCC.misc = {
        BUILTIN_CLASSID_RE,
        BASE64_VALUES,
        propertyDefine,
        pushToMap,
        contains: contains$1,
        isDomNode,
        callInNextTick,
        isPlainEmptyObj_DEV,
        clampf,
        degreesToRadians,
        radiansToDegrees
      };

      var misc = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BUILTIN_CLASSID_RE: BUILTIN_CLASSID_RE,
        BASE64_VALUES: BASE64_VALUES,
        propertyDefine: propertyDefine,
        pushToMap: pushToMap,
        contains: contains$1,
        isDomNode: isDomNode,
        callInNextTick: callInNextTick,
        tryCatchFunctor_EDITOR: tryCatchFunctor_EDITOR,
        isPlainEmptyObj_DEV: isPlainEmptyObj_DEV,
        clampf: clampf,
        degreesToRadians: degreesToRadians,
        radiansToDegrees: radiansToDegrees
      });
      exports('fp', misc);

      const DELIMETER = '$_$';
      function createAttrsSingle(owner, superAttrs) {
        const attrs = superAttrs ? Object.create(superAttrs) : {};
        value(owner, '__attrs__', attrs);
        return attrs;
      }
      function createAttrs(subclass) {
        if (typeof subclass !== 'function') {
          const instance = subclass;
          return createAttrsSingle(instance, getClassAttrs(instance.constructor));
        }

        let superClass;
        const chains = legacyCC.Class.getInheritanceChain(subclass);

        for (let i = chains.length - 1; i >= 0; i--) {
          const cls = chains[i];

          const attrs = cls.hasOwnProperty('__attrs__') && cls.__attrs__;

          if (!attrs) {
            superClass = chains[i + 1];
            createAttrsSingle(cls, superClass && superClass.__attrs__);
          }
        }

        superClass = chains[0];
        createAttrsSingle(subclass, superClass && superClass.__attrs__);
        return subclass.__attrs__;
      }
      function attr(constructor, propertyName) {
        const attrs = getClassAttrs(constructor);
        const prefix = propertyName + DELIMETER;
        const ret = {};

        for (const key in attrs) {
          if (key.startsWith(prefix)) {
            ret[key.slice(prefix.length)] = attrs[key];
          }
        }

        return ret;
      }
      function getClassAttrs(constructor) {
        return constructor.hasOwnProperty('__attrs__') && constructor.__attrs__ || createAttrs(constructor);
      }
      function setClassAttr(ctor, propName, key, value) {
        getClassAttrs(ctor)[propName + DELIMETER + key] = value;
      }
      class PrimitiveType {
        constructor(name, defaultValue) {
          this.name = void 0;
          this.default = void 0;
          this.name = name;
          this.default = defaultValue;
        }

        toString() {
          return this.name;
        }

      }
      const CCInteger = exports('dq', new PrimitiveType('Integer', 0));
      legacyCC.Integer = CCInteger;
      legacyCC.CCInteger = CCInteger;
      const CCFloat = exports('ds', new PrimitiveType('Float', 0.0));
      legacyCC.Float = CCFloat;
      legacyCC.CCFloat = CCFloat;

      const CCBoolean = exports('dr', new PrimitiveType('Boolean', false));
      legacyCC.Boolean = CCBoolean;
      legacyCC.CCBoolean = CCBoolean;
      const CCString = exports('dv', new PrimitiveType('String', ''));
      legacyCC.String = CCString;
      legacyCC.CCString = CCString;
      function getTypeChecker_ET(type, attributeName) {
        return function (constructor, mainPropertyName) {
          const propInfo = `"${getClassName(constructor)}.${mainPropertyName}"`;
          const mainPropAttrs = attr(constructor, mainPropertyName);
          let mainPropAttrsType = mainPropAttrs.type;

          if (mainPropAttrsType === CCInteger || mainPropAttrsType === CCFloat) {
            mainPropAttrsType = 'Number';
          } else if (mainPropAttrsType === CCString || mainPropAttrsType === CCBoolean) {
            mainPropAttrsType = `${mainPropAttrsType}`;
          }

          if (mainPropAttrsType !== type) {
            warnID(3604, propInfo);
            return;
          }

          if (!mainPropAttrs.hasOwnProperty('default')) {
            return;
          }

          const defaultVal = mainPropAttrs.default;

          if (typeof defaultVal === 'undefined') {
            return;
          }

          const isContainer = Array.isArray(defaultVal) || isPlainEmptyObj_DEV(defaultVal);

          if (isContainer) {
            return;
          }

          const defaultType = typeof defaultVal;
          const type_lowerCase = type.toLowerCase();

          if (defaultType === type_lowerCase) {
            if (type_lowerCase === 'object') {
              if (defaultVal && !(defaultVal instanceof mainPropAttrs.ctor)) {
                warnID(3605, propInfo, getClassName(mainPropAttrs.ctor));
              } else {
                return;
              }
            } else if (type !== 'Number') {
              warnID(3606, attributeName, propInfo, type);
            }
          } else if (defaultType !== 'function') {
            if (type === CCString.default && defaultVal == null) {
              warnID(3607, propInfo);
            } else {
              warnID(3611, attributeName, propInfo, defaultType);
            }
          } else {
            return;
          }

          delete mainPropAttrs.type;
        };
      }
      function getObjTypeChecker_ET(typeCtor) {
        return function (classCtor, mainPropName) {
          getTypeChecker_ET('Object', 'type')(classCtor, mainPropName);
          const defaultDef = getClassAttrs(classCtor)[`${mainPropName + DELIMETER}default`];
          const defaultVal = legacyCC.Class.getDefault(defaultDef);

          if (!Array.isArray(defaultVal) && isChildClassOf(typeCtor, legacyCC.ValueType)) {
            const typename = getClassName(typeCtor);
            const info = formatStr('No need to specify the "type" of "%s.%s" because %s is a child class of ValueType.', getClassName(classCtor), mainPropName, typename);

            if (defaultDef) {
              log(info);
            } else {
              warnID(3612, info, typename, getClassName(classCtor), mainPropName, typename);
            }
          }
        };
      }

      var attributeUtils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        DELIMETER: DELIMETER,
        createAttrsSingle: createAttrsSingle,
        createAttrs: createAttrs,
        attr: attr,
        getClassAttrs: getClassAttrs,
        setClassAttr: setClassAttr,
        PrimitiveType: PrimitiveType,
        CCInteger: CCInteger,
        CCFloat: CCFloat,
        CCBoolean: CCBoolean,
        CCString: CCString,
        getTypeChecker_ET: getTypeChecker_ET,
        getObjTypeChecker_ET: getObjTypeChecker_ET
      });

      const SerializableAttrs = {
        default: {},
        serializable: {},
        editorOnly: {},
        formerlySerializedAs: {}
      };

      function parseNotify(val, propName, notify, properties) {
        if (val.get || val.set) {

          return;
        }

        if (val.hasOwnProperty('default')) {
          const newKey = `_N$${propName}`;

          val.get = function () {
            return this[newKey];
          };

          val.set = function (value) {
            const oldValue = this[newKey];
            this[newKey] = value;
            notify.call(this, oldValue);
          };

          const newValue = {};
          properties[newKey] = newValue;

          for (const attr in SerializableAttrs) {
            const v = SerializableAttrs[attr];

            if (val.hasOwnProperty(attr)) {
              newValue[attr] = val[attr];

              if (!v.canUsedInGet) {
                delete val[attr];
              }
            }
          }
        }
      }

      function parseType(val, type, className, propName) {

        if (Array.isArray(type)) {

          if (type.length > 0) {
            val.type = type = type[0];
          } else {
            return errorID(5508, className, propName);
          }
        }

        if (typeof type === 'function') {
          if (type === String) {
            val.type = legacyCC.String;
          } else if (type === Boolean) {
            val.type = legacyCC.Boolean;
          } else if (type === Number) {
            val.type = legacyCC.Float;
          }
        }
      }

      function _wrapOptions(isGetset, _default, type) {
        const res = isGetset ? {
          _short: true
        } : {
          _short: true,
          default: _default
        };

        if (type) {
          res.type = type;
        }

        return res;
      }

      function getFullFormOfProperty(options, isGetset) {
        const isLiteral = options && options.constructor === Object;

        if (!isLiteral) {
          if (Array.isArray(options) && options.length > 0) {
            return _wrapOptions(isGetset, [], options);
          } else if (typeof options === 'function') {
            const type = options;
            return _wrapOptions(isGetset, isChildClassOf(type, legacyCC.ValueType) ? new type() : null, type);
          } else if (options instanceof PrimitiveType) {
            return _wrapOptions(isGetset, options.default);
          } else {
            return _wrapOptions(isGetset, options);
          }
        }

        return null;
      }
      function preprocessAttrs(properties, className, cls) {
        for (const propName in properties) {
          let val = properties[propName];
          const fullForm = getFullFormOfProperty(val, false);

          if (fullForm) {
            val = properties[propName] = fullForm;
          }

          if (val) {

            const notify = val.notify;

            if (notify) {
              {
                parseNotify(val, propName, notify, properties);
              }
            }

            if ('type' in val) {
              parseType(val, val.type, className, propName);
            }
          }
        }
      }

      let requiringFrames = [];
      function push(module, uuid, script, importMeta) {
        if (script === undefined) {
          script = uuid;
          uuid = '';
        }

        requiringFrames.push({
          uuid,
          script,
          module,
          exports: module.exports,
          beh: null,
          importMeta
        });
      }
      function pop() {
        const frameInfo = requiringFrames.pop();
        const module = frameInfo.module;
        let exports = module.exports;

        if (exports === frameInfo.exports) {
          for (const anykey in exports) {
            return;
          }

          module.exports = exports = frameInfo.cls;
        }
      }
      function peek() {
        return requiringFrames[requiringFrames.length - 1];
      }
      legacyCC._RF = {
        push,
        pop,
        peek
      };

      let PropertyStashInternalFlag;

      (function (PropertyStashInternalFlag) {
        PropertyStashInternalFlag[PropertyStashInternalFlag["STANDALONE"] = 1] = "STANDALONE";
        PropertyStashInternalFlag[PropertyStashInternalFlag["IMPLICIT_VISIBLE"] = 2] = "IMPLICIT_VISIBLE";
        PropertyStashInternalFlag[PropertyStashInternalFlag["IMPLICIT_SERIALIZABLE"] = 4] = "IMPLICIT_SERIALIZABLE";
      })(PropertyStashInternalFlag || (PropertyStashInternalFlag = {}));

      const DELIMETER$1 = DELIMETER;
      const CCCLASS_TAG = '__ctors__';
      const ENUM_TAG = exports('fT', 'Enum');
      const BITMASK_TAG = exports('fU', 'BitMask');

      function pushUnique(array, item) {
        if (array.indexOf(item) < 0) {
          array.push(item);
        }
      }

      function appendProp(cls, name) {

        pushUnique(cls.__props__, name);
      }

      function defineProp(cls, className, propName, val) {

        appendProp(cls, propName);
        parseAttributes(cls, val, className, propName);
      }

      function defineGetSet(cls, name, propName, val) {
        const getter = val.get;
        const setter = val.set;

        if (getter) {
          parseAttributes(cls, val, name, propName);

          setClassAttr(cls, propName, 'serializable', false);
        }
      }

      function getDefault(defaultVal) {
        if (typeof defaultVal === 'function') {
          {
            return defaultVal();
          }
        }

        return defaultVal;
      }

      function doDefine(className, baseClass, options) {
        const ctor = options.ctor;

        value(ctor, CCCLASS_TAG, true, true);
        const prototype = ctor.prototype;

        if (baseClass) {
          ctor.$super = baseClass;
        }

        setClassName(className, ctor);
        return ctor;
      }

      function define(className, baseClass, options) {
        const Component = legacyCC.Component;
        const frame = peek();

        if (frame && isChildClassOf(baseClass, Component)) {
          if (isChildClassOf(frame.cls, Component)) {
            errorID(3615);
            return null;
          }

          className = className || frame.script;
        }

        const cls = doDefine(className, baseClass, options);

        if (frame) {
          if (isChildClassOf(baseClass, Component)) {
            const uuid = frame.uuid;

            if (uuid) {
              _setClassId(uuid, cls);
            }

            frame.cls = cls;
          } else if (!isChildClassOf(frame.cls, Component)) {
            frame.cls = cls;
          }
        }

        return cls;
      }

      function getNewValueTypeCodeJit(value) {
        const clsName = getClassName(value);
        const type = value.constructor;
        let res = `new ${clsName}(`;

        for (let i = 0; i < type.__props__.length; i++) {
          const prop = type.__props__[i];
          const propVal = value[prop];

          res += propVal;

          if (i < type.__props__.length - 1) {
            res += ',';
          }
        }

        return `${res})`;
      }

      function escapeForJS(s) {
        return JSON.stringify(s).replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
      }

      const IDENTIFIER_RE = /^[A-Za-z_$][0-9A-Za-z_$]*$/;

      function declareProperties(cls, className, properties, baseClass) {
        cls.__props__ = [];

        if (baseClass && baseClass.__props__) {
          cls.__props__ = baseClass.__props__.slice();
        }

        if (properties) {
          preprocessAttrs(properties, className);

          for (const propName in properties) {
            const val = properties[propName];

            if (!val.get && !val.set) {
              defineProp(cls, className, propName, val);
            } else {
              defineGetSet(cls, className, propName, val);
            }
          }
        }

        const attrs = getClassAttrs(cls);
        cls.__values__ = cls.__props__.filter(prop => attrs[`${prop + DELIMETER$1}serializable`] !== false);
      }

      function CCClass(options) {
        let name = options.name;
        const base = options.extends;
        const cls = define(name, base, options);

        if (!name) {
          name = legacyCC.js.getClassName(cls);
        }

        cls._sealed = true;

        if (base) {
          base._sealed = false;
        }

        const properties = options.properties;
        declareProperties(cls, name, properties, base);
        const editor = options.editor;

        if (editor) {
          if (isChildClassOf(base, legacyCC.Component)) {
            legacyCC.Component._registerEditorProps(cls, editor);
          }
        }

        return cls;
      }

      CCClass._isCCClass = function isCCClass(constructor) {
        var _constructor$hasOwnPr;

        return constructor === null || constructor === void 0 ? void 0 : (_constructor$hasOwnPr = constructor.hasOwnProperty) === null || _constructor$hasOwnPr === void 0 ? void 0 : _constructor$hasOwnPr.call(constructor, CCCLASS_TAG);
      };

      CCClass.fastDefine = function (className, constructor, serializableFields) {
        setClassName(className, constructor);
        const props = constructor.__props__ = constructor.__values__ = Object.keys(serializableFields);
        const attrs = getClassAttrs(constructor);

        for (let i = 0; i < props.length; i++) {
          const key = props[i];
          attrs[`${key + DELIMETER$1}visible`] = false;
          attrs[`${key + DELIMETER$1}default`] = serializableFields[key];
        }
      };

      CCClass.Attr = attributeUtils;
      CCClass.attr = attr;
      function isCCClassOrFastDefined(constructor) {
        var _constructor$hasOwnPr2;

        return constructor === null || constructor === void 0 ? void 0 : (_constructor$hasOwnPr2 = constructor.hasOwnProperty) === null || _constructor$hasOwnPr2 === void 0 ? void 0 : _constructor$hasOwnPr2.call(constructor, '__values__');
      }
      CCClass.isCCClassOrFastDefined = isCCClassOrFastDefined;

      function getInheritanceChain(constructor) {
        const chain = [];

        for (;;) {
          constructor = getSuper(constructor);

          if (!constructor) {
            break;
          }

          if (constructor !== Object) {
            chain.push(constructor);
          }
        }

        return chain;
      }

      CCClass.getInheritanceChain = getInheritanceChain;
      const PrimitiveTypes = {
        Integer: 'Number',
        Float: 'Number',
        Boolean: 'Boolean',
        String: 'String'
      };

      function parseAttributes(constructor, attributes, className, propertyName, usedInGetter) {
        let attrs = null;
        let propertyNamePrefix = '';

        function initAttrs() {
          propertyNamePrefix = propertyName + DELIMETER$1;
          return attrs = getClassAttrs(constructor);
        }

        if ('type' in attributes && typeof attributes.type === 'undefined') {
          warnID(3660, propertyName, className);
        }
        const type = attributes.type;

        if (type) {
          const primitiveType = PrimitiveTypes[type];

          if (primitiveType) {
            (attrs || initAttrs())[`${propertyNamePrefix}type`] = type;
          } else if (type === 'Object') ; else if (typeof type === 'object') {
              if (Enum.isEnum(type)) {
                (attrs || initAttrs())[`${propertyNamePrefix}type`] = ENUM_TAG;
                attrs[`${propertyNamePrefix}enumList`] = Enum.getList(type);
              } else if (BitMask.isBitMask(type)) {
                (attrs || initAttrs())[`${propertyNamePrefix}type`] = BITMASK_TAG;
                attrs[`${propertyNamePrefix}bitmaskList`] = BitMask.getList(type);
              } else ;
            } else if (typeof type === 'function') {
              (attrs || initAttrs())[`${propertyNamePrefix}type`] = 'Object';
              attrs[`${propertyNamePrefix}ctor`] = type;
            } else ;
        }

        if ('default' in attributes) {
          (attrs || initAttrs())[`${propertyNamePrefix}default`] = attributes.default;
        }

        const parseSimpleAttribute = (attributeName, expectType) => {
          if (attributeName in attributes) {
            const val = attributes[attributeName];

            if (typeof val === expectType) {
              (attrs || initAttrs())[propertyNamePrefix + attributeName] = val;
            }
          }
        };

        if (attributes.editorOnly) {
          {
            (attrs || initAttrs())[`${propertyNamePrefix}editorOnly`] = true;
          }
        }

        const isStandaloneMode = attributes.__internalFlags & PropertyStashInternalFlag.STANDALONE;
        let normalizedSerializable;

        if (isStandaloneMode) {
          normalizedSerializable = attributes.serializable === true || (attributes.__internalFlags & PropertyStashInternalFlag.IMPLICIT_SERIALIZABLE) !== 0;
        } else if (attributes.serializable === false) {
          normalizedSerializable = false;
        }

        if (typeof normalizedSerializable !== 'undefined') {
          (attrs || initAttrs())[`${propertyNamePrefix}serializable`] = normalizedSerializable;
        }

        parseSimpleAttribute('formerlySerializedAs', 'string');

        const range = attributes.range;

        if (range) {
          if (Array.isArray(range)) {
            if (range.length >= 2) {
              (attrs || initAttrs())[`${propertyNamePrefix}min`] = range[0];
              attrs[`${propertyNamePrefix}max`] = range[1];

              if (range.length > 2) {
                attrs[`${propertyNamePrefix}step`] = range[2];
              }
            }
          }
        }

        parseSimpleAttribute('min', 'number');
        parseSimpleAttribute('max', 'number');
        parseSimpleAttribute('step', 'number');
      }

      CCClass.isArray = function (defaultVal) {
        defaultVal = getDefault(defaultVal);
        return Array.isArray(defaultVal);
      };

      CCClass.getDefault = getDefault;
      CCClass.escapeForJS = escapeForJS;
      CCClass.IDENTIFIER_RE = IDENTIFIER_RE;
      CCClass.getNewValueTypeCode =  getNewValueTypeCodeJit;
      legacyCC.Class = CCClass;

      const _d2r = Math.PI / 180.0;

      const _r2d = 180.0 / Math.PI;

      const HALF_PI = exports('eF', Math.PI * 0.5);
      const TWO_PI = exports('eE', Math.PI * 2.0);
      const EPSILON = exports('cB', 0.000001);
      function equals(a, b) {
        return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
      }
      function approx(a, b, maxDiff) {
        maxDiff = maxDiff || EPSILON;
        return Math.abs(a - b) <= maxDiff;
      }
      function clamp(val, min, max) {
        if (min > max) {
          const temp = min;
          min = max;
          max = temp;
        }

        return val < min ? min : val > max ? max : val;
      }
      function clamp01(val) {
        return val < 0 ? 0 : val > 1 ? 1 : val;
      }
      function lerp(from, to, ratio) {
        return from + (to - from) * ratio;
      }
      function toRadian(a) {
        return a * _d2r;
      }
      function toDegree(a) {
        return a * _r2d;
      }
      const random = exports('er', Math.random);
      function randomRange(min, max) {
        return Math.random() * (max - min) + min;
      }
      function randomRangeInt(min, max) {
        return Math.floor(randomRange(min, max));
      }
      function pseudoRandom(seed) {
        seed = (seed * 9301 + 49297) % 233280;
        return seed / 233280.0;
      }
      function pseudoRandomRange(seed, min, max) {
        return pseudoRandom(seed) * (max - min) + min;
      }
      function pseudoRandomRangeInt(seed, min, max) {
        return Math.floor(pseudoRandomRange(seed, min, max));
      }
      function nextPow2$1(val) {
        return nextPow2(val);
      }
      function repeat(t, length) {
        return t - Math.floor(t / length) * length;
      }
      function pingPong(t, length) {
        t = repeat(t, length * 2);
        t = length - Math.abs(t - length);
        return t;
      }
      function inverseLerp(from, to, value) {
        return (value - from) / (to - from);
      }
      function absMaxComponent(v) {
        if (Math.abs(v.x) > Math.abs(v.y)) {
          if (Math.abs(v.x) > Math.abs(v.z)) {
            return v.x;
          } else {
            return v.z;
          }
        } else if (Math.abs(v.y) > Math.abs(v.z)) {
          return v.y;
        } else {
          return v.z;
        }
      }
      function absMax(a, b) {
        if (Math.abs(a) > Math.abs(b)) {
          return a;
        } else {
          return b;
        }
      }
      function enumerableProps(prototype, attrs) {
        attrs.forEach(key => {
          Object.defineProperty(prototype, key, {
            enumerable: true
          });
        });
      }

      class Vec4 extends ValueType {
        static clone(a) {
          return new Vec4(a.x, a.y, a.z, a.w);
        }

        static copy(out, a) {
          out.x = a.x;
          out.y = a.y;
          out.z = a.z;
          out.w = a.w;
          return out;
        }

        static set(out, x, y, z, w) {
          out.x = x;
          out.y = y;
          out.z = z;
          out.w = w;
          return out;
        }

        static add(out, a, b) {
          out.x = a.x + b.x;
          out.y = a.y + b.y;
          out.z = a.z + b.z;
          out.w = a.w + b.w;
          return out;
        }

        static subtract(out, a, b) {
          out.x = a.x - b.x;
          out.y = a.y - b.y;
          out.z = a.z - b.z;
          out.w = a.w - b.w;
          return out;
        }

        static multiply(out, a, b) {
          out.x = a.x * b.x;
          out.y = a.y * b.y;
          out.z = a.z * b.z;
          out.w = a.w * b.w;
          return out;
        }

        static divide(out, a, b) {
          out.x = a.x / b.x;
          out.y = a.y / b.y;
          out.z = a.z / b.z;
          out.w = a.w / b.w;
          return out;
        }

        static ceil(out, a) {
          out.x = Math.ceil(a.x);
          out.y = Math.ceil(a.y);
          out.z = Math.ceil(a.z);
          out.w = Math.ceil(a.w);
          return out;
        }

        static floor(out, a) {
          out.x = Math.floor(a.x);
          out.y = Math.floor(a.y);
          out.z = Math.floor(a.z);
          out.w = Math.floor(a.w);
          return out;
        }

        static min(out, a, b) {
          out.x = Math.min(a.x, b.x);
          out.y = Math.min(a.y, b.y);
          out.z = Math.min(a.z, b.z);
          out.w = Math.min(a.w, b.w);
          return out;
        }

        static max(out, a, b) {
          out.x = Math.max(a.x, b.x);
          out.y = Math.max(a.y, b.y);
          out.z = Math.max(a.z, b.z);
          out.w = Math.max(a.w, b.w);
          return out;
        }

        static round(out, a) {
          out.x = Math.round(a.x);
          out.y = Math.round(a.y);
          out.z = Math.round(a.z);
          out.w = Math.round(a.w);
          return out;
        }

        static multiplyScalar(out, a, b) {
          out.x = a.x * b;
          out.y = a.y * b;
          out.z = a.z * b;
          out.w = a.w * b;
          return out;
        }

        static scaleAndAdd(out, a, b, scale) {
          out.x = a.x + b.x * scale;
          out.y = a.y + b.y * scale;
          out.z = a.z + b.z * scale;
          out.w = a.w + b.w * scale;
          return out;
        }

        static distance(a, b) {
          const x = b.x - a.x;
          const y = b.y - a.y;
          const z = b.z - a.z;
          const w = b.w - a.w;
          return Math.sqrt(x * x + y * y + z * z + w * w);
        }

        static squaredDistance(a, b) {
          const x = b.x - a.x;
          const y = b.y - a.y;
          const z = b.z - a.z;
          const w = b.w - a.w;
          return x * x + y * y + z * z + w * w;
        }

        static len(a) {
          const x = a.x;
          const y = a.y;
          const z = a.z;
          const w = a.w;
          return Math.sqrt(x * x + y * y + z * z + w * w);
        }

        static lengthSqr(a) {
          const x = a.x;
          const y = a.y;
          const z = a.z;
          const w = a.w;
          return x * x + y * y + z * z + w * w;
        }

        static negate(out, a) {
          out.x = -a.x;
          out.y = -a.y;
          out.z = -a.z;
          out.w = -a.w;
          return out;
        }

        static inverse(out, a) {
          out.x = 1.0 / a.x;
          out.y = 1.0 / a.y;
          out.z = 1.0 / a.z;
          out.w = 1.0 / a.w;
          return out;
        }

        static inverseSafe(out, a) {
          const x = a.x;
          const y = a.y;
          const z = a.z;
          const w = a.w;

          if (Math.abs(x) < EPSILON) {
            out.x = 0;
          } else {
            out.x = 1.0 / x;
          }

          if (Math.abs(y) < EPSILON) {
            out.y = 0;
          } else {
            out.y = 1.0 / y;
          }

          if (Math.abs(z) < EPSILON) {
            out.z = 0;
          } else {
            out.z = 1.0 / z;
          }

          if (Math.abs(w) < EPSILON) {
            out.w = 0;
          } else {
            out.w = 1.0 / w;
          }

          return out;
        }

        static normalize(out, a) {
          const x = a.x;
          const y = a.y;
          const z = a.z;
          const w = a.w;
          let len = x * x + y * y + z * z + w * w;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            out.x = x * len;
            out.y = y * len;
            out.z = z * len;
            out.w = w * len;
          } else {
            out.x = 0;
            out.y = 0;
            out.z = 0;
            out.w = 0;
          }

          return out;
        }

        static dot(a, b) {
          return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
        }

        static lerp(out, a, b, t) {
          out.x = a.x + t * (b.x - a.x);
          out.y = a.y + t * (b.y - a.y);
          out.z = a.z + t * (b.z - a.z);
          out.w = a.w + t * (b.w - a.w);
          return out;
        }

        static random(out, scale) {
          scale = scale || 1.0;
          const phi = random() * 2.0 * Math.PI;
          const cosTheta = random() * 2 - 1;
          const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
          out.x = sinTheta * Math.cos(phi) * scale;
          out.y = sinTheta * Math.sin(phi) * scale;
          out.z = cosTheta * scale;
          out.w = 0;
          return out;
        }

        static transformMat4(out, a, m) {
          const x = a.x;
          const y = a.y;
          const z = a.z;
          const w = a.w;
          out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12 * w;
          out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13 * w;
          out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14 * w;
          out.w = m.m03 * x + m.m07 * y + m.m11 * z + m.m15 * w;
          return out;
        }

        static transformAffine(out, v, m) {
          const x = v.x;
          const y = v.y;
          const z = v.z;
          const w = v.w;
          out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12 * w;
          out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13 * w;
          out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14 * w;
          out.w = v.w;
          return out;
        }

        static transformQuat(out, a, q) {
          const {
            x,
            y,
            z
          } = a;
          const _x = q.x;
          const _y = q.y;
          const _z = q.z;
          const _w = q.w;
          const ix = _w * x + _y * z - _z * y;
          const iy = _w * y + _z * x - _x * z;
          const iz = _w * z + _x * y - _y * x;
          const iw = -_x * x - _y * y - _z * z;
          out.x = ix * _w + iw * -_x + iy * -_z - iz * -_y;
          out.y = iy * _w + iw * -_y + iz * -_x - ix * -_z;
          out.z = iz * _w + iw * -_z + ix * -_y - iy * -_x;
          out.w = a.w;
          return out;
        }

        static toArray(out, v, ofs = 0) {
          out[ofs + 0] = v.x;
          out[ofs + 1] = v.y;
          out[ofs + 2] = v.z;
          out[ofs + 3] = v.w;
          return out;
        }

        static fromArray(out, arr, ofs = 0) {
          out.x = arr[ofs + 0];
          out.y = arr[ofs + 1];
          out.z = arr[ofs + 2];
          out.w = arr[ofs + 3];
          return out;
        }

        static strictEquals(a, b) {
          return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
        }

        static equals(a, b, epsilon = EPSILON) {
          return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= epsilon * Math.max(1.0, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= epsilon * Math.max(1.0, Math.abs(a.w), Math.abs(b.w));
        }

        constructor(x, y, z, w) {
          super();

          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
            this.z = x.z;
            this.w = x.w;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
            this.w = w || 0;
          }
        }

        clone() {
          return new Vec4(this.x, this.y, this.z, this.w);
        }

        set(x, y, z, w) {
          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
            this.z = x.z;
            this.w = x.w;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
            this.w = w || 0;
          }

          return this;
        }

        equals(other, epsilon = EPSILON) {
          return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(other.z)) && Math.abs(this.w - other.w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(other.w));
        }

        equals4f(x, y, z, w, epsilon = EPSILON) {
          return Math.abs(this.x - x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(y)) && Math.abs(this.z - z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(z)) && Math.abs(this.w - w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(w));
        }

        strictEquals(other) {
          return this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
        }

        strictEquals4f(x, y, z, w) {
          return this.x === x && this.y === y && this.z === z && this.w === w;
        }

        lerp(to, ratio) {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          this.x = x + ratio * (to.x - x);
          this.y = y + ratio * (to.y - y);
          this.z = z + ratio * (to.z - z);
          this.w = w + ratio * (to.w - w);
          return this;
        }

        toString() {
          return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)}, ${this.w.toFixed(2)})`;
        }

        clampf(minInclusive, maxInclusive) {
          this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
          this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
          this.z = clamp(this.z, minInclusive.z, maxInclusive.z);
          this.w = clamp(this.w, minInclusive.w, maxInclusive.w);
          return this;
        }

        add(other) {
          this.x += other.x;
          this.y += other.y;
          this.z += other.z;
          this.w += other.w;
          return this;
        }

        add4f(x, y, z, w) {
          this.x += x;
          this.y += y;
          this.z += z;
          this.w += w;
          return this;
        }

        subtract(other) {
          this.x -= other.x;
          this.y -= other.y;
          this.z -= other.z;
          this.w -= other.w;
          return this;
        }

        subtract4f(x, y, z, w) {
          this.x -= x;
          this.y -= y;
          this.z -= z;
          this.w -= w;
          return this;
        }

        multiplyScalar(scalar) {
          if (typeof scalar === 'object') {
            console.warn('should use Vec4.multiply for vector * vector operation');
          }

          this.x *= scalar;
          this.y *= scalar;
          this.z *= scalar;
          this.w *= scalar;
          return this;
        }

        multiply(other) {
          if (typeof other !== 'object') {
            console.warn('should use Vec4.scale for vector * scalar operation');
          }

          this.x *= other.x;
          this.y *= other.y;
          this.z *= other.z;
          this.w *= other.w;
          return this;
        }

        multiply4f(x, y, z, w) {
          this.x *= x;
          this.y *= y;
          this.z *= z;
          this.w *= w;
          return this;
        }

        divide(other) {
          this.x /= other.x;
          this.y /= other.y;
          this.z /= other.z;
          this.w /= other.w;
          return this;
        }

        divide4f(x, y, z, w) {
          this.x /= x;
          this.y /= y;
          this.z /= z;
          this.w /= w;
          return this;
        }

        negative() {
          this.x = -this.x;
          this.y = -this.y;
          this.z = -this.z;
          this.w = -this.w;
          return this;
        }

        dot(vector) {
          return this.x * vector.x + this.y * vector.y + this.z * vector.z + this.w * vector.w;
        }

        cross(vector) {
          const {
            x: ax,
            y: ay,
            z: az
          } = this;
          const {
            x: bx,
            y: by,
            z: bz
          } = vector;
          this.x = ay * bz - az * by;
          this.y = az * bx - ax * bz;
          this.z = ax * by - ay * bx;
          return this;
        }

        length() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          return Math.sqrt(x * x + y * y + z * z + w * w);
        }

        lengthSqr() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          return x * x + y * y + z * z + w * w;
        }

        normalize() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          let len = x * x + y * y + z * z + w * w;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            this.x = x * len;
            this.y = y * len;
            this.z = z * len;
            this.w = w * len;
          }

          return this;
        }

        transformMat4(matrix) {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          this.x = matrix.m00 * x + matrix.m04 * y + matrix.m08 * z + matrix.m12 * w;
          this.y = matrix.m01 * x + matrix.m05 * y + matrix.m09 * z + matrix.m13 * w;
          this.z = matrix.m02 * x + matrix.m06 * y + matrix.m10 * z + matrix.m14 * w;
          this.w = matrix.m03 * x + matrix.m07 * y + matrix.m11 * z + matrix.m15 * w;
          return this;
        }

      } exports('c6', Vec4);
      Vec4.ZERO = Object.freeze(new Vec4(0, 0, 0, 0));
      Vec4.ONE = Object.freeze(new Vec4(1, 1, 1, 1));
      Vec4.NEG_ONE = Object.freeze(new Vec4(-1, -1, -1, -1));
      CCClass.fastDefine('cc.Vec4', Vec4, {
        x: 0,
        y: 0,
        z: 0,
        w: 0
      });
      legacyCC.Vec4 = Vec4;
      function v4(x, y, z, w) {
        return new Vec4(x, y, z, w);
      }
      legacyCC.v4 = v4;

      class Vec3 extends ValueType {
        static zero(out) {
          out.x = 0;
          out.y = 0;
          out.z = 0;
          return out;
        }

        static clone(a) {
          return new Vec3(a.x, a.y, a.z);
        }

        static copy(out, a) {
          out.x = a.x;
          out.y = a.y;
          out.z = a.z;
          return out;
        }

        static set(out, x, y, z) {
          out.x = x;
          out.y = y;
          out.z = z;
          return out;
        }

        static add(out, a, b) {
          out.x = a.x + b.x;
          out.y = a.y + b.y;
          out.z = a.z + b.z;
          return out;
        }

        static subtract(out, a, b) {
          out.x = a.x - b.x;
          out.y = a.y - b.y;
          out.z = a.z - b.z;
          return out;
        }

        static multiply(out, a, b) {
          out.x = a.x * b.x;
          out.y = a.y * b.y;
          out.z = a.z * b.z;
          return out;
        }

        static divide(out, a, b) {
          out.x = a.x / b.x;
          out.y = a.y / b.y;
          out.z = a.z / b.z;
          return out;
        }

        static ceil(out, a) {
          out.x = Math.ceil(a.x);
          out.y = Math.ceil(a.y);
          out.z = Math.ceil(a.z);
          return out;
        }

        static floor(out, a) {
          out.x = Math.floor(a.x);
          out.y = Math.floor(a.y);
          out.z = Math.floor(a.z);
          return out;
        }

        static min(out, a, b) {
          out.x = Math.min(a.x, b.x);
          out.y = Math.min(a.y, b.y);
          out.z = Math.min(a.z, b.z);
          return out;
        }

        static max(out, a, b) {
          out.x = Math.max(a.x, b.x);
          out.y = Math.max(a.y, b.y);
          out.z = Math.max(a.z, b.z);
          return out;
        }

        static round(out, a) {
          out.x = Math.round(a.x);
          out.y = Math.round(a.y);
          out.z = Math.round(a.z);
          return out;
        }

        static multiplyScalar(out, a, b) {
          out.x = a.x * b;
          out.y = a.y * b;
          out.z = a.z * b;
          return out;
        }

        static scaleAndAdd(out, a, b, scale) {
          out.x = a.x + b.x * scale;
          out.y = a.y + b.y * scale;
          out.z = a.z + b.z * scale;
          return out;
        }

        static distance(a, b) {
          const x = b.x - a.x;
          const y = b.y - a.y;
          const z = b.z - a.z;
          return Math.sqrt(x * x + y * y + z * z);
        }

        static squaredDistance(a, b) {
          const x = b.x - a.x;
          const y = b.y - a.y;
          const z = b.z - a.z;
          return x * x + y * y + z * z;
        }

        static len(a) {
          const x = a.x;
          const y = a.y;
          const z = a.z;
          return Math.sqrt(x * x + y * y + z * z);
        }

        static lengthSqr(a) {
          const x = a.x;
          const y = a.y;
          const z = a.z;
          return x * x + y * y + z * z;
        }

        static negate(out, a) {
          out.x = -a.x;
          out.y = -a.y;
          out.z = -a.z;
          return out;
        }

        static invert(out, a) {
          out.x = 1.0 / a.x;
          out.y = 1.0 / a.y;
          out.z = 1.0 / a.z;
          return out;
        }

        static invertSafe(out, a) {
          const x = a.x;
          const y = a.y;
          const z = a.z;

          if (Math.abs(x) < EPSILON) {
            out.x = 0;
          } else {
            out.x = 1.0 / x;
          }

          if (Math.abs(y) < EPSILON) {
            out.y = 0;
          } else {
            out.y = 1.0 / y;
          }

          if (Math.abs(z) < EPSILON) {
            out.z = 0;
          } else {
            out.z = 1.0 / z;
          }

          return out;
        }

        static normalize(out, a) {
          const x = a.x;
          const y = a.y;
          const z = a.z;
          let len = x * x + y * y + z * z;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            out.x = x * len;
            out.y = y * len;
            out.z = z * len;
          } else {
            out.x = 0;
            out.y = 0;
            out.z = 0;
          }

          return out;
        }

        static dot(a, b) {
          return a.x * b.x + a.y * b.y + a.z * b.z;
        }

        static cross(out, a, b) {
          const {
            x: ax,
            y: ay,
            z: az
          } = a;
          const {
            x: bx,
            y: by,
            z: bz
          } = b;
          out.x = ay * bz - az * by;
          out.y = az * bx - ax * bz;
          out.z = ax * by - ay * bx;
          return out;
        }

        static lerp(out, a, b, t) {
          out.x = a.x + t * (b.x - a.x);
          out.y = a.y + t * (b.y - a.y);
          out.z = a.z + t * (b.z - a.z);
          return out;
        }

        static random(out, scale) {
          scale = scale || 1.0;
          const phi = random() * 2.0 * Math.PI;
          const cosTheta = random() * 2 - 1;
          const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
          out.x = sinTheta * Math.cos(phi) * scale;
          out.y = sinTheta * Math.sin(phi) * scale;
          out.z = cosTheta * scale;
          return out;
        }

        static transformMat4(out, a, m) {
          const x = a.x;
          const y = a.y;
          const z = a.z;
          let rhw = m.m03 * x + m.m07 * y + m.m11 * z + m.m15;
          rhw = rhw ? Math.abs(1 / rhw) : 1;
          out.x = (m.m00 * x + m.m04 * y + m.m08 * z + m.m12) * rhw;
          out.y = (m.m01 * x + m.m05 * y + m.m09 * z + m.m13) * rhw;
          out.z = (m.m02 * x + m.m06 * y + m.m10 * z + m.m14) * rhw;
          return out;
        }

        static transformMat4Normal(out, a, m) {
          const x = a.x;
          const y = a.y;
          const z = a.z;
          let rhw = m.m03 * x + m.m07 * y + m.m11 * z;
          rhw = rhw ? Math.abs(1 / rhw) : 1;
          out.x = (m.m00 * x + m.m04 * y + m.m08 * z) * rhw;
          out.y = (m.m01 * x + m.m05 * y + m.m09 * z) * rhw;
          out.z = (m.m02 * x + m.m06 * y + m.m10 * z) * rhw;
          return out;
        }

        static transformMat3(out, a, m) {
          const x = a.x;
          const y = a.y;
          const z = a.z;
          out.x = x * m.m00 + y * m.m03 + z * m.m06;
          out.y = x * m.m01 + y * m.m04 + z * m.m07;
          out.z = x * m.m02 + y * m.m05 + z * m.m08;
          return out;
        }

        static transformAffine(out, v, m) {
          const x = v.x;
          const y = v.y;
          const z = v.z;
          out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12;
          out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13;
          out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14;
          return out;
        }

        static transformQuat(out, a, q) {
          const ix = q.w * a.x + q.y * a.z - q.z * a.y;
          const iy = q.w * a.y + q.z * a.x - q.x * a.z;
          const iz = q.w * a.z + q.x * a.y - q.y * a.x;
          const iw = -q.x * a.x - q.y * a.y - q.z * a.z;
          out.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;
          out.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;
          out.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;
          return out;
        }

        static transformRTS(out, a, r, t, s) {
          const x = a.x * s.x;
          const y = a.y * s.y;
          const z = a.z * s.z;
          const ix = r.w * x + r.y * z - r.z * y;
          const iy = r.w * y + r.z * x - r.x * z;
          const iz = r.w * z + r.x * y - r.y * x;
          const iw = -r.x * x - r.y * y - r.z * z;
          out.x = ix * r.w + iw * -r.x + iy * -r.z - iz * -r.y + t.x;
          out.y = iy * r.w + iw * -r.y + iz * -r.x - ix * -r.z + t.y;
          out.z = iz * r.w + iw * -r.z + ix * -r.y - iy * -r.x + t.z;
          return out;
        }

        static transformInverseRTS(out, a, r, t, s) {
          const x = a.x - t.x;
          const y = a.y - t.y;
          const z = a.z - t.z;
          const ix = r.w * x - r.y * z + r.z * y;
          const iy = r.w * y - r.z * x + r.x * z;
          const iz = r.w * z - r.x * y + r.y * x;
          const iw = r.x * x + r.y * y + r.z * z;
          out.x = (ix * r.w + iw * r.x + iy * r.z - iz * r.y) / s.x;
          out.y = (iy * r.w + iw * r.y + iz * r.x - ix * r.z) / s.y;
          out.z = (iz * r.w + iw * r.z + ix * r.y - iy * r.x) / s.z;
          return out;
        }

        static rotateX(out, v, o, a) {
          const x = v.x - o.x;
          const y = v.y - o.y;
          const z = v.z - o.z;
          const cos = Math.cos(a);
          const sin = Math.sin(a);
          const rx = x;
          const ry = y * cos - z * sin;
          const rz = y * sin + z * cos;
          out.x = rx + o.x;
          out.y = ry + o.y;
          out.z = rz + o.z;
          return out;
        }

        static rotateY(out, v, o, a) {
          const x = v.x - o.x;
          const y = v.y - o.y;
          const z = v.z - o.z;
          const cos = Math.cos(a);
          const sin = Math.sin(a);
          const rx = z * sin + x * cos;
          const ry = y;
          const rz = z * cos - x * sin;
          out.x = rx + o.x;
          out.y = ry + o.y;
          out.z = rz + o.z;
          return out;
        }

        static rotateZ(out, v, o, a) {
          const x = v.x - o.x;
          const y = v.y - o.y;
          const z = v.z - o.z;
          const cos = Math.cos(a);
          const sin = Math.sin(a);
          const rx = x * cos - y * sin;
          const ry = x * sin + y * cos;
          const rz = z;
          out.x = rx + o.x;
          out.y = ry + o.y;
          out.z = rz + o.z;
          return out;
        }

        static toArray(out, v, ofs = 0) {
          out[ofs + 0] = v.x;
          out[ofs + 1] = v.y;
          out[ofs + 2] = v.z;
          return out;
        }

        static fromArray(out, arr, ofs = 0) {
          out.x = arr[ofs + 0];
          out.y = arr[ofs + 1];
          out.z = arr[ofs + 2];
          return out;
        }

        static strictEquals(a, b) {
          return a.x === b.x && a.y === b.y && a.z === b.z;
        }

        static equals(a, b, epsilon = EPSILON) {
          const {
            x: a0,
            y: a1,
            z: a2
          } = a;
          const {
            x: b0,
            y: b1,
            z: b2
          } = b;
          return Math.abs(a0 - b0) <= epsilon * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= epsilon * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= epsilon * Math.max(1.0, Math.abs(a2), Math.abs(b2));
        }

        static angle(a, b) {
          const magSqr1 = a.x * a.x + a.y * a.y + a.z * a.z;
          const magSqr2 = b.x * b.x + b.y * b.y + b.z * b.z;

          if (magSqr1 === 0 || magSqr2 === 0) {
            return 0.0;
          }

          const dot = a.x * b.x + a.y * b.y + a.z * b.z;
          let cosine = dot / Math.sqrt(magSqr1 * magSqr2);
          cosine = clamp(cosine, -1.0, 1.0);
          return Math.acos(cosine);
        }

        static projectOnPlane(out, a, n) {
          return Vec3.subtract(out, a, Vec3.project(out, a, n));
        }

        static project(out, a, b) {
          const sqrLen = Vec3.lengthSqr(b);

          if (sqrLen < 0.000001) {
            return Vec3.set(out, 0, 0, 0);
          } else {
            return Vec3.multiplyScalar(out, b, Vec3.dot(a, b) / sqrLen);
          }
        }

        constructor(x, y, z) {
          super();

          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
            this.z = x.z;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
          }
        }

        clone() {
          return new Vec3(this.x, this.y, this.z);
        }

        set(x, y, z) {
          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
            this.z = x.z;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
          }

          return this;
        }

        equals(other, epsilon = EPSILON) {
          return Math.abs(this.x - other.x) <= epsilon && Math.abs(this.y - other.y) <= epsilon && Math.abs(this.z - other.z) <= epsilon;
        }

        equals3f(x, y, z, epsilon = EPSILON) {
          return Math.abs(this.x - x) <= epsilon && Math.abs(this.y - y) <= epsilon && Math.abs(this.z - z) <= epsilon;
        }

        strictEquals(other) {
          return this.x === other.x && this.y === other.y && this.z === other.z;
        }

        strictEquals3f(x, y, z) {
          return this.x === x && this.y === y && this.z === z;
        }

        toString() {
          return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)})`;
        }

        lerp(to, ratio) {
          this.x += ratio * (to.x - this.x);
          this.y += ratio * (to.y - this.y);
          this.z += ratio * (to.z - this.z);
          return this;
        }

        add(other) {
          this.x += other.x;
          this.y += other.y;
          this.z += other.z;
          return this;
        }

        add3f(x, y, z) {
          this.x += x;
          this.y += y;
          this.z += z;
          return this;
        }

        subtract(other) {
          this.x -= other.x;
          this.y -= other.y;
          this.z -= other.z;
          return this;
        }

        subtract3f(x, y, z) {
          this.x -= x;
          this.y -= y;
          this.z -= z;
          return this;
        }

        multiplyScalar(scalar) {
          if (typeof scalar === 'object') {
            console.warn('should use Vec3.multiply for vector * vector operation');
          }

          this.x *= scalar;
          this.y *= scalar;
          this.z *= scalar;
          return this;
        }

        multiply(other) {
          if (typeof other !== 'object') {
            console.warn('should use Vec3.scale for vector * scalar operation');
          }

          this.x *= other.x;
          this.y *= other.y;
          this.z *= other.z;
          return this;
        }

        multiply3f(x, y, z) {
          this.x *= x;
          this.y *= y;
          this.z *= z;
          return this;
        }

        divide(other) {
          this.x /= other.x;
          this.y /= other.y;
          this.z /= other.z;
          return this;
        }

        divide3f(x, y, z) {
          this.x /= x;
          this.y /= y;
          this.z /= z;
          return this;
        }

        negative() {
          this.x = -this.x;
          this.y = -this.y;
          this.z = -this.z;
          return this;
        }

        clampf(minInclusive, maxInclusive) {
          this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
          this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
          this.z = clamp(this.z, minInclusive.z, maxInclusive.z);
          return this;
        }

        dot(other) {
          return this.x * other.x + this.y * other.y + this.z * other.z;
        }

        cross(other) {
          const {
            x: ax,
            y: ay,
            z: az
          } = this;
          const {
            x: bx,
            y: by,
            z: bz
          } = other;
          this.x = ay * bz - az * by;
          this.y = az * bx - ax * bz;
          this.z = ax * by - ay * bx;
          return this;
        }

        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }

        lengthSqr() {
          return this.x * this.x + this.y * this.y + this.z * this.z;
        }

        normalize() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          let len = x * x + y * y + z * z;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            this.x = x * len;
            this.y = y * len;
            this.z = z * len;
          }

          return this;
        }

        transformMat4(matrix) {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          let rhw = matrix.m03 * x + matrix.m07 * y + matrix.m11 * z + matrix.m15;
          rhw = rhw ? 1 / rhw : 1;
          this.x = (matrix.m00 * x + matrix.m04 * y + matrix.m08 * z + matrix.m12) * rhw;
          this.y = (matrix.m01 * x + matrix.m05 * y + matrix.m09 * z + matrix.m13) * rhw;
          this.z = (matrix.m02 * x + matrix.m06 * y + matrix.m10 * z + matrix.m14) * rhw;
          return this;
        }

      } exports('c0', Vec3);
      Vec3.UNIT_X = Object.freeze(new Vec3(1, 0, 0));
      Vec3.UNIT_Y = Object.freeze(new Vec3(0, 1, 0));
      Vec3.UNIT_Z = Object.freeze(new Vec3(0, 0, 1));
      Vec3.RIGHT = Object.freeze(new Vec3(1, 0, 0));
      Vec3.UP = Object.freeze(new Vec3(0, 1, 0));
      Vec3.FORWARD = Object.freeze(new Vec3(0, 0, -1));
      Vec3.ZERO = Object.freeze(new Vec3(0, 0, 0));
      Vec3.ONE = Object.freeze(new Vec3(1, 1, 1));
      Vec3.NEG_ONE = Object.freeze(new Vec3(-1, -1, -1));

      Vec3.slerp = (() => {
        const cacheV1 = new Vec3();
        const cacheV2 = new Vec3();
        const cacheV3 = new Vec3();
        return (out, from, to, t) => {
          const EPSILON = 1e-5;
          const lenFrom = Vec3.len(from);
          const lenTo = Vec3.len(to);

          if (lenFrom < EPSILON || lenTo < EPSILON) {
            return Vec3.lerp(out, from, to, t);
          }

          const lenLerped = lerp(lenFrom, lenTo, t);
          const dot = Vec3.dot(from, to) / (lenFrom * lenTo);

          if (dot > 1.0 - EPSILON) {
            return Vec3.lerp(out, from, to, t);
          } else if (dot < -1.0 + EPSILON) {
            const fromNormalized = Vec3.multiplyScalar(cacheV1, from, 1.0 / lenFrom);
            const axis = chooseAnyPerpendicular(cacheV2, fromNormalized);
            const angle = Math.PI * t;
            rotateAxisAngle(cacheV3, fromNormalized, axis, angle);
            Vec3.multiplyScalar(out, cacheV3, lenLerped);
            return out;
          } else {
            const dotClamped = dot;
            const theta = Math.acos(dotClamped) * t;
            const fromNormalized = Vec3.multiplyScalar(cacheV1, from, 1.0 / lenFrom);
            const toNormalized = Vec3.multiplyScalar(cacheV2, to, 1.0 / lenTo);
            Vec3.scaleAndAdd(cacheV3, toNormalized, fromNormalized, -dotClamped);
            Vec3.normalize(cacheV3, cacheV3);
            Vec3.multiplyScalar(cacheV3, cacheV3, Math.sin(theta));
            Vec3.scaleAndAdd(cacheV3, cacheV3, fromNormalized, Math.cos(theta));
            Vec3.multiplyScalar(out, cacheV3, lenLerped);
            return out;
          }
        };
      })();

      CCClass.fastDefine('cc.Vec3', Vec3, {
        x: 0,
        y: 0,
        z: 0
      });
      legacyCC.Vec3 = Vec3;
      function v3(x, y, z) {
        return new Vec3(x, y, z);
      }

      function chooseAnyPerpendicular(out, v) {
        const {
          x,
          y,
          z
        } = v;
        const absX = Math.abs(x);
        const absY = Math.abs(y);
        const absZ = Math.abs(z);

        if (absX < absY && absX < absZ) {
          Vec3.set(out, 0.0, z, -y);
        } else if (absY < absZ) {
          Vec3.set(out, z, 0.0, -x);
        } else {
          Vec3.set(out, y, -x, 0.0);
        }

        return Vec3.normalize(out, out);
      }

      const rotateAxisAngle = (() => {
        const cacheQ = {
          x: 0.0,
          y: 0.0,
          z: 0.0,
          w: 0.0
        };
        return (out, input, axis, angle) => {
          const rad = angle * 0.5;
          const s = Math.sin(rad);
          cacheQ.x = s * axis.x;
          cacheQ.y = s * axis.y;
          cacheQ.z = s * axis.z;
          cacheQ.w = Math.cos(rad);
          Vec3.transformQuat(out, input, cacheQ);
          return out;
        };
      })();

      legacyCC.v3 = v3;

      const toFloat = 1 / 255;
      class Color extends ValueType {
        static clone(a) {
          const out = new Color();

          if (a._val) {
            out._val = a._val;
          } else {
            out._val = (a.a << 24 >>> 0) + (a.b << 16) + (a.g << 8) + a.r;
          }

          return out;
        }

        static copy(out, a) {
          out.r = a.r;
          out.g = a.g;
          out.b = a.b;
          out.a = a.a;
          return out;
        }

        static set(out, r, g, b, a) {
          out.r = r;
          out.g = g;
          out.b = b;
          out.a = a;
          return out;
        }

        static toVec4(color, out) {
          out = out !== undefined ? out : new Vec4();
          out.x = color.r * toFloat;
          out.y = color.g * toFloat;
          out.z = color.b * toFloat;
          out.w = color.a * toFloat;
          return out;
        }

        static fromVec4(value, out) {
          out = out === undefined ? new Color() : out;
          out.r = Math.floor(value.x / toFloat);
          out.g = Math.floor(value.y / toFloat);
          out.b = Math.floor(value.z / toFloat);
          out.a = Math.floor(value.w / toFloat);
          return out;
        }

        static fromHEX(out, hexString) {
          hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
          out.r = parseInt(hexString.substr(0, 2), 16) || 0;
          out.g = parseInt(hexString.substr(2, 2), 16) || 0;
          out.b = parseInt(hexString.substr(4, 2), 16) || 0;
          const a = parseInt(hexString.substr(6, 2), 16);
          out.a = !Number.isNaN(a) ? a : 255;
          out._val = (out.a << 24 >>> 0) + (out.b << 16) + (out.g << 8) + out.r;
          return out;
        }

        static add(out, a, b) {
          out.r = a.r + b.r;
          out.g = a.g + b.g;
          out.b = a.b + b.b;
          out.a = a.a + b.a;
          return out;
        }

        static subtract(out, a, b) {
          out.r = a.r - b.r;
          out.g = a.g - b.g;
          out.b = a.b - b.b;
          out.a = a.a - b.a;
          return out;
        }

        static multiply(out, a, b) {
          out.r = a.r * b.r;
          out.g = a.g * b.g;
          out.b = a.b * b.b;
          out.a = a.a * b.a;
          return out;
        }

        static divide(out, a, b) {
          out.r = a.r / b.r;
          out.g = a.g / b.g;
          out.b = a.b / b.b;
          out.a = a.a / b.a;
          return out;
        }

        static scale(out, a, b) {
          out.r = a.r * b;
          out.g = a.g * b;
          out.b = a.b * b;
          out.a = a.a * b;
          return out;
        }

        static lerp(out, from, to, ratio) {
          let r = from.r;
          let g = from.g;
          let b = from.b;
          let a = from.a;
          r += (to.r - r) * ratio;
          g += (to.g - g) * ratio;
          b += (to.b - b) * ratio;
          a += (to.a - a) * ratio;
          out._val = Math.floor((a << 24 >>> 0) + (b << 16) + (g << 8) + r);
          return out;
        }

        static toArray(out, a, ofs = 0) {
          const scale = a instanceof Color || a.a > 1 ? 1 / 255 : 1;
          out[ofs + 0] = a.r * scale;
          out[ofs + 1] = a.g * scale;
          out[ofs + 2] = a.b * scale;
          out[ofs + 3] = a.a * scale;
          return out;
        }

        static fromArray(arr, out, ofs = 0) {
          out.r = arr[ofs + 0] * 255;
          out.g = arr[ofs + 1] * 255;
          out.b = arr[ofs + 2] * 255;
          out.a = arr[ofs + 3] * 255;
          return out;
        }

        static strictEquals(a, b) {
          return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;
        }

        static equals(a, b, epsilon = EPSILON) {
          return Math.abs(a.r - b.r) <= epsilon * Math.max(1.0, Math.abs(a.r), Math.abs(b.r)) && Math.abs(a.g - b.g) <= epsilon * Math.max(1.0, Math.abs(a.g), Math.abs(b.g)) && Math.abs(a.b - b.b) <= epsilon * Math.max(1.0, Math.abs(a.b), Math.abs(b.b)) && Math.abs(a.a - b.a) <= epsilon * Math.max(1.0, Math.abs(a.a), Math.abs(b.a));
        }

        static hex(a) {
          return (a.r * 255 << 24 | a.g * 255 << 16 | a.b * 255 << 8 | a.a * 255) >>> 0;
        }

        get r() {
          return this._val & 0x000000ff;
        }

        set r(red) {
          red = ~~clamp(red, 0, 255);
          this._val = (this._val & 0xffffff00 | red) >>> 0;
        }

        get g() {
          return (this._val & 0x0000ff00) >> 8;
        }

        set g(green) {
          green = ~~clamp(green, 0, 255);
          this._val = (this._val & 0xffff00ff | green << 8) >>> 0;
        }

        get b() {
          return (this._val & 0x00ff0000) >> 16;
        }

        set b(blue) {
          blue = ~~clamp(blue, 0, 255);
          this._val = (this._val & 0xff00ffff | blue << 16) >>> 0;
        }

        get a() {
          return (this._val & 0xff000000) >>> 24;
        }

        set a(alpha) {
          alpha = ~~clamp(alpha, 0, 255);
          this._val = (this._val & 0x00ffffff | alpha << 24) >>> 0;
        }

        get x() {
          return this.r * toFloat;
        }

        set x(value) {
          this.r = value * 255;
        }

        get y() {
          return this.g * toFloat;
        }

        set y(value) {
          this.g = value * 255;
        }

        get z() {
          return this.b * toFloat;
        }

        set z(value) {
          this.b = value * 255;
        }

        get w() {
          return this.a * toFloat;
        }

        set w(value) {
          this.a = value * 255;
        }

        constructor(r, g, b, a) {
          super();
          this._val = 0;

          if (typeof r === 'string') {
            this.fromHEX(r);
          } else if (g !== undefined) {
            this.set(r, g, b, a);
          } else {
            this.set(r);
          }
        }

        clone() {
          const ret = new Color();
          ret._val = this._val;
          return ret;
        }

        equals(other) {
          return other && this._val === other._val;
        }

        lerp(to, ratio) {
          let r = this.r;
          let g = this.g;
          let b = this.b;
          let a = this.a;
          r += (to.r - r) * ratio;
          g += (to.g - g) * ratio;
          b += (to.b - b) * ratio;
          a += (to.a - a) * ratio;
          this._val = Math.floor((a << 24 >>> 0) + (b << 16) + (g << 8) + r);
          return this;
        }

        toString() {
          return `rgba(${this.r.toFixed()}, ${this.g.toFixed()}, ${this.b.toFixed()}, ${this.a.toFixed()})`;
        }

        toCSS(opt = 'rgba') {
          if (opt === 'rgba') {
            return `rgba(${this.r},${this.g},${this.b},${(this.a * toFloat).toFixed(2)})`;
          } else if (opt === 'rgb') {
            return `rgb(${this.r},${this.g},${this.b})`;
          } else {
            return `#${this.toHEX(opt)}`;
          }
        }

        fromHEX(hexString) {
          hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
          const r = parseInt(hexString.substr(0, 2), 16) || 0;
          const g = parseInt(hexString.substr(2, 2), 16) || 0;
          const b = parseInt(hexString.substr(4, 2), 16) || 0;
          let a = parseInt(hexString.substr(6, 2), 16);
          a = !Number.isNaN(a) ? a : 255;
          this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
          return this;
        }

        toHEX(fmt = '#rrggbb') {
          const prefix = '0';
          const hex = [(this.r < 16 ? prefix : '') + this.r.toString(16), (this.g < 16 ? prefix : '') + this.g.toString(16), (this.b < 16 ? prefix : '') + this.b.toString(16)];

          if (fmt === '#rgb') {
            hex[0] = hex[0][0];
            hex[1] = hex[1][0];
            hex[2] = hex[2][0];
          } else if (fmt === '#rrggbbaa') {
            hex.push((this.a < 16 ? prefix : '') + this.a.toString(16));
          }

          return hex.join('');
        }

        toRGBValue() {
          return this._val & 0x00ffffff;
        }

        fromHSV(h, s, v) {
          let r = 0;
          let g = 0;
          let b = 0;

          if (s === 0) {
            r = g = b = v;
          } else if (v === 0) {
            r = g = b = 0;
          } else {
            if (h === 1) {
              h = 0;
            }

            h *= 6;
            const i = Math.floor(h);
            const f = h - i;
            const p = v * (1 - s);
            const q = v * (1 - s * f);
            const t = v * (1 - s * (1 - f));

            switch (i) {
              default:
                assertIsTrue(false);

              case 0:
                r = v;
                g = t;
                b = p;
                break;

              case 1:
                r = q;
                g = v;
                b = p;
                break;

              case 2:
                r = p;
                g = v;
                b = t;
                break;

              case 3:
                r = p;
                g = q;
                b = v;
                break;

              case 4:
                r = t;
                g = p;
                b = v;
                break;

              case 5:
                r = v;
                g = p;
                b = q;
                break;
            }
          }

          r *= 255;
          g *= 255;
          b *= 255;
          this._val = (this.a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
          return this;
        }

        toHSV() {
          const r = this.r * toFloat;
          const g = this.g * toFloat;
          const b = this.b * toFloat;
          const hsv = {
            h: 0,
            s: 0,
            v: 0
          };
          const max = Math.max(r, g, b);
          const min = Math.min(r, g, b);
          let delta = 0;
          hsv.v = max;
          hsv.s = max ? (max - min) / max : 0;

          if (!hsv.s) {
            hsv.h = 0;
          } else {
            delta = max - min;

            if (r === max) {
              hsv.h = (g - b) / delta;
            } else if (g === max) {
              hsv.h = 2 + (b - r) / delta;
            } else {
              hsv.h = 4 + (r - g) / delta;
            }

            hsv.h /= 6;

            if (hsv.h < 0) {
              hsv.h += 1.0;
            }
          }

          return hsv;
        }

        set(r, g, b, a) {
          if (typeof r === 'object') {
            if (r._val != null) {
              this._val = r._val;
            } else {
              g = r.g || 0;
              b = r.b || 0;
              a = typeof r.a === 'number' ? r.a : 255;
              r = r.r || 0;
              this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
            }
          } else {
            r = r || 0;
            g = g || 0;
            b = b || 0;
            a = typeof a === 'number' ? a : 255;
            this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
          }

          return this;
        }

        multiply(other) {
          const r = (this._val & 0x000000ff) * other.r >> 8;
          const g = (this._val & 0x0000ff00) * other.g >> 8;
          const b = (this._val & 0x00ff0000) * other.b >> 8;
          const a = ((this._val & 0xff000000) >>> 8) * other.a;
          this._val = a & 0xff000000 | b & 0x00ff0000 | g & 0x0000ff00 | r & 0x000000ff;
          return this;
        }

        _set_r_unsafe(red) {
          this._val = (this._val & 0xffffff00 | red) >>> 0;
          return this;
        }

        _set_g_unsafe(green) {
          this._val = (this._val & 0xffff00ff | green << 8) >>> 0;
          return this;
        }

        _set_b_unsafe(blue) {
          this._val = (this._val & 0xff00ffff | blue << 16) >>> 0;
          return this;
        }

        _set_a_unsafe(alpha) {
          this._val = (this._val & 0x00ffffff | alpha << 24) >>> 0;
          return this;
        }

      } exports('bf', Color);
      Color.WHITE = Object.freeze(new Color(255, 255, 255, 255));
      Color.GRAY = Object.freeze(new Color(127, 127, 127, 255));
      Color.BLACK = Object.freeze(new Color(0, 0, 0, 255));
      Color.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));
      Color.RED = Object.freeze(new Color(255, 0, 0, 255));
      Color.GREEN = Object.freeze(new Color(0, 255, 0, 255));
      Color.BLUE = Object.freeze(new Color(0, 0, 255, 255));
      Color.CYAN = Object.freeze(new Color(0, 255, 255, 255));
      Color.MAGENTA = Object.freeze(new Color(255, 0, 255, 255));
      Color.YELLOW = Object.freeze(new Color(255, 255, 0, 255));
      CCClass.fastDefine('cc.Color', Color, {
        r: 0,
        g: 0,
        b: 0,
        a: 255
      });
      legacyCC.Color = Color;
      function color(r, g, b, a) {
        return new Color(r, g, b, a);
      }
      legacyCC.color = color;

      class Mat3 extends ValueType {
        static clone(a) {
          return new Mat3(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08);
        }

        static copy(out, a) {
          out.m00 = a.m00;
          out.m01 = a.m01;
          out.m02 = a.m02;
          out.m03 = a.m03;
          out.m04 = a.m04;
          out.m05 = a.m05;
          out.m06 = a.m06;
          out.m07 = a.m07;
          out.m08 = a.m08;
          return out;
        }

        static set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
          out.m00 = m00;
          out.m01 = m01;
          out.m02 = m02;
          out.m03 = m10;
          out.m04 = m11;
          out.m05 = m12;
          out.m06 = m20;
          out.m07 = m21;
          out.m08 = m22;
          return out;
        }

        static identity(out) {
          out.m00 = 1;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 1;
          out.m05 = 0;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 1;
          return out;
        }

        static transpose(out, a) {
          if (out === a) {
            const a01 = a.m01;
            const a02 = a.m02;
            const a12 = a.m05;
            out.m01 = a.m03;
            out.m02 = a.m06;
            out.m03 = a01;
            out.m05 = a.m07;
            out.m06 = a02;
            out.m07 = a12;
          } else {
            out.m00 = a.m00;
            out.m01 = a.m03;
            out.m02 = a.m06;
            out.m03 = a.m01;
            out.m04 = a.m04;
            out.m05 = a.m07;
            out.m06 = a.m02;
            out.m07 = a.m05;
            out.m08 = a.m08;
          }

          return out;
        }

        static invert(out, a) {
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a10 = a.m03;
          const a11 = a.m04;
          const a12 = a.m05;
          const a20 = a.m06;
          const a21 = a.m07;
          const a22 = a.m08;
          const b01 = a22 * a11 - a12 * a21;
          const b11 = -a22 * a10 + a12 * a20;
          const b21 = a21 * a10 - a11 * a20;
          let det = a00 * b01 + a01 * b11 + a02 * b21;

          if (det === 0) {
            out.m00 = 0;
            out.m01 = 0;
            out.m02 = 0;
            out.m03 = 0;
            out.m04 = 0;
            out.m05 = 0;
            out.m06 = 0;
            out.m07 = 0;
            out.m08 = 0;
            return out;
          }

          det = 1.0 / det;
          out.m00 = b01 * det;
          out.m01 = (-a22 * a01 + a02 * a21) * det;
          out.m02 = (a12 * a01 - a02 * a11) * det;
          out.m03 = b11 * det;
          out.m04 = (a22 * a00 - a02 * a20) * det;
          out.m05 = (-a12 * a00 + a02 * a10) * det;
          out.m06 = b21 * det;
          out.m07 = (-a21 * a00 + a01 * a20) * det;
          out.m08 = (a11 * a00 - a01 * a10) * det;
          return out;
        }

        static determinant(a) {
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a10 = a.m03;
          const a11 = a.m04;
          const a12 = a.m05;
          const a20 = a.m06;
          const a21 = a.m07;
          const a22 = a.m08;
          return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
        }

        static multiply(out, a, b) {
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a10 = a.m03;
          const a11 = a.m04;
          const a12 = a.m05;
          const a20 = a.m06;
          const a21 = a.m07;
          const a22 = a.m08;
          const b00 = b.m00;
          const b01 = b.m01;
          const b02 = b.m02;
          const b10 = b.m03;
          const b11 = b.m04;
          const b12 = b.m05;
          const b20 = b.m06;
          const b21 = b.m07;
          const b22 = b.m08;
          out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
          out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
          out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
          out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
          out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
          out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
          out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
          out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
          out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
          return out;
        }

        static multiplyMat4(out, a, b) {
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a10 = a.m03;
          const a11 = a.m04;
          const a12 = a.m05;
          const a20 = a.m06;
          const a21 = a.m07;
          const a22 = a.m08;
          const b00 = b.m00;
          const b01 = b.m01;
          const b02 = b.m02;
          const b10 = b.m04;
          const b11 = b.m05;
          const b12 = b.m06;
          const b20 = b.m08;
          const b21 = b.m09;
          const b22 = b.m10;
          out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
          out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
          out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
          out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
          out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
          out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
          out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
          out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
          out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
          return out;
        }

        static transform(out, a, v) {
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a10 = a.m03;
          const a11 = a.m04;
          const a12 = a.m05;
          const a20 = a.m06;
          const a21 = a.m07;
          const a22 = a.m08;
          const x = v.x;
          const y = v.y;
          out.m00 = a00;
          out.m01 = a01;
          out.m02 = a02;
          out.m03 = a10;
          out.m04 = a11;
          out.m05 = a12;
          out.m06 = x * a00 + y * a10 + a20;
          out.m07 = x * a01 + y * a11 + a21;
          out.m08 = x * a02 + y * a12 + a22;
          return out;
        }

        static scale(out, a, v) {
          const x = v.x;
          const y = v.y;
          out.m00 = x * a.m00;
          out.m01 = x * a.m01;
          out.m02 = x * a.m02;
          out.m03 = y * a.m03;
          out.m04 = y * a.m04;
          out.m05 = y * a.m05;
          out.m06 = a.m06;
          out.m07 = a.m07;
          out.m08 = a.m08;
          return out;
        }

        static rotate(out, a, rad) {
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a10 = a.m03;
          const a11 = a.m04;
          const a12 = a.m05;
          const a20 = a.m06;
          const a21 = a.m07;
          const a22 = a.m08;
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          out.m00 = c * a00 + s * a10;
          out.m01 = c * a01 + s * a11;
          out.m02 = c * a02 + s * a12;
          out.m03 = c * a10 - s * a00;
          out.m04 = c * a11 - s * a01;
          out.m05 = c * a12 - s * a02;
          out.m06 = a20;
          out.m07 = a21;
          out.m08 = a22;
          return out;
        }

        static fromMat4(out, a) {
          out.m00 = a.m00;
          out.m01 = a.m01;
          out.m02 = a.m02;
          out.m03 = a.m04;
          out.m04 = a.m05;
          out.m05 = a.m06;
          out.m06 = a.m08;
          out.m07 = a.m09;
          out.m08 = a.m10;
          return out;
        }

        static fromViewUp(out, view, up) {
          if (Vec3.lengthSqr(view) < EPSILON * EPSILON) {
            Mat3.identity(out);
            return out;
          }

          up = up || Vec3.UNIT_Y;
          Vec3.normalize(v3_1, Vec3.cross(v3_1, up, view));

          if (Vec3.lengthSqr(v3_1) < EPSILON * EPSILON) {
            Mat3.identity(out);
            return out;
          }

          Vec3.cross(v3_2, view, v3_1);
          Mat3.set(out, v3_1.x, v3_1.y, v3_1.z, v3_2.x, v3_2.y, v3_2.z, view.x, view.y, view.z);
          return out;
        }

        static fromTranslation(out, v) {
          out.m00 = 1;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 1;
          out.m05 = 0;
          out.m06 = v.x;
          out.m07 = v.y;
          out.m08 = 1;
          return out;
        }

        static fromScaling(out, v) {
          out.m00 = v.x;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = v.y;
          out.m05 = 0;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 1;
          return out;
        }

        static fromRotation(out, rad) {
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          out.m00 = c;
          out.m01 = s;
          out.m02 = 0;
          out.m03 = -s;
          out.m04 = c;
          out.m05 = 0;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 1;
          return out;
        }

        static fromQuat(out, q) {
          const x = q.x;
          const y = q.y;
          const z = q.z;
          const w = q.w;
          const x2 = x + x;
          const y2 = y + y;
          const z2 = z + z;
          const xx = x * x2;
          const yx = y * x2;
          const yy = y * y2;
          const zx = z * x2;
          const zy = z * y2;
          const zz = z * z2;
          const wx = w * x2;
          const wy = w * y2;
          const wz = w * z2;
          out.m00 = 1 - yy - zz;
          out.m03 = yx - wz;
          out.m06 = zx + wy;
          out.m01 = yx + wz;
          out.m04 = 1 - xx - zz;
          out.m07 = zy - wx;
          out.m02 = zx - wy;
          out.m05 = zy + wx;
          out.m08 = 1 - xx - yy;
          return out;
        }

        static inverseTransposeMat4(out, a) {
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a03 = a.m03;
          const a10 = a.m04;
          const a11 = a.m05;
          const a12 = a.m06;
          const a13 = a.m07;
          const a20 = a.m08;
          const a21 = a.m09;
          const a22 = a.m10;
          const a23 = a.m11;
          const a30 = a.m12;
          const a31 = a.m13;
          const a32 = a.m14;
          const a33 = a.m15;
          const b00 = a00 * a11 - a01 * a10;
          const b01 = a00 * a12 - a02 * a10;
          const b02 = a00 * a13 - a03 * a10;
          const b03 = a01 * a12 - a02 * a11;
          const b04 = a01 * a13 - a03 * a11;
          const b05 = a02 * a13 - a03 * a12;
          const b06 = a20 * a31 - a21 * a30;
          const b07 = a20 * a32 - a22 * a30;
          const b08 = a20 * a33 - a23 * a30;
          const b09 = a21 * a32 - a22 * a31;
          const b10 = a21 * a33 - a23 * a31;
          const b11 = a22 * a33 - a23 * a32;
          let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

          if (!det) {
            return null;
          }

          det = 1.0 / det;
          out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
          out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
          out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
          out.m03 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
          out.m04 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
          out.m05 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
          out.m06 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
          out.m07 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
          out.m08 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
          return out;
        }

        static toArray(out, m, ofs = 0) {
          out[ofs + 0] = m.m00;
          out[ofs + 1] = m.m01;
          out[ofs + 2] = m.m02;
          out[ofs + 3] = m.m03;
          out[ofs + 4] = m.m04;
          out[ofs + 5] = m.m05;
          out[ofs + 6] = m.m06;
          out[ofs + 7] = m.m07;
          out[ofs + 8] = m.m08;
          return out;
        }

        static fromArray(out, arr, ofs = 0) {
          out.m00 = arr[ofs + 0];
          out.m01 = arr[ofs + 1];
          out.m02 = arr[ofs + 2];
          out.m03 = arr[ofs + 3];
          out.m04 = arr[ofs + 4];
          out.m05 = arr[ofs + 5];
          out.m06 = arr[ofs + 6];
          out.m07 = arr[ofs + 7];
          out.m08 = arr[ofs + 8];
          return out;
        }

        static add(out, a, b) {
          out.m00 = a.m00 + b.m00;
          out.m01 = a.m01 + b.m01;
          out.m02 = a.m02 + b.m02;
          out.m03 = a.m03 + b.m03;
          out.m04 = a.m04 + b.m04;
          out.m05 = a.m05 + b.m05;
          out.m06 = a.m06 + b.m06;
          out.m07 = a.m07 + b.m07;
          out.m08 = a.m08 + b.m08;
          return out;
        }

        static subtract(out, a, b) {
          out.m00 = a.m00 - b.m00;
          out.m01 = a.m01 - b.m01;
          out.m02 = a.m02 - b.m02;
          out.m03 = a.m03 - b.m03;
          out.m04 = a.m04 - b.m04;
          out.m05 = a.m05 - b.m05;
          out.m06 = a.m06 - b.m06;
          out.m07 = a.m07 - b.m07;
          out.m08 = a.m08 - b.m08;
          return out;
        }

        static multiplyScalar(out, a, b) {
          out.m00 = a.m00 * b;
          out.m01 = a.m01 * b;
          out.m02 = a.m02 * b;
          out.m03 = a.m03 * b;
          out.m04 = a.m04 * b;
          out.m05 = a.m05 * b;
          out.m06 = a.m06 * b;
          out.m07 = a.m07 * b;
          out.m08 = a.m08 * b;
          return out;
        }

        static multiplyScalarAndAdd(out, a, b, scale) {
          out.m00 = b.m00 * scale + a.m00;
          out.m01 = b.m01 * scale + a.m01;
          out.m02 = b.m02 * scale + a.m02;
          out.m03 = b.m03 * scale + a.m03;
          out.m04 = b.m04 * scale + a.m04;
          out.m05 = b.m05 * scale + a.m05;
          out.m06 = b.m06 * scale + a.m06;
          out.m07 = b.m07 * scale + a.m07;
          out.m08 = b.m08 * scale + a.m08;
          return out;
        }

        static strictEquals(a, b) {
          return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08;
        }

        static equals(a, b, epsilon = EPSILON) {
          return Math.abs(a.m00 - b.m00) <= epsilon * Math.max(1.0, Math.abs(a.m00), Math.abs(b.m00)) && Math.abs(a.m01 - b.m01) <= epsilon * Math.max(1.0, Math.abs(a.m01), Math.abs(b.m01)) && Math.abs(a.m02 - b.m02) <= epsilon * Math.max(1.0, Math.abs(a.m02), Math.abs(b.m02)) && Math.abs(a.m03 - b.m03) <= epsilon * Math.max(1.0, Math.abs(a.m03), Math.abs(b.m03)) && Math.abs(a.m04 - b.m04) <= epsilon * Math.max(1.0, Math.abs(a.m04), Math.abs(b.m04)) && Math.abs(a.m05 - b.m05) <= epsilon * Math.max(1.0, Math.abs(a.m05), Math.abs(b.m05)) && Math.abs(a.m06 - b.m06) <= epsilon * Math.max(1.0, Math.abs(a.m06), Math.abs(b.m06)) && Math.abs(a.m07 - b.m07) <= epsilon * Math.max(1.0, Math.abs(a.m07), Math.abs(b.m07)) && Math.abs(a.m08 - b.m08) <= epsilon * Math.max(1.0, Math.abs(a.m08), Math.abs(b.m08));
        }

        static toEuler(matrix, v) {
          const a00 = matrix.m00;
          const a01 = matrix.m01;
          const a02 = matrix.m02;
          const a10 = matrix.m03;
          const a11 = matrix.m04;
          const a12 = matrix.m05;
          const a20 = matrix.m06;
          const a21 = matrix.m07;
          const a22 = matrix.m08;

          if (a21 < 0.999) {
            if (a21 > -0.999) {
              v.x = Math.asin(-a21);
              v.y = Math.atan2(a20, a22);
              v.z = Math.atan2(a01, a11);
              return true;
            } else {
              v.x = HALF_PI;
              v.y = Math.atan2(a10, a00);
              v.z = 0.0;
              return false;
            }
          } else {
            v.x = -HALF_PI;
            v.y = Math.atan2(-a10, a00);
            v.z = 0.0;
            return false;
          }
        }

        constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 1, m05 = 0, m06 = 0, m07 = 0, m08 = 1) {
          super();

          if (typeof m00 === 'object') {
            this.m00 = m00.m00;
            this.m01 = m00.m01;
            this.m02 = m00.m02;
            this.m03 = m00.m03;
            this.m04 = m00.m04;
            this.m05 = m00.m05;
            this.m06 = m00.m06;
            this.m07 = m00.m07;
            this.m08 = m00.m08;
          } else {
            this.m00 = m00;
            this.m01 = m01;
            this.m02 = m02;
            this.m03 = m03;
            this.m04 = m04;
            this.m05 = m05;
            this.m06 = m06;
            this.m07 = m07;
            this.m08 = m08;
          }
        }

        clone() {
          const t = this;
          return new Mat3(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08);
        }

        set(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 1, m05 = 0, m06 = 0, m07 = 0, m08 = 1) {
          if (typeof m00 === 'object') {
            this.m00 = m00.m00;
            this.m01 = m00.m01;
            this.m02 = m00.m02;
            this.m03 = m00.m03;
            this.m04 = m00.m04;
            this.m05 = m00.m05;
            this.m06 = m00.m06;
            this.m07 = m00.m07;
            this.m08 = m00.m08;
          } else {
            this.m00 = m00;
            this.m01 = m01;
            this.m02 = m02;
            this.m03 = m03;
            this.m04 = m04;
            this.m05 = m05;
            this.m06 = m06;
            this.m07 = m07;
            this.m08 = m08;
          }

          return this;
        }

        equals(other, epsilon = EPSILON) {
          return Math.abs(this.m00 - other.m00) <= epsilon * Math.max(1.0, Math.abs(this.m00), Math.abs(other.m00)) && Math.abs(this.m01 - other.m01) <= epsilon * Math.max(1.0, Math.abs(this.m01), Math.abs(other.m01)) && Math.abs(this.m02 - other.m02) <= epsilon * Math.max(1.0, Math.abs(this.m02), Math.abs(other.m02)) && Math.abs(this.m03 - other.m03) <= epsilon * Math.max(1.0, Math.abs(this.m03), Math.abs(other.m03)) && Math.abs(this.m04 - other.m04) <= epsilon * Math.max(1.0, Math.abs(this.m04), Math.abs(other.m04)) && Math.abs(this.m05 - other.m05) <= epsilon * Math.max(1.0, Math.abs(this.m05), Math.abs(other.m05)) && Math.abs(this.m06 - other.m06) <= epsilon * Math.max(1.0, Math.abs(this.m06), Math.abs(other.m06)) && Math.abs(this.m07 - other.m07) <= epsilon * Math.max(1.0, Math.abs(this.m07), Math.abs(other.m07)) && Math.abs(this.m08 - other.m08) <= epsilon * Math.max(1.0, Math.abs(this.m08), Math.abs(other.m08));
        }

        strictEquals(other) {
          return this.m00 === other.m00 && this.m01 === other.m01 && this.m02 === other.m02 && this.m03 === other.m03 && this.m04 === other.m04 && this.m05 === other.m05 && this.m06 === other.m06 && this.m07 === other.m07 && this.m08 === other.m08;
        }

        toString() {
          const t = this;
          return `[\n${t.m00}, ${t.m01}, ${t.m02},\n${t.m03},\n${t.m04}, ${t.m05},\n${t.m06}, ${t.m07},\n${t.m08}\n` + `]`;
        }

        identity() {
          this.m00 = 1;
          this.m01 = 0;
          this.m02 = 0;
          this.m03 = 0;
          this.m04 = 1;
          this.m05 = 0;
          this.m06 = 0;
          this.m07 = 0;
          this.m08 = 1;
          return this;
        }

        transpose() {
          const a01 = this.m01;
          const a02 = this.m02;
          const a12 = this.m05;
          this.m01 = this.m03;
          this.m02 = this.m06;
          this.m03 = a01;
          this.m05 = this.m07;
          this.m06 = a02;
          this.m07 = a12;
          return this;
        }

        invert() {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a10 = this.m03;
          const a11 = this.m04;
          const a12 = this.m05;
          const a20 = this.m06;
          const a21 = this.m07;
          const a22 = this.m08;
          const b01 = a22 * a11 - a12 * a21;
          const b11 = -a22 * a10 + a12 * a20;
          const b21 = a21 * a10 - a11 * a20;
          let det = a00 * b01 + a01 * b11 + a02 * b21;

          if (det === 0) {
            this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
            return this;
          }

          det = 1.0 / det;
          this.m00 = b01 * det;
          this.m01 = (-a22 * a01 + a02 * a21) * det;
          this.m02 = (a12 * a01 - a02 * a11) * det;
          this.m03 = b11 * det;
          this.m04 = (a22 * a00 - a02 * a20) * det;
          this.m05 = (-a12 * a00 + a02 * a10) * det;
          this.m06 = b21 * det;
          this.m07 = (-a21 * a00 + a01 * a20) * det;
          this.m08 = (a11 * a00 - a01 * a10) * det;
          return this;
        }

        determinant() {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a10 = this.m03;
          const a11 = this.m04;
          const a12 = this.m05;
          const a20 = this.m06;
          const a21 = this.m07;
          const a22 = this.m08;
          return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
        }

        add(mat) {
          this.m00 += mat.m00;
          this.m01 += mat.m01;
          this.m02 += mat.m02;
          this.m03 += mat.m03;
          this.m04 += mat.m04;
          this.m05 += mat.m05;
          this.m06 += mat.m06;
          this.m07 += mat.m07;
          this.m08 += mat.m08;
          return this;
        }

        subtract(mat) {
          this.m00 -= mat.m00;
          this.m01 -= mat.m01;
          this.m02 -= mat.m02;
          this.m03 -= mat.m03;
          this.m04 -= mat.m04;
          this.m05 -= mat.m05;
          this.m06 -= mat.m06;
          this.m07 -= mat.m07;
          this.m08 -= mat.m08;
          return this;
        }

        multiply(mat) {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a10 = this.m03;
          const a11 = this.m04;
          const a12 = this.m05;
          const a20 = this.m06;
          const a21 = this.m07;
          const a22 = this.m08;
          const b00 = mat.m00;
          const b01 = mat.m01;
          const b02 = mat.m02;
          const b10 = mat.m03;
          const b11 = mat.m04;
          const b12 = mat.m05;
          const b20 = mat.m06;
          const b21 = mat.m07;
          const b22 = mat.m08;
          this.m00 = b00 * a00 + b01 * a10 + b02 * a20;
          this.m01 = b00 * a01 + b01 * a11 + b02 * a21;
          this.m02 = b00 * a02 + b01 * a12 + b02 * a22;
          this.m03 = b10 * a00 + b11 * a10 + b12 * a20;
          this.m04 = b10 * a01 + b11 * a11 + b12 * a21;
          this.m05 = b10 * a02 + b11 * a12 + b12 * a22;
          this.m06 = b20 * a00 + b21 * a10 + b22 * a20;
          this.m07 = b20 * a01 + b21 * a11 + b22 * a21;
          this.m08 = b20 * a02 + b21 * a12 + b22 * a22;
          return this;
        }

        multiplyScalar(scalar) {
          this.m00 *= scalar;
          this.m01 *= scalar;
          this.m02 *= scalar;
          this.m03 *= scalar;
          this.m04 *= scalar;
          this.m05 *= scalar;
          this.m06 *= scalar;
          this.m07 *= scalar;
          this.m08 *= scalar;
          return this;
        }

        scale(vec) {
          const x = vec.x;
          const y = vec.y;
          this.m00 = x * this.m00;
          this.m01 = x * this.m01;
          this.m02 = x * this.m02;
          this.m03 = y * this.m03;
          this.m04 = y * this.m04;
          this.m05 = y * this.m05;
          this.m06 = this.m06;
          this.m07 = this.m07;
          this.m08 = this.m08;
          return this;
        }

        rotate(rad) {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a10 = this.m03;
          const a11 = this.m04;
          const a12 = this.m05;
          const a20 = this.m06;
          const a21 = this.m07;
          const a22 = this.m08;
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          this.m00 = c * a00 + s * a10;
          this.m01 = c * a01 + s * a11;
          this.m02 = c * a02 + s * a12;
          this.m03 = c * a10 - s * a00;
          this.m04 = c * a11 - s * a01;
          this.m05 = c * a12 - s * a02;
          this.m06 = a20;
          this.m07 = a21;
          this.m08 = a22;
          return this;
        }

        fromQuat(q) {
          const x = q.x;
          const y = q.y;
          const z = q.z;
          const w = q.w;
          const x2 = x + x;
          const y2 = y + y;
          const z2 = z + z;
          const xx = x * x2;
          const yx = y * x2;
          const yy = y * y2;
          const zx = z * x2;
          const zy = z * y2;
          const zz = z * z2;
          const wx = w * x2;
          const wy = w * y2;
          const wz = w * z2;
          this.m00 = 1 - yy - zz;
          this.m03 = yx - wz;
          this.m06 = zx + wy;
          this.m01 = yx + wz;
          this.m04 = 1 - xx - zz;
          this.m07 = zy - wx;
          this.m02 = zx - wy;
          this.m05 = zy + wx;
          this.m08 = 1 - xx - yy;
          return this;
        }

      } exports('cK', Mat3);
      Mat3.IDENTITY = Object.freeze(new Mat3());
      const v3_1 = new Vec3();
      const v3_2 = new Vec3();
      CCClass.fastDefine('cc.Mat3', Mat3, {
        m00: 1,
        m01: 0,
        m02: 0,
        m03: 0,
        m04: 1,
        m05: 0,
        m06: 0,
        m07: 0,
        m08: 1
      });
      legacyCC.Mat3 = Mat3;

      class Quat extends ValueType {
        static clone(a) {
          return new Quat(a.x, a.y, a.z, a.w);
        }

        static copy(out, a) {
          out.x = a.x;
          out.y = a.y;
          out.z = a.z;
          out.w = a.w;
          return out;
        }

        static set(out, x, y, z, w) {
          out.x = x;
          out.y = y;
          out.z = z;
          out.w = w;
          return out;
        }

        static identity(out) {
          out.x = 0;
          out.y = 0;
          out.z = 0;
          out.w = 1;
          return out;
        }

        static rotationTo(out, a, b) {
          const dot = Vec3.dot(a, b);

          if (dot < -0.999999) {
            Vec3.cross(v3_1$1, Vec3.UNIT_X, a);

            if (v3_1$1.length() < 0.000001) {
              Vec3.cross(v3_1$1, Vec3.UNIT_Y, a);
            }

            Vec3.normalize(v3_1$1, v3_1$1);
            Quat.fromAxisAngle(out, v3_1$1, Math.PI);
            return out;
          } else if (dot > 0.999999) {
            out.x = 0;
            out.y = 0;
            out.z = 0;
            out.w = 1;
            return out;
          } else {
            Vec3.cross(v3_1$1, a, b);
            out.x = v3_1$1.x;
            out.y = v3_1$1.y;
            out.z = v3_1$1.z;
            out.w = 1 + dot;
            return Quat.normalize(out, out);
          }
        }

        static getAxisAngle(outAxis, q) {
          const rad = Math.acos(q.w) * 2.0;
          const s = Math.sin(rad / 2.0);

          if (s !== 0.0) {
            outAxis.x = q.x / s;
            outAxis.y = q.y / s;
            outAxis.z = q.z / s;
          } else {
            outAxis.x = 1;
            outAxis.y = 0;
            outAxis.z = 0;
          }

          return rad;
        }

        static multiply(out, a, b) {
          const x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;
          const y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;
          const z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;
          const w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;
          out.x = x;
          out.y = y;
          out.z = z;
          out.w = w;
          return out;
        }

        static multiplyScalar(out, a, b) {
          out.x = a.x * b;
          out.y = a.y * b;
          out.z = a.z * b;
          out.w = a.w * b;
          return out;
        }

        static scaleAndAdd(out, a, b, scale) {
          out.x = a.x + b.x * scale;
          out.y = a.y + b.y * scale;
          out.z = a.z + b.z * scale;
          out.w = a.w + b.w * scale;
          return out;
        }

        static rotateX(out, a, rad) {
          rad *= 0.5;
          const bx = Math.sin(rad);
          const bw = Math.cos(rad);
          const {
            x,
            y,
            z,
            w
          } = a;
          out.x = x * bw + w * bx;
          out.y = y * bw + z * bx;
          out.z = z * bw - y * bx;
          out.w = w * bw - x * bx;
          return out;
        }

        static rotateY(out, a, rad) {
          rad *= 0.5;
          const by = Math.sin(rad);
          const bw = Math.cos(rad);
          const {
            x,
            y,
            z,
            w
          } = a;
          out.x = x * bw - z * by;
          out.y = y * bw + w * by;
          out.z = z * bw + x * by;
          out.w = w * bw - y * by;
          return out;
        }

        static rotateZ(out, a, rad) {
          rad *= 0.5;
          const bz = Math.sin(rad);
          const bw = Math.cos(rad);
          const {
            x,
            y,
            z,
            w
          } = a;
          out.x = x * bw + y * bz;
          out.y = y * bw - x * bz;
          out.z = z * bw + w * bz;
          out.w = w * bw - z * bz;
          return out;
        }

        static rotateAround(out, rot, axis, rad) {
          Quat.invert(qt_1, rot);
          Vec3.transformQuat(v3_1$1, axis, qt_1);
          Quat.fromAxisAngle(qt_1, v3_1$1, rad);
          Quat.multiply(out, rot, qt_1);
          return out;
        }

        static rotateAroundLocal(out, rot, axis, rad) {
          Quat.fromAxisAngle(qt_1, axis, rad);
          Quat.multiply(out, rot, qt_1);
          return out;
        }

        static calculateW(out, a) {
          out.x = a.x;
          out.y = a.y;
          out.z = a.z;
          out.w = Math.sqrt(Math.abs(1.0 - a.x * a.x - a.y * a.y - a.z * a.z));
          return out;
        }

        static dot(a, b) {
          return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
        }

        static lerp(out, a, b, t) {
          out.x = a.x + t * (b.x - a.x);
          out.y = a.y + t * (b.y - a.y);
          out.z = a.z + t * (b.z - a.z);
          out.w = a.w + t * (b.w - a.w);
          return out;
        }

        static slerp(out, a, b, t) {
          let scale0 = 0;
          let scale1 = 0;
          let bx = b.x;
          let by = b.y;
          let bz = b.z;
          let bw = b.w;
          let cosom = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;

          if (cosom < 0.0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
          }

          if (1.0 - cosom > 0.000001) {
            const omega = Math.acos(cosom);
            const sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
          } else {
            scale0 = 1.0 - t;
            scale1 = t;
          }

          out.x = scale0 * a.x + scale1 * bx;
          out.y = scale0 * a.y + scale1 * by;
          out.z = scale0 * a.z + scale1 * bz;
          out.w = scale0 * a.w + scale1 * bw;
          return out;
        }

        static sqlerp(out, a, b, c, d, t) {
          Quat.slerp(qt_1, a, d, t);
          Quat.slerp(qt_2, b, c, t);
          Quat.slerp(out, qt_1, qt_2, 2 * t * (1 - t));
          return out;
        }

        static invert(out, a) {
          const dot = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
          const invDot = dot ? 1.0 / dot : 0;
          out.x = -a.x * invDot;
          out.y = -a.y * invDot;
          out.z = -a.z * invDot;
          out.w = a.w * invDot;
          return out;
        }

        static conjugate(out, a) {
          out.x = -a.x;
          out.y = -a.y;
          out.z = -a.z;
          out.w = a.w;
          return out;
        }

        static len(a) {
          return Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
        }

        static lengthSqr(a) {
          return a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
        }

        static normalize(out, a) {
          let len = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            out.x = a.x * len;
            out.y = a.y * len;
            out.z = a.z * len;
            out.w = a.w * len;
          } else {
            out.x = 0;
            out.y = 0;
            out.z = 0;
            out.w = 0;
          }

          return out;
        }

        static fromAxes(out, xAxis, yAxis, zAxis) {
          Mat3.set(m3_1, xAxis.x, xAxis.y, xAxis.z, yAxis.x, yAxis.y, yAxis.z, zAxis.x, zAxis.y, zAxis.z);
          return Quat.normalize(out, Quat.fromMat3(out, m3_1));
        }

        static fromViewUp(out, view, up) {
          Mat3.fromViewUp(m3_1, view, up);
          return Quat.normalize(out, Quat.fromMat3(out, m3_1));
        }

        static fromAxisAngle(out, axis, rad) {
          rad *= 0.5;
          const s = Math.sin(rad);
          out.x = s * axis.x;
          out.y = s * axis.y;
          out.z = s * axis.z;
          out.w = Math.cos(rad);
          return out;
        }

        static fromMat3(out, m) {
          const {
            m00,
            m03: m01,
            m06: m02,
            m01: m10,
            m04: m11,
            m07: m12,
            m02: m20,
            m05: m21,
            m08: m22
          } = m;
          const trace = m00 + m11 + m22;

          if (trace > 0) {
            const s = 0.5 / Math.sqrt(trace + 1.0);
            out.w = 0.25 / s;
            out.x = (m21 - m12) * s;
            out.y = (m02 - m20) * s;
            out.z = (m10 - m01) * s;
          } else if (m00 > m11 && m00 > m22) {
            const s = 0.5 / Math.sqrt(1.0 + m00 - m11 - m22);
            out.w = (m21 - m12) * s;
            out.x = 0.25 / s;
            out.y = (m01 + m10) * s;
            out.z = (m02 + m20) * s;
          } else if (m11 > m22) {
            const s = 0.5 / Math.sqrt(1.0 + m11 - m00 - m22);
            out.w = (m02 - m20) * s;
            out.x = (m01 + m10) * s;
            out.y = 0.25 / s;
            out.z = (m12 + m21) * s;
          } else {
            const s = 0.5 / Math.sqrt(1.0 + m22 - m00 - m11);
            out.w = (m10 - m01) * s;
            out.x = (m02 + m20) * s;
            out.y = (m12 + m21) * s;
            out.z = 0.25 / s;
          }

          return out;
        }

        static fromEuler(out, x, y, z) {
          x *= halfToRad;
          y *= halfToRad;
          z *= halfToRad;
          const sx = Math.sin(x);
          const cx = Math.cos(x);
          const sy = Math.sin(y);
          const cy = Math.cos(y);
          const sz = Math.sin(z);
          const cz = Math.cos(z);
          out.x = sx * cy * cz + cx * sy * sz;
          out.y = cx * sy * cz + sx * cy * sz;
          out.z = cx * cy * sz - sx * sy * cz;
          out.w = cx * cy * cz - sx * sy * sz;
          return out;
        }

        static fromAngleZ(out, z) {
          z *= halfToRad;
          out.x = out.y = 0;
          out.z = Math.sin(z);
          out.w = Math.cos(z);
          return out;
        }

        static toAxisX(out, q) {
          const fy = 2.0 * q.y;
          const fz = 2.0 * q.z;
          out.x = 1.0 - fy * q.y - fz * q.z;
          out.y = fy * q.x + fz * q.w;
          out.z = fz * q.x + fy * q.w;
          return out;
        }

        static toAxisY(out, q) {
          const fx = 2.0 * q.x;
          const fy = 2.0 * q.y;
          const fz = 2.0 * q.z;
          out.x = fy * q.x - fz * q.w;
          out.y = 1.0 - fx * q.x - fz * q.z;
          out.z = fz * q.y + fx * q.w;
          return out;
        }

        static toAxisZ(out, q) {
          const fx = 2.0 * q.x;
          const fy = 2.0 * q.y;
          const fz = 2.0 * q.z;
          out.x = fz * q.x - fy * q.w;
          out.y = fz * q.y - fx * q.w;
          out.z = 1.0 - fx * q.x - fy * q.y;
          return out;
        }

        static toEuler(out, q, outerZ) {
          const {
            x,
            y,
            z,
            w
          } = q;
          let bank = 0;
          let heading = 0;
          let attitude = 0;
          const test = x * y + z * w;

          if (test > 0.499999) {
            bank = 0;
            heading = toDegree(2 * Math.atan2(x, w));
            attitude = 90;
          } else if (test < -0.499999) {
            bank = 0;
            heading = -toDegree(2 * Math.atan2(x, w));
            attitude = -90;
          } else {
            const sqx = x * x;
            const sqy = y * y;
            const sqz = z * z;
            bank = toDegree(Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz));
            heading = toDegree(Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz));
            attitude = toDegree(Math.asin(2 * test));

            if (outerZ) {
              bank = -180 * Math.sign(bank + 1e-6) + bank;
              heading = -180 * Math.sign(heading + 1e-6) + heading;
              attitude = 180 * Math.sign(attitude + 1e-6) - attitude;
            }
          }

          out.x = bank;
          out.y = heading;
          out.z = attitude;
          return out;
        }

        static toEulerInYXZOrder(out, q) {
          Mat3.fromQuat(m3_1, q);
          Mat3.toEuler(m3_1, out);
          out.x = toDegree(out.x);
          out.y = toDegree(out.y);
          out.z = toDegree(out.z);
        }

        static toArray(out, q, ofs = 0) {
          out[ofs + 0] = q.x;
          out[ofs + 1] = q.y;
          out[ofs + 2] = q.z;
          out[ofs + 3] = q.w;
          return out;
        }

        static fromArray(out, arr, ofs = 0) {
          out.x = arr[ofs + 0];
          out.y = arr[ofs + 1];
          out.z = arr[ofs + 2];
          out.w = arr[ofs + 3];
          return out;
        }

        static strictEquals(a, b) {
          return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
        }

        static equals(a, b, epsilon = EPSILON) {
          return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= epsilon * Math.max(1.0, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= epsilon * Math.max(1.0, Math.abs(a.w), Math.abs(b.w));
        }

        constructor(x, y, z, w) {
          super();

          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
            this.z = x.z;
            this.w = x.w;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
            this.w = w !== null && w !== void 0 ? w : 1;
          }
        }

        clone() {
          return new Quat(this.x, this.y, this.z, this.w);
        }

        set(x, y, z, w) {
          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
            this.z = x.z;
            this.w = x.w;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
            this.w = w !== null && w !== void 0 ? w : 1;
          }

          return this;
        }

        equals(other, epsilon = EPSILON) {
          return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(other.z)) && Math.abs(this.w - other.w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(other.w));
        }

        strictEquals(other) {
          return other && this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
        }

        getEulerAngles(out) {
          return Quat.toEuler(out, this);
        }

        lerp(to, ratio) {
          this.x += ratio * (to.x - this.x);
          this.y += ratio * (to.y - this.y);
          this.z += ratio * (to.z - this.z);
          this.w += ratio * (to.w - this.w);
          return this;
        }

        slerp(to, ratio) {
          return Quat.slerp(this, this, to, ratio);
        }

        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }

        lengthSqr() {
          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }

      } exports('cL', Quat);
      Quat.IDENTITY = Object.freeze(new Quat());
      const qt_1 = new Quat();
      const qt_2 = new Quat();
      const v3_1$1 = new Vec3();
      const m3_1 = new Mat3();
      const halfToRad = 0.5 * Math.PI / 180.0;
      CCClass.fastDefine('cc.Quat', Quat, {
        x: 0,
        y: 0,
        z: 0,
        w: 1
      });
      legacyCC.Quat = Quat;
      function quat(x = 0, y = 0, z = 0, w = 1) {
        return new Quat(x, y, z, w);
      }
      legacyCC.quat = quat;

      const preTransforms = exports('eL', Object.freeze([Object.freeze([1, 0, 0, 1]), Object.freeze([0, 1, -1, 0]), Object.freeze([-1, 0, 0, -1]), Object.freeze([0, -1, 1, 0])]));
      class Mat4 extends ValueType {
        static clone(a) {
          return new Mat4(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08, a.m09, a.m10, a.m11, a.m12, a.m13, a.m14, a.m15);
        }

        static copy(out, a) {
          out.m00 = a.m00;
          out.m01 = a.m01;
          out.m02 = a.m02;
          out.m03 = a.m03;
          out.m04 = a.m04;
          out.m05 = a.m05;
          out.m06 = a.m06;
          out.m07 = a.m07;
          out.m08 = a.m08;
          out.m09 = a.m09;
          out.m10 = a.m10;
          out.m11 = a.m11;
          out.m12 = a.m12;
          out.m13 = a.m13;
          out.m14 = a.m14;
          out.m15 = a.m15;
          return out;
        }

        static set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
          out.m00 = m00;
          out.m01 = m01;
          out.m02 = m02;
          out.m03 = m03;
          out.m04 = m10;
          out.m05 = m11;
          out.m06 = m12;
          out.m07 = m13;
          out.m08 = m20;
          out.m09 = m21;
          out.m10 = m22;
          out.m11 = m23;
          out.m12 = m30;
          out.m13 = m31;
          out.m14 = m32;
          out.m15 = m33;
          return out;
        }

        static identity(out) {
          out.m00 = 1;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = 1;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = 1;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        }

        static transpose(out, a) {
          if (out === a) {
            const a01 = a.m01;
            const a02 = a.m02;
            const a03 = a.m03;
            const a12 = a.m06;
            const a13 = a.m07;
            const a23 = a.m11;
            out.m01 = a.m04;
            out.m02 = a.m08;
            out.m03 = a.m12;
            out.m04 = a01;
            out.m06 = a.m09;
            out.m07 = a.m13;
            out.m08 = a02;
            out.m09 = a12;
            out.m11 = a.m14;
            out.m12 = a03;
            out.m13 = a13;
            out.m14 = a23;
          } else {
            out.m00 = a.m00;
            out.m01 = a.m04;
            out.m02 = a.m08;
            out.m03 = a.m12;
            out.m04 = a.m01;
            out.m05 = a.m05;
            out.m06 = a.m09;
            out.m07 = a.m13;
            out.m08 = a.m02;
            out.m09 = a.m06;
            out.m10 = a.m10;
            out.m11 = a.m14;
            out.m12 = a.m03;
            out.m13 = a.m07;
            out.m14 = a.m11;
            out.m15 = a.m15;
          }

          return out;
        }

        static invert(out, a) {
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a03 = a.m03;
          const a10 = a.m04;
          const a11 = a.m05;
          const a12 = a.m06;
          const a13 = a.m07;
          const a20 = a.m08;
          const a21 = a.m09;
          const a22 = a.m10;
          const a23 = a.m11;
          const a30 = a.m12;
          const a31 = a.m13;
          const a32 = a.m14;
          const a33 = a.m15;
          const b00 = a00 * a11 - a01 * a10;
          const b01 = a00 * a12 - a02 * a10;
          const b02 = a00 * a13 - a03 * a10;
          const b03 = a01 * a12 - a02 * a11;
          const b04 = a01 * a13 - a03 * a11;
          const b05 = a02 * a13 - a03 * a12;
          const b06 = a20 * a31 - a21 * a30;
          const b07 = a20 * a32 - a22 * a30;
          const b08 = a20 * a33 - a23 * a30;
          const b09 = a21 * a32 - a22 * a31;
          const b10 = a21 * a33 - a23 * a31;
          const b11 = a22 * a33 - a23 * a32;
          let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

          if (det === 0) {
            out.m00 = 0;
            out.m01 = 0;
            out.m02 = 0;
            out.m03 = 0;
            out.m04 = 0;
            out.m05 = 0;
            out.m06 = 0;
            out.m07 = 0;
            out.m08 = 0;
            out.m09 = 0;
            out.m10 = 0;
            out.m11 = 0;
            out.m12 = 0;
            out.m13 = 0;
            out.m14 = 0;
            out.m15 = 0;
            return out;
          }

          det = 1.0 / det;
          out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
          out.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
          out.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
          out.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
          out.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
          out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
          out.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
          out.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
          out.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
          out.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
          out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
          out.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
          out.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
          out.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
          out.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
          out.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
          return out;
        }

        static determinant(a) {
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a03 = a.m03;
          const a10 = a.m04;
          const a11 = a.m05;
          const a12 = a.m06;
          const a13 = a.m07;
          const a20 = a.m08;
          const a21 = a.m09;
          const a22 = a.m10;
          const a23 = a.m11;
          const a30 = a.m12;
          const a31 = a.m13;
          const a32 = a.m14;
          const a33 = a.m15;
          const b00 = a00 * a11 - a01 * a10;
          const b01 = a00 * a12 - a02 * a10;
          const b02 = a00 * a13 - a03 * a10;
          const b03 = a01 * a12 - a02 * a11;
          const b04 = a01 * a13 - a03 * a11;
          const b05 = a02 * a13 - a03 * a12;
          const b06 = a20 * a31 - a21 * a30;
          const b07 = a20 * a32 - a22 * a30;
          const b08 = a20 * a33 - a23 * a30;
          const b09 = a21 * a32 - a22 * a31;
          const b10 = a21 * a33 - a23 * a31;
          const b11 = a22 * a33 - a23 * a32;
          return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        }

        static multiply(out, a, b) {
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a03 = a.m03;
          const a10 = a.m04;
          const a11 = a.m05;
          const a12 = a.m06;
          const a13 = a.m07;
          const a20 = a.m08;
          const a21 = a.m09;
          const a22 = a.m10;
          const a23 = a.m11;
          const a30 = a.m12;
          const a31 = a.m13;
          const a32 = a.m14;
          const a33 = a.m15;
          let b0 = b.m00;
          let b1 = b.m01;
          let b2 = b.m02;
          let b3 = b.m03;
          out.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b.m04;
          b1 = b.m05;
          b2 = b.m06;
          b3 = b.m07;
          out.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b.m08;
          b1 = b.m09;
          b2 = b.m10;
          b3 = b.m11;
          out.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b.m12;
          b1 = b.m13;
          b2 = b.m14;
          b3 = b.m15;
          out.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          return out;
        }

        static transform(out, a, v) {
          const x = v.x;
          const y = v.y;
          const z = v.z;

          if (a === out) {
            out.m12 = a.m00 * x + a.m04 * y + a.m08 * z + a.m12;
            out.m13 = a.m01 * x + a.m05 * y + a.m09 * z + a.m13;
            out.m14 = a.m02 * x + a.m06 * y + a.m10 * z + a.m14;
            out.m15 = a.m03 * x + a.m07 * y + a.m11 * z + a.m15;
          } else {
            const a00 = a.m00;
            const a01 = a.m01;
            const a02 = a.m02;
            const a03 = a.m03;
            const a10 = a.m04;
            const a11 = a.m05;
            const a12 = a.m06;
            const a13 = a.m07;
            const a20 = a.m08;
            const a21 = a.m09;
            const a22 = a.m10;
            const a23 = a.m11;
            const a30 = a.m12;
            const a31 = a.m13;
            const a32 = a.m14;
            const a33 = a.m15;
            out.m00 = a00;
            out.m01 = a01;
            out.m02 = a02;
            out.m03 = a03;
            out.m04 = a10;
            out.m05 = a11;
            out.m06 = a12;
            out.m07 = a13;
            out.m08 = a20;
            out.m09 = a21;
            out.m10 = a22;
            out.m11 = a23;
            out.m12 = a00 * x + a10 * y + a20 * z + a.m12;
            out.m13 = a01 * x + a11 * y + a21 * z + a.m13;
            out.m14 = a02 * x + a12 * y + a22 * z + a.m14;
            out.m15 = a03 * x + a13 * y + a23 * z + a.m15;
          }

          return out;
        }

        static translate(out, a, v) {
          if (a === out) {
            out.m12 += v.x;
            out.m13 += v.y;
            out.m14 += v.z;
          } else {
            out.m00 = a.m00;
            out.m01 = a.m01;
            out.m02 = a.m02;
            out.m03 = a.m03;
            out.m04 = a.m04;
            out.m05 = a.m05;
            out.m06 = a.m06;
            out.m07 = a.m07;
            out.m08 = a.m08;
            out.m09 = a.m09;
            out.m10 = a.m10;
            out.m11 = a.m11;
            out.m12 += v.x;
            out.m13 += v.y;
            out.m14 += v.z;
            out.m15 = a.m15;
          }

          return out;
        }

        static scale(out, a, v) {
          const x = v.x;
          const y = v.y;
          const z = v.z;
          out.m00 = a.m00 * x;
          out.m01 = a.m01 * x;
          out.m02 = a.m02 * x;
          out.m03 = a.m03 * x;
          out.m04 = a.m04 * y;
          out.m05 = a.m05 * y;
          out.m06 = a.m06 * y;
          out.m07 = a.m07 * y;
          out.m08 = a.m08 * z;
          out.m09 = a.m09 * z;
          out.m10 = a.m10 * z;
          out.m11 = a.m11 * z;
          out.m12 = a.m12;
          out.m13 = a.m13;
          out.m14 = a.m14;
          out.m15 = a.m15;
          return out;
        }

        static rotate(out, a, rad, axis) {
          let x = axis.x;
          let y = axis.y;
          let z = axis.z;
          let len = Math.sqrt(x * x + y * y + z * z);

          if (Math.abs(len) < EPSILON) {
            return null;
          }

          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          const t = 1 - c;
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a03 = a.m03;
          const a10 = a.m04;
          const a11 = a.m05;
          const a12 = a.m06;
          const a13 = a.m07;
          const a20 = a.m08;
          const a21 = a.m09;
          const a22 = a.m10;
          const a23 = a.m11;
          const b00 = x * x * t + c;
          const b01 = y * x * t + z * s;
          const b02 = z * x * t - y * s;
          const b10 = x * y * t - z * s;
          const b11 = y * y * t + c;
          const b12 = z * y * t + x * s;
          const b20 = x * z * t + y * s;
          const b21 = y * z * t - x * s;
          const b22 = z * z * t + c;
          out.m00 = a00 * b00 + a10 * b01 + a20 * b02;
          out.m01 = a01 * b00 + a11 * b01 + a21 * b02;
          out.m02 = a02 * b00 + a12 * b01 + a22 * b02;
          out.m03 = a03 * b00 + a13 * b01 + a23 * b02;
          out.m04 = a00 * b10 + a10 * b11 + a20 * b12;
          out.m05 = a01 * b10 + a11 * b11 + a21 * b12;
          out.m06 = a02 * b10 + a12 * b11 + a22 * b12;
          out.m07 = a03 * b10 + a13 * b11 + a23 * b12;
          out.m08 = a00 * b20 + a10 * b21 + a20 * b22;
          out.m09 = a01 * b20 + a11 * b21 + a21 * b22;
          out.m10 = a02 * b20 + a12 * b21 + a22 * b22;
          out.m11 = a03 * b20 + a13 * b21 + a23 * b22;

          if (a !== out) {
            out.m12 = a.m12;
            out.m13 = a.m13;
            out.m14 = a.m14;
            out.m15 = a.m15;
          }

          return out;
        }

        static rotateX(out, a, rad) {
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          const a10 = a.m04;
          const a11 = a.m05;
          const a12 = a.m06;
          const a13 = a.m07;
          const a20 = a.m08;
          const a21 = a.m09;
          const a22 = a.m10;
          const a23 = a.m11;

          if (a !== out) {
            out.m00 = a.m00;
            out.m01 = a.m01;
            out.m02 = a.m02;
            out.m03 = a.m03;
            out.m12 = a.m12;
            out.m13 = a.m13;
            out.m14 = a.m14;
            out.m15 = a.m15;
          }

          out.m04 = a10 * c + a20 * s;
          out.m05 = a11 * c + a21 * s;
          out.m06 = a12 * c + a22 * s;
          out.m07 = a13 * c + a23 * s;
          out.m08 = a20 * c - a10 * s;
          out.m09 = a21 * c - a11 * s;
          out.m10 = a22 * c - a12 * s;
          out.m11 = a23 * c - a13 * s;
          return out;
        }

        static rotateY(out, a, rad) {
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a03 = a.m03;
          const a20 = a.m08;
          const a21 = a.m09;
          const a22 = a.m10;
          const a23 = a.m11;

          if (a !== out) {
            out.m04 = a.m04;
            out.m05 = a.m05;
            out.m06 = a.m06;
            out.m07 = a.m07;
            out.m12 = a.m12;
            out.m13 = a.m13;
            out.m14 = a.m14;
            out.m15 = a.m15;
          }

          out.m00 = a00 * c - a20 * s;
          out.m01 = a01 * c - a21 * s;
          out.m02 = a02 * c - a22 * s;
          out.m03 = a03 * c - a23 * s;
          out.m08 = a00 * s + a20 * c;
          out.m09 = a01 * s + a21 * c;
          out.m10 = a02 * s + a22 * c;
          out.m11 = a03 * s + a23 * c;
          return out;
        }

        static rotateZ(out, a, rad) {
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a03 = a.m03;
          const a10 = a.m04;
          const a11 = a.m05;
          const a12 = a.m06;
          const a13 = a.m07;

          if (a !== out) {
            out.m08 = a.m08;
            out.m09 = a.m09;
            out.m10 = a.m10;
            out.m11 = a.m11;
            out.m12 = a.m12;
            out.m13 = a.m13;
            out.m14 = a.m14;
            out.m15 = a.m15;
          }

          out.m00 = a00 * c + a10 * s;
          out.m01 = a01 * c + a11 * s;
          out.m02 = a02 * c + a12 * s;
          out.m03 = a03 * c + a13 * s;
          out.m04 = a10 * c - a00 * s;
          out.m05 = a11 * c - a01 * s;
          out.m06 = a12 * c - a02 * s;
          out.m07 = a13 * c - a03 * s;
          return out;
        }

        static fromTranslation(out, v) {
          out.m00 = 1;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = 1;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = 1;
          out.m11 = 0;
          out.m12 = v.x;
          out.m13 = v.y;
          out.m14 = v.z;
          out.m15 = 1;
          return out;
        }

        static fromScaling(out, v) {
          out.m00 = v.x;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = v.y;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = v.z;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        }

        static fromRotation(out, rad, axis) {
          let x = axis.x;
          let y = axis.y;
          let z = axis.z;
          let len = Math.sqrt(x * x + y * y + z * z);

          if (Math.abs(len) < EPSILON) {
            return null;
          }

          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          const t = 1 - c;
          out.m00 = x * x * t + c;
          out.m01 = y * x * t + z * s;
          out.m02 = z * x * t - y * s;
          out.m03 = 0;
          out.m04 = x * y * t - z * s;
          out.m05 = y * y * t + c;
          out.m06 = z * y * t + x * s;
          out.m07 = 0;
          out.m08 = x * z * t + y * s;
          out.m09 = y * z * t - x * s;
          out.m10 = z * z * t + c;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        }

        static fromXRotation(out, rad) {
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          out.m00 = 1;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = c;
          out.m06 = s;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = -s;
          out.m10 = c;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        }

        static fromYRotation(out, rad) {
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          out.m00 = c;
          out.m01 = 0;
          out.m02 = -s;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = 1;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = s;
          out.m09 = 0;
          out.m10 = c;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        }

        static fromZRotation(out, rad) {
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          out.m00 = c;
          out.m01 = s;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = -s;
          out.m05 = c;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = 1;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        }

        static fromRT(out, q, v) {
          const x = q.x;
          const y = q.y;
          const z = q.z;
          const w = q.w;
          const x2 = x + x;
          const y2 = y + y;
          const z2 = z + z;
          const xx = x * x2;
          const xy = x * y2;
          const xz = x * z2;
          const yy = y * y2;
          const yz = y * z2;
          const zz = z * z2;
          const wx = w * x2;
          const wy = w * y2;
          const wz = w * z2;
          out.m00 = 1 - (yy + zz);
          out.m01 = xy + wz;
          out.m02 = xz - wy;
          out.m03 = 0;
          out.m04 = xy - wz;
          out.m05 = 1 - (xx + zz);
          out.m06 = yz + wx;
          out.m07 = 0;
          out.m08 = xz + wy;
          out.m09 = yz - wx;
          out.m10 = 1 - (xx + yy);
          out.m11 = 0;
          out.m12 = v.x;
          out.m13 = v.y;
          out.m14 = v.z;
          out.m15 = 1;
          return out;
        }

        static getTranslation(out, mat) {
          out.x = mat.m12;
          out.y = mat.m13;
          out.z = mat.m14;
          return out;
        }

        static getScaling(out, mat) {
          const m00 = m3_1$1.m00 = mat.m00;
          const m01 = m3_1$1.m01 = mat.m01;
          const m02 = m3_1$1.m02 = mat.m02;
          const m04 = m3_1$1.m03 = mat.m04;
          const m05 = m3_1$1.m04 = mat.m05;
          const m06 = m3_1$1.m05 = mat.m06;
          const m08 = m3_1$1.m06 = mat.m08;
          const m09 = m3_1$1.m07 = mat.m09;
          const m10 = m3_1$1.m08 = mat.m10;
          out.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
          out.y = Math.sqrt(m04 * m04 + m05 * m05 + m06 * m06);
          out.z = Math.sqrt(m08 * m08 + m09 * m09 + m10 * m10);

          if (Mat3.determinant(m3_1$1) < 0) {
            out.x *= -1;
          }

          return out;
        }

        static getRotation(out, mat) {
          const trace = mat.m00 + mat.m05 + mat.m10;
          let S = 0;

          if (trace > 0) {
            S = Math.sqrt(trace + 1.0) * 2;
            out.w = 0.25 * S;
            out.x = (mat.m06 - mat.m09) / S;
            out.y = (mat.m08 - mat.m02) / S;
            out.z = (mat.m01 - mat.m04) / S;
          } else if (mat.m00 > mat.m05 && mat.m00 > mat.m10) {
            S = Math.sqrt(1.0 + mat.m00 - mat.m05 - mat.m10) * 2;
            out.w = (mat.m06 - mat.m09) / S;
            out.x = 0.25 * S;
            out.y = (mat.m01 + mat.m04) / S;
            out.z = (mat.m08 + mat.m02) / S;
          } else if (mat.m05 > mat.m10) {
            S = Math.sqrt(1.0 + mat.m05 - mat.m00 - mat.m10) * 2;
            out.w = (mat.m08 - mat.m02) / S;
            out.x = (mat.m01 + mat.m04) / S;
            out.y = 0.25 * S;
            out.z = (mat.m06 + mat.m09) / S;
          } else {
            S = Math.sqrt(1.0 + mat.m10 - mat.m00 - mat.m05) * 2;
            out.w = (mat.m01 - mat.m04) / S;
            out.x = (mat.m08 + mat.m02) / S;
            out.y = (mat.m06 + mat.m09) / S;
            out.z = 0.25 * S;
          }

          return out;
        }

        static toRTS(m, q, v, s) {
          const sx = Vec3.set(v3_1$2, m.m00, m.m01, m.m02).length();
          const sy = Vec3.set(v3_1$2, m.m04, m.m05, m.m06).length();
          const sz = Vec3.set(v3_1$2, m.m08, m.m09, m.m10).length();

          if (s) {
            s.x = sx;
            s.y = sy;
            s.z = sz;
          }

          if (v) {
            Vec3.set(v, m.m12, m.m13, m.m14);
          }

          if (q) {
            m3_1$1.m00 = m.m00 / sx;
            m3_1$1.m01 = m.m01 / sx;
            m3_1$1.m02 = m.m02 / sx;
            m3_1$1.m03 = m.m04 / sy;
            m3_1$1.m04 = m.m05 / sy;
            m3_1$1.m05 = m.m06 / sy;
            m3_1$1.m06 = m.m08 / sz;
            m3_1$1.m07 = m.m09 / sz;
            m3_1$1.m08 = m.m10 / sz;
            const det = Mat3.determinant(m3_1$1);

            if (det < 0) {
              if (s) s.x *= -1;
              m3_1$1.m00 *= -1;
              m3_1$1.m01 *= -1;
              m3_1$1.m02 *= -1;
            }

            Quat.fromMat3(q, m3_1$1);
          }
        }

        static fromRTS(out, q, v, s) {
          const x = q.x;
          const y = q.y;
          const z = q.z;
          const w = q.w;
          const x2 = x + x;
          const y2 = y + y;
          const z2 = z + z;
          const xx = x * x2;
          const xy = x * y2;
          const xz = x * z2;
          const yy = y * y2;
          const yz = y * z2;
          const zz = z * z2;
          const wx = w * x2;
          const wy = w * y2;
          const wz = w * z2;
          const sx = s.x;
          const sy = s.y;
          const sz = s.z;
          out.m00 = (1 - (yy + zz)) * sx;
          out.m01 = (xy + wz) * sx;
          out.m02 = (xz - wy) * sx;
          out.m03 = 0;
          out.m04 = (xy - wz) * sy;
          out.m05 = (1 - (xx + zz)) * sy;
          out.m06 = (yz + wx) * sy;
          out.m07 = 0;
          out.m08 = (xz + wy) * sz;
          out.m09 = (yz - wx) * sz;
          out.m10 = (1 - (xx + yy)) * sz;
          out.m11 = 0;
          out.m12 = v.x;
          out.m13 = v.y;
          out.m14 = v.z;
          out.m15 = 1;
          return out;
        }

        static fromRTSOrigin(out, q, v, s, o) {
          const x = q.x;
          const y = q.y;
          const z = q.z;
          const w = q.w;
          const x2 = x + x;
          const y2 = y + y;
          const z2 = z + z;
          const xx = x * x2;
          const xy = x * y2;
          const xz = x * z2;
          const yy = y * y2;
          const yz = y * z2;
          const zz = z * z2;
          const wx = w * x2;
          const wy = w * y2;
          const wz = w * z2;
          const sx = s.x;
          const sy = s.y;
          const sz = s.z;
          const ox = o.x;
          const oy = o.y;
          const oz = o.z;
          out.m00 = (1 - (yy + zz)) * sx;
          out.m01 = (xy + wz) * sx;
          out.m02 = (xz - wy) * sx;
          out.m03 = 0;
          out.m04 = (xy - wz) * sy;
          out.m05 = (1 - (xx + zz)) * sy;
          out.m06 = (yz + wx) * sy;
          out.m07 = 0;
          out.m08 = (xz + wy) * sz;
          out.m09 = (yz - wx) * sz;
          out.m10 = (1 - (xx + yy)) * sz;
          out.m11 = 0;
          out.m12 = v.x + ox - (out.m00 * ox + out.m04 * oy + out.m08 * oz);
          out.m13 = v.y + oy - (out.m01 * ox + out.m05 * oy + out.m09 * oz);
          out.m14 = v.z + oz - (out.m02 * ox + out.m06 * oy + out.m10 * oz);
          out.m15 = 1;
          return out;
        }

        static fromQuat(out, q) {
          const x = q.x;
          const y = q.y;
          const z = q.z;
          const w = q.w;
          const x2 = x + x;
          const y2 = y + y;
          const z2 = z + z;
          const xx = x * x2;
          const yx = y * x2;
          const yy = y * y2;
          const zx = z * x2;
          const zy = z * y2;
          const zz = z * z2;
          const wx = w * x2;
          const wy = w * y2;
          const wz = w * z2;
          out.m00 = 1 - yy - zz;
          out.m01 = yx + wz;
          out.m02 = zx - wy;
          out.m03 = 0;
          out.m04 = yx - wz;
          out.m05 = 1 - xx - zz;
          out.m06 = zy + wx;
          out.m07 = 0;
          out.m08 = zx + wy;
          out.m09 = zy - wx;
          out.m10 = 1 - xx - yy;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        }

        static frustum(out, left, right, bottom, top, near, far) {
          const rl = 1 / (right - left);
          const tb = 1 / (top - bottom);
          const nf = 1 / (near - far);
          out.m00 = near * 2 * rl;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = near * 2 * tb;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = (right + left) * rl;
          out.m09 = (top + bottom) * tb;
          out.m10 = (far + near) * nf;
          out.m11 = -1;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = far * near * 2 * nf;
          out.m15 = 0;
          return out;
        }

        static perspective(out, fov, aspect, near, far, isFOVY = true, minClipZ = -1, projectionSignY = 1, orientation = 0) {
          const f = 1.0 / Math.tan(fov / 2);
          const nf = 1 / (near - far);
          const x = isFOVY ? f / aspect : f;
          const y = (isFOVY ? f : f * aspect) * projectionSignY;
          const preTransform = preTransforms[orientation];
          out.m00 = x * preTransform[0];
          out.m01 = x * preTransform[1];
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = y * preTransform[2];
          out.m05 = y * preTransform[3];
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = (far - minClipZ * near) * nf;
          out.m11 = -1;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = far * near * nf * (1 - minClipZ);
          out.m15 = 0;
          return out;
        }

        static ortho(out, left, right, bottom, top, near, far, minClipZ = -1, projectionSignY = 1, orientation = 0) {
          const lr = 1 / (left - right);
          const bt = 1 / (bottom - top) * projectionSignY;
          const nf = 1 / (near - far);
          const x = -2 * lr;
          const y = -2 * bt;
          const dx = (left + right) * lr;
          const dy = (top + bottom) * bt;
          const preTransform = preTransforms[orientation];
          out.m00 = x * preTransform[0];
          out.m01 = x * preTransform[1];
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = y * preTransform[2];
          out.m05 = y * preTransform[3];
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = nf * (1 - minClipZ);
          out.m11 = 0;
          out.m12 = dx * preTransform[0] + dy * preTransform[2];
          out.m13 = dx * preTransform[1] + dy * preTransform[3];
          out.m14 = (near - minClipZ * far) * nf;
          out.m15 = 1;
          return out;
        }

        static lookAt(out, eye, center, up) {
          const eyex = eye.x;
          const eyey = eye.y;
          const eyez = eye.z;
          const upx = up.x;
          const upy = up.y;
          const upz = up.z;
          const centerx = center.x;
          const centery = center.y;
          const centerz = center.z;
          let z0 = eyex - centerx;
          let z1 = eyey - centery;
          let z2 = eyez - centerz;
          let len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
          z0 *= len;
          z1 *= len;
          z2 *= len;
          let x0 = upy * z2 - upz * z1;
          let x1 = upz * z0 - upx * z2;
          let x2 = upx * z1 - upy * z0;
          len = 1 / Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
          x0 *= len;
          x1 *= len;
          x2 *= len;
          const y0 = z1 * x2 - z2 * x1;
          const y1 = z2 * x0 - z0 * x2;
          const y2 = z0 * x1 - z1 * x0;
          out.m00 = x0;
          out.m01 = y0;
          out.m02 = z0;
          out.m03 = 0;
          out.m04 = x1;
          out.m05 = y1;
          out.m06 = z1;
          out.m07 = 0;
          out.m08 = x2;
          out.m09 = y2;
          out.m10 = z2;
          out.m11 = 0;
          out.m12 = -(x0 * eyex + x1 * eyey + x2 * eyez);
          out.m13 = -(y0 * eyex + y1 * eyey + y2 * eyez);
          out.m14 = -(z0 * eyex + z1 * eyey + z2 * eyez);
          out.m15 = 1;
          return out;
        }

        static inverseTranspose(out, a) {
          const a00 = a.m00;
          const a01 = a.m01;
          const a02 = a.m02;
          const a03 = a.m03;
          const a10 = a.m04;
          const a11 = a.m05;
          const a12 = a.m06;
          const a13 = a.m07;
          const a20 = a.m08;
          const a21 = a.m09;
          const a22 = a.m10;
          const a23 = a.m11;
          const a30 = a.m12;
          const a31 = a.m13;
          const a32 = a.m14;
          const a33 = a.m15;
          const b00 = a00 * a11 - a01 * a10;
          const b01 = a00 * a12 - a02 * a10;
          const b02 = a00 * a13 - a03 * a10;
          const b03 = a01 * a12 - a02 * a11;
          const b04 = a01 * a13 - a03 * a11;
          const b05 = a02 * a13 - a03 * a12;
          const b06 = a20 * a31 - a21 * a30;
          const b07 = a20 * a32 - a22 * a30;
          const b08 = a20 * a33 - a23 * a30;
          const b09 = a21 * a32 - a22 * a31;
          const b10 = a21 * a33 - a23 * a31;
          const b11 = a22 * a33 - a23 * a32;
          let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

          if (!det) {
            return null;
          }

          det = 1.0 / det;
          out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
          out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
          out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
          out.m03 = 0;
          out.m04 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
          out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
          out.m06 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
          out.m07 = 0;
          out.m08 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
          out.m09 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
          out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        }

        static toArray(out, m, ofs = 0) {
          out[ofs + 0] = m.m00;
          out[ofs + 1] = m.m01;
          out[ofs + 2] = m.m02;
          out[ofs + 3] = m.m03;
          out[ofs + 4] = m.m04;
          out[ofs + 5] = m.m05;
          out[ofs + 6] = m.m06;
          out[ofs + 7] = m.m07;
          out[ofs + 8] = m.m08;
          out[ofs + 9] = m.m09;
          out[ofs + 10] = m.m10;
          out[ofs + 11] = m.m11;
          out[ofs + 12] = m.m12;
          out[ofs + 13] = m.m13;
          out[ofs + 14] = m.m14;
          out[ofs + 15] = m.m15;
          return out;
        }

        static fromArray(out, arr, ofs = 0) {
          out.m00 = arr[ofs + 0];
          out.m01 = arr[ofs + 1];
          out.m02 = arr[ofs + 2];
          out.m03 = arr[ofs + 3];
          out.m04 = arr[ofs + 4];
          out.m05 = arr[ofs + 5];
          out.m06 = arr[ofs + 6];
          out.m07 = arr[ofs + 7];
          out.m08 = arr[ofs + 8];
          out.m09 = arr[ofs + 9];
          out.m10 = arr[ofs + 10];
          out.m11 = arr[ofs + 11];
          out.m12 = arr[ofs + 12];
          out.m13 = arr[ofs + 13];
          out.m14 = arr[ofs + 14];
          out.m15 = arr[ofs + 15];
          return out;
        }

        static add(out, a, b) {
          out.m00 = a.m00 + b.m00;
          out.m01 = a.m01 + b.m01;
          out.m02 = a.m02 + b.m02;
          out.m03 = a.m03 + b.m03;
          out.m04 = a.m04 + b.m04;
          out.m05 = a.m05 + b.m05;
          out.m06 = a.m06 + b.m06;
          out.m07 = a.m07 + b.m07;
          out.m08 = a.m08 + b.m08;
          out.m09 = a.m09 + b.m09;
          out.m10 = a.m10 + b.m10;
          out.m11 = a.m11 + b.m11;
          out.m12 = a.m12 + b.m12;
          out.m13 = a.m13 + b.m13;
          out.m14 = a.m14 + b.m14;
          out.m15 = a.m15 + b.m15;
          return out;
        }

        static subtract(out, a, b) {
          out.m00 = a.m00 - b.m00;
          out.m01 = a.m01 - b.m01;
          out.m02 = a.m02 - b.m02;
          out.m03 = a.m03 - b.m03;
          out.m04 = a.m04 - b.m04;
          out.m05 = a.m05 - b.m05;
          out.m06 = a.m06 - b.m06;
          out.m07 = a.m07 - b.m07;
          out.m08 = a.m08 - b.m08;
          out.m09 = a.m09 - b.m09;
          out.m10 = a.m10 - b.m10;
          out.m11 = a.m11 - b.m11;
          out.m12 = a.m12 - b.m12;
          out.m13 = a.m13 - b.m13;
          out.m14 = a.m14 - b.m14;
          out.m15 = a.m15 - b.m15;
          return out;
        }

        static multiplyScalar(out, a, b) {
          out.m00 = a.m00 * b;
          out.m01 = a.m01 * b;
          out.m02 = a.m02 * b;
          out.m03 = a.m03 * b;
          out.m04 = a.m04 * b;
          out.m05 = a.m05 * b;
          out.m06 = a.m06 * b;
          out.m07 = a.m07 * b;
          out.m08 = a.m08 * b;
          out.m09 = a.m09 * b;
          out.m10 = a.m10 * b;
          out.m11 = a.m11 * b;
          out.m12 = a.m12 * b;
          out.m13 = a.m13 * b;
          out.m14 = a.m14 * b;
          out.m15 = a.m15 * b;
          return out;
        }

        static multiplyScalarAndAdd(out, a, b, scale) {
          out.m00 = a.m00 + b.m00 * scale;
          out.m01 = a.m01 + b.m01 * scale;
          out.m02 = a.m02 + b.m02 * scale;
          out.m03 = a.m03 + b.m03 * scale;
          out.m04 = a.m04 + b.m04 * scale;
          out.m05 = a.m05 + b.m05 * scale;
          out.m06 = a.m06 + b.m06 * scale;
          out.m07 = a.m07 + b.m07 * scale;
          out.m08 = a.m08 + b.m08 * scale;
          out.m09 = a.m09 + b.m09 * scale;
          out.m10 = a.m10 + b.m10 * scale;
          out.m11 = a.m11 + b.m11 * scale;
          out.m12 = a.m12 + b.m12 * scale;
          out.m13 = a.m13 + b.m13 * scale;
          out.m14 = a.m14 + b.m14 * scale;
          out.m15 = a.m15 + b.m15 * scale;
          return out;
        }

        static strictEquals(a, b) {
          return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08 && a.m09 === b.m09 && a.m10 === b.m10 && a.m11 === b.m11 && a.m12 === b.m12 && a.m13 === b.m13 && a.m14 === b.m14 && a.m15 === b.m15;
        }

        static equals(a, b, epsilon = EPSILON) {
          return Math.abs(a.m00 - b.m00) <= epsilon * Math.max(1.0, Math.abs(a.m00), Math.abs(b.m00)) && Math.abs(a.m01 - b.m01) <= epsilon * Math.max(1.0, Math.abs(a.m01), Math.abs(b.m01)) && Math.abs(a.m02 - b.m02) <= epsilon * Math.max(1.0, Math.abs(a.m02), Math.abs(b.m02)) && Math.abs(a.m03 - b.m03) <= epsilon * Math.max(1.0, Math.abs(a.m03), Math.abs(b.m03)) && Math.abs(a.m04 - b.m04) <= epsilon * Math.max(1.0, Math.abs(a.m04), Math.abs(b.m04)) && Math.abs(a.m05 - b.m05) <= epsilon * Math.max(1.0, Math.abs(a.m05), Math.abs(b.m05)) && Math.abs(a.m06 - b.m06) <= epsilon * Math.max(1.0, Math.abs(a.m06), Math.abs(b.m06)) && Math.abs(a.m07 - b.m07) <= epsilon * Math.max(1.0, Math.abs(a.m07), Math.abs(b.m07)) && Math.abs(a.m08 - b.m08) <= epsilon * Math.max(1.0, Math.abs(a.m08), Math.abs(b.m08)) && Math.abs(a.m09 - b.m09) <= epsilon * Math.max(1.0, Math.abs(a.m09), Math.abs(b.m09)) && Math.abs(a.m10 - b.m10) <= epsilon * Math.max(1.0, Math.abs(a.m10), Math.abs(b.m10)) && Math.abs(a.m11 - b.m11) <= epsilon * Math.max(1.0, Math.abs(a.m11), Math.abs(b.m11)) && Math.abs(a.m12 - b.m12) <= epsilon * Math.max(1.0, Math.abs(a.m12), Math.abs(b.m12)) && Math.abs(a.m13 - b.m13) <= epsilon * Math.max(1.0, Math.abs(a.m13), Math.abs(b.m13)) && Math.abs(a.m14 - b.m14) <= epsilon * Math.max(1.0, Math.abs(a.m14), Math.abs(b.m14)) && Math.abs(a.m15 - b.m15) <= epsilon * Math.max(1.0, Math.abs(a.m15), Math.abs(b.m15));
        }

        constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 0, m05 = 1, m06 = 0, m07 = 0, m08 = 0, m09 = 0, m10 = 1, m11 = 0, m12 = 0, m13 = 0, m14 = 0, m15 = 1) {
          super();

          if (typeof m00 === 'object') {
            this.m00 = m00.m00;
            this.m01 = m00.m01;
            this.m02 = m00.m02;
            this.m03 = m00.m03;
            this.m04 = m00.m04;
            this.m05 = m00.m05;
            this.m06 = m00.m06;
            this.m07 = m00.m07;
            this.m08 = m00.m08;
            this.m09 = m00.m09;
            this.m10 = m00.m10;
            this.m11 = m00.m11;
            this.m12 = m00.m12;
            this.m13 = m00.m13;
            this.m14 = m00.m14;
            this.m15 = m00.m15;
          } else {
            this.m00 = m00;
            this.m01 = m01;
            this.m02 = m02;
            this.m03 = m03;
            this.m04 = m04;
            this.m05 = m05;
            this.m06 = m06;
            this.m07 = m07;
            this.m08 = m08;
            this.m09 = m09;
            this.m10 = m10;
            this.m11 = m11;
            this.m12 = m12;
            this.m13 = m13;
            this.m14 = m14;
            this.m15 = m15;
          }
        }

        clone() {
          return new Mat4(this.m00, this.m01, this.m02, this.m03, this.m04, this.m05, this.m06, this.m07, this.m08, this.m09, this.m10, this.m11, this.m12, this.m13, this.m14, this.m15);
        }

        set(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 0, m05 = 1, m06 = 0, m07 = 0, m08 = 0, m09 = 0, m10 = 1, m11 = 0, m12 = 0, m13 = 0, m14 = 0, m15 = 1) {
          if (typeof m00 === 'object') {
            this.m01 = m00.m01;
            this.m02 = m00.m02;
            this.m03 = m00.m03;
            this.m04 = m00.m04;
            this.m05 = m00.m05;
            this.m06 = m00.m06;
            this.m07 = m00.m07;
            this.m08 = m00.m08;
            this.m09 = m00.m09;
            this.m10 = m00.m10;
            this.m11 = m00.m11;
            this.m12 = m00.m12;
            this.m13 = m00.m13;
            this.m14 = m00.m14;
            this.m15 = m00.m15;
            this.m00 = m00.m00;
          } else {
            this.m01 = m01;
            this.m02 = m02;
            this.m03 = m03;
            this.m04 = m04;
            this.m05 = m05;
            this.m06 = m06;
            this.m07 = m07;
            this.m08 = m08;
            this.m09 = m09;
            this.m10 = m10;
            this.m11 = m11;
            this.m12 = m12;
            this.m13 = m13;
            this.m14 = m14;
            this.m15 = m15;
            this.m00 = m00;
          }

          return this;
        }

        equals(other, epsilon = EPSILON) {
          return Math.abs(this.m00 - other.m00) <= epsilon * Math.max(1.0, Math.abs(this.m00), Math.abs(other.m00)) && Math.abs(this.m01 - other.m01) <= epsilon * Math.max(1.0, Math.abs(this.m01), Math.abs(other.m01)) && Math.abs(this.m02 - other.m02) <= epsilon * Math.max(1.0, Math.abs(this.m02), Math.abs(other.m02)) && Math.abs(this.m03 - other.m03) <= epsilon * Math.max(1.0, Math.abs(this.m03), Math.abs(other.m03)) && Math.abs(this.m04 - other.m04) <= epsilon * Math.max(1.0, Math.abs(this.m04), Math.abs(other.m04)) && Math.abs(this.m05 - other.m05) <= epsilon * Math.max(1.0, Math.abs(this.m05), Math.abs(other.m05)) && Math.abs(this.m06 - other.m06) <= epsilon * Math.max(1.0, Math.abs(this.m06), Math.abs(other.m06)) && Math.abs(this.m07 - other.m07) <= epsilon * Math.max(1.0, Math.abs(this.m07), Math.abs(other.m07)) && Math.abs(this.m08 - other.m08) <= epsilon * Math.max(1.0, Math.abs(this.m08), Math.abs(other.m08)) && Math.abs(this.m09 - other.m09) <= epsilon * Math.max(1.0, Math.abs(this.m09), Math.abs(other.m09)) && Math.abs(this.m10 - other.m10) <= epsilon * Math.max(1.0, Math.abs(this.m10), Math.abs(other.m10)) && Math.abs(this.m11 - other.m11) <= epsilon * Math.max(1.0, Math.abs(this.m11), Math.abs(other.m11)) && Math.abs(this.m12 - other.m12) <= epsilon * Math.max(1.0, Math.abs(this.m12), Math.abs(other.m12)) && Math.abs(this.m13 - other.m13) <= epsilon * Math.max(1.0, Math.abs(this.m13), Math.abs(other.m13)) && Math.abs(this.m14 - other.m14) <= epsilon * Math.max(1.0, Math.abs(this.m14), Math.abs(other.m14)) && Math.abs(this.m15 - other.m15) <= epsilon * Math.max(1.0, Math.abs(this.m15), Math.abs(other.m15));
        }

        strictEquals(other) {
          return this.m00 === other.m00 && this.m01 === other.m01 && this.m02 === other.m02 && this.m03 === other.m03 && this.m04 === other.m04 && this.m05 === other.m05 && this.m06 === other.m06 && this.m07 === other.m07 && this.m08 === other.m08 && this.m09 === other.m09 && this.m10 === other.m10 && this.m11 === other.m11 && this.m12 === other.m12 && this.m13 === other.m13 && this.m14 === other.m14 && this.m15 === other.m15;
        }

        toString() {
          return `[\n${this.m00}, ${this.m01}, ${this.m02}, ${this.m03},\n${this.m04}, ${this.m05}, ${this.m06}, ${this.m07},\n${this.m08}, ${this.m09}, ${this.m10}, ${this.m11},\n${this.m12}, ${this.m13}, ${this.m14}, ${this.m15}\n` + ']';
        }

        identity() {
          this.m00 = 1;
          this.m01 = 0;
          this.m02 = 0;
          this.m03 = 0;
          this.m04 = 0;
          this.m05 = 1;
          this.m06 = 0;
          this.m07 = 0;
          this.m08 = 0;
          this.m09 = 0;
          this.m10 = 1;
          this.m11 = 0;
          this.m12 = 0;
          this.m13 = 0;
          this.m14 = 0;
          this.m15 = 1;
          return this;
        }

        zero() {
          this.m00 = 0;
          this.m01 = 0;
          this.m02 = 0;
          this.m03 = 0;
          this.m04 = 0;
          this.m05 = 0;
          this.m06 = 0;
          this.m07 = 0;
          this.m08 = 0;
          this.m09 = 0;
          this.m10 = 0;
          this.m11 = 0;
          this.m12 = 0;
          this.m13 = 0;
          this.m14 = 0;
          this.m15 = 0;
          return this;
        }

        transpose() {
          const a01 = this.m01;
          const a02 = this.m02;
          const a03 = this.m03;
          const a12 = this.m06;
          const a13 = this.m07;
          const a23 = this.m11;
          this.m01 = this.m04;
          this.m02 = this.m08;
          this.m03 = this.m12;
          this.m04 = a01;
          this.m06 = this.m09;
          this.m07 = this.m13;
          this.m08 = a02;
          this.m09 = a12;
          this.m11 = this.m14;
          this.m12 = a03;
          this.m13 = a13;
          this.m14 = a23;
          return this;
        }

        invert() {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a03 = this.m03;
          const a10 = this.m04;
          const a11 = this.m05;
          const a12 = this.m06;
          const a13 = this.m07;
          const a20 = this.m08;
          const a21 = this.m09;
          const a22 = this.m10;
          const a23 = this.m11;
          const a30 = this.m12;
          const a31 = this.m13;
          const a32 = this.m14;
          const a33 = this.m15;
          const b00 = a00 * a11 - a01 * a10;
          const b01 = a00 * a12 - a02 * a10;
          const b02 = a00 * a13 - a03 * a10;
          const b03 = a01 * a12 - a02 * a11;
          const b04 = a01 * a13 - a03 * a11;
          const b05 = a02 * a13 - a03 * a12;
          const b06 = a20 * a31 - a21 * a30;
          const b07 = a20 * a32 - a22 * a30;
          const b08 = a20 * a33 - a23 * a30;
          const b09 = a21 * a32 - a22 * a31;
          const b10 = a21 * a33 - a23 * a31;
          const b11 = a22 * a33 - a23 * a32;
          let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

          if (det === 0) {
            this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            return this;
          }

          det = 1.0 / det;
          this.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
          this.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
          this.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
          this.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
          this.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
          this.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
          this.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
          this.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
          this.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
          this.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
          this.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
          this.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
          this.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
          this.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
          this.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
          this.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
          return this;
        }

        determinant() {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a03 = this.m03;
          const a10 = this.m04;
          const a11 = this.m05;
          const a12 = this.m06;
          const a13 = this.m07;
          const a20 = this.m08;
          const a21 = this.m09;
          const a22 = this.m10;
          const a23 = this.m11;
          const a30 = this.m12;
          const a31 = this.m13;
          const a32 = this.m14;
          const a33 = this.m15;
          const b00 = a00 * a11 - a01 * a10;
          const b01 = a00 * a12 - a02 * a10;
          const b02 = a00 * a13 - a03 * a10;
          const b03 = a01 * a12 - a02 * a11;
          const b04 = a01 * a13 - a03 * a11;
          const b05 = a02 * a13 - a03 * a12;
          const b06 = a20 * a31 - a21 * a30;
          const b07 = a20 * a32 - a22 * a30;
          const b08 = a20 * a33 - a23 * a30;
          const b09 = a21 * a32 - a22 * a31;
          const b10 = a21 * a33 - a23 * a31;
          const b11 = a22 * a33 - a23 * a32;
          return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        }

        add(mat) {
          this.m00 += mat.m00;
          this.m01 += mat.m01;
          this.m02 += mat.m02;
          this.m03 += mat.m03;
          this.m04 += mat.m04;
          this.m05 += mat.m05;
          this.m06 += mat.m06;
          this.m07 += mat.m07;
          this.m08 += mat.m08;
          this.m09 += mat.m09;
          this.m10 += mat.m10;
          this.m11 += mat.m11;
          this.m12 += mat.m12;
          this.m13 += mat.m13;
          this.m14 += mat.m14;
          this.m15 += mat.m15;
          return this;
        }

        subtract(mat) {
          this.m00 -= mat.m00;
          this.m01 -= mat.m01;
          this.m02 -= mat.m02;
          this.m03 -= mat.m03;
          this.m04 -= mat.m04;
          this.m05 -= mat.m05;
          this.m06 -= mat.m06;
          this.m07 -= mat.m07;
          this.m08 -= mat.m08;
          this.m09 -= mat.m09;
          this.m10 -= mat.m10;
          this.m11 -= mat.m11;
          this.m12 -= mat.m12;
          this.m13 -= mat.m13;
          this.m14 -= mat.m14;
          this.m15 -= mat.m15;
          return this;
        }

        multiply(mat) {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a03 = this.m03;
          const a10 = this.m04;
          const a11 = this.m05;
          const a12 = this.m06;
          const a13 = this.m07;
          const a20 = this.m08;
          const a21 = this.m09;
          const a22 = this.m10;
          const a23 = this.m11;
          const a30 = this.m12;
          const a31 = this.m13;
          const a32 = this.m14;
          const a33 = this.m15;
          let b0 = mat.m00;
          let b1 = mat.m01;
          let b2 = mat.m02;
          let b3 = mat.m03;
          this.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = mat.m04;
          b1 = mat.m05;
          b2 = mat.m06;
          b3 = mat.m07;
          this.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = mat.m08;
          b1 = mat.m09;
          b2 = mat.m10;
          b3 = mat.m11;
          this.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = mat.m12;
          b1 = mat.m13;
          b2 = mat.m14;
          b3 = mat.m15;
          this.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          return this;
        }

        multiplyScalar(scalar) {
          this.m00 *= scalar;
          this.m01 *= scalar;
          this.m02 *= scalar;
          this.m03 *= scalar;
          this.m04 *= scalar;
          this.m05 *= scalar;
          this.m06 *= scalar;
          this.m07 *= scalar;
          this.m08 *= scalar;
          this.m09 *= scalar;
          this.m10 *= scalar;
          this.m11 *= scalar;
          this.m12 *= scalar;
          this.m13 *= scalar;
          this.m14 *= scalar;
          this.m15 *= scalar;
          return this;
        }

        translate(vec) {
          this.m12 += vec.x;
          this.m13 += vec.y;
          this.m14 += vec.z;
          return this;
        }

        scale(vec) {
          const x = vec.x;
          const y = vec.y;
          const z = vec.z;
          this.m00 *= x;
          this.m01 *= x;
          this.m02 *= x;
          this.m03 *= x;
          this.m04 *= y;
          this.m05 *= y;
          this.m06 *= y;
          this.m07 *= y;
          this.m08 *= z;
          this.m09 *= z;
          this.m10 *= z;
          this.m11 *= z;
          return this;
        }

        rotate(rad, axis) {
          let x = axis.x;
          let y = axis.y;
          let z = axis.z;
          let len = Math.sqrt(x * x + y * y + z * z);

          if (Math.abs(len) < EPSILON) {
            return null;
          }

          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          const t = 1 - c;
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a03 = this.m03;
          const a10 = this.m04;
          const a11 = this.m05;
          const a12 = this.m06;
          const a13 = this.m07;
          const a20 = this.m08;
          const a21 = this.m09;
          const a22 = this.m10;
          const a23 = this.m11;
          const b00 = x * x * t + c;
          const b01 = y * x * t + z * s;
          const b02 = z * x * t - y * s;
          const b10 = x * y * t - z * s;
          const b11 = y * y * t + c;
          const b12 = z * y * t + x * s;
          const b20 = x * z * t + y * s;
          const b21 = y * z * t - x * s;
          const b22 = z * z * t + c;
          this.m00 = a00 * b00 + a10 * b01 + a20 * b02;
          this.m01 = a01 * b00 + a11 * b01 + a21 * b02;
          this.m02 = a02 * b00 + a12 * b01 + a22 * b02;
          this.m03 = a03 * b00 + a13 * b01 + a23 * b02;
          this.m04 = a00 * b10 + a10 * b11 + a20 * b12;
          this.m05 = a01 * b10 + a11 * b11 + a21 * b12;
          this.m06 = a02 * b10 + a12 * b11 + a22 * b12;
          this.m07 = a03 * b10 + a13 * b11 + a23 * b12;
          this.m08 = a00 * b20 + a10 * b21 + a20 * b22;
          this.m09 = a01 * b20 + a11 * b21 + a21 * b22;
          this.m10 = a02 * b20 + a12 * b21 + a22 * b22;
          this.m11 = a03 * b20 + a13 * b21 + a23 * b22;
          return this;
        }

        getTranslation(out) {
          out.x = this.m12;
          out.y = this.m13;
          out.z = this.m14;
          return out;
        }

        getScale(out) {
          const m00 = m3_1$1.m00 = this.m00;
          const m01 = m3_1$1.m01 = this.m01;
          const m02 = m3_1$1.m02 = this.m02;
          const m04 = m3_1$1.m03 = this.m04;
          const m05 = m3_1$1.m04 = this.m05;
          const m06 = m3_1$1.m05 = this.m06;
          const m08 = m3_1$1.m06 = this.m08;
          const m09 = m3_1$1.m07 = this.m09;
          const m10 = m3_1$1.m08 = this.m10;
          out.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
          out.y = Math.sqrt(m04 * m04 + m05 * m05 + m06 * m06);
          out.z = Math.sqrt(m08 * m08 + m09 * m09 + m10 * m10);

          if (Mat3.determinant(m3_1$1) < 0) {
            out.x *= -1;
          }

          return out;
        }

        getRotation(out) {
          const sx = Vec3.set(v3_1$2, this.m00, this.m01, this.m02).length();
          const sy = Vec3.set(v3_1$2, this.m04, this.m05, this.m06).length();
          const sz = Vec3.set(v3_1$2, this.m08, this.m09, this.m10).length();
          m3_1$1.m00 = this.m00 / sx;
          m3_1$1.m01 = this.m01 / sx;
          m3_1$1.m02 = this.m02 / sx;
          m3_1$1.m03 = this.m04 / sy;
          m3_1$1.m04 = this.m05 / sy;
          m3_1$1.m05 = this.m06 / sy;
          m3_1$1.m06 = this.m08 / sz;
          m3_1$1.m07 = this.m09 / sz;
          m3_1$1.m08 = this.m10 / sz;
          const det = Mat3.determinant(m3_1$1);

          if (det < 0) {
            m3_1$1.m00 *= -1;
            m3_1$1.m01 *= -1;
            m3_1$1.m02 *= -1;
          }

          return Quat.fromMat3(out, m3_1$1);
        }

        fromRTS(q, v, s) {
          const x = q.x;
          const y = q.y;
          const z = q.z;
          const w = q.w;
          const x2 = x + x;
          const y2 = y + y;
          const z2 = z + z;
          const xx = x * x2;
          const xy = x * y2;
          const xz = x * z2;
          const yy = y * y2;
          const yz = y * z2;
          const zz = z * z2;
          const wx = w * x2;
          const wy = w * y2;
          const wz = w * z2;
          const sx = s.x;
          const sy = s.y;
          const sz = s.z;
          this.m00 = (1 - (yy + zz)) * sx;
          this.m01 = (xy + wz) * sx;
          this.m02 = (xz - wy) * sx;
          this.m03 = 0;
          this.m04 = (xy - wz) * sy;
          this.m05 = (1 - (xx + zz)) * sy;
          this.m06 = (yz + wx) * sy;
          this.m07 = 0;
          this.m08 = (xz + wy) * sz;
          this.m09 = (yz - wx) * sz;
          this.m10 = (1 - (xx + yy)) * sz;
          this.m11 = 0;
          this.m12 = v.x;
          this.m13 = v.y;
          this.m14 = v.z;
          this.m15 = 1;
          return this;
        }

        fromQuat(q) {
          const x = q.x;
          const y = q.y;
          const z = q.z;
          const w = q.w;
          const x2 = x + x;
          const y2 = y + y;
          const z2 = z + z;
          const xx = x * x2;
          const yx = y * x2;
          const yy = y * y2;
          const zx = z * x2;
          const zy = z * y2;
          const zz = z * z2;
          const wx = w * x2;
          const wy = w * y2;
          const wz = w * z2;
          this.m00 = 1 - yy - zz;
          this.m01 = yx + wz;
          this.m02 = zx - wy;
          this.m03 = 0;
          this.m04 = yx - wz;
          this.m05 = 1 - xx - zz;
          this.m06 = zy + wx;
          this.m07 = 0;
          this.m08 = zx + wy;
          this.m09 = zy - wx;
          this.m10 = 1 - xx - yy;
          this.m11 = 0;
          this.m12 = 0;
          this.m13 = 0;
          this.m14 = 0;
          this.m15 = 1;
          return this;
        }

      } exports('bd', Mat4);
      Mat4.IDENTITY = Object.freeze(new Mat4());
      const v3_1$2 = new Vec3();
      const m3_1$1 = new Mat3();
      CCClass.fastDefine('cc.Mat4', Mat4, {
        m00: 1,
        m01: 0,
        m02: 0,
        m03: 0,
        m04: 0,
        m05: 1,
        m06: 0,
        m07: 0,
        m08: 0,
        m09: 0,
        m10: 1,
        m11: 0,
        m12: 0,
        m13: 0,
        m14: 0,
        m15: 1
      });
      legacyCC.Mat4 = Mat4;
      function mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        return new Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
      }
      legacyCC.mat4 = mat4;

      class Vec2 extends ValueType {
        static clone(a) {
          return new Vec2(a.x, a.y);
        }

        static copy(out, a) {
          out.x = a.x;
          out.y = a.y;
          return out;
        }

        static set(out, x, y) {
          out.x = x;
          out.y = y;
          return out;
        }

        static add(out, a, b) {
          out.x = a.x + b.x;
          out.y = a.y + b.y;
          return out;
        }

        static subtract(out, a, b) {
          out.x = a.x - b.x;
          out.y = a.y - b.y;
          return out;
        }

        static multiply(out, a, b) {
          out.x = a.x * b.x;
          out.y = a.y * b.y;
          return out;
        }

        static divide(out, a, b) {
          out.x = a.x / b.x;
          out.y = a.y / b.y;
          return out;
        }

        static ceil(out, a) {
          out.x = Math.ceil(a.x);
          out.y = Math.ceil(a.y);
          return out;
        }

        static floor(out, a) {
          out.x = Math.floor(a.x);
          out.y = Math.floor(a.y);
          return out;
        }

        static min(out, a, b) {
          out.x = Math.min(a.x, b.x);
          out.y = Math.min(a.y, b.y);
          return out;
        }

        static max(out, a, b) {
          out.x = Math.max(a.x, b.x);
          out.y = Math.max(a.y, b.y);
          return out;
        }

        static round(out, a) {
          out.x = Math.round(a.x);
          out.y = Math.round(a.y);
          return out;
        }

        static multiplyScalar(out, a, b) {
          out.x = a.x * b;
          out.y = a.y * b;
          return out;
        }

        static scaleAndAdd(out, a, b, scale) {
          out.x = a.x + b.x * scale;
          out.y = a.y + b.y * scale;
          return out;
        }

        static distance(a, b) {
          const x = b.x - a.x;
          const y = b.y - a.y;
          return Math.sqrt(x * x + y * y);
        }

        static squaredDistance(a, b) {
          const x = b.x - a.x;
          const y = b.y - a.y;
          return x * x + y * y;
        }

        static len(a) {
          const x = a.x;
          const y = a.y;
          return Math.sqrt(x * x + y * y);
        }

        static lengthSqr(a) {
          const x = a.x;
          const y = a.y;
          return x * x + y * y;
        }

        static negate(out, a) {
          out.x = -a.x;
          out.y = -a.y;
          return out;
        }

        static inverse(out, a) {
          out.x = 1.0 / a.x;
          out.y = 1.0 / a.y;
          return out;
        }

        static inverseSafe(out, a) {
          const x = a.x;
          const y = a.y;

          if (Math.abs(x) < EPSILON) {
            out.x = 0;
          } else {
            out.x = 1.0 / x;
          }

          if (Math.abs(y) < EPSILON) {
            out.y = 0;
          } else {
            out.y = 1.0 / y;
          }

          return out;
        }

        static normalize(out, a) {
          const x = a.x;
          const y = a.y;
          let len = x * x + y * y;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            out.x = x * len;
            out.y = y * len;
          } else {
            out.x = 0;
            out.y = 0;
          }

          return out;
        }

        static dot(a, b) {
          return a.x * b.x + a.y * b.y;
        }

        static cross(out, a, b) {
          if (out instanceof Vec3) {
            out.x = out.y = 0;
            out.z = a.x * b.y - a.y * b.x;
            return out;
          } else {
            return out.x * a.y - out.y * a.x;
          }
        }

        static lerp(out, a, b, t) {
          const x = a.x;
          const y = a.y;
          out.x = x + t * (b.x - x);
          out.y = y + t * (b.y - y);
          return out;
        }

        static random(out, scale) {
          scale = scale || 1.0;
          const r = random() * 2.0 * Math.PI;
          out.x = Math.cos(r) * scale;
          out.y = Math.sin(r) * scale;
          return out;
        }

        static transformMat3(out, a, m) {
          const x = a.x;
          const y = a.y;
          out.x = m.m00 * x + m.m03 * y + m.m06;
          out.y = m.m01 * x + m.m04 * y + m.m07;
          return out;
        }

        static transformMat4(out, a, m) {
          const x = a.x;
          const y = a.y;
          out.x = m.m00 * x + m.m04 * y + m.m12;
          out.y = m.m01 * x + m.m05 * y + m.m13;
          return out;
        }

        static str(a) {
          return `Vec2(${a.x}, ${a.y})`;
        }

        static toArray(out, v, ofs = 0) {
          out[ofs + 0] = v.x;
          out[ofs + 1] = v.y;
          return out;
        }

        static fromArray(out, arr, ofs = 0) {
          out.x = arr[ofs + 0];
          out.y = arr[ofs + 1];
          return out;
        }

        static strictEquals(a, b) {
          return a.x === b.x && a.y === b.y;
        }

        static equals(a, b, epsilon = EPSILON) {
          return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y));
        }

        static angle(a, b) {
          const magSqr1 = a.x * a.x + a.y * a.y;
          const magSqr2 = b.x * b.x + b.y * b.y;

          if (magSqr1 === 0 || magSqr2 === 0) {
            return 0.0;
          }

          const dot = a.x * b.x + a.y * b.y;
          let cosine = dot / Math.sqrt(magSqr1 * magSqr2);
          cosine = clamp(cosine, -1.0, 1.0);
          return Math.acos(cosine);
        }

        constructor(x, y) {
          super();

          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
          } else {
            this.x = x || 0;
            this.y = y || 0;
          }
        }

        clone() {
          return new Vec2(this.x, this.y);
        }

        set(x, y) {
          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
          } else {
            this.x = x || 0;
            this.y = y || 0;
          }

          return this;
        }

        equals(other, epsilon = EPSILON) {
          return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y));
        }

        equals2f(x, y, epsilon = EPSILON) {
          return Math.abs(this.x - x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(y));
        }

        strictEquals(other) {
          return other && this.x === other.x && this.y === other.y;
        }

        strictEquals2f(x, y) {
          return this.x === x && this.y === y;
        }

        toString() {
          return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)})`;
        }

        lerp(to, ratio) {
          const x = this.x;
          const y = this.y;
          this.x = x + ratio * (to.x - x);
          this.y = y + ratio * (to.y - y);
          return this;
        }

        clampf(minInclusive, maxInclusive) {
          this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
          this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
          return this;
        }

        add(other) {
          this.x += other.x;
          this.y += other.y;
          return this;
        }

        add2f(x, y) {
          this.x += x;
          this.y += y;
          return this;
        }

        subtract(other) {
          this.x -= other.x;
          this.y -= other.y;
          return this;
        }

        subtract2f(x, y) {
          this.x -= x;
          this.y -= y;
          return this;
        }

        multiplyScalar(scalar) {
          if (typeof scalar === 'object') {
            console.warn('should use Vec2.multiply for vector * vector operation');
          }

          this.x *= scalar;
          this.y *= scalar;
          return this;
        }

        multiply(other) {
          if (typeof other !== 'object') {
            console.warn('should use Vec2.scale for vector * scalar operation');
          }

          this.x *= other.x;
          this.y *= other.y;
          return this;
        }

        multiply2f(x, y) {
          this.x *= x;
          this.y *= y;
          return this;
        }

        divide(other) {
          this.x /= other.x;
          this.y /= other.y;
          return this;
        }

        divide2f(x, y) {
          this.x /= x;
          this.y /= y;
          return this;
        }

        negative() {
          this.x = -this.x;
          this.y = -this.y;
          return this;
        }

        dot(other) {
          return this.x * other.x + this.y * other.y;
        }

        cross(other) {
          return this.x * other.y - this.y * other.x;
        }

        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        }

        lengthSqr() {
          return this.x * this.x + this.y * this.y;
        }

        normalize() {
          const x = this.x;
          const y = this.y;
          let len = x * x + y * y;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            this.x *= len;
            this.y *= len;
          }

          return this;
        }

        angle(other) {
          const magSqr1 = this.lengthSqr();
          const magSqr2 = other.lengthSqr();

          if (magSqr1 === 0 || magSqr2 === 0) {
            return 0.0;
          }

          const dot = this.dot(other);
          let cosine = dot / Math.sqrt(magSqr1 * magSqr2);
          cosine = clamp(cosine, -1.0, 1.0);
          return Math.acos(cosine);
        }

        signAngle(other) {
          const angle = this.angle(other);
          return this.cross(other) < 0 ? -angle : angle;
        }

        rotate(radians) {
          const x = this.x;
          const y = this.y;
          const sin = Math.sin(radians);
          const cos = Math.cos(radians);
          this.x = cos * x - sin * y;
          this.y = sin * x + cos * y;
          return this;
        }

        project(other) {
          const scalar = this.dot(other) / other.dot(other);
          this.x = other.x * scalar;
          this.y = other.y * scalar;
          return this;
        }

        transformMat4(matrix) {
          const x = this.x;
          const y = this.y;
          this.x = matrix.m00 * x + matrix.m04 * y + matrix.m12;
          this.y = matrix.m01 * x + matrix.m05 * y + matrix.m13;
          return this;
        }

      } exports('c7', Vec2);
      Vec2.ZERO = Object.freeze(new Vec2(0, 0));
      Vec2.ONE = Object.freeze(new Vec2(1, 1));
      Vec2.NEG_ONE = Object.freeze(new Vec2(-1, -1));
      Vec2.UNIT_X = Object.freeze(new Vec2(1, 0));
      Vec2.UNIT_Y = Object.freeze(new Vec2(0, 1));
      const v2_1 = new Vec2();
      const v2_2 = new Vec2();
      CCClass.fastDefine('cc.Vec2', Vec2, {
        x: 0,
        y: 0
      });
      legacyCC.Vec2 = Vec2;
      function v2(x, y) {
        return new Vec2(x, y);
      }
      legacyCC.v2 = v2;

      replaceProperty(Vec2, 'Vec2', [{
        name: 'sub',
        newName: 'subtract',
        target: Vec2,
        targetName: 'Vec2'
      }, {
        name: 'mul',
        newName: 'multiply',
        target: Vec2,
        targetName: 'Vec2'
      }, {
        name: 'div',
        newName: 'divide',
        target: Vec2,
        targetName: 'Vec2'
      }, {
        name: 'dist',
        newName: 'distance',
        target: Vec2,
        targetName: 'Vec2'
      }, {
        name: 'sqrDist',
        newName: 'squaredDistance',
        target: Vec2,
        targetName: 'Vec2'
      }, {
        name: 'mag',
        newName: 'len',
        target: Vec2,
        targetName: 'Vec2'
      }, {
        name: 'sqrMag',
        newName: 'lengthSqr',
        target: Vec2,
        targetName: 'Vec2'
      }, {
        name: 'scale',
        newName: 'multiplyScalar',
        target: Vec2,
        targetName: 'Vec2'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Vec2,
        targetName: 'Vec2'
      }]);
      replaceProperty(Vec2.prototype, 'Vec2', [{
        name: 'mag',
        newName: 'length',
        target: Vec2.prototype,
        targetName: 'Vec2'
      }, {
        name: 'magSqr',
        newName: 'lengthSqr',
        target: Vec2.prototype,
        targetName: 'Vec2'
      }, {
        name: 'scale',
        newName: 'multiplyScalar',
        target: Vec2.prototype,
        targetName: 'Vec2'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Vec2.prototype,
        targetName: 'Vec2'
      }]);
      replaceProperty(Vec3, 'Vec3', [{
        name: 'sub',
        newName: 'subtract',
        target: Vec3,
        targetName: 'Vec3'
      }, {
        name: 'mul',
        newName: 'multiply',
        target: Vec3,
        targetName: 'Vec3'
      }, {
        name: 'div',
        newName: 'divide',
        target: Vec3,
        targetName: 'Vec3'
      }, {
        name: 'dist',
        newName: 'distance',
        target: Vec3,
        targetName: 'Vec3'
      }, {
        name: 'sqrDist',
        newName: 'squaredDistance',
        target: Vec3,
        targetName: 'Vec3'
      }, {
        name: 'mag',
        newName: 'len',
        target: Vec3,
        targetName: 'Vec3'
      }, {
        name: 'sqrMag',
        newName: 'lengthSqr',
        target: Vec3,
        targetName: 'Vec3'
      }, {
        name: 'scale',
        newName: 'multiplyScalar',
        target: Vec3,
        targetName: 'Vec3'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Vec3,
        targetName: 'Vec3'
      }]);
      replaceProperty(Vec3.prototype, 'Vec3', [{
        name: 'mag',
        newName: 'length',
        target: Vec3.prototype,
        targetName: 'Vec3'
      }, {
        name: 'magSqr',
        newName: 'lengthSqr',
        target: Vec3.prototype,
        targetName: 'Vec3'
      }, {
        name: 'scale',
        newName: 'multiplyScalar',
        target: Vec3.prototype,
        targetName: 'Vec3'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Vec3.prototype,
        targetName: 'Vec3'
      }]);
      replaceProperty(Vec4, 'Vec4', [{
        name: 'sub',
        newName: 'subtract',
        target: Vec4,
        targetName: 'Vec4'
      }, {
        name: 'mul',
        newName: 'multiply',
        target: Vec4,
        targetName: 'Vec4'
      }, {
        name: 'div',
        newName: 'divide',
        target: Vec4,
        targetName: 'Vec4'
      }, {
        name: 'dist',
        newName: 'distance',
        target: Vec4,
        targetName: 'Vec4'
      }, {
        name: 'sqrDist',
        newName: 'squaredDistance',
        target: Vec4,
        targetName: 'Vec4'
      }, {
        name: 'mag',
        newName: 'len',
        target: Vec4,
        targetName: 'Vec4'
      }, {
        name: 'sqrMag',
        newName: 'lengthSqr',
        target: Vec4,
        targetName: 'Vec4'
      }, {
        name: 'scale',
        newName: 'multiplyScalar',
        target: Vec4,
        targetName: 'Vec4'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Vec4,
        targetName: 'Vec4'
      }]);
      replaceProperty(Vec4.prototype, 'Vec4', [{
        name: 'mag',
        newName: 'length',
        target: Vec4.prototype,
        targetName: 'Vec4'
      }, {
        name: 'magSqr',
        newName: 'lengthSqr',
        target: Vec4.prototype,
        targetName: 'Vec4'
      }, {
        name: 'scale',
        newName: 'multiplyScalar',
        target: Vec4.prototype,
        targetName: 'Vec4'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Vec4.prototype,
        targetName: 'Vec4'
      }]);
      replaceProperty(Quat, 'Quat', [{
        name: 'mag',
        newName: 'len',
        target: Quat,
        targetName: 'Quat'
      }, {
        name: 'mul',
        newName: 'multiply',
        target: Quat,
        targetName: 'Quat'
      }, {
        name: 'sqrMag',
        newName: 'lengthSqr',
        target: Quat,
        targetName: 'Quat'
      }, {
        name: 'scale',
        newName: 'multiplyScalar',
        target: Quat,
        targetName: 'Quat'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Quat,
        targetName: 'Quat'
      }]);
      replaceProperty(Quat.prototype, 'Quat', [{
        name: 'scale',
        newName: 'multiplyScalar',
        target: Quat.prototype,
        targetName: 'Quat'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Quat.prototype,
        targetName: 'Quat'
      }]);
      replaceProperty(Color, 'Color', [{
        name: 'sub',
        newName: 'subtract',
        target: Color,
        targetName: 'Color'
      }, {
        name: 'mul',
        newName: 'multiply',
        target: Color,
        targetName: 'Color'
      }, {
        name: 'div',
        newName: 'divide',
        target: Color,
        targetName: 'Color'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Color,
        targetName: 'Color'
      }, {
        name: 'fromHex',
        newName: 'fromHEX',

        customFunction(...args) {
          const arg1 = args[1].toString(16);
          return legacyCC.Color.fromHEX(args[0], arg1);
        }

      }]);
      replaceProperty(Mat3, 'Mat3', [{
        name: 'sub',
        newName: 'subtract',
        target: Mat3,
        targetName: 'Mat3'
      }, {
        name: 'mul',
        newName: 'multiply',
        target: Mat3,
        targetName: 'Mat3'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Mat3,
        targetName: 'Mat3'
      }, {
        name: 'transfrom',
        newName: 'transform',
        target: Mat3,
        targetName: 'Mat3'
      }]);
      replaceProperty(Mat3.prototype, 'Mat3', [{
        name: 'sub',
        newName: 'subtract',
        target: Mat3.prototype,
        targetName: 'Mat3'
      }, {
        name: 'mul',
        newName: 'multiply',
        target: Mat3.prototype,
        targetName: 'Mat3'
      }, {
        name: 'mulScalar',
        newName: 'multiplyScalar',
        target: Mat3.prototype,
        targetName: 'Mat3'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Mat3.prototype,
        targetName: 'Mat3'
      }]);
      replaceProperty(Mat4, 'Mat4', [{
        name: 'sub',
        newName: 'subtract',
        target: Mat4,
        targetName: 'Mat4'
      }, {
        name: 'mul',
        newName: 'multiply',
        target: Mat4,
        targetName: 'Mat4'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Mat4,
        targetName: 'Mat4'
      }]);
      replaceProperty(Mat4.prototype, 'Mat4', [{
        name: 'sub',
        newName: 'subtract',
        target: Mat4.prototype,
        targetName: 'Mat4'
      }, {
        name: 'mul',
        newName: 'multiply',
        target: Mat4.prototype,
        targetName: 'Mat4'
      }, {
        name: 'mulScalar',
        newName: 'multiplyScalar',
        target: Mat4.prototype,
        targetName: 'Mat4'
      }, {
        name: 'exactEquals',
        newName: 'strictEquals',
        target: Mat4.prototype,
        targetName: 'Mat4'
      }]);

      const defineAttr = (proto, name, offset) => {
        Object.defineProperty(proto, name, {
          configurable: true,
          enumerable: true,

          get() {
            return this._data()[offset];
          },

          set(v) {
            this._data()[offset] = v;
          }

        });
      };

      var MathType;

      (function (MathType) {
        MathType[MathType["VEC2"] = 0] = "VEC2";
        MathType[MathType["VEC3"] = 1] = "VEC3";
        MathType[MathType["VEC4"] = 2] = "VEC4";
        MathType[MathType["QUATERNION"] = 3] = "QUATERNION";
        MathType[MathType["MAT3"] = 4] = "MAT3";
        MathType[MathType["MAT4"] = 5] = "MAT4";
        MathType[MathType["SIZE"] = 6] = "SIZE";
        MathType[MathType["RECT"] = 7] = "RECT";
        MathType[MathType["COLOR"] = 8] = "COLOR";
      })(MathType || (MathType = {}));

      function extendType(proto, parentProto, typ) {
        proto._data = function () {
          if (!this.__data) {
            this.__data = new Float32Array(this.underlyingData());
          }

          return this.__data;
        };

        Object.setPrototypeOf(proto, parentProto);
        Object.defineProperty(proto, 'type', {
          configurable: true,
          enumerable: true,
          writable: false,
          value: typ
        });
      }

      function inheritCCClass(ctor, parentCtor) {
        for (const attrName of ['__cid__', '__classname__']) {
          Object.defineProperty(ctor.prototype, attrName, {
            value: parentCtor.prototype[attrName],
            writable: false,
            enumerable: false,
            configurable: true
          });
        }

        for (const staticKey of ['__attrs__', '__props__', '__values__']) {
          ctor[staticKey] = parentCtor[staticKey];
        }
      }

      {
        extendType(jsb.Mat4.prototype, Mat4.prototype, MathType.MAT4);

        for (let i = 0; i < 16; i++) {
          const numb = `0${i}`;
          defineAttr(jsb.Mat4.prototype, `m${numb.substring(numb.length - 2)}`, i);
        }

        for (let i = 0; i < 9; i++) {
          const numb = `0${i}`;
          defineAttr(jsb.Mat3.prototype, `m${numb.substring(numb.length - 2)}`, i);
        }

        extendType(jsb.Mat3.prototype, Mat3.prototype, MathType.MAT3);
        defineAttr(jsb.Vec2.prototype, 'x', 0);
        defineAttr(jsb.Vec2.prototype, 'y', 1);
        extendType(jsb.Vec2.prototype, Vec2.prototype, MathType.VEC2);
        defineAttr(jsb.Vec3.prototype, 'x', 0);
        defineAttr(jsb.Vec3.prototype, 'y', 1);
        defineAttr(jsb.Vec3.prototype, 'z', 2);
        extendType(jsb.Vec3.prototype, Vec3.prototype, MathType.VEC3);
        defineAttr(jsb.Vec4.prototype, 'x', 0);
        defineAttr(jsb.Vec4.prototype, 'y', 1);
        defineAttr(jsb.Vec4.prototype, 'z', 2);
        defineAttr(jsb.Vec4.prototype, 'w', 3);
        extendType(jsb.Vec4.prototype, Vec4.prototype, MathType.VEC4);
        defineAttr(jsb.Quat.prototype, 'x', 0);
        defineAttr(jsb.Quat.prototype, 'y', 1);
        defineAttr(jsb.Quat.prototype, 'z', 2);
        defineAttr(jsb.Quat.prototype, 'w', 3);
        extendType(jsb.Quat.prototype, Quat.prototype, MathType.QUATERNION);
        Object.setPrototypeOf(jsb.Color.prototype, Color.prototype);
        Object.defineProperty(jsb.Color.prototype, 'type', {
          configurable: true,
          enumerable: true,
          writable: false,
          value: MathType.COLOR
        });
        inheritCCClass(jsb.Vec4, Vec4);
        inheritCCClass(jsb.Vec3, Vec3);
        inheritCCClass(jsb.Vec2, Vec2);
        inheritCCClass(jsb.Mat4, Mat4);
        inheritCCClass(jsb.Mat3, Mat3);
        inheritCCClass(jsb.Color, Color);
        inheritCCClass(jsb.Quat, Quat);
      }

      class AffineTransform {
        static identity() {
          return new AffineTransform();
        }

        static clone(affineTransform) {
          return new AffineTransform(affineTransform.a, affineTransform.b, affineTransform.c, affineTransform.d, affineTransform.tx, affineTransform.ty);
        }

        static concat(out, t1, t2) {
          const a = t1.a;
          const b = t1.b;
          const c = t1.c;
          const d = t1.d;
          const tx = t1.tx;
          const ty = t1.ty;
          out.a = a * t2.a + b * t2.c;
          out.b = a * t2.b + b * t2.d;
          out.c = c * t2.a + d * t2.c;
          out.d = c * t2.b + d * t2.d;
          out.tx = tx * t2.a + ty * t2.c + t2.tx;
          out.ty = tx * t2.b + ty * t2.d + t2.ty;
        }

        static invert(out, t) {
          const determinant = 1 / (t.a * t.d - t.b * t.c);
          out.a = determinant * t.d;
          out.b = -determinant * t.b;
          out.c = -determinant * t.c;
          out.d = determinant * t.a;
          out.tx = determinant * (t.c * t.ty - t.d * t.tx);
          out.ty = determinant * (t.b * t.tx - t.a * t.ty);
        }

        static fromMat4(out, mat) {
          out.a = mat.m00;
          out.b = mat.m01;
          out.c = mat.m04;
          out.d = mat.m05;
          out.tx = mat.m12;
          out.ty = mat.m13;
        }

        static transformVec2(out, point, transOrY, t) {
          let x;
          let y;

          if (!t) {
            t = transOrY;
            x = point.x;
            y = point.y;
          } else {
            x = point;
            y = transOrY;
          }

          out.x = t.a * x + t.c * y + t.tx;
          out.y = t.b * x + t.d * y + t.ty;
        }

        static transformSize(out, size, t) {
          out.width = t.a * size.width + t.c * size.height;
          out.height = t.b * size.width + t.d * size.height;
        }

        static transformRect(out, rect, t) {
          const or = rect.x + rect.width;
          const ot = rect.y + rect.height;
          const lbx = t.a * rect.x + t.c * rect.y + t.tx;
          const lby = t.b * rect.x + t.d * rect.y + t.ty;
          const rbx = t.a * or + t.c * rect.y + t.tx;
          const rby = t.b * or + t.d * rect.y + t.ty;
          const ltx = t.a * rect.x + t.c * ot + t.tx;
          const lty = t.b * rect.x + t.d * ot + t.ty;
          const rtx = t.a * or + t.c * ot + t.tx;
          const rty = t.b * or + t.d * ot + t.ty;
          const minX = Math.min(lbx, rbx, ltx, rtx);
          const maxX = Math.max(lbx, rbx, ltx, rtx);
          const minY = Math.min(lby, rby, lty, rty);
          const maxY = Math.max(lby, rby, lty, rty);
          out.x = minX;
          out.y = minY;
          out.width = maxX - minX;
          out.height = maxY - minY;
        }

        static transformObb(out_bl, out_tl, out_tr, out_br, rect, anAffineTransform) {
          const tx = anAffineTransform.a * rect.x + anAffineTransform.c * rect.y + anAffineTransform.tx;
          const ty = anAffineTransform.b * rect.x + anAffineTransform.d * rect.y + anAffineTransform.ty;
          const xa = anAffineTransform.a * rect.width;
          const xb = anAffineTransform.b * rect.width;
          const yc = anAffineTransform.c * rect.height;
          const yd = anAffineTransform.d * rect.height;
          out_tl.x = tx;
          out_tl.y = ty;
          out_tr.x = xa + tx;
          out_tr.y = xb + ty;
          out_bl.x = yc + tx;
          out_bl.y = yd + ty;
          out_br.x = xa + yc + tx;
          out_br.y = xb + yd + ty;
        }

        constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {
          this.a = a;
          this.b = b;
          this.c = c;
          this.d = d;
          this.tx = tx;
          this.ty = ty;
        }

      } exports('fd', AffineTransform);
      legacyCC.AffineTransform = AffineTransform;

      class Size extends ValueType {
        static lerp(out, from, to, ratio) {
          out.width = from.width + (to.width - from.width) * ratio;
          out.height = from.height + (to.height - from.height) * ratio;
          return out;
        }

        set x(val) {
          this.width = val;
        }

        get x() {
          return this.width;
        }

        set y(val) {
          this.height = val;
        }

        get y() {
          return this.height;
        }

        constructor(width, height) {
          super();

          if (width && typeof width === 'object') {
            this.width = width.width;
            this.height = width.height;
          } else {
            this.width = width || 0;
            this.height = height || 0;
          }
        }

        clone() {
          return new Size(this.width, this.height);
        }

        set(width, height) {
          if (width && typeof width === 'object') {
            this.height = width.height;
            this.width = width.width;
          } else {
            this.width = width || 0;
            this.height = height || 0;
          }

          return this;
        }

        equals(other) {
          return this.width === other.width && this.height === other.height;
        }

        lerp(to, ratio) {
          this.width += (to.width - this.width) * ratio;
          this.height += (to.height - this.height) * ratio;
          return this;
        }

        toString() {
          return `(${this.width.toFixed(2)}, ${this.height.toFixed(2)})`;
        }

      } exports('c8', Size);
      Size.ZERO = Object.freeze(new Size(0, 0));
      Size.ONE = Object.freeze(new Size(1, 1));
      CCClass.fastDefine('cc.Size', Size, {
        width: 0,
        height: 0
      });
      function size(width = 0, height = 0) {
        return new Size(width, height);
      }
      legacyCC.size = size;
      legacyCC.Size = Size;

      class Rect extends ValueType {
        static fromMinMax(out, v1, v2) {
          const minX = Math.min(v1.x, v2.x);
          const minY = Math.min(v1.y, v2.y);
          const maxX = Math.max(v1.x, v2.x);
          const maxY = Math.max(v1.y, v2.y);
          out.x = minX;
          out.y = minY;
          out.width = maxX - minX;
          out.height = maxY - minY;
          return out;
        }

        static lerp(out, from, to, ratio) {
          const x = from.x;
          const y = from.y;
          const w = from.width;
          const h = from.height;
          out.x = x + (to.x - x) * ratio;
          out.y = y + (to.y - y) * ratio;
          out.width = w + (to.width - w) * ratio;
          out.height = h + (to.height - h) * ratio;
          return out;
        }

        static intersection(out, one, other) {
          const axMin = one.x;
          const ayMin = one.y;
          const axMax = one.x + one.width;
          const ayMax = one.y + one.height;
          const bxMin = other.x;
          const byMin = other.y;
          const bxMax = other.x + other.width;
          const byMax = other.y + other.height;
          out.x = Math.max(axMin, bxMin);
          out.y = Math.max(ayMin, byMin);
          out.width = Math.min(axMax, bxMax) - out.x;
          out.height = Math.min(ayMax, byMax) - out.y;
          return out;
        }

        static union(out, one, other) {
          const x = one.x;
          const y = one.y;
          const w = one.width;
          const h = one.height;
          const bx = other.x;
          const by = other.y;
          const bw = other.width;
          const bh = other.height;
          out.x = Math.min(x, bx);
          out.y = Math.min(y, by);
          out.width = Math.max(x + w, bx + bw) - out.x;
          out.height = Math.max(y + h, by + bh) - out.y;
          return out;
        }

        get xMin() {
          return this.x;
        }

        set xMin(value) {
          this.width += this.x - value;
          this.x = value;
        }

        get yMin() {
          return this.y;
        }

        set yMin(value) {
          this.height += this.y - value;
          this.y = value;
        }

        get xMax() {
          return this.x + this.width;
        }

        set xMax(value) {
          this.width = value - this.x;
        }

        get yMax() {
          return this.y + this.height;
        }

        set yMax(value) {
          this.height = value - this.y;
        }

        get center() {
          return new Vec2(this.x + this.width * 0.5, this.y + this.height * 0.5);
        }

        set center(value) {
          this.x = value.x - this.width * 0.5;
          this.y = value.y - this.height * 0.5;
        }

        get origin() {
          return new Vec2(this.x, this.y);
        }

        set origin(value) {
          this.x = value.x;
          this.y = value.y;
        }

        get size() {
          return new Size(this.width, this.height);
        }

        set size(value) {
          this.width = value.width;
          this.height = value.height;
        }

        set z(val) {
          this.width = val;
        }

        get z() {
          return this.width;
        }

        set w(val) {
          this.height = val;
        }

        get w() {
          return this.height;
        }

        constructor(x, y, width, height) {
          super();

          if (x && typeof x === 'object') {
            this.y = x.y;
            this.width = x.width;
            this.height = x.height;
            this.x = x.x;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.width = width || 0;
            this.height = height || 0;
          }
        }

        clone() {
          return new Rect(this.x, this.y, this.width, this.height);
        }

        set(x, y, width, height) {
          if (x && typeof x === 'object') {
            this.y = x.y;
            this.width = x.width;
            this.height = x.height;
            this.x = x.x;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.width = width || 0;
            this.height = height || 0;
          }

          return this;
        }

        equals(other) {
          return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
        }

        lerp(to, ratio) {
          const x = this.x;
          const y = this.y;
          const w = this.width;
          const h = this.height;
          this.x = x + (to.x - x) * ratio;
          this.y = y + (to.y - y) * ratio;
          this.width = w + (to.width - w) * ratio;
          this.height = h + (to.height - h) * ratio;
          return this;
        }

        toString() {
          return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.width.toFixed(2)}, ${this.height.toFixed(2)})`;
        }

        intersects(other) {
          const maxax = this.x + this.width;
          const maxay = this.y + this.height;
          const maxbx = other.x + other.width;
          const maxby = other.y + other.height;
          return !(maxax < other.x || maxbx < this.x || maxay < other.y || maxby < this.y);
        }

        contains(point) {
          return this.x <= point.x && this.x + this.width >= point.x && this.y <= point.y && this.y + this.height >= point.y;
        }

        containsRect(other) {
          return this.x <= other.x && this.x + this.width >= other.x + other.width && this.y <= other.y && this.y + this.height >= other.y + other.height;
        }

        transformMat4(mat) {
          const ol = this.x;
          const ob = this.y;
          const or = ol + this.width;
          const ot = ob + this.height;
          const lbx = mat.m00 * ol + mat.m04 * ob + mat.m12;
          const lby = mat.m01 * ol + mat.m05 * ob + mat.m13;
          const rbx = mat.m00 * or + mat.m04 * ob + mat.m12;
          const rby = mat.m01 * or + mat.m05 * ob + mat.m13;
          const ltx = mat.m00 * ol + mat.m04 * ot + mat.m12;
          const lty = mat.m01 * ol + mat.m05 * ot + mat.m13;
          const rtx = mat.m00 * or + mat.m04 * ot + mat.m12;
          const rty = mat.m01 * or + mat.m05 * ot + mat.m13;
          const minX = Math.min(lbx, rbx, ltx, rtx);
          const maxX = Math.max(lbx, rbx, ltx, rtx);
          const minY = Math.min(lby, rby, lty, rty);
          const maxY = Math.max(lby, rby, lty, rty);
          this.x = minX;
          this.y = minY;
          this.width = maxX - minX;
          this.height = maxY - minY;
          return this;
        }

        transformMat4ToPoints(mat, out_lb, out_lt, out_rt, out_rb) {
          const ol = this.x;
          const ob = this.y;
          const or = ol + this.width;
          const ot = ob + this.height;
          out_lb.x = mat.m00 * ol + mat.m04 * ob + mat.m12;
          out_lb.y = mat.m01 * ol + mat.m05 * ob + mat.m13;
          out_rb.x = mat.m00 * or + mat.m04 * ob + mat.m12;
          out_rb.y = mat.m01 * or + mat.m05 * ob + mat.m13;
          out_lt.x = mat.m00 * ol + mat.m04 * ot + mat.m12;
          out_lt.y = mat.m01 * ol + mat.m05 * ot + mat.m13;
          out_rt.x = mat.m00 * or + mat.m04 * ot + mat.m12;
          out_rt.y = mat.m01 * or + mat.m05 * ot + mat.m13;
        }

      } exports('c5', Rect);
      CCClass.fastDefine('cc.Rect', Rect, {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      });
      legacyCC.Rect = Rect;
      function rect(x = 0, y = 0, width = 0, height = 0) {
        return new Rect(x, y, width, height);
      }
      legacyCC.rect = rect;

      const MATH_FLOAT_ARRAY = exports('fl',  Float32Array );
      class MathBase extends ValueType {
        static createFloatArray(size) {
          return new MATH_FLOAT_ARRAY(size);
        }

        get array() {
          return this._array;
        }

      } exports('fm', MathBase);

      var math = /*#__PURE__*/Object.freeze({
        __proto__: null,
        bits: bits,
        Vec2: Vec2,
        v2: v2,
        Vec3: Vec3,
        v3: v3,
        Vec4: Vec4,
        v4: v4,
        Quat: Quat,
        quat: quat,
        Mat3: Mat3,
        Mat4: Mat4,
        mat4: mat4,
        AffineTransform: AffineTransform,
        Size: Size,
        size: size,
        Rect: Rect,
        rect: rect,
        Color: Color,
        color: color,
        preTransforms: preTransforms,
        HALF_PI: HALF_PI,
        TWO_PI: TWO_PI,
        EPSILON: EPSILON,
        equals: equals,
        approx: approx,
        clamp: clamp,
        clamp01: clamp01,
        lerp: lerp,
        toRadian: toRadian,
        toDegree: toDegree,
        random: random,
        randomRange: randomRange,
        randomRangeInt: randomRangeInt,
        pseudoRandom: pseudoRandom,
        pseudoRandomRange: pseudoRandomRange,
        pseudoRandomRangeInt: pseudoRandomRangeInt,
        nextPow2: nextPow2$1,
        repeat: repeat,
        pingPong: pingPong,
        inverseLerp: inverseLerp,
        absMaxComponent: absMaxComponent,
        absMax: absMax,
        enumerableProps: enumerableProps,
        MATH_FLOAT_ARRAY: MATH_FLOAT_ARRAY,
        MathBase: MathBase
      });
      exports('f6', math);

      const X = new Vec3();
      const Y = new Vec3();
      const Z = new Vec3();
      const d = new Vec3();
      const min$1 = new Vec3();
      const max$1 = new Vec3();
      const u = new Array(3);
      const e = new Array(3);
      function point_plane(point, plane_) {
        return Vec3.dot(plane_.n, point) - plane_.d;
      }
      function pt_point_plane(out, point, plane_) {
        const t = point_plane(point, plane_);
        return Vec3.subtract(out, point, Vec3.multiplyScalar(out, plane_.n, t));
      }
      function pt_point_aabb(out, point, aabb_) {
        Vec3.copy(out, point);
        Vec3.subtract(min$1, aabb_.center, aabb_.halfExtents);
        Vec3.add(max$1, aabb_.center, aabb_.halfExtents);
        out.x = out.x < min$1.x ? min$1.x : out.x;
        out.y = out.y < min$1.y ? min$1.y : out.y;
        out.z = out.z < min$1.z ? min$1.z : out.z;
        out.x = out.x > max$1.x ? max$1.x : out.x;
        out.y = out.y > max$1.y ? max$1.y : out.y;
        out.z = out.z > max$1.z ? max$1.z : out.z;
        return out;
      }
      function pt_point_obb(out, point, obb_) {
        Vec3.set(X, obb_.orientation.m00, obb_.orientation.m01, obb_.orientation.m02);
        Vec3.set(Y, obb_.orientation.m03, obb_.orientation.m04, obb_.orientation.m05);
        Vec3.set(Z, obb_.orientation.m06, obb_.orientation.m07, obb_.orientation.m08);
        u[0] = X;
        u[1] = Y;
        u[2] = Z;
        e[0] = obb_.halfExtents.x;
        e[1] = obb_.halfExtents.y;
        e[2] = obb_.halfExtents.z;
        Vec3.subtract(d, point, obb_.center);
        Vec3.set(out, obb_.center.x, obb_.center.y, obb_.center.z);

        for (let i = 0; i < 3; i++) {
          let dist = Vec3.dot(d, u[i]);

          if (dist > e[i]) {
            dist = e[i];
          }

          if (dist < -e[i]) {
            dist = -e[i];
          }

          out.x += dist * u[i].x;
          out.y += dist * u[i].y;
          out.z += dist * u[i].z;
        }

        return out;
      }
      function pt_point_line(out, point, linePointA, linePointB) {
        Vec3.subtract(X, linePointA, linePointB);
        const dir = X;
        const dirSquaredLength = Vec3.lengthSqr(dir);

        if (dirSquaredLength === 0) {
          Vec3.copy(out, linePointA);
        } else {
          Vec3.subtract(X, point, linePointA);
          const t = Vec3.dot(X, dir) / dirSquaredLength;

          if (t < 0) {
            Vec3.copy(out, linePointA);
          } else if (t > 1) {
            Vec3.copy(out, linePointB);
          } else {
            Vec3.scaleAndAdd(out, linePointA, dir, t);
          }
        }
      }

      var distance = /*#__PURE__*/Object.freeze({
        __proto__: null,
        point_plane: point_plane,
        pt_point_plane: pt_point_plane,
        pt_point_aabb: pt_point_aabb,
        pt_point_obb: pt_point_obb,
        pt_point_line: pt_point_line
      });

      var enums = {
        SHAPE_RAY: 1 << 0,
        SHAPE_LINE: 1 << 1,
        SHAPE_SPHERE: 1 << 2,
        SHAPE_AABB: 1 << 3,
        SHAPE_OBB: 1 << 4,
        SHAPE_PLANE: 1 << 5,
        SHAPE_TRIANGLE: 1 << 6,
        SHAPE_FRUSTUM: 1 << 7,
        SHAPE_FRUSTUM_ACCURATE: 1 << 8,
        SHAPE_CAPSULE: 1 << 9,
        SHAPE_SPLINE: 1 << 10
      };

      class Line {
        static create(sx, sy, sz, ex, ey, ez) {
          return new Line(sx, sy, sz, ex, ey, ez);
        }

        static clone(a) {
          return new Line(a.s.x, a.s.y, a.s.z, a.e.x, a.e.y, a.e.z);
        }

        static copy(out, a) {
          Vec3.copy(out.s, a.s);
          Vec3.copy(out.e, a.e);
          return out;
        }

        static fromPoints(out, start, end) {
          Vec3.copy(out.s, start);
          Vec3.copy(out.e, end);
          return out;
        }

        static set(out, sx, sy, sz, ex, ey, ez) {
          out.s.x = sx;
          out.s.y = sy;
          out.s.z = sz;
          out.e.x = ex;
          out.e.y = ey;
          out.e.z = ez;
          return out;
        }

        static len(a) {
          return Vec3.distance(a.s, a.e);
        }

        get type() {
          return this._type;
        }

        constructor(sx = 0, sy = 0, sz = 0, ex = 0, ey = 0, ez = -1) {
          this.s = void 0;
          this.e = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_LINE;
          this.s = new Vec3(sx, sy, sz);
          this.e = new Vec3(ex, ey, ez);
        }

        length() {
          return Vec3.distance(this.s, this.e);
        }

      }

      class Ray {
        static create(ox = 0, oy = 0, oz = 0, dx = 0, dy = 0, dz = 1) {
          return new Ray(ox, oy, oz, dx, dy, dz);
        }

        static clone(a) {
          return new Ray(a.o.x, a.o.y, a.o.z, a.d.x, a.d.y, a.d.z);
        }

        static copy(out, a) {
          Vec3.copy(out.o, a.o);
          Vec3.copy(out.d, a.d);
          return out;
        }

        static fromPoints(out, origin, target) {
          Vec3.copy(out.o, origin);
          Vec3.normalize(out.d, Vec3.subtract(out.d, target, origin));
          return out;
        }

        static set(out, ox, oy, oz, dx, dy, dz) {
          out.o.x = ox;
          out.o.y = oy;
          out.o.z = oz;
          out.d.x = dx;
          out.d.y = dy;
          out.d.z = dz;
          return out;
        }

        get type() {
          return this._type;
        }

        constructor(ox = 0, oy = 0, oz = 0, dx = 0, dy = 0, dz = -1) {
          this.o = void 0;
          this.d = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_RAY;
          this.o = new Vec3(ox, oy, oz);
          this.d = new Vec3(dx, dy, dz);
        }

        computeHit(out, distance) {
          Vec3.normalize(out, this.d);
          Vec3.scaleAndAdd(out, this.o, out, distance);
        }

      } exports('cV', Ray);

      const _v3_tmp = new Vec3();

      const _offset = new Vec3();

      const _min = new Vec3();

      const _max = new Vec3();

      function maxComponent(v) {
        return Math.max(Math.max(v.x, v.y), v.z);
      }

      class Sphere {
        static create(cx, cy, cz, r) {
          return new Sphere(cx, cy, cz, r);
        }

        static clone(p) {
          return new Sphere(p.center.x, p.center.y, p.center.z, p.radius);
        }

        static copy(out, p) {
          Vec3.copy(out.center, p.center);
          out.radius = p.radius;
          return out;
        }

        static fromPoints(out, minPos, maxPos) {
          Vec3.multiplyScalar(out.center, Vec3.add(_v3_tmp, minPos, maxPos), 0.5);
          out.radius = Vec3.subtract(_v3_tmp, maxPos, minPos).length() * 0.5;
          return out;
        }

        static set(out, cx, cy, cz, r) {
          out.center.x = cx;
          out.center.y = cy;
          out.center.z = cz;
          out.radius = r;
          return out;
        }

        get center() {
          return this._center;
        }

        set center(val) {
          this._center = val;
        }

        get radius() {
          return this._radius;
        }

        set radius(val) {
          this._radius = val;
        }

        get type() {
          return this._type;
        }

        constructor(cx = 0, cy = 0, cz = 0, r = 1) {
          this._center = new Vec3(0, 0, 0);
          this._radius = 0;
          this._type = void 0;
          this._type = enums.SHAPE_SPHERE;
          this._center = new Vec3(cx, cy, cz);
          this._radius = r;
        }

        destroy() {}

        clone() {
          return Sphere.clone(this);
        }

        copy(a) {
          return Sphere.copy(this, a);
        }

        getBoundary(minPos, maxPos) {
          Vec3.set(minPos, this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);
          Vec3.set(maxPos, this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);
        }

        transform(m, pos, rot, scale, out) {
          Vec3.transformMat4(out.center, this.center, m);
          out.radius = this.radius * maxComponent(scale);
        }

        translateAndRotate(m, rot, out) {
          Vec3.transformMat4(out.center, this.center, m);
        }

        setScale(scale, out) {
          out.radius = this.radius * maxComponent(scale);
        }

        mergePoint(point) {
          if (this.radius < 0.0) {
            this.center.set(point);
            this.radius = 0.0;
          }

          Vec3.subtract(_offset, point, this.center);

          const dist = _offset.length();

          if (dist > this.radius) {
            const half = (dist - this.radius) * 0.5;
            this.radius += half;
            Vec3.multiplyScalar(_offset, _offset, half / dist);
            Vec3.add(this.center, this.center, _offset);
          }
        }

        mergePoints(points) {
          const length = points.length;
          if (length < 1) return;
          this.radius = -1.0;

          for (let i = 0; i < length; i++) {
            this.mergePoint(points[i]);
          }
        }

        mergeAABB(a) {
          a.getBoundary(_min, _max);
          this.mergePoint(_min);
          this.mergePoint(_max);
        }

      } exports('cO', Sphere);

      const rayPlane = function () {
        const pt = new Vec3(0, 0, 0);
        return function (ray, plane) {
          const denom = Vec3.dot(ray.d, plane.n);

          if (Math.abs(denom) < Number.EPSILON) {
            return 0;
          }

          Vec3.multiplyScalar(pt, plane.n, plane.d);
          const t = Vec3.dot(Vec3.subtract(pt, pt, ray.o), plane.n) / denom;

          if (t < 0) {
            return 0;
          }

          return t;
        };
      }();

      const rayTriangle = function () {
        const ab = new Vec3(0, 0, 0);
        const ac = new Vec3(0, 0, 0);
        const pvec = new Vec3(0, 0, 0);
        const tvec = new Vec3(0, 0, 0);
        const qvec = new Vec3(0, 0, 0);
        return function (ray, triangle, doubleSided) {
          Vec3.subtract(ab, triangle.b, triangle.a);
          Vec3.subtract(ac, triangle.c, triangle.a);
          Vec3.cross(pvec, ray.d, ac);
          const det = Vec3.dot(ab, pvec);

          if (det < Number.EPSILON && (!doubleSided || det > -Number.EPSILON)) {
            return 0;
          }

          const inv_det = 1 / det;
          Vec3.subtract(tvec, ray.o, triangle.a);
          const u = Vec3.dot(tvec, pvec) * inv_det;

          if (u < 0 || u > 1) {
            return 0;
          }

          Vec3.cross(qvec, tvec, ab);
          const v = Vec3.dot(ray.d, qvec) * inv_det;

          if (v < 0 || u + v > 1) {
            return 0;
          }

          const t = Vec3.dot(ac, qvec) * inv_det;
          return t < 0 ? 0 : t;
        };
      }();

      const raySphere = function () {
        const e = new Vec3(0, 0, 0);
        return function (ray, sphere) {
          const r = sphere.radius;
          const c = sphere.center;
          const o = ray.o;
          const d = ray.d;
          const rSq = r * r;
          Vec3.subtract(e, c, o);
          const eSq = e.lengthSqr();
          const aLength = Vec3.dot(e, d);
          const fSq = rSq - (eSq - aLength * aLength);

          if (fSq < 0) {
            return 0;
          }

          const f = Math.sqrt(fSq);
          const t = eSq < rSq ? aLength + f : aLength - f;

          if (t < 0) {
            return 0;
          }

          return t;
        };
      }();

      const rayAABB = function () {
        const min = new Vec3();
        const max = new Vec3();
        return function (ray, aabb) {
          Vec3.subtract(min, aabb.center, aabb.halfExtents);
          Vec3.add(max, aabb.center, aabb.halfExtents);
          return rayAABB2(ray, min, max);
        };
      }();

      function rayAABB2(ray, min, max) {
        const o = ray.o;
        const d = ray.d;
        const ix = 1 / d.x;
        const iy = 1 / d.y;
        const iz = 1 / d.z;
        const t1 = (min.x - o.x) * ix;
        const t2 = (max.x - o.x) * ix;
        const t3 = (min.y - o.y) * iy;
        const t4 = (max.y - o.y) * iy;
        const t5 = (min.z - o.z) * iz;
        const t6 = (max.z - o.z) * iz;
        const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));
        const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6));

        if (tmax < 0 || tmin > tmax) {
          return 0;
        }

        return tmin > 0 ? tmin : tmax;
      }

      const rayOBB = function () {
        let center = new Vec3();
        let o = new Vec3();
        let d = new Vec3();
        const X = new Vec3();
        const Y = new Vec3();
        const Z = new Vec3();
        const p = new Vec3();
        const size = new Array(3);
        const f = new Array(3);
        const e = new Array(3);
        const t = new Array(6);
        return function (ray, obb) {
          size[0] = obb.halfExtents.x;
          size[1] = obb.halfExtents.y;
          size[2] = obb.halfExtents.z;
          center = obb.center;
          o = ray.o;
          d = ray.d;
          Vec3.set(X, obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);
          Vec3.set(Y, obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);
          Vec3.set(Z, obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);
          Vec3.subtract(p, center, o);
          f[0] = Vec3.dot(X, d);
          f[1] = Vec3.dot(Y, d);
          f[2] = Vec3.dot(Z, d);
          e[0] = Vec3.dot(X, p);
          e[1] = Vec3.dot(Y, p);
          e[2] = Vec3.dot(Z, p);

          for (let i = 0; i < 3; ++i) {
            if (f[i] === 0) {
              if (-e[i] - size[i] > 0 || -e[i] + size[i] < 0) {
                return 0;
              }

              f[i] = 0.0000001;
            }

            t[i * 2 + 0] = (e[i] + size[i]) / f[i];
            t[i * 2 + 1] = (e[i] - size[i]) / f[i];
          }

          const tmin = Math.max(Math.max(Math.min(t[0], t[1]), Math.min(t[2], t[3])), Math.min(t[4], t[5]));
          const tmax = Math.min(Math.min(Math.max(t[0], t[1]), Math.max(t[2], t[3])), Math.max(t[4], t[5]));

          if (tmax < 0 || tmin > tmax) {
            return 0;
          }

          return tmin > 0 ? tmin : tmax;
        };
      }();

      const rayCapsule = function () {
        const v3_0 = new Vec3();
        const v3_1 = new Vec3();
        const v3_2 = new Vec3();
        const v3_3 = new Vec3();
        const v3_4 = new Vec3();
        const v3_5 = new Vec3();
        const v3_6 = new Vec3();
        const sphere_0 = new Sphere();
        return function (ray, capsule) {
          const radiusSqr = capsule.radius * capsule.radius;
          const vRayNorm = Vec3.normalize(v3_0, ray.d);
          const A = capsule.ellipseCenter0;
          const B = capsule.ellipseCenter1;
          const BA = Vec3.subtract(v3_1, B, A);

          if (BA.equals(Vec3.ZERO)) {
            sphere_0.radius = capsule.radius;
            sphere_0.center.set(capsule.ellipseCenter0);
            return intersect.raySphere(ray, sphere_0);
          }

          const O = ray.o;
          const OA = Vec3.subtract(v3_2, O, A);
          const VxBA = Vec3.cross(v3_3, vRayNorm, BA);
          const a = VxBA.lengthSqr();

          if (a === 0) {
            sphere_0.radius = capsule.radius;
            const BO = Vec3.subtract(v3_4, B, O);

            if (OA.lengthSqr() < BO.lengthSqr()) {
              sphere_0.center.set(capsule.ellipseCenter0);
            } else {
              sphere_0.center.set(capsule.ellipseCenter1);
            }

            return intersect.raySphere(ray, sphere_0);
          }

          const OAxBA = Vec3.cross(v3_4, OA, BA);
          const ab2 = BA.lengthSqr();
          const b = 2 * Vec3.dot(VxBA, OAxBA);
          const c = OAxBA.lengthSqr() - radiusSqr * ab2;
          const d = b * b - 4 * a * c;

          if (d < 0) {
            return 0;
          }

          const t = (-b - Math.sqrt(d)) / (2 * a);

          if (t < 0) {
            sphere_0.radius = capsule.radius;
            const BO = Vec3.subtract(v3_5, B, O);

            if (OA.lengthSqr() < BO.lengthSqr()) {
              sphere_0.center.set(capsule.ellipseCenter0);
            } else {
              sphere_0.center.set(capsule.ellipseCenter1);
            }

            return intersect.raySphere(ray, sphere_0);
          } else {
            const iPos = Vec3.scaleAndAdd(v3_5, ray.o, vRayNorm, t);
            const iPosLen = Vec3.subtract(v3_6, iPos, A);
            const tLimit = Vec3.dot(iPosLen, BA) / ab2;

            if (tLimit >= 0 && tLimit <= 1) {
              return t;
            } else if (tLimit < 0) {
              sphere_0.radius = capsule.radius;
              sphere_0.center.set(capsule.ellipseCenter0);
              return intersect.raySphere(ray, sphere_0);
            } else if (tLimit > 1) {
              sphere_0.radius = capsule.radius;
              sphere_0.center.set(capsule.ellipseCenter1);
              return intersect.raySphere(ray, sphere_0);
            } else {
              return 0;
            }
          }
        };
      }();

      const linePlane = function () {
        const ab = new Vec3(0, 0, 0);
        return function (line, plane) {
          Vec3.subtract(ab, line.e, line.s);
          const t = (plane.d - Vec3.dot(line.s, plane.n)) / Vec3.dot(ab, plane.n);

          if (t < 0 || t > 1) {
            return 0;
          }

          return t;
        };
      }();

      const lineTriangle = function () {
        const ab = new Vec3(0, 0, 0);
        const ac = new Vec3(0, 0, 0);
        const qp = new Vec3(0, 0, 0);
        const ap = new Vec3(0, 0, 0);
        const n = new Vec3(0, 0, 0);
        const e = new Vec3(0, 0, 0);
        return function (line, triangle, outPt) {
          Vec3.subtract(ab, triangle.b, triangle.a);
          Vec3.subtract(ac, triangle.c, triangle.a);
          Vec3.subtract(qp, line.s, line.e);
          Vec3.cross(n, ab, ac);
          const det = Vec3.dot(qp, n);

          if (det <= 0.0) {
            return 0;
          }

          Vec3.subtract(ap, line.s, triangle.a);
          const t = Vec3.dot(ap, n);

          if (t < 0 || t > det) {
            return 0;
          }

          Vec3.cross(e, qp, ap);
          let v = Vec3.dot(ac, e);

          if (v < 0 || v > det) {
            return 0;
          }

          let w = -Vec3.dot(ab, e);

          if (w < 0.0 || v + w > det) {
            return 0;
          }

          if (outPt) {
            const invDet = 1.0 / det;
            v *= invDet;
            w *= invDet;
            const u = 1.0 - v - w;
            Vec3.set(outPt, triangle.a.x * u + triangle.b.x * v + triangle.c.x * w, triangle.a.y * u + triangle.b.y * v + triangle.c.y * w, triangle.a.z * u + triangle.b.z * v + triangle.c.z * w);
          }

          return 1;
        };
      }();

      const r_t = new Ray();

      function lineAABB(line, aabb) {
        r_t.o.set(line.s);
        Vec3.subtract(r_t.d, line.e, line.s);
        r_t.d.normalize();
        const min = rayAABB(r_t, aabb);
        const len = line.length();

        if (min <= len) {
          return min;
        } else {
          return 0;
        }
      }

      function lineOBB(line, obb) {
        r_t.o.set(line.s);
        Vec3.subtract(r_t.d, line.e, line.s);
        r_t.d.normalize();
        const min = rayOBB(r_t, obb);
        const len = line.length();

        if (min <= len) {
          return min;
        } else {
          return 0;
        }
      }

      function lineSphere(line, sphere) {
        r_t.o.set(line.s);
        Vec3.subtract(r_t.d, line.e, line.s);
        r_t.d.normalize();
        const min = raySphere(r_t, sphere);
        const len = line.length();

        if (min <= len) {
          return min;
        } else {
          return 0;
        }
      }

      const aabbWithAABB = function () {
        const aMin = new Vec3();
        const aMax = new Vec3();
        const bMin = new Vec3();
        const bMax = new Vec3();
        return function (aabb1, aabb2) {
          Vec3.subtract(aMin, aabb1.center, aabb1.halfExtents);
          Vec3.add(aMax, aabb1.center, aabb1.halfExtents);
          Vec3.subtract(bMin, aabb2.center, aabb2.halfExtents);
          Vec3.add(bMax, aabb2.center, aabb2.halfExtents);
          return aMin.x <= bMax.x && aMax.x >= bMin.x && aMin.y <= bMax.y && aMax.y >= bMin.y && aMin.z <= bMax.z && aMax.z >= bMin.z;
        };
      }();

      function getAABBVertices(min, max, out) {
        Vec3.set(out[0], min.x, max.y, max.z);
        Vec3.set(out[1], min.x, max.y, min.z);
        Vec3.set(out[2], min.x, min.y, max.z);
        Vec3.set(out[3], min.x, min.y, min.z);
        Vec3.set(out[4], max.x, max.y, max.z);
        Vec3.set(out[5], max.x, max.y, min.z);
        Vec3.set(out[6], max.x, min.y, max.z);
        Vec3.set(out[7], max.x, min.y, min.z);
      }

      function getOBBVertices(c, e, a1, a2, a3, out) {
        Vec3.set(out[0], c.x + a1.x * e.x + a2.x * e.y + a3.x * e.z, c.y + a1.y * e.x + a2.y * e.y + a3.y * e.z, c.z + a1.z * e.x + a2.z * e.y + a3.z * e.z);
        Vec3.set(out[1], c.x - a1.x * e.x + a2.x * e.y + a3.x * e.z, c.y - a1.y * e.x + a2.y * e.y + a3.y * e.z, c.z - a1.z * e.x + a2.z * e.y + a3.z * e.z);
        Vec3.set(out[2], c.x + a1.x * e.x - a2.x * e.y + a3.x * e.z, c.y + a1.y * e.x - a2.y * e.y + a3.y * e.z, c.z + a1.z * e.x - a2.z * e.y + a3.z * e.z);
        Vec3.set(out[3], c.x + a1.x * e.x + a2.x * e.y - a3.x * e.z, c.y + a1.y * e.x + a2.y * e.y - a3.y * e.z, c.z + a1.z * e.x + a2.z * e.y - a3.z * e.z);
        Vec3.set(out[4], c.x - a1.x * e.x - a2.x * e.y - a3.x * e.z, c.y - a1.y * e.x - a2.y * e.y - a3.y * e.z, c.z - a1.z * e.x - a2.z * e.y - a3.z * e.z);
        Vec3.set(out[5], c.x + a1.x * e.x - a2.x * e.y - a3.x * e.z, c.y + a1.y * e.x - a2.y * e.y - a3.y * e.z, c.z + a1.z * e.x - a2.z * e.y - a3.z * e.z);
        Vec3.set(out[6], c.x - a1.x * e.x + a2.x * e.y - a3.x * e.z, c.y - a1.y * e.x + a2.y * e.y - a3.y * e.z, c.z - a1.z * e.x + a2.z * e.y - a3.z * e.z);
        Vec3.set(out[7], c.x - a1.x * e.x - a2.x * e.y + a3.x * e.z, c.y - a1.y * e.x - a2.y * e.y + a3.y * e.z, c.z - a1.z * e.x - a2.z * e.y + a3.z * e.z);
      }

      function getInterval(vertices, axis) {
        let min = Vec3.dot(axis, vertices[0]);
        let max = min;

        for (let i = 1; i < 8; ++i) {
          const projection = Vec3.dot(axis, vertices[i]);
          min = projection < min ? projection : min;
          max = projection > max ? projection : max;
        }

        return [min, max];
      }

      const aabbWithOBB = function () {
        const test = new Array(15);

        for (let i = 0; i < 15; i++) {
          test[i] = new Vec3(0, 0, 0);
        }

        const vertices = new Array(8);
        const vertices2 = new Array(8);

        for (let i = 0; i < 8; i++) {
          vertices[i] = new Vec3(0, 0, 0);
          vertices2[i] = new Vec3(0, 0, 0);
        }

        const min = new Vec3();
        const max = new Vec3();
        return function (aabb, obb) {
          Vec3.set(test[0], 1, 0, 0);
          Vec3.set(test[1], 0, 1, 0);
          Vec3.set(test[2], 0, 0, 1);
          Vec3.set(test[3], obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);
          Vec3.set(test[4], obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);
          Vec3.set(test[5], obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);

          for (let i = 0; i < 3; ++i) {
            Vec3.cross(test[6 + i * 3 + 0], test[i], test[3]);
            Vec3.cross(test[6 + i * 3 + 1], test[i], test[4]);
            Vec3.cross(test[6 + i * 3 + 1], test[i], test[5]);
          }

          Vec3.subtract(min, aabb.center, aabb.halfExtents);
          Vec3.add(max, aabb.center, aabb.halfExtents);
          getAABBVertices(min, max, vertices);
          getOBBVertices(obb.center, obb.halfExtents, test[3], test[4], test[5], vertices2);

          for (let j = 0; j < 15; ++j) {
            const a = getInterval(vertices, test[j]);
            const b = getInterval(vertices2, test[j]);

            if (b[0] > a[1] || a[0] > b[1]) {
              return 0;
            }
          }

          return 1;
        };
      }();

      const aabbPlane = function (aabb, plane) {
        const r = aabb.halfExtents.x * Math.abs(plane.n.x) + aabb.halfExtents.y * Math.abs(plane.n.y) + aabb.halfExtents.z * Math.abs(plane.n.z);
        const dot = Vec3.dot(plane.n, aabb.center);

        if (dot + r < plane.d) {
          return -1;
        } else if (dot - r > plane.d) {
          return 0;
        }

        return 1;
      };

      const aabbFrustum = function (aabb, frustum) {
        for (let i = 0; i < frustum.planes.length; i++) {
          if (aabbPlane(aabb, frustum.planes[i]) === -1) {
            return 0;
          }
        }

        return 1;
      };

      const aabbFrustumCompletelyInside = function (aabb, frustum) {
        for (let i = 0; i < frustum.planes.length; i++) {
          if (aabbPlane(aabb, frustum.planes[i]) !== 0) {
            return 0;
          }
        }

        return 1;
      };

      const aabbFrustumAccurate = function () {
        const tmp = new Array(8);
        let out1 = 0;
        let out2 = 0;

        for (let i = 0; i < tmp.length; i++) {
          tmp[i] = new Vec3(0, 0, 0);
        }

        return function (aabb, frustum) {
          let result = 0;
          let intersects = false;

          for (let i = 0; i < frustum.planes.length; i++) {
            result = aabbPlane(aabb, frustum.planes[i]);
            if (result === -1) return 0;else if (result === 1) {
                intersects = true;
              }
          }

          if (!intersects) {
            return 1;
          }

          for (let i = 0; i < frustum.vertices.length; i++) {
            Vec3.subtract(tmp[i], frustum.vertices[i], aabb.center);
          }

          out1 = 0, out2 = 0;

          for (let i = 0; i < frustum.vertices.length; i++) {
            if (tmp[i].x > aabb.halfExtents.x) {
              out1++;
            } else if (tmp[i].x < -aabb.halfExtents.x) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          out1 = 0;
          out2 = 0;

          for (let i = 0; i < frustum.vertices.length; i++) {
            if (tmp[i].y > aabb.halfExtents.y) {
              out1++;
            } else if (tmp[i].y < -aabb.halfExtents.y) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          out1 = 0;
          out2 = 0;

          for (let i = 0; i < frustum.vertices.length; i++) {
            if (tmp[i].z > aabb.halfExtents.z) {
              out1++;
            } else if (tmp[i].z < -aabb.halfExtents.z) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          return 1;
        };
      }();

      const obbPoint = function () {
        const tmp = new Vec3(0, 0, 0);
        const m3 = new Mat3();

        const lessThan = function (a, b) {
          return Math.abs(a.x) < b.x && Math.abs(a.y) < b.y && Math.abs(a.z) < b.z;
        };

        return function (obb, point) {
          Vec3.subtract(tmp, point, obb.center);
          Vec3.transformMat3(tmp, tmp, Mat3.transpose(m3, obb.orientation));
          return lessThan(tmp, obb.halfExtents);
        };
      }();

      const obbPlane = function () {
        const absDot = function (n, x, y, z) {
          return Math.abs(n.x * x + n.y * y + n.z * z);
        };

        return function (obb, plane) {
          const r = obb.halfExtents.x * absDot(plane.n, obb.orientation.m00, obb.orientation.m01, obb.orientation.m02) + obb.halfExtents.y * absDot(plane.n, obb.orientation.m03, obb.orientation.m04, obb.orientation.m05) + obb.halfExtents.z * absDot(plane.n, obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);
          const dot = Vec3.dot(plane.n, obb.center);

          if (dot + r < plane.d) {
            return -1;
          } else if (dot - r > plane.d) {
            return 0;
          }

          return 1;
        };
      }();

      const obbFrustum = function (obb, frustum) {
        for (let i = 0; i < frustum.planes.length; i++) {
          if (obbPlane(obb, frustum.planes[i]) === -1) {
            return 0;
          }
        }

        return 1;
      };

      const obbFrustumAccurate = function () {
        const tmp = new Array(8);
        let dist = 0;
        let out1 = 0;
        let out2 = 0;

        for (let i = 0; i < tmp.length; i++) {
          tmp[i] = new Vec3(0, 0, 0);
        }

        const dot = function (n, x, y, z) {
          return n.x * x + n.y * y + n.z * z;
        };

        return function (obb, frustum) {
          let result = 0;
          let intersects = false;

          for (let i = 0; i < frustum.planes.length; i++) {
            result = obbPlane(obb, frustum.planes[i]);
            if (result === -1) return 0;else if (result === 1) {
                intersects = true;
              }
          }

          if (!intersects) {
            return 1;
          }

          for (let i = 0; i < frustum.vertices.length; i++) {
            Vec3.subtract(tmp[i], frustum.vertices[i], obb.center);
          }

          out1 = 0, out2 = 0;

          for (let i = 0; i < frustum.vertices.length; i++) {
            dist = dot(tmp[i], obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);

            if (dist > obb.halfExtents.x) {
              out1++;
            } else if (dist < -obb.halfExtents.x) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          out1 = 0;
          out2 = 0;

          for (let i = 0; i < frustum.vertices.length; i++) {
            dist = dot(tmp[i], obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);

            if (dist > obb.halfExtents.y) {
              out1++;
            } else if (dist < -obb.halfExtents.y) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          out1 = 0;
          out2 = 0;

          for (let i = 0; i < frustum.vertices.length; i++) {
            dist = dot(tmp[i], obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);

            if (dist > obb.halfExtents.z) {
              out1++;
            } else if (dist < -obb.halfExtents.z) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          return 1;
        };
      }();

      const obbWithOBB = function () {
        const test = new Array(15);

        for (let i = 0; i < 15; i++) {
          test[i] = new Vec3(0, 0, 0);
        }

        const vertices = new Array(8);
        const vertices2 = new Array(8);

        for (let i = 0; i < 8; i++) {
          vertices[i] = new Vec3(0, 0, 0);
          vertices2[i] = new Vec3(0, 0, 0);
        }

        return function (obb1, obb2) {
          Vec3.set(test[0], obb1.orientation.m00, obb1.orientation.m01, obb1.orientation.m02);
          Vec3.set(test[1], obb1.orientation.m03, obb1.orientation.m04, obb1.orientation.m05);
          Vec3.set(test[2], obb1.orientation.m06, obb1.orientation.m07, obb1.orientation.m08);
          Vec3.set(test[3], obb2.orientation.m00, obb2.orientation.m01, obb2.orientation.m02);
          Vec3.set(test[4], obb2.orientation.m03, obb2.orientation.m04, obb2.orientation.m05);
          Vec3.set(test[5], obb2.orientation.m06, obb2.orientation.m07, obb2.orientation.m08);

          for (let i = 0; i < 3; ++i) {
            Vec3.cross(test[6 + i * 3 + 0], test[i], test[3]);
            Vec3.cross(test[6 + i * 3 + 1], test[i], test[4]);
            Vec3.cross(test[6 + i * 3 + 2], test[i], test[5]);
          }

          getOBBVertices(obb1.center, obb1.halfExtents, test[0], test[1], test[2], vertices);
          getOBBVertices(obb2.center, obb2.halfExtents, test[3], test[4], test[5], vertices2);

          for (let i = 0; i < 15; ++i) {
            const a = getInterval(vertices, test[i]);
            const b = getInterval(vertices2, test[i]);

            if (b[0] > a[1] || a[0] > b[1]) {
              return 0;
            }
          }

          return 1;
        };
      }();

      const obbCapsule = function () {
        const sphere_0 = new Sphere();
        const v3_0 = new Vec3();
        const v3_1 = new Vec3();
        const v3_2 = new Vec3();
        const v3_verts8 = new Array(8);

        for (let i = 0; i < 8; i++) {
          v3_verts8[i] = new Vec3();
        }

        const v3_axis8 = new Array(8);

        for (let i = 0; i < 8; i++) {
          v3_axis8[i] = new Vec3();
        }

        return function (obb, capsule) {
          const h = Vec3.squaredDistance(capsule.ellipseCenter0, capsule.ellipseCenter1);

          if (h === 0) {
            sphere_0.radius = capsule.radius;
            sphere_0.center.set(capsule.ellipseCenter0);
            return intersect.sphereOBB(sphere_0, obb);
          } else {
            v3_0.x = obb.orientation.m00;
            v3_0.y = obb.orientation.m01;
            v3_0.z = obb.orientation.m02;
            v3_1.x = obb.orientation.m03;
            v3_1.y = obb.orientation.m04;
            v3_1.z = obb.orientation.m05;
            v3_2.x = obb.orientation.m06;
            v3_2.y = obb.orientation.m07;
            v3_2.z = obb.orientation.m08;
            getOBBVertices(obb.center, obb.halfExtents, v3_0, v3_1, v3_2, v3_verts8);
            const axes = v3_axis8;
            const a0 = Vec3.copy(axes[0], v3_0);
            const a1 = Vec3.copy(axes[1], v3_1);
            const a2 = Vec3.copy(axes[2], v3_2);
            const C = Vec3.subtract(axes[3], capsule.center, obb.center);
            C.normalize();
            const B = Vec3.subtract(axes[4], capsule.ellipseCenter0, capsule.ellipseCenter1);
            B.normalize();
            Vec3.cross(axes[5], a0, B);
            Vec3.cross(axes[6], a1, B);
            Vec3.cross(axes[7], a2, B);

            for (let i = 0; i < 8; ++i) {
              const a = getInterval(v3_verts8, axes[i]);
              const d0 = Vec3.dot(axes[i], capsule.ellipseCenter0);
              const d1 = Vec3.dot(axes[i], capsule.ellipseCenter1);
              const max_d = Math.max(d0, d1);
              const min_d = Math.min(d0, d1);
              const d_min = min_d - capsule.radius;
              const d_max = max_d + capsule.radius;

              if (d_min > a[1] || a[0] > d_max) {
                return 0;
              }
            }

            return 1;
          }
        };
      }();

      const spherePlane = function (sphere, plane) {
        const dot = Vec3.dot(plane.n, sphere.center);
        const r = sphere.radius * plane.n.length();

        if (dot + r < plane.d) {
          return -1;
        } else if (dot - r > plane.d) {
          return 0;
        }

        return 1;
      };

      const sphereFrustum = function (sphere, frustum) {
        for (let i = 0; i < frustum.planes.length; i++) {
          if (spherePlane(sphere, frustum.planes[i]) === -1) {
            return 0;
          }
        }

        return 1;
      };

      const sphereFrustumAccurate = function () {
        const pt = new Vec3(0, 0, 0);
        const map = [1, -1, 1, -1, 1, -1];
        return function (sphere, frustum) {
          for (let i = 0; i < 6; i++) {
            const plane = frustum.planes[i];
            const r = sphere.radius;
            const c = sphere.center;
            const n = plane.n;
            const d = plane.d;
            const dot = Vec3.dot(n, c);
            if (dot + r < d) return 0;else if (dot - r > d) {
                continue;
              }
            Vec3.add(pt, c, Vec3.multiplyScalar(pt, n, r));

            for (let j = 0; j < 6; j++) {
              if (j === i || j === i + map[i]) {
                continue;
              }

              const test = frustum.planes[j];

              if (Vec3.dot(test.n, pt) < test.d) {
                return 0;
              }
            }
          }

          return 1;
        };
      }();

      const sphereWithSphere = function (sphere0, sphere1) {
        const r = sphere0.radius + sphere1.radius;
        return Vec3.squaredDistance(sphere0.center, sphere1.center) < r * r;
      };

      const sphereAABB = function () {
        const pt = new Vec3();
        return function (sphere, aabb) {
          pt_point_aabb(pt, sphere.center, aabb);
          return Vec3.squaredDistance(sphere.center, pt) < sphere.radius * sphere.radius;
        };
      }();

      const sphereOBB = function () {
        const pt = new Vec3();
        return function (sphere, obb) {
          pt_point_obb(pt, sphere.center, obb);
          return Vec3.squaredDistance(sphere.center, pt) < sphere.radius * sphere.radius;
        };
      }();

      const sphereCapsule = function () {
        const v3_0 = new Vec3();
        const v3_1 = new Vec3();
        return function (sphere, capsule) {
          const r = sphere.radius + capsule.radius;
          const squaredR = r * r;
          const h = Vec3.squaredDistance(capsule.ellipseCenter0, capsule.ellipseCenter1);

          if (h === 0) {
            return Vec3.squaredDistance(sphere.center, capsule.center) < squaredR;
          } else {
            Vec3.subtract(v3_0, sphere.center, capsule.ellipseCenter0);
            Vec3.subtract(v3_1, capsule.ellipseCenter1, capsule.ellipseCenter0);
            const t = Vec3.dot(v3_0, v3_1) / h;

            if (t < 0) {
              return Vec3.squaredDistance(sphere.center, capsule.ellipseCenter0) < squaredR;
            } else if (t > 1) {
              return Vec3.squaredDistance(sphere.center, capsule.ellipseCenter1) < squaredR;
            } else {
              Vec3.scaleAndAdd(v3_0, capsule.ellipseCenter0, v3_1, t);
              return Vec3.squaredDistance(sphere.center, v3_0) < squaredR;
            }
          }
        };
      }();

      const capsuleWithCapsule = function () {
        const v3_0 = new Vec3();
        const v3_1 = new Vec3();
        const v3_2 = new Vec3();
        const v3_3 = new Vec3();
        const v3_4 = new Vec3();
        const v3_5 = new Vec3();
        return function capsuleWithCapsule(capsuleA, capsuleB) {
          const u = Vec3.subtract(v3_0, capsuleA.ellipseCenter1, capsuleA.ellipseCenter0);
          const v = Vec3.subtract(v3_1, capsuleB.ellipseCenter1, capsuleB.ellipseCenter0);
          const w = Vec3.subtract(v3_2, capsuleA.ellipseCenter0, capsuleB.ellipseCenter0);
          const a = Vec3.dot(u, u);
          const b = Vec3.dot(u, v);
          const c = Vec3.dot(v, v);
          const d = Vec3.dot(u, w);
          const e = Vec3.dot(v, w);
          const D = a * c - b * b;
          let sN;
          let sD = D;
          let tN;
          let tD = D;

          if (D < EPSILON) {
            sN = 0.0;
            sD = 1.0;
            tN = e;
            tD = c;
          } else {
            sN = b * e - c * d;
            tN = a * e - b * d;

            if (sN < 0.0) {
              sN = 0.0;
              tN = e;
              tD = c;
            } else if (sN > sD) {
              sN = sD;
              tN = e + b;
              tD = c;
            }
          }

          if (tN < 0.0) {
            tN = 0.0;

            if (-d < 0.0) {
              sN = 0.0;
            } else if (-d > a) {
              sN = sD;
            } else {
              sN = -d;
              sD = a;
            }
          } else if (tN > tD) {
            tN = tD;

            if (-d + b < 0.0) {
              sN = 0;
            } else if (-d + b > a) {
              sN = sD;
            } else {
              sN = -d + b;
              sD = a;
            }
          }

          const sc = Math.abs(sN) < EPSILON ? 0.0 : sN / sD;
          const tc = Math.abs(tN) < EPSILON ? 0.0 : tN / tD;
          const dP = v3_3;
          dP.set(w);
          dP.add(Vec3.multiplyScalar(v3_4, u, sc));
          dP.subtract(Vec3.multiplyScalar(v3_5, v, tc));
          const radius = capsuleA.radius + capsuleB.radius;
          return dP.lengthSqr() < radius * radius;
        };
      }();

      const intersect = exports('d4', {
        raySphere,
        rayAABB,
        rayOBB,
        rayPlane,
        rayTriangle,
        rayCapsule,
        raySubMesh: null,
        rayMesh: null,
        rayModel: null,
        lineSphere,
        lineAABB,
        lineOBB,
        linePlane,
        lineTriangle,
        sphereWithSphere,
        sphereAABB,
        sphereOBB,
        spherePlane,
        sphereFrustum,
        sphereFrustumAccurate,
        sphereCapsule,
        aabbWithAABB,
        aabbWithOBB,
        aabbPlane,
        aabbFrustum,
        aabbFrustumAccurate,
        obbWithOBB,
        obbPlane,
        obbFrustum,
        obbFrustumAccurate,
        obbPoint,
        obbCapsule,
        aabbFrustumCompletelyInside,
        capsuleWithCapsule,

        resolve(g1, g2, outPt = null) {
          const type1 = g1._type;
          const type2 = g2._type;
          const resolver = this[type1 | type2];
          return type1 < type2 ? resolver(g1, g2, outPt) : resolver(g2, g1, outPt);
        }

      });
      intersect[enums.SHAPE_RAY | enums.SHAPE_SPHERE] = raySphere;
      intersect[enums.SHAPE_RAY | enums.SHAPE_AABB] = rayAABB;
      intersect[enums.SHAPE_RAY | enums.SHAPE_OBB] = rayOBB;
      intersect[enums.SHAPE_RAY | enums.SHAPE_PLANE] = rayPlane;
      intersect[enums.SHAPE_RAY | enums.SHAPE_TRIANGLE] = rayTriangle;
      intersect[enums.SHAPE_RAY | enums.SHAPE_CAPSULE] = rayCapsule;
      intersect[enums.SHAPE_LINE | enums.SHAPE_SPHERE] = lineSphere;
      intersect[enums.SHAPE_LINE | enums.SHAPE_AABB] = lineAABB;
      intersect[enums.SHAPE_LINE | enums.SHAPE_OBB] = lineOBB;
      intersect[enums.SHAPE_LINE | enums.SHAPE_PLANE] = linePlane;
      intersect[enums.SHAPE_LINE | enums.SHAPE_TRIANGLE] = lineTriangle;
      intersect[enums.SHAPE_SPHERE] = sphereWithSphere;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_AABB] = sphereAABB;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_OBB] = sphereOBB;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_PLANE] = spherePlane;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_FRUSTUM] = sphereFrustum;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_FRUSTUM_ACCURATE] = sphereFrustumAccurate;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_CAPSULE] = sphereCapsule;
      intersect[enums.SHAPE_AABB] = aabbWithAABB;
      intersect[enums.SHAPE_AABB | enums.SHAPE_OBB] = aabbWithOBB;
      intersect[enums.SHAPE_AABB | enums.SHAPE_PLANE] = aabbPlane;
      intersect[enums.SHAPE_AABB | enums.SHAPE_FRUSTUM] = aabbFrustum;
      intersect[enums.SHAPE_AABB | enums.SHAPE_FRUSTUM_ACCURATE] = aabbFrustumAccurate;
      intersect[enums.SHAPE_OBB] = obbWithOBB;
      intersect[enums.SHAPE_OBB | enums.SHAPE_PLANE] = obbPlane;
      intersect[enums.SHAPE_OBB | enums.SHAPE_FRUSTUM] = obbFrustum;
      intersect[enums.SHAPE_OBB | enums.SHAPE_FRUSTUM_ACCURATE] = obbFrustumAccurate;
      intersect[enums.SHAPE_OBB | enums.SHAPE_CAPSULE] = obbCapsule;
      intersect[enums.SHAPE_CAPSULE] = capsuleWithCapsule;

      replaceProperty(Line.prototype, 'line', [{
        name: 'mag',
        newName: 'len'
      }, {
        name: 'magnitude',
        newName: 'len'
      }]);
      removeProperty(intersect, 'intersect', [{
        name: 'line_quad'
      }]);

      const v1 = new Vec3(0, 0, 0);
      const v2$1 = new Vec3(0, 0, 0);
      const temp_mat = legacyCC.mat4();
      const temp_vec4 = legacyCC.v4();
      class Plane {
        static create(nx, ny, nz, d) {
          return new Plane(nx, ny, nz, d);
        }

        static clone(p) {
          return new Plane(p.n.x, p.n.y, p.n.z, p.d);
        }

        static copy(out, p) {
          Vec3.copy(out.n, p.n);
          out.d = p.d;
          return out;
        }

        static fromPoints(out, a, b, c) {
          Vec3.subtract(v1, b, a);
          Vec3.subtract(v2$1, c, a);
          Vec3.normalize(out.n, Vec3.cross(out.n, v1, v2$1));
          out.d = Vec3.dot(out.n, a);
          return out;
        }

        static set(out, nx, ny, nz, d) {
          out.n.x = nx;
          out.n.y = ny;
          out.n.z = nz;
          out.d = d;
          return out;
        }

        static fromNormalAndPoint(out, normal, point) {
          Vec3.copy(out.n, normal);
          out.d = Vec3.dot(normal, point);
          return out;
        }

        static normalize(out, a) {
          const len = a.n.length();
          Vec3.normalize(out.n, a.n);

          if (len > 0) {
            out.d = a.d / len;
          }

          return out;
        }

        get type() {
          return this._type;
        }

        set x(val) {
          this.n.x = val;
        }

        get x() {
          return this.n.x;
        }

        set y(val) {
          this.n.y = val;
        }

        get y() {
          return this.n.y;
        }

        set z(val) {
          this.n.z = val;
        }

        get z() {
          return this.n.z;
        }

        set w(val) {
          this.d = val;
        }

        get w() {
          return this.d;
        }

        constructor(nx = 0, ny = 1, nz = 0, d = 0) {
          this.n = void 0;
          this._type = enums.SHAPE_PLANE;
          this.n = new Vec3(nx, ny, nz);
          this.d = d;
        }

        transform(mat) {
          Mat4.invert(temp_mat, mat);
          Mat4.transpose(temp_mat, temp_mat);
          Vec4.set(temp_vec4, this.n.x, this.n.y, this.n.z, this.d);
          Vec4.transformMat4(temp_vec4, temp_vec4, temp_mat);
          Vec3.set(this.n, temp_vec4.x, temp_vec4.y, temp_vec4.z);
          this.d = temp_vec4.w;
        }

      }

      class Triangle {
        static create(ax = 1, ay = 0, az = 0, bx = 0, by = 0, bz = 0, cx = 0, cy = 0, cz = 1) {
          return new Triangle(ax, ay, az, bx, by, bz, cx, cy, cz);
        }

        static clone(t) {
          return new Triangle(t.a.x, t.a.y, t.a.z, t.b.x, t.b.y, t.b.z, t.c.x, t.c.y, t.c.z);
        }

        static copy(out, t) {
          Vec3.copy(out.a, t.a);
          Vec3.copy(out.b, t.b);
          Vec3.copy(out.c, t.c);
          return out;
        }

        static fromPoints(out, a, b, c) {
          Vec3.copy(out.a, a);
          Vec3.copy(out.b, b);
          Vec3.copy(out.c, c);
          return out;
        }

        static set(out, ax, ay, az, bx, by, bz, cx, cy, cz) {
          out.a.x = ax;
          out.a.y = ay;
          out.a.z = az;
          out.b.x = bx;
          out.b.y = by;
          out.b.z = bz;
          out.c.x = cx;
          out.c.y = cy;
          out.c.z = cz;
          return out;
        }

        get type() {
          return this._type;
        }

        constructor(ax = 0, ay = 0, az = 0, bx = 1, by = 0, bz = 0, cx = 0, cy = 1, cz = 0) {
          this.a = void 0;
          this.b = void 0;
          this.c = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_TRIANGLE;
          this.a = new Vec3(ax, ay, az);
          this.b = new Vec3(bx, by, bz);
          this.c = new Vec3(cx, cy, cz);
        }

      } exports('d2', Triangle);

      const _v3_tmp$1 = new Vec3();

      const _v3_tmp2 = new Vec3();

      const _v3_tmp3 = new Vec3();

      const _v3_tmp4 = new Vec3();

      const _m3_tmp = new Mat3();

      const transform_extent_m4 = (out, extent, m4) => {
        _m3_tmp.m00 = Math.abs(m4.m00);
        _m3_tmp.m01 = Math.abs(m4.m01);
        _m3_tmp.m02 = Math.abs(m4.m02);
        _m3_tmp.m03 = Math.abs(m4.m04);
        _m3_tmp.m04 = Math.abs(m4.m05);
        _m3_tmp.m05 = Math.abs(m4.m06);
        _m3_tmp.m06 = Math.abs(m4.m08);
        _m3_tmp.m07 = Math.abs(m4.m09);
        _m3_tmp.m08 = Math.abs(m4.m10);
        Vec3.transformMat3(out, extent, _m3_tmp);
      };

      class AABB {
        static create(px, py, pz, hw, hh, hl) {
          return new AABB(px, py, pz, hw, hh, hl);
        }

        static clone(a) {
          return new AABB(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z);
        }

        static copy(out, a) {
          Vec3.copy(out.center, a.center);
          Vec3.copy(out.halfExtents, a.halfExtents);
          return out;
        }

        static fromPoints(out, minPos, maxPos) {
          Vec3.add(_v3_tmp$1, maxPos, minPos);
          Vec3.subtract(_v3_tmp2, maxPos, minPos);
          Vec3.multiplyScalar(out.center, _v3_tmp$1, 0.5);
          Vec3.multiplyScalar(out.halfExtents, _v3_tmp2, 0.5);
          return out;
        }

        static set(out, px, py, pz, hw, hh, hl) {
          out.center.set(px, py, pz);
          out.halfExtents.set(hw, hh, hl);
          return out;
        }

        static merge(out, a, b) {
          Vec3.subtract(_v3_tmp$1, a.center, a.halfExtents);
          Vec3.subtract(_v3_tmp2, b.center, b.halfExtents);
          Vec3.add(_v3_tmp3, a.center, a.halfExtents);
          Vec3.add(_v3_tmp4, b.center, b.halfExtents);
          Vec3.max(_v3_tmp4, _v3_tmp3, _v3_tmp4);
          Vec3.min(_v3_tmp3, _v3_tmp$1, _v3_tmp2);
          return AABB.fromPoints(out, _v3_tmp3, _v3_tmp4);
        }

        static toBoundingSphere(out, a) {
          out.center.set(a.center);
          out.radius = a.halfExtents.length();
          return out;
        }

        static transform(out, a, matrix) {
          Vec3.transformMat4(out.center, a.center, matrix);
          transform_extent_m4(out.halfExtents, a.halfExtents, matrix);
          return out;
        }

        get type() {
          return this._type;
        }

        constructor(px = 0, py = 0, pz = 0, hw = 1, hh = 1, hl = 1) {
          this.center = void 0;
          this.halfExtents = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_AABB;
          this.center = new Vec3(px, py, pz);
          this.halfExtents = new Vec3(hw, hh, hl);
        }

        getBoundary(minPos, maxPos) {
          Vec3.subtract(minPos, this.center, this.halfExtents);
          Vec3.add(maxPos, this.center, this.halfExtents);
        }

        transform(m, pos, rot, scale, out) {
          Vec3.transformMat4(out.center, this.center, m);
          transform_extent_m4(out.halfExtents, this.halfExtents, m);
        }

        clone() {
          return AABB.clone(this);
        }

        copy(a) {
          return AABB.copy(this, a);
        }

        mergePoint(point) {
          this.getBoundary(_v3_tmp$1, _v3_tmp2);

          if (point.x < _v3_tmp$1.x) {
            _v3_tmp$1.x = point.x;
          }

          if (point.y < _v3_tmp$1.y) {
            _v3_tmp$1.y = point.y;
          }

          if (point.z < _v3_tmp$1.z) {
            _v3_tmp$1.z = point.z;
          }

          if (point.x > _v3_tmp2.x) {
            _v3_tmp2.x = point.x;
          }

          if (point.y > _v3_tmp2.y) {
            _v3_tmp2.y = point.y;
          }

          if (point.z > _v3_tmp2.z) {
            _v3_tmp2.z = point.z;
          }

          Vec3.add(_v3_tmp3, _v3_tmp$1, _v3_tmp2);
          this.center.set(Vec3.multiplyScalar(_v3_tmp3, _v3_tmp3, 0.5));
          this.halfExtents.set(_v3_tmp2.x - _v3_tmp3.x, _v3_tmp2.y - _v3_tmp3.y, _v3_tmp2.z - _v3_tmp3.z);
        }

        mergePoints(points) {
          if (points.length < 1) {
            return;
          }

          for (let i = 0; i < points.length; i++) {
            this.mergePoint(points[i]);
          }
        }

        mergeFrustum(frustum) {
          this.mergePoints(frustum.vertices);
        }

      } exports('cC', AABB);

      class Capsule {
        get type() {
          return this._type;
        }

        constructor(radius = 0.5, halfHeight = 0.5, axis = 1) {
          this._type = void 0;
          this.radius = void 0;
          this.halfHeight = void 0;
          this.axis = void 0;
          this.center = void 0;
          this.rotation = void 0;
          this.ellipseCenter0 = void 0;
          this.ellipseCenter1 = void 0;
          this._type = enums.SHAPE_CAPSULE;
          this.radius = radius;
          this.halfHeight = halfHeight;
          this.axis = axis;
          this.center = new Vec3();
          this.rotation = new Quat();
          this.ellipseCenter0 = new Vec3(0, halfHeight, 0);
          this.ellipseCenter1 = new Vec3(0, -halfHeight, 0);
          this.updateCache();
        }

        transform(m, pos, rot, scale, out) {
          const ws = scale;
          const s = absMaxComponent(ws);
          out.radius = this.radius * Math.abs(s);
          const halfTotalWorldHeight = (this.halfHeight + this.radius) * Math.abs(ws.y);
          let halfWorldHeight = halfTotalWorldHeight - out.radius;
          if (halfWorldHeight < 0) halfWorldHeight = 0;
          out.halfHeight = halfWorldHeight;
          Vec3.transformMat4(out.center, this.center, m);
          Quat.multiply(out.rotation, this.rotation, rot);
          out.updateCache();
        }

        updateCache() {
          this.updateLocalCenter();
          Vec3.transformQuat(this.ellipseCenter0, this.ellipseCenter0, this.rotation);
          Vec3.transformQuat(this.ellipseCenter1, this.ellipseCenter1, this.rotation);
          this.ellipseCenter0.add(this.center);
          this.ellipseCenter1.add(this.center);
        }

        updateLocalCenter() {
          const halfHeight = this.halfHeight;
          const axis = this.axis;

          switch (axis) {
            case 0:
              this.ellipseCenter0.set(halfHeight, 0, 0);
              this.ellipseCenter1.set(-halfHeight, 0, 0);
              break;

            case 1:
              this.ellipseCenter0.set(0, halfHeight, 0);
              this.ellipseCenter1.set(0, -halfHeight, 0);
              break;

            case 2:
              this.ellipseCenter0.set(0, 0, halfHeight);
              this.ellipseCenter1.set(0, 0, -halfHeight);
              break;
          }
        }

      }

      const _v = new Array(8);

      _v[0] = new Vec3(1, 1, 1);
      _v[1] = new Vec3(-1, 1, 1);
      _v[2] = new Vec3(-1, -1, 1);
      _v[3] = new Vec3(1, -1, 1);
      _v[4] = new Vec3(1, 1, -1);
      _v[5] = new Vec3(-1, 1, -1);
      _v[6] = new Vec3(-1, -1, -1);
      _v[7] = new Vec3(1, -1, -1);

      const _nearTemp = new Vec3();

      const _farTemp = new Vec3();

      const _temp_v3 = new Vec3();

      class Frustum {
        static createOrtho(out, width, height, near, far, transform) {
          const halfWidth = width / 2;
          const halfHeight = height / 2;
          Vec3.set(_temp_v3, halfWidth, halfHeight, -near);
          Vec3.transformMat4(out.vertices[0], _temp_v3, transform);
          Vec3.set(_temp_v3, -halfWidth, halfHeight, -near);
          Vec3.transformMat4(out.vertices[1], _temp_v3, transform);
          Vec3.set(_temp_v3, -halfWidth, -halfHeight, -near);
          Vec3.transformMat4(out.vertices[2], _temp_v3, transform);
          Vec3.set(_temp_v3, halfWidth, -halfHeight, -near);
          Vec3.transformMat4(out.vertices[3], _temp_v3, transform);
          Vec3.set(_temp_v3, halfWidth, halfHeight, -far);
          Vec3.transformMat4(out.vertices[4], _temp_v3, transform);
          Vec3.set(_temp_v3, -halfWidth, halfHeight, -far);
          Vec3.transformMat4(out.vertices[5], _temp_v3, transform);
          Vec3.set(_temp_v3, -halfWidth, -halfHeight, -far);
          Vec3.transformMat4(out.vertices[6], _temp_v3, transform);
          Vec3.set(_temp_v3, halfWidth, -halfHeight, -far);
          Vec3.transformMat4(out.vertices[7], _temp_v3, transform);
          Plane.fromPoints(out.planes[0], out.vertices[1], out.vertices[6], out.vertices[5]);
          Plane.fromPoints(out.planes[1], out.vertices[3], out.vertices[4], out.vertices[7]);
          Plane.fromPoints(out.planes[2], out.vertices[6], out.vertices[3], out.vertices[7]);
          Plane.fromPoints(out.planes[3], out.vertices[0], out.vertices[5], out.vertices[4]);
          Plane.fromPoints(out.planes[4], out.vertices[2], out.vertices[0], out.vertices[3]);
          Plane.fromPoints(out.planes[5], out.vertices[7], out.vertices[5], out.vertices[6]);
        }

        static createFromAABB(out, aabb) {
          const vec3_min = new Vec3();
          const vec3_max = new Vec3();
          Vec3.subtract(vec3_min, aabb.center, aabb.halfExtents);
          Vec3.add(vec3_max, aabb.center, aabb.halfExtents);
          out.vertices[0].set(vec3_min.x, vec3_max.y, vec3_min.z);
          out.vertices[1].set(vec3_max.x, vec3_max.y, vec3_min.z);
          out.vertices[2].set(vec3_max.x, vec3_min.y, vec3_min.z);
          out.vertices[3].set(vec3_min.x, vec3_min.y, vec3_min.z);
          out.vertices[4].set(vec3_min.x, vec3_max.y, vec3_max.z);
          out.vertices[5].set(vec3_max.x, vec3_max.y, vec3_max.z);
          out.vertices[6].set(vec3_max.x, vec3_min.y, vec3_max.z);
          out.vertices[7].set(vec3_min.x, vec3_min.y, vec3_max.z);

          if (out._type !== enums.SHAPE_FRUSTUM_ACCURATE) {
            return out;
          }

          out.updatePlanes();
          return out;
        }

        split(start, end, aspect, fov, m) {
          const h = Math.tan(fov * 0.5);
          const w = h * aspect;

          _nearTemp.set(start * w, start * h, start);

          _farTemp.set(end * w, end * h, end);

          const vertexes = this.vertices;

          _temp_v3.set(_nearTemp.x, _nearTemp.y, _nearTemp.z);

          Vec3.transformMat4(vertexes[0], _temp_v3, m);

          _temp_v3.set(-_nearTemp.x, _nearTemp.y, _nearTemp.z);

          Vec3.transformMat4(vertexes[1], _temp_v3, m);

          _temp_v3.set(-_nearTemp.x, -_nearTemp.y, _nearTemp.z);

          Vec3.transformMat4(vertexes[2], _temp_v3, m);

          _temp_v3.set(_nearTemp.x, -_nearTemp.y, _nearTemp.z);

          Vec3.transformMat4(vertexes[3], _temp_v3, m);

          _temp_v3.set(_farTemp.x, _farTemp.y, _farTemp.z);

          Vec3.transformMat4(vertexes[4], _temp_v3, m);

          _temp_v3.set(-_farTemp.x, _farTemp.y, _farTemp.z);

          Vec3.transformMat4(vertexes[5], _temp_v3, m);

          _temp_v3.set(-_farTemp.x, -_farTemp.y, _farTemp.z);

          Vec3.transformMat4(vertexes[6], _temp_v3, m);

          _temp_v3.set(_farTemp.x, -_farTemp.y, _farTemp.z);

          Vec3.transformMat4(vertexes[7], _temp_v3, m);
          this.updatePlanes();
        }

        static create() {
          return new Frustum();
        }

        static clone(f) {
          return Frustum.copy(new Frustum(), f);
        }

        static copy(out, f) {
          out._type = f.type;

          for (let i = 0; i < 6; ++i) {
            Plane.copy(out.planes[i], f.planes[i]);
          }

          for (let i = 0; i < 8; ++i) {
            Vec3.copy(out.vertices[i], f.vertices[i]);
          }

          return out;
        }

        set accurate(b) {
          this._type = b ? enums.SHAPE_FRUSTUM_ACCURATE : enums.SHAPE_FRUSTUM;
        }

        get type() {
          return this._type;
        }

        constructor() {
          this.planes = void 0;
          this.vertices = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_FRUSTUM;
          this.planes = new Array(6);

          for (let i = 0; i < 6; ++i) {
            this.planes[i] = Plane.create(0, 0, 0, 0);
          }

          this.vertices = new Array(8);

          for (let i = 0; i < 8; ++i) {
            this.vertices[i] = new Vec3();
          }
        }

        update(m, inv) {
          Vec3.set(this.planes[0].n, m.m03 + m.m00, m.m07 + m.m04, m.m11 + m.m08);
          this.planes[0].d = -(m.m15 + m.m12);
          Vec3.set(this.planes[1].n, m.m03 - m.m00, m.m07 - m.m04, m.m11 - m.m08);
          this.planes[1].d = -(m.m15 - m.m12);
          Vec3.set(this.planes[2].n, m.m03 + m.m01, m.m07 + m.m05, m.m11 + m.m09);
          this.planes[2].d = -(m.m15 + m.m13);
          Vec3.set(this.planes[3].n, m.m03 - m.m01, m.m07 - m.m05, m.m11 - m.m09);
          this.planes[3].d = -(m.m15 - m.m13);
          Vec3.set(this.planes[4].n, m.m03 + m.m02, m.m07 + m.m06, m.m11 + m.m10);
          this.planes[4].d = -(m.m15 + m.m14);
          Vec3.set(this.planes[5].n, m.m03 - m.m02, m.m07 - m.m06, m.m11 - m.m10);
          this.planes[5].d = -(m.m15 - m.m14);

          if (this._type !== enums.SHAPE_FRUSTUM_ACCURATE) {
            return;
          }

          for (let i = 0; i < 6; i++) {
            const pl = this.planes[i];
            const invDist = 1 / pl.n.length();
            Vec3.multiplyScalar(pl.n, pl.n, invDist);
            pl.d *= invDist;
          }

          for (let i = 0; i < 8; i++) {
            Vec3.transformMat4(this.vertices[i], _v[i], inv);
          }
        }

        transform(mat) {
          if (this._type !== enums.SHAPE_FRUSTUM_ACCURATE) {
            return;
          }

          for (let i = 0; i < 8; i++) {
            Vec3.transformMat4(this.vertices[i], this.vertices[i], mat);
          }

          this.updatePlanes();
        }

        zero() {
          for (let i = 0; i < 8; i++) {
            this.vertices[i].set(0.0, 0.0, 0.0);
          }

          this.updatePlanes();
        }

        updatePlanes() {
          Plane.fromPoints(this.planes[0], this.vertices[1], this.vertices[6], this.vertices[5]);
          Plane.fromPoints(this.planes[1], this.vertices[3], this.vertices[4], this.vertices[7]);
          Plane.fromPoints(this.planes[2], this.vertices[6], this.vertices[3], this.vertices[7]);
          Plane.fromPoints(this.planes[3], this.vertices[0], this.vertices[5], this.vertices[4]);
          Plane.fromPoints(this.planes[4], this.vertices[2], this.vertices[0], this.vertices[3]);
          Plane.fromPoints(this.planes[5], this.vertices[7], this.vertices[5], this.vertices[6]);
        }

      }

      function cacheProperty(ctor, property) {
        const propDesc = Object.getOwnPropertyDescriptor(ctor.prototype, property);
        const propCacheKey = `_$cache_${property}`;
        const propRealKey = `_$_${property}`;
        Object.defineProperty(ctor.prototype, propRealKey, propDesc);
        Object.defineProperty(ctor.prototype, property, {
          get() {
            if (this[propCacheKey] === undefined) {
              this[propCacheKey] = this[propRealKey];
            }

            return this[propCacheKey];
          },

          set(value) {
            this[propRealKey] = value;
          },

          configurable: true,
          enumerable: true
        });
      }

      function cacheUnderlyingData(ctor) {
        ctor.prototype._arraybuffer = function () {
          if (!this.__data) {
            this.__data = this.underlyingData();
          }

          return this.__data;
        };
      }

      const defineAttrFloat = (kls, attr) => {
        const desc = kls.__nativeFields__[attr];
        const cacheKey = `_$_${attr}`;
        console.assert(desc.fieldSize === 4, `field ${attr} size ${desc.fieldSize}`);
        Object.defineProperty(kls.prototype, desc.fieldName, {
          configurable: true,
          enumerable: true,

          get() {
            if (this[cacheKey] === undefined) {
              this[cacheKey] = new Float32Array(this._arraybuffer(), desc.fieldOffset, 1);
            }

            return this[cacheKey][0];
          },

          set(v) {
            if (this[cacheKey] === undefined) {
              this[cacheKey] = new Float32Array(this._arraybuffer(), desc.fieldOffset, 1);
            }

            this[cacheKey][0] = v;
          }

        });
      };

      const defineAttrInt = (kls, attr) => {
        const desc = kls.__nativeFields__[attr];

        if (!desc) {
          console.error(`attr ${attr} not defined in class ${kls.toString()}`);
        }

        const cacheKey = `_$_${attr}`;
        console.assert(desc.fieldSize === 4, `field ${attr} size ${desc.fieldSize}`);
        Object.defineProperty(kls.prototype, desc.fieldName, {
          configurable: true,
          enumerable: true,

          get() {
            if (this[cacheKey] === undefined) {
              this[cacheKey] = new Int32Array(this._arraybuffer(), desc.fieldOffset, 1);
            }

            return this[cacheKey][0];
          },

          set(v) {
            if (this[cacheKey] === undefined) {
              this[cacheKey] = new Int32Array(this._arraybuffer(), desc.fieldOffset, 1);
            }

            this[cacheKey][0] = v;
          }

        });
      };

      {
        cacheProperty(ns.Line, 's');
        cacheProperty(ns.Line, 'e');
        Object.setPrototypeOf(ns.Line.prototype, Line.prototype);
        cacheUnderlyingData(ns.Plane);
        cacheProperty(ns.Plane, 'n');
        defineAttrFloat(ns.Plane, 'd');
        Object.setPrototypeOf(ns.Plane.prototype, Plane.prototype);
        cacheUnderlyingData(ns.Ray);
        cacheProperty(ns.Ray, 'o');
        cacheProperty(ns.Ray, 'd');
        Object.setPrototypeOf(ns.Ray.prototype, Ray.prototype);
        cacheUnderlyingData(ns.Triangle);
        cacheProperty(ns.Triangle, 'a');
        cacheProperty(ns.Triangle, 'b');
        cacheProperty(ns.Triangle, 'c');
        Object.setPrototypeOf(ns.Triangle.prototype, Triangle.prototype);
        cacheUnderlyingData(ns.Sphere);
        cacheProperty(ns.Sphere, '_center');
        defineAttrFloat(ns.Sphere, '_radius');
        Object.setPrototypeOf(ns.Sphere.prototype, Sphere.prototype);
        cacheUnderlyingData(ns.AABB);
        cacheProperty(ns.AABB, 'center');
        cacheProperty(ns.AABB, 'halfExtents');
        Object.setPrototypeOf(ns.AABB.prototype, AABB.prototype);
        cacheUnderlyingData(ns.Capsule);
        defineAttrFloat(ns.Capsule, 'radius');
        defineAttrFloat(ns.Capsule, 'halfHeight');
        defineAttrInt(ns.Capsule, 'axis');
        cacheProperty(ns.Capsule, 'center');
        cacheProperty(ns.Capsule, 'rotation');
        cacheProperty(ns.Capsule, 'ellipseCenter0');
        cacheProperty(ns.Capsule, 'ellipseCenter1');
        Object.setPrototypeOf(ns.Capsule.prototype, Capsule.prototype);
        cacheProperty(ns.Frustum, 'vertices');
        cacheProperty(ns.Frustum, 'planes');
        Object.setPrototypeOf(ns.Frustum.prototype, Frustum.prototype);
        const descOf_type = Object.getOwnPropertyDescriptor(ns.ShapeBase.prototype, '_type');

        for (const kls of [ns.Line, ns.Plane, ns.Ray, ns.Triangle, ns.Sphere, ns.AABB, ns.Capsule, ns.Frustum]) {
          Object.defineProperty(kls.prototype, '_type', descOf_type);
        }
      }

      const _v3_tmp$2 = new Vec3();

      const _v3_tmp2$1 = new Vec3();

      const _m3_tmp$1 = new Mat3();

      const transform_extent_m3 = (out, extent, m3) => {
        _m3_tmp$1.m00 = Math.abs(m3.m00);
        _m3_tmp$1.m01 = Math.abs(m3.m01);
        _m3_tmp$1.m02 = Math.abs(m3.m02);
        _m3_tmp$1.m03 = Math.abs(m3.m03);
        _m3_tmp$1.m04 = Math.abs(m3.m04);
        _m3_tmp$1.m05 = Math.abs(m3.m05);
        _m3_tmp$1.m06 = Math.abs(m3.m06);
        _m3_tmp$1.m07 = Math.abs(m3.m07);
        _m3_tmp$1.m08 = Math.abs(m3.m08);
        Vec3.transformMat3(out, extent, _m3_tmp$1);
      };

      class OBB {
        static create(cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3) {
          return new OBB(cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
        }

        static clone(a) {
          return new OBB(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z, a.orientation.m00, a.orientation.m01, a.orientation.m02, a.orientation.m03, a.orientation.m04, a.orientation.m05, a.orientation.m06, a.orientation.m07, a.orientation.m08);
        }

        static copy(out, a) {
          Vec3.copy(out.center, a.center);
          Vec3.copy(out.halfExtents, a.halfExtents);
          Mat3.copy(out.orientation, a.orientation);
          return out;
        }

        static fromPoints(out, minPos, maxPos) {
          Vec3.multiplyScalar(out.center, Vec3.add(_v3_tmp$2, minPos, maxPos), 0.5);
          Vec3.multiplyScalar(out.halfExtents, Vec3.subtract(_v3_tmp2$1, maxPos, minPos), 0.5);
          Mat3.identity(out.orientation);
          return out;
        }

        static set(out, cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3) {
          Vec3.set(out.center, cx, cy, cz);
          Vec3.set(out.halfExtents, hw, hh, hl);
          Mat3.set(out.orientation, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
          return out;
        }

        get type() {
          return this._type;
        }

        constructor(cx = 0, cy = 0, cz = 0, hw = 1, hh = 1, hl = 1, ox_1 = 1, ox_2 = 0, ox_3 = 0, oy_1 = 0, oy_2 = 1, oy_3 = 0, oz_1 = 0, oz_2 = 0, oz_3 = 1) {
          this.center = void 0;
          this.halfExtents = void 0;
          this.orientation = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_OBB;
          this.center = new Vec3(cx, cy, cz);
          this.halfExtents = new Vec3(hw, hh, hl);
          this.orientation = new Mat3(ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
        }

        getBoundary(minPos, maxPos) {
          transform_extent_m3(_v3_tmp$2, this.halfExtents, this.orientation);
          Vec3.subtract(minPos, this.center, _v3_tmp$2);
          Vec3.add(maxPos, this.center, _v3_tmp$2);
        }

        transform(m, pos, rot, scale, out) {
          Vec3.transformMat4(out.center, this.center, m);
          Mat3.fromQuat(out.orientation, rot);
          Vec3.multiply(out.halfExtents, this.halfExtents, scale);
        }

        translateAndRotate(m, rot, out) {
          Vec3.transformMat4(out.center, this.center, m);
          Mat3.fromQuat(out.orientation, rot);
        }

        setScale(scale, out) {
          Vec3.multiply(out.halfExtents, this.halfExtents, scale);
        }

      }

      function binarySearch(array, value) {
        return binarySearchEpsilon(array, value, 0);
      }
      function binarySearchEpsilon(array, value, EPSILON = 1e-6) {
        let low = 0;
        let high = array.length - 1;
        let middle = high >>> 1;

        for (; low <= high; middle = low + high >>> 1) {
          const test = array[middle];

          if (test > value + EPSILON) {
            high = middle - 1;
          } else if (test < value - EPSILON) {
            low = middle + 1;
          } else {
            return middle;
          }
        }

        return ~low;
      }
      function binarySearchBy(array, value, lessThan) {
        let low = 0;
        let high = array.length - 1;
        let middle = high >>> 1;

        for (; low <= high; middle = low + high >>> 1) {
          const test = array[middle];

          if (lessThan(test, value) < 0) {
            high = middle - 1;
          } else if (lessThan(test, value) > 0) {
            low = middle + 1;
          } else {
            return middle;
          }
        }

        return ~low;
      }

      let _Symbol$iterator;
      _Symbol$iterator = Symbol.iterator;
      class KeyframeCurve {
        constructor() {
          this._times = [];
          this._values = [];
        }

        get keyFramesCount() {
          return this._times.length;
        }

        get rangeMin() {
          return this._times[0];
        }

        get rangeMax() {
          return this._times[this._values.length - 1];
        }

        [_Symbol$iterator]() {
          let index = 0;
          return {
            next: () => {
              if (index >= this._times.length) {
                return {
                  done: true,
                  value: undefined
                };
              } else {
                const value = [this._times[index], this._values[index]];
                ++index;
                return {
                  done: false,
                  value
                };
              }
            }
          };
        }

        keyframes() {
          return this;
        }

        times() {
          return this._times;
        }

        values() {
          return this._values;
        }

        getKeyframeTime(index) {
          return this._times[index];
        }

        getKeyframeValue(index) {
          return this._values[index];
        }

        addKeyFrame(time, keyframeValue) {
          return this._insertNewKeyframe(time, keyframeValue);
        }

        removeKeyframe(index) {
          this._times.splice(index, 1);

          this._values.splice(index, 1);
        }

        indexOfKeyframe(time) {
          return binarySearchEpsilon(this._times, time);
        }

        updateTime(index, time) {
          const value = this._values[index];
          this.removeKeyframe(index);

          this._insertNewKeyframe(time, value);
        }

        assignSorted(times, values) {
          if (values !== undefined) {
            assertIsTrue(Array.isArray(times));
            this.setKeyframes(times.slice(), values.slice());
          } else {
            const keyframes = Array.from(times);
            this.setKeyframes(keyframes.map(([time]) => time), keyframes.map(([, value]) => value));
          }
        }

        clear() {
          this._times.length = 0;
          this._values.length = 0;
        }

        searchKeyframe(time) {
          return binarySearchEpsilon(this._times, time);
        }

        setKeyframes(times, values) {
          assertIsTrue(times.length === values.length);
          assertIsTrue(isSorted(times));
          this._times = times;
          this._values = values;
        }

        _insertNewKeyframe(time, value) {
          const times = this._times;
          const values = this._values;
          const nFrames = times.length;
          const index = binarySearchEpsilon(times, time);

          if (index >= 0) {
            return index;
          }

          const iNext = ~index;

          if (iNext === 0) {
            times.unshift(time);
            values.unshift(value);
          } else if (iNext === nFrames) {
            times.push(time);
            values.push(value);
          } else {
            assertIsTrue(nFrames > 1);
            times.splice(iNext - 1, 0, time);
            values.splice(iNext - 1, 0, value);
          }

          return iNext;
        }

      }
      CCClass.fastDefine('cc.KeyframeCurve', KeyframeCurve, {
        _times: [],
        _values: []
      });

      function isSorted(values) {
        return values.every((value, index, array) => index === 0 || value > array[index - 1] || approx(value, array[index - 1], 1e-6));
      }

      let RealInterpolationMode;

      (function (RealInterpolationMode) {
        RealInterpolationMode[RealInterpolationMode["LINEAR"] = 0] = "LINEAR";
        RealInterpolationMode[RealInterpolationMode["CONSTANT"] = 1] = "CONSTANT";
        RealInterpolationMode[RealInterpolationMode["CUBIC"] = 2] = "CUBIC";
      })(RealInterpolationMode || (RealInterpolationMode = exports('dV', {})));

      let ExtrapolationMode;

      (function (ExtrapolationMode) {
        ExtrapolationMode[ExtrapolationMode["LINEAR"] = 0] = "LINEAR";
        ExtrapolationMode[ExtrapolationMode["CLAMP"] = 1] = "CLAMP";
        ExtrapolationMode[ExtrapolationMode["LOOP"] = 2] = "LOOP";
        ExtrapolationMode[ExtrapolationMode["PING_PONG"] = 3] = "PING_PONG";
      })(ExtrapolationMode || (ExtrapolationMode = exports('fF', {})));

      let TangentWeightMode;

      (function (TangentWeightMode) {
        TangentWeightMode[TangentWeightMode["NONE"] = 0] = "NONE";
        TangentWeightMode[TangentWeightMode["LEFT"] = 1] = "LEFT";
        TangentWeightMode[TangentWeightMode["RIGHT"] = 2] = "RIGHT";
        TangentWeightMode[TangentWeightMode["BOTH"] = 3] = "BOTH";
      })(TangentWeightMode || (TangentWeightMode = exports('dW', {})));

      function solveCubic(coeff0, coeff1, coeff2, coeff3, solutions) {
        const a = coeff2 / coeff3;
        const b = coeff1 / coeff3;
        const c = coeff0 / coeff3;
        const sqrA = a * a;
        const p = 1.0 / 3.0 * (-1.0 / 3 * sqrA + b);
        const q = 1.0 / 2.0 * (2.0 / 27.0 * a * sqrA - 1.0 / 3 * a * b + c);
        const cubicP = p * p * p;
        const d = q * q + cubicP;
        let nSolutions = 0;

        if (isZero(d)) {
          if (isZero(q)) {
            solutions[0] = 0;
            return 1;
          } else {
            const u = Math.cbrt(-q);
            solutions[0] = 2 * u;
            solutions[1] = -u;
            return 2;
          }
        } else if (d < 0) {
          const phi = 1.0 / 3 * Math.acos(-q / Math.sqrt(-cubicP));
          const t = 2 * Math.sqrt(-p);
          solutions[0] = t * Math.cos(phi);
          solutions[1] = -t * Math.cos(phi + Math.PI / 3);
          solutions[2] = -t * Math.cos(phi - Math.PI / 3);
          nSolutions = 3;
        } else {
          const sqrtD = Math.sqrt(d);
          const u = Math.cbrt(sqrtD - q);
          const v = -Math.cbrt(sqrtD + q);
          solutions[0] = u + v;
          nSolutions = 1;
        }

        const sub = 1.0 / 3 * a;

        for (let i = 0; i < nSolutions; ++i) {
          solutions[i] -= sub;
        }

        return nSolutions;
      }
      const EQN_EPS = 1e-9;

      function isZero(x) {
        return x > -EQN_EPS && x < EQN_EPS;
      }

      function applyDecoratedInitializer(target, property, decorators, initializer) {
        return decorators.slice().reverse().reduce(function (decoratedInitializer, decorator) {
          return decorator(target, property, decoratedInitializer) || decoratedInitializer;
        }, initializer);
      }

      const emptyDecorator = () => {};
      const emptyDecoratorFn = () => emptyDecorator;
      const emptySmartClassDecorator = makeSmartClassDecorator(() => {});
      function makeSmartClassDecorator(decorate) {
        return proxyFn;

        function proxyFn(target) {
          if (typeof target === 'function') {
            return decorate(target);
          } else {
            return function (constructor) {
              return decorate(constructor, target);
            };
          }
        }
      }

      function writeEditorClassProperty(constructor, propertyName, value) {
        const cache = getClassCache(constructor);

        if (cache) {
          const proto = getSubDict(cache, 'proto');
          getSubDict(proto, 'editor')[propertyName] = value;
        }
      }

      function makeEditorClassDecoratorFn(propertyName) {
        return value => constructor => {
          writeEditorClassProperty(constructor, propertyName, value);
        };
      }
      const CACHE_KEY = '__ccclassCache__';
      function getClassCache(ctor, decoratorName) {

        return getSubDict(ctor, CACHE_KEY);
      }
      function getSubDict(obj, key) {
        return obj[key] || (obj[key] = {});
      }

      const ccclass = exports('c1', makeSmartClassDecorator((constructor, name) => {
        let base = getSuper(constructor);

        if (base === Object) {
          base = null;
        }

        const proto = {
          name,
          extends: base,
          ctor: constructor
        };
        const cache = constructor[CACHE_KEY];

        if (cache) {
          const decoratedProto = cache.proto;

          if (decoratedProto) {
            mixin(proto, decoratedProto);
          }

          constructor[CACHE_KEY] = undefined;
        }

        const res = CCClass(proto);

        return res;
      }));

      const requireComponent = exports('cH', makeEditorClassDecoratorFn('requireComponent'));
      const executionOrder = exports('cy', makeEditorClassDecoratorFn('executionOrder'));
      const disallowMultiple = exports('cw',  emptySmartClassDecorator);
      const allowReplicated = ctor => {
        CCClass.Attr.setClassAttr(ctor, 'replicated', 'visible', true);
      };

      function property(target, propertyKey, descriptorOrInitializer) {
        let options = null;

        function normalized(target, propertyKey, descriptorOrInitializer) {
          const classStash = getOrCreateClassStash(target);
          const propertyStash = getOrCreateEmptyPropertyStash(target, propertyKey);
          const classConstructor = target.constructor;
          mergePropertyOptions(classStash, propertyStash, classConstructor, propertyKey, options, descriptorOrInitializer);
        }

        if (target === undefined) {
          return property({
            type: undefined
          });
        } else if (typeof propertyKey === 'undefined') {
          options = target;
          return normalized;
        } else {
          normalized(target, propertyKey, descriptorOrInitializer);
          return undefined;
        }
      }

      function getDefaultFromInitializer(initializer) {
        let value;

        try {
          value = initializer();
        } catch (e) {
          return initializer;
        }

        if (typeof value !== 'object' || value === null) {
          return value;
        } else {
          return initializer;
        }
      }

      function extractActualDefaultValues(classConstructor) {
        let dummyObj;

        try {
          dummyObj = new classConstructor();
        } catch (e) {

          return {};
        }

        return dummyObj;
      }

      function getOrCreateClassStash(target) {
        const cache = getClassCache(target.constructor);
        return cache;
      }

      function getOrCreateEmptyPropertyStash(target, propertyKey) {
        var _ref, _properties$_ref;

        const classStash = getClassCache(target.constructor);
        const ccclassProto = getSubDict(classStash, 'proto');
        const properties = getSubDict(ccclassProto, 'properties');
        const propertyStash = (_properties$_ref = properties[_ref = propertyKey]) !== null && _properties$_ref !== void 0 ? _properties$_ref : properties[_ref] = {};
        return propertyStash;
      }

      function getOrCreatePropertyStash(target, propertyKey, descriptorOrInitializer) {
        var _ref2, _properties$_ref2;

        const classStash = getClassCache(target.constructor);
        const ccclassProto = getSubDict(classStash, 'proto');
        const properties = getSubDict(ccclassProto, 'properties');
        const propertyStash = (_properties$_ref2 = properties[_ref2 = propertyKey]) !== null && _properties$_ref2 !== void 0 ? _properties$_ref2 : properties[_ref2] = {};
        propertyStash.__internalFlags |= PropertyStashInternalFlag.STANDALONE;

        if (descriptorOrInitializer && typeof descriptorOrInitializer !== 'function' && (descriptorOrInitializer.get || descriptorOrInitializer.set)) {
          if (descriptorOrInitializer.get) {
            propertyStash.get = descriptorOrInitializer.get;
          }

          if (descriptorOrInitializer.set) {
            propertyStash.set = descriptorOrInitializer.set;
          }
        } else {
          setDefaultValue(classStash, propertyStash, target.constructor, propertyKey, descriptorOrInitializer);
        }

        return propertyStash;
      }

      function mergePropertyOptions(cache, propertyStash, ctor, propertyKey, options, descriptorOrInitializer) {
        let fullOptions;
        const isGetset = descriptorOrInitializer && typeof descriptorOrInitializer !== 'function' && (descriptorOrInitializer.get || descriptorOrInitializer.set);

        if (options) {
          fullOptions = getFullFormOfProperty(options, isGetset);
        }

        const propertyRecord = mixin(propertyStash, fullOptions || options || {});

        if (isGetset) {

          if (descriptorOrInitializer.get) {
            propertyRecord.get = descriptorOrInitializer.get;
          }

          if (descriptorOrInitializer.set) {
            propertyRecord.set = descriptorOrInitializer.set;
          }
        } else {

          setDefaultValue(cache, propertyRecord, ctor, propertyKey, descriptorOrInitializer);
        }
      }

      function setDefaultValue(classStash, propertyStash, classConstructor, propertyKey, descriptorOrInitializer) {
        if (descriptorOrInitializer !== undefined) {
          if (typeof descriptorOrInitializer === 'function') {
            propertyStash.default = getDefaultFromInitializer(descriptorOrInitializer);
          } else if (descriptorOrInitializer === null) ; else if (descriptorOrInitializer.initializer) {
            propertyStash.default = getDefaultFromInitializer(descriptorOrInitializer.initializer);
          }
        } else {
          const actualDefaultValues = classStash.default || (classStash.default = extractActualDefaultValues(classConstructor));

          if (actualDefaultValues.hasOwnProperty(propertyKey)) {
            propertyStash.default = actualDefaultValues[propertyKey];
          }
        }
      }

      const sMetadataTag = Symbol('cc:SerializationMetadata');
      function getSerializationMetadata(constructor) {
        return constructor[sMetadataTag];
      }
      function getOrCreateSerializationMetadata(constructor) {
        var _ref, _ref$sMetadataTag;

        return (_ref$sMetadataTag = (_ref = constructor)[sMetadataTag]) !== null && _ref$sMetadataTag !== void 0 ? _ref$sMetadataTag : _ref[sMetadataTag] = {};
      }

      const serializable = exports('ch', (target, propertyKey, descriptorOrInitializer) => {
        const propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptorOrInitializer);
        setImplicitSerializable(propertyStash);
      });
      function formerlySerializedAs(name) {
        return (target, propertyKey, descriptorOrInitializer) => {
          const propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptorOrInitializer);
          propertyStash.formerlySerializedAs = name;
          setImplicitSerializable(propertyStash);
        };
      }
      const editorOnly = exports('f2', (target, propertyKey, descriptorOrInitializer) => {
        const propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptorOrInitializer);
        propertyStash.editorOnly = true;
        setImplicitSerializable(propertyStash);
      });

      function setImplicitSerializable(propertyStash) {
        propertyStash.__internalFlags |= PropertyStashInternalFlag.IMPLICIT_SERIALIZABLE;
      }

      const uniquelyReferenced = exports('dB',  emptyDecorator );

      const executeInEditMode =  emptySmartClassDecorator;
      const menu =  emptyDecoratorFn;
      const playOnFocus =  emptySmartClassDecorator;
      const inspector =  emptyDecoratorFn;
      const icon =  emptyDecoratorFn;
      const help =  emptyDecoratorFn;
      const editable = exports('fI',  emptyDecorator );
      const visible = exports('fK',  emptyDecoratorFn );
      const displayName = exports('fL',  emptyDecoratorFn );
      const tooltip = exports('fJ',  emptyDecoratorFn );
      const range = exports('fN',  emptyDecoratorFn );
      const rangeStep = exports('fO',  emptyDecoratorFn );
      const slide = exports('fP',  emptyDecorator );
      const displayOrder = exports('fM',  emptyDecoratorFn );
      const disallowAnimation = exports('fQ',  emptyDecorator );

      const integer = type(CCInteger);
      const float = exports('dF', type(CCFloat));
      const boolean = type(CCBoolean);
      const string = exports('cl', type(CCString));
      function type(type) {
        return property({
          type
        });
      }

      const override = exports('ck', (target, propertyKey, descriptorOrInitializer) => {
        const propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptorOrInitializer);
        propertyStash.override = true;
      });

      const editorExtrasTag = exports('dN', '__editorExtras__');

      class Empty {}

      const EditorExtendable = exports('dy', editorExtendableInternal());
      assertIsTrue(editorExtrasTag === '__editorExtras__', 'editorExtrasTag needs to be updated.');

      function editorExtendableInternal(Base, className) {
        {
          return Base !== null && Base !== void 0 ? Base : Empty;
        }
      }

      var _decorator = /*#__PURE__*/Object.freeze({
        __proto__: null,
        uniquelyReferenced: uniquelyReferenced,
        ccclass: ccclass,
        property: property,
        requireComponent: requireComponent,
        executionOrder: executionOrder,
        disallowMultiple: disallowMultiple,
        allowReplicated: allowReplicated,
        executeInEditMode: executeInEditMode,
        menu: menu,
        playOnFocus: playOnFocus,
        inspector: inspector,
        icon: icon,
        help: help,
        type: type,
        integer: integer,
        float: float,
        boolean: boolean,
        string: string,
        editable: editable,
        tooltip: tooltip,
        visible: visible,
        displayName: displayName,
        displayOrder: displayOrder,
        range: range,
        rangeStep: rangeStep,
        slide: slide,
        disallowAnimation: disallowAnimation,
        override: override,
        formerlySerializedAs: formerlySerializedAs,
        serializable: serializable
      });
      exports('cF', _decorator);

      const Destroyed = 1 << 0;
      const ToDestroy = 1 << 2;
      const DontSave = 1 << 3;
      const EditorOnly = 1 << 4;
      const Dirty = 1 << 5;
      const DontDestroy = 1 << 6;
      const Destroying = 1 << 7;
      const Deactivating = 1 << 8;
      const LockedInEditor = 1 << 9;
      const HideInHierarchy = 1 << 10;
      const IsOnEnableCalled = 1 << 11;
      const IsEditorOnEnableCalled = 1 << 12;
      const IsPreloadStarted = 1 << 13;
      const IsOnLoadCalled = 1 << 14;
      const IsOnLoadStarted = 1 << 15;
      const IsStartCalled = 1 << 16;
      const IsRotationLocked = 1 << 17;
      const IsScaleLocked = 1 << 18;
      const IsAnchorLocked = 1 << 19;
      const IsSizeLocked = 1 << 20;
      const IsPositionLocked = 1 << 21;
      const IsReplicated = 1 << 22;
      const PersistentMask = ~(ToDestroy | Dirty | Destroying | DontDestroy | Deactivating | IsPreloadStarted | IsOnLoadStarted | IsOnLoadCalled | IsStartCalled | IsOnEnableCalled | IsEditorOnEnableCalled | IsRotationLocked | IsScaleLocked | IsAnchorLocked | IsSizeLocked | IsPositionLocked);
      const AllHideMasks = DontSave | EditorOnly | LockedInEditor | HideInHierarchy;
      const objectsToDestroy = [];

      function compileDestruct(obj, ctor) {
        const shouldSkipId = obj instanceof legacyCC.Node || obj instanceof legacyCC.Component;
        const idToSkip = shouldSkipId ? '_id' : null;
        let key;
        const propsToReset = {};

        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            if (key === idToSkip) {
              continue;
            }

            switch (typeof obj[key]) {
              case 'string':
                propsToReset[key] = '';
                break;

              case 'object':
              case 'function':
                propsToReset[key] = null;
                break;
            }
          }
        }

        if (CCClass._isCCClass(ctor)) {
          const attrs = legacyCC.Class.Attr.getClassAttrs(ctor);
          const propList = ctor.__props__;

          for (let i = 0; i < propList.length; i++) {
            key = propList[i];
            const attrKey = `${key}`;

            if (attrKey in attrs) {
              if (shouldSkipId && key === '_id') {
                continue;
              }

              switch (typeof attrs[attrKey]) {
                case 'string':
                  propsToReset[key] = '';
                  break;

                case 'object':
                case 'function':
                  propsToReset[key] = null;
                  break;

                case 'undefined':
                  propsToReset[key] = undefined;
                  break;
              }
            }
          }
        }

        {
          let func = '';

          for (key in propsToReset) {
            let statement;

            if (CCClass.IDENTIFIER_RE.test(key)) {
              statement = `o.${key}=`;
            } else {
              statement = `o[${CCClass.escapeForJS(key)}]=`;
            }

            let val = propsToReset[key];

            if (val === '') {
              val = '""';
            }

            func += `${statement + val};\n`;
          }

          return Function('o', func);
        }
      }

      class CCObject {
        static _deferredDestroy() {
          const deleteCount = objectsToDestroy.length;

          for (let i = 0; i < deleteCount; ++i) {
            const obj = objectsToDestroy[i];

            if (!(obj._objFlags & Destroyed)) {
              obj._destroyImmediate();
            }
          }

          if (deleteCount === objectsToDestroy.length) {
            objectsToDestroy.length = 0;
          } else {
            objectsToDestroy.splice(0, deleteCount);
          }
        }

        constructor(name = '') {
          this._objFlags = void 0;
          this._name = void 0;
          this._name = name;
          this._objFlags = 0;
        }

        get name() {
          return this._name;
        }

        set name(value) {
          this._name = value;
        }

        set hideFlags(hideFlags) {
          const flags = hideFlags & CCObject.Flags.AllHideMasks;
          this._objFlags = this._objFlags & ~CCObject.Flags.AllHideMasks | flags;
        }

        get hideFlags() {
          return this._objFlags & CCObject.Flags.AllHideMasks;
        }

        set replicated(value) {
          if (value) {
            this._objFlags |= IsReplicated;
          } else {
            this._objFlags &= ~IsReplicated;
          }
        }

        get replicated() {
          return !!(this._objFlags & IsReplicated);
        }

        get isValid() {
          return !(this._objFlags & Destroyed);
        }

        destroy() {
          if (this._objFlags & Destroyed) {
            warnID(5000);
            return false;
          }

          if (this._objFlags & ToDestroy) {
            return false;
          }

          this._objFlags |= ToDestroy;
          objectsToDestroy.push(this);

          {
            this._destroy();
          }

          return true;
        }

        _destruct() {
          const ctor = this.constructor;
          let destruct = ctor.__destruct__;

          if (!destruct) {
            destruct = compileDestruct(this, ctor);
            value(ctor, '__destruct__', destruct, true);
          }

          destruct(this);
        }

        _destroyImmediate() {
          if (this._objFlags & Destroyed) {
            errorID(5000);
            return;
          }

          if (this._onPreDestroy) {
            this._onPreDestroy();
          }

          {
            if ( this.destruct) {
              this.destruct();
            }

            this._destruct();
          }

          this._objFlags |= Destroyed;
        }

      } exports('d8', CCObject);

      const prototype = CCObject.prototype;

      prototype._deserialize = null;
      prototype._onPreDestroy = null;
      CCClass.fastDefine('cc.Object', CCObject, {
        _name: '',
        _objFlags: 0,
        [editorExtrasTag]: {}
      });
      CCClass.Attr.setClassAttr(CCObject, editorExtrasTag, 'editorOnly', true);
      CCClass.Attr.setClassAttr(CCObject, 'replicated', 'visible', false);
      value(CCObject, 'Flags', {
        Destroyed,
        DontSave,
        EditorOnly,
        Dirty,
        DontDestroy,
        PersistentMask,
        Destroying,
        Deactivating,
        LockedInEditor,
        HideInHierarchy,
        AllHideMasks,
        IsPreloadStarted,
        IsOnLoadStarted,
        IsOnLoadCalled,
        IsOnEnableCalled,
        IsStartCalled,
        IsEditorOnEnableCalled,
        IsPositionLocked,
        IsRotationLocked,
        IsScaleLocked,
        IsAnchorLocked,
        IsSizeLocked
      });
      function isCCObject(object) {
        return object instanceof CCObject;
      }
      function isValid(value, strictMode) {
        if (typeof value === 'object') {
          return !!value && !(value._objFlags & (strictMode ? Destroyed | ToDestroy : Destroyed));
        } else {
          return typeof value !== 'undefined';
        }
      }
      legacyCC.isValid = isValid;

      {
        copyAllProperties(CCObject, jsb.CCObject, ['prototype', 'length', 'name']);
        copyAllProperties(CCObject.prototype, jsb.CCObject.prototype, ['constructor', 'name', 'hideFlags', 'replicated', 'isValid']);
        CCObject = exports('d8', jsb.CCObject);
      }

      legacyCC.Object = CCObject;

      var _dec, _class, _class2, _initializer, _initializer2, _initializer3, _initializer4, _class3, _temp;
      let StorageUnit;

      (function (StorageUnit) {
        StorageUnit[StorageUnit["Uint8"] = 0] = "Uint8";
        StorageUnit[StorageUnit["Uint16"] = 1] = "Uint16";
        StorageUnit[StorageUnit["Uint32"] = 2] = "Uint32";
        StorageUnit[StorageUnit["Int8"] = 3] = "Int8";
        StorageUnit[StorageUnit["Int16"] = 4] = "Int16";
        StorageUnit[StorageUnit["Int32"] = 5] = "Int32";
        StorageUnit[StorageUnit["Float32"] = 6] = "Float32";
        StorageUnit[StorageUnit["Float64"] = 7] = "Float64";
      })(StorageUnit || (StorageUnit = {}));

      let ElementType;

      (function (ElementType) {
        ElementType[ElementType["Scalar"] = 0] = "Scalar";
        ElementType[ElementType["Vec2"] = 1] = "Vec2";
        ElementType[ElementType["Vec3"] = 2] = "Vec3";
        ElementType[ElementType["Vec4"] = 3] = "Vec4";
        ElementType[ElementType["Quat"] = 4] = "Quat";
        ElementType[ElementType["Mat4"] = 5] = "Mat4";
      })(ElementType || (ElementType = {}));

      const elementTypeBits = 3;
      function combineStorageUnitElementType(unit, elementType) {
        return (elementType << elementTypeBits) + unit;
      }
      function extractStorageUnitElementType(combined) {
        return {
          storageUnit: ~(-1 << elementTypeBits) & combined,
          elementType: combined >> elementTypeBits
        };
      }
      let CompactValueTypeArray = exports('fx', (_dec = ccclass('cc.CompactValueTypeArray'), _dec(_class = (_class2 = (_temp = _class3 = class CompactValueTypeArray {
        constructor() {
          this._byteOffset = _initializer && _initializer();
          this._unitCount = _initializer2 && _initializer2();
          this._unitElement = _initializer3 && _initializer3();
          this._length = _initializer4 && _initializer4();
        }

        static lengthFor(values, elementType, unit) {
          const elementTraits = getElementTraits(elementType);
          return elementTraits.requiredUnits * values.length * getStorageConstructor(unit).BYTES_PER_ELEMENT;
        }

        static compress(values, elementType, unit, arrayBuffer, byteOffset, presumedByteOffset) {
          const elementTraits = getElementTraits(elementType);
          const storageConstructor = getStorageConstructor(unit);
          const unitCount = elementTraits.requiredUnits * values.length;
          const storage = new storageConstructor(arrayBuffer, byteOffset, unitCount);

          for (let i = 0; i < values.length; ++i) {
            elementTraits.compress(storage, i, values[i]);
          }

          const result = new CompactValueTypeArray();
          result._unitElement = combineStorageUnitElementType(unit, elementType);
          result._byteOffset = presumedByteOffset;
          result._unitCount = unitCount;
          result._length = values.length;
          return result;
        }

        decompress(arrayBuffer) {
          const {
            storageUnit,
            elementType
          } = extractStorageUnitElementType(this._unitElement);
          const elementTraits = getElementTraits(elementType);
          const storageConstructor = getStorageConstructor(storageUnit);
          const storage = new storageConstructor(arrayBuffer, this._byteOffset, this._unitCount);
          const result = new Array(this._length);

          for (let i = 0; i < this._length; ++i) {
            result[i] = elementTraits.decompress(storage, i);
          }

          return result;
        }

      }, _class3.StorageUnit = StorageUnit, _class3.ElementType = ElementType, _temp), (_initializer = applyDecoratedInitializer(_class2.prototype, "_byteOffset", [serializable], function () {
        return 0;
      }), _initializer2 = applyDecoratedInitializer(_class2.prototype, "_unitCount", [serializable], function () {
        return 0;
      }), _initializer3 = applyDecoratedInitializer(_class2.prototype, "_unitElement", [serializable], function () {
        return combineStorageUnitElementType(StorageUnit.Uint8, ElementType.Scalar);
      }), _initializer4 = applyDecoratedInitializer(_class2.prototype, "_length", [serializable], function () {
        return 0;
      })), _class2)) || _class));

      function getElementTraits(elementType) {
        return BuiltinElementTypeTraits[elementType];
      }

      function getStorageConstructor(unit) {
        switch (unit) {
          case StorageUnit.Uint8:
            return Uint8Array;

          case StorageUnit.Uint16:
            return Uint16Array;

          case StorageUnit.Uint32:
            return Uint32Array;

          case StorageUnit.Int8:
            return Int8Array;

          case StorageUnit.Int16:
            return Int16Array;

          case StorageUnit.Int32:
            return Int32Array;

          case StorageUnit.Float32:
            return Float32Array;

          case StorageUnit.Float64:
            return Float64Array;
        }
      }

      const BuiltinElementTypeTraits = {
        [ElementType.Scalar]: {
          requiredUnits: 1,

          compress(storage, index, value) {
            storage[index] = value;
          },

          decompress(storage, index) {
            return storage[index];
          }

        },
        [ElementType.Vec2]: {
          requiredUnits: 2,

          compress(storage, index, value) {
            storage[index * 2] = value.x;
            storage[index * 2 + 1] = value.y;
          },

          decompress(storage, index) {
            return new Vec3(storage[index * 2], storage[index * 2 + 1]);
          }

        },
        [ElementType.Vec3]: {
          requiredUnits: 3,

          compress(storage, index, value) {
            storage[index * 3] = value.x;
            storage[index * 3 + 1] = value.y;
            storage[index * 3 + 2] = value.z;
          },

          decompress(storage, index) {
            return new Vec3(storage[index * 3], storage[index * 3 + 1], storage[index * 3 + 2]);
          }

        },
        [ElementType.Vec4]: {
          requiredUnits: 4,

          compress(storage, index, value) {
            storage[index * 4] = value.x;
            storage[index * 4 + 1] = value.y;
            storage[index * 4 + 2] = value.z;
            storage[index * 4 + 3] = value.w;
          },

          decompress(storage, index) {
            return new Vec4(storage[index * 4], storage[index * 4 + 1], storage[index * 4 + 2], storage[index * 4 + 3]);
          }

        },
        [ElementType.Quat]: {
          requiredUnits: 4,

          compress(storage, index, value) {
            storage[index * 4] = value.x;
            storage[index * 4 + 1] = value.y;
            storage[index * 4 + 2] = value.z;
            storage[index * 4 + 3] = value.w;
          },

          decompress(storage, index) {
            return new Quat(storage[index * 4], storage[index * 4 + 1], storage[index * 4 + 2], storage[index * 4 + 3]);
          }

        },
        [ElementType.Mat4]: {
          requiredUnits: 16,

          compress(storage, index, value) {
            Mat4.toArray(storage, value, index * 16);
          },

          decompress(storage, index) {
            return Mat4.fromArray(new Mat4(), storage, index * 16);
          }

        }
      };

      const serializeTag = exports('fz', Symbol('[[Serialize]]'));
      const deserializeTag = exports('fy', Symbol('[[Deserialize]]'));

      legacyCC._decorator = _decorator;

      function constant() {
        return 0;
      }
      function linear(k) {
        return k;
      }
      function quadIn(k) {
        return k * k;
      }
      function quadOut(k) {
        return k * (2 - k);
      }
      function quadInOut(k) {
        k *= 2;

        if (k < 1) {
          return 0.5 * k * k;
        }

        return -0.5 * (--k * (k - 2) - 1);
      }
      function cubicIn(k) {
        return k * k * k;
      }
      function cubicOut(k) {
        return --k * k * k + 1;
      }
      function cubicInOut(k) {
        k *= 2;

        if (k < 1) {
          return 0.5 * k * k * k;
        }

        return 0.5 * ((k -= 2) * k * k + 2);
      }
      function quartIn(k) {
        return k * k * k * k;
      }
      function quartOut(k) {
        return 1 - --k * k * k * k;
      }
      function quartInOut(k) {
        k *= 2;

        if (k < 1) {
          return 0.5 * k * k * k * k;
        }

        return -0.5 * ((k -= 2) * k * k * k - 2);
      }
      function quintIn(k) {
        return k * k * k * k * k;
      }
      function quintOut(k) {
        return --k * k * k * k * k + 1;
      }
      function quintInOut(k) {
        k *= 2;

        if (k < 1) {
          return 0.5 * k * k * k * k * k;
        }

        return 0.5 * ((k -= 2) * k * k * k * k + 2);
      }
      function sineIn(k) {
        if (k === 1) {
          return 1;
        }

        return 1 - Math.cos(k * Math.PI / 2);
      }
      function sineOut(k) {
        return Math.sin(k * Math.PI / 2);
      }
      function sineInOut(k) {
        return 0.5 * (1 - Math.cos(Math.PI * k));
      }
      function expoIn(k) {
        return k === 0 ? 0 : Math.pow(1024, k - 1);
      }
      function expoOut(k) {
        return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
      }
      function expoInOut(k) {
        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        k *= 2;

        if (k < 1) {
          return 0.5 * Math.pow(1024, k - 1);
        }

        return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
      }
      function circIn(k) {
        return 1 - Math.sqrt(1 - k * k);
      }
      function circOut(k) {
        return Math.sqrt(1 - --k * k);
      }
      function circInOut(k) {
        k *= 2;

        if (k < 1) {
          return -0.5 * (Math.sqrt(1 - k * k) - 1);
        }

        return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
      }
      function elasticIn(k) {
        let s;
        let a = 0.1;
        const p = 0.4;

        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p * Math.asin(1 / a) / (2 * Math.PI);
        }

        return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
      }
      function elasticOut(k) {
        let s;
        let a = 0.1;
        const p = 0.4;

        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p * Math.asin(1 / a) / (2 * Math.PI);
        }

        return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
      }
      function elasticInOut(k) {
        let s;
        let a = 0.1;
        const p = 0.4;

        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p * Math.asin(1 / a) / (2 * Math.PI);
        }

        k *= 2;

        if (k < 1) {
          return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
        }

        return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
      }
      function backIn(k) {
        if (k === 1) {
          return 1;
        }

        const s = 1.70158;
        return k * k * ((s + 1) * k - s);
      }
      function backOut(k) {
        if (k === 0) {
          return 0;
        }

        const s = 1.70158;
        return --k * k * ((s + 1) * k + s) + 1;
      }
      function backInOut(k) {
        const s = 1.70158 * 1.525;
        k *= 2;

        if (k < 1) {
          return 0.5 * (k * k * ((s + 1) * k - s));
        }

        return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
      }
      function bounceIn(k) {
        return 1 - bounceOut(1 - k);
      }
      function bounceOut(k) {
        if (k < 1 / 2.75) {
          return 7.5625 * k * k;
        } else if (k < 2 / 2.75) {
          return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
        } else if (k < 2.5 / 2.75) {
          return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
        } else {
          return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
        }
      }
      function bounceInOut(k) {
        if (k < 0.5) {
          return bounceIn(k * 2) * 0.5;
        }

        return bounceOut(k * 2 - 1) * 0.5 + 0.5;
      }
      function smooth(k) {
        if (k <= 0) {
          return 0;
        }

        if (k >= 1) {
          return 1;
        }

        return k * k * (3 - 2 * k);
      }
      function fade(k) {
        if (k <= 0) {
          return 0;
        }

        if (k >= 1) {
          return 1;
        }

        return k * k * k * (k * (k * 6 - 15) + 10);
      }
      const quadOutIn = _makeOutIn(quadIn, quadOut);
      const cubicOutIn = _makeOutIn(cubicIn, cubicOut);
      const quartOutIn = _makeOutIn(quartIn, quartOut);
      const quintOutIn = _makeOutIn(quintIn, quintOut);
      const sineOutIn = _makeOutIn(sineIn, sineOut);
      const expoOutIn = _makeOutIn(expoIn, expoOut);
      const circOutIn = _makeOutIn(circIn, circOut);
      const elasticOutIn = _makeOutIn(elasticIn, elasticOut);
      const backOutIn = _makeOutIn(backIn, backOut);
      const bounceOutIn = _makeOutIn(bounceIn, bounceOut);

      function _makeOutIn(fnIn, fnOut) {
        return k => {
          if (k < 0.5) {
            return fnOut(k * 2) / 2;
          }

          return fnIn(2 * k - 1) / 2 + 0.5;
        };
      }

      var easing = /*#__PURE__*/Object.freeze({
        __proto__: null,
        constant: constant,
        linear: linear,
        quadIn: quadIn,
        quadOut: quadOut,
        quadInOut: quadInOut,
        cubicIn: cubicIn,
        cubicOut: cubicOut,
        cubicInOut: cubicInOut,
        quartIn: quartIn,
        quartOut: quartOut,
        quartInOut: quartInOut,
        quintIn: quintIn,
        quintOut: quintOut,
        quintInOut: quintInOut,
        sineIn: sineIn,
        sineOut: sineOut,
        sineInOut: sineInOut,
        expoIn: expoIn,
        expoOut: expoOut,
        expoInOut: expoInOut,
        circIn: circIn,
        circOut: circOut,
        circInOut: circInOut,
        elasticIn: elasticIn,
        elasticOut: elasticOut,
        elasticInOut: elasticInOut,
        backIn: backIn,
        backOut: backOut,
        backInOut: backInOut,
        bounceIn: bounceIn,
        bounceOut: bounceOut,
        bounceInOut: bounceInOut,
        smooth: smooth,
        fade: fade,
        quadOutIn: quadOutIn,
        cubicOutIn: cubicOutIn,
        quartOutIn: quartOutIn,
        quintOutIn: quintOutIn,
        sineOutIn: sineOutIn,
        expoOutIn: expoOutIn,
        circOutIn: circOutIn,
        elasticOutIn: elasticOutIn,
        backOutIn: backOutIn,
        bounceOutIn: bounceOutIn
      });
      exports('dR', easing);

      let EasingMethod;

      (function (EasingMethod) {
        EasingMethod[EasingMethod["LINEAR"] = 0] = "LINEAR";
        EasingMethod[EasingMethod["CONSTANT"] = 1] = "CONSTANT";
        EasingMethod[EasingMethod["QUAD_IN"] = 2] = "QUAD_IN";
        EasingMethod[EasingMethod["QUAD_OUT"] = 3] = "QUAD_OUT";
        EasingMethod[EasingMethod["QUAD_IN_OUT"] = 4] = "QUAD_IN_OUT";
        EasingMethod[EasingMethod["QUAD_OUT_IN"] = 5] = "QUAD_OUT_IN";
        EasingMethod[EasingMethod["CUBIC_IN"] = 6] = "CUBIC_IN";
        EasingMethod[EasingMethod["CUBIC_OUT"] = 7] = "CUBIC_OUT";
        EasingMethod[EasingMethod["CUBIC_IN_OUT"] = 8] = "CUBIC_IN_OUT";
        EasingMethod[EasingMethod["CUBIC_OUT_IN"] = 9] = "CUBIC_OUT_IN";
        EasingMethod[EasingMethod["QUART_IN"] = 10] = "QUART_IN";
        EasingMethod[EasingMethod["QUART_OUT"] = 11] = "QUART_OUT";
        EasingMethod[EasingMethod["QUART_IN_OUT"] = 12] = "QUART_IN_OUT";
        EasingMethod[EasingMethod["QUART_OUT_IN"] = 13] = "QUART_OUT_IN";
        EasingMethod[EasingMethod["QUINT_IN"] = 14] = "QUINT_IN";
        EasingMethod[EasingMethod["QUINT_OUT"] = 15] = "QUINT_OUT";
        EasingMethod[EasingMethod["QUINT_IN_OUT"] = 16] = "QUINT_IN_OUT";
        EasingMethod[EasingMethod["QUINT_OUT_IN"] = 17] = "QUINT_OUT_IN";
        EasingMethod[EasingMethod["SINE_IN"] = 18] = "SINE_IN";
        EasingMethod[EasingMethod["SINE_OUT"] = 19] = "SINE_OUT";
        EasingMethod[EasingMethod["SINE_IN_OUT"] = 20] = "SINE_IN_OUT";
        EasingMethod[EasingMethod["SINE_OUT_IN"] = 21] = "SINE_OUT_IN";
        EasingMethod[EasingMethod["EXPO_IN"] = 22] = "EXPO_IN";
        EasingMethod[EasingMethod["EXPO_OUT"] = 23] = "EXPO_OUT";
        EasingMethod[EasingMethod["EXPO_IN_OUT"] = 24] = "EXPO_IN_OUT";
        EasingMethod[EasingMethod["EXPO_OUT_IN"] = 25] = "EXPO_OUT_IN";
        EasingMethod[EasingMethod["CIRC_IN"] = 26] = "CIRC_IN";
        EasingMethod[EasingMethod["CIRC_OUT"] = 27] = "CIRC_OUT";
        EasingMethod[EasingMethod["CIRC_IN_OUT"] = 28] = "CIRC_IN_OUT";
        EasingMethod[EasingMethod["CIRC_OUT_IN"] = 29] = "CIRC_OUT_IN";
        EasingMethod[EasingMethod["ELASTIC_IN"] = 30] = "ELASTIC_IN";
        EasingMethod[EasingMethod["ELASTIC_OUT"] = 31] = "ELASTIC_OUT";
        EasingMethod[EasingMethod["ELASTIC_IN_OUT"] = 32] = "ELASTIC_IN_OUT";
        EasingMethod[EasingMethod["ELASTIC_OUT_IN"] = 33] = "ELASTIC_OUT_IN";
        EasingMethod[EasingMethod["BACK_IN"] = 34] = "BACK_IN";
        EasingMethod[EasingMethod["BACK_OUT"] = 35] = "BACK_OUT";
        EasingMethod[EasingMethod["BACK_IN_OUT"] = 36] = "BACK_IN_OUT";
        EasingMethod[EasingMethod["BACK_OUT_IN"] = 37] = "BACK_OUT_IN";
        EasingMethod[EasingMethod["BOUNCE_IN"] = 38] = "BOUNCE_IN";
        EasingMethod[EasingMethod["BOUNCE_OUT"] = 39] = "BOUNCE_OUT";
        EasingMethod[EasingMethod["BOUNCE_IN_OUT"] = 40] = "BOUNCE_IN_OUT";
        EasingMethod[EasingMethod["BOUNCE_OUT_IN"] = 41] = "BOUNCE_OUT_IN";
        EasingMethod[EasingMethod["SMOOTH"] = 42] = "SMOOTH";
        EasingMethod[EasingMethod["FADE"] = 43] = "FADE";
      })(EasingMethod || (EasingMethod = exports('dU', {})));

      const easingMethodFnMap = {
        [EasingMethod.CONSTANT]: constant,
        [EasingMethod.LINEAR]: linear,
        [EasingMethod.QUAD_IN]: quadIn,
        [EasingMethod.QUAD_OUT]: quadOut,
        [EasingMethod.QUAD_IN_OUT]: quadInOut,
        [EasingMethod.QUAD_OUT_IN]: quadOutIn,
        [EasingMethod.CUBIC_IN]: cubicIn,
        [EasingMethod.CUBIC_OUT]: cubicOut,
        [EasingMethod.CUBIC_IN_OUT]: cubicInOut,
        [EasingMethod.CUBIC_OUT_IN]: cubicOutIn,
        [EasingMethod.QUART_IN]: quartIn,
        [EasingMethod.QUART_OUT]: quartOut,
        [EasingMethod.QUART_IN_OUT]: quartInOut,
        [EasingMethod.QUART_OUT_IN]: quartOutIn,
        [EasingMethod.QUINT_IN]: quintIn,
        [EasingMethod.QUINT_OUT]: quintOut,
        [EasingMethod.QUINT_IN_OUT]: quintInOut,
        [EasingMethod.QUINT_OUT_IN]: quintOutIn,
        [EasingMethod.SINE_IN]: sineIn,
        [EasingMethod.SINE_OUT]: sineOut,
        [EasingMethod.SINE_IN_OUT]: sineInOut,
        [EasingMethod.SINE_OUT_IN]: sineOutIn,
        [EasingMethod.EXPO_IN]: expoIn,
        [EasingMethod.EXPO_OUT]: expoOut,
        [EasingMethod.EXPO_IN_OUT]: expoInOut,
        [EasingMethod.EXPO_OUT_IN]: expoOutIn,
        [EasingMethod.CIRC_IN]: circIn,
        [EasingMethod.CIRC_OUT]: circOut,
        [EasingMethod.CIRC_IN_OUT]: circInOut,
        [EasingMethod.CIRC_OUT_IN]: circOutIn,
        [EasingMethod.ELASTIC_IN]: elasticIn,
        [EasingMethod.ELASTIC_OUT]: elasticOut,
        [EasingMethod.ELASTIC_IN_OUT]: elasticInOut,
        [EasingMethod.ELASTIC_OUT_IN]: elasticOutIn,
        [EasingMethod.BACK_IN]: backIn,
        [EasingMethod.BACK_OUT]: backOut,
        [EasingMethod.BACK_IN_OUT]: backInOut,
        [EasingMethod.BACK_OUT_IN]: backOutIn,
        [EasingMethod.BOUNCE_IN]: bounceIn,
        [EasingMethod.BOUNCE_OUT]: bounceOut,
        [EasingMethod.BOUNCE_IN_OUT]: bounceInOut,
        [EasingMethod.BOUNCE_OUT_IN]: bounceOutIn,
        [EasingMethod.SMOOTH]: smooth,
        [EasingMethod.FADE]: fade
      };
      function getEasingFn(easingMethod) {
        assertIsTrue(easingMethod in easingMethodFnMap);
        return easingMethodFnMap[easingMethod];
      }

      const REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START = 0;
      const REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK = 0xFF << REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START;
      const REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START = 8;
      const REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK = 0xFF << REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START;
      const REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START = 16;
      const REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_MASK = 0xFF << REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;
      assertIsTrue(REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START === REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START + popCount(REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK));
      assertIsTrue(REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START === REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START + popCount(REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK));
      const REAL_KEYFRAME_VALUE_DEFAULT_FLAGS = RealInterpolationMode.LINEAR << REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START | TangentWeightMode.NONE << REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START | EasingMethod.LINEAR << REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;

      class RealKeyframeValue extends EditorExtendable {
        constructor(...args) {
          super(...args);
          this.value = 0.0;
          this.rightTangent = 0.0;
          this.rightTangentWeight = 0.0;
          this.leftTangent = 0.0;
          this.leftTangentWeight = 0.0;
          this._flags = REAL_KEYFRAME_VALUE_DEFAULT_FLAGS;
        }

        get interpolationMode() {
          return (this._flags & REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK) >> REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START;
        }

        set interpolationMode(value) {
          this._flags &= ~REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK;
          this._flags |= value << REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START;
        }

        get tangentWeightMode() {
          return (this._flags & REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK) >> REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START;
        }

        set tangentWeightMode(value) {
          this._flags &= ~REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK;
          this._flags |= value << REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START;
        }

        get easingMethod() {
          return (this._flags & REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_MASK) >> REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;
        }

        set easingMethod(value) {
          this._flags &= ~REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_MASK;
          this._flags |= value << REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;
        }

      }

      CCClass.fastDefine('cc.RealKeyframeValue', RealKeyframeValue, {
        interpolationMode: RealInterpolationMode.LINEAR,
        tangentWeightMode: TangentWeightMode.NONE,
        value: 0.0,
        rightTangent: 0.0,
        rightTangentWeight: 0.0,
        leftTangent: 0.0,
        leftTangentWeight: 0.0,
        easingMethod: EasingMethod.LINEAR,
        [editorExtrasTag]: undefined
      });
      CCClass.Attr.setClassAttr(RealKeyframeValue, editorExtrasTag, 'editorOnly', true);
      getOrCreateSerializationMetadata(RealKeyframeValue).uniquelyReferenced = true;

      function createRealKeyframeValue(params) {
        const realKeyframeValue = new RealKeyframeValue();

        if (typeof params === 'number') {
          realKeyframeValue.value = params;
        } else {
          const {
            interpolationMode,
            tangentWeightMode,
            value,
            rightTangent,
            rightTangentWeight,
            leftTangent,
            leftTangentWeight,
            easingMethod,
            [editorExtrasTag]: editorExtras
          } = params;
          realKeyframeValue.value = value !== null && value !== void 0 ? value : realKeyframeValue.value;
          realKeyframeValue.rightTangent = rightTangent !== null && rightTangent !== void 0 ? rightTangent : realKeyframeValue.rightTangent;
          realKeyframeValue.rightTangentWeight = rightTangentWeight !== null && rightTangentWeight !== void 0 ? rightTangentWeight : realKeyframeValue.rightTangentWeight;
          realKeyframeValue.leftTangent = leftTangent !== null && leftTangent !== void 0 ? leftTangent : realKeyframeValue.leftTangent;
          realKeyframeValue.leftTangentWeight = leftTangentWeight !== null && leftTangentWeight !== void 0 ? leftTangentWeight : realKeyframeValue.leftTangentWeight;
          realKeyframeValue.interpolationMode = interpolationMode !== null && interpolationMode !== void 0 ? interpolationMode : realKeyframeValue.interpolationMode;
          realKeyframeValue.tangentWeightMode = tangentWeightMode !== null && tangentWeightMode !== void 0 ? tangentWeightMode : realKeyframeValue.tangentWeightMode;
          realKeyframeValue.easingMethod = easingMethod !== null && easingMethod !== void 0 ? easingMethod : realKeyframeValue.easingMethod;

          if (editorExtras) {
            realKeyframeValue[editorExtrasTag] = editorExtras;
          }
        }

        return realKeyframeValue;
      }

      class RealCurve extends KeyframeCurve {
        constructor(...args) {
          super(...args);
          this.preExtrapolation = ExtrapolationMode.CLAMP;
          this.postExtrapolation = ExtrapolationMode.CLAMP;
        }

        evaluate(time) {
          const {
            _times: times,
            _values: values
          } = this;
          const nFrames = times.length;

          if (nFrames === 0) {
            return 0.0;
          }

          const firstTime = times[0];
          const lastTime = times[nFrames - 1];

          if (time < firstTime) {
            const {
              preExtrapolation
            } = this;
            const preValue = values[0];

            if (preExtrapolation === ExtrapolationMode.CLAMP || nFrames < 2) {
              return preValue.value;
            }

            switch (preExtrapolation) {
              case ExtrapolationMode.LINEAR:
                return linearTrend(firstTime, values[0].value, times[1], values[1].value, time);

              case ExtrapolationMode.LOOP:
                time = wrapRepeat(time, firstTime, lastTime);
                break;

              case ExtrapolationMode.PING_PONG:
                time = wrapPingPong(time, firstTime, lastTime);
                break;

              default:
                return preValue.value;
            }
          } else if (time > lastTime) {
            const {
              postExtrapolation
            } = this;
            const preFrame = values[nFrames - 1];

            if (postExtrapolation === ExtrapolationMode.CLAMP || nFrames < 2) {
              return preFrame.value;
            }

            switch (postExtrapolation) {
              case ExtrapolationMode.LINEAR:
                return linearTrend(lastTime, preFrame.value, times[nFrames - 2], values[nFrames - 2].value, time);

              case ExtrapolationMode.LOOP:
                time = wrapRepeat(time, firstTime, lastTime);
                break;

              case ExtrapolationMode.PING_PONG:
                time = wrapPingPong(time, firstTime, lastTime);
                break;

              default:
                return preFrame.value;
            }
          }

          const index = binarySearchEpsilon(times, time);

          if (index >= 0) {
            return values[index].value;
          }

          const iNext = ~index;
          assertIsTrue(iNext !== 0 && iNext !== nFrames && nFrames > 1);
          const iPre = iNext - 1;
          const preTime = times[iPre];
          const preValue = values[iPre];
          const nextTime = times[iNext];
          const nextValue = values[iNext];
          assertIsTrue(nextTime > time && time > preTime);
          const dt = nextTime - preTime;
          const ratio = (time - preTime) / dt;
          return evalBetweenTwoKeyFrames(preTime, preValue, nextTime, nextValue, ratio);
        }

        addKeyFrame(time, value) {
          return super.addKeyFrame(time, createRealKeyframeValue(value));
        }

        assignSorted(times, values) {
          if (values !== undefined) {
            assertIsTrue(Array.isArray(times));
            this.setKeyframes(times.slice(), values.map(value => createRealKeyframeValue(value)));
          } else {
            const keyframes = Array.from(times);
            this.setKeyframes(keyframes.map(([time]) => time), keyframes.map(([, value]) => createRealKeyframeValue(value)));
          }
        }

        isConstant(tolerance) {
          if (this._values.length <= 1) {
            return true;
          }

          const firstVal = this._values[0].value;
          return this._values.every(frame => approx(frame.value, firstVal, tolerance));
        }

        [serializeTag](output, context) {
          if (!context.toCCON) {
            output.writeThis();
            return;
          }

          const {
            _times: times,
            _values: keyframeValues
          } = this;
          const nKeyframes = times.length;
          const dataSize = 0 + OVERFLOW_BYTES + OVERFLOW_BYTES + FRAME_COUNT_BYTES + TIME_BYTES * nKeyframes + REAL_KEY_FRAME_VALUE_MAX_SIZE * nKeyframes;
          const dataView = new DataView(new ArrayBuffer(dataSize));
          let currentOffset = 0;
          dataView.setUint8(currentOffset, this.preExtrapolation);
          currentOffset += OVERFLOW_BYTES;
          dataView.setUint8(currentOffset, this.postExtrapolation);
          currentOffset += OVERFLOW_BYTES;
          dataView.setUint32(currentOffset, nKeyframes, true);
          currentOffset += FRAME_COUNT_BYTES;
          times.forEach((time, index) => dataView.setFloat32(currentOffset + TIME_BYTES * index, time, true));
          currentOffset += TIME_BYTES * nKeyframes;

          for (const keyframeValue of keyframeValues) {
            currentOffset = saveRealKeyFrameValue(dataView, keyframeValue, currentOffset);
          }

          const bytes = new Uint8Array(dataView.buffer, 0, currentOffset);
          output.writeProperty('bytes', bytes);
          const keyframeValueEditorExtras = keyframeValues.map(keyframeValue => keyframeValue[editorExtrasTag]);

          if (keyframeValueEditorExtras.some(extras => extras !== undefined)) {
            output.writeProperty(`keyframeValueEditorExtras`, keyframeValueEditorExtras);
          }
        }

        [deserializeTag](input, context) {
          if (!context.fromCCON) {
            input.readThis();
            return;
          }

          const bytes = input.readProperty('bytes');
          const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
          let currentOffset = 0;
          this.preExtrapolation = dataView.getUint8(currentOffset);
          currentOffset += OVERFLOW_BYTES;
          this.postExtrapolation = dataView.getUint8(currentOffset);
          currentOffset += OVERFLOW_BYTES;
          const nKeyframes = dataView.getUint32(currentOffset, true);
          currentOffset += FRAME_COUNT_BYTES;
          const times = Array.from({
            length: nKeyframes
          }, (_, index) => dataView.getFloat32(currentOffset + TIME_BYTES * index, true));
          currentOffset += TIME_BYTES * nKeyframes;
          const keyframeValues = new Array(nKeyframes);

          for (let iKeyFrame = 0; iKeyFrame < nKeyframes; ++iKeyFrame) {
            const keyframeValue = createRealKeyframeValue({});
            currentOffset = loadRealKeyFrameValue(dataView, keyframeValue, currentOffset);
            keyframeValues[iKeyFrame] = keyframeValue;
          }

          assertIsTrue(currentOffset === bytes.byteLength);
          const keyframeValueEditorExtras = input.readProperty(`keyframeValueEditorExtras`);

          if (keyframeValueEditorExtras) {
            assertIsTrue(keyframeValueEditorExtras.length === nKeyframes);
            keyframeValueEditorExtras.forEach((extras, index) => keyframeValues[index][editorExtrasTag] = extras);
          }

          this._times = times;
          this._values = keyframeValues;
        }

      } exports('dD', RealCurve);
      CCClass.fastDefine('cc.RealCurve', RealCurve, {
        _times: [],
        _values: [],
        preExtrapolation: ExtrapolationMode.CLAMP,
        postExtrapolation: ExtrapolationMode.CLAMP
      });
      const FLAGS_EASING_METHOD_BITS_START = 8;
      const FLAG_EASING_METHOD_MASK = 0xFF << FLAGS_EASING_METHOD_BITS_START;
      var KeyframeValueFlagMask;

      (function (KeyframeValueFlagMask) {
        KeyframeValueFlagMask[KeyframeValueFlagMask["VALUE"] = 1] = "VALUE";
        KeyframeValueFlagMask[KeyframeValueFlagMask["INTERPOLATION_MODE"] = 2] = "INTERPOLATION_MODE";
        KeyframeValueFlagMask[KeyframeValueFlagMask["TANGENT_WEIGHT_MODE"] = 4] = "TANGENT_WEIGHT_MODE";
        KeyframeValueFlagMask[KeyframeValueFlagMask["LEFT_TANGENT"] = 8] = "LEFT_TANGENT";
        KeyframeValueFlagMask[KeyframeValueFlagMask["LEFT_TANGENT_WEIGHT"] = 16] = "LEFT_TANGENT_WEIGHT";
        KeyframeValueFlagMask[KeyframeValueFlagMask["RIGHT_TANGENT"] = 32] = "RIGHT_TANGENT";
        KeyframeValueFlagMask[KeyframeValueFlagMask["RIGHT_TANGENT_WEIGHT"] = 64] = "RIGHT_TANGENT_WEIGHT";
      })(KeyframeValueFlagMask || (KeyframeValueFlagMask = {}));

      const OVERFLOW_BYTES = 1;
      const FRAME_COUNT_BYTES = 4;
      const TIME_BYTES = 4;
      const KEY_FRAME_VALUE_FLAGS_BYTES = 4;
      const VALUE_BYTES = 4;
      const INTERPOLATION_MODE_BYTES = 1;
      const TANGENT_WEIGHT_MODE_BYTES = 1;
      const LEFT_TANGENT_BYTES = 4;
      const LEFT_TANGENT_WEIGHT_BYTES = 4;
      const RIGHT_TANGENT_BYTES = 4;
      const RIGHT_TANGENT_WEIGHT_BYTES = 4;
      const {
        interpolationMode: DEFAULT_INTERPOLATION_MODE,
        tangentWeightMode: DEFAULT_TANGENT_WEIGHT_MODE,
        leftTangent: DEFAULT_LEFT_TANGENT,
        leftTangentWeight: DEFAULT_LEFT_TANGENT_WEIGHT,
        rightTangent: DEFAULT_RIGHT_TANGENT,
        rightTangentWeight: DEFAULT_RIGHT_TANGENT_WEIGHT
      } = createRealKeyframeValue({});
      const REAL_KEY_FRAME_VALUE_MAX_SIZE = KEY_FRAME_VALUE_FLAGS_BYTES + VALUE_BYTES + INTERPOLATION_MODE_BYTES + TANGENT_WEIGHT_MODE_BYTES + LEFT_TANGENT_BYTES + LEFT_TANGENT_WEIGHT_BYTES + RIGHT_TANGENT_BYTES + RIGHT_TANGENT_WEIGHT_BYTES + 0;

      function saveRealKeyFrameValue(dataView, keyframeValue, offset) {
        let flags = 0;
        let currentOffset = offset;
        const pFlags = currentOffset;
        currentOffset += KEY_FRAME_VALUE_FLAGS_BYTES;
        const {
          value,
          interpolationMode,
          tangentWeightMode,
          rightTangent,
          rightTangentWeight,
          leftTangent,
          leftTangentWeight,
          easingMethod
        } = keyframeValue;
        dataView.setFloat32(currentOffset, value, true);
        currentOffset += VALUE_BYTES;

        if (interpolationMode !== DEFAULT_INTERPOLATION_MODE) {
          flags |= KeyframeValueFlagMask.INTERPOLATION_MODE;
          dataView.setUint8(currentOffset, interpolationMode);
          currentOffset += INTERPOLATION_MODE_BYTES;
        }

        if (tangentWeightMode !== DEFAULT_TANGENT_WEIGHT_MODE) {
          flags |= KeyframeValueFlagMask.TANGENT_WEIGHT_MODE;
          dataView.setUint8(currentOffset, tangentWeightMode);
          currentOffset += TANGENT_WEIGHT_MODE_BYTES;
        }

        if (leftTangent !== DEFAULT_LEFT_TANGENT) {
          flags |= KeyframeValueFlagMask.LEFT_TANGENT;
          dataView.setFloat32(currentOffset, leftTangent, true);
          currentOffset += LEFT_TANGENT_BYTES;
        }

        if (leftTangentWeight !== DEFAULT_LEFT_TANGENT_WEIGHT) {
          flags |= KeyframeValueFlagMask.LEFT_TANGENT_WEIGHT;
          dataView.setFloat32(currentOffset, leftTangentWeight, true);
          currentOffset += LEFT_TANGENT_WEIGHT_BYTES;
        }

        if (rightTangent !== DEFAULT_RIGHT_TANGENT) {
          flags |= KeyframeValueFlagMask.RIGHT_TANGENT;
          dataView.setFloat32(currentOffset, rightTangent, true);
          currentOffset += RIGHT_TANGENT_BYTES;
        }

        if (rightTangentWeight !== DEFAULT_RIGHT_TANGENT_WEIGHT) {
          flags |= KeyframeValueFlagMask.RIGHT_TANGENT_WEIGHT;
          dataView.setFloat32(currentOffset, rightTangentWeight, true);
          currentOffset += RIGHT_TANGENT_WEIGHT_BYTES;
        }

        flags |= easingMethod << FLAGS_EASING_METHOD_BITS_START;
        dataView.setUint32(pFlags, flags, true);
        return currentOffset;
      }

      function loadRealKeyFrameValue(dataView, keyframeValue, offset) {
        let currentOffset = offset;
        const flags = dataView.getUint32(currentOffset, true);
        currentOffset += KEY_FRAME_VALUE_FLAGS_BYTES;
        keyframeValue.value = dataView.getFloat32(currentOffset, true);
        currentOffset += VALUE_BYTES;

        if (flags & KeyframeValueFlagMask.INTERPOLATION_MODE) {
          keyframeValue.interpolationMode = dataView.getUint8(currentOffset);
          currentOffset += INTERPOLATION_MODE_BYTES;
        }

        if (flags & KeyframeValueFlagMask.TANGENT_WEIGHT_MODE) {
          keyframeValue.tangentWeightMode = dataView.getUint8(currentOffset);
          currentOffset += TANGENT_WEIGHT_MODE_BYTES;
        }

        if (flags & KeyframeValueFlagMask.LEFT_TANGENT) {
          keyframeValue.leftTangent = dataView.getFloat32(currentOffset, true);
          currentOffset += LEFT_TANGENT_BYTES;
        }

        if (flags & KeyframeValueFlagMask.LEFT_TANGENT_WEIGHT) {
          keyframeValue.leftTangentWeight = dataView.getFloat32(currentOffset, true);
          currentOffset += LEFT_TANGENT_WEIGHT_BYTES;
        }

        if (flags & KeyframeValueFlagMask.RIGHT_TANGENT) {
          keyframeValue.rightTangent = dataView.getFloat32(currentOffset, true);
          currentOffset += RIGHT_TANGENT_BYTES;
        }

        if (flags & KeyframeValueFlagMask.RIGHT_TANGENT_WEIGHT) {
          keyframeValue.rightTangentWeight = dataView.getFloat32(currentOffset, true);
          currentOffset += RIGHT_TANGENT_WEIGHT_BYTES;
        }

        const easingMethod = (flags & FLAG_EASING_METHOD_MASK) >> FLAGS_EASING_METHOD_BITS_START;
        keyframeValue.easingMethod = easingMethod;
        return currentOffset;
      }

      function wrapRepeat(time, prevTime, nextTime) {
        return prevTime + repeat(time - prevTime, nextTime - prevTime);
      }

      function wrapPingPong(time, prevTime, nextTime) {
        return prevTime + pingPong(time - prevTime, nextTime - prevTime);
      }

      function linearTrend(prevTime, prevValue, nextTime, nextValue, time) {
        const slope = (nextValue - prevValue) / (nextTime - prevTime);
        return prevValue + (time - prevTime) * slope;
      }

      function evalBetweenTwoKeyFrames(prevTime, prevValue, nextTime, nextValue, ratio) {
        const dt = nextTime - prevTime;

        switch (prevValue.interpolationMode) {
          default:
          case RealInterpolationMode.CONSTANT:
            return prevValue.value;

          case RealInterpolationMode.LINEAR:
            {
              const transformedRatio = prevValue.easingMethod === EasingMethod.LINEAR ? ratio : getEasingFn(prevValue.easingMethod)(ratio);
              return lerp(prevValue.value, nextValue.value, transformedRatio);
            }

          case RealInterpolationMode.CUBIC:
            {
              const ONE_THIRD = 1.0 / 3.0;
              const {
                rightTangent: prevTangent,
                rightTangentWeight: prevTangentWeightSpecified
              } = prevValue;
              const prevTangentWeightEnabled = isRightTangentWeightEnabled(prevValue.tangentWeightMode);
              const {
                leftTangent: nextTangent,
                leftTangentWeight: nextTangentWeightSpecified
              } = nextValue;
              const nextTangentWeightEnabled = isLeftTangentWeightEnabled(nextValue.tangentWeightMode);

              if (!prevTangentWeightEnabled && !nextTangentWeightEnabled) {
                const p1 = prevValue.value + ONE_THIRD * prevTangent * dt;
                const p2 = nextValue.value - ONE_THIRD * nextTangent * dt;
                return bezierInterpolate(prevValue.value, p1, p2, nextValue.value, ratio);
              } else {
                let prevTangentWeight = 0.0;

                if (prevTangentWeightEnabled) {
                  prevTangentWeight = prevTangentWeightSpecified;
                } else {
                  const x = dt;
                  const y = dt * prevTangent;
                  prevTangentWeight = Math.sqrt(x * x + y * y) * ONE_THIRD;
                }

                const angle0 = Math.atan(prevTangent);
                const tx0 = Math.cos(angle0) * prevTangentWeight + prevTime;
                const ty0 = Math.sin(angle0) * prevTangentWeight + prevValue.value;
                let nextTangentWeight = 0.0;

                if (nextTangentWeightEnabled) {
                  nextTangentWeight = nextTangentWeightSpecified;
                } else {
                  const x = dt;
                  const y = dt * nextTangent;
                  nextTangentWeight = Math.sqrt(x * x + y * y) * ONE_THIRD;
                }

                const angle1 = Math.atan(nextTangent);
                const tx1 = -Math.cos(angle1) * nextTangentWeight + nextTime;
                const ty1 = -Math.sin(angle1) * nextTangentWeight + nextValue.value;
                const dx = dt;
                const u0x = (tx0 - prevTime) / dx;
                const u1x = (tx1 - prevTime) / dx;
                const u0y = ty0;
                const u1y = ty1;
                const coeff0 = 0.0;
                const coeff1 = 3.0 * u0x;
                const coeff2 = 3.0 * u1x - 6.0 * u0x;
                const coeff3 = 3.0 * (u0x - u1x) + 1.0;
                const solutions = [0.0, 0.0, 0.0];
                const nSolutions = solveCubic(coeff0 - ratio, coeff1, coeff2, coeff3, solutions);
                const param = getParamFromCubicSolution(solutions, nSolutions, ratio);
                const y = bezierInterpolate(prevValue.value, u0y, u1y, nextValue.value, param);
                return y;
              }
            }
        }
      }

      function isLeftTangentWeightEnabled(tangentWeightMode) {
        return (tangentWeightMode & TangentWeightMode.LEFT) !== 0;
      }

      function isRightTangentWeightEnabled(tangentWeightMode) {
        return (tangentWeightMode & TangentWeightMode.RIGHT) !== 0;
      }

      function bezierInterpolate(p0, p1, p2, p3, t) {
        const u = 1 - t;
        const coeff0 = u * u * u;
        const coeff1 = 3 * u * u * t;
        const coeff2 = 3 * u * t * t;
        const coeff3 = t * t * t;
        return coeff0 * p0 + coeff1 * p1 + coeff2 * p2 + coeff3 * p3;
      }

      function getParamFromCubicSolution(solutions, solutionsCount, x) {
        let param = x;

        if (solutionsCount === 1) {
          param = solutions[0];
        } else {
          param = -Infinity;

          for (let iSolution = 0; iSolution < solutionsCount; ++iSolution) {
            const solution = solutions[iSolution];

            if (solution >= 0.0 && solution <= 1.0) {
              if (solution > param) {
                param = solution;
              }
            }
          }

          if (param === -Infinity) {
            param = 0.0;
          }
        }

        return param;
      }

      function bezier(C1, C2, C3, C4, t) {
        const t1 = 1 - t;
        return t1 * (t1 * (C1 + (C2 * 3 - C1) * t) + C3 * 3 * t * t) + C4 * t * t * t;
      }
      legacyCC.bezier = bezier;
      const cos = Math.cos;
      const acos = Math.acos;
      const max$2 = Math.max;
      const pi = Math.PI;
      const tau = 2 * pi;
      const sqrt = Math.sqrt;

      function crt(v) {
        if (v < 0) {
          return -Math.pow(-v, 1 / 3);
        } else {
          return Math.pow(v, 1 / 3);
        }
      }

      function cardano(curve, x) {
        const pa = x - 0;
        const pb = x - curve[0];
        const pc = x - curve[2];
        const pd = x - 1;
        const pa3 = pa * 3;
        const pb3 = pb * 3;
        const pc3 = pc * 3;
        const d = -pa + pb3 - pc3 + pd;
        const rd = 1 / d;
        const r3 = 1 / 3;
        const a = (pa3 - 6 * pb + pc3) * rd;
        const a3 = a * r3;
        const b = (-pa3 + pb3) * rd;
        const c = pa * rd;
        const p = (3 * b - a * a) * r3;
        const p3 = p * r3;
        const q = (2 * a * a * a - 9 * a * b + 27 * c) / 27;
        const q2 = q / 2;
        const discriminant = q2 * q2 + p3 * p3 * p3;
        let u1;
        let v1;
        let x1;
        let x2;
        let x3;

        if (discriminant < 0) {
          const mp3 = -p * r3;
          const mp33 = mp3 * mp3 * mp3;
          const r = sqrt(mp33);
          const t = -q / (2 * r);
          const cosphi = t < -1 ? -1 : t > 1 ? 1 : t;
          const phi = acos(cosphi);
          const crtr = crt(r);
          const t1 = 2 * crtr;
          x1 = t1 * cos(phi * r3) - a3;
          x2 = t1 * cos((phi + tau) * r3) - a3;
          x3 = t1 * cos((phi + 2 * tau) * r3) - a3;

          if (x1 >= 0 && x1 <= 1) {
            if (x2 >= 0 && x2 <= 1) {
              if (x3 >= 0 && x3 <= 1) {
                return max$2(x1, x2, x3);
              } else {
                return max$2(x1, x2);
              }
            } else if (x3 >= 0 && x3 <= 1) {
              return max$2(x1, x3);
            } else {
              return x1;
            }
          } else if (x2 >= 0 && x2 <= 1) {
            if (x3 >= 0 && x3 <= 1) {
              return max$2(x2, x3);
            } else {
              return x2;
            }
          } else {
            return x3;
          }
        } else if (discriminant === 0) {
          u1 = q2 < 0 ? crt(-q2) : -crt(q2);
          x1 = 2 * u1 - a3;
          x2 = -u1 - a3;

          if (x1 >= 0 && x1 <= 1) {
            if (x2 >= 0 && x2 <= 1) {
              return max$2(x1, x2);
            } else {
              return x1;
            }
          } else {
            return x2;
          }
        } else {
            const sd = sqrt(discriminant);
            u1 = crt(-q2 + sd);
            v1 = crt(q2 + sd);
            x1 = u1 - v1 - a3;
            return x1;
          }
      }

      function bezierByTime(controlPoints, x) {
        const percent = cardano(controlPoints, x);
        const p1y = controlPoints[1];
        const p2y = controlPoints[3];
        return ((1 - percent) * (p1y + (p2y - p1y) * percent) * 3 + percent * percent) * percent;
      }
      legacyCC.bezierByTime = bezierByTime;

      var _dec$1, _class$1, _class2$1, _initializer$1, _initializer2$1, _initializer3$1, _dec2, _class4, _class5, _initializer4$1, _initializer5;
      let QuatInterpolationMode;

      (function (QuatInterpolationMode) {
        QuatInterpolationMode[QuatInterpolationMode["SLERP"] = 0] = "SLERP";
        QuatInterpolationMode[QuatInterpolationMode["CONSTANT"] = 1] = "CONSTANT";
      })(QuatInterpolationMode || (QuatInterpolationMode = exports('dX', {})));

      let QuatKeyframeValue = (_dec$1 = ccclass('cc.QuatKeyframeValue'), _dec$1(_class$1 = uniquelyReferenced(_class$1 = (_class2$1 = class QuatKeyframeValue {
        constructor({
          value,
          interpolationMode,
          easingMethod
        } = {}) {
          this.interpolationMode = _initializer$1 && _initializer$1();
          this.value = _initializer2$1 && _initializer2$1();
          this.easingMethod = _initializer3$1 && _initializer3$1();
          this.value = value ? Quat.clone(value) : this.value;
          this.interpolationMode = interpolationMode !== null && interpolationMode !== void 0 ? interpolationMode : this.interpolationMode;
          this.easingMethod = easingMethod !== null && easingMethod !== void 0 ? easingMethod : this.easingMethod;
        }

      }, (_initializer$1 = applyDecoratedInitializer(_class2$1.prototype, "interpolationMode", [serializable], function () {
        return QuatInterpolationMode.SLERP;
      }), _initializer2$1 = applyDecoratedInitializer(_class2$1.prototype, "value", [serializable], function () {
        return Quat.clone(Quat.IDENTITY);
      }), _initializer3$1 = applyDecoratedInitializer(_class2$1.prototype, "easingMethod", [serializable], function () {
        return EasingMethod.LINEAR;
      })), _class2$1)) || _class$1) || _class$1);

      function createQuatKeyframeValue(params) {
        return new QuatKeyframeValue(params);
      }

      let QuatCurve = exports('dG', (_dec2 = ccclass('cc.QuatCurve'), _dec2(_class4 = (_class5 = class QuatCurve extends KeyframeCurve {
        constructor(...args) {
          super(...args);
          this.preExtrapolation = _initializer4$1 && _initializer4$1();
          this.postExtrapolation = _initializer5 && _initializer5();
        }

        evaluate(time, quat) {
          var _quat;

          (_quat = quat) !== null && _quat !== void 0 ? _quat : quat = new Quat();
          const {
            _times: times,
            _values: values,
            postExtrapolation,
            preExtrapolation
          } = this;
          const nFrames = times.length;

          if (nFrames === 0) {
            return quat;
          }

          const firstTime = times[0];
          const lastTime = times[nFrames - 1];

          if (time < firstTime) {
            const preValue = values[0];

            switch (preExtrapolation) {
              case ExtrapolationMode.LOOP:
                time = firstTime + repeat(time - firstTime, lastTime - firstTime);
                break;

              case ExtrapolationMode.PING_PONG:
                time = firstTime + pingPong(time - firstTime, lastTime - firstTime);
                break;

              case ExtrapolationMode.CLAMP:
              default:
                return Quat.copy(quat, preValue.value);
            }
          } else if (time > lastTime) {
            const preValue = values[nFrames - 1];

            switch (postExtrapolation) {
              case ExtrapolationMode.LOOP:
                time = firstTime + repeat(time - firstTime, lastTime - firstTime);
                break;

              case ExtrapolationMode.PING_PONG:
                time = firstTime + pingPong(time - firstTime, lastTime - firstTime);
                break;

              case ExtrapolationMode.CLAMP:
              default:
                return Quat.copy(quat, preValue.value);
            }
          }

          const index = binarySearchEpsilon(times, time);

          if (index >= 0) {
            return Quat.copy(quat, values[index].value);
          }

          const iNext = ~index;
          assertIsTrue(iNext !== 0 && iNext !== nFrames && nFrames > 1);
          const iPre = iNext - 1;
          const preTime = times[iPre];
          const preValue = values[iPre];
          const nextTime = times[iNext];
          const nextValue = values[iNext];
          assertIsTrue(nextTime > time && time > preTime);
          const dt = nextTime - preTime;
          const ratio = (time - preTime) / dt;

          switch (preValue.interpolationMode) {
            default:
            case QuatInterpolationMode.CONSTANT:
              return Quat.copy(quat, preValue.value);

            case QuatInterpolationMode.SLERP:
              {
                const {
                  easingMethod
                } = preValue;
                const transformedRatio = easingMethod === EasingMethod.LINEAR ? ratio : Array.isArray(easingMethod) ? bezierByTime(easingMethod, ratio) : getEasingFn(easingMethod)(ratio);
                return Quat.slerp(quat, preValue.value, nextValue.value, transformedRatio);
              }
          }
        }

        addKeyFrame(time, value) {
          const keyframeValue = new QuatKeyframeValue(value);
          return super.addKeyFrame(time, keyframeValue);
        }

        assignSorted(times, values) {
          if (values !== undefined) {
            assertIsTrue(Array.isArray(times));
            this.setKeyframes(times.slice(), values.map(value => createQuatKeyframeValue(value)));
          } else {
            const keyframes = Array.from(times);
            this.setKeyframes(keyframes.map(([time]) => time), keyframes.map(([, value]) => createQuatKeyframeValue(value)));
          }
        }

        [serializeTag](output, context) {
          if (!context.toCCON) {
            output.writeThis();
            return;
          }

          const {
            _times: times,
            _values: keyframeValues
          } = this;
          let interpolationModeRepeated = true;
          keyframeValues.forEach((keyframeValue, _index, [firstKeyframeValue]) => {
            if (interpolationModeRepeated && keyframeValue.interpolationMode !== firstKeyframeValue.interpolationMode) {
              interpolationModeRepeated = false;
            }
          });
          const nKeyframes = times.length;
          const nFrames = nKeyframes;
          const interpolationModesSize = INTERPOLATION_MODE_BYTES$1 * (interpolationModeRepeated ? 1 : nFrames);
          const easingMethodsSize = keyframeValues.reduce((result, {
            easingMethod
          }) => result += Array.isArray(easingMethod) ? EASING_METHOD_BYTES + EASING_METHOD_BEZIER_COMPONENT_BYTES * 4 : EASING_METHOD_BYTES, 0);
          let dataSize = 0;
          dataSize += FLAGS_BYTES + FRAME_COUNT_BYTES$1 + TIME_BYTES$1 * nFrames + VALUE_BYTES$1 * 4 * nFrames + easingMethodsSize + interpolationModesSize + 0;
          const dataView = new DataView(new ArrayBuffer(dataSize));
          let P = 0;
          let flags = 0;

          if (interpolationModeRepeated) {
            flags |= KeyframeValueFlagMask$1.INTERPOLATION_MODE;
          }

          dataView.setUint32(P, flags, true);
          P += FLAGS_BYTES;
          dataView.setUint32(P, nFrames, true);
          P += FRAME_COUNT_BYTES$1;
          times.forEach((time, index) => dataView.setFloat32(P + TIME_BYTES$1 * index, time, true));
          P += TIME_BYTES$1 * nFrames;
          keyframeValues.forEach(({
            value: {
              x,
              y,
              z,
              w
            }
          }, index) => {
            const pQuat = P + VALUE_BYTES$1 * 4 * index;
            dataView.setFloat32(pQuat + VALUE_BYTES$1 * 0, x, true);
            dataView.setFloat32(pQuat + VALUE_BYTES$1 * 1, y, true);
            dataView.setFloat32(pQuat + VALUE_BYTES$1 * 2, z, true);
            dataView.setFloat32(pQuat + VALUE_BYTES$1 * 3, w, true);
          });
          P += VALUE_BYTES$1 * 4 * nFrames;
          keyframeValues.forEach(({
            easingMethod
          }, index) => {
            if (!Array.isArray(easingMethod)) {
              dataView.setUint8(P, easingMethod);
              ++P;
            } else {
              dataView.setUint8(P, EASING_METHOD_BEZIER_TAG);
              ++P;
              dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 0, easingMethod[0], true);
              dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 1, easingMethod[1], true);
              dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 2, easingMethod[2], true);
              dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 3, easingMethod[3], true);
              P += EASING_METHOD_BEZIER_COMPONENT_BYTES * 4;
            }
          });
          const INTERPOLATION_MODES_START = P;
          P += interpolationModesSize;
          let pInterpolationMode = INTERPOLATION_MODES_START;
          keyframeValues.forEach(({
            interpolationMode
          }) => {
            dataView.setUint8(pInterpolationMode, interpolationMode);

            if (!interpolationModeRepeated) {
              pInterpolationMode += INTERPOLATION_MODE_BYTES$1;
            }
          });
          const bytes = new Uint8Array(dataView.buffer);
          output.writeProperty('bytes', bytes);
        }

        [deserializeTag](input, context) {
          if (!context.fromCCON) {
            input.readThis();
            return;
          }

          const bytes = input.readProperty('bytes');
          const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
          let P = 0;
          const flags = dataView.getUint32(P, true);
          P += FLAGS_BYTES;
          const interpolationModeRepeated = flags & KeyframeValueFlagMask$1.INTERPOLATION_MODE;
          const nFrames = dataView.getUint32(P, true);
          P += FRAME_COUNT_BYTES$1;
          const times = Array.from({
            length: nFrames
          }, (_, index) => dataView.getFloat32(P + TIME_BYTES$1 * index, true));
          P += TIME_BYTES$1 * nFrames;
          const P_VALUES = P;
          P += VALUE_BYTES$1 * 4 * nFrames;
          const keyframeValues = Array.from({
            length: nFrames
          }, (_, index) => {
            const pQuat = P_VALUES + VALUE_BYTES$1 * 4 * index;
            const x = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 0, true);
            const y = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 1, true);
            const z = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 2, true);
            const w = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 3, true);
            const easingMethod = dataView.getUint8(P);
            ++P;
            const keyframeValue = createQuatKeyframeValue({
              value: {
                x,
                y,
                z,
                w
              }
            });

            if (easingMethod !== EASING_METHOD_BEZIER_TAG) {
              keyframeValue.easingMethod = easingMethod;
            } else {
              keyframeValue.easingMethod = [dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 0, true), dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 1, true), dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 2, true), dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 3, true)];
              P += EASING_METHOD_BEZIER_COMPONENT_BYTES * 4;
            }

            return keyframeValue;
          });

          if (interpolationModeRepeated) {
            const interpolationMode = dataView.getUint8(P);
            ++P;

            for (let iKeyframe = 0; iKeyframe < nFrames; ++iKeyframe) {
              keyframeValues[iKeyframe].interpolationMode = interpolationMode;
            }
          } else {
            for (let iKeyframe = 0; iKeyframe < nFrames; ++iKeyframe) {
              const interpolationMode = dataView.getUint8(P + iKeyframe);
              keyframeValues[iKeyframe].interpolationMode = interpolationMode;
            }

            P += nFrames;
          }

          this._times = times;
          this._values = keyframeValues;
        }

      }, (_initializer4$1 = applyDecoratedInitializer(_class5.prototype, "preExtrapolation", [serializable], function () {
        return ExtrapolationMode.CLAMP;
      }), _initializer5 = applyDecoratedInitializer(_class5.prototype, "postExtrapolation", [serializable], function () {
        return ExtrapolationMode.CLAMP;
      })), _class5)) || _class4));
      var KeyframeValueFlagMask$1;

      (function (KeyframeValueFlagMask) {
        KeyframeValueFlagMask[KeyframeValueFlagMask["INTERPOLATION_MODE"] = 1] = "INTERPOLATION_MODE";
      })(KeyframeValueFlagMask$1 || (KeyframeValueFlagMask$1 = {}));

      const FLAGS_BYTES = 1;
      const FRAME_COUNT_BYTES$1 = 4;
      const TIME_BYTES$1 = 4;
      const VALUE_BYTES$1 = 4;
      const INTERPOLATION_MODE_BYTES$1 = 1;
      const EASING_METHOD_BYTES = 1;
      const EASING_METHOD_BEZIER_TAG = 255;
      const EASING_METHOD_BEZIER_COMPONENT_BYTES = 4;

      var _dec$2, _class$2;
      let ObjectCurve = exports('dH', (_dec$2 = ccclass('cc.ObjectCurve'), _dec$2(_class$2 = class ObjectCurve extends KeyframeCurve {
        evaluate(time) {
          const iSearch = this.searchKeyframe(time);

          if (iSearch >= 0) {
            return this._values[iSearch];
          }

          const iPrev = clamp(~iSearch - 1, 0, this._values.length - 1);
          return this._values[iPrev];
        }

      }) || _class$2));

      const LOOK_FORWARD = 3;
      class Keyframe {
        constructor() {
          this.time = 0;
          this.value = 0;
          this.inTangent = 0;
          this.outTangent = 0;
        }

      }
      CCClass.fastDefine('cc.Keyframe', Keyframe, {
        time: 0,
        value: 0,
        inTangent: 0,
        outTangent: 0
      });
      class OptimizedKey {
        constructor() {
          this.index = void 0;
          this.time = void 0;
          this.endTime = void 0;
          this.coefficient = void 0;
          this.index = -1;
          this.time = 0;
          this.endTime = 0;
          this.coefficient = new Float32Array(4);
        }

        evaluate(T) {
          const t = T - this.time;
          return evalOptCurve(t, this.coefficient);
        }

      }
      function evalOptCurve(t, coefs) {
        return t * (t * (t * coefs[0] + coefs[1]) + coefs[2]) + coefs[3];
      }
      class AnimationCurve {
        get _internalCurve() {
          return this._curve;
        }

        get keyFrames() {
          return Array.from(this._curve.keyframes()).map(([time, value]) => {
            const legacyKeyframe = new Keyframe();
            legacyKeyframe.time = time;
            legacyKeyframe.value = value.value;
            legacyKeyframe.inTangent = value.leftTangent;
            legacyKeyframe.outTangent = value.rightTangent;
            return legacyKeyframe;
          });
        }

        set keyFrames(value) {
          this._curve.assignSorted(value.map(legacyCurve => [legacyCurve.time, {
            interpolationMode: RealInterpolationMode.CUBIC,
            value: legacyCurve.value,
            leftTangent: legacyCurve.inTangent,
            rightTangent: legacyCurve.outTangent
          }]));
        }

        get preWrapMode() {
          return toLegacyWrapMode(this._curve.preExtrapolation);
        }

        set preWrapMode(value) {
          this._curve.preExtrapolation = fromLegacyWrapMode(value);
        }

        get postWrapMode() {
          return toLegacyWrapMode(this._curve.postExtrapolation);
        }

        set postWrapMode(value) {
          this._curve.postExtrapolation = fromLegacyWrapMode(value);
        }

        constructor(keyFrames = null) {
          this.cachedKey = void 0;

          if (keyFrames instanceof RealCurve) {
            this._curve = keyFrames;
          } else {
            const curve = new RealCurve();
            this._curve = curve;
            curve.preExtrapolation = ExtrapolationMode.LOOP;
            curve.postExtrapolation = ExtrapolationMode.CLAMP;

            if (!keyFrames) {
              curve.assignSorted([[0.0, {
                interpolationMode: RealInterpolationMode.CUBIC,
                value: 1.0
              }], [1.0, {
                interpolationMode: RealInterpolationMode.CUBIC,
                value: 1.0
              }]]);
            } else {
              curve.assignSorted(keyFrames.map(legacyKeyframe => [legacyKeyframe.time, {
                interpolationMode: RealInterpolationMode.CUBIC,
                value: legacyKeyframe.value,
                leftTangent: legacyKeyframe.inTangent,
                rightTangent: legacyKeyframe.outTangent
              }]));
            }
          }

          this.cachedKey = new OptimizedKey();
        }

        addKey(keyFrame) {
          if (!keyFrame) {
            this._curve.clear();
          } else {
            this._curve.addKeyFrame(keyFrame.time, {
              interpolationMode: RealInterpolationMode.CUBIC,
              value: keyFrame.value,
              leftTangent: keyFrame.inTangent,
              rightTangent: keyFrame.outTangent
            });
          }
        }

        evaluate_slow(time) {
          return this._curve.evaluate(time);
        }

        evaluate(time) {
          const {
            cachedKey,
            _curve: curve
          } = this;
          const nKeyframes = curve.keyFramesCount;
          const lastKeyframeIndex = nKeyframes - 1;
          let wrappedTime = time;
          const extrapolationMode = time < 0 ? curve.preExtrapolation : curve.postExtrapolation;
          const startTime = curve.getKeyframeTime(0);
          const endTime = curve.getKeyframeTime(lastKeyframeIndex);

          switch (extrapolationMode) {
            case ExtrapolationMode.LOOP:
              wrappedTime = repeat(time - startTime, endTime - startTime) + startTime;
              break;

            case ExtrapolationMode.PING_PONG:
              wrappedTime = pingPong(time - startTime, endTime - startTime) + startTime;
              break;

            case ExtrapolationMode.CLAMP:
            default:
              wrappedTime = clamp(time, startTime, endTime);
              break;
          }

          if (wrappedTime >= cachedKey.time && wrappedTime < cachedKey.endTime) {
            return cachedKey.evaluate(wrappedTime);
          }

          const leftIndex = this.findIndex(cachedKey, wrappedTime);
          const rightIndex = Math.min(leftIndex + 1, lastKeyframeIndex);
          this.calcOptimizedKey(cachedKey, leftIndex, rightIndex);
          return cachedKey.evaluate(wrappedTime);
        }

        calcOptimizedKey(optKey, leftIndex, rightIndex) {
          const lhsTime = this._curve.getKeyframeTime(leftIndex);

          const rhsTime = this._curve.getKeyframeTime(rightIndex);

          const {
            value: lhsValue,
            leftTangent: lhsOutTangent
          } = this._curve.getKeyframeValue(leftIndex);

          const {
            value: rhsValue,
            rightTangent: rhsInTangent
          } = this._curve.getKeyframeValue(rightIndex);

          optKey.index = leftIndex;
          optKey.time = lhsTime;
          optKey.endTime = rhsTime;
          const dx = rhsTime - lhsTime;
          const dy = rhsValue - lhsValue;
          const length = 1 / (dx * dx);
          const d1 = lhsOutTangent * dx;
          const d2 = rhsInTangent * dx;
          optKey.coefficient[0] = (d1 + d2 - dy - dy) * length / dx;
          optKey.coefficient[1] = (dy + dy + dy - d1 - d1 - d2) * length;
          optKey.coefficient[2] = lhsOutTangent;
          optKey.coefficient[3] = lhsValue;
        }

        findIndex(optKey, t) {
          const {
            _curve: curve
          } = this;
          const nKeyframes = curve.keyFramesCount;
          const cachedIndex = optKey.index;

          if (cachedIndex !== -1) {
            const cachedTime = curve.getKeyframeTime(cachedIndex);

            if (t > cachedTime) {
              for (let i = 0; i < LOOK_FORWARD; i++) {
                const currIndex = cachedIndex + i;

                if (currIndex + 1 < nKeyframes && curve.getKeyframeTime(currIndex + 1) > t) {
                  return currIndex;
                }
              }
            } else {
              for (let i = 0; i < LOOK_FORWARD; i++) {
                const currIndex = cachedIndex - i;

                if (currIndex >= 0 && curve.getKeyframeTime(currIndex - 1) <= t) {
                  return currIndex - 1;
                }
              }
            }
          }

          let left = 0;
          let right = nKeyframes;
          let mid;

          while (right - left > 1) {
            mid = Math.floor((left + right) / 2);

            if (curve.getKeyframeTime(mid) >= t) {
              right = mid;
            } else {
              left = mid;
            }
          }

          return left;
        }

      } exports('ep', AnimationCurve);
      AnimationCurve.defaultKF = [{
        time: 0,
        value: 1,
        inTangent: 0,
        outTangent: 0
      }, {
        time: 1,
        value: 1,
        inTangent: 0,
        outTangent: 0
      }];
      CCClass.fastDefine('cc.AnimationCurve', AnimationCurve, {
        _curve: null
      });
      let WrapModeMask;

      (function (WrapModeMask) {
        WrapModeMask[WrapModeMask["Default"] = 0] = "Default";
        WrapModeMask[WrapModeMask["Normal"] = 1] = "Normal";
        WrapModeMask[WrapModeMask["Loop"] = 2] = "Loop";
        WrapModeMask[WrapModeMask["ShouldWrap"] = 4] = "ShouldWrap";
        WrapModeMask[WrapModeMask["Clamp"] = 8] = "Clamp";
        WrapModeMask[WrapModeMask["PingPong"] = 22] = "PingPong";
        WrapModeMask[WrapModeMask["Reverse"] = 36] = "Reverse";
      })(WrapModeMask || (WrapModeMask = exports('dz', {})));

      function fromLegacyWrapMode(legacyWrapMode) {
        switch (legacyWrapMode) {
          default:
          case WrapModeMask.Default:
          case WrapModeMask.Normal:
          case WrapModeMask.Clamp:
            return ExtrapolationMode.CLAMP;

          case WrapModeMask.PingPong:
            return ExtrapolationMode.PING_PONG;

          case WrapModeMask.Loop:
            return ExtrapolationMode.LOOP;
        }
      }

      function toLegacyWrapMode(extrapolationMode) {
        switch (extrapolationMode) {
          default:
          case ExtrapolationMode.LINEAR:
          case ExtrapolationMode.CLAMP:
            return WrapModeMask.Clamp;

          case ExtrapolationMode.PING_PONG:
            return WrapModeMask.PingPong;

          case ExtrapolationMode.LOOP:
            return WrapModeMask.Loop;
        }
      }

      function constructLegacyCurveAndConvert() {
        const curve = new RealCurve();
        curve.assignSorted([[0.0, {
          interpolationMode: RealInterpolationMode.CUBIC,
          value: 1.0
        }], [1.0, {
          interpolationMode: RealInterpolationMode.CUBIC,
          value: 1.0
        }]]);
        return curve;
      }

      let SplineMode;

      (function (SplineMode) {
        SplineMode[SplineMode["LINEAR"] = 0] = "LINEAR";
        SplineMode[SplineMode["BEZIER"] = 1] = "BEZIER";
        SplineMode[SplineMode["CATMULL_ROM"] = 2] = "CATMULL_ROM";
      })(SplineMode || (SplineMode = {}));

      const SPLINE_WHOLE_INDEX = 0xffffffff;

      const _v0 = new Vec3();

      const _v1 = new Vec3();

      const _v2 = new Vec3();

      const _v3 = new Vec3();

      class Spline {
        constructor(mode = SplineMode.CATMULL_ROM, knots = []) {
          this._type = void 0;
          this._mode = SplineMode.CATMULL_ROM;
          this._knots = [];
          this._type = enums.SHAPE_SPLINE;
          this._mode = mode;

          for (let i = 0; i < knots.length; i++) {
            this._knots[i] = new Vec3(knots[i]);
          }
        }

        static create(mode, knots = []) {
          return new Spline(mode, knots);
        }

        static clone(s) {
          return new Spline(s.mode, s.knots);
        }

        static copy(out, s) {
          out._mode = s.mode;
          out._knots.length = 0;
          const knots = s.knots;
          const length = knots.length;

          for (let i = 0; i < length; i++) {
            out._knots[i] = new Vec3(knots[i]);
          }

          return out;
        }

        get type() {
          return this._type;
        }

        get mode() {
          return this._mode;
        }

        get knots() {
          return this._knots;
        }

        setModeAndKnots(mode, knots) {
          this._mode = mode;
          this._knots.length = 0;

          for (let i = 0; i < knots.length; i++) {
            this._knots[i] = new Vec3(knots[i]);
          }
        }

        clearKnots() {
          this._knots.length = 0;
        }

        getKnotCount() {
          return this._knots.length;
        }

        addKnot(knot) {
          this._knots.push(new Vec3(knot));
        }

        insertKnot(index, knot) {
          const item = new Vec3(knot);

          if (index >= this._knots.length) {
            this._knots.push(item);

            return;
          }

          this._knots.splice(index, 0, item);
        }

        removeKnot(index) {
          assertIsTrue(index >= 0 && index < this._knots.length, 'Spline: invalid index');

          this._knots.splice(index, 1);
        }

        setKnot(index, knot) {
          assertIsTrue(index >= 0 && index < this._knots.length, 'Spline: invalid index');

          this._knots[index].set(knot);
        }

        getKnot(index) {
          assertIsTrue(index >= 0 && index < this._knots.length, 'Spline: invalid index');
          return this._knots[index];
        }

        getPoint(t, index = SPLINE_WHOLE_INDEX) {
          t = clamp(t, 0.0, 1.0);
          const segments = this.getSegments();

          if (segments === 0) {
            return new Vec3(0.0, 0.0, 0.0);
          }

          if (index === SPLINE_WHOLE_INDEX) {
            const deltaT = 1.0 / segments;
            index = Math.floor(t / deltaT);
            t = t % deltaT / deltaT;
          }

          if (index >= segments) {
            return new Vec3(this._knots[this._knots.length - 1]);
          }

          switch (this._mode) {
            case SplineMode.LINEAR:
              return Spline.calcLinear(this._knots[index], this._knots[index + 1], t);

            case SplineMode.BEZIER:
              return Spline.calcBezier(this._knots[index * 4], this._knots[index * 4 + 1], this._knots[index * 4 + 2], this._knots[index * 4 + 3], t);

            case SplineMode.CATMULL_ROM:
              {
                const v0 = index > 0 ? this._knots[index - 1] : this._knots[index];
                const v3 = index + 2 < this._knots.length ? this._knots[index + 2] : this._knots[index + 1];
                return Spline.calcCatmullRom(v0, this._knots[index], this._knots[index + 1], v3, t);
              }

            default:
              return new Vec3(0.0, 0.0, 0.0);
          }
        }

        getPoints(num, index = SPLINE_WHOLE_INDEX) {
          if (num === 0) {
            return [];
          }

          if (num === 1) {
            const point = this.getPoint(0.0, index);
            return [point];
          }

          const points = [];
          const deltaT = 1.0 / (num - 1.0);

          for (let i = 0; i < num; i++) {
            const t = i * deltaT;
            const point = this.getPoint(t, index);
            points.push(point);
          }

          return points;
        }

        getSegments() {
          const count = this._knots.length;

          switch (this._mode) {
            case SplineMode.LINEAR:
            case SplineMode.CATMULL_ROM:
              if (count < 2) {
                warnID(14300);
                return 0;
              }

              return count - 1;

            case SplineMode.BEZIER:
              if (count < 4 || count % 4 != 0) {
                warnID(14301);
                return 0;
              }

              return count / 4;

            default:
              assertIsTrue(false, 'Spline error: invalid mode');
          }
        }

        static calcLinear(v0, v1, t) {
          const result = new Vec3();
          Vec3.multiplyScalar(_v0, v0, 1.0 - t);
          Vec3.multiplyScalar(_v1, v1, t);
          Vec3.add(result, _v0, _v1);
          return result;
        }

        static calcBezier(v0, v1, v2, v3, t) {
          const result = new Vec3();
          const s = 1.0 - t;
          Vec3.multiplyScalar(_v0, v0, s * s * s);
          Vec3.multiplyScalar(_v1, v1, 3.0 * t * s * s);
          Vec3.multiplyScalar(_v2, v2, 3.0 * t * t * s);
          Vec3.multiplyScalar(_v3, v3, t * t * t);
          Vec3.add(_v0, _v0, _v1);
          Vec3.add(_v2, _v2, _v3);
          Vec3.add(result, _v0, _v2);
          return result;
        }

        static calcCatmullRom(v0, v1, v2, v3, t) {
          const result = new Vec3();
          const t2 = t * t;
          const t3 = t2 * t;
          Vec3.multiplyScalar(_v0, v0, -0.5 * t3 + t2 - 0.5 * t);
          Vec3.multiplyScalar(_v1, v1, 1.5 * t3 - 2.5 * t2 + 1.0);
          Vec3.multiplyScalar(_v2, v2, -1.5 * t3 + 2.0 * t2 + 0.5 * t);
          Vec3.multiplyScalar(_v3, v3, 0.5 * t3 - 0.5 * t2);
          Vec3.add(_v0, _v0, _v1);
          Vec3.add(_v2, _v2, _v3);
          Vec3.add(result, _v0, _v2);
          return result;
        }

      }

      let ERaycastMode;

      (function (ERaycastMode) {
        ERaycastMode[ERaycastMode["ALL"] = 0] = "ALL";
        ERaycastMode[ERaycastMode["CLOSEST"] = 1] = "CLOSEST";
        ERaycastMode[ERaycastMode["ANY"] = 2] = "ANY";
      })(ERaycastMode || (ERaycastMode = exports('d3', {})));

      replaceProperty(intersect, 'intersect', [{
        name: 'ray_aabb',
        newName: 'rayAABB'
      }, {
        name: 'ray_plane',
        newName: 'rayPlane'
      }, {
        name: 'ray_triangle',
        newName: 'rayTriangle'
      }, {
        name: 'ray_sphere',
        newName: 'raySphere'
      }, {
        name: 'ray_obb',
        newName: 'rayOBB'
      }, {
        name: 'ray_capsule',
        newName: 'rayCapsule'
      }, {
        name: 'ray_subMesh',
        newName: 'raySubMesh'
      }, {
        name: 'ray_mesh',
        newName: 'rayMesh'
      }, {
        name: 'ray_model',
        newName: 'rayModel'
      }, {
        name: 'line_plane',
        newName: 'linePlane'
      }, {
        name: 'line_triangle',
        newName: 'lineTriangle'
      }, {
        name: 'line_aabb',
        newName: 'lineAABB'
      }, {
        name: 'line_obb',
        newName: 'lineOBB'
      }, {
        name: 'line_sphere',
        newName: 'lineSphere'
      }, {
        name: 'aabb_aabb',
        newName: 'aabbWithAABB'
      }, {
        name: 'aabb_obb',
        newName: 'aabbWithOBB'
      }, {
        name: 'aabb_plane',
        newName: 'aabbPlane'
      }, {
        name: 'aabb_frustum',
        newName: 'aabbFrustum'
      }, {
        name: 'aabbFrustum_accurate',
        newName: 'aabbFrustumAccurate'
      }, {
        name: 'obb_point',
        newName: 'obbPoint'
      }, {
        name: 'obb_plane',
        newName: 'obbPlane'
      }, {
        name: 'obb_frustum',
        newName: 'obbFrustum'
      }, {
        name: 'obbFrustum_accurate',
        newName: 'obbFrustumAccurate'
      }, {
        name: 'obb_obb',
        newName: 'obbWithOBB'
      }, {
        name: 'obb_capsule',
        newName: 'obbCapsule'
      }, {
        name: 'sphere_plane',
        newName: 'spherePlane'
      }, {
        name: 'sphere_frustum',
        newName: 'sphereFrustum'
      }, {
        name: 'sphereFrustum_accurate',
        newName: 'sphereFrustumAccurate'
      }, {
        name: 'sphere_sphere',
        newName: 'sphereWithSphere'
      }, {
        name: 'sphere_aabb',
        newName: 'sphereAABB'
      }, {
        name: 'sphere_obb',
        newName: 'sphereOBB'
      }, {
        name: 'sphere_capsule',
        newName: 'sphereCapsule'
      }, {
        name: 'capsule_capsule',
        newName: 'capsuleWithCapsule'
      }]);

      function deprecatedClassMessage(oldClassName, newClassName) {
        console.warn(`${oldClassName} is deprecated, please use ${newClassName} instead.`);
      }

      class line extends Line {
        constructor() {
          super();
          deprecatedClassMessage('line', 'Line');
        }

      }
      class plane extends Plane {
        constructor() {
          super();
          deprecatedClassMessage('plane', 'Plane');
        }

      }
      class ray extends Ray {
        constructor() {
          super();
          deprecatedClassMessage('ray', 'Ray');
        }

      }
      class triangle extends Triangle {
        constructor() {
          super();
          deprecatedClassMessage('triangle', 'Triangle');
        }

      }
      class sphere extends Sphere {
        constructor() {
          super();
          deprecatedClassMessage('sphere', 'Sphere');
        }

      }
      class aabb extends AABB {
        constructor() {
          super();
          deprecatedClassMessage('aabb', 'AABB');
        }

      }
      class obb extends OBB {
        constructor() {
          super();
          deprecatedClassMessage('obb', 'OBB');
        }

      }
      class capsule extends Capsule {
        constructor() {
          super();
          deprecatedClassMessage('capsule', 'Capsule');
        }

      }
      class frustum extends Frustum {
        constructor() {
          super();
          deprecatedClassMessage('frustum', 'Frustum');
        }

      }

      var geometry = /*#__PURE__*/Object.freeze({
        __proto__: null,
        distance: distance,
        enums: enums,
        intersect: intersect,
        Line: Line,
        Plane: Plane,
        Ray: Ray,
        Triangle: Triangle,
        Sphere: Sphere,
        AABB: AABB,
        OBB: OBB,
        Capsule: Capsule,
        Frustum: Frustum,
        Keyframe: Keyframe,
        AnimationCurve: AnimationCurve,
        get WrapModeMask () { return WrapModeMask; },
        get SplineMode () { return SplineMode; },
        Spline: Spline,
        constructLegacyCurveAndConvert: constructLegacyCurveAndConvert,
        OptimizedKey: OptimizedKey,
        evalOptCurve: evalOptCurve,
        get ERaycastMode () { return ERaycastMode; },
        line: line,
        plane: plane,
        ray: ray,
        triangle: triangle,
        sphere: sphere,
        aabb: aabb,
        obb: obb,
        capsule: capsule,
        frustum: frustum
      });
      exports('f7', geometry);

      class ScalableContainer {
        constructor() {
          this._poolHandle = -1;
          scalableContainerManager.addContainer(this);
        }

        destroy() {
          scalableContainerManager.removeContainer(this);
        }

      } exports('S', ScalableContainer);

      class ScalableContainerManager {
        constructor() {
          this._pools = [];
          this._lastShrinkPassed = 0;
          this.shrinkTimeSpan = 5;
        }

        addContainer(pool) {
          if (pool._poolHandle !== -1) return;
          pool._poolHandle = this._pools.length;

          this._pools.push(pool);
        }

        removeContainer(pool) {
          if (pool._poolHandle === -1) return;
          this._pools[this._pools.length - 1]._poolHandle = pool._poolHandle;
          fastRemoveAt(this._pools, pool._poolHandle);
          pool._poolHandle = -1;
        }

        tryShrink() {
          for (let i = 0; i < this._pools.length; i++) {
            this._pools[i].tryShrink();
          }
        }

        update(dt) {
          this._lastShrinkPassed += dt;

          if (this._lastShrinkPassed > this.shrinkTimeSpan) {
            this.tryShrink();
            this._lastShrinkPassed -= this.shrinkTimeSpan;
          }
        }

      }

      const scalableContainerManager = new ScalableContainerManager();

      class Pool$1 extends ScalableContainer {
        constructor(ctor, elementsPerBatch, dtor) {
          super();
          this._ctor = void 0;
          this._elementsPerBatch = void 0;
          this._nextAvail = void 0;
          this._freePool = [];
          this._dtor = void 0;
          this._ctor = ctor;
          this._dtor = dtor || null;
          this._elementsPerBatch = Math.max(elementsPerBatch, 1);
          this._nextAvail = this._elementsPerBatch - 1;

          for (let i = 0; i < this._elementsPerBatch; ++i) {
            this._freePool.push(ctor());
          }
        }

        alloc() {
          if (this._nextAvail < 0) {
            this._freePool.length = this._elementsPerBatch;

            for (let i = 0; i < this._elementsPerBatch; i++) {
              this._freePool[i] = this._ctor();
            }

            this._nextAvail = this._elementsPerBatch - 1;
          }

          return this._freePool[this._nextAvail--];
        }

        free(obj) {
          this._freePool[++this._nextAvail] = obj;
        }

        freeArray(objs) {
          this._freePool.length = this._nextAvail + 1;
          Array.prototype.push.apply(this._freePool, objs);
          this._nextAvail += objs.length;
        }

        tryShrink() {
          if (this._nextAvail >> 1 > this._elementsPerBatch) {
            if (this._dtor) {
              for (let i = this._nextAvail >> 1; i <= this._nextAvail; i++) {
                this._dtor(this._freePool[i]);
              }
            }

            this._freePool.length = this._nextAvail >> 1;
            this._nextAvail = this._freePool.length - 1;
          }
        }

        destroy() {
          const dtor = arguments.length > 0 ? arguments[0] : null;

          if (dtor) {
            warnID(14100);
          }

          const readDtor = dtor || this._dtor;

          if (readDtor) {
            for (let i = 0; i <= this._nextAvail; i++) {
              readDtor(this._freePool[i]);
            }
          }

          this._freePool.length = 0;
          this._nextAvail = -1;
          super.destroy();
        }

      } exports('P', Pool$1);

      class System {
        constructor() {
          this._id = '';
          this._priority = 0;
          this._executeInEditMode = false;
        }

        set priority(value) {
          this._priority = value;
        }

        get priority() {
          return this._priority;
        }

        set id(id) {
          this._id = id;
        }

        get id() {
          return this._id;
        }

        static sortByPriority(a, b) {
          if (a._priority < b._priority) {
            return 1;
          } else if (a._priority > b.priority) {
            return -1;
          } else {
            return 0;
          }
        }

        init() {}

        update(dt) {}

        postUpdate(dt) {}

        destroy() {}

      } exports('bV', System);
      System.Priority = Enum({
        LOW: 0,
        MEDIUM: 100,
        HIGH: 200,
        SCHEDULER: 1 << 31 >>> 0
      });

      const MAX_POOL_SIZE = 20;
      const idGenerator = new IDGenerator('Scheduler');

      class ListEntry {
        constructor(target, priority, paused, markedForDeletion) {
          this.target = void 0;
          this.priority = void 0;
          this.paused = void 0;
          this.markedForDeletion = void 0;
          this.target = target;
          this.priority = priority;
          this.paused = paused;
          this.markedForDeletion = markedForDeletion;
        }

      }

      ListEntry.get = (target, priority, paused, markedForDeletion) => {
        let result = ListEntry._listEntries.pop();

        if (result) {
          result.target = target;
          result.priority = priority;
          result.paused = paused;
          result.markedForDeletion = markedForDeletion;
        } else {
          result = new ListEntry(target, priority, paused, markedForDeletion);
        }

        return result;
      };

      ListEntry.put = entry => {
        if (ListEntry._listEntries.length < MAX_POOL_SIZE) {
          entry.target = null;

          ListEntry._listEntries.push(entry);
        }
      };

      ListEntry._listEntries = [];

      class HashUpdateEntry {
        constructor(list, entry, target, callback) {
          this.list = void 0;
          this.entry = void 0;
          this.target = void 0;
          this.callback = void 0;
          this.list = list;
          this.entry = entry;
          this.target = target;
          this.callback = callback;
        }

      }

      HashUpdateEntry.get = (list, entry, target, callback) => {
        let result = HashUpdateEntry._hashUpdateEntries.pop();

        if (result) {
          result.list = list;
          result.entry = entry;
          result.target = target;
          result.callback = callback;
        } else {
          result = new HashUpdateEntry(list, entry, target, callback);
        }

        return result;
      };

      HashUpdateEntry.put = entry => {
        if (HashUpdateEntry._hashUpdateEntries.length < MAX_POOL_SIZE) {
          entry.list = entry.entry = entry.target = entry.callback = null;

          HashUpdateEntry._hashUpdateEntries.push(entry);
        }
      };

      HashUpdateEntry._hashUpdateEntries = [];

      class HashTimerEntry {
        constructor(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) {
          this.timers = void 0;
          this.target = void 0;
          this.timerIndex = void 0;
          this.currentTimer = void 0;
          this.currentTimerSalvaged = void 0;
          this.paused = void 0;
          this.timers = timers;
          this.target = target;
          this.timerIndex = timerIndex;
          this.currentTimer = currentTimer;
          this.currentTimerSalvaged = currentTimerSalvaged;
          this.paused = paused;
        }

      }

      HashTimerEntry.get = (timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) => {
        let result = HashTimerEntry._hashTimerEntries.pop();

        if (result) {
          result.timers = timers;
          result.target = target;
          result.timerIndex = timerIndex;
          result.currentTimer = currentTimer;
          result.currentTimerSalvaged = currentTimerSalvaged;
          result.paused = paused;
        } else {
          result = new HashTimerEntry(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused);
        }

        return result;
      };

      HashTimerEntry.put = entry => {
        if (HashTimerEntry._hashTimerEntries.length < MAX_POOL_SIZE) {
          entry.timers = entry.target = entry.currentTimer = null;

          HashTimerEntry._hashTimerEntries.push(entry);
        }
      };

      HashTimerEntry._hashTimerEntries = [];

      class CallbackTimer {
        constructor() {
          this._lock = void 0;
          this._scheduler = void 0;
          this._elapsed = void 0;
          this._runForever = void 0;
          this._useDelay = void 0;
          this._timesExecuted = void 0;
          this._repeat = void 0;
          this._delay = void 0;
          this._interval = void 0;
          this._target = void 0;
          this._callback = void 0;
          this._lock = false;
          this._scheduler = null;
          this._elapsed = -1;
          this._runForever = false;
          this._useDelay = false;
          this._timesExecuted = 0;
          this._repeat = 0;
          this._delay = 0;
          this._interval = 0;
          this._target = null;
          this._callback = null;
        }

        initWithCallback(scheduler, callback, target, seconds, repeat, delay) {
          this._lock = false;
          this._scheduler = scheduler;
          this._target = target;
          this._callback = callback;
          this._elapsed = -1;
          this._interval = seconds;
          this._delay = delay;
          this._useDelay = this._delay > 0;
          this._repeat = repeat;
          this._runForever = this._repeat === legacyCC.macro.REPEAT_FOREVER;
          return true;
        }

        getInterval() {
          return this._interval;
        }

        setInterval(interval) {
          this._interval = interval;
        }

        update(dt) {
          if (this._elapsed === -1) {
            this._elapsed = 0;
            this._timesExecuted = 0;
          } else {
            this._elapsed += dt;

            if (this._runForever && !this._useDelay) {
              if (this._elapsed >= this._interval) {
                this.trigger();
                this._elapsed = 0;
              }
            } else {
              if (this._useDelay) {
                if (this._elapsed >= this._delay) {
                  this.trigger();
                  this._elapsed -= this._delay;
                  this._timesExecuted += 1;
                  this._useDelay = false;
                }
              } else if (this._elapsed >= this._interval) {
                this.trigger();
                this._elapsed = 0;
                this._timesExecuted += 1;
              }

              if (this._callback && !this._runForever && this._timesExecuted > this._repeat) {
                this.cancel();
              }
            }
          }
        }

        getCallback() {
          return this._callback;
        }

        trigger() {
          if (this._target && this._callback) {
            this._lock = true;

            this._callback.call(this._target, this._elapsed);

            this._lock = false;
          }
        }

        cancel() {
          this._scheduler.unschedule(this._callback, this._target);
        }

      }

      CallbackTimer._timers = [];

      CallbackTimer.get = () => CallbackTimer._timers.pop() || new CallbackTimer();

      CallbackTimer.put = timer => {
        if (CallbackTimer._timers.length < MAX_POOL_SIZE && !timer._lock) {
          timer._scheduler = timer._target = timer._callback = null;

          CallbackTimer._timers.push(timer);
        }
      };

      class Scheduler extends System {
        static enableForTarget(target) {
          let found = false;

          if (target.uuid) {
            found = true;
          } else if (target.id) {
            found = true;
          }

          if (!found) {
            if (target.__instanceId) {
              warnID(1513);
            } else {
              target.id = idGenerator.getNewId();
            }
          }
        }

        constructor() {
          super();
          this._timeScale = void 0;
          this._updatesNegList = void 0;
          this._updates0List = void 0;
          this._updatesPosList = void 0;
          this._hashForUpdates = void 0;
          this._hashForTimers = void 0;
          this._currentTarget = void 0;
          this._currentTargetSalvaged = void 0;
          this._updateHashLocked = void 0;
          this._arrayForTimers = void 0;
          this._timeScale = 1.0;
          this._updatesNegList = [];
          this._updates0List = [];
          this._updatesPosList = [];
          this._hashForUpdates = createMap(true);
          this._hashForTimers = createMap(true);
          this._currentTarget = null;
          this._currentTargetSalvaged = false;
          this._updateHashLocked = false;
          this._arrayForTimers = [];
        }

        setTimeScale(timeScale) {
          this._timeScale = timeScale;
        }

        getTimeScale() {
          return this._timeScale;
        }

        update(dt) {
          this._updateHashLocked = true;

          if (this._timeScale !== 1) {
            dt *= this._timeScale;
          }

          let i;
          let list;
          let len;
          let entry;

          for (i = 0, list = this._updatesNegList, len = list.length; i < len; i++) {
            entry = list[i];

            if (!entry.paused && !entry.markedForDeletion) {
              entry.target.update(dt);
            }
          }

          for (i = 0, list = this._updates0List, len = list.length; i < len; i++) {
            entry = list[i];

            if (!entry.paused && !entry.markedForDeletion) {
              entry.target.update(dt);
            }
          }

          for (i = 0, list = this._updatesPosList, len = list.length; i < len; i++) {
            entry = list[i];

            if (!entry.paused && !entry.markedForDeletion) {
              entry.target.update(dt);
            }
          }

          let elt;
          const arr = this._arrayForTimers;

          for (i = 0; i < arr.length; i++) {
            elt = arr[i];
            this._currentTarget = elt;
            this._currentTargetSalvaged = false;

            if (!elt.paused) {
              for (elt.timerIndex = 0; elt.timerIndex < elt.timers.length; ++elt.timerIndex) {
                elt.currentTimer = elt.timers[elt.timerIndex];
                elt.currentTimerSalvaged = false;
                elt.currentTimer.update(dt);
                elt.currentTimer = null;
              }
            }

            if (this._currentTargetSalvaged && this._currentTarget.timers.length === 0) {
              this._removeHashElement(this._currentTarget);

              --i;
            }
          }

          for (i = 0, list = this._updatesNegList; i < list.length;) {
            entry = list[i];

            if (entry.markedForDeletion) {
              this._removeUpdateFromHash(entry);
            } else {
              i++;
            }
          }

          for (i = 0, list = this._updates0List; i < list.length;) {
            entry = list[i];

            if (entry.markedForDeletion) {
              this._removeUpdateFromHash(entry);
            } else {
              i++;
            }
          }

          for (i = 0, list = this._updatesPosList; i < list.length;) {
            entry = list[i];

            if (entry.markedForDeletion) {
              this._removeUpdateFromHash(entry);
            } else {
              i++;
            }
          }

          this._updateHashLocked = false;
          this._currentTarget = null;
        }

        schedule(callback, target, interval, repeat, delay, paused) {
          if (typeof callback !== 'function') {
            const tmp = callback;
            callback = target;
            target = tmp;
          }

          if (arguments.length === 3 || arguments.length === 4 || arguments.length === 5) {
            paused = !!repeat;
            repeat = legacyCC.macro.REPEAT_FOREVER;
            delay = 0;
          }

          assertID(target, 1502);
          const targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          let element = this._hashForTimers[targetId];

          if (!element) {
            element = HashTimerEntry.get(null, target, 0, null, null, paused);

            this._arrayForTimers.push(element);

            this._hashForTimers[targetId] = element;
          } else if (element.paused !== paused) {
            warnID(1511);
          }

          let timer;
          let i;

          if (element.timers == null) {
            element.timers = [];
          } else {
            for (i = 0; i < element.timers.length; ++i) {
              timer = element.timers[i];

              if (timer && callback === timer._callback) {
                logID(1507, timer.getInterval(), interval);
                timer._interval = interval;
                return;
              }
            }
          }

          timer = CallbackTimer.get();
          timer.initWithCallback(this, callback, target, interval, repeat, delay);
          element.timers.push(timer);

          if (this._currentTarget === element && this._currentTargetSalvaged) {
            this._currentTargetSalvaged = false;
          }
        }

        scheduleUpdate(target, priority, paused) {
          const targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          const hashElement = this._hashForUpdates[targetId];

          if (hashElement && hashElement.entry) {
            if (hashElement.entry.priority !== priority) {
              if (this._updateHashLocked) {
                logID(1506);
                hashElement.entry.markedForDeletion = false;
                hashElement.entry.paused = paused;
                return;
              } else {
                this.unscheduleUpdate(target);
              }
            } else {
              hashElement.entry.markedForDeletion = false;
              hashElement.entry.paused = paused;
              return;
            }
          }

          const listElement = ListEntry.get(target, priority, paused, false);
          let ppList;

          if (priority === 0) {
            ppList = this._updates0List;

            this._appendIn(ppList, listElement);
          } else {
            ppList = priority < 0 ? this._updatesNegList : this._updatesPosList;

            this._priorityIn(ppList, listElement, priority);
          }

          this._hashForUpdates[targetId] = HashUpdateEntry.get(ppList, listElement, target, null);
        }

        unschedule(callback, target) {
          if (!target || !callback) {
            return;
          }

          const targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          const element = this._hashForTimers[targetId];

          if (element) {
            const timers = element.timers;

            for (let i = 0, li = timers.length; i < li; i++) {
              const timer = timers[i];

              if (callback === timer._callback) {
                if (timer === element.currentTimer && !element.currentTimerSalvaged) {
                  element.currentTimerSalvaged = true;
                }

                timers.splice(i, 1);
                CallbackTimer.put(timer);

                if (element.timerIndex >= i) {
                  element.timerIndex--;
                }

                if (timers.length === 0) {
                  if (this._currentTarget === element) {
                    this._currentTargetSalvaged = true;
                  } else {
                    this._removeHashElement(element);
                  }
                }

                return;
              }
            }
          }
        }

        unscheduleUpdate(target) {
          if (!target) {
            return;
          }

          const targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          const element = this._hashForUpdates[targetId];

          if (element) {
            if (this._updateHashLocked) {
              element.entry.markedForDeletion = true;
            } else {
              this._removeUpdateFromHash(element.entry);
            }
          }
        }

        unscheduleAllForTarget(target) {
          if (!target) {
            return;
          }

          const targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          const element = this._hashForTimers[targetId];

          if (element) {
            const timers = element.timers;

            if (timers.indexOf(element.currentTimer) > -1 && !element.currentTimerSalvaged) {
              element.currentTimerSalvaged = true;
            }

            for (let i = 0, l = timers.length; i < l; i++) {
              CallbackTimer.put(timers[i]);
            }

            timers.length = 0;

            if (this._currentTarget === element) {
              this._currentTargetSalvaged = true;
            } else {
              this._removeHashElement(element);
            }
          }

          this.unscheduleUpdate(target);
        }

        unscheduleAll() {
          this.unscheduleAllWithMinPriority(System.Priority.SCHEDULER);
        }

        unscheduleAllWithMinPriority(minPriority) {
          let i;
          let element;
          const arr = this._arrayForTimers;

          for (i = arr.length - 1; i >= 0; i--) {
            element = arr[i];
            this.unscheduleAllForTarget(element.target);
          }

          let entry;
          let temp_length = 0;

          if (minPriority < 0) {
            for (i = 0; i < this._updatesNegList.length;) {
              temp_length = this._updatesNegList.length;
              entry = this._updatesNegList[i];

              if (entry && entry.priority >= minPriority) {
                this.unscheduleUpdate(entry.target);
              }

              if (temp_length === this._updatesNegList.length) {
                i++;
              }
            }
          }

          if (minPriority <= 0) {
            for (i = 0; i < this._updates0List.length;) {
              temp_length = this._updates0List.length;
              entry = this._updates0List[i];

              if (entry) {
                this.unscheduleUpdate(entry.target);
              }

              if (temp_length === this._updates0List.length) {
                i++;
              }
            }
          }

          for (i = 0; i < this._updatesPosList.length;) {
            temp_length = this._updatesPosList.length;
            entry = this._updatesPosList[i];

            if (entry && entry.priority >= minPriority) {
              this.unscheduleUpdate(entry.target);
            }

            if (temp_length === this._updatesPosList.length) {
              i++;
            }
          }
        }

        isScheduled(callback, target) {
          assertID(callback, 1508);
          assertID(target, 1509);
          const targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return false;
          }

          const element = this._hashForTimers[targetId];

          if (!element) {
            return false;
          }

          if (element.timers == null) {
            return false;
          } else {
            const timers = element.timers;

            for (let i = 0; i < timers.length; ++i) {
              const timer = timers[i];

              if (callback === timer._callback) {
                return true;
              }
            }

            return false;
          }
        }

        pauseAllTargets() {
          return this.pauseAllTargetsWithMinPriority(System.Priority.SCHEDULER);
        }

        pauseAllTargetsWithMinPriority(minPriority) {
          const idsWithSelectors = [];
          let element;
          const locArrayForTimers = this._arrayForTimers;
          let i;
          let li;

          for (i = 0, li = locArrayForTimers.length; i < li; i++) {
            element = locArrayForTimers[i];

            if (element) {
              element.paused = true;
              idsWithSelectors.push(element.target);
            }
          }

          let entry;

          if (minPriority < 0) {
            for (i = 0; i < this._updatesNegList.length; i++) {
              entry = this._updatesNegList[i];

              if (entry) {
                if (entry.priority >= minPriority) {
                  entry.paused = true;
                  idsWithSelectors.push(entry.target);
                }
              }
            }
          }

          if (minPriority <= 0) {
            for (i = 0; i < this._updates0List.length; i++) {
              entry = this._updates0List[i];

              if (entry) {
                entry.paused = true;
                idsWithSelectors.push(entry.target);
              }
            }
          }

          for (i = 0; i < this._updatesPosList.length; i++) {
            entry = this._updatesPosList[i];

            if (entry) {
              if (entry.priority >= minPriority) {
                entry.paused = true;
                idsWithSelectors.push(entry.target);
              }
            }
          }

          return idsWithSelectors;
        }

        resumeTargets(targetsToResume) {
          if (!targetsToResume) {
            return;
          }

          for (let i = 0; i < targetsToResume.length; i++) {
            this.resumeTarget(targetsToResume[i]);
          }
        }

        pauseTarget(target) {
          assertID(target, 1503);
          const targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          const element = this._hashForTimers[targetId];

          if (element) {
            element.paused = true;
          }

          const elementUpdate = this._hashForUpdates[targetId];

          if (elementUpdate) {
            elementUpdate.entry.paused = true;
          }
        }

        resumeTarget(target) {
          assertID(target, 1504);
          const targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          const element = this._hashForTimers[targetId];

          if (element) {
            element.paused = false;
          }

          const elementUpdate = this._hashForUpdates[targetId];

          if (elementUpdate) {
            elementUpdate.entry.paused = false;
          }
        }

        isTargetPaused(target) {
          assertID(target, 1505);
          const targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return false;
          }

          const element = this._hashForTimers[targetId];

          if (element) {
            return element.paused;
          }

          const elementUpdate = this._hashForUpdates[targetId];

          if (elementUpdate) {
            return elementUpdate.entry.paused;
          }

          return false;
        }

        _removeHashElement(element) {
          const targetId = element.target.uuid || element.target.id;
          delete this._hashForTimers[targetId];
          const arr = this._arrayForTimers;

          for (let i = 0, l = arr.length; i < l; i++) {
            if (arr[i] === element) {
              arr.splice(i, 1);
              break;
            }
          }

          HashTimerEntry.put(element);
        }

        _removeUpdateFromHash(entry) {
          const targetId = entry.target.uuid || entry.target.id;
          const element = this._hashForUpdates[targetId];

          if (element) {
            const list = element.list;
            const listEntry = element.entry;

            for (let i = 0, l = list.length; i < l; i++) {
              if (list[i] === listEntry) {
                list.splice(i, 1);
                break;
              }
            }

            delete this._hashForUpdates[targetId];
            ListEntry.put(listEntry);
            HashUpdateEntry.put(element);
          }
        }

        _priorityIn(ppList, listElement, priority) {
          for (let i = 0; i < ppList.length; i++) {
            if (priority < ppList[i].priority) {
              ppList.splice(i, 0, listElement);
              return;
            }
          }

          ppList.push(listElement);
        }

        _appendIn(ppList, listElement) {
          ppList.push(listElement);
        }

      } exports('eg', Scheduler);
      Scheduler.ID = 'scheduler';
      legacyCC.Scheduler = Scheduler;

      const vmath = {};
      replaceProperty(vmath, 'vmath', [{
        name: 'vec2',
        newName: 'Vec2',
        target: math,
        targetName: 'math'
      }, {
        name: 'vec3',
        newName: 'Vec3',
        target: math,
        targetName: 'math'
      }, {
        name: 'vec4',
        newName: 'Vec4',
        target: math,
        targetName: 'math'
      }, {
        name: 'quat',
        newName: 'Quat',
        target: math,
        targetName: 'math'
      }, {
        name: 'mat3',
        newName: 'Mat3',
        target: math,
        targetName: 'math'
      }, {
        name: 'mat4',
        newName: 'Mat4',
        target: math,
        targetName: 'math'
      }, {
        name: 'color4',
        newName: 'Color',
        target: math,
        targetName: 'math'
      }, {
        name: 'rect',
        newName: 'Rect',
        target: math,
        targetName: 'math'
      }, {
        name: 'approx',
        newName: 'approx',
        target: math,
        targetName: 'math'
      }, {
        name: 'EPSILON',
        newName: 'EPSILON',
        target: math,
        targetName: 'math'
      }, {
        name: 'equals',
        newName: 'equals',
        target: math,
        targetName: 'math'
      }, {
        name: 'clamp',
        newName: 'clamp',
        target: math,
        targetName: 'math'
      }, {
        name: 'clamp01',
        newName: 'clamp01',
        target: math,
        targetName: 'math'
      }, {
        name: 'lerp',
        newName: 'lerp',
        target: math,
        targetName: 'math'
      }, {
        name: 'toRadian',
        newName: 'toRadian',
        target: math,
        targetName: 'math'
      }, {
        name: 'toDegree',
        newName: 'toDegree',
        target: math,
        targetName: 'math'
      }, {
        name: 'random',
        newName: 'random',
        target: math,
        targetName: 'math'
      }, {
        name: 'randomRange',
        newName: 'randomRange',
        target: math,
        targetName: 'math'
      }, {
        name: 'randomRangeInt',
        newName: 'randomRangeInt',
        target: math,
        targetName: 'math'
      }, {
        name: 'pseudoRandom',
        newName: 'pseudoRandom',
        target: math,
        targetName: 'math'
      }, {
        name: 'pseudoRandomRangeInt',
        newName: 'pseudoRandomRangeInt',
        target: math,
        targetName: 'math'
      }, {
        name: 'nextPow2',
        newName: 'nextPow2',
        target: math,
        targetName: 'math'
      }, {
        name: 'repeat',
        newName: 'repeat',
        target: math,
        targetName: 'math'
      }, {
        name: 'pingPong',
        newName: 'pingPong',
        target: math,
        targetName: 'math'
      }, {
        name: 'inverseLerp',
        newName: 'inverseLerp',
        target: math,
        targetName: 'math'
      }]);
      legacyCC.vmath = vmath;
      replaceProperty(Scheduler.prototype, 'Scheduler.prototype', [{
        name: 'enableForTarget',
        newName: 'enableForTarget',
        target: Scheduler,
        targetName: 'Scheduler'
      }]);
      replaceProperty(Scheduler, 'Scheduler', [{
        name: 'PRIORITY_SYSTEM',
        newName: 'System.Priority.SCHEDULER',

        customGetter() {
          return System.Priority.SCHEDULER;
        }

      }]);
      removeProperty(Scheduler, 'Scheduler', [{
        name: 'PRIORITY_NON_SYSTEM',
        suggest: 'Use enum` System.Priority` instead'
      }]);

      deprecateModuleExportedName({
        replaceProperty: {
          since: '3.6.0',
          removed: false
        },
        removeProperty: {
          since: '3.6.0',
          removed: false
        },
        markAsWarning: {
          since: '3.6.0',
          removed: false
        },
        setDefaultLogTimes: {
          since: '3.6.0',
          removed: false
        }
      });

      const fastRemoveAt$1 = fastRemoveAt;

      function empty() {}

      class CallbackInfo {
        constructor() {
          this.callback = empty;
          this.target = undefined;
          this.once = false;
        }

        set(callback, target, once) {
          this.callback = callback || empty;
          this.target = target;
          this.once = !!once;
        }

        reset() {
          this.target = undefined;
          this.callback = empty;
          this.once = false;
        }

        check() {
          if (isCCObject(this.target) && !isValid(this.target, true)) {
            return false;
          } else {
            return true;
          }
        }

      }

      const callbackInfoPool = new Pool$1(() => new CallbackInfo(), 32);
      class CallbackList {
        constructor() {
          this.callbackInfos = [];
          this.isInvoking = false;
          this.containCanceled = false;
        }

        removeByCallback(cb) {
          for (let i = 0; i < this.callbackInfos.length; ++i) {
            const info = this.callbackInfos[i];

            if (info && info.callback === cb) {
              info.reset();
              callbackInfoPool.free(info);
              fastRemoveAt$1(this.callbackInfos, i);
              --i;
            }
          }
        }

        removeByTarget(target) {
          for (let i = 0; i < this.callbackInfos.length; ++i) {
            const info = this.callbackInfos[i];

            if (info && info.target === target) {
              info.reset();
              callbackInfoPool.free(info);
              fastRemoveAt$1(this.callbackInfos, i);
              --i;
            }
          }
        }

        cancel(index) {
          const info = this.callbackInfos[index];

          if (info) {
            info.reset();

            if (this.isInvoking) {
              this.callbackInfos[index] = null;
            } else {
              fastRemoveAt$1(this.callbackInfos, index);
            }

            callbackInfoPool.free(info);
          }

          this.containCanceled = true;
        }

        cancelAll() {
          for (let i = 0; i < this.callbackInfos.length; i++) {
            const info = this.callbackInfos[i];

            if (info) {
              info.reset();
              callbackInfoPool.free(info);
              this.callbackInfos[i] = null;
            }
          }

          this.containCanceled = true;
        }

        purgeCanceled() {
          for (let i = this.callbackInfos.length - 1; i >= 0; --i) {
            const info = this.callbackInfos[i];

            if (!info) {
              fastRemoveAt$1(this.callbackInfos, i);
            }
          }

          this.containCanceled = false;
        }

        clear() {
          this.cancelAll();
          this.callbackInfos.length = 0;
          this.isInvoking = false;
          this.containCanceled = false;
        }

      }
      const MAX_SIZE = 16;
      const callbackListPool = new Pool$1(() => new CallbackList(), MAX_SIZE);
      class CallbacksInvoker {
        constructor() {
          this._callbackTable = createMap(true);
          this._offCallback = void 0;
        }

        on(key, callback, target, once) {
          if (!this.hasEventListener(key, callback, target)) {
            let list = this._callbackTable[key];

            if (!list) {
              list = this._callbackTable[key] = callbackListPool.alloc();
            }

            const info = callbackInfoPool.alloc();
            info.set(callback, target, once);
            list.callbackInfos.push(info);
          }

          return callback;
        }

        hasEventListener(key, callback, target) {
          const list = this._callbackTable && this._callbackTable[key];

          if (!list) {
            return false;
          }

          const infos = list.callbackInfos;

          if (!callback) {
            if (list.isInvoking) {
              for (let i = 0; i < infos.length; ++i) {
                if (infos[i]) {
                  return true;
                }
              }

              return false;
            } else {
              return infos.length > 0;
            }
          }

          for (let i = 0; i < infos.length; ++i) {
            const info = infos[i];

            if (info && info.check() && info.callback === callback && info.target === target) {
              return true;
            }
          }

          return false;
        }

        removeAll(keyOrTarget) {
          const type = typeof keyOrTarget;

          if (type === 'string' || type === 'number') {
            const list = this._callbackTable && this._callbackTable[keyOrTarget];

            if (list) {
              if (list.isInvoking) {
                list.cancelAll();
              } else {
                list.clear();
                callbackListPool.free(list);
                delete this._callbackTable[keyOrTarget];
              }
            }
          } else if (keyOrTarget) {
            for (const key in this._callbackTable) {
              const list = this._callbackTable[key];

              if (list.isInvoking) {
                const infos = list.callbackInfos;

                for (let i = 0; i < infos.length; ++i) {
                  const info = infos[i];

                  if (info && info.target === keyOrTarget) {
                    list.cancel(i);
                  }
                }
              } else {
                list.removeByTarget(keyOrTarget);
              }
            }
          }
        }

        off(key, callback, target) {
          var _this$_offCallback;

          const list = this._callbackTable && this._callbackTable[key];

          if (list) {
            const infos = list.callbackInfos;

            if (callback) {
              for (let i = 0; i < infos.length; ++i) {
                const info = infos[i];

                if (info && info.callback === callback && info.target === target) {
                  list.cancel(i);
                  break;
                }
              }
            } else {
              this.removeAll(key);
            }
          }

          (_this$_offCallback = this._offCallback) === null || _this$_offCallback === void 0 ? void 0 : _this$_offCallback.call(this);
        }

        emit(key, arg0, arg1, arg2, arg3, arg4) {
          const list = this._callbackTable && this._callbackTable[key];

          if (list) {
            const rootInvoker = !list.isInvoking;
            list.isInvoking = true;
            const infos = list.callbackInfos;

            for (let i = 0, len = infos.length; i < len; ++i) {
              const info = infos[i];

              if (info) {
                const callback = info.callback;
                const target = info.target;

                if (info.once) {
                  this.off(key, callback, target);
                }

                if (!info.check()) {
                  this.off(key, callback, target);
                } else if (target) {
                  callback.call(target, arg0, arg1, arg2, arg3, arg4);
                } else {
                  callback(arg0, arg1, arg2, arg3, arg4);
                }
              }
            }

            if (rootInvoker) {
              list.isInvoking = false;

              if (list.containCanceled) {
                list.purgeCanceled();
              }
            }
          }
        }

        clear() {
          for (const key in this._callbackTable) {
            const list = this._callbackTable[key];

            if (list) {
              list.clear();
              callbackListPool.free(list);
              delete this._callbackTable[key];
            }
          }
        }

        _registerOffCallback(cb) {
          this._offCallback = cb;
        }

      } exports('fV', CallbacksInvoker);

      function Eventify(base) {
        class Eventified extends base {
          constructor(...args) {
            super(...args);
            this._callbackTable = createMap(true);
          }

          once(type, callback, target) {
            return this.on(type, callback, target, true);
          }

          targetOff(typeOrTarget) {
            this.removeAll(typeOrTarget);
          }

        }

        const callbacksInvokerPrototype = CallbacksInvoker.prototype;
        const propertyKeys = Object.getOwnPropertyNames(callbacksInvokerPrototype).concat(Object.getOwnPropertySymbols(callbacksInvokerPrototype));

        for (let iPropertyKey = 0; iPropertyKey < propertyKeys.length; ++iPropertyKey) {
          const propertyKey = propertyKeys[iPropertyKey];

          if (!(propertyKey in Eventified.prototype)) {
            const propertyDescriptor = Object.getOwnPropertyDescriptor(callbacksInvokerPrototype, propertyKey);

            if (propertyDescriptor) {
              Object.defineProperty(Eventified.prototype, propertyKey, propertyDescriptor);
            }
          }
        }

        return Eventified;
      }

      class Empty$1 {}

      const EventTarget = exports('dt', Eventify(Empty$1));
      legacyCC.EventTarget = EventTarget;

      class AsyncDelegate {
        constructor() {
          this._delegates = [];
        }

        add(callback) {
          if (!this._delegates.includes(callback)) {
            this._delegates.push(callback);
          }
        }

        hasListener(callback) {
          return this._delegates.includes(callback);
        }

        remove(callback) {
          fastRemove(this._delegates, callback);
        }

        dispatch(...args) {
          return Promise.all(this._delegates.map(func => func(...arguments)).filter(Boolean));
        }

      } exports('fB', AsyncDelegate);

      let BrowserType;

      (function (BrowserType) {
        BrowserType["UNKNOWN"] = "unknown";
        BrowserType["WECHAT"] = "wechat";
        BrowserType["ANDROID"] = "androidbrowser";
        BrowserType["IE"] = "ie";
        BrowserType["EDGE"] = "edge";
        BrowserType["QQ"] = "qqbrowser";
        BrowserType["MOBILE_QQ"] = "mqqbrowser";
        BrowserType["UC"] = "ucbrowser";
        BrowserType["UCBS"] = "ucbs";
        BrowserType["BROWSER_360"] = "360browser";
        BrowserType["BAIDU_APP"] = "baiduboxapp";
        BrowserType["BAIDU"] = "baidubrowser";
        BrowserType["MAXTHON"] = "maxthon";
        BrowserType["OPERA"] = "opera";
        BrowserType["OUPENG"] = "oupeng";
        BrowserType["MIUI"] = "miuibrowser";
        BrowserType["FIREFOX"] = "firefox";
        BrowserType["SAFARI"] = "safari";
        BrowserType["CHROME"] = "chrome";
        BrowserType["LIEBAO"] = "liebao";
        BrowserType["QZONE"] = "qzone";
        BrowserType["SOUGOU"] = "sogou";
        BrowserType["HUAWEI"] = "huawei";
      })(BrowserType || (BrowserType = exports('ek', {})));

      let Language;

      (function (Language) {
        Language["UNKNOWN"] = "unknown";
        Language["ENGLISH"] = "en";
        Language["CHINESE"] = "zh";
        Language["FRENCH"] = "fr";
        Language["ITALIAN"] = "it";
        Language["GERMAN"] = "de";
        Language["SPANISH"] = "es";
        Language["DUTCH"] = "du";
        Language["RUSSIAN"] = "ru";
        Language["KOREAN"] = "ko";
        Language["JAPANESE"] = "ja";
        Language["HUNGARIAN"] = "hu";
        Language["PORTUGUESE"] = "pt";
        Language["ARABIC"] = "ar";
        Language["NORWEGIAN"] = "no";
        Language["POLISH"] = "pl";
        Language["TURKISH"] = "tr";
        Language["UKRAINIAN"] = "uk";
        Language["ROMANIAN"] = "ro";
        Language["BULGARIAN"] = "bg";
        Language["HINDI"] = "hi";
      })(Language || (Language = {}));

      let NetworkType;

      (function (NetworkType) {
        NetworkType[NetworkType["NONE"] = 0] = "NONE";
        NetworkType[NetworkType["LAN"] = 1] = "LAN";
        NetworkType[NetworkType["WWAN"] = 2] = "WWAN";
      })(NetworkType || (NetworkType = {}));

      let OS;

      (function (OS) {
        OS["UNKNOWN"] = "Unknown";
        OS["IOS"] = "iOS";
        OS["ANDROID"] = "Android";
        OS["WINDOWS"] = "Windows";
        OS["LINUX"] = "Linux";
        OS["OSX"] = "OS X";
        OS["OHOS"] = "OHOS";
      })(OS || (OS = exports('ej', {})));

      let Platform;

      (function (Platform) {
        Platform["UNKNOWN"] = "UNKNOWN";
        Platform["EDITOR_PAGE"] = "EDITOR_PAGE";
        Platform["EDITOR_CORE"] = "EDITOR_CORE";
        Platform["MOBILE_BROWSER"] = "MOBILE_BROWSER";
        Platform["DESKTOP_BROWSER"] = "DESKTOP_BROWSER";
        Platform["WIN32"] = "WIN32";
        Platform["ANDROID"] = "ANDROID";
        Platform["IOS"] = "IOS";
        Platform["MACOS"] = "MACOS";
        Platform["OHOS"] = "OHOS";
        Platform["WECHAT_GAME"] = "WECHAT_GAME";
        Platform["WECHAT_MINI_PROGRAM"] = "WECHAT_MINI_PROGRAM";
        Platform["BAIDU_MINI_GAME"] = "BAIDU_MINI_GAME";
        Platform["XIAOMI_QUICK_GAME"] = "XIAOMI_QUICK_GAME";
        Platform["ALIPAY_MINI_GAME"] = "ALIPAY_MINI_GAME";
        Platform["TAOBAO_CREATIVE_APP"] = "TAOBAO_CREATIVE_APP";
        Platform["TAOBAO_MINI_GAME"] = "TAOBAO_MINI_GAME";
        Platform["BYTEDANCE_MINI_GAME"] = "BYTEDANCE_MINI_GAME";
        Platform["OPPO_MINI_GAME"] = "OPPO_MINI_GAME";
        Platform["VIVO_MINI_GAME"] = "VIVO_MINI_GAME";
        Platform["HUAWEI_QUICK_GAME"] = "HUAWEI_QUICK_GAME";
        Platform["COCOSPLAY"] = "COCOSPLAY";
        Platform["LINKSURE_MINI_GAME"] = "LINKSURE_MINI_GAME";
        Platform["QTT_MINI_GAME"] = "QTT_MINI_GAME";
      })(Platform || (Platform = exports('e0', {})));

      let Feature;

      (function (Feature) {
        Feature["WEBP"] = "WEBP";
        Feature["IMAGE_BITMAP"] = "IMAGE_BITMAP";
        Feature["WEB_VIEW"] = "WEB_VIEW";
        Feature["VIDEO_PLAYER"] = "VIDEO_PLAYER";
        Feature["SAFE_AREA"] = "SAFE_AREA";
        Feature["INPUT_TOUCH"] = "INPUT_TOUCH";
        Feature["EVENT_KEYBOARD"] = "EVENT_KEYBOARD";
        Feature["EVENT_MOUSE"] = "EVENT_MOUSE";
        Feature["EVENT_TOUCH"] = "EVENT_TOUCH";
        Feature["EVENT_ACCELEROMETER"] = "EVENT_ACCELEROMETER";
        Feature["EVENT_GAMEPAD"] = "EVENT_GAMEPAD";
        Feature["EVENT_HANDLE"] = "EVENT_HANDLE";
        Feature["EVENT_HMD"] = "EVENT_HMD";
        Feature["EVENT_HANDHELD"] = "EVENT_HANDHELD";
      })(Feature || (Feature = {}));

      const networkTypeMap = {
        0: NetworkType.NONE,
        1: NetworkType.LAN,
        2: NetworkType.WWAN
      };
      const platformMap = {
        0: Platform.WIN32,
        2: Platform.MACOS,
        3: Platform.ANDROID,
        4: Platform.IOS,
        5: Platform.IOS,
        6: Platform.OHOS
      };

      class SystemInfo extends EventTarget {
        get networkType() {
          return networkTypeMap[jsb.device.getNetworkType()];
        }

        constructor() {
          super();
          this.isNative = void 0;
          this.isBrowser = void 0;
          this.isMobile = void 0;
          this.isLittleEndian = void 0;
          this.platform = void 0;
          this.language = void 0;
          this.nativeLanguage = void 0;
          this.os = void 0;
          this.osVersion = void 0;
          this.osMainVersion = void 0;
          this.browserType = void 0;
          this.browserVersion = void 0;
          this.isXR = void 0;
          this._featureMap = void 0;
          this._initPromise = void 0;
          this.isNative = true;
          this.isBrowser = false;
          this.platform = platformMap[__getPlatform()];
          this.isMobile = this.platform === Platform.ANDROID || this.platform === Platform.IOS || this.platform === Platform.OHOS;

          this.isLittleEndian = (() => {
            const buffer = new ArrayBuffer(2);
            new DataView(buffer).setInt16(0, 256, true);
            return new Int16Array(buffer)[0] === 256;
          })();

          const currLanguage = __getCurrentLanguageCode();

          this.nativeLanguage = currLanguage ? currLanguage.toLowerCase() : Language.UNKNOWN;
          this.language = __getCurrentLanguage();
          this.os = __getOS();
          this.osVersion = __getOSVersion();
          this.osMainVersion = parseInt(this.osVersion);
          this.browserType = BrowserType.UNKNOWN;
          this.browserVersion = '';
          this.isXR = typeof xr !== 'undefined' && typeof xr.XrEntry !== 'undefined';
          this._featureMap = {
            [Feature.WEBP]: true,
            [Feature.IMAGE_BITMAP]: false,
            [Feature.WEB_VIEW]: this.isMobile,
            [Feature.VIDEO_PLAYER]: this.isMobile,
            [Feature.SAFE_AREA]: this.isMobile,
            [Feature.INPUT_TOUCH]: this.isMobile,
            [Feature.EVENT_KEYBOARD]: true,
            [Feature.EVENT_MOUSE]: !this.isMobile,
            [Feature.EVENT_TOUCH]: true,
            [Feature.EVENT_ACCELEROMETER]: this.isMobile,
            [Feature.EVENT_GAMEPAD]: true,
            [Feature.EVENT_HANDLE]: this.isXR,
            [Feature.EVENT_HMD]: this.isXR,
            [Feature.EVENT_HANDHELD]: typeof xr !== 'undefined' && typeof xr.ARModule !== 'undefined'
          };
          this._initPromise = [];

          this._registerEvent();
        }

        _registerEvent() {
          jsb.onPause = () => {
            this.emit('hide');
          };

          jsb.onResume = () => {
            this.emit('show');
          };

          jsb.onClose = () => {
            this.emit('close');
          };
        }

        _setFeature(feature, value) {
          return this._featureMap[feature] = value;
        }

        init() {
          return Promise.all(this._initPromise);
        }

        hasFeature(feature) {
          return this._featureMap[feature];
        }

        getBatteryLevel() {
          return jsb.device.getBatteryLevel();
        }

        triggerGC() {
          jsb.garbageCollect();
        }

        openURL(url) {
          jsb.openURL(url);
        }

        now() {
          if (Date.now) {
            return Date.now();
          }

          return +new Date();
        }

        restartJSVM() {
          __restartVM();
        }

        close() {
          __close();
        }

      }

      const systemInfo = exports('d$', new SystemInfo());

      const EXTNAME_RE = /(\.[^\.\/\?\\]*)(\?.*)?$/;
      const DIRNAME_RE = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/;
      const NORMALIZE_RE = /[^\.\/]+\/\.\.\//;
      function join(...segments) {
        let result = '';

        for (const segment of segments) {
          result = (result + (result === '' ? '' : '/') + segment).replace(/(\/|\\\\)$/, '');
        }

        return result;
      }
      function extname(path) {
        const temp = EXTNAME_RE.exec(path);
        return temp ? temp[1] : '';
      }
      function mainFileName(fileName) {
        if (fileName) {
          const idx = fileName.lastIndexOf('.');

          if (idx !== -1) {
            return fileName.substring(0, idx);
          }
        }

        return fileName;
      }
      function basename(path, extName) {
        const index = path.indexOf('?');

        if (index > 0) {
          path = path.substring(0, index);
        }

        const reg = /(\/|\\)([^\/\\]+)$/g;
        const result = reg.exec(path.replace(/(\/|\\)$/, ''));

        if (!result) {
          return path;
        }

        const baseName = result[2];

        if (extName && path.substring(path.length - extName.length).toLowerCase() === extName.toLowerCase()) {
          return baseName.substring(0, baseName.length - extName.length);
        }

        return baseName;
      }
      function dirname(path) {
        const temp = DIRNAME_RE.exec(path);
        return temp ? temp[2] : '';
      }
      function changeExtname(path, extName) {
        extName = extName || '';
        let index = path.indexOf('?');
        let tempStr = '';

        if (index > 0) {
          tempStr = path.substring(index);
          path = path.substring(0, index);
        }

        index = path.lastIndexOf('.');

        if (index < 0) {
          return path + extName + tempStr;
        }

        return path.substring(0, index) + extName + tempStr;
      }
      function changeBasename(path, newBaseName, keepExt) {
        if (newBaseName.indexOf('.') === 0) {
          return changeExtname(path, newBaseName);
        }

        let index = path.indexOf('?');
        let tempStr = '';
        const ext = keepExt ? extname(path) : '';

        if (index > 0) {
          tempStr = path.substring(index);
          path = path.substring(0, index);
        }

        index = path.lastIndexOf('/');
        index = index <= 0 ? 0 : index + 1;
        return path.substring(0, index) + newBaseName + ext + tempStr;
      }
      function _normalize(url) {
        let oldUrl = url = String(url);

        do {
          oldUrl = url;
          url = url.replace(NORMALIZE_RE, '');
        } while (oldUrl.length !== url.length);

        return url;
      }
      function stripSep(path) {
        return path.replace(/[\/\\]$/, '');
      }
      function getSeperator() {
        return systemInfo.os === OS.WINDOWS ? '\\' : '/';
      }

      var path = /*#__PURE__*/Object.freeze({
        __proto__: null,
        join: join,
        extname: extname,
        mainFileName: mainFileName,
        basename: basename,
        dirname: dirname,
        changeExtname: changeExtname,
        changeBasename: changeBasename,
        _normalize: _normalize,
        stripSep: stripSep,
        getSeperator: getSeperator
      });
      exports('fq', path);

      const _vec3 = new Vec3();

      function WorldNode3DToLocalNodeUI(mainCamera, wpos, uiNode, out) {
        if (!out) {
          out = new Vec3();
        }

        mainCamera.convertToUINode(wpos, uiNode, out);
        const pos = uiNode.position;
        out.add(pos);
        return out;
      }
      function WorldNode3DToWorldNodeUI(mainCamera, wpos, out) {
        if (!out) {
          out = new Vec3();
        }

        mainCamera.worldToScreen(wpos, out);
        out.x /= legacyCC.view.getScaleX();
        out.y /= legacyCC.view.getScaleY();
        return out;
      }
      const convertUtils = exports('fw', {
        WorldNode3DToLocalNodeUI,
        WorldNode3DToWorldNodeUI
      });
      legacyCC.pipelineUtils = convertUtils;
      replaceProperty(legacyCC.pipelineUtils, 'cc.pipelineUtils', [{
        name: 'WorldNode3DToLocalNodeUI',
        newName: 'convertToUINode',
        targetName: 'cc.Camera.prototype',

        customFunction(...args) {
          const camera = args[0];
          const out = args[3] || _vec3;
          camera.convertToUINode(args[1], args[2], out);
          out.add(args[2].position);
          return args[3] || out.clone();
        }

      }]);

      markAsWarning(js$1, 'js', [{
        name: 'js',
        suggest: `'js.js' is deprecated since v3.7.0, please access 'js' directly instead.`
      }]);

      const _PORTRAIT = 1;

      const _PORTRAIT_UPSIDE_DOWN = _PORTRAIT << 1;

      const _LEFT = _PORTRAIT << 2;

      const _RIGHT = _PORTRAIT << 3;

      const _LANDSCAPE = _LEFT | _RIGHT;

      const _AUTO = _PORTRAIT | _LANDSCAPE;

      let Orientation;

      (function (Orientation) {
        Orientation[Orientation["PORTRAIT"] = _PORTRAIT] = "PORTRAIT";
        Orientation[Orientation["PORTRAIT_UPSIDE_DOWN"] = _PORTRAIT_UPSIDE_DOWN] = "PORTRAIT_UPSIDE_DOWN";
        Orientation[Orientation["LANDSCAPE_LEFT"] = _LEFT] = "LANDSCAPE_LEFT";
        Orientation[Orientation["LANDSCAPE_RIGHT"] = _RIGHT] = "LANDSCAPE_RIGHT";
        Orientation[Orientation["LANDSCAPE"] = _LANDSCAPE] = "LANDSCAPE";
        Orientation[Orientation["AUTO"] = _AUTO] = "AUTO";
      })(Orientation || (Orientation = exports('cW', {})));

      const orientationMap = {
        0: Orientation.PORTRAIT,
        '-90': Orientation.LANDSCAPE_LEFT,
        90: Orientation.LANDSCAPE_RIGHT,
        180: Orientation.PORTRAIT_UPSIDE_DOWN
      };

      class ScreenAdapter extends EventTarget {
        get supportFullScreen() {
          return false;
        }

        get isFullScreen() {
          return false;
        }

        get devicePixelRatio() {
          return jsb.device.getDevicePixelRatio() || 1;
        }

        get windowSize() {
          const dpr = this.devicePixelRatio;
          const roundWidth = Math.round(jsb.window.innerWidth);
          const roundHeight = Math.round(jsb.window.innerHeight);
          return new Size(roundWidth * dpr, roundHeight * dpr);
        }

        set windowSize(size) {
          console.warn('Setting window size is not supported yet.');
        }

        get resolution() {
          const windowSize = this.windowSize;
          const resolutionScale = this.resolutionScale;
          return new Size(windowSize.width * resolutionScale, windowSize.height * resolutionScale);
        }

        get resolutionScale() {
          return this._resolutionScale;
        }

        set resolutionScale(v) {
          var _this$_cbToUpdateFram;

          if (v === this._resolutionScale) {
            return;
          }

          this._resolutionScale = v;
          (_this$_cbToUpdateFram = this._cbToUpdateFrameBuffer) === null || _this$_cbToUpdateFram === void 0 ? void 0 : _this$_cbToUpdateFram.call(this);
        }

        get orientation() {
          return orientationMap[jsb.device.getDeviceOrientation()];
        }

        set orientation(value) {
          console.warn('Setting orientation is not supported yet.');
        }

        get safeAreaEdge() {
          const nativeSafeArea = jsb.device.getSafeAreaEdge();
          const dpr = this.devicePixelRatio;
          let topEdge = nativeSafeArea.x * dpr;
          let bottomEdge = nativeSafeArea.z * dpr;
          let leftEdge = nativeSafeArea.y * dpr;
          let rightEdge = nativeSafeArea.w * dpr;
          const orientation = this.orientation;

          if (orientation === Orientation.PORTRAIT) {
            if (topEdge < bottomEdge) {
              topEdge = bottomEdge;
            } else {
              bottomEdge = topEdge;
            }
          } else if (leftEdge < rightEdge) {
            leftEdge = rightEdge;
          } else {
            rightEdge = leftEdge;
          }

          return {
            top: topEdge,
            bottom: bottomEdge,
            left: leftEdge,
            right: rightEdge
          };
        }

        get isProportionalToFrame() {
          return this._isProportionalToFrame;
        }

        set isProportionalToFrame(v) {}

        constructor() {
          super();
          this.isFrameRotated = false;
          this.handleResizeEvent = true;
          this._cbToUpdateFrameBuffer = void 0;
          this._resolutionScale = 1;
          this._isProportionalToFrame = false;

          this._registerEvent();
        }

        init(options, cbToRebuildFrameBuffer) {
          this._cbToUpdateFrameBuffer = cbToRebuildFrameBuffer;

          {
            this._cbToUpdateFrameBuffer();
          }
        }

        requestFullScreen() {
          return Promise.reject(new Error('request fullscreen has not been supported yet on this platform.'));
        }

        exitFullScreen() {
          return Promise.reject(new Error('exit fullscreen has not been supported yet on this platform.'));
        }

        _registerEvent() {
          jsb.onResize = event => {
            if (event.width === 0 || event.height === 0) return;
            window.resize(event.width / this.devicePixelRatio, event.height / this.devicePixelRatio);
            this.emit('window-resize', event.width, event.height, event.windowId);
          };

          jsb.onOrientationChanged = event => {
            this.emit('orientation-change');
          };
        }

      }

      const screenAdapter = exports('c_', new ScreenAdapter());

      class Screen {
        init() {
          var _settings$querySettin, _settings$querySettin2;

          const exactFitScreen = (_settings$querySettin = settings.querySettings(Settings.Category.SCREEN, 'exactFitScreen')) !== null && _settings$querySettin !== void 0 ? _settings$querySettin : true;
          const orientation = (_settings$querySettin2 = settings.querySettings(Settings.Category.SCREEN, 'orientation')) !== null && _settings$querySettin2 !== void 0 ? _settings$querySettin2 : 'auto';
          const isHeadlessMode = settings.querySettings(Settings.Category.RENDERING, 'renderMode') === 3;
          screenAdapter.init({
            exactFitScreen,
            configOrientation: orientation,
            isHeadlessMode
          }, () => {
            var _director$root;

            const director = legacyCC.director;

            if (!((_director$root = director.root) !== null && _director$root !== void 0 && _director$root.pipeline)) {
              warnID(1220);
              return;
            }

            director.root.pipeline.shadingScale = screenAdapter.resolutionScale;
          });
        }

        get devicePixelRatio() {
          return screenAdapter.devicePixelRatio;
        }

        get windowSize() {
          return screenAdapter.windowSize;
        }

        set windowSize(size) {
          screenAdapter.windowSize = size;
        }

        get resolution() {
          return screenAdapter.resolution;
        }

        get supportsFullScreen() {
          return screenAdapter.supportFullScreen;
        }

        fullScreen() {
          return screenAdapter.isFullScreen;
        }

        requestFullScreen(element, onFullScreenChange, onFullScreenError) {
          if (arguments.length > 0) {
            warnID(1400, 'screen.requestFullScreen(element, onFullScreenChange?, onFullScreenError?)', 'screen.requestFullScreen(): Promise');
          }

          return screenAdapter.requestFullScreen().then(() => {
            onFullScreenChange === null || onFullScreenChange === void 0 ? void 0 : onFullScreenChange();
          }).catch(err => {
            console.error(err);
            onFullScreenError === null || onFullScreenError === void 0 ? void 0 : onFullScreenError();
          });
        }

        exitFullScreen() {
          return screenAdapter.exitFullScreen();
        }

        autoFullScreen(element, onFullScreenChange) {
          var _this$requestFullScre;

          (_this$requestFullScre = this.requestFullScreen(element, onFullScreenChange)) === null || _this$requestFullScre === void 0 ? void 0 : _this$requestFullScre.catch(e => {});
        }

        disableAutoFullScreen(element) {}

      }

      const screen = exports('c$', new Screen());
      legacyCC.screen = screen;

      const sys = exports('b_', {
        Feature,

        hasFeature(feature) {
          return systemInfo.hasFeature(feature);
        },

        NetworkType,
        Language,
        OS,
        Platform,
        BrowserType,
        isNative: systemInfo.isNative,
        isBrowser: systemInfo.isBrowser,
        isMobile: systemInfo.isMobile,
        isLittleEndian: systemInfo.isLittleEndian,
        platform: systemInfo.platform,
        language: systemInfo.language,
        languageCode: systemInfo.nativeLanguage,
        os: systemInfo.os,
        osVersion: systemInfo.osVersion,
        osMainVersion: systemInfo.osMainVersion,
        browserType: systemInfo.browserType,
        browserVersion: systemInfo.browserVersion,
        isXR: systemInfo.isXR,
        windowPixelResolution: screen.windowSize,
        capabilities: {
          canvas: true,
          opengl: true,
          webp: systemInfo.hasFeature(Feature.WEBP),
          imageBitmap: systemInfo.hasFeature(Feature.IMAGE_BITMAP),
          touches: systemInfo.hasFeature(Feature.INPUT_TOUCH),
          mouse: systemInfo.hasFeature(Feature.EVENT_MOUSE),
          keyboard: systemInfo.hasFeature(Feature.EVENT_KEYBOARD),
          accelerometer: systemInfo.hasFeature(Feature.EVENT_ACCELEROMETER)
        },
        localStorage: {},

        getNetworkType() {
          return systemInfo.networkType;
        },

        getBatteryLevel() {
          return systemInfo.getBatteryLevel();
        },

        garbageCollect() {
          systemInfo.triggerGC();
        },

        isObjectValid(obj) {
          if (obj === null || obj === undefined) {
            return false;
          }

          return true;
        },

        dump() {
          let str = '';
          str += `isMobile : ${this.isMobile}\r\n`;
          str += `language : ${this.language}\r\n`;
          str += `browserType : ${this.browserType}\r\n`;
          str += `browserVersion : ${this.browserVersion}\r\n`;
          str += `supports webp: ${sys.hasFeature(Feature.WEBP)}\r\n`;
          str += `supports bitmap: ${sys.hasFeature(Feature.IMAGE_BITMAP)}\r\n`;
          str += `supports touches: ${sys.hasFeature(Feature.INPUT_TOUCH)}\r\n`;
          str += `supports mouse: ${sys.hasFeature(Feature.EVENT_MOUSE)}\r\n`;
          str += `supports keyboard: ${sys.hasFeature(Feature.EVENT_KEYBOARD)}\r\n`;
          str += `supports accelerometer: ${sys.hasFeature(Feature.EVENT_ACCELEROMETER)}\r\n`;
          str += `os : ${this.os}\r\n`;
          str += `osVersion : ${this.osVersion}\r\n`;
          str += `platform : ${this.platform}\r\n`;
          str += `Using ${legacyCC.game.renderType === legacyCC.game.RENDER_TYPE_WEBGL ? 'WEBGL' : 'CANVAS'} renderer.\r\n`;
          log(str);
        },

        openURL(url) {
          systemInfo.openURL(url);
        },

        init() {
          return Promise.resolve().then(() => systemInfo.init()).then(() => {
            try {
              let localStorage = sys.localStorage = window.localStorage;
              localStorage.setItem('storage', '');
              localStorage.removeItem('storage');
              localStorage = null;
            } catch (e) {
              const warn = function () {
                warnID(5200);
              };

              this.localStorage = {
                getItem: warn,
                setItem: warn,
                clear: warn,
                removeItem: warn
              };
            }

            {
              this.__isWebIOS14OrIPadOS14Env = (sys.os === OS.IOS || sys.os === OS.OSX) && systemInfo.isBrowser && /(OS 14)|(Version\/14)/.test(window.navigator.userAgent);
            }
          });
        },

        now() {
          return systemInfo.now();
        },

        restartVM() {
          systemInfo.restartJSVM();
        },

        getSafeAreaRect() {
          const locView = legacyCC.view;
          const edge = screenAdapter.safeAreaEdge;
          const windowSize = screenAdapter.windowSize;
          const leftBottom = new Vec2(edge.left, edge.bottom);
          const rightTop = new Vec2(windowSize.width - edge.right, windowSize.height - edge.top);

          locView._convertToUISpace(leftBottom);

          locView._convertToUISpace(rightTop);

          const x = leftBottom.x;
          const y = leftBottom.y;
          const width = rightTop.x - leftBottom.x;
          const height = rightTop.y - leftBottom.y;
          return new Rect(x, y, width, height);
        }

      });
      legacyCC.sys = sys;

      markAsWarning(legacyCC, 'cc', [{
        name: 'winSize',
        suggest: 'please use view.getVisibleSize() instead.'
      }]);
      markAsWarning(sys, 'sys', [{
        name: 'capabilities',
        suggest: 'please use sys.hasFeature() method instead.'
      }]);
      replaceProperty(sys, 'sys', ['UNKNOWN', 'ENGLISH', 'CHINESE', 'FRENCH', 'ITALIAN', 'GERMAN', 'SPANISH', 'DUTCH', 'RUSSIAN', 'KOREAN', 'JAPANESE', 'HUNGARIAN', 'PORTUGUESE', 'ARABIC', 'NORWEGIAN', 'POLISH', 'TURKISH', 'UKRAINIAN', 'ROMANIAN', 'BULGARIAN'].map(item => ({
        name: `LANGUAGE_${item}`,
        newName: item,
        target: sys.Language,
        targetName: 'sys.Language'
      })));
      replaceProperty(sys, 'sys', ['UNKNOWN', 'IOS', 'ANDROID', 'WINDOWS', 'LINUX', 'OSX'].map(item => ({
        name: `OS_${item}`,
        newName: item,
        target: sys.OS,
        targetName: 'sys.OS'
      })));
      replaceProperty(sys, 'sys', ['UNKNOWN', 'WECHAT', 'ANDROID', 'IE', 'EDGE', 'QQ', 'MOBILE_QQ', 'UC', 'UCBS', 'BAIDU_APP', 'BAIDU', 'MAXTHON', 'OPERA', 'OUPENG', 'MIUI', 'FIREFOX', 'SAFARI', 'CHROME', 'LIEBAO', 'QZONE', 'SOUGOU', 'HUAWEI'].map(item => ({
        name: `BROWSER_TYPE_${item}`,
        newName: item,
        target: sys.BrowserType,
        targetName: 'sys.BrowserType'
      })));
      replaceProperty(sys, 'sys', [{
        name: 'BROWSER_TYPE_360',
        newName: 'BROWSER_360',
        target: sys.BrowserType,
        targetName: 'sys.BrowserType'
      }]);
      replaceProperty(sys, 'sys', ['UNKNOWN', 'EDITOR_PAGE', 'EDITOR_CORE', 'MOBILE_BROWSER', 'DESKTOP_BROWSER', 'WIN32', 'MACOS', 'IOS', 'ANDROID', 'OHOS', 'WECHAT_GAME', 'BAIDU_MINI_GAME', 'XIAOMI_QUICK_GAME', 'ALIPAY_MINI_GAME', 'BYTEDANCE_MINI_GAME', 'OPPO_MINI_GAME', 'VIVO_MINI_GAME', 'HUAWEI_QUICK_GAME', 'COCOSPLAY', 'LINKSURE_MINI_GAME', 'QTT_MINI_GAME'].map(item => ({
        name: item,
        target: sys.Platform,
        targetName: 'sys.Platform'
      })));
      replaceProperty(sys, 'sys', [{
        name: 'IPHONE',
        newName: 'IOS',
        target: sys.Platform,
        targetName: 'sys.Platform'
      }, {
        name: 'IPAD',
        newName: 'IOS',
        target: sys.Platform,
        targetName: 'sys.Platform'
      }]);
      removeProperty(sys, 'sys', ['LINUX', 'BLACKBERRY', 'NACL', 'EMSCRIPTEN', 'TIZEN', 'WINRT', 'WP8', 'QQ_PLAY', 'FB_PLAYABLE_ADS'].map(item => ({
        name: item
      })));
      replaceProperty(sys, 'sys', [{
        name: 'windowPixelResolution',
        target: screen,
        targetName: 'screen',
        newName: 'windowSize'
      }]);
      markAsWarning(screen, 'screen', [{
        name: 'autoFullScreen',
        suggest: 'please use screen.requestFullScreen() instead.'
      }, {
        name: 'disableAutoFullScreen'
      }]);

      const visibleRect = exports('cD', {
        topLeft: legacyCC.v2(0, 0),
        topRight: legacyCC.v2(0, 0),
        top: legacyCC.v2(0, 0),
        bottomLeft: legacyCC.v2(0, 0),
        bottomRight: legacyCC.v2(0, 0),
        bottom: legacyCC.v2(0, 0),
        center: legacyCC.v2(0, 0),
        left: legacyCC.v2(0, 0),
        right: legacyCC.v2(0, 0),
        width: 0,
        height: 0,

        init(visibleRect_) {
          const w = this.width = visibleRect_.width;
          const h = this.height = visibleRect_.height;
          const l = visibleRect_.x;
          const b = visibleRect_.y;
          const t = b + h;
          const r = l + w;
          this.topLeft.x = l;
          this.topLeft.y = t;
          this.topRight.x = r;
          this.topRight.y = t;
          this.top.x = l + w / 2;
          this.top.y = t;
          this.bottomLeft.x = l;
          this.bottomLeft.y = b;
          this.bottomRight.x = r;
          this.bottomRight.y = b;
          this.bottom.x = l + w / 2;
          this.bottom.y = b;
          this.center.x = l + w / 2;
          this.center.y = b + h / 2;
          this.left.x = l;
          this.left.y = b + h / 2;
          this.right.x = r;
          this.right.y = b + h / 2;
        }

      });
      legacyCC.visibleRect = visibleRect;

      legacyCC.easing = easing;

      function syncNodeValues(node) {
        const lpos = node._lpos;
        node.setPositionForJS(lpos.x, lpos.y, lpos.z);
        const lscale = node._lscale;
        node.setScaleForJS(lscale.x, lscale.y, lscale.z);
        const lrot = node._lrot;
        node.setRotationForJS(lrot.x, lrot.y, lrot.z, lrot.w);
        const euler = node._euler;
        node.setRotationFromEulerForJS(euler.x, euler.y, euler.z);
      }
      function updateChildrenForDeserialize(node) {
        if (!node) {
          return;
        }

        const children = node._children;

        if (!children) {
          return;
        }

        const len = children.length;

        if (!len) {
          return;
        }

        node._setChildren(children);

        for (let i = 0; i < len; ++i) {
          const child = children[i];
          updateChildrenForDeserialize(child);
        }
      }
      function ExtraEventMethods() {}

      ExtraEventMethods.prototype.once = function once(type, callback, target) {
        return this.on(type, callback, target, true);
      };

      ExtraEventMethods.prototype.targetOff = function targetOff(typeOrTarget) {
        this.removeAll(typeOrTarget);
      };

      var jsbUtils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        syncNodeValues: syncNodeValues,
        updateChildrenForDeserialize: updateChildrenForDeserialize,
        ExtraEventMethods: ExtraEventMethods
      });
      exports('fH', jsbUtils);

      class GarbageCollectionManager {
        constructor() {
          this._finalizationRegistry =  null;
          this._gcObjects = new WeakMap();
        }

        registerGCObject(gcObject) {
          {
            return gcObject;
          }
        }

        init() {}

        finalizationRegistryCallback(token) {
          const gcObject = this._gcObjects.get(token);

          if (gcObject) {
            this._gcObjects.delete(token);

            gcObject.destroy();
          }

          this._finalizationRegistry.unregister(token);
        }

        destroy() {}

      }

      const garbageCollectionManager = exports('fR', new GarbageCollectionManager());

      class GCObject {
        constructor() {
          return garbageCollectionManager.registerGCObject(this);
        }

        destroy() {}

      } exports('fS', GCObject);

      function deepFlatten(strList, array) {
        for (const item of array) {
          if (Array.isArray(item)) {
            deepFlatten(strList, item);
          } else {
              strList.push(item);
            }
        }
      }

      function flattenCodeArray(array) {
        const separator =  '';
        const strList = [];
        deepFlatten(strList, array);
        return strList.join(separator);
      }

      function applyMixins(derivedCtor, baseCtors) {
        baseCtors.forEach(baseCtor => {
          Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
            if (name !== 'constructor') {
              Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));
            }
          });
        });
      }

      legacyCC.math = math;
      legacyCC.geometry = geometry;

      const deepCopy = (target, source, Ctor) => {
        for (let i = 0; i < source.length; ++i) {
          if (target.length <= i) target.push(new Ctor());
          target[i].copy(source[i]);
        }

        target.length = source.length;
      };

      let ObjectType;

      (function (ObjectType) {
        ObjectType[ObjectType["UNKNOWN"] = 0] = "UNKNOWN";
        ObjectType[ObjectType["SWAPCHAIN"] = 1] = "SWAPCHAIN";
        ObjectType[ObjectType["BUFFER"] = 2] = "BUFFER";
        ObjectType[ObjectType["TEXTURE"] = 3] = "TEXTURE";
        ObjectType[ObjectType["RENDER_PASS"] = 4] = "RENDER_PASS";
        ObjectType[ObjectType["FRAMEBUFFER"] = 5] = "FRAMEBUFFER";
        ObjectType[ObjectType["SAMPLER"] = 6] = "SAMPLER";
        ObjectType[ObjectType["SHADER"] = 7] = "SHADER";
        ObjectType[ObjectType["DESCRIPTOR_SET_LAYOUT"] = 8] = "DESCRIPTOR_SET_LAYOUT";
        ObjectType[ObjectType["PIPELINE_LAYOUT"] = 9] = "PIPELINE_LAYOUT";
        ObjectType[ObjectType["PIPELINE_STATE"] = 10] = "PIPELINE_STATE";
        ObjectType[ObjectType["DESCRIPTOR_SET"] = 11] = "DESCRIPTOR_SET";
        ObjectType[ObjectType["INPUT_ASSEMBLER"] = 12] = "INPUT_ASSEMBLER";
        ObjectType[ObjectType["COMMAND_BUFFER"] = 13] = "COMMAND_BUFFER";
        ObjectType[ObjectType["QUEUE"] = 14] = "QUEUE";
        ObjectType[ObjectType["QUERY_POOL"] = 15] = "QUERY_POOL";
        ObjectType[ObjectType["GLOBAL_BARRIER"] = 16] = "GLOBAL_BARRIER";
        ObjectType[ObjectType["TEXTURE_BARRIER"] = 17] = "TEXTURE_BARRIER";
        ObjectType[ObjectType["BUFFER_BARRIER"] = 18] = "BUFFER_BARRIER";
        ObjectType[ObjectType["COUNT"] = 19] = "COUNT";
      })(ObjectType || (ObjectType = exports('O', {})));

      let Status;

      (function (Status) {
        Status[Status["UNREADY"] = 0] = "UNREADY";
        Status[Status["FAILED"] = 1] = "FAILED";
        Status[Status["SUCCESS"] = 2] = "SUCCESS";
      })(Status || (Status = exports('h', {})));

      let API;

      (function (API) {
        API[API["UNKNOWN"] = 0] = "UNKNOWN";
        API[API["GLES2"] = 1] = "GLES2";
        API[API["GLES3"] = 2] = "GLES3";
        API[API["METAL"] = 3] = "METAL";
        API[API["VULKAN"] = 4] = "VULKAN";
        API[API["NVN"] = 5] = "NVN";
        API[API["WEBGL"] = 6] = "WEBGL";
        API[API["WEBGL2"] = 7] = "WEBGL2";
        API[API["WEBGPU"] = 8] = "WEBGPU";
      })(API || (API = exports('A', {})));

      let SurfaceTransform;

      (function (SurfaceTransform) {
        SurfaceTransform[SurfaceTransform["IDENTITY"] = 0] = "IDENTITY";
        SurfaceTransform[SurfaceTransform["ROTATE_90"] = 1] = "ROTATE_90";
        SurfaceTransform[SurfaceTransform["ROTATE_180"] = 2] = "ROTATE_180";
        SurfaceTransform[SurfaceTransform["ROTATE_270"] = 3] = "ROTATE_270";
      })(SurfaceTransform || (SurfaceTransform = exports('d', {})));

      let Feature$1;

      (function (Feature) {
        Feature[Feature["ELEMENT_INDEX_UINT"] = 0] = "ELEMENT_INDEX_UINT";
        Feature[Feature["INSTANCED_ARRAYS"] = 1] = "INSTANCED_ARRAYS";
        Feature[Feature["MULTIPLE_RENDER_TARGETS"] = 2] = "MULTIPLE_RENDER_TARGETS";
        Feature[Feature["BLEND_MINMAX"] = 3] = "BLEND_MINMAX";
        Feature[Feature["COMPUTE_SHADER"] = 4] = "COMPUTE_SHADER";
        Feature[Feature["INPUT_ATTACHMENT_BENEFIT"] = 5] = "INPUT_ATTACHMENT_BENEFIT";
        Feature[Feature["COUNT"] = 6] = "COUNT";
      })(Feature$1 || (Feature$1 = exports('F', {})));

      let Format;

      (function (Format) {
        Format[Format["UNKNOWN"] = 0] = "UNKNOWN";
        Format[Format["A8"] = 1] = "A8";
        Format[Format["L8"] = 2] = "L8";
        Format[Format["LA8"] = 3] = "LA8";
        Format[Format["R8"] = 4] = "R8";
        Format[Format["R8SN"] = 5] = "R8SN";
        Format[Format["R8UI"] = 6] = "R8UI";
        Format[Format["R8I"] = 7] = "R8I";
        Format[Format["R16F"] = 8] = "R16F";
        Format[Format["R16UI"] = 9] = "R16UI";
        Format[Format["R16I"] = 10] = "R16I";
        Format[Format["R32F"] = 11] = "R32F";
        Format[Format["R32UI"] = 12] = "R32UI";
        Format[Format["R32I"] = 13] = "R32I";
        Format[Format["RG8"] = 14] = "RG8";
        Format[Format["RG8SN"] = 15] = "RG8SN";
        Format[Format["RG8UI"] = 16] = "RG8UI";
        Format[Format["RG8I"] = 17] = "RG8I";
        Format[Format["RG16F"] = 18] = "RG16F";
        Format[Format["RG16UI"] = 19] = "RG16UI";
        Format[Format["RG16I"] = 20] = "RG16I";
        Format[Format["RG32F"] = 21] = "RG32F";
        Format[Format["RG32UI"] = 22] = "RG32UI";
        Format[Format["RG32I"] = 23] = "RG32I";
        Format[Format["RGB8"] = 24] = "RGB8";
        Format[Format["SRGB8"] = 25] = "SRGB8";
        Format[Format["RGB8SN"] = 26] = "RGB8SN";
        Format[Format["RGB8UI"] = 27] = "RGB8UI";
        Format[Format["RGB8I"] = 28] = "RGB8I";
        Format[Format["RGB16F"] = 29] = "RGB16F";
        Format[Format["RGB16UI"] = 30] = "RGB16UI";
        Format[Format["RGB16I"] = 31] = "RGB16I";
        Format[Format["RGB32F"] = 32] = "RGB32F";
        Format[Format["RGB32UI"] = 33] = "RGB32UI";
        Format[Format["RGB32I"] = 34] = "RGB32I";
        Format[Format["RGBA8"] = 35] = "RGBA8";
        Format[Format["BGRA8"] = 36] = "BGRA8";
        Format[Format["SRGB8_A8"] = 37] = "SRGB8_A8";
        Format[Format["RGBA8SN"] = 38] = "RGBA8SN";
        Format[Format["RGBA8UI"] = 39] = "RGBA8UI";
        Format[Format["RGBA8I"] = 40] = "RGBA8I";
        Format[Format["RGBA16F"] = 41] = "RGBA16F";
        Format[Format["RGBA16UI"] = 42] = "RGBA16UI";
        Format[Format["RGBA16I"] = 43] = "RGBA16I";
        Format[Format["RGBA32F"] = 44] = "RGBA32F";
        Format[Format["RGBA32UI"] = 45] = "RGBA32UI";
        Format[Format["RGBA32I"] = 46] = "RGBA32I";
        Format[Format["R5G6B5"] = 47] = "R5G6B5";
        Format[Format["R11G11B10F"] = 48] = "R11G11B10F";
        Format[Format["RGB5A1"] = 49] = "RGB5A1";
        Format[Format["RGBA4"] = 50] = "RGBA4";
        Format[Format["RGB10A2"] = 51] = "RGB10A2";
        Format[Format["RGB10A2UI"] = 52] = "RGB10A2UI";
        Format[Format["RGB9E5"] = 53] = "RGB9E5";
        Format[Format["DEPTH"] = 54] = "DEPTH";
        Format[Format["DEPTH_STENCIL"] = 55] = "DEPTH_STENCIL";
        Format[Format["BC1"] = 56] = "BC1";
        Format[Format["BC1_ALPHA"] = 57] = "BC1_ALPHA";
        Format[Format["BC1_SRGB"] = 58] = "BC1_SRGB";
        Format[Format["BC1_SRGB_ALPHA"] = 59] = "BC1_SRGB_ALPHA";
        Format[Format["BC2"] = 60] = "BC2";
        Format[Format["BC2_SRGB"] = 61] = "BC2_SRGB";
        Format[Format["BC3"] = 62] = "BC3";
        Format[Format["BC3_SRGB"] = 63] = "BC3_SRGB";
        Format[Format["BC4"] = 64] = "BC4";
        Format[Format["BC4_SNORM"] = 65] = "BC4_SNORM";
        Format[Format["BC5"] = 66] = "BC5";
        Format[Format["BC5_SNORM"] = 67] = "BC5_SNORM";
        Format[Format["BC6H_UF16"] = 68] = "BC6H_UF16";
        Format[Format["BC6H_SF16"] = 69] = "BC6H_SF16";
        Format[Format["BC7"] = 70] = "BC7";
        Format[Format["BC7_SRGB"] = 71] = "BC7_SRGB";
        Format[Format["ETC_RGB8"] = 72] = "ETC_RGB8";
        Format[Format["ETC2_RGB8"] = 73] = "ETC2_RGB8";
        Format[Format["ETC2_SRGB8"] = 74] = "ETC2_SRGB8";
        Format[Format["ETC2_RGB8_A1"] = 75] = "ETC2_RGB8_A1";
        Format[Format["ETC2_SRGB8_A1"] = 76] = "ETC2_SRGB8_A1";
        Format[Format["ETC2_RGBA8"] = 77] = "ETC2_RGBA8";
        Format[Format["ETC2_SRGB8_A8"] = 78] = "ETC2_SRGB8_A8";
        Format[Format["EAC_R11"] = 79] = "EAC_R11";
        Format[Format["EAC_R11SN"] = 80] = "EAC_R11SN";
        Format[Format["EAC_RG11"] = 81] = "EAC_RG11";
        Format[Format["EAC_RG11SN"] = 82] = "EAC_RG11SN";
        Format[Format["PVRTC_RGB2"] = 83] = "PVRTC_RGB2";
        Format[Format["PVRTC_RGBA2"] = 84] = "PVRTC_RGBA2";
        Format[Format["PVRTC_RGB4"] = 85] = "PVRTC_RGB4";
        Format[Format["PVRTC_RGBA4"] = 86] = "PVRTC_RGBA4";
        Format[Format["PVRTC2_2BPP"] = 87] = "PVRTC2_2BPP";
        Format[Format["PVRTC2_4BPP"] = 88] = "PVRTC2_4BPP";
        Format[Format["ASTC_RGBA_4X4"] = 89] = "ASTC_RGBA_4X4";
        Format[Format["ASTC_RGBA_5X4"] = 90] = "ASTC_RGBA_5X4";
        Format[Format["ASTC_RGBA_5X5"] = 91] = "ASTC_RGBA_5X5";
        Format[Format["ASTC_RGBA_6X5"] = 92] = "ASTC_RGBA_6X5";
        Format[Format["ASTC_RGBA_6X6"] = 93] = "ASTC_RGBA_6X6";
        Format[Format["ASTC_RGBA_8X5"] = 94] = "ASTC_RGBA_8X5";
        Format[Format["ASTC_RGBA_8X6"] = 95] = "ASTC_RGBA_8X6";
        Format[Format["ASTC_RGBA_8X8"] = 96] = "ASTC_RGBA_8X8";
        Format[Format["ASTC_RGBA_10X5"] = 97] = "ASTC_RGBA_10X5";
        Format[Format["ASTC_RGBA_10X6"] = 98] = "ASTC_RGBA_10X6";
        Format[Format["ASTC_RGBA_10X8"] = 99] = "ASTC_RGBA_10X8";
        Format[Format["ASTC_RGBA_10X10"] = 100] = "ASTC_RGBA_10X10";
        Format[Format["ASTC_RGBA_12X10"] = 101] = "ASTC_RGBA_12X10";
        Format[Format["ASTC_RGBA_12X12"] = 102] = "ASTC_RGBA_12X12";
        Format[Format["ASTC_SRGBA_4X4"] = 103] = "ASTC_SRGBA_4X4";
        Format[Format["ASTC_SRGBA_5X4"] = 104] = "ASTC_SRGBA_5X4";
        Format[Format["ASTC_SRGBA_5X5"] = 105] = "ASTC_SRGBA_5X5";
        Format[Format["ASTC_SRGBA_6X5"] = 106] = "ASTC_SRGBA_6X5";
        Format[Format["ASTC_SRGBA_6X6"] = 107] = "ASTC_SRGBA_6X6";
        Format[Format["ASTC_SRGBA_8X5"] = 108] = "ASTC_SRGBA_8X5";
        Format[Format["ASTC_SRGBA_8X6"] = 109] = "ASTC_SRGBA_8X6";
        Format[Format["ASTC_SRGBA_8X8"] = 110] = "ASTC_SRGBA_8X8";
        Format[Format["ASTC_SRGBA_10X5"] = 111] = "ASTC_SRGBA_10X5";
        Format[Format["ASTC_SRGBA_10X6"] = 112] = "ASTC_SRGBA_10X6";
        Format[Format["ASTC_SRGBA_10X8"] = 113] = "ASTC_SRGBA_10X8";
        Format[Format["ASTC_SRGBA_10X10"] = 114] = "ASTC_SRGBA_10X10";
        Format[Format["ASTC_SRGBA_12X10"] = 115] = "ASTC_SRGBA_12X10";
        Format[Format["ASTC_SRGBA_12X12"] = 116] = "ASTC_SRGBA_12X12";
        Format[Format["COUNT"] = 117] = "COUNT";
      })(Format || (Format = exports('i', {})));

      let FormatType;

      (function (FormatType) {
        FormatType[FormatType["NONE"] = 0] = "NONE";
        FormatType[FormatType["UNORM"] = 1] = "UNORM";
        FormatType[FormatType["SNORM"] = 2] = "SNORM";
        FormatType[FormatType["UINT"] = 3] = "UINT";
        FormatType[FormatType["INT"] = 4] = "INT";
        FormatType[FormatType["UFLOAT"] = 5] = "UFLOAT";
        FormatType[FormatType["FLOAT"] = 6] = "FLOAT";
      })(FormatType || (FormatType = exports('j', {})));

      let Type;

      (function (Type) {
        Type[Type["UNKNOWN"] = 0] = "UNKNOWN";
        Type[Type["BOOL"] = 1] = "BOOL";
        Type[Type["BOOL2"] = 2] = "BOOL2";
        Type[Type["BOOL3"] = 3] = "BOOL3";
        Type[Type["BOOL4"] = 4] = "BOOL4";
        Type[Type["INT"] = 5] = "INT";
        Type[Type["INT2"] = 6] = "INT2";
        Type[Type["INT3"] = 7] = "INT3";
        Type[Type["INT4"] = 8] = "INT4";
        Type[Type["UINT"] = 9] = "UINT";
        Type[Type["UINT2"] = 10] = "UINT2";
        Type[Type["UINT3"] = 11] = "UINT3";
        Type[Type["UINT4"] = 12] = "UINT4";
        Type[Type["FLOAT"] = 13] = "FLOAT";
        Type[Type["FLOAT2"] = 14] = "FLOAT2";
        Type[Type["FLOAT3"] = 15] = "FLOAT3";
        Type[Type["FLOAT4"] = 16] = "FLOAT4";
        Type[Type["MAT2"] = 17] = "MAT2";
        Type[Type["MAT2X3"] = 18] = "MAT2X3";
        Type[Type["MAT2X4"] = 19] = "MAT2X4";
        Type[Type["MAT3X2"] = 20] = "MAT3X2";
        Type[Type["MAT3"] = 21] = "MAT3";
        Type[Type["MAT3X4"] = 22] = "MAT3X4";
        Type[Type["MAT4X2"] = 23] = "MAT4X2";
        Type[Type["MAT4X3"] = 24] = "MAT4X3";
        Type[Type["MAT4"] = 25] = "MAT4";
        Type[Type["SAMPLER1D"] = 26] = "SAMPLER1D";
        Type[Type["SAMPLER1D_ARRAY"] = 27] = "SAMPLER1D_ARRAY";
        Type[Type["SAMPLER2D"] = 28] = "SAMPLER2D";
        Type[Type["SAMPLER2D_ARRAY"] = 29] = "SAMPLER2D_ARRAY";
        Type[Type["SAMPLER3D"] = 30] = "SAMPLER3D";
        Type[Type["SAMPLER_CUBE"] = 31] = "SAMPLER_CUBE";
        Type[Type["SAMPLER"] = 32] = "SAMPLER";
        Type[Type["TEXTURE1D"] = 33] = "TEXTURE1D";
        Type[Type["TEXTURE1D_ARRAY"] = 34] = "TEXTURE1D_ARRAY";
        Type[Type["TEXTURE2D"] = 35] = "TEXTURE2D";
        Type[Type["TEXTURE2D_ARRAY"] = 36] = "TEXTURE2D_ARRAY";
        Type[Type["TEXTURE3D"] = 37] = "TEXTURE3D";
        Type[Type["TEXTURE_CUBE"] = 38] = "TEXTURE_CUBE";
        Type[Type["IMAGE1D"] = 39] = "IMAGE1D";
        Type[Type["IMAGE1D_ARRAY"] = 40] = "IMAGE1D_ARRAY";
        Type[Type["IMAGE2D"] = 41] = "IMAGE2D";
        Type[Type["IMAGE2D_ARRAY"] = 42] = "IMAGE2D_ARRAY";
        Type[Type["IMAGE3D"] = 43] = "IMAGE3D";
        Type[Type["IMAGE_CUBE"] = 44] = "IMAGE_CUBE";
        Type[Type["SUBPASS_INPUT"] = 45] = "SUBPASS_INPUT";
        Type[Type["COUNT"] = 46] = "COUNT";
      })(Type || (Type = exports('k', {})));

      let BufferUsageBit;

      (function (BufferUsageBit) {
        BufferUsageBit[BufferUsageBit["NONE"] = 0] = "NONE";
        BufferUsageBit[BufferUsageBit["TRANSFER_SRC"] = 1] = "TRANSFER_SRC";
        BufferUsageBit[BufferUsageBit["TRANSFER_DST"] = 2] = "TRANSFER_DST";
        BufferUsageBit[BufferUsageBit["INDEX"] = 4] = "INDEX";
        BufferUsageBit[BufferUsageBit["VERTEX"] = 8] = "VERTEX";
        BufferUsageBit[BufferUsageBit["UNIFORM"] = 16] = "UNIFORM";
        BufferUsageBit[BufferUsageBit["STORAGE"] = 32] = "STORAGE";
        BufferUsageBit[BufferUsageBit["INDIRECT"] = 64] = "INDIRECT";
      })(BufferUsageBit || (BufferUsageBit = exports('B', {})));

      let BufferFlagBit;

      (function (BufferFlagBit) {
        BufferFlagBit[BufferFlagBit["NONE"] = 0] = "NONE";
      })(BufferFlagBit || (BufferFlagBit = exports('c', {})));

      let MemoryAccessBit;

      (function (MemoryAccessBit) {
        MemoryAccessBit[MemoryAccessBit["NONE"] = 0] = "NONE";
        MemoryAccessBit[MemoryAccessBit["READ_ONLY"] = 1] = "READ_ONLY";
        MemoryAccessBit[MemoryAccessBit["WRITE_ONLY"] = 2] = "WRITE_ONLY";
        MemoryAccessBit[MemoryAccessBit["READ_WRITE"] = 3] = "READ_WRITE";
      })(MemoryAccessBit || (MemoryAccessBit = exports('l', {})));

      let MemoryUsageBit;

      (function (MemoryUsageBit) {
        MemoryUsageBit[MemoryUsageBit["NONE"] = 0] = "NONE";
        MemoryUsageBit[MemoryUsageBit["DEVICE"] = 1] = "DEVICE";
        MemoryUsageBit[MemoryUsageBit["HOST"] = 2] = "HOST";
      })(MemoryUsageBit || (MemoryUsageBit = exports('M', {})));

      let TextureType;

      (function (TextureType) {
        TextureType[TextureType["TEX1D"] = 0] = "TEX1D";
        TextureType[TextureType["TEX2D"] = 1] = "TEX2D";
        TextureType[TextureType["TEX3D"] = 2] = "TEX3D";
        TextureType[TextureType["CUBE"] = 3] = "CUBE";
        TextureType[TextureType["TEX1D_ARRAY"] = 4] = "TEX1D_ARRAY";
        TextureType[TextureType["TEX2D_ARRAY"] = 5] = "TEX2D_ARRAY";
      })(TextureType || (TextureType = exports('m', {})));

      let TextureUsageBit;

      (function (TextureUsageBit) {
        TextureUsageBit[TextureUsageBit["NONE"] = 0] = "NONE";
        TextureUsageBit[TextureUsageBit["TRANSFER_SRC"] = 1] = "TRANSFER_SRC";
        TextureUsageBit[TextureUsageBit["TRANSFER_DST"] = 2] = "TRANSFER_DST";
        TextureUsageBit[TextureUsageBit["SAMPLED"] = 4] = "SAMPLED";
        TextureUsageBit[TextureUsageBit["STORAGE"] = 8] = "STORAGE";
        TextureUsageBit[TextureUsageBit["COLOR_ATTACHMENT"] = 16] = "COLOR_ATTACHMENT";
        TextureUsageBit[TextureUsageBit["DEPTH_STENCIL_ATTACHMENT"] = 32] = "DEPTH_STENCIL_ATTACHMENT";
        TextureUsageBit[TextureUsageBit["INPUT_ATTACHMENT"] = 64] = "INPUT_ATTACHMENT";
      })(TextureUsageBit || (TextureUsageBit = exports('n', {})));

      let TextureFlagBit;

      (function (TextureFlagBit) {
        TextureFlagBit[TextureFlagBit["NONE"] = 0] = "NONE";
        TextureFlagBit[TextureFlagBit["GEN_MIPMAP"] = 1] = "GEN_MIPMAP";
        TextureFlagBit[TextureFlagBit["GENERAL_LAYOUT"] = 2] = "GENERAL_LAYOUT";
        TextureFlagBit[TextureFlagBit["EXTERNAL_OES"] = 4] = "EXTERNAL_OES";
        TextureFlagBit[TextureFlagBit["EXTERNAL_NORMAL"] = 8] = "EXTERNAL_NORMAL";
      })(TextureFlagBit || (TextureFlagBit = exports('o', {})));

      let FormatFeatureBit;

      (function (FormatFeatureBit) {
        FormatFeatureBit[FormatFeatureBit["NONE"] = 0] = "NONE";
        FormatFeatureBit[FormatFeatureBit["RENDER_TARGET"] = 1] = "RENDER_TARGET";
        FormatFeatureBit[FormatFeatureBit["SAMPLED_TEXTURE"] = 2] = "SAMPLED_TEXTURE";
        FormatFeatureBit[FormatFeatureBit["LINEAR_FILTER"] = 4] = "LINEAR_FILTER";
        FormatFeatureBit[FormatFeatureBit["STORAGE_TEXTURE"] = 8] = "STORAGE_TEXTURE";
        FormatFeatureBit[FormatFeatureBit["VERTEX_ATTRIBUTE"] = 16] = "VERTEX_ATTRIBUTE";
      })(FormatFeatureBit || (FormatFeatureBit = exports('p', {})));

      let SampleCount;

      (function (SampleCount) {
        SampleCount[SampleCount["ONE"] = 0] = "ONE";
        SampleCount[SampleCount["MULTIPLE_PERFORMANCE"] = 1] = "MULTIPLE_PERFORMANCE";
        SampleCount[SampleCount["MULTIPLE_BALANCE"] = 2] = "MULTIPLE_BALANCE";
        SampleCount[SampleCount["MULTIPLE_QUALITY"] = 3] = "MULTIPLE_QUALITY";
      })(SampleCount || (SampleCount = exports('q', {})));

      let VsyncMode;

      (function (VsyncMode) {
        VsyncMode[VsyncMode["OFF"] = 0] = "OFF";
        VsyncMode[VsyncMode["ON"] = 1] = "ON";
        VsyncMode[VsyncMode["RELAXED"] = 2] = "RELAXED";
        VsyncMode[VsyncMode["MAILBOX"] = 3] = "MAILBOX";
        VsyncMode[VsyncMode["HALF"] = 4] = "HALF";
      })(VsyncMode || (VsyncMode = exports('V', {})));

      let Filter;

      (function (Filter) {
        Filter[Filter["NONE"] = 0] = "NONE";
        Filter[Filter["POINT"] = 1] = "POINT";
        Filter[Filter["LINEAR"] = 2] = "LINEAR";
        Filter[Filter["ANISOTROPIC"] = 3] = "ANISOTROPIC";
      })(Filter || (Filter = exports('r', {})));

      let Address;

      (function (Address) {
        Address[Address["WRAP"] = 0] = "WRAP";
        Address[Address["MIRROR"] = 1] = "MIRROR";
        Address[Address["CLAMP"] = 2] = "CLAMP";
        Address[Address["BORDER"] = 3] = "BORDER";
      })(Address || (Address = exports('s', {})));

      let ComparisonFunc;

      (function (ComparisonFunc) {
        ComparisonFunc[ComparisonFunc["NEVER"] = 0] = "NEVER";
        ComparisonFunc[ComparisonFunc["LESS"] = 1] = "LESS";
        ComparisonFunc[ComparisonFunc["EQUAL"] = 2] = "EQUAL";
        ComparisonFunc[ComparisonFunc["LESS_EQUAL"] = 3] = "LESS_EQUAL";
        ComparisonFunc[ComparisonFunc["GREATER"] = 4] = "GREATER";
        ComparisonFunc[ComparisonFunc["NOT_EQUAL"] = 5] = "NOT_EQUAL";
        ComparisonFunc[ComparisonFunc["GREATER_EQUAL"] = 6] = "GREATER_EQUAL";
        ComparisonFunc[ComparisonFunc["ALWAYS"] = 7] = "ALWAYS";
      })(ComparisonFunc || (ComparisonFunc = exports('t', {})));

      let StencilOp;

      (function (StencilOp) {
        StencilOp[StencilOp["ZERO"] = 0] = "ZERO";
        StencilOp[StencilOp["KEEP"] = 1] = "KEEP";
        StencilOp[StencilOp["REPLACE"] = 2] = "REPLACE";
        StencilOp[StencilOp["INCR"] = 3] = "INCR";
        StencilOp[StencilOp["DECR"] = 4] = "DECR";
        StencilOp[StencilOp["INVERT"] = 5] = "INVERT";
        StencilOp[StencilOp["INCR_WRAP"] = 6] = "INCR_WRAP";
        StencilOp[StencilOp["DECR_WRAP"] = 7] = "DECR_WRAP";
      })(StencilOp || (StencilOp = exports('u', {})));

      let BlendFactor;

      (function (BlendFactor) {
        BlendFactor[BlendFactor["ZERO"] = 0] = "ZERO";
        BlendFactor[BlendFactor["ONE"] = 1] = "ONE";
        BlendFactor[BlendFactor["SRC_ALPHA"] = 2] = "SRC_ALPHA";
        BlendFactor[BlendFactor["DST_ALPHA"] = 3] = "DST_ALPHA";
        BlendFactor[BlendFactor["ONE_MINUS_SRC_ALPHA"] = 4] = "ONE_MINUS_SRC_ALPHA";
        BlendFactor[BlendFactor["ONE_MINUS_DST_ALPHA"] = 5] = "ONE_MINUS_DST_ALPHA";
        BlendFactor[BlendFactor["SRC_COLOR"] = 6] = "SRC_COLOR";
        BlendFactor[BlendFactor["DST_COLOR"] = 7] = "DST_COLOR";
        BlendFactor[BlendFactor["ONE_MINUS_SRC_COLOR"] = 8] = "ONE_MINUS_SRC_COLOR";
        BlendFactor[BlendFactor["ONE_MINUS_DST_COLOR"] = 9] = "ONE_MINUS_DST_COLOR";
        BlendFactor[BlendFactor["SRC_ALPHA_SATURATE"] = 10] = "SRC_ALPHA_SATURATE";
        BlendFactor[BlendFactor["CONSTANT_COLOR"] = 11] = "CONSTANT_COLOR";
        BlendFactor[BlendFactor["ONE_MINUS_CONSTANT_COLOR"] = 12] = "ONE_MINUS_CONSTANT_COLOR";
        BlendFactor[BlendFactor["CONSTANT_ALPHA"] = 13] = "CONSTANT_ALPHA";
        BlendFactor[BlendFactor["ONE_MINUS_CONSTANT_ALPHA"] = 14] = "ONE_MINUS_CONSTANT_ALPHA";
      })(BlendFactor || (BlendFactor = exports('v', {})));

      let BlendOp;

      (function (BlendOp) {
        BlendOp[BlendOp["ADD"] = 0] = "ADD";
        BlendOp[BlendOp["SUB"] = 1] = "SUB";
        BlendOp[BlendOp["REV_SUB"] = 2] = "REV_SUB";
        BlendOp[BlendOp["MIN"] = 3] = "MIN";
        BlendOp[BlendOp["MAX"] = 4] = "MAX";
      })(BlendOp || (BlendOp = exports('w', {})));

      let ColorMask;

      (function (ColorMask) {
        ColorMask[ColorMask["NONE"] = 0] = "NONE";
        ColorMask[ColorMask["R"] = 1] = "R";
        ColorMask[ColorMask["G"] = 2] = "G";
        ColorMask[ColorMask["B"] = 4] = "B";
        ColorMask[ColorMask["A"] = 8] = "A";
        ColorMask[ColorMask["ALL"] = 15] = "ALL";
      })(ColorMask || (ColorMask = exports('x', {})));

      let ShaderStageFlagBit;

      (function (ShaderStageFlagBit) {
        ShaderStageFlagBit[ShaderStageFlagBit["NONE"] = 0] = "NONE";
        ShaderStageFlagBit[ShaderStageFlagBit["VERTEX"] = 1] = "VERTEX";
        ShaderStageFlagBit[ShaderStageFlagBit["CONTROL"] = 2] = "CONTROL";
        ShaderStageFlagBit[ShaderStageFlagBit["EVALUATION"] = 4] = "EVALUATION";
        ShaderStageFlagBit[ShaderStageFlagBit["GEOMETRY"] = 8] = "GEOMETRY";
        ShaderStageFlagBit[ShaderStageFlagBit["FRAGMENT"] = 16] = "FRAGMENT";
        ShaderStageFlagBit[ShaderStageFlagBit["COMPUTE"] = 32] = "COMPUTE";
        ShaderStageFlagBit[ShaderStageFlagBit["ALL"] = 63] = "ALL";
      })(ShaderStageFlagBit || (ShaderStageFlagBit = exports('y', {})));

      let LoadOp;

      (function (LoadOp) {
        LoadOp[LoadOp["LOAD"] = 0] = "LOAD";
        LoadOp[LoadOp["CLEAR"] = 1] = "CLEAR";
        LoadOp[LoadOp["DISCARD"] = 2] = "DISCARD";
      })(LoadOp || (LoadOp = exports('L', {})));

      let StoreOp;

      (function (StoreOp) {
        StoreOp[StoreOp["STORE"] = 0] = "STORE";
        StoreOp[StoreOp["DISCARD"] = 1] = "DISCARD";
      })(StoreOp || (StoreOp = exports('z', {})));

      let AccessFlagBit;

      (function (AccessFlagBit) {
        AccessFlagBit[AccessFlagBit["NONE"] = 0] = "NONE";
        AccessFlagBit[AccessFlagBit["INDIRECT_BUFFER"] = 1] = "INDIRECT_BUFFER";
        AccessFlagBit[AccessFlagBit["INDEX_BUFFER"] = 2] = "INDEX_BUFFER";
        AccessFlagBit[AccessFlagBit["VERTEX_BUFFER"] = 4] = "VERTEX_BUFFER";
        AccessFlagBit[AccessFlagBit["VERTEX_SHADER_READ_UNIFORM_BUFFER"] = 8] = "VERTEX_SHADER_READ_UNIFORM_BUFFER";
        AccessFlagBit[AccessFlagBit["VERTEX_SHADER_READ_TEXTURE"] = 16] = "VERTEX_SHADER_READ_TEXTURE";
        AccessFlagBit[AccessFlagBit["VERTEX_SHADER_READ_OTHER"] = 32] = "VERTEX_SHADER_READ_OTHER";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_UNIFORM_BUFFER"] = 64] = "FRAGMENT_SHADER_READ_UNIFORM_BUFFER";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_TEXTURE"] = 128] = "FRAGMENT_SHADER_READ_TEXTURE";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_COLOR_INPUT_ATTACHMENT"] = 256] = "FRAGMENT_SHADER_READ_COLOR_INPUT_ATTACHMENT";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_DEPTH_STENCIL_INPUT_ATTACHMENT"] = 512] = "FRAGMENT_SHADER_READ_DEPTH_STENCIL_INPUT_ATTACHMENT";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_OTHER"] = 1024] = "FRAGMENT_SHADER_READ_OTHER";
        AccessFlagBit[AccessFlagBit["COLOR_ATTACHMENT_READ"] = 2048] = "COLOR_ATTACHMENT_READ";
        AccessFlagBit[AccessFlagBit["DEPTH_STENCIL_ATTACHMENT_READ"] = 4096] = "DEPTH_STENCIL_ATTACHMENT_READ";
        AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_READ_UNIFORM_BUFFER"] = 8192] = "COMPUTE_SHADER_READ_UNIFORM_BUFFER";
        AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_READ_TEXTURE"] = 16384] = "COMPUTE_SHADER_READ_TEXTURE";
        AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_READ_OTHER"] = 32768] = "COMPUTE_SHADER_READ_OTHER";
        AccessFlagBit[AccessFlagBit["TRANSFER_READ"] = 65536] = "TRANSFER_READ";
        AccessFlagBit[AccessFlagBit["HOST_READ"] = 131072] = "HOST_READ";
        AccessFlagBit[AccessFlagBit["PRESENT"] = 262144] = "PRESENT";
        AccessFlagBit[AccessFlagBit["VERTEX_SHADER_WRITE"] = 524288] = "VERTEX_SHADER_WRITE";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_WRITE"] = 1048576] = "FRAGMENT_SHADER_WRITE";
        AccessFlagBit[AccessFlagBit["COLOR_ATTACHMENT_WRITE"] = 2097152] = "COLOR_ATTACHMENT_WRITE";
        AccessFlagBit[AccessFlagBit["DEPTH_STENCIL_ATTACHMENT_WRITE"] = 4194304] = "DEPTH_STENCIL_ATTACHMENT_WRITE";
        AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_WRITE"] = 8388608] = "COMPUTE_SHADER_WRITE";
        AccessFlagBit[AccessFlagBit["TRANSFER_WRITE"] = 16777216] = "TRANSFER_WRITE";
        AccessFlagBit[AccessFlagBit["HOST_PREINITIALIZED"] = 33554432] = "HOST_PREINITIALIZED";
        AccessFlagBit[AccessFlagBit["HOST_WRITE"] = 67108864] = "HOST_WRITE";
      })(AccessFlagBit || (AccessFlagBit = exports('E', {})));

      let ResolveMode;

      (function (ResolveMode) {
        ResolveMode[ResolveMode["NONE"] = 0] = "NONE";
        ResolveMode[ResolveMode["SAMPLE_ZERO"] = 1] = "SAMPLE_ZERO";
        ResolveMode[ResolveMode["AVERAGE"] = 2] = "AVERAGE";
        ResolveMode[ResolveMode["MIN"] = 3] = "MIN";
        ResolveMode[ResolveMode["MAX"] = 4] = "MAX";
      })(ResolveMode || (ResolveMode = exports('R', {})));

      let PipelineBindPoint;

      (function (PipelineBindPoint) {
        PipelineBindPoint[PipelineBindPoint["GRAPHICS"] = 0] = "GRAPHICS";
        PipelineBindPoint[PipelineBindPoint["COMPUTE"] = 1] = "COMPUTE";
        PipelineBindPoint[PipelineBindPoint["RAY_TRACING"] = 2] = "RAY_TRACING";
      })(PipelineBindPoint || (PipelineBindPoint = exports('H', {})));

      let PrimitiveMode;

      (function (PrimitiveMode) {
        PrimitiveMode[PrimitiveMode["POINT_LIST"] = 0] = "POINT_LIST";
        PrimitiveMode[PrimitiveMode["LINE_LIST"] = 1] = "LINE_LIST";
        PrimitiveMode[PrimitiveMode["LINE_STRIP"] = 2] = "LINE_STRIP";
        PrimitiveMode[PrimitiveMode["LINE_LOOP"] = 3] = "LINE_LOOP";
        PrimitiveMode[PrimitiveMode["LINE_LIST_ADJACENCY"] = 4] = "LINE_LIST_ADJACENCY";
        PrimitiveMode[PrimitiveMode["LINE_STRIP_ADJACENCY"] = 5] = "LINE_STRIP_ADJACENCY";
        PrimitiveMode[PrimitiveMode["ISO_LINE_LIST"] = 6] = "ISO_LINE_LIST";
        PrimitiveMode[PrimitiveMode["TRIANGLE_LIST"] = 7] = "TRIANGLE_LIST";
        PrimitiveMode[PrimitiveMode["TRIANGLE_STRIP"] = 8] = "TRIANGLE_STRIP";
        PrimitiveMode[PrimitiveMode["TRIANGLE_FAN"] = 9] = "TRIANGLE_FAN";
        PrimitiveMode[PrimitiveMode["TRIANGLE_LIST_ADJACENCY"] = 10] = "TRIANGLE_LIST_ADJACENCY";
        PrimitiveMode[PrimitiveMode["TRIANGLE_STRIP_ADJACENCY"] = 11] = "TRIANGLE_STRIP_ADJACENCY";
        PrimitiveMode[PrimitiveMode["TRIANGLE_PATCH_ADJACENCY"] = 12] = "TRIANGLE_PATCH_ADJACENCY";
        PrimitiveMode[PrimitiveMode["QUAD_PATCH_LIST"] = 13] = "QUAD_PATCH_LIST";
      })(PrimitiveMode || (PrimitiveMode = exports('I', {})));

      let PolygonMode;

      (function (PolygonMode) {
        PolygonMode[PolygonMode["FILL"] = 0] = "FILL";
        PolygonMode[PolygonMode["POINT"] = 1] = "POINT";
        PolygonMode[PolygonMode["LINE"] = 2] = "LINE";
      })(PolygonMode || (PolygonMode = exports('J', {})));

      let ShadeModel;

      (function (ShadeModel) {
        ShadeModel[ShadeModel["GOURAND"] = 0] = "GOURAND";
        ShadeModel[ShadeModel["FLAT"] = 1] = "FLAT";
      })(ShadeModel || (ShadeModel = exports('K', {})));

      let CullMode;

      (function (CullMode) {
        CullMode[CullMode["NONE"] = 0] = "NONE";
        CullMode[CullMode["FRONT"] = 1] = "FRONT";
        CullMode[CullMode["BACK"] = 2] = "BACK";
      })(CullMode || (CullMode = exports('N', {})));

      let DynamicStateFlagBit;

      (function (DynamicStateFlagBit) {
        DynamicStateFlagBit[DynamicStateFlagBit["NONE"] = 0] = "NONE";
        DynamicStateFlagBit[DynamicStateFlagBit["LINE_WIDTH"] = 1] = "LINE_WIDTH";
        DynamicStateFlagBit[DynamicStateFlagBit["DEPTH_BIAS"] = 2] = "DEPTH_BIAS";
        DynamicStateFlagBit[DynamicStateFlagBit["BLEND_CONSTANTS"] = 4] = "BLEND_CONSTANTS";
        DynamicStateFlagBit[DynamicStateFlagBit["DEPTH_BOUNDS"] = 8] = "DEPTH_BOUNDS";
        DynamicStateFlagBit[DynamicStateFlagBit["STENCIL_WRITE_MASK"] = 16] = "STENCIL_WRITE_MASK";
        DynamicStateFlagBit[DynamicStateFlagBit["STENCIL_COMPARE_MASK"] = 32] = "STENCIL_COMPARE_MASK";
      })(DynamicStateFlagBit || (DynamicStateFlagBit = exports('U', {})));

      let StencilFace;

      (function (StencilFace) {
        StencilFace[StencilFace["FRONT"] = 1] = "FRONT";
        StencilFace[StencilFace["BACK"] = 2] = "BACK";
        StencilFace[StencilFace["ALL"] = 3] = "ALL";
      })(StencilFace || (StencilFace = exports('W', {})));

      let DescriptorType;

      (function (DescriptorType) {
        DescriptorType[DescriptorType["UNKNOWN"] = 0] = "UNKNOWN";
        DescriptorType[DescriptorType["UNIFORM_BUFFER"] = 1] = "UNIFORM_BUFFER";
        DescriptorType[DescriptorType["DYNAMIC_UNIFORM_BUFFER"] = 2] = "DYNAMIC_UNIFORM_BUFFER";
        DescriptorType[DescriptorType["STORAGE_BUFFER"] = 4] = "STORAGE_BUFFER";
        DescriptorType[DescriptorType["DYNAMIC_STORAGE_BUFFER"] = 8] = "DYNAMIC_STORAGE_BUFFER";
        DescriptorType[DescriptorType["SAMPLER_TEXTURE"] = 16] = "SAMPLER_TEXTURE";
        DescriptorType[DescriptorType["SAMPLER"] = 32] = "SAMPLER";
        DescriptorType[DescriptorType["TEXTURE"] = 64] = "TEXTURE";
        DescriptorType[DescriptorType["STORAGE_IMAGE"] = 128] = "STORAGE_IMAGE";
        DescriptorType[DescriptorType["INPUT_ATTACHMENT"] = 256] = "INPUT_ATTACHMENT";
      })(DescriptorType || (DescriptorType = exports('X', {})));

      let QueueType;

      (function (QueueType) {
        QueueType[QueueType["GRAPHICS"] = 0] = "GRAPHICS";
        QueueType[QueueType["COMPUTE"] = 1] = "COMPUTE";
        QueueType[QueueType["TRANSFER"] = 2] = "TRANSFER";
      })(QueueType || (QueueType = exports('Q', {})));

      let QueryType;

      (function (QueryType) {
        QueryType[QueryType["OCCLUSION"] = 0] = "OCCLUSION";
        QueryType[QueryType["PIPELINE_STATISTICS"] = 1] = "PIPELINE_STATISTICS";
        QueryType[QueryType["TIMESTAMP"] = 2] = "TIMESTAMP";
      })(QueryType || (QueryType = exports('Y', {})));

      let CommandBufferType;

      (function (CommandBufferType) {
        CommandBufferType[CommandBufferType["PRIMARY"] = 0] = "PRIMARY";
        CommandBufferType[CommandBufferType["SECONDARY"] = 1] = "SECONDARY";
      })(CommandBufferType || (CommandBufferType = exports('C', {})));

      let ClearFlagBit;

      (function (ClearFlagBit) {
        ClearFlagBit[ClearFlagBit["NONE"] = 0] = "NONE";
        ClearFlagBit[ClearFlagBit["COLOR"] = 1] = "COLOR";
        ClearFlagBit[ClearFlagBit["DEPTH"] = 2] = "DEPTH";
        ClearFlagBit[ClearFlagBit["STENCIL"] = 4] = "STENCIL";
        ClearFlagBit[ClearFlagBit["DEPTH_STENCIL"] = 6] = "DEPTH_STENCIL";
        ClearFlagBit[ClearFlagBit["ALL"] = 7] = "ALL";
      })(ClearFlagBit || (ClearFlagBit = exports('Z', {})));

      let BarrierType;

      (function (BarrierType) {
        BarrierType[BarrierType["FULL"] = 0] = "FULL";
        BarrierType[BarrierType["SPLIT_BEGIN"] = 1] = "SPLIT_BEGIN";
        BarrierType[BarrierType["SPLIT_END"] = 2] = "SPLIT_END";
      })(BarrierType || (BarrierType = exports('_', {})));

      let PassType;

      (function (PassType) {
        PassType[PassType["RASTER"] = 0] = "RASTER";
        PassType[PassType["COMPUTE"] = 1] = "COMPUTE";
        PassType[PassType["COPY"] = 2] = "COPY";
        PassType[PassType["MOVE"] = 3] = "MOVE";
        PassType[PassType["RAYTRACE"] = 4] = "RAYTRACE";
        PassType[PassType["PRESENT"] = 5] = "PRESENT";
      })(PassType || (PassType = exports('$', {})));

      class Size$1 {
        constructor(x = 0, y = 0, z = 0) {
          this.x = x;
          this.y = y;
          this.z = z;
        }

        copy(info) {
          this.x = info.x;
          this.y = info.y;
          this.z = info.z;
          return this;
        }

      } exports('a0', Size$1);
      class DeviceCaps {
        constructor(maxVertexAttributes = 0, maxVertexUniformVectors = 0, maxFragmentUniformVectors = 0, maxTextureUnits = 0, maxImageUnits = 0, maxVertexTextureUnits = 0, maxColorRenderTargets = 0, maxShaderStorageBufferBindings = 0, maxShaderStorageBlockSize = 0, maxUniformBufferBindings = 0, maxUniformBlockSize = 0, maxTextureSize = 0, maxCubeMapTextureSize = 0, maxArrayTextureLayers = 0, max3DTextureSize = 0, uboOffsetAlignment = 1, maxComputeSharedMemorySize = 0, maxComputeWorkGroupInvocations = 0, maxComputeWorkGroupSize = new Size$1(), maxComputeWorkGroupCount = new Size$1(), supportQuery = false, clipSpaceMinZ = -1, screenSpaceSignY = 1, clipSpaceSignY = 1) {
          this.maxVertexAttributes = maxVertexAttributes;
          this.maxVertexUniformVectors = maxVertexUniformVectors;
          this.maxFragmentUniformVectors = maxFragmentUniformVectors;
          this.maxTextureUnits = maxTextureUnits;
          this.maxImageUnits = maxImageUnits;
          this.maxVertexTextureUnits = maxVertexTextureUnits;
          this.maxColorRenderTargets = maxColorRenderTargets;
          this.maxShaderStorageBufferBindings = maxShaderStorageBufferBindings;
          this.maxShaderStorageBlockSize = maxShaderStorageBlockSize;
          this.maxUniformBufferBindings = maxUniformBufferBindings;
          this.maxUniformBlockSize = maxUniformBlockSize;
          this.maxTextureSize = maxTextureSize;
          this.maxCubeMapTextureSize = maxCubeMapTextureSize;
          this.maxArrayTextureLayers = maxArrayTextureLayers;
          this.max3DTextureSize = max3DTextureSize;
          this.uboOffsetAlignment = uboOffsetAlignment;
          this.maxComputeSharedMemorySize = maxComputeSharedMemorySize;
          this.maxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations;
          this.maxComputeWorkGroupSize = maxComputeWorkGroupSize;
          this.maxComputeWorkGroupCount = maxComputeWorkGroupCount;
          this.supportQuery = supportQuery;
          this.clipSpaceMinZ = clipSpaceMinZ;
          this.screenSpaceSignY = screenSpaceSignY;
          this.clipSpaceSignY = clipSpaceSignY;
        }

        copy(info) {
          this.maxVertexAttributes = info.maxVertexAttributes;
          this.maxVertexUniformVectors = info.maxVertexUniformVectors;
          this.maxFragmentUniformVectors = info.maxFragmentUniformVectors;
          this.maxTextureUnits = info.maxTextureUnits;
          this.maxImageUnits = info.maxImageUnits;
          this.maxVertexTextureUnits = info.maxVertexTextureUnits;
          this.maxColorRenderTargets = info.maxColorRenderTargets;
          this.maxShaderStorageBufferBindings = info.maxShaderStorageBufferBindings;
          this.maxShaderStorageBlockSize = info.maxShaderStorageBlockSize;
          this.maxUniformBufferBindings = info.maxUniformBufferBindings;
          this.maxUniformBlockSize = info.maxUniformBlockSize;
          this.maxTextureSize = info.maxTextureSize;
          this.maxCubeMapTextureSize = info.maxCubeMapTextureSize;
          this.maxArrayTextureLayers = info.maxArrayTextureLayers;
          this.max3DTextureSize = info.max3DTextureSize;
          this.uboOffsetAlignment = info.uboOffsetAlignment;
          this.maxComputeSharedMemorySize = info.maxComputeSharedMemorySize;
          this.maxComputeWorkGroupInvocations = info.maxComputeWorkGroupInvocations;
          this.maxComputeWorkGroupSize.copy(info.maxComputeWorkGroupSize);
          this.maxComputeWorkGroupCount.copy(info.maxComputeWorkGroupCount);
          this.supportQuery = info.supportQuery;
          this.clipSpaceMinZ = info.clipSpaceMinZ;
          this.screenSpaceSignY = info.screenSpaceSignY;
          this.clipSpaceSignY = info.clipSpaceSignY;
          return this;
        }

      } exports('a1', DeviceCaps);
      class DeviceOptions {
        constructor(enableBarrierDeduce = true) {
          this.enableBarrierDeduce = enableBarrierDeduce;
        }

        copy(info) {
          this.enableBarrierDeduce = info.enableBarrierDeduce;
          return this;
        }

      } exports('a2', DeviceOptions);
      class Offset {
        constructor(x = 0, y = 0, z = 0) {
          this.x = x;
          this.y = y;
          this.z = z;
        }

        copy(info) {
          this.x = info.x;
          this.y = info.y;
          this.z = info.z;
          return this;
        }

      } exports('a3', Offset);
      class Rect$1 {
        constructor(x = 0, y = 0, width = 0, height = 0) {
          this.x = x;
          this.y = y;
          this.width = width;
          this.height = height;
        }

        copy(info) {
          this.x = info.x;
          this.y = info.y;
          this.width = info.width;
          this.height = info.height;
          return this;
        }

      } exports('a4', Rect$1);
      class Extent {
        constructor(width = 0, height = 0, depth = 1) {
          this.width = width;
          this.height = height;
          this.depth = depth;
        }

        copy(info) {
          this.width = info.width;
          this.height = info.height;
          this.depth = info.depth;
          return this;
        }

      } exports('a5', Extent);
      class TextureSubresLayers {
        constructor(mipLevel = 0, baseArrayLayer = 0, layerCount = 1) {
          this.mipLevel = mipLevel;
          this.baseArrayLayer = baseArrayLayer;
          this.layerCount = layerCount;
        }

        copy(info) {
          this.mipLevel = info.mipLevel;
          this.baseArrayLayer = info.baseArrayLayer;
          this.layerCount = info.layerCount;
          return this;
        }

      } exports('a6', TextureSubresLayers);
      class TextureSubresRange {
        constructor(baseMipLevel = 0, levelCount = 1, baseArrayLayer = 0, layerCount = 1) {
          this.baseMipLevel = baseMipLevel;
          this.levelCount = levelCount;
          this.baseArrayLayer = baseArrayLayer;
          this.layerCount = layerCount;
        }

        copy(info) {
          this.baseMipLevel = info.baseMipLevel;
          this.levelCount = info.levelCount;
          this.baseArrayLayer = info.baseArrayLayer;
          this.layerCount = info.layerCount;
          return this;
        }

      } exports('a7', TextureSubresRange);
      class TextureCopy {
        constructor(srcSubres = new TextureSubresLayers(), srcOffset = new Offset(), dstSubres = new TextureSubresLayers(), dstOffset = new Offset(), extent = new Extent()) {
          this.srcSubres = srcSubres;
          this.srcOffset = srcOffset;
          this.dstSubres = dstSubres;
          this.dstOffset = dstOffset;
          this.extent = extent;
        }

        copy(info) {
          this.srcSubres.copy(info.srcSubres);
          this.srcOffset.copy(info.srcOffset);
          this.dstSubres.copy(info.dstSubres);
          this.dstOffset.copy(info.dstOffset);
          this.extent.copy(info.extent);
          return this;
        }

      } exports('a8', TextureCopy);
      class TextureBlit {
        constructor(srcSubres = new TextureSubresLayers(), srcOffset = new Offset(), srcExtent = new Extent(), dstSubres = new TextureSubresLayers(), dstOffset = new Offset(), dstExtent = new Extent()) {
          this.srcSubres = srcSubres;
          this.srcOffset = srcOffset;
          this.srcExtent = srcExtent;
          this.dstSubres = dstSubres;
          this.dstOffset = dstOffset;
          this.dstExtent = dstExtent;
        }

        copy(info) {
          this.srcSubres.copy(info.srcSubres);
          this.srcOffset.copy(info.srcOffset);
          this.srcExtent.copy(info.srcExtent);
          this.dstSubres.copy(info.dstSubres);
          this.dstOffset.copy(info.dstOffset);
          this.dstExtent.copy(info.dstExtent);
          return this;
        }

      } exports('a9', TextureBlit);
      class BufferTextureCopy {
        constructor(buffOffset = 0, buffStride = 0, buffTexHeight = 0, texOffset = new Offset(), texExtent = new Extent(), texSubres = new TextureSubresLayers()) {
          this.buffOffset = buffOffset;
          this.buffStride = buffStride;
          this.buffTexHeight = buffTexHeight;
          this.texOffset = texOffset;
          this.texExtent = texExtent;
          this.texSubres = texSubres;
        }

        copy(info) {
          this.buffOffset = info.buffOffset;
          this.buffStride = info.buffStride;
          this.buffTexHeight = info.buffTexHeight;
          this.texOffset.copy(info.texOffset);
          this.texExtent.copy(info.texExtent);
          this.texSubres.copy(info.texSubres);
          return this;
        }

      } exports('aa', BufferTextureCopy);
      class Viewport {
        constructor(left = 0, top = 0, width = 0, height = 0, minDepth = 0, maxDepth = 1) {
          this.left = left;
          this.top = top;
          this.width = width;
          this.height = height;
          this.minDepth = minDepth;
          this.maxDepth = maxDepth;
        }

        copy(info) {
          this.left = info.left;
          this.top = info.top;
          this.width = info.width;
          this.height = info.height;
          this.minDepth = info.minDepth;
          this.maxDepth = info.maxDepth;
          return this;
        }

      } exports('ab', Viewport);
      class Color$1 {
        constructor(x = 0, y = 0, z = 0, w = 0) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
        }

        copy(info) {
          this.x = info.x;
          this.y = info.y;
          this.z = info.z;
          this.w = info.w;
          return this;
        }

      } exports('ac', Color$1);
      class BindingMappingInfo {
        constructor(maxBlockCounts = [0], maxSamplerTextureCounts = [0], maxSamplerCounts = [0], maxTextureCounts = [0], maxBufferCounts = [0], maxImageCounts = [0], maxSubpassInputCounts = [0], setIndices = [0]) {
          this.maxBlockCounts = maxBlockCounts;
          this.maxSamplerTextureCounts = maxSamplerTextureCounts;
          this.maxSamplerCounts = maxSamplerCounts;
          this.maxTextureCounts = maxTextureCounts;
          this.maxBufferCounts = maxBufferCounts;
          this.maxImageCounts = maxImageCounts;
          this.maxSubpassInputCounts = maxSubpassInputCounts;
          this.setIndices = setIndices;
        }

        copy(info) {
          this.maxBlockCounts = info.maxBlockCounts.slice();
          this.maxSamplerTextureCounts = info.maxSamplerTextureCounts.slice();
          this.maxSamplerCounts = info.maxSamplerCounts.slice();
          this.maxTextureCounts = info.maxTextureCounts.slice();
          this.maxBufferCounts = info.maxBufferCounts.slice();
          this.maxImageCounts = info.maxImageCounts.slice();
          this.maxSubpassInputCounts = info.maxSubpassInputCounts.slice();
          this.setIndices = info.setIndices.slice();
          return this;
        }

      } exports('ad', BindingMappingInfo);
      class SwapchainInfo {
        constructor(windowId = 0, windowHandle = null, vsyncMode = VsyncMode.ON, width = 0, height = 0) {
          this.windowId = windowId;
          this.windowHandle = windowHandle;
          this.vsyncMode = vsyncMode;
          this.width = width;
          this.height = height;
        }

        copy(info) {
          this.windowId = info.windowId;
          this.windowHandle = info.windowHandle;
          this.vsyncMode = info.vsyncMode;
          this.width = info.width;
          this.height = info.height;
          return this;
        }

      } exports('ae', SwapchainInfo);
      class DeviceInfo {
        constructor(bindingMappingInfo = new BindingMappingInfo()) {
          this.bindingMappingInfo = bindingMappingInfo;
        }

        copy(info) {
          this.bindingMappingInfo.copy(info.bindingMappingInfo);
          return this;
        }

      } exports('af', DeviceInfo);
      class BufferInfo {
        constructor(usage = BufferUsageBit.NONE, memUsage = MemoryUsageBit.NONE, size = 0, stride = 1, flags = BufferFlagBit.NONE) {
          this.usage = usage;
          this.memUsage = memUsage;
          this.size = size;
          this.stride = stride;
          this.flags = flags;
        }

        copy(info) {
          this.usage = info.usage;
          this.memUsage = info.memUsage;
          this.size = info.size;
          this.stride = info.stride;
          this.flags = info.flags;
          return this;
        }

      } exports('ag', BufferInfo);
      class BufferViewInfo {
        constructor(buffer = null, offset = 0, range = 0) {
          this.buffer = buffer;
          this.offset = offset;
          this.range = range;
        }

        copy(info) {
          this.buffer = info.buffer;
          this.offset = info.offset;
          this.range = info.range;
          return this;
        }

      } exports('ah', BufferViewInfo);
      class DrawInfo {
        constructor(vertexCount = 0, firstVertex = 0, indexCount = 0, firstIndex = 0, vertexOffset = 0, instanceCount = 0, firstInstance = 0) {
          this.vertexCount = vertexCount;
          this.firstVertex = firstVertex;
          this.indexCount = indexCount;
          this.firstIndex = firstIndex;
          this.vertexOffset = vertexOffset;
          this.instanceCount = instanceCount;
          this.firstInstance = firstInstance;
        }

        copy(info) {
          this.vertexCount = info.vertexCount;
          this.firstVertex = info.firstVertex;
          this.indexCount = info.indexCount;
          this.firstIndex = info.firstIndex;
          this.vertexOffset = info.vertexOffset;
          this.instanceCount = info.instanceCount;
          this.firstInstance = info.firstInstance;
          return this;
        }

      } exports('e', DrawInfo);
      class DispatchInfo {
        constructor(groupCountX = 0, groupCountY = 0, groupCountZ = 0, indirectBuffer = null, indirectOffset = 0) {
          this.groupCountX = groupCountX;
          this.groupCountY = groupCountY;
          this.groupCountZ = groupCountZ;
          this.indirectBuffer = indirectBuffer;
          this.indirectOffset = indirectOffset;
        }

        copy(info) {
          this.groupCountX = info.groupCountX;
          this.groupCountY = info.groupCountY;
          this.groupCountZ = info.groupCountZ;
          this.indirectBuffer = info.indirectBuffer;
          this.indirectOffset = info.indirectOffset;
          return this;
        }

      } exports('ai', DispatchInfo);
      class IndirectBuffer {
        constructor(drawInfos = []) {
          this.drawInfos = drawInfos;
        }

        copy(info) {
          deepCopy(this.drawInfos, info.drawInfos, DrawInfo);
          return this;
        }

      } exports('aj', IndirectBuffer);
      class TextureInfo {
        constructor(type = TextureType.TEX2D, usage = TextureUsageBit.NONE, format = Format.UNKNOWN, width = 0, height = 0, flags = TextureFlagBit.NONE, layerCount = 1, levelCount = 1, samples = SampleCount.ONE, depth = 1, externalRes = 0) {
          this.type = type;
          this.usage = usage;
          this.format = format;
          this.width = width;
          this.height = height;
          this.flags = flags;
          this.layerCount = layerCount;
          this.levelCount = levelCount;
          this.samples = samples;
          this.depth = depth;
          this.externalRes = externalRes;
        }

        copy(info) {
          this.type = info.type;
          this.usage = info.usage;
          this.format = info.format;
          this.width = info.width;
          this.height = info.height;
          this.flags = info.flags;
          this.layerCount = info.layerCount;
          this.levelCount = info.levelCount;
          this.samples = info.samples;
          this.depth = info.depth;
          this.externalRes = info.externalRes;
          return this;
        }

      } exports('ak', TextureInfo);
      class TextureViewInfo {
        constructor(texture = null, type = TextureType.TEX2D, format = Format.UNKNOWN, baseLevel = 0, levelCount = 1, baseLayer = 0, layerCount = 1) {
          this.texture = texture;
          this.type = type;
          this.format = format;
          this.baseLevel = baseLevel;
          this.levelCount = levelCount;
          this.baseLayer = baseLayer;
          this.layerCount = layerCount;
        }

        copy(info) {
          this.texture = info.texture;
          this.type = info.type;
          this.format = info.format;
          this.baseLevel = info.baseLevel;
          this.levelCount = info.levelCount;
          this.baseLayer = info.baseLayer;
          this.layerCount = info.layerCount;
          return this;
        }

      } exports('al', TextureViewInfo);
      class SamplerInfo {
        constructor(minFilter = Filter.LINEAR, magFilter = Filter.LINEAR, mipFilter = Filter.NONE, addressU = Address.WRAP, addressV = Address.WRAP, addressW = Address.WRAP, maxAnisotropy = 0, cmpFunc = ComparisonFunc.ALWAYS) {
          this.minFilter = minFilter;
          this.magFilter = magFilter;
          this.mipFilter = mipFilter;
          this.addressU = addressU;
          this.addressV = addressV;
          this.addressW = addressW;
          this.maxAnisotropy = maxAnisotropy;
          this.cmpFunc = cmpFunc;
        }

        copy(info) {
          this.minFilter = info.minFilter;
          this.magFilter = info.magFilter;
          this.mipFilter = info.mipFilter;
          this.addressU = info.addressU;
          this.addressV = info.addressV;
          this.addressW = info.addressW;
          this.maxAnisotropy = info.maxAnisotropy;
          this.cmpFunc = info.cmpFunc;
          return this;
        }

      } exports('f', SamplerInfo);
      class Uniform {
        constructor(name = '', type = Type.UNKNOWN, count = 0) {
          this.name = name;
          this.type = type;
          this.count = count;
        }

        copy(info) {
          this.name = info.name;
          this.type = info.type;
          this.count = info.count;
          return this;
        }

      } exports('am', Uniform);
      class UniformBlock {
        constructor(set = 0, binding = 0, name = '', members = [], count = 0, flattened = 0) {
          this.set = set;
          this.binding = binding;
          this.name = name;
          this.members = members;
          this.count = count;
          this.flattened = flattened;
        }

        copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          deepCopy(this.members, info.members, Uniform);
          this.count = info.count;
          this.flattened = info.flattened;
          return this;
        }

      } exports('an', UniformBlock);
      class UniformSamplerTexture {
        constructor(set = 0, binding = 0, name = '', type = Type.UNKNOWN, count = 0, flattened = 0) {
          this.set = set;
          this.binding = binding;
          this.name = name;
          this.type = type;
          this.count = count;
          this.flattened = flattened;
        }

        copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.type = info.type;
          this.count = info.count;
          this.flattened = info.flattened;
          return this;
        }

      } exports('ao', UniformSamplerTexture);
      class UniformSampler {
        constructor(set = 0, binding = 0, name = '', count = 0, flattened = 0) {
          this.set = set;
          this.binding = binding;
          this.name = name;
          this.count = count;
          this.flattened = flattened;
        }

        copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.count = info.count;
          this.flattened = info.flattened;
          return this;
        }

      } exports('ap', UniformSampler);
      class UniformTexture {
        constructor(set = 0, binding = 0, name = '', type = Type.UNKNOWN, count = 0, flattened = 0) {
          this.set = set;
          this.binding = binding;
          this.name = name;
          this.type = type;
          this.count = count;
          this.flattened = flattened;
        }

        copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.type = info.type;
          this.count = info.count;
          this.flattened = info.flattened;
          return this;
        }

      } exports('aq', UniformTexture);
      class UniformStorageImage {
        constructor(set = 0, binding = 0, name = '', type = Type.UNKNOWN, count = 0, memoryAccess = MemoryAccessBit.READ_WRITE, flattened = 0) {
          this.set = set;
          this.binding = binding;
          this.name = name;
          this.type = type;
          this.count = count;
          this.memoryAccess = memoryAccess;
          this.flattened = flattened;
        }

        copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.type = info.type;
          this.count = info.count;
          this.memoryAccess = info.memoryAccess;
          this.flattened = info.flattened;
          return this;
        }

      } exports('ar', UniformStorageImage);
      class UniformStorageBuffer {
        constructor(set = 0, binding = 0, name = '', count = 0, memoryAccess = MemoryAccessBit.READ_WRITE, flattened = 0) {
          this.set = set;
          this.binding = binding;
          this.name = name;
          this.count = count;
          this.memoryAccess = memoryAccess;
          this.flattened = flattened;
        }

        copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.count = info.count;
          this.memoryAccess = info.memoryAccess;
          this.flattened = info.flattened;
          return this;
        }

      } exports('as', UniformStorageBuffer);
      class UniformInputAttachment {
        constructor(set = 0, binding = 0, name = '', count = 0, flattened = 0) {
          this.set = set;
          this.binding = binding;
          this.name = name;
          this.count = count;
          this.flattened = flattened;
        }

        copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.count = info.count;
          this.flattened = info.flattened;
          return this;
        }

      } exports('at', UniformInputAttachment);
      class ShaderStage {
        constructor(stage = ShaderStageFlagBit.NONE, source = '') {
          this.stage = stage;
          this.source = source;
        }

        copy(info) {
          this.stage = info.stage;
          this.source = info.source;
          return this;
        }

      } exports('au', ShaderStage);
      class Attribute {
        constructor(name = '', format = Format.UNKNOWN, isNormalized = false, stream = 0, isInstanced = false, location = 0) {
          this.name = name;
          this.format = format;
          this.isNormalized = isNormalized;
          this.stream = stream;
          this.isInstanced = isInstanced;
          this.location = location;
        }

        copy(info) {
          this.name = info.name;
          this.format = info.format;
          this.isNormalized = info.isNormalized;
          this.stream = info.stream;
          this.isInstanced = info.isInstanced;
          this.location = info.location;
          return this;
        }

      } exports('av', Attribute);
      class ShaderInfo {
        constructor(name = '', stages = [], attributes = [], blocks = [], buffers = [], samplerTextures = [], samplers = [], textures = [], images = [], subpassInputs = []) {
          this.name = name;
          this.stages = stages;
          this.attributes = attributes;
          this.blocks = blocks;
          this.buffers = buffers;
          this.samplerTextures = samplerTextures;
          this.samplers = samplers;
          this.textures = textures;
          this.images = images;
          this.subpassInputs = subpassInputs;
        }

        copy(info) {
          this.name = info.name;
          deepCopy(this.stages, info.stages, ShaderStage);
          deepCopy(this.attributes, info.attributes, Attribute);
          deepCopy(this.blocks, info.blocks, UniformBlock);
          deepCopy(this.buffers, info.buffers, UniformStorageBuffer);
          deepCopy(this.samplerTextures, info.samplerTextures, UniformSamplerTexture);
          deepCopy(this.samplers, info.samplers, UniformSampler);
          deepCopy(this.textures, info.textures, UniformTexture);
          deepCopy(this.images, info.images, UniformStorageImage);
          deepCopy(this.subpassInputs, info.subpassInputs, UniformInputAttachment);
          return this;
        }

      } exports('aw', ShaderInfo);
      class InputAssemblerInfo {
        constructor(attributes = [], vertexBuffers = [], indexBuffer = null, indirectBuffer = null) {
          this.attributes = attributes;
          this.vertexBuffers = vertexBuffers;
          this.indexBuffer = indexBuffer;
          this.indirectBuffer = indirectBuffer;
        }

        copy(info) {
          deepCopy(this.attributes, info.attributes, Attribute);
          this.vertexBuffers = info.vertexBuffers.slice();
          this.indexBuffer = info.indexBuffer;
          this.indirectBuffer = info.indirectBuffer;
          return this;
        }

      } exports('ax', InputAssemblerInfo);
      class ColorAttachment {
        constructor(format = Format.UNKNOWN, sampleCount = SampleCount.ONE, loadOp = LoadOp.CLEAR, storeOp = StoreOp.STORE, barrier = null, isGeneralLayout = false) {
          this.format = format;
          this.sampleCount = sampleCount;
          this.loadOp = loadOp;
          this.storeOp = storeOp;
          this.barrier = barrier;
          this.isGeneralLayout = isGeneralLayout;
        }

        copy(info) {
          this.format = info.format;
          this.sampleCount = info.sampleCount;
          this.loadOp = info.loadOp;
          this.storeOp = info.storeOp;
          this.barrier = info.barrier;
          this.isGeneralLayout = info.isGeneralLayout;
          return this;
        }

      } exports('ay', ColorAttachment);
      class DepthStencilAttachment {
        constructor(format = Format.UNKNOWN, sampleCount = SampleCount.ONE, depthLoadOp = LoadOp.CLEAR, depthStoreOp = StoreOp.STORE, stencilLoadOp = LoadOp.CLEAR, stencilStoreOp = StoreOp.STORE, barrier = null, isGeneralLayout = false) {
          this.format = format;
          this.sampleCount = sampleCount;
          this.depthLoadOp = depthLoadOp;
          this.depthStoreOp = depthStoreOp;
          this.stencilLoadOp = stencilLoadOp;
          this.stencilStoreOp = stencilStoreOp;
          this.barrier = barrier;
          this.isGeneralLayout = isGeneralLayout;
        }

        copy(info) {
          this.format = info.format;
          this.sampleCount = info.sampleCount;
          this.depthLoadOp = info.depthLoadOp;
          this.depthStoreOp = info.depthStoreOp;
          this.stencilLoadOp = info.stencilLoadOp;
          this.stencilStoreOp = info.stencilStoreOp;
          this.barrier = info.barrier;
          this.isGeneralLayout = info.isGeneralLayout;
          return this;
        }

      } exports('az', DepthStencilAttachment);
      class SubpassInfo {
        constructor(inputs = [], colors = [], resolves = [], preserves = [], depthStencil = -1, depthStencilResolve = -1, depthResolveMode = ResolveMode.NONE, stencilResolveMode = ResolveMode.NONE) {
          this.inputs = inputs;
          this.colors = colors;
          this.resolves = resolves;
          this.preserves = preserves;
          this.depthStencil = depthStencil;
          this.depthStencilResolve = depthStencilResolve;
          this.depthResolveMode = depthResolveMode;
          this.stencilResolveMode = stencilResolveMode;
        }

        copy(info) {
          this.inputs = info.inputs.slice();
          this.colors = info.colors.slice();
          this.resolves = info.resolves.slice();
          this.preserves = info.preserves.slice();
          this.depthStencil = info.depthStencil;
          this.depthStencilResolve = info.depthStencilResolve;
          this.depthResolveMode = info.depthResolveMode;
          this.stencilResolveMode = info.stencilResolveMode;
          return this;
        }

      } exports('aA', SubpassInfo);
      class SubpassDependency {
        constructor(srcSubpass = 0, dstSubpass = 0, generalBarrier = null, bufferBarriers = null, buffers = null, bufferBarrierCount = 0, textureBarriers = null, textures = null, textureBarrierCount = 0) {
          this.srcSubpass = srcSubpass;
          this.dstSubpass = dstSubpass;
          this.generalBarrier = generalBarrier;
          this.bufferBarriers = bufferBarriers;
          this.buffers = buffers;
          this.bufferBarrierCount = bufferBarrierCount;
          this.textureBarriers = textureBarriers;
          this.textures = textures;
          this.textureBarrierCount = textureBarrierCount;
        }

        copy(info) {
          this.srcSubpass = info.srcSubpass;
          this.dstSubpass = info.dstSubpass;
          this.generalBarrier = info.generalBarrier;
          this.bufferBarriers = info.bufferBarriers;
          this.buffers = info.buffers;
          this.bufferBarrierCount = info.bufferBarrierCount;
          this.textureBarriers = info.textureBarriers;
          this.textures = info.textures;
          this.textureBarrierCount = info.textureBarrierCount;
          return this;
        }

      } exports('aB', SubpassDependency);
      class RenderPassInfo {
        constructor(colorAttachments = [], depthStencilAttachment = new DepthStencilAttachment(), subpasses = [], dependencies = []) {
          this.colorAttachments = colorAttachments;
          this.depthStencilAttachment = depthStencilAttachment;
          this.subpasses = subpasses;
          this.dependencies = dependencies;
        }

        copy(info) {
          deepCopy(this.colorAttachments, info.colorAttachments, ColorAttachment);
          this.depthStencilAttachment.copy(info.depthStencilAttachment);
          deepCopy(this.subpasses, info.subpasses, SubpassInfo);
          deepCopy(this.dependencies, info.dependencies, SubpassDependency);
          return this;
        }

      } exports('aC', RenderPassInfo);
      class GeneralBarrierInfo {
        constructor(prevAccesses = AccessFlagBit.NONE, nextAccesses = AccessFlagBit.NONE, type = BarrierType.FULL) {
          this.prevAccesses = prevAccesses;
          this.nextAccesses = nextAccesses;
          this.type = type;
        }

        copy(info) {
          this.prevAccesses = info.prevAccesses;
          this.nextAccesses = info.nextAccesses;
          this.type = info.type;
          return this;
        }

      } exports('g', GeneralBarrierInfo);
      class TextureBarrierInfo {
        constructor(prevAccesses = AccessFlagBit.NONE, nextAccesses = AccessFlagBit.NONE, type = BarrierType.FULL, baseMipLevel = 0, levelCount = 1, baseSlice = 0, sliceCount = 1, discardContents = false, srcQueue = null, dstQueue = null) {
          this.prevAccesses = prevAccesses;
          this.nextAccesses = nextAccesses;
          this.type = type;
          this.baseMipLevel = baseMipLevel;
          this.levelCount = levelCount;
          this.baseSlice = baseSlice;
          this.sliceCount = sliceCount;
          this.discardContents = discardContents;
          this.srcQueue = srcQueue;
          this.dstQueue = dstQueue;
        }

        copy(info) {
          this.prevAccesses = info.prevAccesses;
          this.nextAccesses = info.nextAccesses;
          this.type = info.type;
          this.baseMipLevel = info.baseMipLevel;
          this.levelCount = info.levelCount;
          this.baseSlice = info.baseSlice;
          this.sliceCount = info.sliceCount;
          this.discardContents = info.discardContents;
          this.srcQueue = info.srcQueue;
          this.dstQueue = info.dstQueue;
          return this;
        }

      } exports('T', TextureBarrierInfo);
      class BufferBarrierInfo {
        constructor(prevAccesses = AccessFlagBit.NONE, nextAccesses = AccessFlagBit.NONE, type = BarrierType.FULL, offset = 0, size = 0, discardContents = false, srcQueue = null, dstQueue = null) {
          this.prevAccesses = prevAccesses;
          this.nextAccesses = nextAccesses;
          this.type = type;
          this.offset = offset;
          this.size = size;
          this.discardContents = discardContents;
          this.srcQueue = srcQueue;
          this.dstQueue = dstQueue;
        }

        copy(info) {
          this.prevAccesses = info.prevAccesses;
          this.nextAccesses = info.nextAccesses;
          this.type = info.type;
          this.offset = info.offset;
          this.size = info.size;
          this.discardContents = info.discardContents;
          this.srcQueue = info.srcQueue;
          this.dstQueue = info.dstQueue;
          return this;
        }

      } exports('aD', BufferBarrierInfo);
      class FramebufferInfo {
        constructor(renderPass = null, colorTextures = [], depthStencilTexture = null) {
          this.renderPass = renderPass;
          this.colorTextures = colorTextures;
          this.depthStencilTexture = depthStencilTexture;
        }

        copy(info) {
          this.renderPass = info.renderPass;
          this.colorTextures = info.colorTextures.slice();
          this.depthStencilTexture = info.depthStencilTexture;
          return this;
        }

      } exports('aE', FramebufferInfo);
      class DescriptorSetLayoutBinding {
        constructor(binding = -1, descriptorType = DescriptorType.UNKNOWN, count = 0, stageFlags = ShaderStageFlagBit.NONE, immutableSamplers = []) {
          this.binding = binding;
          this.descriptorType = descriptorType;
          this.count = count;
          this.stageFlags = stageFlags;
          this.immutableSamplers = immutableSamplers;
        }

        copy(info) {
          this.binding = info.binding;
          this.descriptorType = info.descriptorType;
          this.count = info.count;
          this.stageFlags = info.stageFlags;
          this.immutableSamplers = info.immutableSamplers.slice();
          return this;
        }

      } exports('aF', DescriptorSetLayoutBinding);
      class DescriptorSetLayoutInfo {
        constructor(bindings = []) {
          this.bindings = bindings;
        }

        copy(info) {
          deepCopy(this.bindings, info.bindings, DescriptorSetLayoutBinding);
          return this;
        }

      } exports('aG', DescriptorSetLayoutInfo);
      class DescriptorSetInfo {
        constructor(layout = null) {
          this.layout = layout;
        }

        copy(info) {
          this.layout = info.layout;
          return this;
        }

      } exports('aH', DescriptorSetInfo);
      class PipelineLayoutInfo {
        constructor(setLayouts = []) {
          this.setLayouts = setLayouts;
        }

        copy(info) {
          this.setLayouts = info.setLayouts.slice();
          return this;
        }

      } exports('aI', PipelineLayoutInfo);
      class InputState {
        constructor(attributes = []) {
          this.attributes = attributes;
        }

        copy(info) {
          deepCopy(this.attributes, info.attributes, Attribute);
          return this;
        }

      } exports('aJ', InputState);
      class CommandBufferInfo {
        constructor(queue = null, type = CommandBufferType.PRIMARY) {
          this.queue = queue;
          this.type = type;
        }

        copy(info) {
          this.queue = info.queue;
          this.type = info.type;
          return this;
        }

      } exports('aK', CommandBufferInfo);
      class QueueInfo {
        constructor(type = QueueType.GRAPHICS) {
          this.type = type;
        }

        copy(info) {
          this.type = info.type;
          return this;
        }

      } exports('aL', QueueInfo);
      class QueryPoolInfo {
        constructor(type = QueryType.OCCLUSION, maxQueryObjects = 32767, forceWait = true) {
          this.type = type;
          this.maxQueryObjects = maxQueryObjects;
          this.forceWait = forceWait;
        }

        copy(info) {
          this.type = info.type;
          this.maxQueryObjects = info.maxQueryObjects;
          this.forceWait = info.forceWait;
          return this;
        }

      } exports('aM', QueryPoolInfo);
      class FormatInfo {
        constructor(name = '', size = 0, count = 0, type = FormatType.NONE, hasAlpha = false, hasDepth = false, hasStencil = false, isCompressed = false) {
          this.name = name;
          this.size = size;
          this.count = count;
          this.type = type;
          this.hasAlpha = hasAlpha;
          this.hasDepth = hasDepth;
          this.hasStencil = hasStencil;
          this.isCompressed = isCompressed;
        }

      } exports('aN', FormatInfo);
      class MemoryStatus {
        constructor(bufferSize = 0, textureSize = 0) {
          this.bufferSize = bufferSize;
          this.textureSize = textureSize;
        }

        copy(info) {
          this.bufferSize = info.bufferSize;
          this.textureSize = info.textureSize;
          return this;
        }

      } exports('aO', MemoryStatus);
      class DynamicStencilStates {
        constructor(writeMask = 0, compareMask = 0, reference = 0) {
          this.writeMask = writeMask;
          this.compareMask = compareMask;
          this.reference = reference;
        }

        copy(info) {
          this.writeMask = info.writeMask;
          this.compareMask = info.compareMask;
          this.reference = info.reference;
          return this;
        }

      } exports('aP', DynamicStencilStates);
      class DynamicStates {
        constructor(viewport = new Viewport(), scissor = new Rect$1(), blendConstant = new Color$1(), lineWidth = 1, depthBiasConstant = 0, depthBiasClamp = 0, depthBiasSlope = 0, depthMinBounds = 0, depthMaxBounds = 0, stencilStatesFront = new DynamicStencilStates(), stencilStatesBack = new DynamicStencilStates()) {
          this.viewport = viewport;
          this.scissor = scissor;
          this.blendConstant = blendConstant;
          this.lineWidth = lineWidth;
          this.depthBiasConstant = depthBiasConstant;
          this.depthBiasClamp = depthBiasClamp;
          this.depthBiasSlope = depthBiasSlope;
          this.depthMinBounds = depthMinBounds;
          this.depthMaxBounds = depthMaxBounds;
          this.stencilStatesFront = stencilStatesFront;
          this.stencilStatesBack = stencilStatesBack;
        }

        copy(info) {
          this.viewport.copy(info.viewport);
          this.scissor.copy(info.scissor);
          this.blendConstant.copy(info.blendConstant);
          this.lineWidth = info.lineWidth;
          this.depthBiasConstant = info.depthBiasConstant;
          this.depthBiasClamp = info.depthBiasClamp;
          this.depthBiasSlope = info.depthBiasSlope;
          this.depthMinBounds = info.depthMinBounds;
          this.depthMaxBounds = info.depthMaxBounds;
          this.stencilStatesFront.copy(info.stencilStatesFront);
          this.stencilStatesBack.copy(info.stencilStatesBack);
          return this;
        }

      } exports('aQ', DynamicStates);
      class GFXObject extends GCObject {
        get objectType() {
          return this._objectType;
        }

        get objectID() {
          return this._objectID;
        }

        get typedID() {
          return this._typedID;
        }

        constructor(objectType) {
          super();
          this._objectType = ObjectType.UNKNOWN;
          this._objectID = 0;
          this._typedID = 0;
          this._objectType = objectType;
          this._objectID = GFXObject._idTable[ObjectType.UNKNOWN]++;
          this._typedID = GFXObject._idTable[objectType]++;
        }

      } exports('G', GFXObject);
      GFXObject._idTable = Array(ObjectType.COUNT).fill(1 << 16);
      let AttributeName;

      (function (AttributeName) {
        AttributeName["ATTR_POSITION"] = "a_position";
        AttributeName["ATTR_NORMAL"] = "a_normal";
        AttributeName["ATTR_TANGENT"] = "a_tangent";
        AttributeName["ATTR_BITANGENT"] = "a_bitangent";
        AttributeName["ATTR_WEIGHTS"] = "a_weights";
        AttributeName["ATTR_JOINTS"] = "a_joints";
        AttributeName["ATTR_COLOR"] = "a_color";
        AttributeName["ATTR_COLOR1"] = "a_color1";
        AttributeName["ATTR_COLOR2"] = "a_color2";
        AttributeName["ATTR_TEX_COORD"] = "a_texCoord";
        AttributeName["ATTR_TEX_COORD1"] = "a_texCoord1";
        AttributeName["ATTR_TEX_COORD2"] = "a_texCoord2";
        AttributeName["ATTR_TEX_COORD3"] = "a_texCoord3";
        AttributeName["ATTR_TEX_COORD4"] = "a_texCoord4";
        AttributeName["ATTR_TEX_COORD5"] = "a_texCoord5";
        AttributeName["ATTR_TEX_COORD6"] = "a_texCoord6";
        AttributeName["ATTR_TEX_COORD7"] = "a_texCoord7";
        AttributeName["ATTR_TEX_COORD8"] = "a_texCoord8";
        AttributeName["ATTR_BATCH_ID"] = "a_batch_id";
        AttributeName["ATTR_BATCH_UV"] = "a_batch_uv";
      })(AttributeName || (AttributeName = exports('aR', {})));

      const FormatInfos = exports('aS', Object.freeze([new FormatInfo('UNKNOWN', 0, 0, FormatType.NONE, false, false, false, false), new FormatInfo('A8', 1, 1, FormatType.UNORM, true, false, false, false), new FormatInfo('L8', 1, 1, FormatType.UNORM, false, false, false, false), new FormatInfo('LA8', 1, 2, FormatType.UNORM, true, false, false, false), new FormatInfo('R8', 1, 1, FormatType.UNORM, false, false, false, false), new FormatInfo('R8SN', 1, 1, FormatType.SNORM, false, false, false, false), new FormatInfo('R8UI', 1, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R8I', 1, 1, FormatType.INT, false, false, false, false), new FormatInfo('R16F', 2, 1, FormatType.FLOAT, false, false, false, false), new FormatInfo('R16UI', 2, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R16I', 2, 1, FormatType.INT, false, false, false, false), new FormatInfo('R32F', 4, 1, FormatType.FLOAT, false, false, false, false), new FormatInfo('R32UI', 4, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R32I', 4, 1, FormatType.INT, false, false, false, false), new FormatInfo('RG8', 2, 2, FormatType.UNORM, false, false, false, false), new FormatInfo('RG8SN', 2, 2, FormatType.SNORM, false, false, false, false), new FormatInfo('RG8UI', 2, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG8I', 2, 2, FormatType.INT, false, false, false, false), new FormatInfo('RG16F', 4, 2, FormatType.FLOAT, false, false, false, false), new FormatInfo('RG16UI', 4, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG16I', 4, 2, FormatType.INT, false, false, false, false), new FormatInfo('RG32F', 8, 2, FormatType.FLOAT, false, false, false, false), new FormatInfo('RG32UI', 8, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG32I', 8, 2, FormatType.INT, false, false, false, false), new FormatInfo('RGB8', 3, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('SRGB8', 3, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('RGB8SN', 3, 3, FormatType.SNORM, false, false, false, false), new FormatInfo('RGB8UI', 3, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB8I', 3, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGB16F', 6, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB16UI', 6, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB16I', 6, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGB32F', 12, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB32UI', 12, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB32I', 12, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGBA8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('BGRA8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('SRGB8_A8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGBA8SN', 4, 4, FormatType.SNORM, true, false, false, false), new FormatInfo('RGBA8UI', 4, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA8I', 4, 4, FormatType.INT, true, false, false, false), new FormatInfo('RGBA16F', 8, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('RGBA16UI', 8, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA16I', 8, 4, FormatType.INT, true, false, false, false), new FormatInfo('RGBA32F', 16, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('RGBA32UI', 16, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA32I', 16, 4, FormatType.INT, true, false, false, false), new FormatInfo('R5G6B5', 2, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('R11G11B10F', 4, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB5A1', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGBA4', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGB10A2', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGB10A2UI', 2, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGB9E5', 2, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('DEPTH', 4, 1, FormatType.FLOAT, false, true, false, false), new FormatInfo('DEPTH_STENCIL', 5, 2, FormatType.FLOAT, false, true, true, false), new FormatInfo('BC1', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('BC1_ALPHA', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC1_SRGB', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('BC1_SRGB_ALPHA', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC2', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC2_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC3', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC3_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC4', 1, 1, FormatType.UNORM, false, false, false, true), new FormatInfo('BC4_SNORM', 1, 1, FormatType.SNORM, false, false, false, true), new FormatInfo('BC5', 1, 2, FormatType.UNORM, false, false, false, true), new FormatInfo('BC5_SNORM', 1, 2, FormatType.SNORM, false, false, false, true), new FormatInfo('BC6H_UF16', 1, 3, FormatType.UFLOAT, false, false, false, true), new FormatInfo('BC6H_SF16', 1, 3, FormatType.FLOAT, false, false, false, true), new FormatInfo('BC7', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC7_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC_RGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_RGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_SRGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_RGB8_A1', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_SRGB8_A1', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_RGBA8', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_SRGB8_A8', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('EAC_R11', 1, 1, FormatType.UNORM, false, false, false, true), new FormatInfo('EAC_R11SN', 1, 1, FormatType.SNORM, false, false, false, true), new FormatInfo('EAC_RG11', 2, 2, FormatType.UNORM, false, false, false, true), new FormatInfo('EAC_RG11SN', 2, 2, FormatType.SNORM, false, false, false, true), new FormatInfo('PVRTC_RGB2', 2, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('PVRTC_RGBA2', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC_RGB4', 2, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('PVRTC_RGBA4', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC2_2BPP', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC2_4BPP', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_4x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_5x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_5x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_6x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_6x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_12x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_12x12', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_4x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_5x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_5x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_6x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_6x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_12x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_12x12', 1, 4, FormatType.UNORM, true, false, false, true)]));
      const DESCRIPTOR_BUFFER_TYPE = exports('D', DescriptorType.UNIFORM_BUFFER | DescriptorType.DYNAMIC_UNIFORM_BUFFER | DescriptorType.STORAGE_BUFFER | DescriptorType.DYNAMIC_STORAGE_BUFFER);
      const DESCRIPTOR_SAMPLER_TYPE = exports('b', DescriptorType.SAMPLER_TEXTURE | DescriptorType.SAMPLER | DescriptorType.TEXTURE | DescriptorType.STORAGE_IMAGE | DescriptorType.INPUT_ATTACHMENT);
      const DESCRIPTOR_DYNAMIC_TYPE = exports('aT', DescriptorType.DYNAMIC_STORAGE_BUFFER | DescriptorType.DYNAMIC_UNIFORM_BUFFER);
      const DRAW_INFO_SIZE = exports('aU', 28);
      function IsPowerOf2(x) {
        return x > 0 && (x & x - 1) === 0;
      }
      function FormatSize(format, width, height, depth) {
        if (!FormatInfos[format].isCompressed) {
          return width * height * depth * FormatInfos[format].size;
        } else {
          switch (format) {
            case Format.BC1:
            case Format.BC1_ALPHA:
            case Format.BC1_SRGB:
            case Format.BC1_SRGB_ALPHA:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 8 * depth;

            case Format.BC2:
            case Format.BC2_SRGB:
            case Format.BC3:
            case Format.BC3_SRGB:
            case Format.BC4:
            case Format.BC4_SNORM:
            case Format.BC6H_SF16:
            case Format.BC6H_UF16:
            case Format.BC7:
            case Format.BC7_SRGB:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

            case Format.BC5:
            case Format.BC5_SNORM:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 32 * depth;

            case Format.ETC_RGB8:
            case Format.ETC2_RGB8:
            case Format.ETC2_SRGB8:
            case Format.ETC2_RGB8_A1:
            case Format.EAC_R11:
            case Format.EAC_R11SN:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 8 * depth;

            case Format.ETC2_RGBA8:
            case Format.ETC2_SRGB8_A1:
            case Format.EAC_RG11:
            case Format.EAC_RG11SN:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

            case Format.PVRTC_RGB2:
            case Format.PVRTC_RGBA2:
            case Format.PVRTC2_2BPP:
              return Math.ceil(width / 8) * Math.ceil(height / 4) * 8 * depth;

            case Format.PVRTC_RGB4:
            case Format.PVRTC_RGBA4:
            case Format.PVRTC2_4BPP:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 8 * depth;

            case Format.ASTC_RGBA_4X4:
            case Format.ASTC_SRGBA_4X4:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

            case Format.ASTC_RGBA_5X4:
            case Format.ASTC_SRGBA_5X4:
              return Math.ceil(width / 5) * Math.ceil(height / 4) * 16 * depth;

            case Format.ASTC_RGBA_5X5:
            case Format.ASTC_SRGBA_5X5:
              return Math.ceil(width / 5) * Math.ceil(height / 5) * 16 * depth;

            case Format.ASTC_RGBA_6X5:
            case Format.ASTC_SRGBA_6X5:
              return Math.ceil(width / 6) * Math.ceil(height / 5) * 16 * depth;

            case Format.ASTC_RGBA_6X6:
            case Format.ASTC_SRGBA_6X6:
              return Math.ceil(width / 6) * Math.ceil(height / 6) * 16 * depth;

            case Format.ASTC_RGBA_8X5:
            case Format.ASTC_SRGBA_8X5:
              return Math.ceil(width / 8) * Math.ceil(height / 5) * 16 * depth;

            case Format.ASTC_RGBA_8X6:
            case Format.ASTC_SRGBA_8X6:
              return Math.ceil(width / 8) * Math.ceil(height / 6) * 16 * depth;

            case Format.ASTC_RGBA_8X8:
            case Format.ASTC_SRGBA_8X8:
              return Math.ceil(width / 8) * Math.ceil(height / 8) * 16 * depth;

            case Format.ASTC_RGBA_10X5:
            case Format.ASTC_SRGBA_10X5:
              return Math.ceil(width / 10) * Math.ceil(height / 5) * 16 * depth;

            case Format.ASTC_RGBA_10X6:
            case Format.ASTC_SRGBA_10X6:
              return Math.ceil(width / 10) * Math.ceil(height / 6) * 16 * depth;

            case Format.ASTC_RGBA_10X8:
            case Format.ASTC_SRGBA_10X8:
              return Math.ceil(width / 10) * Math.ceil(height / 8) * 16 * depth;

            case Format.ASTC_RGBA_10X10:
            case Format.ASTC_SRGBA_10X10:
              return Math.ceil(width / 10) * Math.ceil(height / 10) * 16 * depth;

            case Format.ASTC_RGBA_12X10:
            case Format.ASTC_SRGBA_12X10:
              return Math.ceil(width / 12) * Math.ceil(height / 10) * 16 * depth;

            case Format.ASTC_RGBA_12X12:
            case Format.ASTC_SRGBA_12X12:
              return Math.ceil(width / 12) * Math.ceil(height / 12) * 16 * depth;

            default:
              {
                return 0;
              }
          }
        }
      }
      function FormatSurfaceSize(format, width, height, depth, mips) {
        let size = 0;

        for (let i = 0; i < mips; ++i) {
          size += FormatSize(format, width, height, depth);
          width = Math.max(width >> 1, 1);
          height = Math.max(height >> 1, 1);
        }

        return size;
      }
      const _type2size = [0, 4, 8, 12, 16, 4, 8, 12, 16, 4, 8, 12, 16, 4, 8, 12, 16, 16, 24, 32, 24, 36, 48, 32, 48, 64, 4, 4, 4, 4, 4, 4];
      function GetTypeSize(type) {
        return _type2size[type] || 0;
      }
      function getTypedArrayConstructor(info) {
        if (info.isCompressed) {
          return Uint8Array;
        }

        const stride = info.size / info.count;

        switch (info.type) {
          case FormatType.UNORM:
          case FormatType.UINT:
            {
              switch (stride) {
                case 1:
                  return Uint8Array;

                case 2:
                  return Uint16Array;

                case 4:
                  return Uint32Array;

                default:
                  return Uint8Array;
              }
            }

          case FormatType.SNORM:
          case FormatType.INT:
            {
              switch (stride) {
                case 1:
                  return Int8Array;

                case 2:
                  return Int16Array;

                case 4:
                  return Int32Array;

                default:
                  return Int8Array;
              }
            }

          case FormatType.FLOAT:
            {
              return Float32Array;
            }
        }

        return Float32Array;
      }
      function formatAlignment(format) {
        switch (format) {
          case Format.BC1:
          case Format.BC1_ALPHA:
          case Format.BC1_SRGB:
          case Format.BC1_SRGB_ALPHA:
          case Format.BC2:
          case Format.BC2_SRGB:
          case Format.BC3:
          case Format.BC3_SRGB:
          case Format.BC4:
          case Format.BC4_SNORM:
          case Format.BC6H_SF16:
          case Format.BC6H_UF16:
          case Format.BC7:
          case Format.BC7_SRGB:
          case Format.BC5:
          case Format.BC5_SNORM:
          case Format.ETC_RGB8:
          case Format.ETC2_RGB8:
          case Format.ETC2_SRGB8:
          case Format.ETC2_RGB8_A1:
          case Format.EAC_R11:
          case Format.EAC_R11SN:
          case Format.ETC2_RGBA8:
          case Format.ETC2_SRGB8_A1:
          case Format.EAC_RG11:
          case Format.EAC_RG11SN:
            return {
              width: 4,
              height: 4
            };

          case Format.PVRTC_RGB2:
          case Format.PVRTC_RGBA2:
          case Format.PVRTC2_2BPP:
            return {
              width: 8,
              height: 4
            };

          case Format.PVRTC_RGB4:
          case Format.PVRTC_RGBA4:
          case Format.PVRTC2_4BPP:
            return {
              width: 4,
              height: 4
            };

          case Format.ASTC_RGBA_4X4:
          case Format.ASTC_SRGBA_4X4:
            return {
              width: 4,
              height: 4
            };

          case Format.ASTC_RGBA_5X4:
          case Format.ASTC_SRGBA_5X4:
            return {
              width: 5,
              height: 4
            };

          case Format.ASTC_RGBA_5X5:
          case Format.ASTC_SRGBA_5X5:
            return {
              width: 5,
              height: 5
            };

          case Format.ASTC_RGBA_6X5:
          case Format.ASTC_SRGBA_6X5:
            return {
              width: 6,
              height: 5
            };

          case Format.ASTC_RGBA_6X6:
          case Format.ASTC_SRGBA_6X6:
            return {
              width: 6,
              height: 6
            };

          case Format.ASTC_RGBA_8X5:
          case Format.ASTC_SRGBA_8X5:
            return {
              width: 8,
              height: 5
            };

          case Format.ASTC_RGBA_8X6:
          case Format.ASTC_SRGBA_8X6:
            return {
              width: 8,
              height: 6
            };

          case Format.ASTC_RGBA_8X8:
          case Format.ASTC_SRGBA_8X8:
            return {
              width: 8,
              height: 8
            };

          case Format.ASTC_RGBA_10X5:
          case Format.ASTC_SRGBA_10X5:
            return {
              width: 10,
              height: 5
            };

          case Format.ASTC_RGBA_10X6:
          case Format.ASTC_SRGBA_10X6:
            return {
              width: 10,
              height: 6
            };

          case Format.ASTC_RGBA_10X8:
          case Format.ASTC_SRGBA_10X8:
            return {
              width: 10,
              height: 8
            };

          case Format.ASTC_RGBA_10X10:
          case Format.ASTC_SRGBA_10X10:
            return {
              width: 10,
              height: 10
            };

          case Format.ASTC_RGBA_12X10:
          case Format.ASTC_SRGBA_12X10:
            return {
              width: 12,
              height: 10
            };

          case Format.ASTC_RGBA_12X12:
          case Format.ASTC_SRGBA_12X12:
            return {
              width: 12,
              height: 12
            };

          default:
            return {
              width: 1,
              height: 1
            };
        }
      }
      function alignTo(size, alignment) {
        return Math.ceil(size / alignment) * alignment;
      }

      var defines = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get ObjectType () { return ObjectType; },
        get Status () { return Status; },
        get API () { return API; },
        get SurfaceTransform () { return SurfaceTransform; },
        get Feature () { return Feature$1; },
        get Format () { return Format; },
        get FormatType () { return FormatType; },
        get Type () { return Type; },
        get BufferUsageBit () { return BufferUsageBit; },
        get BufferFlagBit () { return BufferFlagBit; },
        get MemoryAccessBit () { return MemoryAccessBit; },
        get MemoryUsageBit () { return MemoryUsageBit; },
        get TextureType () { return TextureType; },
        get TextureUsageBit () { return TextureUsageBit; },
        get TextureFlagBit () { return TextureFlagBit; },
        get FormatFeatureBit () { return FormatFeatureBit; },
        get SampleCount () { return SampleCount; },
        get VsyncMode () { return VsyncMode; },
        get Filter () { return Filter; },
        get Address () { return Address; },
        get ComparisonFunc () { return ComparisonFunc; },
        get StencilOp () { return StencilOp; },
        get BlendFactor () { return BlendFactor; },
        get BlendOp () { return BlendOp; },
        get ColorMask () { return ColorMask; },
        get ShaderStageFlagBit () { return ShaderStageFlagBit; },
        get LoadOp () { return LoadOp; },
        get StoreOp () { return StoreOp; },
        get AccessFlagBit () { return AccessFlagBit; },
        get ResolveMode () { return ResolveMode; },
        get PipelineBindPoint () { return PipelineBindPoint; },
        get PrimitiveMode () { return PrimitiveMode; },
        get PolygonMode () { return PolygonMode; },
        get ShadeModel () { return ShadeModel; },
        get CullMode () { return CullMode; },
        get DynamicStateFlagBit () { return DynamicStateFlagBit; },
        get StencilFace () { return StencilFace; },
        get DescriptorType () { return DescriptorType; },
        get QueueType () { return QueueType; },
        get QueryType () { return QueryType; },
        get CommandBufferType () { return CommandBufferType; },
        get ClearFlagBit () { return ClearFlagBit; },
        get BarrierType () { return BarrierType; },
        get PassType () { return PassType; },
        Size: Size$1,
        DeviceCaps: DeviceCaps,
        DeviceOptions: DeviceOptions,
        Offset: Offset,
        Rect: Rect$1,
        Extent: Extent,
        TextureSubresLayers: TextureSubresLayers,
        TextureSubresRange: TextureSubresRange,
        TextureCopy: TextureCopy,
        TextureBlit: TextureBlit,
        BufferTextureCopy: BufferTextureCopy,
        Viewport: Viewport,
        Color: Color$1,
        BindingMappingInfo: BindingMappingInfo,
        SwapchainInfo: SwapchainInfo,
        DeviceInfo: DeviceInfo,
        BufferInfo: BufferInfo,
        BufferViewInfo: BufferViewInfo,
        DrawInfo: DrawInfo,
        DispatchInfo: DispatchInfo,
        IndirectBuffer: IndirectBuffer,
        TextureInfo: TextureInfo,
        TextureViewInfo: TextureViewInfo,
        SamplerInfo: SamplerInfo,
        Uniform: Uniform,
        UniformBlock: UniformBlock,
        UniformSamplerTexture: UniformSamplerTexture,
        UniformSampler: UniformSampler,
        UniformTexture: UniformTexture,
        UniformStorageImage: UniformStorageImage,
        UniformStorageBuffer: UniformStorageBuffer,
        UniformInputAttachment: UniformInputAttachment,
        ShaderStage: ShaderStage,
        Attribute: Attribute,
        ShaderInfo: ShaderInfo,
        InputAssemblerInfo: InputAssemblerInfo,
        ColorAttachment: ColorAttachment,
        DepthStencilAttachment: DepthStencilAttachment,
        SubpassInfo: SubpassInfo,
        SubpassDependency: SubpassDependency,
        RenderPassInfo: RenderPassInfo,
        GeneralBarrierInfo: GeneralBarrierInfo,
        TextureBarrierInfo: TextureBarrierInfo,
        BufferBarrierInfo: BufferBarrierInfo,
        FramebufferInfo: FramebufferInfo,
        DescriptorSetLayoutBinding: DescriptorSetLayoutBinding,
        DescriptorSetLayoutInfo: DescriptorSetLayoutInfo,
        DescriptorSetInfo: DescriptorSetInfo,
        PipelineLayoutInfo: PipelineLayoutInfo,
        InputState: InputState,
        CommandBufferInfo: CommandBufferInfo,
        QueueInfo: QueueInfo,
        QueryPoolInfo: QueryPoolInfo,
        FormatInfo: FormatInfo,
        MemoryStatus: MemoryStatus,
        DynamicStencilStates: DynamicStencilStates,
        DynamicStates: DynamicStates,
        GFXObject: GFXObject,
        get AttributeName () { return AttributeName; },
        FormatInfos: FormatInfos,
        DESCRIPTOR_BUFFER_TYPE: DESCRIPTOR_BUFFER_TYPE,
        DESCRIPTOR_SAMPLER_TYPE: DESCRIPTOR_SAMPLER_TYPE,
        DESCRIPTOR_DYNAMIC_TYPE: DESCRIPTOR_DYNAMIC_TYPE,
        DRAW_INFO_SIZE: DRAW_INFO_SIZE,
        IsPowerOf2: IsPowerOf2,
        FormatSize: FormatSize,
        FormatSurfaceSize: FormatSurfaceSize,
        GetTypeSize: GetTypeSize,
        getTypedArrayConstructor: getTypedArrayConstructor,
        formatAlignment: formatAlignment,
        alignTo: alignTo
      });

      class RasterizerState {
        constructor(isDiscard = false, polygonMode = PolygonMode.FILL, shadeModel = ShadeModel.GOURAND, cullMode = CullMode.BACK, isFrontFaceCCW = true, depthBiasEnabled = false, depthBias = 0, depthBiasClamp = 0.0, depthBiasSlop = 0.0, isDepthClip = true, isMultisample = false, lineWidth = 1.0) {
          this._nativeObj = void 0;
          this._isDiscard = false;
          this._polygonMode = PolygonMode.FILL;
          this._shadeModel = ShadeModel.GOURAND;
          this._cullMode = CullMode.BACK;
          this._isFrontFaceCCW = true;
          this._depthBiasEnabled = false;
          this._depthBias = 0;
          this._depthBiasClamp = 0.0;
          this._depthBiasSlop = 0.0;
          this._isDepthClip = true;
          this._isMultisample = false;
          this._lineWidth = 1.0;
          this._nativeObj = new gfx.RasterizerState();
          this.assignProperties(isDiscard, polygonMode, shadeModel, cullMode, isFrontFaceCCW, depthBiasEnabled, depthBias, depthBiasClamp, depthBiasSlop, isDepthClip, isMultisample, lineWidth);
        }

        get native() {
          return this._nativeObj;
        }

        get isDiscard() {
          return this._isDiscard;
        }

        set isDiscard(val) {
          this._isDiscard = val;
          this._nativeObj.isDiscard = val;
        }

        get polygonMode() {
          return this._polygonMode;
        }

        set polygonMode(val) {
          this._polygonMode = val;
          this._nativeObj.polygonMode = val;
        }

        get shadeModel() {
          return this._shadeModel;
        }

        set shadeModel(val) {
          this._shadeModel = val;
          this._nativeObj.shadeModel = val;
        }

        get cullMode() {
          return this._cullMode;
        }

        set cullMode(val) {
          this._cullMode = val;
          this._nativeObj.cullMode = val;
        }

        get isFrontFaceCCW() {
          return this._isFrontFaceCCW;
        }

        set isFrontFaceCCW(val) {
          this._isFrontFaceCCW = val;
          this._nativeObj.isFrontFaceCCW = val;
        }

        get depthBiasEnabled() {
          return this._depthBiasEnabled;
        }

        set depthBiasEnabled(val) {
          this._depthBiasEnabled = val;
          this._nativeObj.depthBiasEnabled = val;
        }

        get depthBias() {
          return this._depthBias;
        }

        set depthBias(val) {
          this._depthBias = val;
          this._nativeObj.depthBias = val;
        }

        get depthBiasClamp() {
          return this._depthBiasClamp;
        }

        set depthBiasClamp(val) {
          this._depthBiasClamp = val;
          this._nativeObj.depthBiasClamp = val;
        }

        get depthBiasSlop() {
          return this._depthBiasSlop;
        }

        set depthBiasSlop(val) {
          this._depthBiasSlop = val;
          this._nativeObj.depthBiasSlop = val;
        }

        get isDepthClip() {
          return this._isDepthClip;
        }

        set isDepthClip(val) {
          this._isDepthClip = val;
          this._nativeObj.isDepthClip = val;
        }

        get isMultisample() {
          return this._isMultisample;
        }

        set isMultisample(val) {
          this._isMultisample = val;
          this._nativeObj.isMultisample = val;
        }

        get lineWidth() {
          return this._lineWidth;
        }

        set lineWidth(val) {
          this._lineWidth = val;
          this._nativeObj.lineWidth = val;
        }

        reset() {
          this.assignProperties(false, PolygonMode.FILL, ShadeModel.GOURAND, CullMode.BACK, true, false, 0, 0.0, 0.0, true, false, 1.0);
        }

        assign(rs) {
          if (!rs) return;
          this.assignProperties(rs.isDiscard, rs.polygonMode, rs.shadeModel, rs.cullMode, rs.isFrontFaceCCW, rs.depthBiasEnabled, rs.depthBias, rs.depthBiasClamp, rs.depthBiasSlop, rs.isDepthClip, rs.isMultisample, rs.lineWidth);
        }

        destroy() {
          this._nativeObj = null;
        }

        assignProperties(isDiscard, polygonMode, shadeModel, cullMode, isFrontFaceCCW, depthBiasEnabled, depthBias, depthBiasClamp, depthBiasSlop, isDepthClip, isMultisample, lineWidth) {
          if (isDiscard !== undefined) this.isDiscard = isDiscard;
          if (polygonMode !== undefined) this.polygonMode = polygonMode;
          if (shadeModel !== undefined) this.shadeModel = shadeModel;
          if (cullMode !== undefined) this.cullMode = cullMode;
          if (isFrontFaceCCW !== undefined) this.isFrontFaceCCW = isFrontFaceCCW;
          if (depthBiasEnabled !== undefined) this.depthBiasEnabled = depthBiasEnabled;
          if (depthBias !== undefined) this.depthBias = depthBias;
          if (depthBiasClamp !== undefined) this.depthBiasClamp = depthBiasClamp;
          if (depthBiasSlop !== undefined) this.depthBiasSlop = depthBiasSlop;
          if (isDepthClip !== undefined) this.isDepthClip = isDepthClip;
          if (isMultisample !== undefined) this.isMultisample = isMultisample;
          if (lineWidth !== undefined) this.lineWidth = lineWidth;
        }

      } exports('b2', RasterizerState);
      class DepthStencilState {
        constructor(depthTest = true, depthWrite = true, depthFunc = ComparisonFunc.LESS, stencilTestFront = false, stencilFuncFront = ComparisonFunc.ALWAYS, stencilReadMaskFront = 0xffff, stencilWriteMaskFront = 0xffff, stencilFailOpFront = StencilOp.KEEP, stencilZFailOpFront = StencilOp.KEEP, stencilPassOpFront = StencilOp.KEEP, stencilRefFront = 1, stencilTestBack = false, stencilFuncBack = ComparisonFunc.ALWAYS, stencilReadMaskBack = 0xffff, stencilWriteMaskBack = 0xffff, stencilFailOpBack = StencilOp.KEEP, stencilZFailOpBack = StencilOp.KEEP, stencilPassOpBack = StencilOp.KEEP, stencilRefBack = 1) {
          this._nativeObj = void 0;
          this._depthTest = true;
          this._depthWrite = true;
          this._depthFunc = ComparisonFunc.LESS;
          this._stencilTestFront = false;
          this._stencilFuncFront = ComparisonFunc.ALWAYS;
          this._stencilReadMaskFront = 0xffff;
          this._stencilWriteMaskFront = 0xffff;
          this._stencilFailOpFront = StencilOp.KEEP;
          this._stencilZFailOpFront = StencilOp.KEEP;
          this._stencilPassOpFront = StencilOp.KEEP;
          this._stencilRefFront = 1;
          this._stencilTestBack = false;
          this._stencilFuncBack = ComparisonFunc.ALWAYS;
          this._stencilReadMaskBack = 0xffff;
          this._stencilWriteMaskBack = 0xffff;
          this._stencilFailOpBack = StencilOp.KEEP;
          this._stencilZFailOpBack = StencilOp.KEEP;
          this._stencilPassOpBack = StencilOp.KEEP;
          this._stencilRefBack = 1;
          this._nativeObj = new gfx.DepthStencilState();
          this.assignProperties(depthTest, depthWrite, depthFunc, stencilTestFront, stencilFuncFront, stencilReadMaskFront, stencilWriteMaskFront, stencilFailOpFront, stencilZFailOpFront, stencilPassOpFront, stencilRefFront, stencilTestBack, stencilFuncBack, stencilReadMaskBack, stencilWriteMaskBack, stencilFailOpBack, stencilZFailOpBack, stencilPassOpBack, stencilRefBack);
        }

        get native() {
          return this._nativeObj;
        }

        get depthTest() {
          return this._depthTest;
        }

        set depthTest(val) {
          this._depthTest = val;
          this._nativeObj.depthTest = val;
        }

        get depthWrite() {
          return this._depthWrite;
        }

        set depthWrite(val) {
          this._depthWrite = val;
          this._nativeObj.depthWrite = val;
        }

        get depthFunc() {
          return this._depthFunc;
        }

        set depthFunc(val) {
          this._depthFunc = val;
          this._nativeObj.depthFunc = val;
        }

        get stencilTestFront() {
          return this._stencilTestFront;
        }

        set stencilTestFront(val) {
          this._stencilTestFront = val;
          this._nativeObj.stencilTestFront = val;
        }

        get stencilFuncFront() {
          return this._stencilFuncFront;
        }

        set stencilFuncFront(val) {
          this._stencilFuncFront = val;
          this._nativeObj.stencilFuncFront = val;
        }

        get stencilReadMaskFront() {
          return this._stencilReadMaskFront;
        }

        set stencilReadMaskFront(val) {
          this._stencilReadMaskFront = val;
          this._nativeObj.stencilReadMaskFront = val;
        }

        get stencilWriteMaskFront() {
          return this._stencilWriteMaskFront;
        }

        set stencilWriteMaskFront(val) {
          this._stencilWriteMaskFront = val;
          this._nativeObj.stencilWriteMaskFront = val;
        }

        get stencilFailOpFront() {
          return this._stencilFailOpFront;
        }

        set stencilFailOpFront(val) {
          this._stencilFailOpFront = val;
          this._nativeObj.stencilFailOpFront = val;
        }

        get stencilZFailOpFront() {
          return this._stencilZFailOpFront;
        }

        set stencilZFailOpFront(val) {
          this._stencilZFailOpFront = val;
          this._nativeObj.stencilZFailOpFront = val;
        }

        get stencilPassOpFront() {
          return this._stencilPassOpFront;
        }

        set stencilPassOpFront(val) {
          this._stencilPassOpFront = val;
          this._nativeObj.stencilPassOpFront = val;
        }

        get stencilRefFront() {
          return this._stencilRefFront;
        }

        set stencilRefFront(val) {
          this._stencilRefFront = val;
          this._nativeObj.stencilRefFront = val;
        }

        get stencilTestBack() {
          return this._stencilTestBack;
        }

        set stencilTestBack(val) {
          this._stencilTestBack = val;
          this._nativeObj.stencilTestBack = val;
        }

        get stencilFuncBack() {
          return this._stencilFuncBack;
        }

        set stencilFuncBack(val) {
          this._stencilFuncBack = val;
          this._nativeObj.stencilFuncBack = val;
        }

        get stencilReadMaskBack() {
          return this._stencilReadMaskBack;
        }

        set stencilReadMaskBack(val) {
          this._stencilReadMaskBack = val;
          this._nativeObj.stencilReadMaskBack = val;
        }

        get stencilWriteMaskBack() {
          return this._stencilWriteMaskBack;
        }

        set stencilWriteMaskBack(val) {
          this._stencilWriteMaskBack = val;
          this._nativeObj.stencilWriteMaskBack = val;
        }

        get stencilFailOpBack() {
          return this._stencilFailOpBack;
        }

        set stencilFailOpBack(val) {
          this._stencilFailOpBack = val;
          this._nativeObj.stencilFailOpBack = val;
        }

        get stencilZFailOpBack() {
          return this._stencilZFailOpBack;
        }

        set stencilZFailOpBack(val) {
          this._stencilZFailOpBack = val;
          this._nativeObj.stencilZFailOpBack = val;
        }

        get stencilPassOpBack() {
          return this._stencilPassOpBack;
        }

        set stencilPassOpBack(val) {
          this._stencilPassOpBack = val;
          this._nativeObj.stencilPassOpBack = val;
        }

        get stencilRefBack() {
          return this._stencilRefBack;
        }

        set stencilRefBack(val) {
          this._stencilRefBack = val;
          this._nativeObj.stencilRefBack = val;
        }

        reset() {
          this.assignProperties(true, true, ComparisonFunc.LESS, false, ComparisonFunc.ALWAYS, 0xffff, 0xffff, StencilOp.KEEP, StencilOp.KEEP, StencilOp.KEEP, 1, false, ComparisonFunc.ALWAYS, 0xffff, 0xffff, StencilOp.KEEP, StencilOp.KEEP, StencilOp.KEEP, 1);
        }

        assign(dss) {
          if (!dss) return;
          this.assignProperties(dss.depthTest, dss.depthWrite, dss.depthFunc, dss.stencilTestFront, dss.stencilFuncFront, dss.stencilReadMaskFront, dss.stencilWriteMaskFront, dss.stencilFailOpFront, dss.stencilZFailOpFront, dss.stencilPassOpFront, dss.stencilRefFront, dss.stencilTestBack, dss.stencilFuncBack, dss.stencilReadMaskBack, dss.stencilWriteMaskBack, dss.stencilFailOpBack, dss.stencilZFailOpBack, dss.stencilPassOpBack, dss.stencilRefBack);
        }

        destroy() {
          this._nativeObj = null;
        }

        assignProperties(depthTest, depthWrite, depthFunc, stencilTestFront, stencilFuncFront, stencilReadMaskFront, stencilWriteMaskFront, stencilFailOpFront, stencilZFailOpFront, stencilPassOpFront, stencilRefFront, stencilTestBack, stencilFuncBack, stencilReadMaskBack, stencilWriteMaskBack, stencilFailOpBack, stencilZFailOpBack, stencilPassOpBack, stencilRefBack) {
          if (depthTest !== undefined) this.depthTest = depthTest;
          if (depthWrite !== undefined) this.depthWrite = depthWrite;
          if (depthFunc !== undefined) this.depthFunc = depthFunc;
          if (stencilTestFront !== undefined) this.stencilTestFront = stencilTestFront;
          if (stencilFuncFront !== undefined) this.stencilFuncFront = stencilFuncFront;
          if (stencilReadMaskFront !== undefined) this.stencilReadMaskFront = stencilReadMaskFront;
          if (stencilWriteMaskFront !== undefined) this.stencilWriteMaskFront = stencilWriteMaskFront;
          if (stencilFailOpFront !== undefined) this.stencilFailOpFront = stencilFailOpFront;
          if (stencilZFailOpFront !== undefined) this.stencilZFailOpFront = stencilZFailOpFront;
          if (stencilPassOpFront !== undefined) this.stencilPassOpFront = stencilPassOpFront;
          if (stencilRefFront !== undefined) this.stencilRefFront = stencilRefFront;
          if (stencilTestBack !== undefined) this.stencilTestBack = stencilTestBack;
          if (stencilFuncBack !== undefined) this.stencilFuncBack = stencilFuncBack;
          if (stencilReadMaskBack !== undefined) this.stencilReadMaskBack = stencilReadMaskBack;
          if (stencilWriteMaskBack !== undefined) this.stencilWriteMaskBack = stencilWriteMaskBack;
          if (stencilFailOpBack !== undefined) this.stencilFailOpBack = stencilFailOpBack;
          if (stencilZFailOpBack !== undefined) this.stencilZFailOpBack = stencilZFailOpBack;
          if (stencilPassOpBack !== undefined) this.stencilPassOpBack = stencilPassOpBack;
          if (stencilRefBack !== undefined) this.stencilRefBack = stencilRefBack;
        }

      } exports('b3', DepthStencilState);
      class BlendTarget {
        get native() {
          return this._nativeObj;
        }

        constructor(blend = false, blendSrc = BlendFactor.ONE, blendDst = BlendFactor.ZERO, blendEq = BlendOp.ADD, blendSrcAlpha = BlendFactor.ONE, blendDstAlpha = BlendFactor.ZERO, blendAlphaEq = BlendOp.ADD, blendColorMask = ColorMask.ALL) {
          this._nativeObj = void 0;
          this._blend = false;
          this._blendSrc = BlendFactor.ONE;
          this._blendDst = BlendFactor.ZERO;
          this._blendEq = BlendOp.ADD;
          this._blendSrcAlpha = BlendFactor.ONE;
          this._blendDstAlpha = BlendFactor.ZERO;
          this._blendAlphaEq = BlendOp.ADD;
          this._blendColorMask = ColorMask.ALL;
          this._nativeObj = new gfx.BlendTarget();
          this.assignProperties(blend, blendSrc, blendDst, blendEq, blendSrcAlpha, blendDstAlpha, blendAlphaEq, blendColorMask);
        }

        get blend() {
          return this._blend;
        }

        set blend(val) {
          this._blend = val;
          this._nativeObj.blend = val;
        }

        get blendSrc() {
          return this._blendSrc;
        }

        set blendSrc(val) {
          this._blendSrc = val;
          this._nativeObj.blendSrc = val;
        }

        get blendDst() {
          return this._blendDst;
        }

        set blendDst(val) {
          this._blendDst = val;
          this._nativeObj.blendDst = val;
        }

        get blendEq() {
          return this._blendEq;
        }

        set blendEq(val) {
          this._blendEq = val;
          this._nativeObj.blendEq = val;
        }

        get blendSrcAlpha() {
          return this._blendSrcAlpha;
        }

        set blendSrcAlpha(val) {
          this._blendSrcAlpha = val;
          this._nativeObj.blendSrcAlpha = val;
        }

        get blendDstAlpha() {
          return this._blendDstAlpha;
        }

        set blendDstAlpha(val) {
          this._blendDstAlpha = val;
          this._nativeObj.blendDstAlpha = val;
        }

        get blendAlphaEq() {
          return this._blendAlphaEq;
        }

        set blendAlphaEq(val) {
          this._blendAlphaEq = val;
          this._nativeObj.blendAlphaEq = val;
        }

        get blendColorMask() {
          return this._blendColorMask;
        }

        set blendColorMask(val) {
          this._blendColorMask = val;
          this._nativeObj.blendColorMask = val;
        }

        reset() {
          this.assignProperties(false, BlendFactor.ONE, BlendFactor.ZERO, BlendOp.ADD, BlendFactor.ONE, BlendFactor.ZERO, BlendOp.ADD, ColorMask.ALL);
        }

        destroy() {
          this._nativeObj = null;
        }

        assign(target) {
          if (!target) return;
          this.assignProperties(target.blend, target.blendSrc, target.blendDst, target.blendEq, target.blendSrcAlpha, target.blendDstAlpha, target.blendAlphaEq, target.blendColorMask);
        }

        assignProperties(blend, blendSrc, blendDst, blendEq, blendSrcAlpha, blendDstAlpha, blendAlphaEq, blendColorMask) {
          if (blend !== undefined) this.blend = blend;
          if (blendSrc !== undefined) this.blendSrc = blendSrc;
          if (blendDst !== undefined) this.blendDst = blendDst;
          if (blendEq !== undefined) this.blendEq = blendEq;
          if (blendSrcAlpha !== undefined) this.blendSrcAlpha = blendSrcAlpha;
          if (blendDstAlpha !== undefined) this.blendDstAlpha = blendDstAlpha;
          if (blendAlphaEq !== undefined) this.blendAlphaEq = blendAlphaEq;
          if (blendColorMask !== undefined) this.blendColorMask = blendColorMask;
        }

      } exports('b4', BlendTarget);

      function watchArrayElementsField(self, list, eleField, cachedFieldName, callback) {
        for (let i = 0, l = list.length; i < l; i++) {
          let ele = list[i];
          let originField = ele[eleField][cachedFieldName] || ele[eleField];
          ele[eleField] = new Proxy(originField, {
            get: (originTarget, key) => {
              if (key === cachedFieldName) {
                return originTarget;
              }

              return Reflect.get(originTarget, key);
            },
            set: (originTarget, prop, value) => {
              Reflect.set(originTarget, prop, value);
              callback(self, i, originTarget, prop, value);
              return true;
            }
          });
        }
      }

      class BlendState {
        _setTargets(targets) {
          this.targets = targets;
          const CACHED_FIELD_NAME = `$__nativeObj`;

          this._syncTargetsToNativeObj(CACHED_FIELD_NAME);

          watchArrayElementsField(this, this.targets, "_nativeObj", CACHED_FIELD_NAME, (self, _idx, _originTarget, _prop, _value) => {
            self._syncTargetsToNativeObj(CACHED_FIELD_NAME);
          });
        }

        _syncTargetsToNativeObj(cachedFieldName) {
          const nativeTars = this.targets.map(target => {
            return target.native[cachedFieldName] || target.native;
          });
          this._nativeObj.targets = nativeTars;
        }

        get native() {
          return this._nativeObj;
        }

        constructor(isA2C = false, isIndepend = false, blendColor = new Color$1(), targets = [new BlendTarget()]) {
          this.targets = void 0;
          this._blendColor = void 0;
          this._nativeObj = void 0;
          this._isA2C = false;
          this._isIndepend = false;
          this._nativeObj = new gfx.BlendState();

          this._setTargets(targets);

          this.blendColor = blendColor;
          this.isA2C = isA2C;
          this.isIndepend = isIndepend;
        }

        get isA2C() {
          return this._isA2C;
        }

        set isA2C(val) {
          this._isA2C = val;
          this._nativeObj.isA2C = val;
        }

        get isIndepend() {
          return this._isIndepend;
        }

        set isIndepend(val) {
          this._isIndepend = val;
          this._nativeObj.isIndepend = val;
        }

        get blendColor() {
          return this._blendColor;
        }

        set blendColor(color) {
          this._blendColor = color;
          this._nativeObj.blendColor = color;
        }

        setTarget(index, target) {
          let tg = this.targets[index];

          if (!tg) {
            tg = this.targets[index] = new BlendTarget();
          }

          tg.assign(target);

          this._setTargets(this.targets);
        }

        reset() {
          this.isA2C = false;
          this.isIndepend = false;
          this.blendColor = new Color$1(0, 0, 0, 0);
          const targets = this.targets;

          for (let i = 1, len = targets.length; i < len; ++i) {
            targets[i].destroy();
          }

          targets.length = 1;
          targets[0].reset();

          this._setTargets(targets);
        }

        destroy() {
          for (let i = 0, len = this.targets.length; i < len; ++i) {
            this.targets[i].destroy();
          }

          this.targets = null;
          this._nativeObj = null;
        }

      } exports('b5', BlendState);
      const PipelineState = exports('b6', gfx.PipelineState);
      const PipelineStateInfo = exports('b7', gfx.PipelineStateInfo);

      class Device {
        constructor() {
          this._gfxAPI = API.UNKNOWN;
          this._renderer = '';
          this._vendor = '';
          this._features = new Array(Feature$1.COUNT);
          this._formatFeatures = new Array(Format.COUNT);
          this._queue = null;
          this._cmdBuff = null;
          this._numDrawCalls = 0;
          this._numInstances = 0;
          this._numTris = 0;
          this._memoryStatus = new MemoryStatus();
          this._caps = new DeviceCaps();
          this._bindingMappingInfo = new BindingMappingInfo();
          this._samplers = new Map();
          this._generalBarrierss = new Map();
          this._textureBarriers = new Map();
          this._bufferBarriers = new Map();
        }

        get gfxAPI() {
          return this._gfxAPI;
        }

        get queue() {
          return this._queue;
        }

        get commandBuffer() {
          return this._cmdBuff;
        }

        get renderer() {
          return this._renderer;
        }

        get vendor() {
          return this._vendor;
        }

        get numDrawCalls() {
          return this._numDrawCalls;
        }

        get numInstances() {
          return this._numInstances;
        }

        get numTris() {
          return this._numTris;
        }

        get memoryStatus() {
          return this._memoryStatus;
        }

        get capabilities() {
          return this._caps;
        }

        get bindingMappingInfo() {
          return this._bindingMappingInfo;
        }

        hasFeature(feature) {
          return this._features[feature];
        }

        getFormatFeatures(format) {
          return this._formatFeatures[format];
        }

        enableAutoBarrier(en) {}

      } exports('b0', Device);
      Device.canvas = void 0;
      class DefaultResource {
        constructor(device) {
          this._texture2D = null;
          this._texture3D = null;
          this._textureCube = null;
          this._texture2DArray = null;
          const bufferSize = 64;
          const buffer = new Uint8Array(bufferSize);
          buffer.fill(255);

          if (device.capabilities.maxTextureSize >= 2) {
            this._texture2D = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.STORAGE | TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE));
            const copyRegion = new BufferTextureCopy(0, 0, 0, new Offset(0, 0, 0), new Extent(2, 2, 1));
            device.copyBuffersToTexture([buffer], this._texture2D, [copyRegion]);
          }

          if (device.capabilities.maxTextureSize >= 2) {
            this._textureCube = device.createTexture(new TextureInfo(TextureType.CUBE, TextureUsageBit.STORAGE | TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE, 6));
            const copyRegion = new BufferTextureCopy(0, 0, 0, new Offset(0, 0, 0), new Extent(2, 2, 1));
            device.copyBuffersToTexture([buffer], this._textureCube, [copyRegion]);
            copyRegion.texSubres.baseArrayLayer = 1;
            device.copyBuffersToTexture([buffer], this._textureCube, [copyRegion]);
            copyRegion.texSubres.baseArrayLayer = 2;
            device.copyBuffersToTexture([buffer], this._textureCube, [copyRegion]);
            copyRegion.texSubres.baseArrayLayer = 3;
            device.copyBuffersToTexture([buffer], this._textureCube, [copyRegion]);
            copyRegion.texSubres.baseArrayLayer = 4;
            device.copyBuffersToTexture([buffer], this._textureCube, [copyRegion]);
            copyRegion.texSubres.baseArrayLayer = 5;
            device.copyBuffersToTexture([buffer], this._textureCube, [copyRegion]);
          }

          if (device.capabilities.max3DTextureSize >= 2) {
            this._texture3D = device.createTexture(new TextureInfo(TextureType.TEX3D, TextureUsageBit.STORAGE | TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE, 1, 1, SampleCount.ONE, 2));
            const copyRegion = new BufferTextureCopy(0, 0, 0, new Offset(0, 0, 0), new Extent(2, 2, 2), new TextureSubresLayers(0, 0, 1));
            device.copyBuffersToTexture([buffer], this._texture3D, [copyRegion]);
          }

          if (device.capabilities.maxArrayTextureLayers >= 2) {
            this._texture2DArray = device.createTexture(new TextureInfo(TextureType.TEX2D_ARRAY, TextureUsageBit.STORAGE | TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE, 2));
            const copyRegion = new BufferTextureCopy(0, 0, 0, new Offset(0, 0, 0), new Extent(2, 2, 1), new TextureSubresLayers(0, 0, 1));
            device.copyBuffersToTexture([buffer], this._texture2DArray, [copyRegion]);
            copyRegion.texSubres.baseArrayLayer = 1;
            device.copyBuffersToTexture([buffer], this._texture2DArray, [copyRegion]);
          }
        }

        getTexture(type) {
          switch (type) {
            case TextureType.TEX2D:
              return this._texture2D;

            case TextureType.TEX3D:
              return this._texture3D;

            case TextureType.CUBE:
              return this._textureCube;

            case TextureType.TEX2D_ARRAY:
              return this._texture2DArray;

            default:
              return null;
          }
        }

      } exports('b1', DefaultResource);

      class Texture extends GFXObject {
        get type() {
          return this._info.type;
        }

        get usage() {
          return this._info.usage;
        }

        get format() {
          return this._info.format;
        }

        get width() {
          return this._info.width;
        }

        get height() {
          return this._info.height;
        }

        get depth() {
          return this._info.depth;
        }

        get layerCount() {
          return this._info.layerCount;
        }

        get levelCount() {
          return this._info.levelCount;
        }

        get samples() {
          return this._info.samples;
        }

        get flags() {
          return this._info.flags;
        }

        get size() {
          return this._size;
        }

        get info() {
          return this._info;
        }

        get viewInfo() {
          return this._viewInfo;
        }

        get isTextureView() {
          return this._isTextureView;
        }

        constructor() {
          super(ObjectType.TEXTURE);
          this._info = new TextureInfo();
          this._viewInfo = new TextureViewInfo();
          this._isPowerOf2 = false;
          this._isTextureView = false;
          this._size = 0;
        }

        static getLevelCount(width, height) {
          return Math.floor(Math.log2(Math.max(width, height)));
        }

      } exports('b8', Texture);

      let LegacyRenderMode;

      (function (LegacyRenderMode) {
        LegacyRenderMode[LegacyRenderMode["AUTO"] = 0] = "AUTO";
        LegacyRenderMode[LegacyRenderMode["CANVAS"] = 1] = "CANVAS";
        LegacyRenderMode[LegacyRenderMode["WEBGL"] = 2] = "WEBGL";
        LegacyRenderMode[LegacyRenderMode["HEADLESS"] = 3] = "HEADLESS";
      })(LegacyRenderMode || (LegacyRenderMode = exports('b9', {})));

      let RenderType;

      (function (RenderType) {
        RenderType[RenderType["UNKNOWN"] = -1] = "UNKNOWN";
        RenderType[RenderType["CANVAS"] = 0] = "CANVAS";
        RenderType[RenderType["WEBGL"] = 1] = "WEBGL";
        RenderType[RenderType["OPENGL"] = 2] = "OPENGL";
        RenderType[RenderType["HEADLESS"] = 3] = "HEADLESS";
      })(RenderType || (RenderType = exports('ba', {})));

      class DeviceManager {
        constructor() {
          this.initialized = false;
          this._canvas = null;
          this._renderType = RenderType.UNKNOWN;
        }

        get gfxDevice() {
          return this._gfxDevice;
        }

        get swapchain() {
          return this._swapchain;
        }

        init(canvas, bindingMappingInfo) {
          if (this.initialized) {
            return;
          }

          const renderMode = settings.querySettings(Settings.Category.RENDERING, 'renderMode');
          this._canvas = canvas;
          this._renderType = this._determineRenderType(renderMode);

          if (this._renderType === RenderType.WEBGL) {
            const deviceInfo = new DeviceInfo(bindingMappingInfo);

            if ( globalThis.gfx) {
              this._gfxDevice = gfx.DeviceManager.create(deviceInfo);
            } else {
              let useWebGL2 = !!globalThis.WebGL2RenderingContext;
              const userAgent = globalThis.navigator.userAgent.toLowerCase();

              if (sys.browserType === BrowserType.UC) {
                useWebGL2 = false;
              }

              const deviceCtors = [];

              if (useWebGL2 && legacyCC.WebGL2Device) {
                deviceCtors.push(legacyCC.WebGL2Device);
              }

              if (legacyCC.WebGLDevice) {
                deviceCtors.push(legacyCC.WebGLDevice);
              }

              if (legacyCC.EmptyDevice) {
                deviceCtors.push(legacyCC.EmptyDevice);
              }

              Device.canvas = canvas;

              for (let i = 0; i < deviceCtors.length; i++) {
                this._gfxDevice = new deviceCtors[i]();

                if (this._gfxDevice.initialize(deviceInfo)) {
                  break;
                }
              }

              this._initSwapchain();
            }
          } else if (this._renderType === RenderType.HEADLESS && legacyCC.EmptyDevice) {
            this._gfxDevice = new legacyCC.EmptyDevice();

            this._gfxDevice.initialize(new DeviceInfo(bindingMappingInfo));

            this._initSwapchain();
          }

          if (!this._gfxDevice) {
            error('can not support canvas rendering in 3D');
            this._renderType = RenderType.UNKNOWN;
            return;
          }

          if (this._canvas) {
            this._canvas.oncontextmenu = () => false;
          }
        }

        _initSwapchain() {
          const swapchainInfo = new SwapchainInfo(1, this._canvas);
          const windowSize = screen.windowSize;
          swapchainInfo.width = windowSize.width;
          swapchainInfo.height = windowSize.height;
          this._swapchain = this._gfxDevice.createSwapchain(swapchainInfo);
        }

        _determineRenderType(renderMode) {
          if (typeof renderMode !== 'number' || renderMode > RenderType.HEADLESS || renderMode < LegacyRenderMode.AUTO) {
            renderMode = LegacyRenderMode.AUTO;
          }

          let renderType = RenderType.CANVAS;
          let supportRender = false;

          if (renderMode === LegacyRenderMode.CANVAS) {
            renderType = RenderType.CANVAS;
            supportRender = true;
          } else if (renderMode === LegacyRenderMode.AUTO || renderMode === LegacyRenderMode.WEBGL) {
            renderType = RenderType.WEBGL;
            supportRender = true;
          } else if (renderMode === LegacyRenderMode.HEADLESS) {
            renderType = RenderType.HEADLESS;
            supportRender = true;
          }

          if (!supportRender) {
            throw new Error(getError(3820, renderMode));
          }

          return renderType;
        }

      } exports('bb', DeviceManager);
      const deviceManager = exports('bc', new DeviceManager());

      const polyfills = {
        GFXDevice: true,
        GFXBuffer: true,
        GFXTexture: true,
        GFXSampler: true,
        GFXShader: true,
        GFXInputAssembler: true,
        GFXRenderPass: true,
        GFXFramebuffer: true,
        GFXPipelineState: true,
        GFXCommandBuffer: true,
        GFXQueue: true,
        GFXObjectType: true,
        GFXObject: false,
        GFXAttributeName: true,
        GFXType: true,
        GFXFormat: true,
        GFXBufferUsageBit: true,
        GFXMemoryUsageBit: true,
        GFXBufferFlagBit: true,
        GFXBufferAccessBit: 'MemoryAccessBit',
        GFXPrimitiveMode: true,
        GFXPolygonMode: true,
        GFXShadeModel: true,
        GFXCullMode: true,
        GFXComparisonFunc: true,
        GFXStencilOp: true,
        GFXBlendOp: true,
        GFXBlendFactor: true,
        GFXColorMask: true,
        GFXFilter: true,
        GFXAddress: true,
        GFXTextureType: true,
        GFXTextureUsageBit: true,
        GFXSampleCount: true,
        GFXTextureFlagBit: true,
        GFXShaderStageFlagBit: true,
        GFXDescriptorType: true,
        GFXCommandBufferType: true,
        GFXLoadOp: true,
        GFXStoreOp: true,
        GFXPipelineBindPoint: true,
        GFXDynamicStateFlagBit: true,
        GFXStencilFace: true,
        GFXQueueType: true,
        GFXRect: true,
        GFXViewport: true,
        GFXColor: true,
        GFXClearFlag: true,
        GFXOffset: true,
        GFXExtent: true,
        GFXTextureSubres: 'TextureSubresLayers',
        GFXTextureCopy: true,
        GFXBufferTextureCopy: true,
        GFXFormatType: true,
        GFXFormatInfo: true,
        GFXMemoryStatus: true,
        GFXFormatInfos: true,
        GFXFormatSize: true,
        GFXFormatSurfaceSize: true,
        GFXGetTypeSize: true,
        getTypedArrayConstructor: false
      };

      for (const name in polyfills) {
        let newName = polyfills[name];

        if (newName === true) {
          newName = name.slice(3);
        } else if (newName === false) {
          newName = name;
        }

        replaceProperty(legacyCC, 'cc', [{
          name,
          newName,
          target: legacyCC.gfx,
          targetName: 'cc.gfx'
        }]);
      }

      removeProperty(legacyCC, 'cc', [{
        name: 'GFX_MAX_VERTEX_ATTRIBUTES'
      }, {
        name: 'GFX_MAX_TEXTURE_UNITS'
      }, {
        name: 'GFX_MAX_ATTACHMENTS'
      }, {
        name: 'GFX_MAX_BUFFER_BINDINGS'
      }, {
        name: 'GFXTextureLayout'
      }]);

      const polyfillCC = Object.assign({}, defines);
      polyfillCC.Device = gfx.Device;
      polyfillCC.Swapchain = gfx.Swapchain;
      polyfillCC.Buffer = gfx.Buffer;
      polyfillCC.Texture = gfx.Texture;
      polyfillCC.Sampler = gfx.Sampler;
      polyfillCC.Shader = gfx.Shader;
      polyfillCC.InputAssembler = gfx.InputAssembler;
      polyfillCC.RenderPass = gfx.RenderPass;
      polyfillCC.Framebuffer = gfx.Framebuffer;
      polyfillCC.DescriptorSet = gfx.DescriptorSet;
      polyfillCC.DescriptorSetLayout = gfx.DescriptorSetLayout;
      polyfillCC.PipelineLayout = gfx.PipelineLayout;
      polyfillCC.PipelineState = gfx.PipelineState;
      polyfillCC.CommandBuffer = gfx.CommandBuffer;
      polyfillCC.Queue = gfx.Queue;
      legacyCC.gfx = polyfillCC;
      polyfillCC.BlendTarget = BlendTarget;
      polyfillCC.BlendState = BlendState;
      polyfillCC.RasterizerState = RasterizerState;
      polyfillCC.DepthStencilState = DepthStencilState;
      polyfillCC.PipelineStateInfo = PipelineStateInfo;

      class Cache {
        constructor(map) {
          this._map = null;
          this._count = 0;

          if (map) {
            this._map = map;
            this._count = Object.keys(map).length;
          } else {
            this._map = createMap(true);
            this._count = 0;
          }
        }

        add(key, val) {
          if (!(key in this._map)) {
            this._count++;
          }

          return this._map[key] = val;
        }

        get(key) {
          return this._map[key];
        }

        has(key) {
          return key in this._map;
        }

        remove(key) {
          const out = this._map[key];

          if (key in this._map) {
            delete this._map[key];
            this._count--;
          }

          return out;
        }

        clear() {
          if (this._count !== 0) {
            this._map = createMap(true);
            this._count = 0;
          }
        }

        forEach(func) {
          for (const key in this._map) {
            func(this._map[key], key);
          }
        }

        find(predicate) {
          for (const key in this._map) {
            if (predicate(this._map[key], key)) {
              return this._map[key];
            }
          }

          return null;
        }

        get count() {
          return this._count;
        }

        destroy() {
          this._map = null;
        }

      }

      class Pipeline {
        constructor(name, funcs) {
          this.id = Pipeline._pipelineId++;
          this.name = '';
          this.pipes = [];
          this.name = name;

          for (let i = 0, l = funcs.length; i < l; i++) {
            this.pipes.push(funcs[i]);
          }
        }

        insert(func, index) {
          if (index > this.pipes.length) {
            warnID(4921);
            return this;
          }

          this.pipes.splice(index, 0, func);
          return this;
        }

        append(func) {
          this.pipes.push(func);
          return this;
        }

        remove(index) {
          this.pipes.splice(index, 1);
          return this;
        }

        sync(task) {
          const pipes = this.pipes;

          if (pipes.length === 0) {
            return null;
          }

          task.isFinished = false;

          for (let i = 0, l = pipes.length; i < l;) {
            const pipe = pipes[i];
            const result = pipe(task);

            if (result) {
              task.isFinished = true;
              return result;
            }

            i++;

            if (i !== l) {
              task.input = task.output;
              task.output = null;
            }
          }

          task.isFinished = true;
          return task.output;
        }

        async(task) {
          const pipes = this.pipes;

          if (pipes.length === 0) {
            return;
          }

          task.isFinished = false;

          this._flow(0, task);
        }

        _flow(index, task) {
          const pipe = this.pipes[index];
          pipe(task, result => {
            if (result) {
              task.isFinished = true;
              task.dispatch('complete', result);
            } else {
              index++;

              if (index < this.pipes.length) {
                task.input = task.output;
                task.output = null;

                this._flow(index, task);
              } else {
                task.isFinished = true;
                task.dispatch('complete', result, task.output);
              }
            }
          });
        }

      }
      Pipeline._pipelineId = 0;

      const assets =  new Cache();
      const files = new Cache();
      const parsed = new Cache();
      const bundles = new Cache();
      const pipeline = new Pipeline('normal load', []);
      const fetchPipeline = new Pipeline('fetch', []);
      const transformPipeline = new Pipeline('transform url', []);
      const references =  null;
      const assetsOverrideMap = new Map();
      let RequestType;

      (function (RequestType) {
        RequestType["UUID"] = "uuid";
        RequestType["PATH"] = "path";
        RequestType["DIR"] = "dir";
        RequestType["URL"] = "url";
        RequestType["SCENE"] = "scene";
      })(RequestType || (RequestType = {}));

      const presets = {
        default: {
          priority: 0
        },
        preload: {
          maxConcurrency: 6,
          maxRequestsPerFrame: 2,
          priority: -1
        },
        scene: {
          maxConcurrency: 20,
          maxRequestsPerFrame: 20,
          priority: 1
        },
        bundle: {
          maxConcurrency: 20,
          maxRequestsPerFrame: 20,
          priority: 2
        },
        remote: {
          maxRetryCount: 4
        }
      };
      let BuiltinBundleName;

      (function (BuiltinBundleName) {
        BuiltinBundleName["INTERNAL"] = "internal";
        BuiltinBundleName["RESOURCES"] = "resources";
        BuiltinBundleName["MAIN"] = "main";
        BuiltinBundleName["START_SCENE"] = "start-scene";
      })(BuiltinBundleName || (BuiltinBundleName = {}));

      class Task {
        static create(options) {
          let out;

          if (Task._deadPool.length !== 0) {
            out = Task._deadPool.pop();
            out.set(options);
          } else {
            out = new Task(options);
          }

          return out;
        }

        get isFinish() {
          return this.isFinished;
        }

        set isFinish(val) {
          this.isFinished = val;
        }

        constructor(options) {
          this.id = Task._taskId++;
          this.onComplete = null;
          this.onProgress = null;
          this.onError = null;
          this.source = null;
          this.output = null;
          this.input = null;
          this.progress = null;
          this.options = null;
          this.isFinished = true;
          this.set(options);
        }

        set(options = Object.create(null)) {
          this.onComplete = options.onComplete || null;
          this.onProgress = options.onProgress || null;
          this.onError = options.onError || null;
          this.source = this.input = options.input;
          this.output = null;
          this.progress = options.progress;
          this.options = options.options || Object.create(null);
        }

        dispatch(event, param1, param2, param3, param4) {
          switch (event) {
            case 'complete':
              if (this.onComplete) {
                this.onComplete(param1, param2);
              }

              break;

            case 'progress':
              if (this.onProgress) {
                this.onProgress(param1, param2, param3, param4);
              }

              break;

            case 'error':
              if (this.onError) {
                this.onError(param1, param2, param3, param4);
              }

              break;

            default:
              {
                const str = `on${event[0].toUpperCase()}${event.substr(1)}`;

                if (typeof this[str] === 'function') {
                  this[str](param1, param2, param3, param4);
                }

                break;
              }
          }
        }

        recycle() {
          if (Task._deadPool.length === Task.MAX_DEAD_NUM) {
            return;
          }

          this.onComplete = null;
          this.onProgress = null;
          this.onError = null;
          this.source = this.output = this.input = null;
          this.progress = null;
          this.options = null;

          Task._deadPool.push(this);
        }

      }
      Task.MAX_DEAD_NUM = 500;
      Task._taskId = 0;
      Task._deadPool = [];

      const separator = '@';
      const HexChars = '0123456789abcdef'.split('');
      const _t = ['', '', '', ''];

      const UuidTemplate = _t.concat(_t, '-', _t, '-', _t, '-', _t, '-', _t, _t, _t);

      const Indices = UuidTemplate.map((x, i) => x === '-' ? NaN : i).filter(Number.isFinite);
      function decodeUuid(base64) {
        const strs = base64.split(separator);
        const uuid = strs[0];

        if (uuid.length !== 22) {
          return base64;
        }

        UuidTemplate[0] = base64[0];
        UuidTemplate[1] = base64[1];

        for (let i = 2, j = 2; i < 22; i += 2) {
          const lhs = BASE64_VALUES[base64.charCodeAt(i)];
          const rhs = BASE64_VALUES[base64.charCodeAt(i + 1)];
          UuidTemplate[Indices[j++]] = HexChars[lhs >> 2];
          UuidTemplate[Indices[j++]] = HexChars[(lhs & 3) << 2 | rhs >> 4];
          UuidTemplate[Indices[j++]] = HexChars[rhs & 0xF];
        }

        return base64.replace(uuid, UuidTemplate.join(''));
      }

      const _uuidRegex = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-@]{8,}).*/;
      function getUuidFromURL(url) {
        const matches = _uuidRegex.exec(url);

        if (matches) {
          return matches[1];
        }

        return '';
      }
      function getUrlWithUuid(uuid, options) {
        options = options || Object.create(null);
        options.__isNative__ = options.isNative;

        if (options.nativeExt) {
          options.ext = options.nativeExt;
        }

        const bundle = bundles.find(b => !!b.getAssetInfo(uuid));

        if (bundle) {
          options.bundle = bundle.name;
        }

        return transform(uuid, options);
      }
      function isScene(asset) {
        return !!asset && (asset instanceof legacyCC.SceneAsset || asset instanceof legacyCC.Scene);
      }
      function normalize(url) {
        if (url) {
          if (url.charCodeAt(0) === 46 && url.charCodeAt(1) === 47) {
            url = url.slice(2);
          } else if (url.charCodeAt(0) === 47) {
            url = url.slice(1);
          }
        }

        return url;
      }
      function transform(input, options) {
        const subTask = Task.create({
          input,
          options
        });
        const urls = [];

        try {
          const result = transformPipeline.sync(subTask);

          for (const requestItem of result) {
            const url = requestItem.url;
            requestItem.recycle();
            urls.push(url);
          }
        } catch (e) {
          for (const item of subTask.output) {
            item.recycle();
          }

          error(e.message, e.stack);
        }

        subTask.recycle();
        return urls.length > 1 ? urls : urls[0];
      }

      var helper = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getUuidFromURL: getUuidFromURL,
        getUrlWithUuid: getUrlWithUuid,
        isScene: isScene,
        normalize: normalize,
        transform: transform,
        decodeUuid: decodeUuid
      });

      applyMixins(jsb.Asset, [CallbacksInvoker, ExtraEventMethods]);
      const assetProto = jsb.Asset.prototype;

      assetProto._ctor = function () {
        this.loaded = true;
        this._ref = 0;
        this.__nativeRefs = {};
        this.__jsb_ref_id = undefined;
        this._iN$t = null;
        this.__editorExtras__ = {
          editorOnly: true
        };
        this._callbackTable = createMap(true);
        this._file = null;
      };

      Object.defineProperty(assetProto, '_nativeAsset', {
        get() {
          return this._file;
        },

        set(obj) {
          this._file = obj;
        }

      });
      Object.defineProperty(assetProto, 'nativeUrl', {
        get() {
          if (!this._nativeUrl) {
            if (!this._native) return '';
            const name = this._native;

            if (name.charCodeAt(0) === 47) {
              return name.slice(1);
            }

            if (name.charCodeAt(0) === 46) {
              this._nativeUrl = getUrlWithUuid(this._uuid, {
                nativeExt: name,
                isNative: true
              });
            } else {
              this._nativeUrl = getUrlWithUuid(this._uuid, {
                __nativeName__: name,
                nativeExt: extname(name),
                isNative: true
              });
            }
          }

          return this._nativeUrl;
        }

      });
      Object.defineProperty(assetProto, 'refCount', {
        configurable: true,
        enumerable: true,

        get() {
          return this._ref;
        }

      });

      assetProto.addRef = function () {
        this._ref++;
        this.addAssetRef();
        return this;
      };

      assetProto.decRef = function (autoRelease = true) {
        this.decAssetRef();

        if (this._ref > 0) {
          this._ref--;
        }

        if (autoRelease) {
          legacyCC.assetManager._releaseManager.tryRelease(this);
        }

        return this;
      };

      assetProto.toString = function () {
        return this.nativeUrl;
      };

      assetProto.createNode = null;
      const Asset = exports('c2', jsb.Asset);
      legacyCC.Asset = jsb.Asset;
      const AssetProto = Asset.prototype;
      serializable(AssetProto, '_native', () => '');

      const _nativeAssetDescriptor = Object.getOwnPropertyDescriptor(AssetProto, '_nativeAsset');

      property(AssetProto, '_nativeAsset', _nativeAssetDescriptor);

      ccclass('cc.Asset')(Asset);

      const CUSTOM_PIXEL_FORMAT = 1024;
      let PixelFormat;

      (function (PixelFormat) {
        PixelFormat[PixelFormat["RGB565"] = Format.R5G6B5] = "RGB565";
        PixelFormat[PixelFormat["RGB5A1"] = Format.RGB5A1] = "RGB5A1";
        PixelFormat[PixelFormat["RGBA4444"] = Format.RGBA4] = "RGBA4444";
        PixelFormat[PixelFormat["RGB888"] = Format.RGB8] = "RGB888";
        PixelFormat[PixelFormat["RGB32F"] = Format.RGB32F] = "RGB32F";
        PixelFormat[PixelFormat["RGBA8888"] = Format.RGBA8] = "RGBA8888";
        PixelFormat[PixelFormat["RGBA32F"] = Format.RGBA32F] = "RGBA32F";
        PixelFormat[PixelFormat["A8"] = Format.A8] = "A8";
        PixelFormat[PixelFormat["I8"] = Format.L8] = "I8";
        PixelFormat[PixelFormat["AI8"] = Format.LA8] = "AI8";
        PixelFormat[PixelFormat["RGB_PVRTC_2BPPV1"] = Format.PVRTC_RGB2] = "RGB_PVRTC_2BPPV1";
        PixelFormat[PixelFormat["RGBA_PVRTC_2BPPV1"] = Format.PVRTC_RGBA2] = "RGBA_PVRTC_2BPPV1";
        PixelFormat[PixelFormat["RGB_A_PVRTC_2BPPV1"] = CUSTOM_PIXEL_FORMAT] = "RGB_A_PVRTC_2BPPV1";
        PixelFormat[PixelFormat["RGB_PVRTC_4BPPV1"] = Format.PVRTC_RGB4] = "RGB_PVRTC_4BPPV1";
        PixelFormat[PixelFormat["RGBA_PVRTC_4BPPV1"] = Format.PVRTC_RGBA4] = "RGBA_PVRTC_4BPPV1";
        PixelFormat[PixelFormat["RGB_A_PVRTC_4BPPV1"] = CUSTOM_PIXEL_FORMAT + 1] = "RGB_A_PVRTC_4BPPV1";
        PixelFormat[PixelFormat["RGB_ETC1"] = Format.ETC_RGB8] = "RGB_ETC1";
        PixelFormat[PixelFormat["RGBA_ETC1"] = CUSTOM_PIXEL_FORMAT + 2] = "RGBA_ETC1";
        PixelFormat[PixelFormat["RGB_ETC2"] = Format.ETC2_RGB8] = "RGB_ETC2";
        PixelFormat[PixelFormat["RGBA_ETC2"] = Format.ETC2_RGBA8] = "RGBA_ETC2";
        PixelFormat[PixelFormat["RGBA_ASTC_4x4"] = Format.ASTC_RGBA_4X4] = "RGBA_ASTC_4x4";
        PixelFormat[PixelFormat["RGBA_ASTC_5x4"] = Format.ASTC_RGBA_5X4] = "RGBA_ASTC_5x4";
        PixelFormat[PixelFormat["RGBA_ASTC_5x5"] = Format.ASTC_RGBA_5X5] = "RGBA_ASTC_5x5";
        PixelFormat[PixelFormat["RGBA_ASTC_6x5"] = Format.ASTC_RGBA_6X5] = "RGBA_ASTC_6x5";
        PixelFormat[PixelFormat["RGBA_ASTC_6x6"] = Format.ASTC_RGBA_6X6] = "RGBA_ASTC_6x6";
        PixelFormat[PixelFormat["RGBA_ASTC_8x5"] = Format.ASTC_RGBA_8X5] = "RGBA_ASTC_8x5";
        PixelFormat[PixelFormat["RGBA_ASTC_8x6"] = Format.ASTC_RGBA_8X6] = "RGBA_ASTC_8x6";
        PixelFormat[PixelFormat["RGBA_ASTC_8x8"] = Format.ASTC_RGBA_8X8] = "RGBA_ASTC_8x8";
        PixelFormat[PixelFormat["RGBA_ASTC_10x5"] = Format.ASTC_RGBA_10X5] = "RGBA_ASTC_10x5";
        PixelFormat[PixelFormat["RGBA_ASTC_10x6"] = Format.ASTC_RGBA_10X6] = "RGBA_ASTC_10x6";
        PixelFormat[PixelFormat["RGBA_ASTC_10x8"] = Format.ASTC_RGBA_10X8] = "RGBA_ASTC_10x8";
        PixelFormat[PixelFormat["RGBA_ASTC_10x10"] = Format.ASTC_RGBA_10X10] = "RGBA_ASTC_10x10";
        PixelFormat[PixelFormat["RGBA_ASTC_12x10"] = Format.ASTC_RGBA_12X10] = "RGBA_ASTC_12x10";
        PixelFormat[PixelFormat["RGBA_ASTC_12x12"] = Format.ASTC_RGBA_12X12] = "RGBA_ASTC_12x12";
      })(PixelFormat || (PixelFormat = exports('bi', {})));

      let WrapMode;

      (function (WrapMode) {
        WrapMode[WrapMode["REPEAT"] = Address.WRAP] = "REPEAT";
        WrapMode[WrapMode["CLAMP_TO_EDGE"] = Address.CLAMP] = "CLAMP_TO_EDGE";
        WrapMode[WrapMode["MIRRORED_REPEAT"] = Address.MIRROR] = "MIRRORED_REPEAT";
        WrapMode[WrapMode["CLAMP_TO_BORDER"] = Address.BORDER] = "CLAMP_TO_BORDER";
      })(WrapMode || (WrapMode = exports('cb', {})));

      let Filter$1;

      (function (Filter$1) {
        Filter$1[Filter$1["NONE"] = Filter.NONE] = "NONE";
        Filter$1[Filter$1["LINEAR"] = Filter.LINEAR] = "LINEAR";
        Filter$1[Filter$1["NEAREST"] = Filter.POINT] = "NEAREST";
      })(Filter$1 || (Filter$1 = exports('bX', {})));

      const ImageAsset = exports('c3', jsb.ImageAsset);
      const jsbWindow = jsb.window;
      const extnames = ['.png', '.jpg', '.jpeg', '.bmp', '.webp', '.pvr', '.pkm', '.astc'];

      function isImageBitmap(imageSource) {
        return !!(sys.hasFeature(sys.Feature.IMAGE_BITMAP) && imageSource instanceof ImageBitmap);
      }

      function isNativeImage(imageSource) {

        if ( imageSource._compressed === true) {
          return false;
        }

        return imageSource instanceof jsbWindow.HTMLImageElement || imageSource instanceof jsbWindow.HTMLCanvasElement || isImageBitmap(imageSource);
      }

      const imageAssetProto = ImageAsset.prototype;

      imageAssetProto._ctor = function (nativeAsset) {
        jsb.Asset.prototype._ctor.apply(this, arguments);

        this._width = 0;
        this._height = 0;
        this._nativeData = {
          _data: null,
          width: 0,
          height: 0,
          format: 0,
          _compressed: false,
          mipmapLevelDataSize: []
        };

        if (nativeAsset !== undefined) {
          this.reset(nativeAsset);
        }
      };

      Object.defineProperty(imageAssetProto, '_nativeAsset', {
        configurable: true,
        enumerable: true,

        get() {
          return this._nativeData;
        },

        set(value) {
          if (!(value instanceof jsbWindow.HTMLElement) && !isImageBitmap(value)) {
            value.format = value.format || this.format;
          }

          this.reset(value);
        }

      });
      Object.defineProperty(imageAssetProto, 'data', {
        configurable: true,
        enumerable: true,

        get() {
          if (this._nativeData && isNativeImage(this._nativeData)) {
            return this._nativeData;
          }

          return this._nativeData && this._nativeData._data;
        }

      });

      imageAssetProto._setRawAsset = function (filename, inLibrary = true) {
        if (inLibrary !== false) {
          this._native = filename || '';
        } else {
          this._native = `/${filename}`;
        }
      };

      imageAssetProto.reset = function (data) {
        this._nativeData = data;

        if (!(data instanceof jsbWindow.HTMLElement)) {
          if (data.format !== undefined) {
            this.format = data.format;
          }
        }

        this._syncDataToNative();
      };

      const superDestroy = jsb.Asset.prototype.destroy;

      imageAssetProto.destroy = function () {
        if (this.data && this.data instanceof jsbWindow.HTMLImageElement) {
          this.data.src = '';

          this._setRawAsset('');

          this.data.destroy();
        } else if (isImageBitmap(this.data)) {
          this.data.close && this.data.close();
        }

        return superDestroy.call(this);
      };

      Object.defineProperty(imageAssetProto, 'width', {
        configurable: true,
        enumerable: true,

        get() {
          return this._nativeData.width || this._width;
        }

      });
      Object.defineProperty(imageAssetProto, 'height', {
        configurable: true,
        enumerable: true,

        get() {
          return this._nativeData.height || this._height;
        }

      });

      imageAssetProto._syncDataToNative = function () {
        const data = this._nativeData;
        this._width = data.width;
        this._height = data.height;
        this.setWidth(this._width);
        this.setHeight(this._height);
        this.url = this.nativeUrl;

        if (data instanceof jsbWindow.HTMLCanvasElement) {
          this.setData(data._data.data);
        } else if (data instanceof jsbWindow.HTMLImageElement) {
          this.setData(data._data);

          if (data._mipmapLevelDataSize) {
            this.setMipmapLevelDataSize(data._mipmapLevelDataSize);
          }
        } else {
          if (!this._nativeData._data) {
            console.error(`[ImageAsset] setData bad argument ${this._nativeData}`);
            return;
          }

          this.setData(this._nativeData._data);

          if (this._nativeData.mipmapLevelDataSize) {
            this.setMipmapLevelDataSize(this._nativeData.mipmapLevelDataSize);
          }
        }
      };

      imageAssetProto._serialize = function () {
        if (EDITOR || TEST$1) {
          let targetExtensions;

          if (this._native) {
            targetExtensions = [this._native];
          }

          if (!targetExtensions) {
            return '';
          }

          const extensionIndices = [];

          for (const targetExtension of targetExtensions) {
            const extensionFormat = targetExtension.split('@');
            const i = extnames.indexOf(extensionFormat[0]);
            let exportedExtensionID = i < 0 ? targetExtension : `${i}`;

            if (extensionFormat[1]) {
              exportedExtensionID += `@${extensionFormat[1]}`;
            }

            extensionIndices.push(exportedExtensionID);
          }

          return {
            fmt: extensionIndices.join('_'),
            w: this.width,
            h: this.height
          };
        }
      };

      imageAssetProto._deserialize = function (data) {
        let fmtStr = '';

        if (typeof data === 'string') {
          fmtStr = data;
        } else {
          this._width = data.w;
          this._height = data.h;
          fmtStr = data.fmt;
        }

        const device = deviceManager.gfxDevice;
        const extensionIDs = fmtStr.split('_');
        let preferedExtensionIndex = Number.MAX_VALUE;
        let format = this.format;
        let ext = '';
        const SupportTextureFormats = macro.SUPPORT_TEXTURE_FORMATS;

        for (const extensionID of extensionIDs) {
          const extFormat = extensionID.split('@');
          const i = parseInt(extFormat[0], undefined);
          const tmpExt = extnames[i] || extFormat[0];
          const index = SupportTextureFormats.indexOf(tmpExt);

          if (index !== -1 && index < preferedExtensionIndex) {
            const fmt = extFormat[1] ? parseInt(extFormat[1]) : this.format;

            if (tmpExt === '.astc' && (!device || !(device.getFormatFeatures(Format.ASTC_RGBA_4X4) & FormatFeatureBit.SAMPLED_TEXTURE))) {
              continue;
            } else if (tmpExt === '.pvr' && (!device || !(device.getFormatFeatures(Format.PVRTC_RGBA4) & FormatFeatureBit.SAMPLED_TEXTURE))) {
              continue;
            } else if ((fmt === PixelFormat.RGB_ETC1 || fmt === PixelFormat.RGBA_ETC1) && (!device || !(device.getFormatFeatures(Format.ETC_RGB8) & FormatFeatureBit.SAMPLED_TEXTURE))) {
              continue;
            } else if ((fmt === PixelFormat.RGB_ETC2 || fmt === PixelFormat.RGBA_ETC2) && (!device || !(device.getFormatFeatures(Format.ETC2_RGB8) & FormatFeatureBit.SAMPLED_TEXTURE))) {
              continue;
            } else if (tmpExt === '.webp' && !sys.hasFeature(sys.Feature.WEBP)) {
              continue;
            }

            preferedExtensionIndex = index;
            ext = tmpExt;
            format = fmt;
          }
        }

        if (ext) {
          this._setRawAsset(ext);

          this.format = format;
        } else {
          warnID(3121);
        }
      };

      legacyCC.ImageAsset = jsb.ImageAsset;
      const ImageAssetProto = ImageAsset.prototype;

      const _nativeAssetDescriptor$1 = Object.getOwnPropertyDescriptor(ImageAssetProto, '_nativeAsset');

      override(ImageAssetProto, '_nativeAsset', _nativeAssetDescriptor$1);
      ccclass('cc.ImageAsset')(ImageAsset);

      var _dec$3, _class$3, _dec2$1, _class2$2, _dec3, _class3$1;
      let Script = exports('gH', (_dec$3 = ccclass('cc.Script'), _dec$3(_class$3 = class Script extends Asset {}) || _class$3));
      legacyCC._Script = Script;
      let JavaScript = exports('gI', (_dec2$1 = ccclass('cc.JavaScript'), _dec2$1(_class2$2 = class JavaScript extends Script {}) || _class2$2));
      legacyCC._JavaScript = JavaScript;
      let TypeScript = exports('gJ', (_dec3 = ccclass('cc.TypeScript'), _dec3(_class3$1 = class TypeScript extends Script {}) || _class3$1));
      legacyCC._TypeScript = TypeScript;

      var _dec$4, _class$4, _class2$3, _initializer$2, _initializer2$2, _initializer3$2, _initializer4$2, _initializer5$1;
      let EventHandler = exports('eT', (_dec$4 = ccclass('cc.ClickEvent'), _dec$4(_class$4 = (_class2$3 = class EventHandler {
        constructor() {
          this.target = _initializer$2 && _initializer$2();
          this.component = _initializer2$2 && _initializer2$2();
          this._componentId = _initializer3$2 && _initializer3$2();
          this.handler = _initializer4$2 && _initializer4$2();
          this.customEventData = _initializer5$1 && _initializer5$1();
        }

        get _componentName() {
          this._genCompIdIfNeeded();

          return this._compId2Name(this._componentId);
        }

        set _componentName(value) {
          this._componentId = this._compName2Id(value);
        }

        static emitEvents(events, ...args) {
          for (let i = 0, l = events.length; i < l; i++) {
            const event = events[i];

            if (!(event instanceof EventHandler)) {
              continue;
            }

            event.emit(args);
          }
        }

        emit(params) {
          const target = this.target;

          if (!legacyCC.isValid(target)) {
            return;
          }

          this._genCompIdIfNeeded();

          const compType = legacyCC.js.getClassById(this._componentId);
          const comp = target.getComponent(compType);

          if (!legacyCC.isValid(comp)) {
            return;
          }

          const handler = comp[this.handler];

          if (typeof handler !== 'function') {
            return;
          }

          if (this.customEventData != null && this.customEventData !== '') {
            params = params.slice();
            params.push(this.customEventData);
          }

          handler.apply(comp, params);
        }

        _compName2Id(compName) {
          const comp = legacyCC.js.getClassByName(compName);
          return legacyCC.js.getClassId(comp);
        }

        _compId2Name(compId) {
          const comp = legacyCC.js.getClassById(compId);
          return legacyCC.js.getClassName(comp);
        }

        _genCompIdIfNeeded() {
          if (!this._componentId) {
            this._componentName = this.component;
            this.component = '';
          }
        }

      }, (_initializer$2 = applyDecoratedInitializer(_class2$3.prototype, "target", [serializable], function () {
        return null;
      }), _initializer2$2 = applyDecoratedInitializer(_class2$3.prototype, "component", [serializable], function () {
        return '';
      }), _initializer3$2 = applyDecoratedInitializer(_class2$3.prototype, "_componentId", [serializable], function () {
        return '';
      }), _initializer4$2 = applyDecoratedInitializer(_class2$3.prototype, "handler", [serializable], function () {
        return '';
      }), _initializer5$1 = applyDecoratedInitializer(_class2$3.prototype, "customEventData", [serializable], function () {
        return '';
      })), _class2$3)) || _class$4));

      var _dec$5, _dec2$2, _class$5, _class2$4, _initializer$3, _initializer2$3, _initializer3$3, _class3$2, _temp$1;
      const idGenerator$1 = new IDGenerator('Comp');
      const IsOnLoadCalled$1 = CCObject.Flags.IsOnLoadCalled;
      const NullNode = null;
      let Component = exports('cz', (_dec$5 = ccclass('cc.Component'), _dec2$2 = type(Script), _dec$5(_class$5 = (_class2$4 = (_temp$1 = _class3$2 = class Component extends CCObject {
        constructor(...args) {
          super(...args);
          this.node = _initializer$3 && _initializer$3();
          this._enabled = _initializer2$3 && _initializer2$3();
          this.__prefab = _initializer3$3 && _initializer3$3();
          this._sceneGetter = null;
          this._id = idGenerator$1.getNewId();
        }

        get name() {
          if (this._name) {
            return this._name;
          }

          let className = getClassName(this);
          const trimLeft = className.lastIndexOf('.');

          if (trimLeft >= 0) {
            className = className.slice(trimLeft + 1);
          }

          if (this.node) {
            return `${this.node.name}<${className}>`;
          } else {
            return className;
          }
        }

        set name(value) {
          this._name = value;
        }

        get uuid() {
          return this._id;
        }

        get __scriptAsset() {
          return null;
        }

        get enabled() {
          return this._enabled;
        }

        set enabled(value) {
          if (this._enabled !== value) {
            this._enabled = value;

            if (this.node.activeInHierarchy) {
              const compScheduler = legacyCC.director._compScheduler;

              if (value) {
                compScheduler.enableComp(this);
              } else {
                compScheduler.disableComp(this);
              }
            }
          }
        }

        get enabledInHierarchy() {
          return this._enabled && this.node && this.node.activeInHierarchy;
        }

        get _isOnLoadCalled() {
          return this._objFlags & IsOnLoadCalled$1;
        }

        _getRenderScene() {
          if (this._sceneGetter) {
            return this._sceneGetter();
          }

          return this.node.scene.renderScene;
        }

        addComponent(typeOrClassName) {
          return this.node.addComponent(typeOrClassName);
        }

        getComponent(typeOrClassName) {
          return this.node.getComponent(typeOrClassName);
        }

        getComponents(typeOrClassName) {
          return this.node.getComponents(typeOrClassName);
        }

        getComponentInChildren(typeOrClassName) {
          return this.node.getComponentInChildren(typeOrClassName);
        }

        getComponentsInChildren(typeOrClassName) {
          return this.node.getComponentsInChildren(typeOrClassName);
        }

        destroy() {

          if (super.destroy()) {
            if (this._enabled && this.node.activeInHierarchy) {
              legacyCC.director._compScheduler.disableComp(this);
            }

            return true;
          }

          return false;
        }

        _onPreDestroy() {
          this.unscheduleAllCallbacks();

          legacyCC.director._nodeActivator.destroyComp(this);

          this.node._removeComponent(this);
        }

        _instantiate(cloned) {
          if (!cloned) {
            cloned = legacyCC.instantiate._clone(this, this);
          }

          if (cloned) {
            cloned.node = NullNode;
          }

          return cloned;
        }

        schedule(callback, interval = 0, repeat = legacyCC.macro.REPEAT_FOREVER, delay = 0) {
          assertID(callback, 1619);
          interval = interval || 0;
          assertID(interval >= 0, 1620);
          repeat = Number.isNaN(repeat) ? legacyCC.macro.REPEAT_FOREVER : repeat;
          delay = delay || 0;
          const scheduler = legacyCC.director.getScheduler();
          const paused = scheduler.isTargetPaused(this);
          scheduler.schedule(callback, this, interval, repeat, delay, paused);
        }

        scheduleOnce(callback, delay = 0) {
          this.schedule(callback, 0, 0, delay);
        }

        unschedule(callback_fn) {
          if (!callback_fn) {
            return;
          }

          legacyCC.director.getScheduler().unschedule(callback_fn, this);
        }

        unscheduleAllCallbacks() {
          legacyCC.director.getScheduler().unscheduleAllForTarget(this);
        }

      }, _class3$2.EventHandler = EventHandler, _class3$2.system = null, _temp$1), (_applyDecoratedDescriptor(_class2$4.prototype, "__scriptAsset", [_dec2$2], Object.getOwnPropertyDescriptor(_class2$4.prototype, "__scriptAsset"), _class2$4.prototype), _initializer$3 = applyDecoratedInitializer(_class2$4.prototype, "node", [serializable], function () {
        return NullNode;
      }), _initializer2$3 = applyDecoratedInitializer(_class2$4.prototype, "_enabled", [serializable], function () {
        return true;
      }), _initializer3$3 = applyDecoratedInitializer(_class2$4.prototype, "__prefab", [serializable], function () {
        return null;
      })), _class2$4)) || _class$5));
      const proto = Component.prototype;
      proto.update = null;
      proto.lateUpdate = null;
      proto.__preload = null;
      proto.onLoad = null;
      proto.start = null;
      proto.onEnable = null;
      proto.onDisable = null;
      proto.onDestroy = null;
      proto.onFocusInEditor = null;
      proto.onLostFocusInEditor = null;
      proto.resetInEditor = null;
      proto._getLocalBounds = null;
      proto.onRestore = null;
      Component._requireComponent = null;
      Component._executionOrder = 0;

      value(Component, '_registerEditorProps', (cls, props) => {
        let reqComp = props.requireComponent;

        if (reqComp) {
          if (Array.isArray(reqComp)) {
            reqComp = reqComp.filter(Boolean);
          }

          cls._requireComponent = reqComp;
        }

        const order = props.executionOrder;

        if (order && typeof order === 'number') {
          cls._executionOrder = order;
        }
      });
      legacyCC.Component = Component;

      var _dec$6, _class$6, _class2$5, _initializer$4;
      let MissingScript = exports('gA', (_dec$6 = ccclass('cc.MissingScript'), _dec$6(_class$6 = (_class2$5 = class MissingScript extends Component {
        static safeFindClass(id) {
          const cls = getClassById(id);

          if (cls) {
            return cls;
          }

          legacyCC.deserialize.reportMissingClass(id);
          return undefined;
        }

        constructor() {
          super();
          this._$erialized = _initializer$4 && _initializer$4();
        }

        onLoad() {
          warnID(4600, this.node.name);
        }

      }, (_initializer$4 = applyDecoratedInitializer(_class2$5.prototype, "_$erialized", [serializable, editorOnly], function () {
        return null;
      })), _class2$5)) || _class$6));
      legacyCC._MissingScript = MissingScript;

      try {
        const props = MissingScript.__values__;

        if (props.length === 0 || props[props.length - 1] !== '_$erialized') {
          error(`The '_$erialized' prop in MissingScript is missing. Please contact jare.`);
          error(`    Error props: ['${props}']`);
        }
      } catch (e) {
        error(`Error when checking MissingScript 5, ${e}`);
      }

      const VERSION = 1;
      const MAGIC = 0x4E4F4343;
      const CHUNK_ALIGN_AS = 8;
      class CCON {
        constructor(document, chunks) {
          this._document = void 0;
          this._chunks = void 0;
          this._document = document;
          this._chunks = chunks;
        }

        get document() {
          return this._document;
        }

        get chunks() {
          return this._chunks;
        }

      }
      function parseCCONJson(json) {
        const cconPreface = json;
        return {
          chunks: cconPreface.chunks,
          document: cconPreface.document
        };
      }
      function decodeCCONBinary(bytes) {
        if (bytes.length < 16) {
          throw new InvalidCCONError(getError(13102));
        }

        const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
        const magic = dataView.getUint32(0, true);

        if (magic !== MAGIC) {
          throw new InvalidCCONError(getError(13100));
        }

        const version = dataView.getUint32(4, true);

        if (version !== VERSION) {
          throw new InvalidCCONError(getError(13101, version));
        }

        const dataByteLength = dataView.getUint32(8, true);

        if (dataByteLength !== dataView.byteLength) {
          throw new InvalidCCONError(getError(13102));
        }

        let chunksStart = 12;
        const jsonDataLength = dataView.getUint32(chunksStart, true);
        chunksStart += 4;
        const jsonData = new Uint8Array(dataView.buffer, chunksStart + dataView.byteOffset, jsonDataLength);
        chunksStart += jsonDataLength;
        const jsonString = decodeJson(jsonData);
        let json;

        try {
          json = JSON.parse(jsonString);
        } catch (err) {
          throw new InvalidCCONError(err);
        }

        const chunks = [];

        while (chunksStart < dataView.byteLength) {
          if (chunksStart % CHUNK_ALIGN_AS !== 0) {
            const padding = CHUNK_ALIGN_AS - chunksStart % CHUNK_ALIGN_AS;
            chunksStart += padding;
          }

          const chunkDataLength = dataView.getUint32(chunksStart, true);
          chunksStart += 4;
          chunks.push(new Uint8Array(dataView.buffer, chunksStart + dataView.byteOffset, chunkDataLength));
          chunksStart += chunkDataLength;
        }

        if (chunksStart !== dataView.byteLength) {
          throw new InvalidCCONError(getError(13102));
        }

        return new CCON(json, chunks);
      }

      function decodeJson(data) {
        if (typeof TextDecoder !== 'undefined') {
          return new TextDecoder().decode(data);
        } else if ('Buffer' in globalThis) {
          const {
            Buffer
          } = globalThis;
          return Buffer.from(data.buffer, data.byteOffset, data.byteLength).toString();
        } else {
          throw new Error(getError(13104));
        }
      }

      class InvalidCCONError extends Error {}
      legacyCC.internal.parseCCONJson = parseCCONJson;
      legacyCC.internal.decodeCCONBinary = decodeCCONBinary;
      legacyCC.internal.CCON = CCON;

      function compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, assumeHavePropIfIsValue) {
        if (defaultValue instanceof legacyCC.ValueType) {
          if (!assumeHavePropIfIsValue) {
            sources.push('if(prop){');
          }

          const ctorCode = getClassName(defaultValue);
          sources.push(`s._deserializeFastDefinedObject(o${accessorToSet},prop,${ctorCode});`);

          if (!assumeHavePropIfIsValue) {
            sources.push(`}else o${accessorToSet}=null;`);
          }
        } else {
          sources.push(`
if (prop) {
    s._deserializeAndAssignField(o, prop, ${propNameLiteralToSet});
} else {
    o${accessorToSet}=null;
}
`);
        }
      }

      const compileDeserialize =  compileDeserializeJIT ;
      const DELIMITER = CCClass.Attr.DELIMETER;
      const POSTFIX_TYPE = `${DELIMITER}type`;
      const POSTFIX_DEFAULT = `${DELIMITER}default`;
      const POSTFIX_FORMERLY_SERIALIZED_AS = `${DELIMITER}formerlySerializedAs`;

      function compileDeserializeJIT(self, klass) {
        const attrs = CCClass.Attr.getClassAttrs(klass);
        const props = klass.__values__;
        const sources = ['var prop;'];
        const fastMode = BUILTIN_CLASSID_RE.test(getClassId(klass));

        for (let p = 0; p < props.length; p++) {
          const propName = props[p];

          let accessorToSet;
          let propNameLiteralToSet;

          if (CCClass.IDENTIFIER_RE.test(propName)) {
            propNameLiteralToSet = `"${propName}"`;
            accessorToSet = `.${propName}`;
          } else {
            propNameLiteralToSet = CCClass.escapeForJS(propName);
            accessorToSet = `[${propNameLiteralToSet}]`;
          }

          let accessorToGet = accessorToSet;

          if (attrs[propName + POSTFIX_FORMERLY_SERIALIZED_AS]) {
            const propNameToRead = attrs[propName + POSTFIX_FORMERLY_SERIALIZED_AS];

            if (CCClass.IDENTIFIER_RE.test(propNameToRead)) {
              accessorToGet = `.${propNameToRead}`;
            } else {
              accessorToGet = `[${CCClass.escapeForJS(propNameToRead)}]`;
            }
          }

          sources.push(`prop=d${accessorToGet};`);
          sources.push(`if(typeof ${ '(prop)' }!=="undefined"){`);
          const defaultValue = CCClass.getDefault(attrs[propName + POSTFIX_DEFAULT]);
          const userType = attrs[propName + POSTFIX_TYPE];

          if (fastMode && (defaultValue !== undefined || userType)) {
            let isPrimitiveType;

            if (defaultValue === undefined) {
              isPrimitiveType = userType instanceof CCClass.Attr.PrimitiveType || userType === ENUM_TAG || userType === BITMASK_TAG;
            } else {
              const defaultType = typeof defaultValue;
              isPrimitiveType = defaultType === 'string' || defaultType === 'number' || defaultType === 'boolean';
            }

            if (isPrimitiveType) {
              sources.push(`o${accessorToSet}=prop;`);
            } else {
              compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, true);
            }
          } else {
            sources.push(`${`if(typeof ${ '(prop)' }!=="object"){` + 'o'}${accessorToSet}=prop;` + `}else{`);
            compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, false);
            sources.push('}');
          }

          sources.push('}');
        }

        if (isChildClassOf(klass, legacyCC.Node) || isChildClassOf(klass, legacyCC.Component)) {
          {
            sources.push('d._id&&(o._id=d._id);');
          }
        }

        if (props[props.length - 1] === '_$erialized') {
          sources.push('o._$erialized=JSON.parse(JSON.stringify(d));');
          sources.push('s._fillPlainObject(o._$erialized,d);');
        }

        return Function('s', 'o', 'd', 'k', sources.join(''));
      }

      class DeserializerPool extends Pool {
        constructor() {
          super(deserializer => {
            deserializer.clear();
          }, 1);
        }

        get(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly) {
          const cache = this._get();

          if (cache) {
            cache.reset(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly);
            return cache;
          } else {
            return new _Deserializer(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly);
          }
        }

      }

      class _Deserializer {
        constructor(result, classFinder, reportMissingClass, customEnv, ignoreEditorOnly) {
          this.deserializedList = void 0;
          this.deserializedData = void 0;
          this._ignoreEditorOnly = void 0;
          this.result = result;
          this.customEnv = customEnv;
          this.deserializedList = [];
          this.deserializedData = null;
          this._classFinder = classFinder;
          this._reportMissingClass = reportMissingClass;
          this._onDereferenced = classFinder === null || classFinder === void 0 ? void 0 : classFinder.onDereferenced;
        }

        reset(result, classFinder, reportMissingClass, customEnv, ignoreEditorOnly) {
          this.result = result;
          this.customEnv = customEnv;
          this._classFinder = classFinder;
          this._reportMissingClass = reportMissingClass;
          this._onDereferenced = classFinder === null || classFinder === void 0 ? void 0 : classFinder.onDereferenced;
        }

        clear() {
          this.result = null;
          this.customEnv = null;
          this.deserializedList.length = 0;
          this.deserializedData = null;
          this._classFinder = null;
          this._reportMissingClass = null;
          this._onDereferenced = null;
        }

        deserialize(serializedData) {
          let fromCCON = false;
          let jsonObj;

          if (serializedData instanceof CCON) {
            fromCCON = true;
            jsonObj = serializedData.document;

            if (serializedData.chunks.length > 0) {
              assertIsTrue(serializedData.chunks.length === 1);
              this._mainBinChunk = serializedData.chunks[0];
            }
          } else {
            jsonObj = serializedData;
          }

          this._serializedData = jsonObj;
          this._context = {
            fromCCON
          };
          const serializedRootObject = Array.isArray(jsonObj) ? jsonObj[0] : jsonObj;

          {
            this.deserializedData = this._deserializeObject(serializedRootObject, 0);
          }

          this._serializedData = undefined;
          this._mainBinChunk = undefined;
          this._context = undefined;
          return this.deserializedData;
        }

        _deserializeObject(serialized, globalIndex, owner, propName) {
          switch (serialized.__type__) {
            case 'TypedArray':
              return this._deserializeTypedArrayView(serialized);

            case 'TypedArrayRef':
              return this._deserializeTypedArrayViewRef(serialized);

            default:
              if (serialized.__type__) {
                return this._deserializeTypeTaggedObject(serialized, globalIndex, owner, propName);
              } else if (!Array.isArray(serialized)) {
                return this._deserializePlainObject(serialized);
              } else {
                return this._deserializeArray(serialized);
              }

          }
        }

        _deserializeTypedArrayView(value) {
          return globalThis[value.ctor].from(value.array);
        }

        _deserializeTypedArrayViewRef(value) {
          const {
            offset,
            length,
            ctor: constructorName
          } = value;
          const obj = new globalThis[constructorName](this._mainBinChunk.buffer, this._mainBinChunk.byteOffset + offset, length);
          return obj;
        }

        _deserializeArray(value) {
          const obj = new Array(value.length);
          let prop;

          for (let i = 0; i < value.length; i++) {
            prop = value[i];

            if (typeof prop === 'object' && prop) {
              const isAssetType = this._deserializeAndAssignField(obj, prop, `${i}`);

              if (isAssetType) {
                obj[i] = null;
              }
            } else {
              obj[i] = prop;
            }
          }

          return obj;
        }

        _deserializePlainObject(value) {
          const obj = {};

          this._fillPlainObject(obj, value);

          return obj;
        }

        _deserializeTypeTaggedObject(value, globalIndex, owner, propName) {
          const type = value.__type__;

          const klass = this._classFinder(type, value, owner, propName);

          if (!klass) {
            const notReported = this._classFinder === getClassById;

            if (notReported) {
              this._reportMissingClass(type);
            }

            return null;
          }

          const createObject = constructor => {
            const obj = new constructor();

            if (globalIndex >= 0) {
              this.deserializedList[globalIndex] = obj;
            }

            return obj;
          };

          {
            const obj = createObject(klass);

            this._deserializeInto(value, obj, klass);

            return obj;
          }
        }

        _deserializeInto(value, object, constructor, skipCustomized = false) {
          if (!skipCustomized && object[deserializeTag]) {
            this._runCustomizedDeserialize(value, object, constructor);

            return;
          }

          if (object._deserialize) {
            object._deserialize(value.content, this);

            return;
          }

          if (legacyCC.Class._isCCClass(constructor)) {
            this._deserializeFireClass(object, value, constructor);
          } else {
            this._deserializeFastDefinedObject(object, value, constructor);
          }
        }

        _runCustomizedDeserialize(value, object, constructor) {
          const serializationInput = {
            readProperty: name => {
              const serializedField = value[name];

              if (typeof serializedField !== 'object' || !serializedField) {
                return serializedField;
              } else {
                return this._deserializeObjectField(serializedField);
              }
            },
            readThis: () => {
              this._deserializeInto(value, object, constructor, true);
            },
            readSuper: () => {
              const superConstructor = getSuper(constructor);

              if (superConstructor) {
                this._deserializeInto(value, object, superConstructor);
              }
            }
          };
          object[deserializeTag](serializationInput, this._context);
        }

        _deserializeFireClass(obj, serialized, klass) {
          let deserialize;

          if (klass.hasOwnProperty('__deserialize__')) {
            deserialize = klass.__deserialize__;
          } else {
            deserialize = compileDeserialize(this, klass);

            try {
              if (klass === MissingScript) {
                const props = klass.__values__;

                if (props.length === 0 || props[props.length - 1] !== '_$erialized') {
                  error(`The '_$erialized' prop of MissingScript is missing. Will force the raw data to be save.`);
                  error(`    Error props: ['${props}']. Please contact jare.`);
                }

                const rawDeserialize = deserialize;

                deserialize = function (deserializer, object, deserialized, constructor) {
                  rawDeserialize(deserializer, object, deserialized, constructor);

                  if (!object._$erialized) {
                    error(`Unable to stash previously serialized data. ${JSON.stringify(deserialized)}`);
                  }
                };
              }
            } catch (e) {
              error(`Error when checking MissingScript 6, ${e}`);
            }

            value(klass, '__deserialize__', deserialize, true);
          }

          deserialize(this, obj, serialized, klass);
        }

        _deserializeAndAssignField(obj, serializedField, propName) {
          const id = serializedField.__id__;

          if (typeof id === 'number') {
            const field = this.deserializedList[id];

            if (field) {
              obj[propName] = field;
            } else {
              var _this$_onDereferenced;

              const source = this._serializedData[id];

              {
                obj[propName] = this._deserializeObject(source, id, undefined, propName);
              }

              (_this$_onDereferenced = this._onDereferenced) === null || _this$_onDereferenced === void 0 ? void 0 : _this$_onDereferenced.call(this, this.deserializedList, id, obj, propName);
            }
          } else {
            const uuid = serializedField.__uuid__;

            if (uuid) {
              const expectedType = serializedField.__expectedType__;
              this.result.push(obj, propName, uuid, expectedType);
            } else {
              obj[propName] = this._deserializeObject(serializedField, -1);
            }
          }

          return false;
        }

        _deserializeObjectField(serializedField) {
          const id = serializedField.__id__;

          if (typeof id === 'number') {
            const field = this.deserializedList[id];

            if (field) {
              return field;
            } else {
              const source = this._serializedData[id];

              const field = this._deserializeObject(source, id, undefined, undefined);

              return field;
            }
          } else {
            const uuid = serializedField.__uuid__;

            if (uuid) {
              const _expectedType = serializedField.__expectedType__;
              throw new Error(`Asset reference field serialization is currently not supported in custom serialization.`);
            } else {
              return this._deserializeObject(serializedField, -1);
            }
          }
        }

        _fillPlainObject(instance, serialized) {
          for (const propName in serialized) {
            if (!serialized.hasOwnProperty(propName)) {
              continue;
            }

            const prop = serialized[propName];

            if (typeof prop !== 'object') {
              if (propName !== '__type__') {
                  instance[propName] = prop;
                }
            } else if (prop) {
              const isAssetType = this._deserializeAndAssignField(instance, prop, propName);

              if (isAssetType) {
                instance[propName] = null;
              }
            } else {
              instance[propName] = null;
            }
          }
        }

        _deserializeFastDefinedObject(instance, serialized, klass) {
          if (klass === legacyCC.Vec2) {
            instance.x = serialized.x || 0;
            instance.y = serialized.y || 0;
            return;
          } else if (klass === legacyCC.Vec3) {
            instance.x = serialized.x || 0;
            instance.y = serialized.y || 0;
            instance.z = serialized.z || 0;
            return;
          } else if (klass === legacyCC.Color) {
            instance.r = serialized.r || 0;
            instance.g = serialized.g || 0;
            instance.b = serialized.b || 0;
            const a = serialized.a;
            instance.a = a === undefined ? 255 : a;
            return;
          } else if (klass === legacyCC.Size) {
            instance.width = serialized.width || 0;
            instance.height = serialized.height || 0;
            return;
          }

          const attrs = CCClass.Attr.getClassAttrs(klass);
          const props = klass.__values__;

          if ( !props) {
            error(`Unable to deserialize ${getClassName(klass)}. ` + 'For non-CCClass types, they can only be marked as serializable by `CCClass.fastDefine`.');
          }

          for (let i = 0; i < props.length; i++) {
            const propName = props[i];
            let value = serialized[propName];
            const exists = value !== undefined || serialized.hasOwnProperty(propName);

            if (!exists) {
              value = CCClass.getDefault(attrs[propName + POSTFIX_DEFAULT]);
            }

            if (typeof value !== 'object') {
              instance[propName] = value;
            } else if (value) {
              this._deserializeAndAssignField(instance, value, propName);
            } else {
              instance[propName] = null;
            }
          }
        }

      }

      _Deserializer.pool = new DeserializerPool();
      function deserializeDynamic(data, details, options) {
        var _options$reportMissin;

        options = options || {};
        const classFinder = options.classFinder || getClassById;
        const createAssetRefs = options.createAssetRefs || sys.platform === Platform.EDITOR_CORE;
        const customEnv = options.customEnv;
        const ignoreEditorOnly = options.ignoreEditorOnly;
        const reportMissingClass = (_options$reportMissin = options.reportMissingClass) !== null && _options$reportMissin !== void 0 ? _options$reportMissin : legacyCC.deserialize.reportMissingClass;
        details.init();

        const deserializer = _Deserializer.pool.get(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly);

        legacyCC.game._isCloning = true;
        const res = deserializer.deserialize(data);
        legacyCC.game._isCloning = false;

        _Deserializer.pool.put(deserializer);

        if (createAssetRefs) {
          details.assignAssetsBy((uuid, options) => EditorExtends.serialize.asAsset(uuid, options.type));
        }

        return res;
      }

      function reportMissingClass(id) {
        {
          errorID(5302, id);
        }
      }

      const SUPPORT_MIN_FORMAT_VERSION = 1;
      const EMPTY_PLACEHOLDER = 0;
      const BuiltinValueTypes = [Vec2, Vec3, Vec4, Quat, Color, Size, Rect, Mat4];

      function BuiltinValueTypeParsers_xyzw(obj, data) {
        obj.x = data[1];
        obj.y = data[2];
        obj.z = data[3];
        obj.w = data[4];
      }

      const BuiltinValueTypeSetters = [(obj, data) => {
        obj.x = data[1];
        obj.y = data[2];
      }, (obj, data) => {
        obj.x = data[1];
        obj.y = data[2];
        obj.z = data[3];
      }, BuiltinValueTypeParsers_xyzw, BuiltinValueTypeParsers_xyzw, (obj, data) => {
        obj._val = data[1];
      }, (obj, data) => {
        obj.width = data[1];
        obj.height = data[2];
      }, (obj, data) => {
        obj.x = data[1];
        obj.y = data[2];
        obj.width = data[3];
        obj.height = data[4];
      }, (obj, data) => {
        Mat4.fromArray(obj, data, 1);
      }];

      const DataTypeID = {
        SimpleType: 0,
        InstanceRef: 1,
        Array_InstanceRef: 2,
        Array_AssetRefByInnerObj: 3,
        Class: 4,
        ValueTypeCreated: 5,
        AssetRefByInnerObj: 6,
        TRS: 7,
        ValueType: 8,
        Array_Class: 9,
        CustomizedClass: 10,
        Dict: 11,
        Array: 12,
        ARRAY_LENGTH: 13
      };
      const CLASS_TYPE = 0;
      const CLASS_KEYS = 1;
      const CLASS_PROP_TYPE_OFFSET = 2;
      const MASK_CLASS = 0;
      const OBJ_DATA_MASK = 0;
      const CUSTOM_OBJ_DATA_CLASS = 0;
      const CUSTOM_OBJ_DATA_CONTENT = 1;
      const VALUETYPE_SETTER = 0;
      const DICT_JSON_LAYOUT = 0;
      const ARRAY_ITEM_VALUES = 0;
      const Refs = {
        EACH_RECORD_LENGTH: 3,
        OWNER_OFFSET: 0,
        KEY_OFFSET: 1,
        TARGET_OFFSET: 2
      };
      const File = {
        Version: 0,
        Context: 0,
        SharedUuids: 1,
        SharedStrings: 2,
        SharedClasses: 3,
        SharedMasks: 4,
        Instances: 5,
        InstanceTypes: 6,
        Refs: 7,
        DependObjs: 8,
        DependKeys: 9,
        DependUuidIndices: 10,
        ARRAY_LENGTH: 11
      };
      const PACKED_SECTIONS = File.Instances;
      class Details {
        constructor() {
          this.uuidObjList = null;
          this.uuidPropList = null;
          this.uuidList = null;
          this.uuidTypeList = [];
        }

        init(data) {
          if ( data) {
            this.uuidObjList = data[File.DependObjs];
            this.uuidPropList = data[File.DependKeys];
            this.uuidList = data[File.DependUuidIndices];
          } else {
            const used = this.uuidList;

            if (!used) {
              this.uuidList = [];
              this.uuidObjList = [];
              this.uuidPropList = [];
              this.uuidTypeList = [];
            }
          }
        }

        reset() {
          {
            const used = this.uuidList;

            if (used) {
              this.uuidList.length = 0;
              this.uuidObjList.length = 0;
              this.uuidPropList.length = 0;
              this.uuidTypeList.length = 0;
            }
          }
        }

        push(obj, propName, uuid, type) {
          this.uuidObjList.push(obj);
          this.uuidPropList.push(propName);
          this.uuidList.push(uuid);
          this.uuidTypeList.push(type || '');
        }

      } exports('gC', Details);
      Details.pool = new Pool(obj => {
        obj.reset();
      }, 5);

      Details.pool.get = function () {
        return this._get() || new Details();
      };

      function dereference(refs, instances, strings) {
        const dataLength = refs.length - 1;
        let i = 0;
        const instanceOffset = refs[dataLength] * Refs.EACH_RECORD_LENGTH;

        for (; i < instanceOffset; i += Refs.EACH_RECORD_LENGTH) {
          const owner = refs[i];
          const target = instances[refs[i + Refs.TARGET_OFFSET]];
          const keyIndex = refs[i + Refs.KEY_OFFSET];

          if (keyIndex >= 0) {
            owner[strings[keyIndex]] = target;
          } else {
            owner[~keyIndex] = target;
          }
        }

        for (; i < dataLength; i += Refs.EACH_RECORD_LENGTH) {
          const owner = instances[refs[i]];
          const target = instances[refs[i + Refs.TARGET_OFFSET]];
          const keyIndex = refs[i + Refs.KEY_OFFSET];

          if (keyIndex >= 0) {
            owner[strings[keyIndex]] = target;
          } else {
            owner[~keyIndex] = target;
          }
        }
      }

      function deserializeCCObject(data, objectData) {
        const mask = data[File.SharedMasks][objectData[OBJ_DATA_MASK]];
        const clazz = mask[MASK_CLASS];
        const ctor = clazz[CLASS_TYPE];
        const obj = new ctor();
        const keys = clazz[CLASS_KEYS];
        const classTypeOffset = clazz[CLASS_PROP_TYPE_OFFSET];
        const maskTypeOffset = mask[mask.length - 1];
        let i = MASK_CLASS + 1;

        for (; i < maskTypeOffset; ++i) {
          const key = keys[mask[i]];
          obj[key] = objectData[i];
        }

        for (; i < objectData.length; ++i) {
          const key = keys[mask[i]];
          const type = clazz[mask[i] + classTypeOffset];
          const op = ASSIGNMENTS[type];
          op(data, obj, key, objectData[i]);
        }

        return obj;
      }

      function deserializeCustomCCObject(data, ctor, value) {
        const obj = new ctor();

        if (obj._deserialize) {
          obj._deserialize(value, data[File.Context]);
        } else {
          errorID(5303, getClassName(ctor));
        }

        return obj;
      }

      function assignSimple(data, owner, key, value) {
        owner[key] = value;
      }

      function assignInstanceRef(data, owner, key, value) {
        if (value >= 0) {
          owner[key] = data[File.Instances][value];
        } else {
          data[File.Refs][~value * Refs.EACH_RECORD_LENGTH] = owner;
        }
      }

      function genArrayParser(parser) {
        return (data, owner, key, value) => {
          for (let i = 0; i < value.length; ++i) {
            parser(data, value, i, value[i]);
          }

          owner[key] = value;
        };
      }

      function parseAssetRefByInnerObj(data, owner, key, value) {
        owner[key] = null;
        data[File.DependObjs][value] = owner;
      }

      function parseClass(data, owner, key, value) {
        owner[key] = deserializeCCObject(data, value);
      }

      function parseCustomClass(data, owner, key, value) {
        const ctor = data[File.SharedClasses][value[CUSTOM_OBJ_DATA_CLASS]];
        owner[key] = deserializeCustomCCObject(data, ctor, value[CUSTOM_OBJ_DATA_CONTENT]);
      }

      function parseValueTypeCreated(data, owner, key, value) {
        {
          const tmp = owner[key];
          BuiltinValueTypeSetters[value[VALUETYPE_SETTER]](tmp, value);
          owner[key] = tmp;
        }
      }

      function parseValueType(data, owner, key, value) {
        const val = new BuiltinValueTypes[value[VALUETYPE_SETTER]]();
        BuiltinValueTypeSetters[value[VALUETYPE_SETTER]](val, value);
        owner[key] = val;
      }

      function parseTRS(data, owner, key, value) {
        const typedArray = owner[key];
        typedArray.set(value);
      }

      function parseDict(data, owner, key, value) {
        const dict = value[DICT_JSON_LAYOUT];
        owner[key] = dict;

        for (let i = DICT_JSON_LAYOUT + 1; i < value.length; i += 3) {
          const subKey = value[i];
          const subType = value[i + 1];
          const subValue = value[i + 2];
          const op = ASSIGNMENTS[subType];
          op(data, dict, subKey, subValue);
        }
      }

      function parseArray(data, owner, key, value) {
        const array = value[ARRAY_ITEM_VALUES];

        for (let i = 0; i < array.length; ++i) {
          const subValue = array[i];
          const type = value[i + 1];

          if (type !== DataTypeID.SimpleType) {
            const op = ASSIGNMENTS[type];
            op(data, array, i, subValue);
          }
        }

        owner[key] = array;
      }

      const ASSIGNMENTS = new Array(DataTypeID.ARRAY_LENGTH);
      ASSIGNMENTS[DataTypeID.SimpleType] = assignSimple;
      ASSIGNMENTS[DataTypeID.InstanceRef] = assignInstanceRef;
      ASSIGNMENTS[DataTypeID.Array_InstanceRef] = genArrayParser(assignInstanceRef);
      ASSIGNMENTS[DataTypeID.Array_AssetRefByInnerObj] = genArrayParser(parseAssetRefByInnerObj);
      ASSIGNMENTS[DataTypeID.Class] = parseClass;
      ASSIGNMENTS[DataTypeID.ValueTypeCreated] = parseValueTypeCreated;
      ASSIGNMENTS[DataTypeID.AssetRefByInnerObj] = parseAssetRefByInnerObj;
      ASSIGNMENTS[DataTypeID.TRS] = parseTRS;
      ASSIGNMENTS[DataTypeID.ValueType] = parseValueType;
      ASSIGNMENTS[DataTypeID.Array_Class] = genArrayParser(parseClass);
      ASSIGNMENTS[DataTypeID.CustomizedClass] = parseCustomClass;
      ASSIGNMENTS[DataTypeID.Dict] = parseDict;
      ASSIGNMENTS[DataTypeID.Array] = parseArray;

      function parseInstances(data) {
        const instances = data[File.Instances];
        const instanceTypes = data[File.InstanceTypes];
        const instanceTypesLen = instanceTypes === EMPTY_PLACEHOLDER ? 0 : instanceTypes.length;
        let rootIndex = instances[instances.length - 1];
        let normalObjectCount = instances.length - instanceTypesLen;

        if (typeof rootIndex !== 'number') {
          rootIndex = 0;
        } else {
          if (rootIndex < 0) {
            rootIndex = ~rootIndex;
          }

          --normalObjectCount;
        }

        let insIndex = 0;

        for (; insIndex < normalObjectCount; ++insIndex) {
          instances[insIndex] = deserializeCCObject(data, instances[insIndex]);
        }

        const classes = data[File.SharedClasses];

        for (let typeIndex = 0; typeIndex < instanceTypesLen; ++typeIndex, ++insIndex) {
          let type = instanceTypes[typeIndex];
          const eachData = instances[insIndex];

          if (type >= 0) {
            const ctor = classes[type];
            instances[insIndex] = deserializeCustomCCObject(data, ctor, eachData);
          } else {
            type = ~type;
            const op = ASSIGNMENTS[type];
            op(data, instances, insIndex, eachData);
          }
        }

        return rootIndex;
      }

      function getMissingClass(hasCustomFinder, type, reportMissingClass) {
        if (!hasCustomFinder) {
          reportMissingClass(type);
        }

        return Object;
      }

      function doLookupClass(classFinder, type, container, index, silent, hasCustomFinder, reportMissingClass) {
        let klass = classFinder(type);

        if (!klass) {
          if (silent) {
            container[index] = ((c, i, t) => function proxy() {
              const actualClass = classFinder(t) || getMissingClass(hasCustomFinder, t, reportMissingClass);
              c[i] = actualClass;
              return new actualClass();
            })(container, index, type);

            return;
          } else {
            klass = getMissingClass(hasCustomFinder, type, reportMissingClass);
          }
        }

        container[index] = klass;
      }

      function lookupClasses(data, silent, customFinder, reportMissingClass) {
        const classFinder = customFinder || getClassById;
        const classes = data[File.SharedClasses];

        for (let i = 0; i < classes.length; ++i) {
          const klassLayout = classes[i];

          if (typeof klassLayout !== 'string') {
            {
              if (typeof klassLayout[CLASS_TYPE] === 'function') {
                throw new Error('Can not deserialize the same JSON data again.');
              }
            }

            const type = klassLayout[CLASS_TYPE];
            doLookupClass(classFinder, type, klassLayout, CLASS_TYPE, silent, customFinder, reportMissingClass);
          } else {
            doLookupClass(classFinder, klassLayout, classes, i, silent, customFinder, reportMissingClass);
          }
        }
      }

      function cacheMasks(data) {
        const masks = data[File.SharedMasks];

        if (masks) {
          const classes = data[File.SharedClasses];

          for (let i = 0; i < masks.length; ++i) {
            const mask = masks[i];
            mask[MASK_CLASS] = classes[mask[MASK_CLASS]];
          }
        }
      }

      function parseResult(data) {
        const instances = data[File.Instances];
        const sharedStrings = data[File.SharedStrings];
        const dependSharedUuids = data[File.SharedUuids];
        const dependObjs = data[File.DependObjs];
        const dependKeys = data[File.DependKeys];
        const dependUuids = data[File.DependUuidIndices];

        for (let i = 0; i < dependObjs.length; ++i) {
          const obj = dependObjs[i];

          if (typeof obj === 'number') {
            dependObjs[i] = instances[obj];
          }

          let key = dependKeys[i];

          if (typeof key === 'number') {
            if (key >= 0) {
              key = sharedStrings[key];
            } else {
              key = ~key;
            }

            dependKeys[i] = key;
          }

          const uuid = dependUuids[i];

          if (typeof uuid === 'number') {
            dependUuids[i] = dependSharedUuids[uuid];
          }
        }
      }

      function isCompiledJson(json) {
        if (Array.isArray(json)) {
          const version = json[0];
          return typeof version === 'number' || version instanceof FileInfo;
        } else {
          return false;
        }
      }
      function deserialize(data, details, options) {
        if (typeof data === 'string') {
          data = JSON.parse(data);
        }

        const borrowDetails = !details;
        details = details || Details.pool.get();
        let res;

        if ( !isCompiledJson(data)) {
          res = deserializeDynamic(data, details, options);
        } else {
          details.init(data);
          options = options || {};
          let version = data[File.Version];
          let preprocessed = false;

          if (typeof version === 'object') {
            preprocessed = version.preprocessed;
            version = version.version;
          }

          if (version < SUPPORT_MIN_FORMAT_VERSION) {
            throw new Error(getError(5304, version));
          }

          options._version = version;
          options.result = details;
          data[File.Context] = options;

          if (!preprocessed) {
            var _options$reportMissin;

            lookupClasses(data, false, options.classFinder, (_options$reportMissin = options.reportMissingClass) !== null && _options$reportMissin !== void 0 ? _options$reportMissin : deserialize.reportMissingClass);
            cacheMasks(data);
          }

          legacyCC.game._isCloning = true;
          const instances = data[File.Instances];
          const rootIndex = parseInstances(data);
          legacyCC.game._isCloning = false;

          if (data[File.Refs]) {
            dereference(data[File.Refs], instances, data[File.SharedStrings]);
          }

          parseResult(data);
          res = instances[rootIndex];
        }

        if (borrowDetails) {
          Details.pool.put(details);
        }

        return res;
      }
      deserialize.Details = Details;
      deserialize.reportMissingClass = reportMissingClass;

      class FileInfo {
        constructor(version) {
          this.preprocessed = true;
          this.version = version;
        }

      }

      function unpackJSONs(data, classFinder, reportMissingClass) {
        if (data[File.Version] < SUPPORT_MIN_FORMAT_VERSION) {
          throw new Error(getError(5304, data[File.Version]));
        }

        lookupClasses(data, true, classFinder, reportMissingClass !== null && reportMissingClass !== void 0 ? reportMissingClass : deserialize.reportMissingClass);
        cacheMasks(data);
        const version = new FileInfo(data[File.Version]);
        const sharedUuids = data[File.SharedUuids];
        const sharedStrings = data[File.SharedStrings];
        const sharedClasses = data[File.SharedClasses];
        const sharedMasks = data[File.SharedMasks];
        const sections = data[PACKED_SECTIONS];

        for (let i = 0; i < sections.length; ++i) {
          sections[i].unshift(version, sharedUuids, sharedStrings, sharedClasses, sharedMasks);
        }

        return sections;
      }
      function packCustomObjData(type, data, hasNativeDep) {
        return [SUPPORT_MIN_FORMAT_VERSION, EMPTY_PLACEHOLDER, EMPTY_PLACEHOLDER, [type], EMPTY_PLACEHOLDER, hasNativeDep ? [data, ~0] : [data], [0], EMPTY_PLACEHOLDER, [], [], []];
      }
      function hasNativeDep(data) {
        const instances = data[File.Instances];
        const rootInfo = instances[instances.length - 1];

        if (typeof rootInfo !== 'number') {
          return false;
        } else {
          return rootInfo < 0;
        }
      }

      function getDependUuidList(json) {
        const sharedUuids = json[File.SharedUuids];
        return json[File.DependUuidIndices].map(index => sharedUuids[index]);
      }

      function parseUuidDependencies(serialized) {
        {
          return getDependUuidList(serialized);
        }
      }

      legacyCC.deserialize = deserialize;

      const dependMap = new WeakMap();
      const nativeDependMap = new WeakSet();
      const onLoadedInvokedMap = new WeakSet();

      function deserializeAsset(json, options) {
        let classFinder;

        {
          classFinder = MissingScript.safeFindClass;
        }

        const tdInfo = Details.pool.get();
        let asset;

        try {
          asset = deserialize(json, tdInfo, {
            classFinder,
            customEnv: options
          });
        } catch (e) {
          error(e);
          Details.pool.put(tdInfo);
          throw e;
        }

        asset._uuid = options.__uuid__ || '';

        const uuidList = tdInfo.uuidList;
        const objList = tdInfo.uuidObjList;
        const propList = tdInfo.uuidPropList;
        const typeList = tdInfo.uuidTypeList || [];
        const depends = [];

        for (let i = 0; i < uuidList.length; i++) {
          const dependUuid = uuidList[i];
          depends[i] = {
            uuid: decodeUuid(dependUuid),
            owner: objList[i],
            prop: propList[i],
            type: getClassById(typeList[i])
          };
        }

        dependMap.set(asset, depends);

        if (asset._native) {
          nativeDependMap.add(asset);
        }

        Details.pool.put(tdInfo);
        return asset;
      }

      class DependUtil {
        static get instance() {
          if (!this._instance) {
            this._instance = new DependUtil();
          }

          return this._instance;
        }

        constructor() {
          this._depends = new Cache();
        }

        init() {
          this._depends.clear();
        }

        getNativeDep(uuid) {
          const depend = this._depends.get(uuid);

          if (depend && depend.nativeDep) {
            return { ...depend.nativeDep
            };
          }

          return null;
        }

        getDeps(uuid) {
          if (this._depends.has(uuid)) {
            return this._depends.get(uuid).deps;
          }

          return [];
        }

        getDepsRecursively(uuid) {
          const exclude = Object.create(null);
          const depends = [];

          this._descend(uuid, exclude, depends);

          return depends;
        }

        remove(uuid) {
          this._depends.remove(uuid);
        }

        parse(uuid, json) {
          let out = null;

          if (Array.isArray(json) || json.__type__ || json instanceof CCON) {
            if (this._depends.has(uuid)) {
              return this._depends.get(uuid);
            }

            if (Array.isArray(json) && ( !hasNativeDep(json))) {
              out = {
                deps: this._parseDepsFromJson(json)
              };
            } else {
              try {
                const asset = deserializeAsset(json, {
                  __uuid__: uuid
                });
                out = this._parseDepsFromAsset(asset);

                if (out.nativeDep) {
                  out.nativeDep.uuid = uuid;
                }

                parsed.add(`${uuid}@import`, asset);
              } catch (e) {
                files.remove(`${uuid}@import`);
                out = {
                  deps: []
                };
              }
            }
          } else {
            if ( this._depends.has(uuid)) {
              out = this._depends.get(uuid);

              if (out.parsedFromExistAsset) {
                return out;
              }
            }

            out = this._parseDepsFromAsset(json);
          }

          this._depends.add(uuid, out);

          return out;
        }

        _parseDepsFromAsset(asset) {
          const out = {
            deps: [],
            parsedFromExistAsset: true
          };
          const deps = dependMap.get(asset);
          assertIsNonNullable(deps);

          for (let i = 0, l = deps.length; i < l; i++) {
            out.deps.push(deps[i].uuid);
          }

          if (nativeDependMap.has(asset)) {
            out.nativeDep = asset._nativeDep;
          }

          return out;
        }

        _parseDepsFromJson(json) {
          const depends = parseUuidDependencies(json);
          depends.forEach((uuid, index) => depends[index] = decodeUuid(uuid));
          return depends;
        }

        _descend(uuid, exclude, depends) {
          const deps = this.getDeps(uuid);

          for (let i = 0; i < deps.length; i++) {
            const depend = deps[i];

            if (!exclude[depend]) {
              exclude[depend] = true;
              depends.push(depend);

              this._descend(depend, exclude, depends);
            }
          }
        }

      }
      DependUtil._instance = void 0;
      var dependUtil = DependUtil.instance;

      const textureBaseProto = jsb.TextureBase.prototype;

      textureBaseProto._serialize = function (ctxForExporting) {

        return '';
      };

      textureBaseProto._deserialize = function (serializedData, handle) {
        const data = serializedData;
        const fields = data.split(',');
        fields.unshift('');

        if (fields.length >= 5) {
          this.setFilters(parseInt(fields[1]), parseInt(fields[2]));
          this.setWrapMode(parseInt(fields[3]), parseInt(fields[4]));
        }

        if (fields.length >= 7) {
          this.setMipFilter(parseInt(fields[5]));
          this.setAnisotropy(parseInt(fields[6]));
        }
      };

      textureBaseProto._getGFXDevice = function () {
        return deviceManager.gfxDevice;
      };

      textureBaseProto._getGFXFormat = function () {
        return this._getGFXPixelFormat(this.format);
      };

      textureBaseProto._setGFXFormat = function (format) {
        this.format = format === undefined ? PixelFormat.RGBA8888 : format;
      };

      textureBaseProto._getGFXPixelFormat = function (format) {
        if (format === PixelFormat.RGBA_ETC1) {
          format = PixelFormat.RGB_ETC1;
        } else if (format === PixelFormat.RGB_A_PVRTC_4BPPV1) {
          format = PixelFormat.RGB_PVRTC_4BPPV1;
        } else if (format === PixelFormat.RGB_A_PVRTC_2BPPV1) {
          format = PixelFormat.RGB_PVRTC_2BPPV1;
        }

        return format;
      };

      textureBaseProto.createNode = null;
      const TextureBase = exports('cd', jsb.TextureBase);
      TextureBase.Filter = Filter$1;
      TextureBase.PixelFormat = PixelFormat;
      TextureBase.WrapMode = WrapMode;

      textureBaseProto._ctor = function () {
        jsb.Asset.prototype._ctor.apply(this, arguments);

        this._gfxSampler = null;
        this._samplerInfo = null;
        this._textureHash = 0;

        this._registerGFXSamplerUpdatedListener();
      };

      const oldGetGFXSampler = textureBaseProto.getGFXSampler;

      textureBaseProto.getGFXSampler = function () {
        if (!this._gfxSampler) {
          this._gfxSampler = oldGetGFXSampler.call(this);
        }

        return this._gfxSampler;
      };

      const oldGetHash = textureBaseProto.getHash;

      textureBaseProto.getHash = function () {
        if (this._textureHash === 0) {
          this._textureHash = oldGetHash.call(this);
        }

        return this._textureHash;
      };

      const oldGetSamplerInfo = textureBaseProto.getSamplerInfo;

      textureBaseProto.getSamplerInfo = function () {
        if (!this._samplerInfo) {
          this._samplerInfo = oldGetSamplerInfo.call(this);
        }

        return this._samplerInfo;
      };

      const oldDestroy = textureBaseProto.destroy;

      textureBaseProto.destroy = function () {
        var _cclegacy$director$ro;

        if ((_cclegacy$director$ro = legacyCC.director.root) !== null && _cclegacy$director$ro !== void 0 && _cclegacy$director$ro.batcher2D) {
          legacyCC.director.root.batcher2D._releaseDescriptorSetCache(this.getGFXTexture(), this.getGFXSampler());
        }

        return oldDestroy.call(this);
      };

      textureBaseProto._onGFXSamplerUpdated = function (gfxSampler, samplerInfo) {
        this._gfxSampler = gfxSampler;
        this._samplerInfo = samplerInfo;
      };

      legacyCC.TextureBase = jsb.TextureBase;
      const TextureBaseProto = TextureBase.prototype;
      serializable(TextureBaseProto, '_format', () => PixelFormat.RGBA8888);
      serializable(TextureBaseProto, '_minFilter', () => Filter$1.LINEAR);
      serializable(TextureBaseProto, '_magFilter', () => Filter$1.LINEAR);
      serializable(TextureBaseProto, '_mipFilter', () => Filter$1.NONE);
      serializable(TextureBaseProto, '_wrapS', () => WrapMode.REPEAT);
      serializable(TextureBaseProto, '_wrapT', () => WrapMode.REPEAT);
      serializable(TextureBaseProto, '_wrapR', () => WrapMode.REPEAT);
      serializable(TextureBaseProto, '_anisotropy', () => 0);
      ccclass('cc.TextureBase')(TextureBase);

      const SimpleTexture = jsb.SimpleTexture;
      const jsbWindow$1 = jsb.window;
      SimpleTexture.Filter = Filter$1;
      SimpleTexture.PixelFormat = PixelFormat;
      SimpleTexture.WrapMode = WrapMode;
      const simpleTextureProto = jsb.SimpleTexture.prototype;
      const oldUpdateDataFunc = simpleTextureProto.uploadData;

      simpleTextureProto.uploadData = function (source, level = 0, arrayIndex = 0) {
        let data;

        if (source instanceof jsbWindow$1.HTMLCanvasElement) {
          data = source.data;
        } else if (source instanceof jsbWindow$1.HTMLImageElement) {
          data = source._data;
        } else if (ArrayBuffer.isView(source)) {
          data = source.buffer;
        }

        oldUpdateDataFunc.call(this, data, level, arrayIndex);
      };

      const clsDecorator = ccclass('cc.SimpleTexture');

      simpleTextureProto._ctor = function () {
        jsb.TextureBase.prototype._ctor.apply(this, arguments);

        this._gfxTexture = null;

        this._registerListeners();
      };

      const oldGetGFXTexture = simpleTextureProto.getGFXTexture;

      simpleTextureProto.getGFXTexture = function () {
        if (!this._gfxTexture) {
          this._gfxTexture = oldGetGFXTexture.call(this);
        }

        return this._gfxTexture;
      };

      simpleTextureProto._onGFXTextureUpdated = function (gfxTexture) {
        this._gfxTexture = gfxTexture;
      };

      simpleTextureProto._onAfterAssignImage = function (image) {
        if (macro.CLEANUP_IMAGE_CACHE) {
          const deps = dependUtil.getDeps(this._uuid);
          const index = deps.indexOf(image._uuid);

          if (index !== -1) {
            fastRemoveAt(deps, index);
            image.decRef();
          }
        }
      };

      clsDecorator(SimpleTexture);
      legacyCC.SimpleTexture = jsb.SimpleTexture;

      const texture2DProto = jsb.Texture2D.prototype;
      texture2DProto.createNode = null;
      const Texture2D = exports('bh', jsb.Texture2D);
      Texture2D.Filter = Filter$1;
      Texture2D.PixelFormat = PixelFormat;
      Texture2D.WrapMode = WrapMode;

      texture2DProto._ctor = function () {
        SimpleTexture.prototype._ctor.apply(this, arguments);

        this._mipmaps = [];
      };

      texture2DProto._serialize = function (ctxForExporting) {
        if (EDITOR || TEST) {
          return {
            base: TextureBase.prototype._serialize(ctxForExporting),
            mipmaps: this._mipmaps.map(mipmap => {
              if (!mipmap || !mipmap._uuid) {
                return null;
              }

              if (ctxForExporting && ctxForExporting._compressUuid) {
                return EditorExtends.UuidUtils.compressUuid(mipmap._uuid, true);
              }

              return mipmap._uuid;
            })
          };
        }

        return null;
      };

      texture2DProto._deserialize = function (serializedData, handle) {
        const data = serializedData;

        TextureBase.prototype._deserialize.call(this, data.base);

        this._mipmaps = new Array(data.mipmaps.length);

        for (let i = 0; i < data.mipmaps.length; ++i) {
          this._mipmaps[i] = new ImageAsset();

          if (!data.mipmaps[i]) {
            continue;
          }

          const mipmapUUID = data.mipmaps[i];
          handle.result.push(this._mipmaps, `${i}`, mipmapUUID, getClassId(ImageAsset));
        }
      };

      const oldOnLoaded = texture2DProto.onLoaded;

      texture2DProto.onLoaded = function () {
        this.syncMipmapsForJS(this._mipmaps);
        oldOnLoaded.call(this);
      };

      Object.defineProperty(texture2DProto, 'image', {
        configurable: true,
        enumerable: true,

        get() {
          return this._mipmaps.length === 0 ? null : this._mipmaps[0];
        },

        set(value) {
          this.mipmaps = value ? [value] : [];
        }

      });
      Object.defineProperty(texture2DProto, 'mipmaps', {
        configurable: true,
        enumerable: true,

        get() {
          return this._mipmaps;
        },

        set(arr) {
          for (let i = 0, len = arr.length; i < len; ++i) {
            arr[i]._syncDataToNative();
          }

          this._mipmaps = arr;
          this.setMipmaps(arr);
        }

      });
      legacyCC.Texture2D = jsb.Texture2D;
      const Texture2DProto = Texture2D.prototype;
      type([ImageAsset])(Texture2DProto, '_mipmaps');
      ccclass('cc.Texture2D')(Texture2D);

      const SceneAsset = exports('gE', jsb.SceneAsset);
      legacyCC.SceneAsset = SceneAsset;
      const sceneAssetProto = SceneAsset.prototype;
      Object.defineProperty(sceneAssetProto, 'scene', {
        enumerable: true,
        configurable: true,

        get() {
          if (!this._scene) {
            this._scene = this.getScene();
          }

          return this._scene;
        },

        set(v) {
          this._scene = v;
          this.setScene(v);
        }

      });

      sceneAssetProto._ctor = function () {
        jsb.Asset.prototype._ctor.apply(this, arguments);

        this._scene = null;
      };

      const SceneAssetProto = SceneAsset.prototype;
      serializable(SceneAssetProto, 'scene', () => null);
      ccclass('cc.SceneAsset')(SceneAsset);

      deprecateModuleExportedName({
        SystemEventType: {
          newName: 'Input.EventType',
          since: '3.3.0',
          removed: false
        }
      });

      deprecateModuleExportedName({
        SystemEvent: {
          newName: 'Input',
          since: '3.4.0',
          removed: false
        },
        systemEvent: {
          newName: 'input',
          since: '3.4.0',
          removed: false
        }
      });

      class Event {
        constructor(type, bubbles) {
          this.type = void 0;
          this.bubbles = void 0;
          this.target = null;
          this.currentTarget = null;
          this.eventPhase = 0;
          this.propagationStopped = false;
          this.propagationImmediateStopped = false;
          this.type = type;
          this.bubbles = !!bubbles;
        }

        unuse() {
          this.type = Event.NO_TYPE;
          this.target = null;
          this.currentTarget = null;
          this.eventPhase = Event.NONE;
          this.propagationStopped = false;
          this.propagationImmediateStopped = false;
        }

        reuse(type, bubbles) {
          this.type = type;
          this.bubbles = bubbles || false;
        }

        isStopped() {
          return this.propagationStopped || this.propagationImmediateStopped;
        }

        getCurrentTarget() {
          return this.currentTarget;
        }

        getType() {
          return this.type;
        }

      } exports('e$', Event);
      Event.NO_TYPE = 'no_type';
      Event.TOUCH = 'touch';
      Event.MOUSE = 'mouse';
      Event.KEYBOARD = 'keyboard';
      Event.ACCELERATION = 'acceleration';
      Event.NONE = 0;
      Event.CAPTURING_PHASE = 1;
      Event.AT_TARGET = 2;
      Event.BUBBLING_PHASE = 3;
      legacyCC.Event = Event;

      let SystemEventType;

      (function (SystemEventType) {
        SystemEventType["TOUCH_START"] = "touch-start";
        SystemEventType["TOUCH_MOVE"] = "touch-move";
        SystemEventType["TOUCH_END"] = "touch-end";
        SystemEventType["TOUCH_CANCEL"] = "touch-cancel";
        SystemEventType["MOUSE_DOWN"] = "mouse-down";
        SystemEventType["MOUSE_MOVE"] = "mouse-move";
        SystemEventType["MOUSE_UP"] = "mouse-up";
        SystemEventType["MOUSE_WHEEL"] = "mouse-wheel";
        SystemEventType["MOUSE_ENTER"] = "mouse-enter";
        SystemEventType["MOUSE_LEAVE"] = "mouse-leave";
        SystemEventType["KEY_DOWN"] = "keydown";
        SystemEventType["KEY_UP"] = "keyup";
        SystemEventType["DEVICEMOTION"] = "devicemotion";
        SystemEventType["TRANSFORM_CHANGED"] = "transform-changed";
        SystemEventType["SCENE_CHANGED_FOR_PERSISTS"] = "scene-changed-for-persists";
        SystemEventType["SIZE_CHANGED"] = "size-changed";
        SystemEventType["ANCHOR_CHANGED"] = "anchor-changed";
        SystemEventType["COLOR_CHANGED"] = "color-changed";
        SystemEventType["CHILD_ADDED"] = "child-added";
        SystemEventType["CHILD_REMOVED"] = "child-removed";
        SystemEventType["PARENT_CHANGED"] = "parent-changed";
        SystemEventType["NODE_DESTROYED"] = "node-destroyed";
        SystemEventType["LAYER_CHANGED"] = "layer-changed";
        SystemEventType["SIBLING_ORDER_CHANGED"] = "sibling-order-changed";
      })(SystemEventType || (SystemEventType = exports('e_', {})));

      let InputEventType;

      (function (InputEventType) {
        InputEventType["TOUCH_START"] = "touch-start";
        InputEventType["TOUCH_MOVE"] = "touch-move";
        InputEventType["TOUCH_END"] = "touch-end";
        InputEventType["TOUCH_CANCEL"] = "touch-cancel";
        InputEventType["MOUSE_DOWN"] = "mouse-down";
        InputEventType["MOUSE_MOVE"] = "mouse-move";
        InputEventType["MOUSE_UP"] = "mouse-up";
        InputEventType["MOUSE_WHEEL"] = "mouse-wheel";
        InputEventType["KEY_DOWN"] = "keydown";
        InputEventType["KEY_PRESSING"] = "key-pressing";
        InputEventType["KEY_UP"] = "keyup";
        InputEventType["DEVICEMOTION"] = "devicemotion";
        InputEventType["GAMEPAD_INPUT"] = "gamepad-input";
        InputEventType["GAMEPAD_CHANGE"] = "gamepad-change";
        InputEventType["HANDLE_INPUT"] = "handle-input";
        InputEventType["HANDLE_POSE_INPUT"] = "handle-pose-input";
        InputEventType["HMD_POSE_INPUT"] = "hmd-pose-input";
        InputEventType["HANDHELD_POSE_INPUT"] = "handheld-pose-input";
      })(InputEventType || (InputEventType = exports('di', {})));

      legacyCC.SystemEventType = SystemEventType;

      class EventAcceleration extends Event {
        constructor(acc, bubbles) {
          super(SystemEventType.DEVICEMOTION, bubbles);
          this.acc = void 0;
          this.acc = acc;
        }

      } exports('gQ', EventAcceleration);
      Event.EventAcceleration = EventAcceleration;

      class EventKeyboard extends Event {
        get isPressed() {
          return this._isPressed;
        }

        constructor(keyCode, eventType, bubbles) {
          if (typeof eventType === 'boolean') {
            const isPressed = eventType;
            eventType = isPressed ? SystemEventType.KEY_DOWN : SystemEventType.KEY_UP;
          }

          super(eventType, bubbles);
          this.windowId = void 0;
          this.keyCode = void 0;
          this.rawEvent = void 0;
          this._isPressed = void 0;
          this._isPressed = eventType !== SystemEventType.KEY_UP;

          if (typeof keyCode === 'number') {
            this.keyCode = keyCode;
          } else {
            this.keyCode = keyCode.keyCode;
            this.rawEvent = keyCode;
          }

          this.windowId = 0;
        }

      } exports('gR', EventKeyboard);
      Event.EventKeyboard = EventKeyboard;

      class EventMouse extends Event {
        get eventType() {
          return this._eventType;
        }

        constructor(eventType, bubbles, prevLoc, windowId) {
          super(eventType, bubbles);
          this.movementX = 0;
          this.movementY = 0;
          this.windowId = 0;
          this.preventSwallow = false;
          this._eventType = void 0;
          this._button = EventMouse.BUTTON_MISSING;
          this._x = 0;
          this._y = 0;
          this._prevX = 0;
          this._prevY = 0;
          this._scrollX = 0;
          this._scrollY = 0;
          this._eventType = eventType;

          if (prevLoc) {
            this._prevX = prevLoc.x;
            this._prevY = prevLoc.y;
          }

          this.windowId = windowId !== null && windowId !== void 0 ? windowId : this.windowId;
        }

        setScrollData(scrollX, scrollY) {
          this._scrollX = scrollX;
          this._scrollY = scrollY;
        }

        getScrollX() {
          return this._scrollX;
        }

        getScrollY() {
          return this._scrollY;
        }

        setLocation(x, y) {
          this._x = x;
          this._y = y;
        }

        getLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._x, this._y);
          return out;
        }

        getLocationInView(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._x, legacyCC.view._designResolutionSize.height - this._y);
          return out;
        }

        getUILocation(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._x, this._y);

          legacyCC.view._convertToUISpace(out);

          return out;
        }

        getPreviousLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._prevX, this._prevY);
          return out;
        }

        getUIPreviousLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._prevX, this._prevY);

          legacyCC.view._convertToUISpace(out);

          return out;
        }

        getDelta(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._x - this._prevX, this._y - this._prevY);
          return out;
        }

        getDeltaX() {
          return this._x - this._prevX;
        }

        getDeltaY() {
          return this._y - this._prevY;
        }

        getUIDelta(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, (this._x - this._prevX) / legacyCC.view.getScaleX(), (this._y - this._prevY) / legacyCC.view.getScaleY());
          return out;
        }

        getUIDeltaX() {
          return (this._x - this._prevX) / legacyCC.view.getScaleX();
        }

        getUIDeltaY() {
          return (this._y - this._prevY) / legacyCC.view.getScaleY();
        }

        setButton(button) {
          this._button = button;
        }

        getButton() {
          return this._button;
        }

        getLocationX() {
          return this._x;
        }

        getLocationY() {
          return this._y;
        }

        getUILocationX() {
          const viewport = legacyCC.view.getViewportRect();
          return (this._x - viewport.x) / legacyCC.view.getScaleX();
        }

        getUILocationY() {
          const viewport = legacyCC.view.getViewportRect();
          return (this._y - viewport.y) / legacyCC.view.getScaleY();
        }

      } exports('gS', EventMouse);
      EventMouse.BUTTON_MISSING = -1;
      EventMouse.BUTTON_LEFT = 0;
      EventMouse.BUTTON_RIGHT = 2;
      EventMouse.BUTTON_MIDDLE = 1;
      EventMouse.BUTTON_4 = 3;
      EventMouse.BUTTON_5 = 4;
      EventMouse.BUTTON_6 = 5;
      EventMouse.BUTTON_7 = 6;
      EventMouse.BUTTON_8 = 7;
      Event.EventMouse = EventMouse;

      const _vec2 = new Vec2();

      class EventTouch extends Event {
        constructor(changedTouches, bubbles, eventType, touches = []) {
          super(eventType, bubbles);
          this.touch = null;
          this.simulate = false;
          this.windowId = 0;
          this.preventSwallow = false;
          this._eventCode = void 0;
          this._touches = void 0;
          this._allTouches = void 0;
          this._eventCode = eventType;
          this._touches = changedTouches || [];
          this._allTouches = touches;
        }

        getEventCode() {
          return this._eventCode;
        }

        getTouches() {
          return this._touches;
        }

        getAllTouches() {
          return this._allTouches;
        }

        setLocation(x, y) {
          if (this.touch) {
            this.touch.setTouchInfo(this.touch.getID(), x, y);
          }
        }

        getLocation(out) {
          return this.touch ? this.touch.getLocation(out) : new Vec2();
        }

        getUILocation(out) {
          return this.touch ? this.touch.getUILocation(out) : new Vec2();
        }

        getLocationInView(out) {
          return this.touch ? this.touch.getLocationInView(out) : new Vec2();
        }

        getPreviousLocation(out) {
          return this.touch ? this.touch.getPreviousLocation(out) : new Vec2();
        }

        getStartLocation(out) {
          return this.touch ? this.touch.getStartLocation(out) : new Vec2();
        }

        getUIStartLocation(out) {
          return this.touch ? this.touch.getUIStartLocation(out) : new Vec2();
        }

        getID() {
          return this.touch ? this.touch.getID() : null;
        }

        getDelta(out) {
          return this.touch ? this.touch.getDelta(out) : new Vec2();
        }

        getUIDelta(out) {
          return this.touch ? this.touch.getUIDelta(out) : new Vec2();
        }

        getDeltaX() {
          return this.touch ? this.touch.getDelta(_vec2).x : 0;
        }

        getDeltaY() {
          return this.touch ? this.touch.getDelta(_vec2).y : 0;
        }

        getLocationX() {
          return this.touch ? this.touch.getLocationX() : 0;
        }

        getLocationY() {
          return this.touch ? this.touch.getLocationY() : 0;
        }

      } exports('eZ', EventTouch);
      EventTouch.MAX_TOUCHES = 5;
      Event.EventTouch = EventTouch;

      class EventGamepad extends Event {
        constructor(type, gamepad) {
          super(type, false);
          this.gamepad = void 0;
          this.gamepad = gamepad;
        }

      } exports('f0', EventGamepad);

      class EventHandle extends Event {
        constructor(eventType, handleInputDevice) {
          super(eventType, false);
          this.handleInputDevice = void 0;
          this.handleInputDevice = handleInputDevice;
        }

      } exports('f1', EventHandle);

      class EventHMD extends Event {
        constructor(eventType, hmdInputDevice) {
          super(eventType, false);
          this.hmdInputDevice = void 0;
          this.hmdInputDevice = hmdInputDevice;
        }

      } exports('gT', EventHMD);

      class EventHandheld extends Event {
        constructor(eventType, handheldInputDevice) {
          super(eventType, false);
          this.handheldInputDevice = void 0;
          this.handheldInputDevice = handheldInputDevice;
        }

      } exports('gU', EventHandheld);

      class Acceleration {
        constructor(x = 0, y = 0, z = 0, timestamp = 0) {
          this.x = void 0;
          this.y = void 0;
          this.z = void 0;
          this.timestamp = void 0;
          this.x = x;
          this.y = y;
          this.z = z;
          this.timestamp = timestamp;
        }

      } exports('gV', Acceleration);

      let KeyCode;

      (function (KeyCode) {
        KeyCode[KeyCode["NONE"] = 0] = "NONE";
        KeyCode[KeyCode["MOBILE_BACK"] = 6] = "MOBILE_BACK";
        KeyCode[KeyCode["BACKSPACE"] = 8] = "BACKSPACE";
        KeyCode[KeyCode["TAB"] = 9] = "TAB";
        KeyCode[KeyCode["ENTER"] = 13] = "ENTER";
        KeyCode[KeyCode["SHIFT_LEFT"] = 16] = "SHIFT_LEFT";
        KeyCode[KeyCode["CTRL_LEFT"] = 17] = "CTRL_LEFT";
        KeyCode[KeyCode["ALT_LEFT"] = 18] = "ALT_LEFT";
        KeyCode[KeyCode["PAUSE"] = 19] = "PAUSE";
        KeyCode[KeyCode["CAPS_LOCK"] = 20] = "CAPS_LOCK";
        KeyCode[KeyCode["ESCAPE"] = 27] = "ESCAPE";
        KeyCode[KeyCode["SPACE"] = 32] = "SPACE";
        KeyCode[KeyCode["PAGE_UP"] = 33] = "PAGE_UP";
        KeyCode[KeyCode["PAGE_DOWN"] = 34] = "PAGE_DOWN";
        KeyCode[KeyCode["END"] = 35] = "END";
        KeyCode[KeyCode["HOME"] = 36] = "HOME";
        KeyCode[KeyCode["ARROW_LEFT"] = 37] = "ARROW_LEFT";
        KeyCode[KeyCode["ARROW_UP"] = 38] = "ARROW_UP";
        KeyCode[KeyCode["ARROW_RIGHT"] = 39] = "ARROW_RIGHT";
        KeyCode[KeyCode["ARROW_DOWN"] = 40] = "ARROW_DOWN";
        KeyCode[KeyCode["INSERT"] = 45] = "INSERT";
        KeyCode[KeyCode["DELETE"] = 46] = "DELETE";
        KeyCode[KeyCode["DIGIT_0"] = 48] = "DIGIT_0";
        KeyCode[KeyCode["DIGIT_1"] = 49] = "DIGIT_1";
        KeyCode[KeyCode["DIGIT_2"] = 50] = "DIGIT_2";
        KeyCode[KeyCode["DIGIT_3"] = 51] = "DIGIT_3";
        KeyCode[KeyCode["DIGIT_4"] = 52] = "DIGIT_4";
        KeyCode[KeyCode["DIGIT_5"] = 53] = "DIGIT_5";
        KeyCode[KeyCode["DIGIT_6"] = 54] = "DIGIT_6";
        KeyCode[KeyCode["DIGIT_7"] = 55] = "DIGIT_7";
        KeyCode[KeyCode["DIGIT_8"] = 56] = "DIGIT_8";
        KeyCode[KeyCode["DIGIT_9"] = 57] = "DIGIT_9";
        KeyCode[KeyCode["KEY_A"] = 65] = "KEY_A";
        KeyCode[KeyCode["KEY_B"] = 66] = "KEY_B";
        KeyCode[KeyCode["KEY_C"] = 67] = "KEY_C";
        KeyCode[KeyCode["KEY_D"] = 68] = "KEY_D";
        KeyCode[KeyCode["KEY_E"] = 69] = "KEY_E";
        KeyCode[KeyCode["KEY_F"] = 70] = "KEY_F";
        KeyCode[KeyCode["KEY_G"] = 71] = "KEY_G";
        KeyCode[KeyCode["KEY_H"] = 72] = "KEY_H";
        KeyCode[KeyCode["KEY_I"] = 73] = "KEY_I";
        KeyCode[KeyCode["KEY_J"] = 74] = "KEY_J";
        KeyCode[KeyCode["KEY_K"] = 75] = "KEY_K";
        KeyCode[KeyCode["KEY_L"] = 76] = "KEY_L";
        KeyCode[KeyCode["KEY_M"] = 77] = "KEY_M";
        KeyCode[KeyCode["KEY_N"] = 78] = "KEY_N";
        KeyCode[KeyCode["KEY_O"] = 79] = "KEY_O";
        KeyCode[KeyCode["KEY_P"] = 80] = "KEY_P";
        KeyCode[KeyCode["KEY_Q"] = 81] = "KEY_Q";
        KeyCode[KeyCode["KEY_R"] = 82] = "KEY_R";
        KeyCode[KeyCode["KEY_S"] = 83] = "KEY_S";
        KeyCode[KeyCode["KEY_T"] = 84] = "KEY_T";
        KeyCode[KeyCode["KEY_U"] = 85] = "KEY_U";
        KeyCode[KeyCode["KEY_V"] = 86] = "KEY_V";
        KeyCode[KeyCode["KEY_W"] = 87] = "KEY_W";
        KeyCode[KeyCode["KEY_X"] = 88] = "KEY_X";
        KeyCode[KeyCode["KEY_Y"] = 89] = "KEY_Y";
        KeyCode[KeyCode["KEY_Z"] = 90] = "KEY_Z";
        KeyCode[KeyCode["NUM_0"] = 96] = "NUM_0";
        KeyCode[KeyCode["NUM_1"] = 97] = "NUM_1";
        KeyCode[KeyCode["NUM_2"] = 98] = "NUM_2";
        KeyCode[KeyCode["NUM_3"] = 99] = "NUM_3";
        KeyCode[KeyCode["NUM_4"] = 100] = "NUM_4";
        KeyCode[KeyCode["NUM_5"] = 101] = "NUM_5";
        KeyCode[KeyCode["NUM_6"] = 102] = "NUM_6";
        KeyCode[KeyCode["NUM_7"] = 103] = "NUM_7";
        KeyCode[KeyCode["NUM_8"] = 104] = "NUM_8";
        KeyCode[KeyCode["NUM_9"] = 105] = "NUM_9";
        KeyCode[KeyCode["NUM_MULTIPLY"] = 106] = "NUM_MULTIPLY";
        KeyCode[KeyCode["NUM_PLUS"] = 107] = "NUM_PLUS";
        KeyCode[KeyCode["NUM_SUBTRACT"] = 109] = "NUM_SUBTRACT";
        KeyCode[KeyCode["NUM_DECIMAL"] = 110] = "NUM_DECIMAL";
        KeyCode[KeyCode["NUM_DIVIDE"] = 111] = "NUM_DIVIDE";
        KeyCode[KeyCode["F1"] = 112] = "F1";
        KeyCode[KeyCode["F2"] = 113] = "F2";
        KeyCode[KeyCode["F3"] = 114] = "F3";
        KeyCode[KeyCode["F4"] = 115] = "F4";
        KeyCode[KeyCode["F5"] = 116] = "F5";
        KeyCode[KeyCode["F6"] = 117] = "F6";
        KeyCode[KeyCode["F7"] = 118] = "F7";
        KeyCode[KeyCode["F8"] = 119] = "F8";
        KeyCode[KeyCode["F9"] = 120] = "F9";
        KeyCode[KeyCode["F10"] = 121] = "F10";
        KeyCode[KeyCode["F11"] = 122] = "F11";
        KeyCode[KeyCode["F12"] = 123] = "F12";
        KeyCode[KeyCode["NUM_LOCK"] = 144] = "NUM_LOCK";
        KeyCode[KeyCode["SCROLL_LOCK"] = 145] = "SCROLL_LOCK";
        KeyCode[KeyCode["SEMICOLON"] = 186] = "SEMICOLON";
        KeyCode[KeyCode["EQUAL"] = 187] = "EQUAL";
        KeyCode[KeyCode["COMMA"] = 188] = "COMMA";
        KeyCode[KeyCode["DASH"] = 189] = "DASH";
        KeyCode[KeyCode["PERIOD"] = 190] = "PERIOD";
        KeyCode[KeyCode["SLASH"] = 191] = "SLASH";
        KeyCode[KeyCode["BACK_QUOTE"] = 192] = "BACK_QUOTE";
        KeyCode[KeyCode["BRACKET_LEFT"] = 219] = "BRACKET_LEFT";
        KeyCode[KeyCode["BACKSLASH"] = 220] = "BACKSLASH";
        KeyCode[KeyCode["BRACKET_RIGHT"] = 221] = "BRACKET_RIGHT";
        KeyCode[KeyCode["QUOTE"] = 222] = "QUOTE";
        KeyCode[KeyCode["SHIFT_RIGHT"] = 2000] = "SHIFT_RIGHT";
        KeyCode[KeyCode["CTRL_RIGHT"] = 2001] = "CTRL_RIGHT";
        KeyCode[KeyCode["ALT_RIGHT"] = 2002] = "ALT_RIGHT";
        KeyCode[KeyCode["NUM_ENTER"] = 2003] = "NUM_ENTER";
      })(KeyCode || (KeyCode = exports('eV', {})));

      const _vec2$1 = new Vec2();

      class Touch {
        get lastModified() {
          return this._lastModified;
        }

        constructor(x, y, id = 0) {
          this._point = new Vec2();
          this._prevPoint = new Vec2();
          this._lastModified = 0;
          this._id = 0;
          this._startPoint = new Vec2();
          this._startPointCaptured = false;
          this.setTouchInfo(id, x, y);
        }

        getLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._point.x, this._point.y);
          return out;
        }

        getLocationX() {
          return this._point.x;
        }

        getLocationY() {
          return this._point.y;
        }

        getUILocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._point.x, this._point.y);

          legacyCC.view._convertToUISpace(out);

          return out;
        }

        getUILocationX() {
          const viewport = legacyCC.view.getViewportRect();
          return (this._point.x - viewport.x) / legacyCC.view.getScaleX();
        }

        getUILocationY() {
          const viewport = legacyCC.view.getViewportRect();
          return (this._point.y - viewport.y) / legacyCC.view.getScaleY();
        }

        getPreviousLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._prevPoint.x, this._prevPoint.y);
          return out;
        }

        getUIPreviousLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._prevPoint.x, this._prevPoint.y);

          legacyCC.view._convertToUISpace(out);

          return out;
        }

        getStartLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._startPoint.x, this._startPoint.y);
          return out;
        }

        getUIStartLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._startPoint.x, this._startPoint.y);

          legacyCC.view._convertToUISpace(out);

          return out;
        }

        getDelta(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._point);
          out.subtract(this._prevPoint);
          return out;
        }

        getUIDelta(out) {
          if (!out) {
            out = new Vec2();
          }

          _vec2$1.set(this._point);

          _vec2$1.subtract(this._prevPoint);

          out.set(legacyCC.view.getScaleX(), legacyCC.view.getScaleY());
          Vec2.divide(out, _vec2$1, out);
          return out;
        }

        getLocationInView(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._point.x, legacyCC.view._designResolutionSize.height - this._point.y);
          return out;
        }

        getPreviousLocationInView(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._prevPoint.x, legacyCC.view._designResolutionSize.height - this._prevPoint.y);
          return out;
        }

        getStartLocationInView(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._startPoint.x, legacyCC.view._designResolutionSize.height - this._startPoint.y);
          return out;
        }

        getID() {
          return this._id;
        }

        setTouchInfo(id = 0, x, y) {
          this._prevPoint = this._point;
          this._point = new Vec2(x || 0, y || 0);
          this._id = id;

          if (!this._startPointCaptured) {
            this._startPoint = new Vec2(this._point);
            this._startPointCaptured = true;
          }
        }

        setPoint(x, y) {
          if (typeof x === 'object') {
            this._point.x = x.x;
            this._point.y = x.y;
          } else {
            this._point.x = x || 0;
            this._point.y = y || 0;
          }

          this._lastModified = legacyCC.game.frameStartTime;
        }

        setPrevPoint(x, y) {
          if (typeof x === 'object') {
            this._prevPoint = new Vec2(x.x, x.y);
          } else {
            this._prevPoint = new Vec2(x || 0, y || 0);
          }

          this._lastModified = legacyCC.game.frameStartTime;
        }

      } exports('gW', Touch);
      legacyCC.Touch = Touch;

      class AccelerometerInputSource {
        constructor() {
          this._intervalInSeconds = 0.2;
          this._intervalId = void 0;
          this._isEnabled = false;
          this._eventTarget = new EventTarget();
          this._didAccelerateFunc = void 0;
          this._didAccelerateFunc = this._didAccelerate.bind(this);
        }

        _didAccelerate() {
          const deviceMotionValue = jsb.device.getDeviceMotionValue();
          let x = deviceMotionValue[3] * 0.1;
          let y = deviceMotionValue[4] * 0.1;
          const z = deviceMotionValue[5] * 0.1;
          const orientation = screenAdapter.orientation;
          const tmpX = x;

          if (orientation === Orientation.LANDSCAPE_RIGHT) {
            x = -y;
            y = tmpX;
          } else if (orientation === Orientation.LANDSCAPE_LEFT) {
            x = y;
            y = -tmpX;
          } else if (orientation === Orientation.PORTRAIT_UPSIDE_DOWN) {
            x = -x;
            y = -y;
          }

          if (systemInfo.os === OS.ANDROID || systemInfo.os === OS.OHOS) {
            x = -x;
            y = -y;
          }

          const timestamp = performance.now();
          const acceleration = new Acceleration(x, y, z, timestamp);
          const eventAcceleration = new EventAcceleration(acceleration);

          this._eventTarget.emit(InputEventType.DEVICEMOTION, eventAcceleration);
        }

        start() {
          if (this._intervalId) {
            clearInterval(this._intervalId);
          }

          this._intervalId = setInterval(this._didAccelerateFunc, this._intervalInSeconds * 1000);
          jsb.device.setAccelerometerInterval(this._intervalInSeconds);
          jsb.device.setAccelerometerEnabled(true);
          this._isEnabled = true;
        }

        stop() {
          if (this._intervalId) {
            clearInterval(this._intervalId);
            this._intervalId = undefined;
          }

          jsb.device.setAccelerometerEnabled(false);
          this._isEnabled = false;
        }

        setInterval(intervalInMileseconds) {
          this._intervalInSeconds = intervalInMileseconds / 1000;
          jsb.device.setAccelerometerInterval(this._intervalInSeconds);

          if (this._isEnabled) {
            jsb.device.setAccelerometerEnabled(false);
            jsb.device.setAccelerometerEnabled(true);
          }
        }

        on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        }

      }

      class InputSource {}
      class InputSourceAxis1D extends InputSource {
        getValue() {
          throw new Error('Method not implemented.');
        }

      }
      class InputSourceAxis2D extends InputSource {
        getValue() {
          throw new Error('Method not implemented.');
        }

      }
      class InputSourceAxis3D extends InputSource {
        getValue() {
          throw new Error('Method not implemented.');
        }

      }
      class InputSourceQuat extends InputSource {
        getValue() {
          throw new Error('Method not implemented.');
        }

      }
      class CompositeInputSourceAxis1D extends InputSourceAxis1D {
        constructor(options) {
          super();
          this.positive = void 0;
          this.negative = void 0;
          this.positive = options.positive;
          this.negative = options.negative;
        }

        getValue() {
          const positiveValue = this.positive.getValue();
          const negativeValue = this.negative.getValue();

          if (Math.abs(positiveValue) > Math.abs(negativeValue)) {
            return positiveValue;
          }

          return -negativeValue;
        }

      }
      class CompositeInputSourceAxis2D extends InputSourceAxis2D {
        constructor(options) {
          super();
          this.up = void 0;
          this.down = void 0;
          this.left = void 0;
          this.right = void 0;
          this.xAxis = void 0;
          this.yAxis = void 0;
          this.up = options.up;
          this.down = options.down;
          this.left = options.left;
          this.right = options.right;
          this.xAxis = new CompositeInputSourceAxis1D({
            positive: this.right,
            negative: this.left
          });
          this.yAxis = new CompositeInputSourceAxis1D({
            positive: this.up,
            negative: this.down
          });
        }

        getValue() {
          return new Vec2(this.xAxis.getValue(), this.yAxis.getValue());
        }

      }
      class InputSourceButton extends InputSourceAxis1D {
        getValue() {
          return super.getValue();
        }

      }
      class InputSourceDpad extends CompositeInputSourceAxis2D {}
      class InputSourceStick extends CompositeInputSourceAxis2D {}
      class InputSourceOrientation extends InputSourceQuat {
        getValue() {
          return super.getValue();
        }

      }
      class InputSourcePosition extends InputSourceAxis3D {
        getValue() {
          return super.getValue();
        }

      }

      var Button;

      (function (Button) {
        Button[Button["BUTTON_SOUTH"] = 0] = "BUTTON_SOUTH";
        Button[Button["BUTTON_EAST"] = 1] = "BUTTON_EAST";
        Button[Button["BUTTON_WEST"] = 2] = "BUTTON_WEST";
        Button[Button["BUTTON_NORTH"] = 3] = "BUTTON_NORTH";
        Button[Button["NS_MINUS"] = 4] = "NS_MINUS";
        Button[Button["NS_PLUS"] = 5] = "NS_PLUS";
        Button[Button["BUTTON_L1"] = 6] = "BUTTON_L1";
        Button[Button["BUTTON_L2"] = 7] = "BUTTON_L2";
        Button[Button["BUTTON_L3"] = 8] = "BUTTON_L3";
        Button[Button["BUTTON_R1"] = 9] = "BUTTON_R1";
        Button[Button["BUTTON_R2"] = 10] = "BUTTON_R2";
        Button[Button["BUTTON_R3"] = 11] = "BUTTON_R3";
        Button[Button["DPAD_UP"] = 12] = "DPAD_UP";
        Button[Button["DPAD_DOWN"] = 13] = "DPAD_DOWN";
        Button[Button["DPAD_LEFT"] = 14] = "DPAD_LEFT";
        Button[Button["DPAD_RIGHT"] = 15] = "DPAD_RIGHT";
        Button[Button["LEFT_STICK_UP"] = 16] = "LEFT_STICK_UP";
        Button[Button["LEFT_STICK_DOWN"] = 17] = "LEFT_STICK_DOWN";
        Button[Button["LEFT_STICK_LEFT"] = 18] = "LEFT_STICK_LEFT";
        Button[Button["LEFT_STICK_RIGHT"] = 19] = "LEFT_STICK_RIGHT";
        Button[Button["RIGHT_STICK_UP"] = 20] = "RIGHT_STICK_UP";
        Button[Button["RIGHT_STICK_DOWN"] = 21] = "RIGHT_STICK_DOWN";
        Button[Button["RIGHT_STICK_LEFT"] = 22] = "RIGHT_STICK_LEFT";
        Button[Button["RIGHT_STICK_RIGHT"] = 23] = "RIGHT_STICK_RIGHT";
        Button[Button["ROKID_MENU"] = 24] = "ROKID_MENU";
        Button[Button["ROKID_START"] = 25] = "ROKID_START";
      })(Button || (Button = {}));

      const _nativeButtonMap = {
        1: Button.BUTTON_EAST,
        2: Button.BUTTON_SOUTH,
        3: Button.BUTTON_NORTH,
        4: Button.BUTTON_WEST,
        5: Button.BUTTON_L1,
        6: Button.BUTTON_R1,
        7: Button.NS_MINUS,
        8: Button.NS_PLUS,
        9: Button.BUTTON_L3,
        10: Button.BUTTON_R3,
        11: Button.ROKID_MENU,
        12: Button.ROKID_START
      };
      class GamepadInputDevice {
        get buttonNorth() {
          return this._buttonNorth;
        }

        get buttonEast() {
          return this._buttonEast;
        }

        get buttonWest() {
          return this._buttonWest;
        }

        get buttonSouth() {
          return this._buttonSouth;
        }

        get buttonL1() {
          return this._buttonL1;
        }

        get buttonL2() {
          return this._buttonL2;
        }

        get buttonL3() {
          return this._buttonL3;
        }

        get buttonR1() {
          return this._buttonR1;
        }

        get buttonR2() {
          return this._buttonR2;
        }

        get buttonR3() {
          return this._buttonR3;
        }

        get buttonShare() {
          return this._buttonShare;
        }

        get buttonOptions() {
          return this._buttonOptions;
        }

        get dpad() {
          return this._dpad;
        }

        get leftStick() {
          return this._leftStick;
        }

        get rightStick() {
          return this._rightStick;
        }

        get buttonStart() {
          return this._buttonStart;
        }

        get gripLeft() {
          return this._gripLeft;
        }

        get gripRight() {
          return this._gripRight;
        }

        get handLeftPosition() {
          return this._handLeftPosition;
        }

        get handLeftOrientation() {
          return this._handLeftOrientation;
        }

        get handRightPosition() {
          return this._handRightPosition;
        }

        get handRightOrientation() {
          return this._handRightOrientation;
        }

        get aimLeftPosition() {
          return this._aimLeftPosition;
        }

        get aimLeftOrientation() {
          return this._aimLeftOrientation;
        }

        get aimRightPosition() {
          return this._aimRightPosition;
        }

        get aimRightOrientation() {
          return this._aimRightOrientation;
        }

        get deviceId() {
          return this._deviceId;
        }

        get connected() {
          return this._connected;
        }

        constructor(deviceId) {
          this._deviceId = -1;
          this._connected = false;
          this._nativeButtonState = {
            [Button.BUTTON_SOUTH]: 0,
            [Button.BUTTON_EAST]: 0,
            [Button.BUTTON_WEST]: 0,
            [Button.BUTTON_NORTH]: 0,
            [Button.NS_MINUS]: 0,
            [Button.NS_PLUS]: 0,
            [Button.BUTTON_L1]: 0,
            [Button.BUTTON_L2]: 0,
            [Button.BUTTON_L3]: 0,
            [Button.BUTTON_R1]: 0,
            [Button.BUTTON_R2]: 0,
            [Button.BUTTON_R3]: 0,
            [Button.DPAD_UP]: 0,
            [Button.DPAD_DOWN]: 0,
            [Button.DPAD_LEFT]: 0,
            [Button.DPAD_RIGHT]: 0,
            [Button.LEFT_STICK_UP]: 0,
            [Button.LEFT_STICK_DOWN]: 0,
            [Button.LEFT_STICK_LEFT]: 0,
            [Button.LEFT_STICK_RIGHT]: 0,
            [Button.RIGHT_STICK_UP]: 0,
            [Button.RIGHT_STICK_DOWN]: 0,
            [Button.RIGHT_STICK_LEFT]: 0,
            [Button.RIGHT_STICK_RIGHT]: 0,
            [Button.ROKID_MENU]: 0,
            [Button.ROKID_START]: 0
          };
          this._deviceId = deviceId;

          this._initInputSource();
        }

        static _init() {
          if (!systemInfo.hasFeature(Feature.EVENT_GAMEPAD)) {
            return;
          }

          GamepadInputDevice._registerEvent();
        }

        static _on(eventType, cb, target) {
          GamepadInputDevice._eventTarget.on(eventType, cb, target);
        }

        static _removeInputDevice(id) {
          const removeIndex = GamepadInputDevice.all.findIndex(device => device.deviceId === id);

          if (removeIndex === -1) {
            return;
          }

          fastRemoveAt(GamepadInputDevice.all, removeIndex);
        }

        static _getInputDevice(id) {
          return GamepadInputDevice.all.find(device => device.deviceId === id);
        }

        static _createInputDevice(id, connected) {
          const device = new GamepadInputDevice(id);
          device._connected = connected;
          GamepadInputDevice.all.push(device);
          return device;
        }

        static _getOrCreateInputDevice(id, connected) {
          let device = GamepadInputDevice._getInputDevice(id);

          if (!device) {
            device = GamepadInputDevice._createInputDevice(id, connected);
          }

          device._connected = connected;
          return device;
        }

        static _registerEvent() {
          jsb.onControllerInput = infoList => {
            for (let i = 0; i < infoList.length; ++i) {
              const info = infoList[i];

              const device = GamepadInputDevice._getOrCreateInputDevice(info.id, true);

              device._updateNativeButtonState(info);

              GamepadInputDevice._eventTarget.emit(InputEventType.GAMEPAD_INPUT, new EventGamepad(InputEventType.GAMEPAD_INPUT, device));
            }
          };

          jsb.onControllerChange = controllerIds => {
            for (let i = 0; i < controllerIds.length; ++i) {
              const id = controllerIds[i];

              let device = GamepadInputDevice._getInputDevice(id);

              if (!device) {
                device = GamepadInputDevice._createInputDevice(id, true);

                GamepadInputDevice._eventTarget.emit(InputEventType.GAMEPAD_CHANGE, new EventGamepad(InputEventType.GAMEPAD_CHANGE, device));
              }
            }

            const allDevices = GamepadInputDevice.all;

            for (let i = 0; i < allDevices.length; ++i) {
              const device = allDevices[i];

              if (!controllerIds.includes(device.deviceId)) {
                GamepadInputDevice._removeInputDevice(device.deviceId);

                device._connected = false;

                GamepadInputDevice._eventTarget.emit(InputEventType.GAMEPAD_CHANGE, new EventGamepad(InputEventType.GAMEPAD_CHANGE, device));
              }
            }
          };
        }

        _axisToButtons(axisValue) {
          const value = Math.abs(axisValue);

          if (axisValue > 0) {
            return {
              negative: 0,
              positive: value
            };
          } else if (axisValue < 0) {
            return {
              negative: value,
              positive: 0
            };
          } else {
            return {
              negative: 0,
              positive: 0
            };
          }
        }

        _updateNativeButtonState(info) {
          const {
            buttonInfoList,
            axisInfoList
          } = info;

          for (let i = 0; i < buttonInfoList.length; ++i) {
            const buttonInfo = buttonInfoList[i];
            const button = _nativeButtonMap[buttonInfo.code];
            this._nativeButtonState[button] = buttonInfo.isPressed ? 1 : 0;
          }

          for (let i = 0; i < axisInfoList.length; ++i) {
            const axisInfo = axisInfoList[i];
            const {
              code,
              value
            } = axisInfo;
            let negativeButton;
            let positiveButton;
            let axisValue;

            switch (code) {
              case 1:
                negativeButton = Button.DPAD_LEFT;
                positiveButton = Button.DPAD_RIGHT;
                axisValue = this._axisToButtons(value);
                break;

              case 2:
                negativeButton = Button.DPAD_DOWN;
                positiveButton = Button.DPAD_UP;
                axisValue = this._axisToButtons(value);
                break;

              case 3:
                negativeButton = Button.LEFT_STICK_LEFT;
                positiveButton = Button.LEFT_STICK_RIGHT;
                axisValue = this._axisToButtons(value);
                break;

              case 4:
                negativeButton = Button.LEFT_STICK_DOWN;
                positiveButton = Button.LEFT_STICK_UP;
                axisValue = this._axisToButtons(value);
                break;

              case 5:
                negativeButton = Button.RIGHT_STICK_LEFT;
                positiveButton = Button.RIGHT_STICK_RIGHT;
                axisValue = this._axisToButtons(value);
                break;

              case 6:
                negativeButton = Button.RIGHT_STICK_DOWN;
                positiveButton = Button.RIGHT_STICK_UP;
                axisValue = this._axisToButtons(value);
                break;

              default:
                if (code === 7) {
                  this._nativeButtonState[Button.BUTTON_L2] = value;
                } else if (code === 8) {
                  this._nativeButtonState[Button.BUTTON_R2] = value;
                }

                break;
            }

            if (negativeButton && positiveButton && axisValue) {
              this._nativeButtonState[negativeButton] = axisValue.negative;
              this._nativeButtonState[positiveButton] = axisValue.positive;
            }
          }
        }

        _initInputSource() {
          this._buttonNorth = new InputSourceButton();

          this._buttonNorth.getValue = () => this._nativeButtonState[Button.BUTTON_NORTH];

          this._buttonEast = new InputSourceButton();

          this._buttonEast.getValue = () => this._nativeButtonState[Button.BUTTON_EAST];

          this._buttonWest = new InputSourceButton();

          this._buttonWest.getValue = () => this._nativeButtonState[Button.BUTTON_WEST];

          this._buttonSouth = new InputSourceButton();

          this._buttonSouth.getValue = () => this._nativeButtonState[Button.BUTTON_SOUTH];

          this._buttonL1 = new InputSourceButton();

          this._buttonL1.getValue = () => this._nativeButtonState[Button.BUTTON_L1];

          this._buttonL2 = new InputSourceButton();

          this._buttonL2.getValue = () => this._nativeButtonState[Button.BUTTON_L2];

          this._buttonL3 = new InputSourceButton();

          this._buttonL3.getValue = () => this._nativeButtonState[Button.BUTTON_L3];

          this._buttonR1 = new InputSourceButton();

          this._buttonR1.getValue = () => this._nativeButtonState[Button.BUTTON_R1];

          this._buttonR2 = new InputSourceButton();

          this._buttonR2.getValue = () => this._nativeButtonState[Button.BUTTON_R2];

          this._buttonR3 = new InputSourceButton();

          this._buttonR3.getValue = () => this._nativeButtonState[Button.BUTTON_R3];

          this._buttonShare = new InputSourceButton();

          this._buttonShare.getValue = () => this._nativeButtonState[Button.NS_MINUS];

          this._buttonOptions = new InputSourceButton();

          this._buttonOptions.getValue = () => this._nativeButtonState[Button.NS_PLUS] || this._nativeButtonState[Button.ROKID_MENU];

          const dpadUp = new InputSourceButton();

          dpadUp.getValue = () => this._nativeButtonState[Button.DPAD_UP];

          const dpadDown = new InputSourceButton();

          dpadDown.getValue = () => this._nativeButtonState[Button.DPAD_DOWN];

          const dpadLeft = new InputSourceButton();

          dpadLeft.getValue = () => this._nativeButtonState[Button.DPAD_LEFT];

          const dpadRight = new InputSourceButton();

          dpadRight.getValue = () => this._nativeButtonState[Button.DPAD_RIGHT];

          this._dpad = new InputSourceDpad({
            up: dpadUp,
            down: dpadDown,
            left: dpadLeft,
            right: dpadRight
          });
          const leftStickUp = new InputSourceButton();

          leftStickUp.getValue = () => this._nativeButtonState[Button.LEFT_STICK_UP];

          const leftStickDown = new InputSourceButton();

          leftStickDown.getValue = () => this._nativeButtonState[Button.LEFT_STICK_DOWN];

          const leftStickLeft = new InputSourceButton();

          leftStickLeft.getValue = () => this._nativeButtonState[Button.LEFT_STICK_LEFT];

          const leftStickRight = new InputSourceButton();

          leftStickRight.getValue = () => this._nativeButtonState[Button.LEFT_STICK_RIGHT];

          this._leftStick = new InputSourceStick({
            up: leftStickUp,
            down: leftStickDown,
            left: leftStickLeft,
            right: leftStickRight
          });
          const rightStickUp = new InputSourceButton();

          rightStickUp.getValue = () => this._nativeButtonState[Button.RIGHT_STICK_UP];

          const rightStickDown = new InputSourceButton();

          rightStickDown.getValue = () => this._nativeButtonState[Button.RIGHT_STICK_DOWN];

          const rightStickLeft = new InputSourceButton();

          rightStickLeft.getValue = () => this._nativeButtonState[Button.RIGHT_STICK_LEFT];

          const rightStickRight = new InputSourceButton();

          rightStickRight.getValue = () => this._nativeButtonState[Button.RIGHT_STICK_RIGHT];

          this._rightStick = new InputSourceStick({
            up: rightStickUp,
            down: rightStickDown,
            left: rightStickLeft,
            right: rightStickRight
          });
          this._buttonStart = new InputSourceButton();

          this._buttonStart.getValue = () => this._nativeButtonState[Button.ROKID_START];

          this._gripLeft = new InputSourceButton();

          this._gripLeft.getValue = () => 0;

          this._gripRight = new InputSourceButton();

          this._gripRight.getValue = () => 0;

          this._handLeftPosition = new InputSourcePosition();

          this._handLeftPosition.getValue = () => Vec3.ZERO;

          this._handLeftOrientation = new InputSourceOrientation();

          this._handLeftOrientation.getValue = () => Quat.IDENTITY;

          this._handRightPosition = new InputSourcePosition();

          this._handRightPosition.getValue = () => Vec3.ZERO;

          this._handRightOrientation = new InputSourceOrientation();

          this._handRightOrientation.getValue = () => Quat.IDENTITY;

          this._aimLeftPosition = new InputSourcePosition();

          this._aimLeftPosition.getValue = () => Vec3.ZERO;

          this._aimLeftOrientation = new InputSourceOrientation();

          this._aimLeftOrientation.getValue = () => Quat.IDENTITY;

          this._aimRightPosition = new InputSourcePosition();

          this._aimRightPosition.getValue = () => Vec3.ZERO;

          this._aimRightOrientation = new InputSourceOrientation();

          this._aimRightOrientation.getValue = () => Quat.IDENTITY;
        }

      }
      GamepadInputDevice.all = [];
      GamepadInputDevice.xr = null;
      GamepadInputDevice._eventTarget = new EventTarget();

      var Button$1;

      (function (Button) {
        Button[Button["BUTTON_EAST"] = 0] = "BUTTON_EAST";
        Button[Button["BUTTON_SOUTH"] = 1] = "BUTTON_SOUTH";
        Button[Button["BUTTON_WEST"] = 2] = "BUTTON_WEST";
        Button[Button["BUTTON_NORTH"] = 3] = "BUTTON_NORTH";
        Button[Button["BUTTON_TRIGGER_LEFT"] = 4] = "BUTTON_TRIGGER_LEFT";
        Button[Button["BUTTON_TRIGGER_RIGHT"] = 5] = "BUTTON_TRIGGER_RIGHT";
        Button[Button["TRIGGER_LEFT"] = 6] = "TRIGGER_LEFT";
        Button[Button["TRIGGER_RIGHT"] = 7] = "TRIGGER_RIGHT";
        Button[Button["GRIP_LEFT"] = 8] = "GRIP_LEFT";
        Button[Button["GRIP_RIGHT"] = 9] = "GRIP_RIGHT";
        Button[Button["BUTTON_LEFT_STICK"] = 10] = "BUTTON_LEFT_STICK";
        Button[Button["LEFT_STICK_UP"] = 11] = "LEFT_STICK_UP";
        Button[Button["LEFT_STICK_DOWN"] = 12] = "LEFT_STICK_DOWN";
        Button[Button["LEFT_STICK_LEFT"] = 13] = "LEFT_STICK_LEFT";
        Button[Button["LEFT_STICK_RIGHT"] = 14] = "LEFT_STICK_RIGHT";
        Button[Button["BUTTON_RIGHT_STICK"] = 15] = "BUTTON_RIGHT_STICK";
        Button[Button["RIGHT_STICK_UP"] = 16] = "RIGHT_STICK_UP";
        Button[Button["RIGHT_STICK_DOWN"] = 17] = "RIGHT_STICK_DOWN";
        Button[Button["RIGHT_STICK_LEFT"] = 18] = "RIGHT_STICK_LEFT";
        Button[Button["RIGHT_STICK_RIGHT"] = 19] = "RIGHT_STICK_RIGHT";
        Button[Button["ROKID_MENU"] = 20] = "ROKID_MENU";
        Button[Button["ROKID_START"] = 21] = "ROKID_START";
      })(Button$1 || (Button$1 = {}));

      var Pose;

      (function (Pose) {
        Pose[Pose["HAND_LEFT"] = 0] = "HAND_LEFT";
        Pose[Pose["HAND_RIGHT"] = 1] = "HAND_RIGHT";
        Pose[Pose["AIM_LEFT"] = 2] = "AIM_LEFT";
        Pose[Pose["AIM_RIGHT"] = 3] = "AIM_RIGHT";
      })(Pose || (Pose = {}));

      const _nativeButtonMap$1 = {
        1: Button$1.BUTTON_EAST,
        2: Button$1.BUTTON_SOUTH,
        3: Button$1.BUTTON_NORTH,
        4: Button$1.BUTTON_WEST,
        9: Button$1.BUTTON_LEFT_STICK,
        10: Button$1.BUTTON_RIGHT_STICK,
        11: Button$1.ROKID_MENU,
        12: Button$1.ROKID_START,
        13: Button$1.BUTTON_TRIGGER_LEFT,
        14: Button$1.BUTTON_TRIGGER_RIGHT
      };
      class HandleInputDevice {
        get buttonNorth() {
          return this._buttonNorth;
        }

        get buttonEast() {
          return this._buttonEast;
        }

        get buttonWest() {
          return this._buttonWest;
        }

        get buttonSouth() {
          return this._buttonSouth;
        }

        get buttonTriggerLeft() {
          return this._buttonTriggerLeft;
        }

        get buttonTriggerRight() {
          return this._buttonTriggerRight;
        }

        get triggerLeft() {
          return this._triggerLeft;
        }

        get triggerRight() {
          return this._triggerRight;
        }

        get gripLeft() {
          return this._gripLeft;
        }

        get gripRight() {
          return this._gripRight;
        }

        get leftStick() {
          return this._leftStick;
        }

        get rightStick() {
          return this._rightStick;
        }

        get buttonLeftStick() {
          return this._buttonLeftStick;
        }

        get buttonRightStick() {
          return this._buttonRightStick;
        }

        get buttonOptions() {
          return this._buttonOptions;
        }

        get buttonStart() {
          return this._buttonStart;
        }

        get handLeftPosition() {
          return this._handLeftPosition;
        }

        get handLeftOrientation() {
          return this._handLeftOrientation;
        }

        get handRightPosition() {
          return this._handRightPosition;
        }

        get handRightOrientation() {
          return this._handRightOrientation;
        }

        get aimLeftPosition() {
          return this._aimLeftPosition;
        }

        get aimLeftOrientation() {
          return this._aimLeftOrientation;
        }

        get aimRightPosition() {
          return this._aimRightPosition;
        }

        get aimRightOrientation() {
          return this._aimRightOrientation;
        }

        constructor() {
          this._eventTarget = new EventTarget();
          this._nativeButtonState = {
            [Button$1.BUTTON_SOUTH]: 0,
            [Button$1.BUTTON_EAST]: 0,
            [Button$1.BUTTON_WEST]: 0,
            [Button$1.BUTTON_NORTH]: 0,
            [Button$1.BUTTON_TRIGGER_LEFT]: 0,
            [Button$1.BUTTON_TRIGGER_RIGHT]: 0,
            [Button$1.TRIGGER_LEFT]: 0,
            [Button$1.TRIGGER_RIGHT]: 0,
            [Button$1.GRIP_LEFT]: 0,
            [Button$1.GRIP_RIGHT]: 0,
            [Button$1.LEFT_STICK_UP]: 0,
            [Button$1.LEFT_STICK_DOWN]: 0,
            [Button$1.LEFT_STICK_LEFT]: 0,
            [Button$1.LEFT_STICK_RIGHT]: 0,
            [Button$1.RIGHT_STICK_UP]: 0,
            [Button$1.RIGHT_STICK_DOWN]: 0,
            [Button$1.RIGHT_STICK_LEFT]: 0,
            [Button$1.RIGHT_STICK_RIGHT]: 0,
            [Button$1.BUTTON_LEFT_STICK]: 0,
            [Button$1.BUTTON_RIGHT_STICK]: 0,
            [Button$1.ROKID_MENU]: 0,
            [Button$1.ROKID_START]: 0
          };
          this._nativePoseState = {
            [Pose.HAND_LEFT]: {
              position: Vec3.ZERO,
              orientation: Quat.IDENTITY
            },
            [Pose.HAND_RIGHT]: {
              position: Vec3.ZERO,
              orientation: Quat.IDENTITY
            },
            [Pose.AIM_LEFT]: {
              position: Vec3.ZERO,
              orientation: Quat.IDENTITY
            },
            [Pose.AIM_RIGHT]: {
              position: Vec3.ZERO,
              orientation: Quat.IDENTITY
            }
          };

          this._initInputSource();

          this._registerEvent();
        }

        _registerEvent() {
          jsb.onHandleInput = infoList => {
            for (let i = 0; i < infoList.length; ++i) {
              const info = infoList[i];

              this._updateNativeButtonState(info);

              this._eventTarget.emit(InputEventType.HANDLE_INPUT, new EventHandle(InputEventType.HANDLE_INPUT, this));
            }
          };

          jsb.onHandlePoseInput = infoList => {
            for (let i = 0; i < infoList.length; ++i) {
              const info = infoList[i];

              this._updateNativePoseState(info);
            }

            this._eventTarget.emit(InputEventType.HANDLE_POSE_INPUT, new EventHandle(InputEventType.HANDLE_POSE_INPUT, this));
          };
        }

        _on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        }

        _axisToButtons(axisValue) {
          const value = Math.abs(axisValue);

          if (axisValue > 0) {
            return {
              negative: 0,
              positive: value
            };
          } else if (axisValue < 0) {
            return {
              negative: value,
              positive: 0
            };
          } else {
            return {
              negative: 0,
              positive: 0
            };
          }
        }

        _updateNativeButtonState(info) {
          const {
            buttonInfoList,
            axisInfoList
          } = info;

          for (let i = 0; i < buttonInfoList.length; ++i) {
            const buttonInfo = buttonInfoList[i];
            const button = _nativeButtonMap$1[buttonInfo.code];
            this._nativeButtonState[button] = buttonInfo.isPressed ? 1 : 0;
          }

          for (let i = 0; i < axisInfoList.length; ++i) {
            const axisInfo = axisInfoList[i];
            const {
              code,
              value
            } = axisInfo;
            let negativeButton;
            let positiveButton;
            let axisValue;

            switch (code) {
              case 3:
                negativeButton = Button$1.LEFT_STICK_LEFT;
                positiveButton = Button$1.LEFT_STICK_RIGHT;
                axisValue = this._axisToButtons(value);
                break;

              case 4:
                negativeButton = Button$1.LEFT_STICK_DOWN;
                positiveButton = Button$1.LEFT_STICK_UP;
                axisValue = this._axisToButtons(value);
                break;

              case 5:
                negativeButton = Button$1.RIGHT_STICK_LEFT;
                positiveButton = Button$1.RIGHT_STICK_RIGHT;
                axisValue = this._axisToButtons(value);
                break;

              case 6:
                negativeButton = Button$1.RIGHT_STICK_DOWN;
                positiveButton = Button$1.RIGHT_STICK_UP;
                axisValue = this._axisToButtons(value);
                break;

              default:
                if (code === 7) {
                  this._nativeButtonState[Button$1.TRIGGER_LEFT] = value;
                } else if (code === 8) {
                  this._nativeButtonState[Button$1.TRIGGER_RIGHT] = value;
                } else if (code === 9) {
                  this._nativeButtonState[Button$1.GRIP_LEFT] = value;
                } else if (code === 10) {
                  this._nativeButtonState[Button$1.GRIP_RIGHT] = value;
                }

                break;
            }

            if (negativeButton && positiveButton && axisValue) {
              this._nativeButtonState[negativeButton] = axisValue.negative;
              this._nativeButtonState[positiveButton] = axisValue.positive;
            }
          }
        }

        _updateNativePoseState(info) {
          switch (info.code) {
            case 1:
              this._nativePoseState[Pose.HAND_LEFT] = {
                position: new Vec3(info.x, info.y, info.z),
                orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
              };
              break;

            case 2:
              this._nativePoseState[Pose.AIM_LEFT] = {
                position: new Vec3(info.x, info.y, info.z),
                orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
              };
              break;

            case 4:
              this._nativePoseState[Pose.HAND_RIGHT] = {
                position: new Vec3(info.x, info.y, info.z),
                orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
              };
              break;

            case 5:
              this._nativePoseState[Pose.AIM_RIGHT] = {
                position: new Vec3(info.x, info.y, info.z),
                orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
              };
              break;
          }
        }

        _initInputSource() {
          this._buttonNorth = new InputSourceButton();

          this._buttonNorth.getValue = () => this._nativeButtonState[Button$1.BUTTON_NORTH];

          this._buttonEast = new InputSourceButton();

          this._buttonEast.getValue = () => this._nativeButtonState[Button$1.BUTTON_EAST];

          this._buttonWest = new InputSourceButton();

          this._buttonWest.getValue = () => this._nativeButtonState[Button$1.BUTTON_WEST];

          this._buttonSouth = new InputSourceButton();

          this._buttonSouth.getValue = () => this._nativeButtonState[Button$1.BUTTON_SOUTH];

          this._buttonTriggerLeft = new InputSourceButton();

          this._buttonTriggerLeft.getValue = () => this._nativeButtonState[Button$1.BUTTON_TRIGGER_LEFT];

          this._buttonTriggerRight = new InputSourceButton();

          this._buttonTriggerRight.getValue = () => this._nativeButtonState[Button$1.BUTTON_TRIGGER_RIGHT];

          this._triggerLeft = new InputSourceButton();

          this._triggerLeft.getValue = () => this._nativeButtonState[Button$1.TRIGGER_LEFT];

          this._triggerRight = new InputSourceButton();

          this._triggerRight.getValue = () => this._nativeButtonState[Button$1.TRIGGER_RIGHT];

          this._gripLeft = new InputSourceButton();

          this._gripLeft.getValue = () => this._nativeButtonState[Button$1.GRIP_LEFT];

          this._gripRight = new InputSourceButton();

          this._gripRight.getValue = () => this._nativeButtonState[Button$1.GRIP_RIGHT];

          this._buttonLeftStick = new InputSourceButton();

          this._buttonLeftStick.getValue = () => this._nativeButtonState[Button$1.BUTTON_LEFT_STICK];

          const leftStickUp = new InputSourceButton();

          leftStickUp.getValue = () => this._nativeButtonState[Button$1.LEFT_STICK_UP];

          const leftStickDown = new InputSourceButton();

          leftStickDown.getValue = () => this._nativeButtonState[Button$1.LEFT_STICK_DOWN];

          const leftStickLeft = new InputSourceButton();

          leftStickLeft.getValue = () => this._nativeButtonState[Button$1.LEFT_STICK_LEFT];

          const leftStickRight = new InputSourceButton();

          leftStickRight.getValue = () => this._nativeButtonState[Button$1.LEFT_STICK_RIGHT];

          this._leftStick = new InputSourceStick({
            up: leftStickUp,
            down: leftStickDown,
            left: leftStickLeft,
            right: leftStickRight
          });
          this._buttonRightStick = new InputSourceButton();

          this._buttonRightStick.getValue = () => this._nativeButtonState[Button$1.BUTTON_RIGHT_STICK];

          const rightStickUp = new InputSourceButton();

          rightStickUp.getValue = () => this._nativeButtonState[Button$1.RIGHT_STICK_UP];

          const rightStickDown = new InputSourceButton();

          rightStickDown.getValue = () => this._nativeButtonState[Button$1.RIGHT_STICK_DOWN];

          const rightStickLeft = new InputSourceButton();

          rightStickLeft.getValue = () => this._nativeButtonState[Button$1.RIGHT_STICK_LEFT];

          const rightStickRight = new InputSourceButton();

          rightStickRight.getValue = () => this._nativeButtonState[Button$1.RIGHT_STICK_RIGHT];

          this._rightStick = new InputSourceStick({
            up: rightStickUp,
            down: rightStickDown,
            left: rightStickLeft,
            right: rightStickRight
          });
          this._buttonOptions = new InputSourceButton();

          this._buttonOptions.getValue = () => this._nativeButtonState[Button$1.ROKID_MENU];

          this._buttonStart = new InputSourceButton();

          this._buttonStart.getValue = () => this._nativeButtonState[Button$1.ROKID_START];

          this._handLeftPosition = new InputSourcePosition();

          this._handLeftPosition.getValue = () => this._nativePoseState[Pose.HAND_LEFT].position;

          this._handLeftOrientation = new InputSourceOrientation();

          this._handLeftOrientation.getValue = () => this._nativePoseState[Pose.HAND_LEFT].orientation;

          this._handRightPosition = new InputSourcePosition();

          this._handRightPosition.getValue = () => this._nativePoseState[Pose.HAND_RIGHT].position;

          this._handRightOrientation = new InputSourceOrientation();

          this._handRightOrientation.getValue = () => this._nativePoseState[Pose.HAND_RIGHT].orientation;

          this._aimLeftPosition = new InputSourcePosition();

          this._aimLeftPosition.getValue = () => this._nativePoseState[Pose.AIM_LEFT].position;

          this._aimLeftOrientation = new InputSourceOrientation();

          this._aimLeftOrientation.getValue = () => this._nativePoseState[Pose.AIM_LEFT].orientation;

          this._aimRightPosition = new InputSourcePosition();

          this._aimRightPosition.getValue = () => this._nativePoseState[Pose.AIM_RIGHT].position;

          this._aimRightOrientation = new InputSourceOrientation();

          this._aimRightOrientation.getValue = () => this._nativePoseState[Pose.AIM_RIGHT].orientation;
        }

      }

      var Pose$1;

      (function (Pose) {
        Pose[Pose["VIEW_LEFT"] = 0] = "VIEW_LEFT";
        Pose[Pose["VIEW_RIGHT"] = 1] = "VIEW_RIGHT";
        Pose[Pose["HEAD_MIDDLE"] = 2] = "HEAD_MIDDLE";
      })(Pose$1 || (Pose$1 = {}));

      class HMDInputDevice {
        get viewLeftPosition() {
          return this._viewLeftPosition;
        }

        get viewLeftOrientation() {
          return this._viewLeftOrientation;
        }

        get viewRightPosition() {
          return this._viewRightPosition;
        }

        get viewRightOrientation() {
          return this._viewRightOrientation;
        }

        get headMiddlePosition() {
          return this._headMiddlePosition;
        }

        get headMiddleOrientation() {
          return this._headMiddleOrientation;
        }

        constructor() {
          this._eventTarget = new EventTarget();
          this._nativePoseState = {
            [Pose$1.VIEW_LEFT]: {
              position: Vec3.ZERO,
              orientation: Quat.IDENTITY
            },
            [Pose$1.VIEW_RIGHT]: {
              position: Vec3.ZERO,
              orientation: Quat.IDENTITY
            },
            [Pose$1.HEAD_MIDDLE]: {
              position: Vec3.ZERO,
              orientation: Quat.IDENTITY
            }
          };

          this._initInputSource();

          this._registerEvent();
        }

        _registerEvent() {
          jsb.onHMDPoseInput = infoList => {
            for (let i = 0; i < infoList.length; ++i) {
              const info = infoList[i];

              this._updateNativePoseState(info);
            }

            this._eventTarget.emit(InputEventType.HMD_POSE_INPUT, new EventHMD(InputEventType.HMD_POSE_INPUT, this));
          };
        }

        _on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        }

        _updateNativePoseState(info) {
          switch (info.code) {
            case 0:
              this._nativePoseState[Pose$1.VIEW_LEFT] = {
                position: new Vec3(info.x, info.y, info.z),
                orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
              };
              break;

            case 3:
              this._nativePoseState[Pose$1.VIEW_RIGHT] = {
                position: new Vec3(info.x, info.y, info.z),
                orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
              };
              break;

            case 6:
              this._nativePoseState[Pose$1.HEAD_MIDDLE] = {
                position: new Vec3(info.x, info.y, info.z),
                orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
              };
              break;
          }
        }

        _initInputSource() {
          this._viewLeftPosition = new InputSourcePosition();

          this._viewLeftPosition.getValue = () => this._nativePoseState[Pose$1.VIEW_LEFT].position;

          this._viewLeftOrientation = new InputSourceOrientation();

          this._viewLeftOrientation.getValue = () => this._nativePoseState[Pose$1.VIEW_LEFT].orientation;

          this._viewRightPosition = new InputSourcePosition();

          this._viewRightPosition.getValue = () => this._nativePoseState[Pose$1.VIEW_RIGHT].position;

          this._viewRightOrientation = new InputSourceOrientation();

          this._viewRightOrientation.getValue = () => this._nativePoseState[Pose$1.VIEW_RIGHT].orientation;

          this._headMiddlePosition = new InputSourcePosition();

          this._headMiddlePosition.getValue = () => this._nativePoseState[Pose$1.HEAD_MIDDLE].position;

          this._headMiddleOrientation = new InputSourceOrientation();

          this._headMiddleOrientation.getValue = () => this._nativePoseState[Pose$1.HEAD_MIDDLE].orientation;
        }

      }

      var Pose$2;

      (function (Pose) {
        Pose[Pose["AR_MOBILE"] = 0] = "AR_MOBILE";
      })(Pose$2 || (Pose$2 = {}));

      class HandheldInputDevice {
        get handheldPosition() {
          return this._handheldPosition;
        }

        get handheldOrientation() {
          return this._handheldOrientation;
        }

        constructor() {
          this._eventTarget = new EventTarget();
          this._nativePoseState = {
            [Pose$2.AR_MOBILE]: {
              position: Vec3.ZERO,
              orientation: Quat.IDENTITY
            }
          };

          this._initInputSource();

          this._registerEvent();
        }

        _registerEvent() {
          jsb.onHandheldPoseInput = infoList => {
            for (let i = 0; i < infoList.length; ++i) {
              const info = infoList[i];

              this._updateNativePoseState(info);
            }

            this._eventTarget.emit(InputEventType.HANDHELD_POSE_INPUT, new EventHandheld(InputEventType.HANDHELD_POSE_INPUT, this));
          };
        }

        _on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        }

        _updateNativePoseState(info) {
          switch (info.code) {
            case 7:
              this._nativePoseState[Pose$2.AR_MOBILE] = {
                position: new Vec3(info.x, info.y, info.z),
                orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
              };
              break;
          }
        }

        _initInputSource() {
          this._handheldPosition = new InputSourcePosition();

          this._handheldPosition.getValue = () => this._nativePoseState[Pose$2.AR_MOBILE].position;

          this._handheldOrientation = new InputSourceOrientation();

          this._handheldOrientation.getValue = () => this._nativePoseState[Pose$2.AR_MOBILE].orientation;
        }

      }

      const nativeKeyCode2KeyCode = {
        12: KeyCode.NUM_LOCK,
        10048: KeyCode.NUM_0,
        10049: KeyCode.NUM_1,
        10050: KeyCode.NUM_2,
        10051: KeyCode.NUM_3,
        10052: KeyCode.NUM_4,
        10053: KeyCode.NUM_5,
        10054: KeyCode.NUM_6,
        10055: KeyCode.NUM_7,
        10056: KeyCode.NUM_8,
        10057: KeyCode.NUM_9,
        20013: KeyCode.NUM_ENTER,
        20016: KeyCode.SHIFT_RIGHT,
        20017: KeyCode.CTRL_RIGHT,
        20018: KeyCode.ALT_RIGHT
      };

      function getKeyCode(keyCode) {
        return nativeKeyCode2KeyCode[keyCode] || keyCode;
      }

      class KeyboardInputSource {
        constructor() {
          this._eventTarget = new EventTarget();
          this._keyStateMap = {};
          this._handleKeyboardDown = void 0;
          this._handleKeyboardUp = void 0;

          this._handleKeyboardDown = event => {
            const keyCode = getKeyCode(event.keyCode);

            if (!this._keyStateMap[keyCode]) {
              const eventKeyDown = this._getInputEvent(event, InputEventType.KEY_DOWN);

              this._eventTarget.emit(InputEventType.KEY_DOWN, eventKeyDown);
            } else {
              const eventKeyPressing = this._getInputEvent(event, InputEventType.KEY_PRESSING);

              this._eventTarget.emit(InputEventType.KEY_PRESSING, eventKeyPressing);
            }

            this._keyStateMap[keyCode] = true;
          };

          this._handleKeyboardUp = event => {
            const keyCode = getKeyCode(event.keyCode);

            const eventKeyUp = this._getInputEvent(event, InputEventType.KEY_UP);

            this._keyStateMap[keyCode] = false;

            this._eventTarget.emit(InputEventType.KEY_UP, eventKeyUp);
          };

          this._registerEvent();
        }

        dispatchKeyboardDownEvent(nativeKeyboardEvent) {
          this._handleKeyboardDown(nativeKeyboardEvent);
        }

        dispatchKeyboardUpEvent(nativeKeyboardEvent) {
          this._handleKeyboardUp(nativeKeyboardEvent);
        }

        _registerEvent() {
          jsb.onKeyDown = this._handleKeyboardDown;
          jsb.onKeyUp = this._handleKeyboardUp;
        }

        _getInputEvent(event, eventType) {
          const keyCode = getKeyCode(event.keyCode);
          const eventKeyboard = new EventKeyboard(keyCode, eventType);
          eventKeyboard.windowId = event.windowId;
          return eventKeyboard;
        }

        on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        }

      }

      class MouseInputSource {
        constructor() {
          this._eventTarget = new EventTarget();
          this._preMousePos = new Vec2();
          this._isPressed = false;
          this._windowManager = void 0;
          this._pointLocked = false;
          this._handleMouseDown = void 0;
          this._handleMouseMove = void 0;
          this._handleMouseUp = void 0;
          this._boundedHandleMouseWheel = void 0;
          this._handleMouseDown = this._createCallback(InputEventType.MOUSE_DOWN);
          this._handleMouseMove = this._createCallback(InputEventType.MOUSE_MOVE);
          this._handleMouseUp = this._createCallback(InputEventType.MOUSE_UP);
          this._boundedHandleMouseWheel = this._handleMouseWheel.bind(this);

          this._registerEvent();

          this._windowManager = jsb.ISystemWindowManager.getInstance();
        }

        dispatchMouseDownEvent(nativeMouseEvent) {
          this._handleMouseDown(nativeMouseEvent);
        }

        dispatchMouseMoveEvent(nativeMouseEvent) {
          this._handleMouseMove(nativeMouseEvent);
        }

        dispatchMouseUpEvent(nativeMouseEvent) {
          this._handleMouseUp(nativeMouseEvent);
        }

        dispatchScrollEvent(nativeMouseEvent) {
          this._boundedHandleMouseWheel(nativeMouseEvent);
        }

        _getLocation(event) {
          const window = this._windowManager.getWindow(event.windowId);

          const windowSize = window.getViewSize();
          const dpr = screenAdapter.devicePixelRatio;
          const x = event.x * dpr;
          const y = windowSize.height - event.y * dpr;
          return new Vec2(x, y);
        }

        _registerEvent() {
          jsb.onMouseDown = this._handleMouseDown;
          jsb.onMouseMove = this._handleMouseMove;
          jsb.onMouseUp = this._handleMouseUp;
          jsb.onMouseWheel = this._boundedHandleMouseWheel;

          jsb.onPointerlockChange = value => {
            this._pointLocked = value;
          };
        }

        _createCallback(eventType) {
          return mouseEvent => {
            const location = this._getLocation(mouseEvent);

            let button = mouseEvent.button;

            switch (eventType) {
              case InputEventType.MOUSE_DOWN:
                this._isPressed = true;
                break;

              case InputEventType.MOUSE_UP:
                this._isPressed = false;
                break;

              case InputEventType.MOUSE_MOVE:
                if (!this._isPressed) {
                  button = EventMouse.BUTTON_MISSING;
                }

                break;
            }

            const eventMouse = new EventMouse(eventType, false, this._preMousePos, mouseEvent.windowId);
            eventMouse.setLocation(location.x, location.y);
            eventMouse.setButton(button);
            const dpr = screenAdapter.devicePixelRatio;
            eventMouse.movementX = typeof mouseEvent.xDelta === 'undefined' ? 0 : mouseEvent.xDelta * dpr;
            eventMouse.movementY = typeof mouseEvent.yDelta === 'undefined' ? 0 : mouseEvent.yDelta * dpr;

            this._preMousePos.set(location.x, location.y);

            this._eventTarget.emit(eventType, eventMouse);
          };
        }

        _handleMouseWheel(mouseEvent) {
          const eventType = InputEventType.MOUSE_WHEEL;

          const location = this._getLocation(mouseEvent);

          const button = mouseEvent.button;
          const eventMouse = new EventMouse(eventType, false, this._preMousePos, mouseEvent.windowId);
          eventMouse.setLocation(location.x, location.y);
          eventMouse.setButton(button);
          eventMouse.movementX = location.x - this._preMousePos.x;
          eventMouse.movementY = this._preMousePos.y - location.y;
          const matchStandardFactor = 120;
          eventMouse.setScrollData(mouseEvent.wheelDeltaX * matchStandardFactor, mouseEvent.wheelDeltaY * matchStandardFactor);

          this._preMousePos.set(location.x, location.y);

          this._eventTarget.emit(eventType, eventMouse);
        }

        on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        }

      }

      const tempVec2 = new Vec2();

      class TouchManager {
        constructor() {
          this._touchMap = void 0;
          this._maxTouches = 8;
          this._touchMap = new Map();
        }

        _cloneTouch(touch) {
          const touchID = touch.getID();
          touch.getStartLocation(tempVec2);
          const clonedTouch = new Touch(tempVec2.x, tempVec2.y, touchID);
          touch.getLocation(tempVec2);
          clonedTouch.setPoint(tempVec2.x, tempVec2.y);
          touch.getPreviousLocation(tempVec2);
          clonedTouch.setPrevPoint(tempVec2);
          return clonedTouch;
        }

        _createTouch(touchID, x, y) {
          if (this._touchMap.has(touchID)) {
            console.log('Cannot create the same touch object.');
            return undefined;
          }

          const checkResult = this._checkTouchMapSizeMoreThanMax(touchID);

          if (checkResult) {
            console.log('The touches is more than MAX_TOUCHES.');
            return undefined;
          }

          const touch = new Touch(x, y, touchID);

          this._touchMap.set(touchID, touch);

          this._updateTouch(touch, x, y);

          return this._cloneTouch(touch);
        }

        releaseTouch(touchID) {
          if (!this._touchMap.has(touchID)) {
            return;
          }

          this._touchMap.delete(touchID);
        }

        getTouch(touchID, x, y) {
          let touch = this._touchMap.get(touchID);

          if (!touch) {
            touch = this._createTouch(touchID, x, y);
          } else {
            this._updateTouch(touch, x, y);
          }

          return touch ? this._cloneTouch(touch) : undefined;
        }

        getAllTouches() {
          const touches = [];

          this._touchMap.forEach(touch => {
            if (touch) {
              const clonedTouch = this._cloneTouch(touch);

              touches.push(clonedTouch);
            }
          });

          return touches;
        }

        _updateTouch(touch, x, y) {
          touch.getLocation(tempVec2);
          touch.setPrevPoint(tempVec2);
          touch.setPoint(x, y);
        }

        _checkTouchMapSizeMoreThanMax(touchID) {
          if (this._touchMap.has(touchID)) {
            return false;
          }

          const maxSize = macro.ENABLE_MULTI_TOUCH ? this._maxTouches : 1;

          if (this._touchMap.size < maxSize) {
            return false;
          }

          const now = performance.now();

          this._touchMap.forEach(touch => {
            if (now - touch.lastModified > macro.TOUCH_TIMEOUT) {
              console.log(`The touches is more than MAX_TOUCHES, release touch id ${touch.getID()}.`);
              this.releaseTouch(touch.getID());
            }
          });

          return maxSize >= this._touchMap.size;
        }

      }

      const touchManager = new TouchManager();

      class TouchInputSource {
        constructor() {
          this._eventTarget = new EventTarget();
          this._windowManager = void 0;

          this._registerEvent();

          this._windowManager = jsb.ISystemWindowManager.getInstance();
        }

        _registerEvent() {
          jsb.onTouchStart = this._createCallback(InputEventType.TOUCH_START);
          jsb.onTouchMove = this._createCallback(InputEventType.TOUCH_MOVE);
          jsb.onTouchEnd = this._createCallback(InputEventType.TOUCH_END);
          jsb.onTouchCancel = this._createCallback(InputEventType.TOUCH_CANCEL);
        }

        _createCallback(eventType) {
          return (changedTouches, windowId) => {
            const handleTouches = [];
            const length = changedTouches.length;

            const windowSize = this._windowManager.getWindow(windowId).getViewSize();

            for (let i = 0; i < length; ++i) {
              const changedTouch = changedTouches[i];
              const touchID = changedTouch.identifier;

              if (touchID === null) {
                continue;
              }

              const location = this._getLocation(changedTouch, windowSize);

              const touch = touchManager.getTouch(touchID, location.x, location.y);

              if (!touch) {
                continue;
              }

              if (eventType === InputEventType.TOUCH_END || eventType === InputEventType.TOUCH_CANCEL) {
                touchManager.releaseTouch(touchID);
              }

              handleTouches.push(touch);
            }

            if (handleTouches.length > 0) {
              const eventTouch = new EventTouch(handleTouches, false, eventType, macro.ENABLE_MULTI_TOUCH ? touchManager.getAllTouches() : handleTouches);
              eventTouch.windowId = windowId;

              this._eventTarget.emit(eventType, eventTouch);
            }
          };
        }

        _getLocation(touch, windowSize) {
          const dpr = screenAdapter.devicePixelRatio;
          const x = touch.clientX * dpr;
          const y = windowSize.height - touch.clientY * dpr;
          return new Vec2(x, y);
        }

        on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        }

      }

      let EventDispatcherPriority;

      (function (EventDispatcherPriority) {
        EventDispatcherPriority[EventDispatcherPriority["GLOBAL"] = 0] = "GLOBAL";
        EventDispatcherPriority[EventDispatcherPriority["UI"] = 1] = "UI";
      })(EventDispatcherPriority || (EventDispatcherPriority = exports('de', {})));

      class InputEventDispatcher {
        constructor(inputEventTarget) {
          this.priority = EventDispatcherPriority.GLOBAL;
          this._inputEventTarget = void 0;
          this._inputEventTarget = inputEventTarget;
        }

        dispatchEvent(event) {
          this._inputEventTarget.emit(event.type, event);

          return true;
        }

      }

      const pointerEventTypeMap = {
        [InputEventType.MOUSE_DOWN]: InputEventType.TOUCH_START,
        [InputEventType.MOUSE_MOVE]: InputEventType.TOUCH_MOVE,
        [InputEventType.MOUSE_UP]: InputEventType.TOUCH_END
      };
      class Input {
        constructor() {
          this._dispatchImmediately = !NATIVE;
          this._eventTarget = new EventTarget();
          this._touchInput = new TouchInputSource();
          this._mouseInput = new MouseInputSource();
          this._keyboardInput = new KeyboardInputSource();
          this._accelerometerInput = new AccelerometerInputSource();
          this._handleInput = new HandleInputDevice();
          this._hmdInput = new HMDInputDevice();
          this._handheldInput = new HandheldInputDevice();
          this._eventTouchList = [];
          this._eventMouseList = [];
          this._eventKeyboardList = [];
          this._eventAccelerationList = [];
          this._eventGamepadList = [];
          this._eventHandleList = [];
          this._eventHMDList = [];
          this._eventHandheldList = [];
          this._needSimulateTouchMoveEvent = false;
          this._inputEventDispatcher = void 0;
          this._eventDispatcherList = [];

          this._registerEvent();

          this._inputEventDispatcher = new InputEventDispatcher(this._eventTarget);

          this._registerEventDispatcher(this._inputEventDispatcher);

          GamepadInputDevice._init();
        }

        _dispatchMouseDownEvent(nativeMouseEvent) {
          var _this$_mouseInput$dis, _this$_mouseInput;

          (_this$_mouseInput$dis = (_this$_mouseInput = this._mouseInput).dispatchMouseDownEvent) === null || _this$_mouseInput$dis === void 0 ? void 0 : _this$_mouseInput$dis.call(_this$_mouseInput, nativeMouseEvent);
        }

        _dispatchMouseMoveEvent(nativeMouseEvent) {
          var _this$_mouseInput$dis2, _this$_mouseInput2;

          (_this$_mouseInput$dis2 = (_this$_mouseInput2 = this._mouseInput).dispatchMouseMoveEvent) === null || _this$_mouseInput$dis2 === void 0 ? void 0 : _this$_mouseInput$dis2.call(_this$_mouseInput2, nativeMouseEvent);
        }

        _dispatchMouseUpEvent(nativeMouseEvent) {
          var _this$_mouseInput$dis3, _this$_mouseInput3;

          (_this$_mouseInput$dis3 = (_this$_mouseInput3 = this._mouseInput).dispatchMouseUpEvent) === null || _this$_mouseInput$dis3 === void 0 ? void 0 : _this$_mouseInput$dis3.call(_this$_mouseInput3, nativeMouseEvent);
        }

        _dispatchMouseScrollEvent(nativeMouseEvent) {
          var _this$_mouseInput$dis4, _this$_mouseInput4;

          (_this$_mouseInput$dis4 = (_this$_mouseInput4 = this._mouseInput).dispatchScrollEvent) === null || _this$_mouseInput$dis4 === void 0 ? void 0 : _this$_mouseInput$dis4.call(_this$_mouseInput4, nativeMouseEvent);
        }

        _dispatchKeyboardDownEvent(nativeKeyboardEvent) {
          var _this$_keyboardInput$, _this$_keyboardInput;

          (_this$_keyboardInput$ = (_this$_keyboardInput = this._keyboardInput).dispatchKeyboardDownEvent) === null || _this$_keyboardInput$ === void 0 ? void 0 : _this$_keyboardInput$.call(_this$_keyboardInput, nativeKeyboardEvent);
        }

        _dispatchKeyboardUpEvent(nativeKeyboardEvent) {
          var _this$_keyboardInput$2, _this$_keyboardInput2;

          (_this$_keyboardInput$2 = (_this$_keyboardInput2 = this._keyboardInput).dispatchKeyboardUpEvent) === null || _this$_keyboardInput$2 === void 0 ? void 0 : _this$_keyboardInput$2.call(_this$_keyboardInput2, nativeKeyboardEvent);
        }

        on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);

          return callback;
        }

        once(eventType, callback, target) {
          this._eventTarget.once(eventType, callback, target);

          return callback;
        }

        off(eventType, callback, target) {

          this._eventTarget.off(eventType, callback, target);
        }

        setAccelerometerEnabled(isEnable) {

          if (isEnable) {
            this._accelerometerInput.start();
          } else {
            this._accelerometerInput.stop();
          }
        }

        setAccelerometerInterval(intervalInMileSeconds) {

          this._accelerometerInput.setInterval(intervalInMileSeconds);
        }

        _simulateEventTouch(eventMouse) {
          const eventType = pointerEventTypeMap[eventMouse.type];
          const touchID = 0;
          const touch = touchManager.getTouch(touchID, eventMouse.getLocationX(), eventMouse.getLocationY());

          if (!touch) {
            return;
          }

          const changedTouches = [touch];
          const eventTouch = new EventTouch(changedTouches, false, eventType, eventType === InputEventType.TOUCH_END ? [] : changedTouches);
          eventTouch.windowId = eventMouse.windowId;

          if (eventType === InputEventType.TOUCH_END) {
            touchManager.releaseTouch(touchID);
          }

          this._dispatchOrPushEventTouch(eventTouch, this._eventTouchList);
        }

        _registerEventDispatcher(eventDispatcher) {
          this._eventDispatcherList.push(eventDispatcher);

          this._eventDispatcherList.sort((a, b) => b.priority - a.priority);
        }

        _emitEvent(event) {
          const length = this._eventDispatcherList.length;

          for (let i = 0; i < length; ++i) {
            const dispatcher = this._eventDispatcherList[i];

            try {
              if (!dispatcher.dispatchEvent(event)) {
                break;
              }
            } catch (e) {
              console.error(`Error occurs in an event listener: ${event.type}`);
              console.error(e);
            }
          }
        }

        _registerEvent() {
          if (sys.hasFeature(sys.Feature.INPUT_TOUCH)) {
            const eventTouchList = this._eventTouchList;

            this._touchInput.on(InputEventType.TOUCH_START, event => {
              this._dispatchOrPushEventTouch(event, eventTouchList);
            });

            this._touchInput.on(InputEventType.TOUCH_MOVE, event => {
              this._dispatchOrPushEventTouch(event, eventTouchList);
            });

            this._touchInput.on(InputEventType.TOUCH_END, event => {
              this._dispatchOrPushEventTouch(event, eventTouchList);
            });

            this._touchInput.on(InputEventType.TOUCH_CANCEL, event => {
              this._dispatchOrPushEventTouch(event, eventTouchList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_MOUSE)) {
            const eventMouseList = this._eventMouseList;

            this._mouseInput.on(InputEventType.MOUSE_DOWN, event => {
              this._needSimulateTouchMoveEvent = true;

              this._simulateEventTouch(event);

              this._dispatchOrPushEvent(event, eventMouseList);
            });

            this._mouseInput.on(InputEventType.MOUSE_MOVE, event => {
              if (this._needSimulateTouchMoveEvent) {
                this._simulateEventTouch(event);
              }

              this._dispatchOrPushEvent(event, eventMouseList);
            });

            this._mouseInput.on(InputEventType.MOUSE_UP, event => {
              this._needSimulateTouchMoveEvent = false;

              this._simulateEventTouch(event);

              this._dispatchOrPushEvent(event, eventMouseList);
            });

            this._mouseInput.on(InputEventType.MOUSE_WHEEL, event => {
              this._dispatchOrPushEvent(event, eventMouseList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_KEYBOARD)) {
            const eventKeyboardList = this._eventKeyboardList;

            this._keyboardInput.on(InputEventType.KEY_DOWN, event => {
              this._dispatchOrPushEvent(event, eventKeyboardList);
            });

            this._keyboardInput.on(InputEventType.KEY_PRESSING, event => {
              this._dispatchOrPushEvent(event, eventKeyboardList);
            });

            this._keyboardInput.on(InputEventType.KEY_UP, event => {
              this._dispatchOrPushEvent(event, eventKeyboardList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_ACCELEROMETER)) {
            const eventAccelerationList = this._eventAccelerationList;

            this._accelerometerInput.on(InputEventType.DEVICEMOTION, event => {
              this._dispatchOrPushEvent(event, eventAccelerationList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_GAMEPAD)) {
            const eventGamepadList = this._eventGamepadList;

            GamepadInputDevice._on(InputEventType.GAMEPAD_CHANGE, event => {
              this._dispatchOrPushEvent(event, eventGamepadList);
            });

            GamepadInputDevice._on(InputEventType.GAMEPAD_INPUT, event => {
              this._dispatchOrPushEvent(event, eventGamepadList);
            });

            GamepadInputDevice._on(InputEventType.HANDLE_POSE_INPUT, event => {
              this._dispatchOrPushEvent(event, eventGamepadList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_HANDLE)) {
            const eventHandleList = this._eventHandleList;

            this._handleInput._on(InputEventType.HANDLE_INPUT, event => {
              this._dispatchOrPushEvent(event, eventHandleList);
            });

            this._handleInput._on(InputEventType.HANDLE_POSE_INPUT, event => {
              this._dispatchOrPushEvent(event, eventHandleList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_HMD)) {
            const eventHMDList = this._eventHMDList;

            this._hmdInput._on(InputEventType.HMD_POSE_INPUT, event => {
              this._dispatchOrPushEvent(event, eventHMDList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_HANDHELD)) {
            const eventHandheldList = this._eventHandheldList;

            this._handheldInput._on(InputEventType.HANDHELD_POSE_INPUT, event => {
              this._dispatchOrPushEvent(event, eventHandheldList);
            });
          }
        }

        _clearEvents() {
          this._eventMouseList.length = 0;
          this._eventTouchList.length = 0;
          this._eventKeyboardList.length = 0;
          this._eventAccelerationList.length = 0;
          this._eventGamepadList.length = 0;
          this._eventHandleList.length = 0;
          this._eventHMDList.length = 0;
        }

        _dispatchOrPushEvent(event, eventList) {
          if (this._dispatchImmediately) {
            this._emitEvent(event);
          } else {
            eventList.push(event);
          }
        }

        _dispatchOrPushEventTouch(eventTouch, touchEventList) {
          if (this._dispatchImmediately) {
            const touches = eventTouch.getTouches();
            const touchesLength = touches.length;

            for (let i = 0; i < touchesLength; ++i) {
              eventTouch.touch = touches[i];
              eventTouch.propagationStopped = eventTouch.propagationImmediateStopped = false;

              this._emitEvent(eventTouch);
            }
          } else {
            touchEventList.push(eventTouch);
          }
        }

        _frameDispatchEvents() {
          const eventHMDList = this._eventHMDList;

          for (let i = 0, length = eventHMDList.length; i < length; ++i) {
            const eventHMD = eventHMDList[i];

            this._emitEvent(eventHMD);
          }

          const eventHandheldList = this._eventHandheldList;

          for (let i = 0, length = eventHandheldList.length; i < length; ++i) {
            const eventHandheld = eventHandheldList[i];

            this._emitEvent(eventHandheld);
          }

          const eventMouseList = this._eventMouseList;

          for (let i = 0, length = eventMouseList.length; i < length; ++i) {
            const eventMouse = eventMouseList[i];

            this._emitEvent(eventMouse);
          }

          const eventTouchList = this._eventTouchList;

          for (let i = 0, length = eventTouchList.length; i < length; ++i) {
            const eventTouch = eventTouchList[i];
            const touches = eventTouch.getTouches();
            const touchesLength = touches.length;

            for (let j = 0; j < touchesLength; ++j) {
              eventTouch.touch = touches[j];
              eventTouch.propagationStopped = eventTouch.propagationImmediateStopped = false;

              this._emitEvent(eventTouch);
            }
          }

          const eventKeyboardList = this._eventKeyboardList;

          for (let i = 0, length = eventKeyboardList.length; i < length; ++i) {
            const eventKeyboard = eventKeyboardList[i];

            this._emitEvent(eventKeyboard);
          }

          const eventAccelerationList = this._eventAccelerationList;

          for (let i = 0, length = eventAccelerationList.length; i < length; ++i) {
            const eventAcceleration = eventAccelerationList[i];

            this._emitEvent(eventAcceleration);
          }

          const eventGamepadList = this._eventGamepadList;

          for (let i = 0, length = eventGamepadList.length; i < length; ++i) {
            const eventGamepad = eventGamepadList[i];

            this._emitEvent(eventGamepad);
          }

          const eventHandleList = this._eventHandleList;

          for (let i = 0, length = eventHandleList.length; i < length; ++i) {
            const eventHandle = eventHandleList[i];

            this._emitEvent(eventHandle);
          }

          this._clearEvents();
        }

      } exports('dd', Input);
      Input.EventType = InputEventType;
      const input = exports('df', new Input());

      class SystemEvent extends EventTarget {
        constructor() {
          super();
          input.on(InputEventType.MOUSE_DOWN, e => {
            this.emit(SystemEventType.MOUSE_DOWN, e);
          });
          input.on(InputEventType.MOUSE_MOVE, e => {
            this.emit(SystemEventType.MOUSE_MOVE, e);
          });
          input.on(InputEventType.MOUSE_UP, e => {
            this.emit(SystemEventType.MOUSE_UP, e);
          });
          input.on(InputEventType.MOUSE_WHEEL, e => {
            this.emit(SystemEventType.MOUSE_WHEEL, e);
          });
          input.on(InputEventType.TOUCH_START, e => {
            this.emit(SystemEventType.TOUCH_START, e.touch, e);
          });
          input.on(InputEventType.TOUCH_MOVE, e => {
            this.emit(SystemEventType.TOUCH_MOVE, e.touch, e);
          });
          input.on(InputEventType.TOUCH_END, e => {
            this.emit(SystemEventType.TOUCH_END, e.touch, e);
          });
          input.on(InputEventType.TOUCH_CANCEL, e => {
            this.emit(SystemEventType.TOUCH_CANCEL, e.touch, e);
          });
          input.on(InputEventType.KEY_DOWN, e => {
            this.emit(SystemEventType.KEY_DOWN, e);
          });
          input.on(InputEventType.KEY_PRESSING, e => {
            this.emit(SystemEventType.KEY_DOWN, e);
          });
          input.on(InputEventType.KEY_UP, e => {
            this.emit(SystemEventType.KEY_UP, e);
          });
          input.on(InputEventType.DEVICEMOTION, e => {
            this.emit(SystemEventType.DEVICEMOTION, e);
          });
        }

        setAccelerometerEnabled(isEnabled) {
          input.setAccelerometerEnabled(isEnabled);
        }

        setAccelerometerInterval(interval) {
          input.setAccelerometerInterval(interval);
        }

        on(type, callback, target, once) {
          super.on(type, callback, target, once);
          return callback;
        }

        off(type, callback, target) {
          super.off(type, callback, target);
        }

      } exports('gY', SystemEvent);
      SystemEvent.EventType = SystemEventType;
      legacyCC.SystemEvent = SystemEvent;
      const systemEvent = exports('gX', new SystemEvent());
      legacyCC.systemEvent = systemEvent;

      replaceProperty(SystemEventType, 'Node.EventType', [{
        name: 'POSITION_PART',
        newName: 'TRANSFORM_CHANGED'
      }, {
        name: 'ROTATION_PART',
        newName: 'TRANSFORM_CHANGED'
      }, {
        name: 'SCALE_PART',
        newName: 'TRANSFORM_CHANGED'
      }]);
      replaceProperty(Event, 'Event', [{
        name: 'ACCELERATION',
        newName: 'DEVICEMOTION',
        target: SystemEvent.EventType,
        targetName: 'SystemEvent.EventType'
      }]);
      markAsWarning(Event, 'Event', [{
        name: 'TOUCH',
        suggest: 'please use SystemEvent.EventType.TOUCH_START, SystemEvent.EventType.TOUCH_MOVE, SystemEvent.EventType.TOUCH_END and SystemEvent.EventType.TOUCH_CANCEL instead'
      }, {
        name: 'MOUSE',
        suggest: 'please use SystemEvent.EventType.MOUSE_DOWN, SystemEvent.EventType.MOUSE_MOVE, SystemEvent.EventType.MOUSE_UP, SystemEvent.EventType.MOUSE_WHEEL, Node.EventType.MOUSE_ENTER and Node.EventType.MOUSE_LEAVE instead'
      }, {
        name: 'KEYBOARD',
        suggest: 'please use SystemEvent.EventType.KEY_DOWN and SystemEvent.EventType.KEY_UP instead'
      }]);
      replaceProperty(EventMouse, 'EventMouse', ['DOWN', 'UP', 'MOVE'].map(item => ({
        name: item,
        newName: `MOUSE_${item}`,
        target: SystemEvent.EventType,
        targetName: 'SystemEvent.EventType'
      })));
      replaceProperty(EventMouse, 'EventMouse', [{
        name: 'SCROLL',
        newName: 'MOUSE_WHEEL',
        target: SystemEvent.EventType,
        targetName: 'SystemEvent.EventType'
      }]);
      markAsWarning(EventMouse.prototype, 'EventMouse.prototype', [{
        name: 'eventType',
        suggest: 'please use EventMouse.prototype.type instead'
      }]);
      replaceProperty(EventTouch, 'EventTouch', [{
        name: 'BEGAN',
        newName: 'TOUCH_START',
        target: SystemEvent.EventType,
        targetName: 'SystemEvent.EventType'
      }]);
      replaceProperty(EventTouch, 'EventTouch', [{
        name: 'MOVED',
        newName: 'TOUCH_MOVE',
        target: SystemEvent.EventType,
        targetName: 'SystemEvent.EventType'
      }]);
      replaceProperty(EventTouch, 'EventTouch', [{
        name: 'ENDED',
        newName: 'TOUCH_END',
        target: SystemEvent.EventType,
        targetName: 'SystemEvent.EventType'
      }]);
      replaceProperty(EventTouch, 'EventTouch', [{
        name: 'CANCELLED',
        newName: 'TOUCH_CANCEL',
        target: SystemEvent.EventType,
        targetName: 'SystemEvent.EventType'
      }]);
      markAsWarning(EventTouch.prototype, 'EventTouch.prototype', [{
        name: 'getEventCode',
        suggest: 'please use EventTouch.prototype.type instead'
      }]);
      replaceProperty(EventTouch.prototype, 'EventTouch.prototype', [{
        name: 'getUILocationInView',
        newName: 'getLocationInView',
        target: EventTouch,
        targetName: 'EventTouch'
      }]);
      markAsWarning(macro.KEY, 'macro.KEY', ['back', 'menu', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '*', '+', '-', '/', ';', '=', ',', '.', '[', ']', 'dpadLeft', 'dpadRight', 'dpadUp', 'dpadDown', 'dpadCenter'].map(item => ({
        name: item
      })));
      markAsWarning(macro.KEY, 'macro.KEY', [{
        name: 'shift',
        suggest: 'please use KeyCode.SHIFT_LEFT instead'
      }]);
      markAsWarning(macro.KEY, 'macro.KEY', [{
        name: 'ctrl',
        suggest: 'please use KeyCode.CTRL_LEFT instead'
      }]);
      markAsWarning(macro.KEY, 'macro.KEY', [{
        name: 'alt',
        suggest: 'please use KeyCode.ALT_LEFT instead'
      }]);
      markAsWarning(macro, 'macro', [{
        name: 'KEY',
        suggest: 'please use KeyCode instead'
      }]);

      const getPhaseID = (() => {
        const phases = new Map();
        let phaseNum = 0;
        return phaseName => {
          if (typeof phaseName === 'number') {
            return phaseName;
          }

          if (!phases.has(phaseName)) {
            phases.set(phaseName, 1 << phaseNum);
            phaseNum++;
          }

          return phases.get(phaseName);
        };
      })();

      const layerList = {
        NONE: 0,
        IGNORE_RAYCAST: 1 << 20,
        GIZMOS: 1 << 21,
        EDITOR: 1 << 22,
        UI_3D: 1 << 23,
        SCENE_GIZMO: 1 << 24,
        UI_2D: 1 << 25,
        PROFILER: 1 << 28,
        DEFAULT: 1 << 30,
        ALL: 0xffffffff
      };
      class Layers {
        static init() {
          const userLayers = settings.querySettings(Settings.Category.ENGINE, 'customLayers');
          if (!userLayers) return;

          for (let i = 0; i < userLayers.length; i++) {
            const layer = userLayers[i];
            Layers.addLayer(layer.name, layer.bit);
          }
        }

        static makeMaskInclude(includes) {
          let mask = 0;

          for (const inc of includes) {
            mask |= inc;
          }

          return mask;
        }

        static makeMaskExclude(excludes) {
          return ~Layers.makeMaskInclude(excludes);
        }

        static addLayer(name, bitNum) {
          if (bitNum === undefined) {
            console.warn('bitNum can\'t be undefined');
            return;
          }

          if (bitNum > 19 || bitNum < 0) {
            console.warn('maximum layers reached.');
            return;
          }

          const val = 1 << bitNum;
          assertIsTrue(!Layers.Enum[name], getError(2104, name));
          Layers.Enum[name] = val;
          value(Layers.Enum, String(val), name);
          Layers.BitMask[name] = val;
          value(Layers.BitMask, String(val), name);
          BitMask.update(Layers.BitMask);
          Enum.update(Layers.Enum);
        }

        static deleteLayer(bitNum) {
          if (bitNum > 19 || bitNum < 0) {
            console.warn('do not change buildin layers.');
            return;
          }

          const val = 1 << bitNum;
          delete Layers.Enum[Layers.Enum[val]];
          delete Layers.Enum[val];
          delete Layers.BitMask[Layers.BitMask[val]];
          delete Layers.BitMask[val];
          BitMask.update(Layers.BitMask);
          Enum.update(Layers.Enum);
        }

        static nameToLayer(name) {
          if (name === undefined) {
            console.warn('name can\'t be undefined');
            return -1;
          }

          return log2(Layers.Enum[name]);
        }

        static layerToName(bitNum) {
          if (bitNum > 31 || bitNum < 0) {
            console.warn('Unable to access unknown layer.');
            return '';
          }

          return Layers.Enum[1 << bitNum];
        }

      } exports('cP', Layers);
      Layers.Enum = Enum(layerList);
      Layers.BitMask = BitMask({ ...layerList
      });
      legacyCC.Layers = Layers;

      const PIPELINE_FLOW_MAIN = 'MainFlow';
      const PIPELINE_FLOW_FORWARD = 'ForwardFlow';
      const PIPELINE_FLOW_SHADOW = 'ShadowFlow';
      const PIPELINE_FLOW_SMAA = 'SMAAFlow';
      const PIPELINE_FLOW_TONEMAP = 'ToneMapFlow';
      let RenderPassStage;

      (function (RenderPassStage) {
        RenderPassStage[RenderPassStage["DEFAULT"] = 100] = "DEFAULT";
        RenderPassStage[RenderPassStage["UI"] = 200] = "UI";
      })(RenderPassStage || (RenderPassStage = {}));

      legacyCC.RenderPassStage = RenderPassStage;
      let RenderPriority;

      (function (RenderPriority) {
        RenderPriority[RenderPriority["MIN"] = 0] = "MIN";
        RenderPriority[RenderPriority["MAX"] = 255] = "MAX";
        RenderPriority[RenderPriority["DEFAULT"] = 128] = "DEFAULT";
      })(RenderPriority || (RenderPriority = exports('d9', {})));

      const globalDescriptorSetLayout = {
        bindings: [],
        layouts: {}
      };
      const localDescriptorSetLayout = {
        bindings: [],
        layouts: {}
      };
      let PipelineGlobalBindings;

      (function (PipelineGlobalBindings) {
        PipelineGlobalBindings[PipelineGlobalBindings["UBO_GLOBAL"] = 0] = "UBO_GLOBAL";
        PipelineGlobalBindings[PipelineGlobalBindings["UBO_CAMERA"] = 1] = "UBO_CAMERA";
        PipelineGlobalBindings[PipelineGlobalBindings["UBO_SHADOW"] = 2] = "UBO_SHADOW";
        PipelineGlobalBindings[PipelineGlobalBindings["UBO_CSM"] = 3] = "UBO_CSM";
        PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_SHADOWMAP"] = 4] = "SAMPLER_SHADOWMAP";
        PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_ENVIRONMENT"] = 5] = "SAMPLER_ENVIRONMENT";
        PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_SPOT_SHADOW_MAP"] = 6] = "SAMPLER_SPOT_SHADOW_MAP";
        PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_DIFFUSEMAP"] = 7] = "SAMPLER_DIFFUSEMAP";
        PipelineGlobalBindings[PipelineGlobalBindings["COUNT"] = 8] = "COUNT";
      })(PipelineGlobalBindings || (PipelineGlobalBindings = {}));

      const GLOBAL_UBO_COUNT = PipelineGlobalBindings.SAMPLER_SHADOWMAP;
      const GLOBAL_SAMPLER_COUNT = PipelineGlobalBindings.COUNT - GLOBAL_UBO_COUNT;
      let ModelLocalBindings;

      (function (ModelLocalBindings) {
        ModelLocalBindings[ModelLocalBindings["UBO_LOCAL"] = 0] = "UBO_LOCAL";
        ModelLocalBindings[ModelLocalBindings["UBO_FORWARD_LIGHTS"] = 1] = "UBO_FORWARD_LIGHTS";
        ModelLocalBindings[ModelLocalBindings["UBO_SKINNING_ANIMATION"] = 2] = "UBO_SKINNING_ANIMATION";
        ModelLocalBindings[ModelLocalBindings["UBO_SKINNING_TEXTURE"] = 3] = "UBO_SKINNING_TEXTURE";
        ModelLocalBindings[ModelLocalBindings["UBO_MORPH"] = 4] = "UBO_MORPH";
        ModelLocalBindings[ModelLocalBindings["UBO_UI_LOCAL"] = 5] = "UBO_UI_LOCAL";
        ModelLocalBindings[ModelLocalBindings["UBO_SH"] = 6] = "UBO_SH";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_JOINTS"] = 7] = "SAMPLER_JOINTS";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_POSITION"] = 8] = "SAMPLER_MORPH_POSITION";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_NORMAL"] = 9] = "SAMPLER_MORPH_NORMAL";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_TANGENT"] = 10] = "SAMPLER_MORPH_TANGENT";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_LIGHTMAP"] = 11] = "SAMPLER_LIGHTMAP";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_SPRITE"] = 12] = "SAMPLER_SPRITE";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_REFLECTION"] = 13] = "SAMPLER_REFLECTION";
        ModelLocalBindings[ModelLocalBindings["STORAGE_REFLECTION"] = 14] = "STORAGE_REFLECTION";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_REFLECTION_PROBE_CUBE"] = 15] = "SAMPLER_REFLECTION_PROBE_CUBE";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_REFLECTION_PROBE_PLANAR"] = 16] = "SAMPLER_REFLECTION_PROBE_PLANAR";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_REFLECTION_PROBE_DATA_MAP"] = 17] = "SAMPLER_REFLECTION_PROBE_DATA_MAP";
        ModelLocalBindings[ModelLocalBindings["COUNT"] = 18] = "COUNT";
      })(ModelLocalBindings || (ModelLocalBindings = exports('d6', {})));

      const LOCAL_UBO_COUNT = ModelLocalBindings.SAMPLER_JOINTS;
      const LOCAL_SAMPLER_COUNT = ModelLocalBindings.STORAGE_REFLECTION - LOCAL_UBO_COUNT;
      const LOCAL_STORAGE_IMAGE_COUNT = ModelLocalBindings.COUNT - LOCAL_UBO_COUNT - LOCAL_SAMPLER_COUNT;
      let SetIndex;

      (function (SetIndex) {
        SetIndex[SetIndex["GLOBAL"] = 0] = "GLOBAL";
        SetIndex[SetIndex["MATERIAL"] = 1] = "MATERIAL";
        SetIndex[SetIndex["LOCAL"] = 2] = "LOCAL";
        SetIndex[SetIndex["COUNT"] = 3] = "COUNT";
      })(SetIndex || (SetIndex = {}));

      const bindingMappingInfo = new BindingMappingInfo([GLOBAL_UBO_COUNT, 0, LOCAL_UBO_COUNT, 0], [GLOBAL_SAMPLER_COUNT, 0, LOCAL_SAMPLER_COUNT, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, LOCAL_STORAGE_IMAGE_COUNT, 0], [0, 0, 0, 0], [0, 2, 1, 3]);
      class UBOGlobal {}
      UBOGlobal.TIME_OFFSET = 0;
      UBOGlobal.SCREEN_SIZE_OFFSET = UBOGlobal.TIME_OFFSET + 4;
      UBOGlobal.NATIVE_SIZE_OFFSET = UBOGlobal.SCREEN_SIZE_OFFSET + 4;
      UBOGlobal.PROBE_INFO_OFFSET = UBOGlobal.NATIVE_SIZE_OFFSET + 4;
      UBOGlobal.DEBUG_VIEW_MODE_OFFSET = UBOGlobal.PROBE_INFO_OFFSET + 4;
      UBOGlobal.COUNT = UBOGlobal.DEBUG_VIEW_MODE_OFFSET + 4;
      UBOGlobal.SIZE = UBOGlobal.COUNT * 4;
      UBOGlobal.NAME = 'CCGlobal';
      UBOGlobal.BINDING = PipelineGlobalBindings.UBO_GLOBAL;
      UBOGlobal.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOGlobal.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
      UBOGlobal.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOGlobal.BINDING, UBOGlobal.NAME, [new Uniform('cc_time', Type.FLOAT4, 1), new Uniform('cc_screenSize', Type.FLOAT4, 1), new Uniform('cc_nativeSize', Type.FLOAT4, 1), new Uniform('cc_probeInfo', Type.FLOAT4, 1), new Uniform('cc_debug_view_mode', Type.FLOAT4, 1)], 1);
      globalDescriptorSetLayout.layouts[UBOGlobal.NAME] = UBOGlobal.LAYOUT;
      globalDescriptorSetLayout.bindings[UBOGlobal.BINDING] = UBOGlobal.DESCRIPTOR;
      class UBOCamera {}
      UBOCamera.MAT_VIEW_OFFSET = 0;
      UBOCamera.MAT_VIEW_INV_OFFSET = UBOCamera.MAT_VIEW_OFFSET + 16;
      UBOCamera.MAT_PROJ_OFFSET = UBOCamera.MAT_VIEW_INV_OFFSET + 16;
      UBOCamera.MAT_PROJ_INV_OFFSET = UBOCamera.MAT_PROJ_OFFSET + 16;
      UBOCamera.MAT_VIEW_PROJ_OFFSET = UBOCamera.MAT_PROJ_INV_OFFSET + 16;
      UBOCamera.MAT_VIEW_PROJ_INV_OFFSET = UBOCamera.MAT_VIEW_PROJ_OFFSET + 16;
      UBOCamera.CAMERA_POS_OFFSET = UBOCamera.MAT_VIEW_PROJ_INV_OFFSET + 16;
      UBOCamera.SURFACE_TRANSFORM_OFFSET = UBOCamera.CAMERA_POS_OFFSET + 4;
      UBOCamera.SCREEN_SCALE_OFFSET = UBOCamera.SURFACE_TRANSFORM_OFFSET + 4;
      UBOCamera.EXPOSURE_OFFSET = UBOCamera.SCREEN_SCALE_OFFSET + 4;
      UBOCamera.MAIN_LIT_DIR_OFFSET = UBOCamera.EXPOSURE_OFFSET + 4;
      UBOCamera.MAIN_LIT_COLOR_OFFSET = UBOCamera.MAIN_LIT_DIR_OFFSET + 4;
      UBOCamera.AMBIENT_SKY_OFFSET = UBOCamera.MAIN_LIT_COLOR_OFFSET + 4;
      UBOCamera.AMBIENT_GROUND_OFFSET = UBOCamera.AMBIENT_SKY_OFFSET + 4;
      UBOCamera.GLOBAL_FOG_COLOR_OFFSET = UBOCamera.AMBIENT_GROUND_OFFSET + 4;
      UBOCamera.GLOBAL_FOG_BASE_OFFSET = UBOCamera.GLOBAL_FOG_COLOR_OFFSET + 4;
      UBOCamera.GLOBAL_FOG_ADD_OFFSET = UBOCamera.GLOBAL_FOG_BASE_OFFSET + 4;
      UBOCamera.NEAR_FAR_OFFSET = UBOCamera.GLOBAL_FOG_ADD_OFFSET + 4;
      UBOCamera.VIEW_PORT_OFFSET = UBOCamera.NEAR_FAR_OFFSET + 4;
      UBOCamera.COUNT = UBOCamera.VIEW_PORT_OFFSET + 4;
      UBOCamera.SIZE = UBOCamera.COUNT * 4;
      UBOCamera.NAME = 'CCCamera';
      UBOCamera.BINDING = PipelineGlobalBindings.UBO_CAMERA;
      UBOCamera.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOCamera.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
      UBOCamera.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOCamera.BINDING, UBOCamera.NAME, [new Uniform('cc_matView', Type.MAT4, 1), new Uniform('cc_matViewInv', Type.MAT4, 1), new Uniform('cc_matProj', Type.MAT4, 1), new Uniform('cc_matProjInv', Type.MAT4, 1), new Uniform('cc_matViewProj', Type.MAT4, 1), new Uniform('cc_matViewProjInv', Type.MAT4, 1), new Uniform('cc_cameraPos', Type.FLOAT4, 1), new Uniform('cc_surfaceTransform', Type.FLOAT4, 1), new Uniform('cc_screenScale', Type.FLOAT4, 1), new Uniform('cc_exposure', Type.FLOAT4, 1), new Uniform('cc_mainLitDir', Type.FLOAT4, 1), new Uniform('cc_mainLitColor', Type.FLOAT4, 1), new Uniform('cc_ambientSky', Type.FLOAT4, 1), new Uniform('cc_ambientGround', Type.FLOAT4, 1), new Uniform('cc_fogColor', Type.FLOAT4, 1), new Uniform('cc_fogBase', Type.FLOAT4, 1), new Uniform('cc_fogAdd', Type.FLOAT4, 1), new Uniform('cc_nearFar', Type.FLOAT4, 1), new Uniform('cc_viewPort', Type.FLOAT4, 1)], 1);
      globalDescriptorSetLayout.layouts[UBOCamera.NAME] = UBOCamera.LAYOUT;
      globalDescriptorSetLayout.bindings[UBOCamera.BINDING] = UBOCamera.DESCRIPTOR;
      class UBOShadow {}
      UBOShadow.MAT_LIGHT_VIEW_OFFSET = 0;
      UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET = UBOShadow.MAT_LIGHT_VIEW_OFFSET + 16;
      UBOShadow.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET = UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET + 16;
      UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET = UBOShadow.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 4;
      UBOShadow.SHADOW_PROJ_INFO_OFFSET = UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 4;
      UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET = UBOShadow.SHADOW_PROJ_INFO_OFFSET + 4;
      UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET = UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 4;
      UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET = UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 4;
      UBOShadow.SHADOW_COLOR_OFFSET = UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 4;
      UBOShadow.PLANAR_NORMAL_DISTANCE_INFO_OFFSET = UBOShadow.SHADOW_COLOR_OFFSET + 4;
      UBOShadow.COUNT = UBOShadow.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 4;
      UBOShadow.SIZE = UBOShadow.COUNT * 4;
      UBOShadow.NAME = 'CCShadow';
      UBOShadow.BINDING = PipelineGlobalBindings.UBO_SHADOW;
      UBOShadow.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOShadow.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
      UBOShadow.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOShadow.BINDING, UBOShadow.NAME, [new Uniform('cc_matLightView', Type.MAT4, 1), new Uniform('cc_matLightViewProj', Type.MAT4, 1), new Uniform('cc_shadowInvProjDepthInfo', Type.FLOAT4, 1), new Uniform('cc_shadowProjDepthInfo', Type.FLOAT4, 1), new Uniform('cc_shadowProjInfo', Type.FLOAT4, 1), new Uniform('cc_shadowNFLSInfo', Type.FLOAT4, 1), new Uniform('cc_shadowWHPBInfo', Type.FLOAT4, 1), new Uniform('cc_shadowLPNNInfo', Type.FLOAT4, 1), new Uniform('cc_shadowColor', Type.FLOAT4, 1), new Uniform('cc_planarNDInfo', Type.FLOAT4, 1)], 1);
      globalDescriptorSetLayout.layouts[UBOShadow.NAME] = UBOShadow.LAYOUT;
      globalDescriptorSetLayout.bindings[UBOShadow.BINDING] = UBOShadow.DESCRIPTOR;
      class UBOCSM {}
      UBOCSM.CSM_LEVEL_COUNT = 4;
      UBOCSM.CSM_VIEW_DIR_0_OFFSET = 0;
      UBOCSM.CSM_VIEW_DIR_1_OFFSET = UBOCSM.CSM_VIEW_DIR_0_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.CSM_VIEW_DIR_2_OFFSET = UBOCSM.CSM_VIEW_DIR_1_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.CSM_ATLAS_OFFSET = UBOCSM.CSM_VIEW_DIR_2_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.MAT_CSM_VIEW_PROJ_OFFSET = UBOCSM.CSM_ATLAS_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.CSM_PROJ_DEPTH_INFO_OFFSET = UBOCSM.MAT_CSM_VIEW_PROJ_OFFSET + 16 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.CSM_PROJ_INFO_OFFSET = UBOCSM.CSM_PROJ_DEPTH_INFO_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.CSM_SPLITS_INFO_OFFSET = UBOCSM.CSM_PROJ_INFO_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.COUNT = UBOCSM.CSM_SPLITS_INFO_OFFSET + 4;
      UBOCSM.SIZE = UBOCSM.COUNT * 4;
      UBOCSM.NAME = 'CCCSM';
      UBOCSM.BINDING = PipelineGlobalBindings.UBO_CSM;
      UBOCSM.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOCSM.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.FRAGMENT);
      UBOCSM.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOCSM.BINDING, UBOCSM.NAME, [new Uniform('cc_csmViewDir0', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmViewDir1', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmViewDir2', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmAtlas', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_matCSMViewProj', Type.MAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmProjDepthInfo', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmProjInfo', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmSplitsInfo', Type.FLOAT4, 1)], 1);
      globalDescriptorSetLayout.layouts[UBOCSM.NAME] = UBOCSM.LAYOUT;
      globalDescriptorSetLayout.bindings[UBOCSM.BINDING] = UBOCSM.DESCRIPTOR;
      const UNIFORM_SHADOWMAP_NAME = 'cc_shadowMap';
      const UNIFORM_SHADOWMAP_BINDING = PipelineGlobalBindings.SAMPLER_SHADOWMAP;
      const UNIFORM_SHADOWMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SHADOWMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      const UNIFORM_SHADOWMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_SHADOWMAP_BINDING, UNIFORM_SHADOWMAP_NAME, Type.SAMPLER2D, 1);
      globalDescriptorSetLayout.layouts[UNIFORM_SHADOWMAP_NAME] = UNIFORM_SHADOWMAP_LAYOUT;
      globalDescriptorSetLayout.bindings[UNIFORM_SHADOWMAP_BINDING] = UNIFORM_SHADOWMAP_DESCRIPTOR;
      const UNIFORM_ENVIRONMENT_NAME = 'cc_environment';
      const UNIFORM_ENVIRONMENT_BINDING = PipelineGlobalBindings.SAMPLER_ENVIRONMENT;
      const UNIFORM_ENVIRONMENT_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_ENVIRONMENT_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      const UNIFORM_ENVIRONMENT_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_ENVIRONMENT_BINDING, UNIFORM_ENVIRONMENT_NAME, Type.SAMPLER_CUBE, 1);
      globalDescriptorSetLayout.layouts[UNIFORM_ENVIRONMENT_NAME] = UNIFORM_ENVIRONMENT_LAYOUT;
      globalDescriptorSetLayout.bindings[UNIFORM_ENVIRONMENT_BINDING] = UNIFORM_ENVIRONMENT_DESCRIPTOR;
      const UNIFORM_DIFFUSEMAP_NAME = 'cc_diffuseMap';
      const UNIFORM_DIFFUSEMAP_BINDING = PipelineGlobalBindings.SAMPLER_DIFFUSEMAP;
      const UNIFORM_DIFFUSEMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_DIFFUSEMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      const UNIFORM_DIFFUSEMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_DIFFUSEMAP_BINDING, UNIFORM_DIFFUSEMAP_NAME, Type.SAMPLER_CUBE, 1);
      globalDescriptorSetLayout.layouts[UNIFORM_DIFFUSEMAP_NAME] = UNIFORM_DIFFUSEMAP_LAYOUT;
      globalDescriptorSetLayout.bindings[UNIFORM_DIFFUSEMAP_BINDING] = UNIFORM_DIFFUSEMAP_DESCRIPTOR;
      const UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME = 'cc_spotShadowMap';
      const UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING = PipelineGlobalBindings.SAMPLER_SPOT_SHADOW_MAP;
      const UNIFORM_SPOT_SHADOW_MAP_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      const UNIFORM_SPOT_SHADOW_MAP_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME, Type.SAMPLER2D, 1);
      globalDescriptorSetLayout.layouts[UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME] = UNIFORM_SPOT_SHADOW_MAP_TEXTURE_LAYOUT;
      globalDescriptorSetLayout.bindings[UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING] = UNIFORM_SPOT_SHADOW_MAP_TEXTURE_DESCRIPTOR;
      class UBOLocal {} exports('dk', UBOLocal);
      UBOLocal.MAT_WORLD_OFFSET = 0;
      UBOLocal.MAT_WORLD_IT_OFFSET = UBOLocal.MAT_WORLD_OFFSET + 16;
      UBOLocal.LIGHTINGMAP_UVPARAM = UBOLocal.MAT_WORLD_IT_OFFSET + 16;
      UBOLocal.LOCAL_SHADOW_BIAS = UBOLocal.LIGHTINGMAP_UVPARAM + 4;
      UBOLocal.REFLECTION_PROBE_DATA1 = UBOLocal.LOCAL_SHADOW_BIAS + 4;
      UBOLocal.REFLECTION_PROBE_DATA2 = UBOLocal.REFLECTION_PROBE_DATA1 + 4;
      UBOLocal.COUNT = UBOLocal.REFLECTION_PROBE_DATA2 + 4;
      UBOLocal.SIZE = UBOLocal.COUNT * 4;
      UBOLocal.NAME = 'CCLocal';
      UBOLocal.BINDING = ModelLocalBindings.UBO_LOCAL;
      UBOLocal.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOLocal.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE);
      UBOLocal.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOLocal.BINDING, UBOLocal.NAME, [new Uniform('cc_matWorld', Type.MAT4, 1), new Uniform('cc_matWorldIT', Type.MAT4, 1), new Uniform('cc_lightingMapUVParam', Type.FLOAT4, 1), new Uniform('cc_localShadowBias', Type.FLOAT4, 1), new Uniform('cc_reflectionProbeData1', Type.FLOAT4, 1), new Uniform('cc_reflectionProbeData2', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOLocal.NAME] = UBOLocal.LAYOUT;
      localDescriptorSetLayout.bindings[UBOLocal.BINDING] = UBOLocal.DESCRIPTOR;
      class UBOWorldBound {}
      UBOWorldBound.WORLD_BOUND_CENTER = 0;
      UBOWorldBound.WORLD_BOUND_HALF_EXTENTS = UBOWorldBound.WORLD_BOUND_CENTER + 4;
      UBOWorldBound.COUNT = UBOWorldBound.WORLD_BOUND_HALF_EXTENTS + 4;
      UBOWorldBound.SIZE = UBOWorldBound.COUNT * 4;
      UBOWorldBound.NAME = 'CCWorldBound';
      UBOWorldBound.BINDING = ModelLocalBindings.UBO_LOCAL;
      UBOWorldBound.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOWorldBound.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE);
      UBOWorldBound.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOWorldBound.BINDING, UBOWorldBound.NAME, [new Uniform('cc_worldBoundCenter', Type.FLOAT4, 1), new Uniform('cc_worldBoundHalfExtents', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOWorldBound.NAME] = UBOWorldBound.LAYOUT;
      localDescriptorSetLayout.bindings[UBOWorldBound.BINDING] = UBOWorldBound.DESCRIPTOR;
      const INST_MAT_WORLD = 'a_matWorld0';
      const INST_SH = 'a_sh_linear_const_r';
      class UBOLocalBatched {}
      UBOLocalBatched.BATCHING_COUNT = 10;
      UBOLocalBatched.MAT_WORLDS_OFFSET = 0;
      UBOLocalBatched.COUNT = 16 * UBOLocalBatched.BATCHING_COUNT;
      UBOLocalBatched.SIZE = UBOLocalBatched.COUNT * 4;
      UBOLocalBatched.NAME = 'CCLocalBatched';
      UBOLocalBatched.BINDING = ModelLocalBindings.UBO_LOCAL;
      UBOLocalBatched.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOLocalBatched.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE);
      UBOLocalBatched.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOLocalBatched.BINDING, UBOLocalBatched.NAME, [new Uniform('cc_matWorlds', Type.MAT4, UBOLocalBatched.BATCHING_COUNT)], 1);
      localDescriptorSetLayout.layouts[UBOLocalBatched.NAME] = UBOLocalBatched.LAYOUT;
      localDescriptorSetLayout.bindings[UBOLocalBatched.BINDING] = UBOLocalBatched.DESCRIPTOR;
      class UBOForwardLight {}
      UBOForwardLight.LIGHTS_PER_PASS = 1;
      UBOForwardLight.LIGHT_POS_OFFSET = 0;
      UBOForwardLight.LIGHT_COLOR_OFFSET = UBOForwardLight.LIGHT_POS_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
      UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET = UBOForwardLight.LIGHT_COLOR_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
      UBOForwardLight.LIGHT_DIR_OFFSET = UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
      UBOForwardLight.COUNT = UBOForwardLight.LIGHT_DIR_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
      UBOForwardLight.SIZE = UBOForwardLight.COUNT * 4;
      UBOForwardLight.NAME = 'CCForwardLight';
      UBOForwardLight.BINDING = ModelLocalBindings.UBO_FORWARD_LIGHTS;
      UBOForwardLight.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOForwardLight.BINDING, DescriptorType.DYNAMIC_UNIFORM_BUFFER, 1, ShaderStageFlagBit.FRAGMENT);
      UBOForwardLight.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOForwardLight.BINDING, UBOForwardLight.NAME, [new Uniform('cc_lightPos', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightColor', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightSizeRangeAngle', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightDir', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS)], 1);
      localDescriptorSetLayout.layouts[UBOForwardLight.NAME] = UBOForwardLight.LAYOUT;
      localDescriptorSetLayout.bindings[UBOForwardLight.BINDING] = UBOForwardLight.DESCRIPTOR;
      class UBODeferredLight {}
      UBODeferredLight.LIGHTS_PER_PASS = 10;
      const JOINT_UNIFORM_CAPACITY = 30;
      class UBOSkinningTexture {}
      UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET = 0;
      UBOSkinningTexture.COUNT = UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET + 4;
      UBOSkinningTexture.SIZE = UBOSkinningTexture.COUNT * 4;
      UBOSkinningTexture.NAME = 'CCSkinningTexture';
      UBOSkinningTexture.BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;
      UBOSkinningTexture.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinningTexture.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
      UBOSkinningTexture.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinningTexture.BINDING, UBOSkinningTexture.NAME, [new Uniform('cc_jointTextureInfo', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOSkinningTexture.NAME] = UBOSkinningTexture.LAYOUT;
      localDescriptorSetLayout.bindings[UBOSkinningTexture.BINDING] = UBOSkinningTexture.DESCRIPTOR;
      class UBOSkinningAnimation {} exports('eM', UBOSkinningAnimation);
      UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET = 0;
      UBOSkinningAnimation.COUNT = UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET + 4;
      UBOSkinningAnimation.SIZE = UBOSkinningAnimation.COUNT * 4;
      UBOSkinningAnimation.NAME = 'CCSkinningAnimation';
      UBOSkinningAnimation.BINDING = ModelLocalBindings.UBO_SKINNING_ANIMATION;
      UBOSkinningAnimation.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinningAnimation.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
      UBOSkinningAnimation.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinningAnimation.BINDING, UBOSkinningAnimation.NAME, [new Uniform('cc_jointAnimInfo', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOSkinningAnimation.NAME] = UBOSkinningAnimation.LAYOUT;
      localDescriptorSetLayout.bindings[UBOSkinningAnimation.BINDING] = UBOSkinningAnimation.DESCRIPTOR;
      const INST_JOINT_ANIM_INFO = 'a_jointAnimInfo';
      class UBOSkinning {
        static get JOINT_UNIFORM_CAPACITY() {
          return UBOSkinning._jointUniformCapacity;
        }

        static get COUNT() {
          return UBOSkinning._count;
        }

        static get SIZE() {
          return UBOSkinning._size;
        }

        static initLayout(capacity) {
          UBOSkinning._jointUniformCapacity = capacity;
          UBOSkinning._count = capacity * 12;
          UBOSkinning._size = UBOSkinning._count * 4;
          UBOSkinning.LAYOUT.members[0].count = capacity * 3;
        }

      }
      UBOSkinning._jointUniformCapacity = 0;
      UBOSkinning._count = 0;
      UBOSkinning._size = 0;
      UBOSkinning.NAME = 'CCSkinning';
      UBOSkinning.BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;
      UBOSkinning.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinning.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
      UBOSkinning.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinning.BINDING, UBOSkinning.NAME, [new Uniform('cc_joints', Type.FLOAT4, 1)], 1);
      function localDescriptorSetLayout_ResizeMaxJoints(maxCount) {
        UBOSkinning.initLayout(maxCount);
        localDescriptorSetLayout.layouts[UBOSkinning.NAME] = UBOSkinning.LAYOUT;
        localDescriptorSetLayout.bindings[UBOSkinning.BINDING] = UBOSkinning.DESCRIPTOR;
      }
      class UBOMorph {}
      UBOMorph.MAX_MORPH_TARGET_COUNT = 60;
      UBOMorph.OFFSET_OF_WEIGHTS = 0;
      UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH = 4 * UBOMorph.MAX_MORPH_TARGET_COUNT;
      UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT = UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH + 4;
      UBOMorph.OFFSET_OF_VERTICES_COUNT = UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT + 4;
      UBOMorph.COUNT_BASE_4_BYTES = 4 * Math.ceil(UBOMorph.MAX_MORPH_TARGET_COUNT / 4) + 4;
      UBOMorph.SIZE = UBOMorph.COUNT_BASE_4_BYTES * 4;
      UBOMorph.NAME = 'CCMorph';
      UBOMorph.BINDING = ModelLocalBindings.UBO_MORPH;
      UBOMorph.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOMorph.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
      UBOMorph.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOMorph.BINDING, UBOMorph.NAME, [new Uniform('cc_displacementWeights', Type.FLOAT4, UBOMorph.MAX_MORPH_TARGET_COUNT / 4), new Uniform('cc_displacementTextureInfo', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOMorph.NAME] = UBOMorph.LAYOUT;
      localDescriptorSetLayout.bindings[UBOMorph.BINDING] = UBOMorph.DESCRIPTOR;
      class UBOUILocal {}
      UBOUILocal.NAME = 'CCUILocal';
      UBOUILocal.BINDING = ModelLocalBindings.UBO_UI_LOCAL;
      UBOUILocal.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOUILocal.BINDING, DescriptorType.DYNAMIC_UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
      UBOUILocal.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOUILocal.BINDING, UBOUILocal.NAME, [new Uniform('cc_local_data', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOUILocal.NAME] = UBOUILocal.LAYOUT;
      localDescriptorSetLayout.bindings[UBOUILocal.BINDING] = UBOUILocal.DESCRIPTOR;
      class UBOSH {}
      UBOSH.SH_LINEAR_CONST_R_OFFSET = 0;
      UBOSH.SH_LINEAR_CONST_G_OFFSET = UBOSH.SH_LINEAR_CONST_R_OFFSET + 4;
      UBOSH.SH_LINEAR_CONST_B_OFFSET = UBOSH.SH_LINEAR_CONST_G_OFFSET + 4;
      UBOSH.SH_QUADRATIC_R_OFFSET = UBOSH.SH_LINEAR_CONST_B_OFFSET + 4;
      UBOSH.SH_QUADRATIC_G_OFFSET = UBOSH.SH_QUADRATIC_R_OFFSET + 4;
      UBOSH.SH_QUADRATIC_B_OFFSET = UBOSH.SH_QUADRATIC_G_OFFSET + 4;
      UBOSH.SH_QUADRATIC_A_OFFSET = UBOSH.SH_QUADRATIC_B_OFFSET + 4;
      UBOSH.COUNT = UBOSH.SH_QUADRATIC_A_OFFSET + 4;
      UBOSH.SIZE = UBOSH.COUNT * 4;
      UBOSH.NAME = 'CCSH';
      UBOSH.BINDING = ModelLocalBindings.UBO_SH;
      UBOSH.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSH.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.FRAGMENT);
      UBOSH.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSH.BINDING, UBOSH.NAME, [new Uniform('cc_sh_linear_const_r', Type.FLOAT4, 1), new Uniform('cc_sh_linear_const_g', Type.FLOAT4, 1), new Uniform('cc_sh_linear_const_b', Type.FLOAT4, 1), new Uniform('cc_sh_quadratic_r', Type.FLOAT4, 1), new Uniform('cc_sh_quadratic_g', Type.FLOAT4, 1), new Uniform('cc_sh_quadratic_b', Type.FLOAT4, 1), new Uniform('cc_sh_quadratic_a', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOSH.NAME] = UBOSH.LAYOUT;
      localDescriptorSetLayout.bindings[UBOSH.BINDING] = UBOSH.DESCRIPTOR;
      const UNIFORM_JOINT_TEXTURE_NAME = 'cc_jointTexture';
      const UNIFORM_JOINT_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_JOINTS;
      const UNIFORM_JOINT_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_JOINT_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
      const UNIFORM_JOINT_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_JOINT_TEXTURE_BINDING, UNIFORM_JOINT_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_JOINT_TEXTURE_NAME] = UNIFORM_JOINT_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_JOINT_TEXTURE_BINDING] = UNIFORM_JOINT_TEXTURE_DESCRIPTOR;
      const UNIFORM_REALTIME_JOINT_TEXTURE_NAME = 'cc_realtimeJoint';
      const UNIFORM_REALTIME_JOINT_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_JOINTS;
      const UNIFORM_REALTIME_JOINT_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REALTIME_JOINT_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
      const UNIFORM_REALTIME_JOINT_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REALTIME_JOINT_TEXTURE_BINDING, UNIFORM_REALTIME_JOINT_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_REALTIME_JOINT_TEXTURE_NAME] = UNIFORM_REALTIME_JOINT_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_REALTIME_JOINT_TEXTURE_BINDING] = UNIFORM_REALTIME_JOINT_TEXTURE_DESCRIPTOR;
      const UNIFORM_POSITION_MORPH_TEXTURE_NAME = 'cc_PositionDisplacements';
      const UNIFORM_POSITION_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_POSITION;
      const UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_POSITION_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
      const UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_POSITION_MORPH_TEXTURE_BINDING, UNIFORM_POSITION_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_POSITION_MORPH_TEXTURE_NAME] = UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_POSITION_MORPH_TEXTURE_BINDING] = UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR;
      const UNIFORM_NORMAL_MORPH_TEXTURE_NAME = 'cc_NormalDisplacements';
      const UNIFORM_NORMAL_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_NORMAL;
      const UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_NORMAL_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
      const UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_NORMAL_MORPH_TEXTURE_BINDING, UNIFORM_NORMAL_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_NORMAL_MORPH_TEXTURE_NAME] = UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_NORMAL_MORPH_TEXTURE_BINDING] = UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR;
      const UNIFORM_TANGENT_MORPH_TEXTURE_NAME = 'cc_TangentDisplacements';
      const UNIFORM_TANGENT_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_TANGENT;
      const UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_TANGENT_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
      const UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_TANGENT_MORPH_TEXTURE_BINDING, UNIFORM_TANGENT_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_TANGENT_MORPH_TEXTURE_NAME] = UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_TANGENT_MORPH_TEXTURE_BINDING] = UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR;
      const UNIFORM_LIGHTMAP_TEXTURE_NAME = 'cc_lightingMap';
      const UNIFORM_LIGHTMAP_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_LIGHTMAP;
      const UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_LIGHTMAP_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      const UNIFORM_LIGHTMAP_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_LIGHTMAP_TEXTURE_BINDING, UNIFORM_LIGHTMAP_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_LIGHTMAP_TEXTURE_NAME] = UNIFORM_LIGHTMAP_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_LIGHTMAP_TEXTURE_BINDING] = UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR;
      const UNIFORM_SPRITE_TEXTURE_NAME = 'cc_spriteTexture';
      const UNIFORM_SPRITE_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_SPRITE;
      const UNIFORM_SPRITE_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SPRITE_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      const UNIFORM_SPRITE_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_SPRITE_TEXTURE_BINDING, UNIFORM_SPRITE_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_SPRITE_TEXTURE_NAME] = UNIFORM_SPRITE_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_SPRITE_TEXTURE_BINDING] = UNIFORM_SPRITE_TEXTURE_DESCRIPTOR;
      const UNIFORM_REFLECTION_TEXTURE_NAME = 'cc_reflectionTexture';
      const UNIFORM_REFLECTION_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_REFLECTION;
      const UNIFORM_REFLECTION_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REFLECTION_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      const UNIFORM_REFLECTION_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REFLECTION_TEXTURE_BINDING, UNIFORM_REFLECTION_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_TEXTURE_NAME] = UNIFORM_REFLECTION_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_TEXTURE_BINDING] = UNIFORM_REFLECTION_TEXTURE_DESCRIPTOR;
      const UNIFORM_REFLECTION_STORAGE_NAME = 'cc_reflectionStorage';
      const UNIFORM_REFLECTION_STORAGE_BINDING = ModelLocalBindings.STORAGE_REFLECTION;
      const UNIFORM_REFLECTION_STORAGE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REFLECTION_STORAGE_BINDING, DescriptorType.STORAGE_IMAGE, 1, ShaderStageFlagBit.COMPUTE);
      const UNIFORM_REFLECTION_STORAGE_LAYOUT = new UniformStorageImage(SetIndex.LOCAL, UNIFORM_REFLECTION_STORAGE_BINDING, UNIFORM_REFLECTION_STORAGE_NAME, Type.IMAGE2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_STORAGE_NAME] = UNIFORM_REFLECTION_STORAGE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_STORAGE_BINDING] = UNIFORM_REFLECTION_STORAGE_DESCRIPTOR;
      const UNIFORM_REFLECTION_PROBE_CUBEMAP_NAME = 'cc_reflectionProbeCubemap';
      const UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING = ModelLocalBindings.SAMPLER_REFLECTION_PROBE_CUBE;
      const UNIFORM_REFLECTION_PROBE_CUBEMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      const UNIFORM_REFLECTION_PROBE_CUBEMAP_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING, UNIFORM_REFLECTION_PROBE_CUBEMAP_NAME, Type.SAMPLER_CUBE, 1);
      localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_PROBE_CUBEMAP_NAME] = UNIFORM_REFLECTION_PROBE_CUBEMAP_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING] = UNIFORM_REFLECTION_PROBE_CUBEMAP_DESCRIPTOR;
      const UNIFORM_REFLECTION_PROBE_TEXTURE_NAME = 'cc_reflectionProbePlanarMap';
      const UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_REFLECTION_PROBE_PLANAR;
      const UNIFORM_REFLECTION_PROBE_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      const UNIFORM_REFLECTION_PROBE_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING, UNIFORM_REFLECTION_PROBE_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_PROBE_TEXTURE_NAME] = UNIFORM_REFLECTION_PROBE_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING] = UNIFORM_REFLECTION_PROBE_TEXTURE_DESCRIPTOR;
      const UNIFORM_REFLECTION_PROBE_DATA_MAP_NAME = 'cc_reflectionProbeDataMap';
      const UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING = ModelLocalBindings.SAMPLER_REFLECTION_PROBE_DATA_MAP;
      const UNIFORM_REFLECTION_PROBE_DATA_MAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      const UNIFORM_REFLECTION_PROBE_DATA_MAP_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING, UNIFORM_REFLECTION_PROBE_DATA_MAP_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_PROBE_DATA_MAP_NAME] = UNIFORM_REFLECTION_PROBE_DATA_MAP_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING] = UNIFORM_REFLECTION_PROBE_DATA_MAP_DESCRIPTOR;
      const CAMERA_DEFAULT_MASK = exports('cS', Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.GIZMOS, Layers.BitMask.EDITOR, Layers.BitMask.SCENE_GIZMO, Layers.BitMask.PROFILER]));
      const CAMERA_EDITOR_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.PROFILER]);
      const MODEL_ALWAYS_MASK = Layers.Enum.ALL;
      function supportsR16HalfFloatTexture(device) {
        return (device.getFormatFeatures(Format.R16F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE)) === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE);
      }
      function supportsR32FloatTexture(device) {
        return (device.getFormatFeatures(Format.R32F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE)) === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE) && !(device.gfxAPI === API.WEBGL);
      }
      function isEnableEffect() {
        return !!(legacyCC.rendering && legacyCC.rendering.enableEffectImport);
      }

      var define$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        PIPELINE_FLOW_MAIN: PIPELINE_FLOW_MAIN,
        PIPELINE_FLOW_FORWARD: PIPELINE_FLOW_FORWARD,
        PIPELINE_FLOW_SHADOW: PIPELINE_FLOW_SHADOW,
        PIPELINE_FLOW_SMAA: PIPELINE_FLOW_SMAA,
        PIPELINE_FLOW_TONEMAP: PIPELINE_FLOW_TONEMAP,
        get RenderPassStage () { return RenderPassStage; },
        get RenderPriority () { return RenderPriority; },
        globalDescriptorSetLayout: globalDescriptorSetLayout,
        localDescriptorSetLayout: localDescriptorSetLayout,
        get PipelineGlobalBindings () { return PipelineGlobalBindings; },
        get ModelLocalBindings () { return ModelLocalBindings; },
        get SetIndex () { return SetIndex; },
        bindingMappingInfo: bindingMappingInfo,
        UBOGlobal: UBOGlobal,
        UBOCamera: UBOCamera,
        UBOShadow: UBOShadow,
        UBOCSM: UBOCSM,
        UNIFORM_SHADOWMAP_BINDING: UNIFORM_SHADOWMAP_BINDING,
        UNIFORM_ENVIRONMENT_BINDING: UNIFORM_ENVIRONMENT_BINDING,
        UNIFORM_DIFFUSEMAP_BINDING: UNIFORM_DIFFUSEMAP_BINDING,
        UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING: UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING,
        UBOLocal: UBOLocal,
        UBOWorldBound: UBOWorldBound,
        INST_MAT_WORLD: INST_MAT_WORLD,
        INST_SH: INST_SH,
        UBOLocalBatched: UBOLocalBatched,
        UBOForwardLight: UBOForwardLight,
        UBODeferredLight: UBODeferredLight,
        JOINT_UNIFORM_CAPACITY: JOINT_UNIFORM_CAPACITY,
        UBOSkinningTexture: UBOSkinningTexture,
        UBOSkinningAnimation: UBOSkinningAnimation,
        INST_JOINT_ANIM_INFO: INST_JOINT_ANIM_INFO,
        UBOSkinning: UBOSkinning,
        localDescriptorSetLayout_ResizeMaxJoints: localDescriptorSetLayout_ResizeMaxJoints,
        UBOMorph: UBOMorph,
        UBOUILocal: UBOUILocal,
        UBOSH: UBOSH,
        UNIFORM_JOINT_TEXTURE_BINDING: UNIFORM_JOINT_TEXTURE_BINDING,
        UNIFORM_REALTIME_JOINT_TEXTURE_BINDING: UNIFORM_REALTIME_JOINT_TEXTURE_BINDING,
        UNIFORM_POSITION_MORPH_TEXTURE_BINDING: UNIFORM_POSITION_MORPH_TEXTURE_BINDING,
        UNIFORM_NORMAL_MORPH_TEXTURE_BINDING: UNIFORM_NORMAL_MORPH_TEXTURE_BINDING,
        UNIFORM_TANGENT_MORPH_TEXTURE_BINDING: UNIFORM_TANGENT_MORPH_TEXTURE_BINDING,
        UNIFORM_LIGHTMAP_TEXTURE_BINDING: UNIFORM_LIGHTMAP_TEXTURE_BINDING,
        UNIFORM_SPRITE_TEXTURE_BINDING: UNIFORM_SPRITE_TEXTURE_BINDING,
        UNIFORM_REFLECTION_TEXTURE_BINDING: UNIFORM_REFLECTION_TEXTURE_BINDING,
        UNIFORM_REFLECTION_STORAGE_BINDING: UNIFORM_REFLECTION_STORAGE_BINDING,
        UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING: UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING,
        UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING: UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING,
        UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING: UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING,
        CAMERA_DEFAULT_MASK: CAMERA_DEFAULT_MASK,
        CAMERA_EDITOR_MASK: CAMERA_EDITOR_MASK,
        MODEL_ALWAYS_MASK: MODEL_ALWAYS_MASK,
        supportsR16HalfFloatTexture: supportsR16HalfFloatTexture,
        supportsR32FloatTexture: supportsR32FloatTexture,
        isEnableEffect: isEnableEffect
      });
      exports('f$', define$1);

      let PipelineEventType;

      (function (PipelineEventType) {
        PipelineEventType["RENDER_FRAME_BEGIN"] = "render-frame-begin";
        PipelineEventType["RENDER_FRAME_END"] = "render-frame-end";
        PipelineEventType["RENDER_CAMERA_BEGIN"] = "render-camera-begin";
        PipelineEventType["RENDER_CAMERA_END"] = "render-camera-end";
        PipelineEventType["ATTACHMENT_SCALE_CAHNGED"] = "attachment-scale-changed";
      })(PipelineEventType || (PipelineEventType = exports('eP', {})));

      var _dec$7, _dec2$3, _class$7, _initializer$5, _initializer2$4, _initializer3$4, _dec3$1, _dec4, _class3$3, _class4$1, _initializer4$3, _initializer5$2;
      nr.getPhaseID = getPhaseID;
      const RenderPipeline = exports('g0', nr.RenderPipeline);
      const RenderFlow = exports('g1', nr.RenderFlow);
      const RenderStage = exports('g2', nr.RenderStage);
      const InstancedBuffer = exports('g3', nr.InstancedBuffer);
      const PipelineStateManager = exports('g4', nr.PipelineStateManager);
      const ForwardPipeline = exports('g5', nr.ForwardPipeline);
      const ForwardFlow = exports('g6', nr.ForwardFlow);
      const ShadowFlow = exports('g7', nr.ShadowFlow);
      const ForwardStage = exports('g8', nr.ForwardStage);
      const ShadowStage = exports('g9', nr.ShadowStage);
      const DeferredPipeline = exports('ga', nr.DeferredPipeline);
      const MainFlow = exports('gb', nr.MainFlow);
      const LightingStage = exports('gc', nr.LightingStage);
      const PostProcessStage = exports('gd', nr.PostProcessStage);
      const GbufferStage = exports('ge', nr.GbufferStage);
      const BloomStage = exports('gf', nr.BloomStage);
      const ReflectionProbeFlow = exports('gg', nr.ReflectionProbeFlow);
      const ReflectionProbeStage = exports('gh', nr.ReflectionProbeStage);
      let getOrCreatePipelineState = nr.PipelineStateManager.getOrCreatePipelineState;

      nr.PipelineStateManager.getOrCreatePipelineState = function (device, pass, shader, renderPass, ia) {
        return getOrCreatePipelineState(pass, shader, renderPass, ia);
      };

      const forwardPipelineProto = ForwardPipeline.prototype;

      forwardPipelineProto._ctor = function () {
        this._tag = 0;
        this._flows = [];
      };

      forwardPipelineProto.init = function () {
        for (let i = 0; i < this._flows.length; i++) {
          this._flows[i].init(this);
        }

        const info = {
          tag: this._tag,
          flows: this._flows
        };
        this.initialize(info);
      };

      const oldForwardOnLoaded = forwardPipelineProto.onLoaded;

      forwardPipelineProto.onLoaded = function () {
        if (oldForwardOnLoaded) oldForwardOnLoaded.call(this);

        for (let i = 0; i < this._flows.length; i++) {
          this._flows[i].init(this);
        }

        const info = {
          tag: this._tag,
          flows: this._flows
        };
        this.initialize(info);
      };

      const forwardFlowProto = ForwardFlow.prototype;

      forwardFlowProto._ctor = function () {
        this._name = 0;
        this._priority = 0;
        this._tag = 0;
        this._stages = [];
      };

      forwardFlowProto.init = function (pipeline) {
        for (let i = 0; i < this._stages.length; i++) {
          this._stages[i].init(pipeline);
        }

        const info = {
          name: this._name,
          priority: this._priority,
          tag: this._tag,
          stages: this._stages
        };
        this.initialize(info);
      };

      const shadowFlowProto = ShadowFlow.prototype;

      shadowFlowProto._ctor = function () {
        this._name = 0;
        this._priority = 0;
        this._tag = 0;
        this._stages = [];
      };

      shadowFlowProto.init = function (pipeline) {
        for (let i = 0; i < this._stages.length; i++) {
          this._stages[i].init(pipeline);
        }

        const info = {
          name: this._name,
          priority: this._priority,
          tag: this._tag,
          stages: this._stages
        };
        this.initialize(info);
      };

      const reflectionProbeFlowProto = ReflectionProbeFlow.prototype;

      reflectionProbeFlowProto._ctor = function () {
        this._name = 0;
        this._priority = 0;
        this._tag = 0;
        this._stages = [];
      };

      reflectionProbeFlowProto.init = function (pipeline) {
        for (let i = 0; i < this._stages.length; i++) {
          this._stages[i].init(pipeline);
        }

        const info = {
          name: this._name,
          priority: this._priority,
          tag: this._tag,
          stages: this._stages
        };
        this.initialize(info);
      };

      const forwardStageProto = ForwardStage.prototype;

      forwardStageProto._ctor = function () {
        this._name = 0;
        this._priority = 0;
        this._tag = 0;
        this.renderQueues = [];
      };

      forwardStageProto.init = function (pipeline) {
        const queues = [];

        for (let i = 0; i < this.renderQueues.length; i++) {
          queues.push(this.renderQueues[i].init());
        }

        const info = {
          name: this._name,
          priority: this._priority,
          tag: this._tag,
          renderQueues: queues
        };
        this.initialize(info);
      };

      const shadowStageProto = ShadowStage.prototype;

      shadowStageProto._ctor = function () {
        this._name = 0;
        this._priority = 0;
        this._tag = 0;
      };

      const reflectionProbeStage = ReflectionProbeStage.prototype;

      reflectionProbeStage._ctor = function () {
        this._name = 0;
        this._priority = 0;
        this._tag = 0;
        this.renderQueues = [];
      };

      reflectionProbeStage.init = function (pipeline) {
        const queues = [];

        for (let i = 0; i < this.renderQueues.length; i++) {
          queues.push(this.renderQueues[i].init());
        }

        const info = {
          name: this._name,
          priority: this._priority,
          tag: this._tag,
          renderQueues: queues
        };
        this.initialize(info);
      };

      let RenderQueueSortMode;

      (function (RenderQueueSortMode) {
        RenderQueueSortMode[RenderQueueSortMode["FRONT_TO_BACK"] = 0] = "FRONT_TO_BACK";
        RenderQueueSortMode[RenderQueueSortMode["BACK_TO_FRONT"] = 1] = "BACK_TO_FRONT";
      })(RenderQueueSortMode || (RenderQueueSortMode = exports('gi', {})));

      ccenum(RenderQueueSortMode);

      shadowStageProto.init = function (pipeline) {
        const info = {
          name: this._name,
          priority: this._priority,
          tag: this._tag,
          renderQueues: []
        };
        this.initialize(info);
      };

      let RenderQueueDesc = exports('gj', (_dec$7 = type(RenderQueueSortMode), _dec2$3 = type([CCString]), (_class$7 = class RenderQueueDesc {
        constructor() {
          this.isTransparent = _initializer$5 && _initializer$5();
          this.sortMode = _initializer2$4 && _initializer2$4();
          this.stages = _initializer3$4 && _initializer3$4();
          this.stages = [];
        }

        init() {
          return new nr.RenderQueueDesc(this.isTransparent, this.sortMode, this.stages);
        }

      }, (_initializer$5 = applyDecoratedInitializer(_class$7.prototype, "isTransparent", [serializable], function () {
        return false;
      }), _initializer2$4 = applyDecoratedInitializer(_class$7.prototype, "sortMode", [_dec$7], function () {
        return RenderQueueSortMode.FRONT_TO_BACK;
      }), _initializer3$4 = applyDecoratedInitializer(_class$7.prototype, "stages", [_dec2$3], function () {
        return [];
      })), _class$7)));
      const deferredPipelineProto = DeferredPipeline.prototype;

      deferredPipelineProto._ctor = function () {
        this._tag = 0;
        this._flows = [];
        this.renderTextures = [];
        this.materials = [];
      };

      const oldDeferredOnLoaded = deferredPipelineProto.onLoaded;

      deferredPipelineProto.onLoaded = function () {
        if (oldDeferredOnLoaded) oldDeferredOnLoaded.call(this);

        for (let i = 0; i < this._flows.length; i++) {
          this._flows[i].init(this);
        }

        let info = {
          tag: this._tag,
          flows: this._flows
        };
        this.initialize(info);
      };

      const mainFlowProto = MainFlow.prototype;

      mainFlowProto._ctor = function () {
        this._name = 0;
        this._priority = 0;
        this._tag = 0;
        this._stages = [];
      };

      mainFlowProto.init = function (pipeline) {
        for (let i = 0; i < this._stages.length; i++) {
          this._stages[i].init(pipeline);
        }

        const info = {
          name: this._name,
          priority: this._priority,
          tag: this._tag,
          stages: this._stages
        };
        this.initialize(info);
      };

      const gbufferStageProto = GbufferStage.prototype;

      gbufferStageProto._ctor = function () {
        this._name = 0;
        this._priority = 0;
        this._tag = 0;
        this.renderQueues = [];
      };

      gbufferStageProto.init = function (pipeline) {
        const queues = [];

        for (let i = 0; i < this.renderQueues.length; i++) {
          queues.push(this.renderQueues[i].init());
        }

        const info = {
          name: this._name,
          priority: this._priority,
          tag: this._tag,
          renderQueues: queues
        };
        this.initialize(info);
      };

      const lightingStageProto = LightingStage.prototype;

      lightingStageProto._ctor = function () {
        this._name = 0;
        this._priority = 0;
        this._tag = 0;
        this.renderQueues = [];
        this._deferredMaterial = null;
      };

      lightingStageProto.init = function (pipeline) {
        const queues = [];

        for (let i = 0; i < this.renderQueues.length; i++) {
          queues.push(this.renderQueues[i].init());
        }

        pipeline.pipelineSceneData.deferredLightingMaterial = this._deferredMaterial;
        const info = {
          name: this._name,
          priority: this._priority,
          tag: this._tag,
          renderQueues: queues
        };
        this.initialize(info);
      };

      const bloomStageProto = BloomStage.prototype;

      bloomStageProto._ctor = function () {
        this._name = 0;
        this._priority = 0;
        this._tag = 0;
        this.renderQueues = [];
        this._bloomMaterial = null;
      };

      bloomStageProto.init = function (pipeline) {
        const queues = [];

        for (let i = 0; i < this.renderQueues.length; i++) {
          queues.push(this.renderQueues[i].init());
        }

        pipeline.pipelineSceneData.bloomMaterial = this._bloomMaterial;
        const info = {
          name: this._name,
          priority: this._priority,
          tag: this._tag,
          renderQueues: queues
        };
        this.initialize(info);
      };

      const postProcessStageProto = PostProcessStage.prototype;

      postProcessStageProto._ctor = function () {
        this._name = 0;
        this._priority = 0;
        this._tag = 0;
        this.renderQueues = [];
        this._postProcessMaterial = null;
      };

      postProcessStageProto.init = function (pipeline) {
        const queues = [];

        for (let i = 0; i < this.renderQueues.length; i++) {
          queues.push(this.renderQueues[i].init());
        }

        pipeline.pipelineSceneData.postProcessMaterial = this._postProcessMaterial;
        const info = {
          name: this._name,
          priority: this._priority,
          tag: this._tag,
          renderQueues: queues
        };
        this.initialize(info);
      };

      legacyCC.RenderFlow = RenderFlow;
      legacyCC.RenderStage = RenderStage;
      legacyCC.RenderPipeline = RenderPipeline;
      const RenderTexture = jsb.RenderTexture;
      let RenderTextureConfig = (_dec3$1 = ccclass('RenderTextureConfig'), _dec4 = type(RenderTexture), _dec3$1(_class3$3 = (_class4$1 = class RenderTextureConfig {
        constructor() {
          this.name = _initializer4$3 && _initializer4$3();
          this.texture = _initializer5$2 && _initializer5$2();
        }

      }, (_initializer4$3 = applyDecoratedInitializer(_class4$1.prototype, "name", [serializable], function () {
        return '';
      }), _initializer5$2 = applyDecoratedInitializer(_class4$1.prototype, "texture", [_dec4], function () {
        return null;
      })), _class4$1)) || _class3$3);

      function proxyArrayAttributeImpl(proto, attr) {
        const proxyTarget = `_${attr}_target`;

        let arrayProxy = (self, targetArrayAttr) => {
          return new Proxy(self[targetArrayAttr], {
            get(targetArray, prop, receiver) {
              return Reflect.get(targetArray, prop, receiver);
            },

            set(targetArray, prop, receiver) {
              const ret = Reflect.set(targetArray, prop, receiver);
              self[targetArrayAttr] = targetArray;
              return ret;
            }

          });
        };

        Object.defineProperty(proto, attr, {
          configurable: true,
          enumerable: true,
          get: function () {
            this[proxyTarget] || (this[proxyTarget] = []);
            return arrayProxy(this, proxyTarget);
          },
          set: function (v) {
            this[proxyTarget] = v;
          }
        });
      }

      function declType(proto, attrType, attr, dft) {
        type(attrType)(proto, attr, dft);
      }

      let proxyArrayAttribute = proxyArrayAttributeImpl;
      editable(RenderStage.prototype);
      editable(RenderStage.prototype);
      editable(RenderStage.prototype);
      serializable(RenderStage.prototype, '_tag', () => 0);
      serializable(RenderStage.prototype, '_priority', () => 0);
      editable(RenderFlow.prototype);
      editable(RenderFlow.prototype);
      editable(RenderFlow.prototype);
      editable(RenderFlow.prototype);
      declType(RenderFlow.prototype, [RenderStage], '_stages', () => []);
      proxyArrayAttribute(RenderFlow.prototype, '_stages');
      serializable(RenderFlow.prototype, '_name', () => '');
      serializable(RenderFlow.prototype, '_priority', () => 0);
      serializable(RenderFlow.prototype, '_tag', () => 0);
      serializable(RenderFlow.prototype, '_stages', () => []);
      editable(RenderPipeline.prototype);
      editable(RenderPipeline.prototype);
      serializable(RenderPipeline.prototype, '_tag', () => 0);
      serializable(RenderPipeline.prototype, '_name', () => '');
      editable(RenderPipeline.prototype);
      declType(RenderPipeline.prototype, [RenderFlow], '_flows', () => []);
      proxyArrayAttribute(RenderPipeline.prototype, '_flows');
      serializable(RenderPipeline.prototype, '_flows', () => []);
      editable(DeferredPipeline.prototype);
      declType(DeferredPipeline.prototype, [RenderTextureConfig], "renderTextures", () => []);
      serializable(DeferredPipeline.prototype, 'renderTextures', () => []);
      editable(DeferredPipeline.prototype);
      editable(ForwardPipeline.prototype);
      declType(ForwardPipeline.prototype, [RenderTextureConfig], "renderTextures", () => []);
      serializable(ForwardPipeline.prototype, 'renderTextures', () => []);
      declType(GbufferStage.prototype, [RenderQueueDesc], 'renderQueues', () => []);
      serializable(GbufferStage.prototype, 'renderQueues', () => []);
      editable(GbufferStage.prototype);
      editable(LightingStage.prototype);
      declType(LightingStage.prototype, jsb.Material, '_deferredMaterial', () => null);
      declType(LightingStage.prototype, [RenderQueueDesc], 'renderQueues', () => []);
      serializable(LightingStage.prototype, '_deferredMaterial', () => null);
      serializable(LightingStage.prototype, 'renderQueue', () => []);
      editable(LightingStage.prototype);
      editable(BloomStage.prototype);
      declType(BloomStage.prototype, jsb.Material, '_bloomMaterial', () => []);
      serializable(BloomStage.prototype, '_bloomMaterial', () => null);
      declType(PostProcessStage.prototype, [RenderQueueDesc], 'renderQueues', () => []);
      editable(PostProcessStage.prototype);
      declType(PostProcessStage.prototype, jsb.Material, '_postProcessMaterial', () => null);
      serializable(PostProcessStage.prototype, 'renderQueues', () => []);
      editable(PostProcessStage.prototype);
      serializable(PostProcessStage.prototype, '_postProcessMaterial', () => null);
      declType(ForwardStage.prototype, [RenderQueueDesc], 'renderQueues', () => []);
      serializable(ForwardStage.prototype, 'renderQueues', () => []);
      editable(ForwardStage.prototype);
      ccclass('RenderQueueDesc')(RenderQueueDesc);
      ccclass('RenderStage')(RenderStage);
      ccclass('ReflectionProbeStage')(ReflectionProbeStage);
      ccclass('GbufferStage')(GbufferStage);
      ccclass('LightingStage')(LightingStage);
      ccclass('BloomStage')(BloomStage);
      ccclass('PostProcessStage')(PostProcessStage);
      ccclass('ForwardStage')(ForwardStage);
      ccclass('ShadowStage')(ShadowStage);
      ccclass('RenderFlow')(RenderFlow);
      ccclass('MainFlow')(MainFlow);
      ccclass('ForwardFlow')(ForwardFlow);
      ccclass('ShadowFlow')(ShadowFlow);
      ccclass('ReflectionProbeFlow')(ReflectionProbeFlow);
      ccclass('cc.RenderPipeline')(RenderPipeline);
      ccclass('ForwardPipeline')(ForwardPipeline);
      ccclass('DeferredPipeline')(DeferredPipeline);

      const Root = exports('f5', jsb.Root);
      var LightType;

      (function (LightType) {
        LightType[LightType["DIRECTIONAL"] = 0] = "DIRECTIONAL";
        LightType[LightType["SPHERE"] = 1] = "SPHERE";
        LightType[LightType["SPOT"] = 2] = "SPOT";
        LightType[LightType["UNKNOWN"] = 3] = "UNKNOWN";
      })(LightType || (LightType = {}));

      const rootProto = Root.prototype;

      rootProto._createBatcher2D = function () {
        if (!this._batcher && legacyCC.internal.Batcher2D) {
          this._batcher = new legacyCC.internal.Batcher2D(this);

          if (!this._batcher.initialize()) {
            this._batcher = null;
            this.destroy();
            return;
          }

          this._batcher._nativeObj = this.getBatcher2D();
        }
      };

      Object.defineProperty(rootProto, 'batcher2D', {
        configurable: true,
        enumerable: true,

        get() {
          return this._batcher;
        }

      });
      Object.defineProperty(rootProto, 'dataPoolManager', {
        configurable: true,
        enumerable: true,

        get() {
          return this._dataPoolMgr;
        }

      });
      Object.defineProperty(rootProto, 'pipelineEvent', {
        configurable: true,
        enumerable: true,

        get() {
          return this._pipelineEvent;
        }

      });

      class DummyPipelineEvent {
        on(type, callback, target, once) {}

        once(type, callback, target) {}

        off(type, callback, target) {}

        emit(type, arg0, arg1, arg2, arg3, arg4) {}

        targetOff(typeOrTarget) {}

        removeAll(typeOrTarget) {}

        hasEventListener(type, callback, target) {
          return false;
        }

      }

      rootProto._ctor = function (device) {
        this._device = device;
        this._dataPoolMgr = legacyCC.internal.DataPoolManager && new legacyCC.internal.DataPoolManager(device);
        this._modelPools = new Map();
        this._lightPools = new Map();
        this._batcher = null;
        this._pipelineEvent = new DummyPipelineEvent();

        this._registerListeners();
      };

      rootProto.initialize = function (info) {
        var _this$_dataPoolMgr;

        this._initialize(deviceManager.swapchain);

        const customJointTextureLayouts = settings.querySettings(Settings.Category.ANIMATION, 'customJointTextureLayouts') || [];
        (_this$_dataPoolMgr = this._dataPoolMgr) === null || _this$_dataPoolMgr === void 0 ? void 0 : _this$_dataPoolMgr.jointTexturePool.registerCustomTextureLayouts(customJointTextureLayouts);
      };

      rootProto.createModel = function (ModelCtor) {
        let p = this._modelPools.get(ModelCtor);

        if (!p) {
          this._modelPools.set(ModelCtor, new Pool$1(() => new ModelCtor(), 10, obj => obj.destroy()));

          p = this._modelPools.get(ModelCtor);
        }

        const model = p.alloc();
        model.initialize();
        return model;
      };

      rootProto.removeModel = function (m) {
        const p = this._modelPools.get(m.constructor);

        if (p) {
          p.free(m);
          m.destroy();

          if (m.scene) {
            m.scene.removeModel(m);
          }
        } else {
          warnID(1300, m.constructor.name);
        }
      };

      rootProto.createLight = function (LightCtor) {
        let l = this._lightPools.get(LightCtor);

        if (!l) {
          this._lightPools.set(LightCtor, new Pool$1(() => new LightCtor(), 4, obj => obj.destroy()));

          l = this._lightPools.get(LightCtor);
        }

        const light = l.alloc();
        light.initialize();
        return light;
      };

      rootProto.destroyLight = function (l) {
        if (l.scene) {
          switch (l.type) {
            case LightType.DIRECTIONAL:
              l.scene.removeDirectionalLight(l);
              break;

            case LightType.SPHERE:
              l.scene.removeSphereLight(l);
              break;

            case LightType.SPOT:
              l.scene.removeSpotLight(l);
              break;
          }
        }

        l.destroy();
      };

      rootProto.recycleLight = function (l) {
        const p = this._lightPools.get(l.constructor);

        if (p) {
          p.free(l);

          if (l.scene) {
            switch (l.type) {
              case LightType.DIRECTIONAL:
                l.scene.removeDirectionalLight(l);
                break;

              case LightType.SPHERE:
                l.scene.removeSphereLight(l);
                break;

              case LightType.SPOT:
                l.scene.removeSpotLight(l);
                break;
            }
          }
        }
      };

      rootProto._onDirectorBeforeCommit = function () {
        legacyCC.director.emit(legacyCC.Director.EVENT_BEFORE_COMMIT);
      };

      rootProto._onDirectorBeforeRender = function () {
        legacyCC.director.emit(legacyCC.Director.EVENT_BEFORE_RENDER);
      };

      rootProto._onDirectorAfterRender = function () {
        legacyCC.director.emit(legacyCC.Director.EVENT_AFTER_RENDER);
      };

      rootProto._onDirectorPipelineChanged = function () {
        const scene = legacyCC.director.getScene();

        if (scene) {
          scene._activate();
        }
      };

      const oldFrameMove = rootProto.frameMove;

      rootProto.frameMove = function (deltaTime) {
        oldFrameMove.call(this, deltaTime, legacyCC.director.getTotalFrames());
      };

      const oldSetPipeline = rootProto.setRenderPipeline;

      rootProto.setRenderPipeline = function (pipeline) {
        let ppl;

        if (macro.CUSTOM_PIPELINE_NAME !== '' && legacyCC.rendering && this.usesCustomPipeline) {
          legacyCC.rendering.createCustomPipeline();
          ppl = oldSetPipeline.call(this, null);
        } else {
          if (!pipeline) {
            pipeline = new ForwardPipeline();
            pipeline.init();
          }

          ppl = oldSetPipeline.call(this, pipeline);
        }

        this._createBatcher2D();

        return ppl;
      };

      rootProto.addBatch = function (batch) {
        console.error('The Draw Batch class is implemented differently in the native platform and does not support this interface.');
      };

      rootProto.removeBatch = function (batch) {
        console.error('The Draw Batch class is implemented differently in the native platform and does not support this interface.');
      };

      rootProto.removeBatches = function () {
        console.error('The Draw Batch class is implemented differently in the native platform and does not support this interface.');
      };

      let NodeEventType;

      (function (NodeEventType) {
        NodeEventType["TOUCH_START"] = "touch-start";
        NodeEventType["TOUCH_MOVE"] = "touch-move";
        NodeEventType["TOUCH_END"] = "touch-end";
        NodeEventType["TOUCH_CANCEL"] = "touch-cancel";
        NodeEventType["MOUSE_DOWN"] = "mouse-down";
        NodeEventType["MOUSE_MOVE"] = "mouse-move";
        NodeEventType["MOUSE_UP"] = "mouse-up";
        NodeEventType["MOUSE_WHEEL"] = "mouse-wheel";
        NodeEventType["MOUSE_ENTER"] = "mouse-enter";
        NodeEventType["MOUSE_LEAVE"] = "mouse-leave";
        NodeEventType["KEY_DOWN"] = "keydown";
        NodeEventType["KEY_UP"] = "keyup";
        NodeEventType["DEVICEMOTION"] = "devicemotion";
        NodeEventType["TRANSFORM_CHANGED"] = "transform-changed";
        NodeEventType["MOBILITY_CHANGED"] = "mobility-changed";
        NodeEventType["SCENE_CHANGED_FOR_PERSISTS"] = "scene-changed-for-persists";
        NodeEventType["SIZE_CHANGED"] = "size-changed";
        NodeEventType["ANCHOR_CHANGED"] = "anchor-changed";
        NodeEventType["COLOR_CHANGED"] = "color-changed";
        NodeEventType["CHILD_ADDED"] = "child-added";
        NodeEventType["CHILD_REMOVED"] = "child-removed";
        NodeEventType["PARENT_CHANGED"] = "parent-changed";
        NodeEventType["NODE_DESTROYED"] = "node-destroyed";
        NodeEventType["LAYER_CHANGED"] = "layer-changed";
        NodeEventType["SIBLING_ORDER_CHANGED"] = "sibling-order-changed";
        NodeEventType["ACTIVE_IN_HIERARCHY_CHANGED"] = "active-in-hierarchy-changed";
        NodeEventType["COMPONENT_ADDED"] = "component-added";
        NodeEventType["COMPONENT_REMOVED"] = "component-removed";
        NodeEventType["LIGHT_PROBE_CHANGED"] = "light-probe-changed";
        NodeEventType["LIGHT_PROBE_BAKING_CHANGED"] = "light-probe-baking-changed";
      })(NodeEventType || (NodeEventType = exports('cx', {})));

      class NodeUIProperties {
        get uiTransformComp() {
          if (!this._uiTransformComp) {
            this._uiTransformComp = this._node.getComponent('cc.UITransform');
          }

          return this._uiTransformComp;
        }

        set uiTransformComp(value) {
          this._uiTransformComp = value;
        }

        get uiComp() {
          return this._uiComp;
        }

        set uiComp(comp) {
          if (this._uiComp && comp) {
            warnID(12002);
            return;
          }

          this._uiComp = comp;
        }

        get opacity() {
          return this._opacity;
        }

        get localOpacity() {
          return this._localOpacity;
        }

        set localOpacity(val) {
          this._localOpacity = val;
          this.colorDirty = true;
        }

        constructor(node) {
          this._uiComp = null;
          this._opacity = 1;
          this._localOpacity = 1;
          this.colorDirty = true;
          this._uiTransformComp = null;
          this._node = void 0;
          this._node = node;
        }

        applyOpacity(effectOpacity) {
          this._opacity = this._localOpacity * effectOpacity;
        }

        static markOpacityTree(node, isDirty = true) {}

      }

      let NodeSpace;

      (function (NodeSpace) {
        NodeSpace[NodeSpace["LOCAL"] = 0] = "LOCAL";
        NodeSpace[NodeSpace["WORLD"] = 1] = "WORLD";
      })(NodeSpace || (NodeSpace = exports('gl', {})));

      let TransformBit;

      (function (TransformBit) {
        TransformBit[TransformBit["NONE"] = 0] = "NONE";
        TransformBit[TransformBit["POSITION"] = 1] = "POSITION";
        TransformBit[TransformBit["ROTATION"] = 2] = "ROTATION";
        TransformBit[TransformBit["SCALE"] = 4] = "SCALE";
        TransformBit[TransformBit["RS"] = TransformBit.ROTATION | TransformBit.SCALE] = "RS";
        TransformBit[TransformBit["TRS"] = TransformBit.POSITION | TransformBit.ROTATION | TransformBit.SCALE] = "TRS";
        TransformBit[TransformBit["TRS_MASK"] = ~TransformBit.TRS] = "TRS_MASK";
      })(TransformBit || (TransformBit = exports('cU', {})));

      legacyCC.internal.TransformBit = TransformBit;
      const MobilityMode = exports('du', Enum({
        Static: 0,
        Stationary: 1,
        Movable: 2
      }));

      const _tempFloatArray = new Float32Array(jsb.createExternalArrayBuffer(20 * 4));
      const fillMat4WithTempFloatArray = function fillMat4WithTempFloatArray(out) {
        Mat4.set(out, _tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2], _tempFloatArray[3], _tempFloatArray[4], _tempFloatArray[5], _tempFloatArray[6], _tempFloatArray[7], _tempFloatArray[8], _tempFloatArray[9], _tempFloatArray[10], _tempFloatArray[11], _tempFloatArray[12], _tempFloatArray[13], _tempFloatArray[14], _tempFloatArray[15]);
      };

      const Destroying$1 = CCObject.Flags.Destroying;

      const reserveContentsForAllSyncablePrefabTag = Symbol('ReserveContentsForAllSyncablePrefab');
      const Node$1 = exports('d7', jsb.Node);
      legacyCC.Node = Node$1;
      const NodeCls = Node$1;
      NodeCls.reserveContentsForAllSyncablePrefabTag = reserveContentsForAllSyncablePrefabTag;
      NodeCls.EventType = NodeEventType;
      NodeCls.NodeSpace = NodeSpace;
      NodeCls.TransformDirtyBit = TransformBit;
      NodeCls.TransformBit = TransformBit;
      const TRANSFORMBIT_TRS = TransformBit.TRS;
      const nodeProto = jsb.Node.prototype;
      const TRANSFORM_ON = 1 << 0;
      const Destroying$2 = CCObject.Flags.Destroying;

      Node$1._setTempFloatArray(_tempFloatArray.buffer);

      function getConstructor(typeOrClassName) {
        if (!typeOrClassName) {
          return null;
        }

        if (typeof typeOrClassName === 'string') {
          return getClassByName(typeOrClassName);
        }

        return typeOrClassName;
      }

      nodeProto.attr = function (attrs) {
        mixin(this, attrs);
      };

      nodeProto.getComponent = function (typeOrClassName) {
        const constructor = getConstructor(typeOrClassName);

        if (constructor) {
          return NodeCls._findComponent(this, constructor);
        }

        return null;
      };

      nodeProto.getComponents = function (typeOrClassName) {
        const constructor = getConstructor(typeOrClassName);
        const components = [];

        if (constructor) {
          NodeCls._findComponents(this, constructor, components);
        }

        return components;
      };

      nodeProto.getComponentInChildren = function (typeOrClassName) {
        const constructor = getConstructor(typeOrClassName);

        if (constructor) {
          return NodeCls._findChildComponent(this._children, constructor);
        }

        return null;
      };

      nodeProto.getComponentsInChildren = function (typeOrClassName) {
        const constructor = getConstructor(typeOrClassName);
        const components = [];

        if (constructor) {
          NodeCls._findComponents(this, constructor, components);

          NodeCls._findChildComponents(this.children, constructor, components);
        }

        return components;
      };

      nodeProto.addComponent = function (typeOrClassName) {

        let constructor;

        if (typeof typeOrClassName === 'string') {
          constructor = getClassByName(typeOrClassName);

          if (!constructor) {
            if (legacyCC._RF.peek()) {
              errorID(3808, typeOrClassName);
            }

            throw TypeError(getError(3807, typeOrClassName));
          }
        } else {
          if (!typeOrClassName) {
            throw TypeError(getError(3804));
          }

          constructor = typeOrClassName;
        }

        if (typeof constructor !== 'function') {
          throw TypeError(getError(3809));
        }

        if (!isChildClassOf(constructor, Component)) {
          throw TypeError(getError(3810));
        }

        const reqComps = constructor._requireComponent;

        if (reqComps) {
          const tryAdd = c => {
            if (!this.getComponent(c)) {
              this.addComponent(c);
            }
          };

          if (Array.isArray(reqComps)) {
            reqComps.forEach(c => tryAdd(c));
          } else {
            tryAdd(reqComps);
          }
        }

        const component = new constructor();
        component.node = this;

        this._components.push(component);

        this.emit(NodeEventType.COMPONENT_ADDED, component);

        if (this._activeInHierarchy) {
          legacyCC.director._nodeActivator.activateComp(component);
        }

        return component;
      };

      nodeProto.removeComponent = function (component) {
        if (!component) {
          errorID(3813);
          return;
        }

        let componentInstance = null;

        if (component instanceof Component) {
          componentInstance = component;
        } else {
          componentInstance = this.getComponent(component);
        }

        if (componentInstance) {
          componentInstance.destroy();
        }
      };

      const REGISTERED_EVENT_MASK_TRANSFORM_CHANGED = 1 << 0;
      const REGISTERED_EVENT_MASK_PARENT_CHANGED = 1 << 1;
      const REGISTERED_EVENT_MASK_MOBILITY_CHANGED = 1 << 2;
      const REGISTERED_EVENT_MASK_LAYER_CHANGED = 1 << 3;
      const REGISTERED_EVENT_MASK_CHILD_REMOVED_CHANGED = 1 << 4;
      const REGISTERED_EVENT_MASK_CHILD_ADDED_CHANGED = 1 << 5;
      const REGISTERED_EVENT_MASK_SIBLING_ORDER_CHANGED_CHANGED = 1 << 6;
      const REGISTERED_EVENT_MASK_LIGHT_PROBE_BAKING_CHANGED = 1 << 7;

      nodeProto.on = function (type, callback, target, useCapture = false) {
        switch (type) {
          case NodeEventType.TRANSFORM_CHANGED:
            this._eventMask |= TRANSFORM_ON;

            if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_TRANSFORM_CHANGED)) {
              this._registerOnTransformChanged();

              this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_TRANSFORM_CHANGED;
            }

            break;

          case NodeEventType.PARENT_CHANGED:
            if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_PARENT_CHANGED)) {
              this._registerOnParentChanged();

              this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_PARENT_CHANGED;
            }

            break;

          case NodeEventType.MOBILITY_CHANGED:
            if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_MOBILITY_CHANGED)) {
              this._registerOnMobilityChanged();

              this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_MOBILITY_CHANGED;
            }

            break;

          case NodeEventType.LAYER_CHANGED:
            if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_LAYER_CHANGED)) {
              this._registerOnLayerChanged();

              this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_LAYER_CHANGED;
            }

            break;

          case NodeEventType.CHILD_REMOVED:
            if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_CHILD_REMOVED_CHANGED)) {
              this._registerOnChildRemoved();

              this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_CHILD_REMOVED_CHANGED;
            }

            break;

          case NodeEventType.CHILD_ADDED:
            if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_CHILD_ADDED_CHANGED)) {
              this._registerOnChildAdded();

              this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_CHILD_ADDED_CHANGED;
            }

            break;

          case NodeEventType.SIBLING_ORDER_CHANGED:
            if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_SIBLING_ORDER_CHANGED_CHANGED)) {
              this._registerOnSiblingOrderChanged();

              this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_SIBLING_ORDER_CHANGED_CHANGED;
            }

            break;

          case NodeEventType.LIGHT_PROBE_BAKING_CHANGED:
            if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_LIGHT_PROBE_BAKING_CHANGED)) {
              this._registerOnLightProbeBakingChanged();

              this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_LIGHT_PROBE_BAKING_CHANGED;
            }

            break;
        }

        this._eventProcessor.on(type, callback, target, useCapture);
      };

      nodeProto.off = function (type, callback, target, useCapture = false) {
        this._eventProcessor.off(type, callback, target, useCapture);

        const hasListeners = this._eventProcessor.hasEventListener(type);

        if (!hasListeners) {
          switch (type) {
            case NodeEventType.TRANSFORM_CHANGED:
              this._eventMask &= ~TRANSFORM_ON;
              break;
          }
        }
      };

      nodeProto.once = function (type, callback, target, useCapture) {
        this._eventProcessor.once(type, callback, target, useCapture);
      };

      nodeProto.emit = function (type, arg0, arg1, arg2, arg3, arg4) {
        this._eventProcessor.emit(type, arg0, arg1, arg2, arg3, arg4);
      };

      nodeProto.dispatchEvent = function (event) {
        this._eventProcessor.dispatchEvent(event);
      };

      nodeProto.hasEventListener = function (type, callback, target) {
        return this._eventProcessor.hasEventListener(type, callback, target);
      };

      nodeProto.targetOff = function (target) {
        this._eventProcessor.targetOff(target);

        if (this._eventMask & TRANSFORM_ON && !this._eventProcessor.hasEventListener(NodeEventType.TRANSFORM_CHANGED)) {
          this._eventMask &= ~TRANSFORM_ON;
        }
      };

      nodeProto.pauseSystemEvents = function pauseSystemEvents(recursive) {
        this._eventProcessor.setEnabled(false, recursive);
      };

      nodeProto.resumeSystemEvents = function resumeSystemEvents(recursive) {
        this._eventProcessor.setEnabled(true, recursive);
      };

      nodeProto._removeComponent = function (component) {
        if (!component) {
          errorID(3814);
          return;
        }

        if (!(this._objFlags & Destroying$2)) {
          const i = this._components.indexOf(component);

          if (i !== -1) {
            this._components.splice(i, 1);

            this.emit(NodeEventType.COMPONENT_REMOVED, component);
          } else if (component.node !== this) {
            errorID(3815);
          }
        }
      };

      nodeProto._registerIfAttached =  undefined ;

      nodeProto._onTransformChanged = function (transformType) {
        this.emit(NodeEventType.TRANSFORM_CHANGED, transformType);
      };

      nodeProto._onParentChanged = function (oldParent) {
        this.emit(NodeEventType.PARENT_CHANGED, oldParent);
      };

      nodeProto._onReAttach = function () {
        this._eventProcessor.reattach();
      };

      nodeProto._onEditorAttached = function (attached) {
      };

      nodeProto._onRemovePersistRootNode = function () {
        legacyCC.game.removePersistRootNode(this);
      };

      nodeProto._onDestroyComponents = function () {
        this._eventProcessor.destroy();

        const comps = this._components;

        for (let i = 0; i < comps.length; ++i) {
          comps[i]._destroyImmediate();
        }
      };

      nodeProto._onMobilityChanged = function () {
        this.emit(NodeEventType.MOBILITY_CHANGED);
      };

      nodeProto._onLayerChanged = function (layer) {
        this.emit(NodeEventType.LAYER_CHANGED, layer);
      };

      nodeProto._onChildRemoved = function (child) {
        this.emit(NodeEventType.CHILD_REMOVED, child);
      };

      nodeProto._onChildAdded = function (child) {
        this.emit(NodeEventType.CHILD_ADDED, child);
      };

      nodeProto._onNodeDestroyed = function () {
        this.emit(NodeEventType.NODE_DESTROYED, this);
        const children = this._children;

        for (let i = 0; i < children.length; ++i) {
          children[i]._destroyImmediate();
        }
      };

      const oldPreDestroy = nodeProto._onPreDestroy;

      nodeProto._onPreDestroy = function _onPreDestroy() {
        const ret = oldPreDestroy.call(this);
        this.emit(NodeEventType.NODE_DESTROYED, this);

        this._eventProcessor.destroy();

        const children = this._children;

        for (let i = 0; i < children.length; ++i) {
          children[i]._destroyImmediate();
        }

        const comps = this._components;

        for (let i = 0; i < comps.length; ++i) {
          comps[i]._destroyImmediate();
        }

        return ret;
      };

      nodeProto.destroyAllChildren = function destroyAllChildren() {
        const children = this._children;

        for (let i = 0, len = children.length; i < len; ++i) {
          children[i].destroy();
        }
      };

      nodeProto._onSiblingOrderChanged = function () {
        this.emit(NodeEventType.SIBLING_ORDER_CHANGED);
      };

      nodeProto._onActivateNode = function (shouldActiveNow) {
        legacyCC.director._nodeActivator.activateNode(this, shouldActiveNow);
      };

      nodeProto._onPostActivated = function (active) {
        if (active) {
          this._eventProcessor.setEnabled(true);

          this.invalidateChildren(TransformBit.TRS);

          if (this._uiProps && this._uiProps.uiComp) {
            this._uiProps.uiComp.setNodeDirty();

            this._uiProps.uiComp.setTextureDirty();

            this._uiProps.uiComp.markForUpdateRenderData();
          }
        } else {
          this._eventProcessor.setEnabled(false);
        }
      };

      nodeProto._onLightProbeBakingChanged = function () {
        this.emit(NodeEventType.LIGHT_PROBE_BAKING_CHANGED);
      };

      NodeCls._findComponent = function (node, constructor) {
        const cls = constructor;
        const comps = node._components;

        if (cls._sealed) {
          for (let i = 0; i < comps.length; ++i) {
            const comp = comps[i];

            if (comp.constructor === constructor) {
              return comp;
            }
          }
        } else {
          for (let i = 0; i < comps.length; ++i) {
            const comp = comps[i];

            if (comp instanceof constructor) {
              return comp;
            }
          }
        }

        return null;
      };

      NodeCls._findComponents = function (node, constructor, components) {
        const cls = constructor;
        const comps = node._components;

        if (cls._sealed) {
          for (let i = 0; i < comps.length; ++i) {
            const comp = comps[i];

            if (comp.constructor === constructor) {
              components.push(comp);
            }
          }
        } else {
          for (let i = 0; i < comps.length; ++i) {
            const comp = comps[i];

            if (comp instanceof constructor) {
              components.push(comp);
            }
          }
        }
      };

      NodeCls._findChildComponent = function (children, constructor) {
        for (let i = 0; i < children.length; ++i) {
          const node = children[i];

          let comp = NodeCls._findComponent(node, constructor);

          if (comp) {
            return comp;
          }

          const childChildren = node.children;

          if (childChildren.length > 0) {
            comp = NodeCls._findChildComponent(childChildren, constructor);

            if (comp) {
              return comp;
            }
          }
        }

        return null;
      };

      NodeCls._findChildComponents = function (children, constructor, components) {
        for (let i = 0; i < children.length; ++i) {
          const node = children[i];

          NodeCls._findComponents(node, constructor, components);

          const childChildren = node.children;

          if (childChildren.length > 0) {
            NodeCls._findChildComponents(childChildren, constructor, components);
          }
        }
      };

      NodeCls.isNode = function (obj) {
        return obj instanceof jsb.Node && (obj.constructor === jsb.Node || !(obj instanceof legacyCC.Scene));
      };

      let _tempQuat = new Quat();

      nodeProto.setRTS = function setRTS(rot, pos, scale) {
        if (rot) {
          let val = _tempQuat;

          if (rot instanceof Quat) {
            val = rot;
          } else {
            Quat.fromEuler(val, rot.x, rot.y, rot.z);
          }

          _tempFloatArray[0] = 4;
          _tempFloatArray[1] = val.x;
          _tempFloatArray[2] = val.y;
          _tempFloatArray[3] = val.z;
          _tempFloatArray[4] = val.w;

          this._lrot.set(val.x, val.y, val.z, val.w);
        } else {
          _tempFloatArray[0] = 0;
        }

        if (pos) {
          _tempFloatArray[5] = 3;
          _tempFloatArray[6] = pos.x;
          _tempFloatArray[7] = pos.y;
          _tempFloatArray[8] = pos.z;

          this._lpos.set(pos.x, pos.y, pos.z);
        } else {
          _tempFloatArray[5] = 0;
        }

        if (scale) {
          _tempFloatArray[9] = 3;
          _tempFloatArray[10] = scale.x;
          _tempFloatArray[11] = scale.y;
          _tempFloatArray[12] = scale.z;

          this._lscale.set(scale.x, scale.y, scale.z);
        } else {
          _tempFloatArray[9] = 0;
        }

        this._setRTS();
      };

      nodeProto.getPosition = function getPosition(out) {
        if (out) {
          return Vec3.set(out, this._lpos.x, this._lpos.y, this._lpos.z);
        }

        return Vec3.copy(new Vec3(), this._lpos);
      };

      nodeProto.setPosition = function setPosition(val, y, z) {
        if (y === undefined && z === undefined) {
          _tempFloatArray[0] = 3;
          const pos = val;
          this._lpos.x = _tempFloatArray[1] = pos.x;
          this._lpos.y = _tempFloatArray[2] = pos.y;
          this._lpos.z = _tempFloatArray[3] = pos.z;
        } else if (z === undefined) {
          _tempFloatArray[0] = 2;
          this._lpos.x = _tempFloatArray[1] = val;
          this._lpos.y = _tempFloatArray[2] = y;
        } else {
          _tempFloatArray[0] = 3;
          this._lpos.x = _tempFloatArray[1] = val;
          this._lpos.y = _tempFloatArray[2] = y;
          this._lpos.z = _tempFloatArray[3] = z;
        }

        this._setPosition();
      };

      nodeProto.getRotation = function getRotation(out) {
        const lrot = this._lrot;

        if (out) {
          return Quat.set(out, lrot.x, lrot.y, lrot.z, lrot.w);
        }

        return Quat.copy(new Quat(), lrot);
      };

      nodeProto.setRotation = function setRotation(val, y, z, w) {
        if (y === undefined || z === undefined || w === undefined) {
          const rot = val;
          this._lrot.x = _tempFloatArray[0] = rot.x;
          this._lrot.y = _tempFloatArray[1] = rot.y;
          this._lrot.z = _tempFloatArray[2] = rot.z;
          this._lrot.w = _tempFloatArray[3] = rot.w;
        } else {
          this._lrot.x = _tempFloatArray[0] = val;
          this._lrot.y = _tempFloatArray[1] = y;
          this._lrot.z = _tempFloatArray[2] = z;
          this._lrot.w = _tempFloatArray[3] = w;
        }

        this._setRotation();
      };

      nodeProto.setRotationFromEuler = function setRotationFromEuler(val, y, zOpt) {
        const z = zOpt === undefined ? this._euler.z : zOpt;

        if (y === undefined) {
          const euler = val;
          this._euler.x = _tempFloatArray[0] = euler.x;
          this._euler.y = _tempFloatArray[1] = euler.y;
          this._euler.z = _tempFloatArray[2] = euler.z;
        } else {
          this._euler.x = _tempFloatArray[0] = val;
          this._euler.y = _tempFloatArray[1] = y;
          this._euler.z = _tempFloatArray[2] = z;
        }

        this._setRotationFromEuler();
      };

      nodeProto.getScale = function getScale(out) {
        if (out) {
          return Vec3.set(out, this._lscale.x, this._lscale.y, this._lscale.z);
        }

        return Vec3.copy(new Vec3(), this._lscale);
      };

      nodeProto.setScale = function setScale(val, y, z) {
        if (y === undefined && z === undefined) {
          _tempFloatArray[0] = 3;
          const scale = val;
          this._lscale.x = _tempFloatArray[1] = scale.x;
          this._lscale.y = _tempFloatArray[2] = scale.y;
          this._lscale.z = _tempFloatArray[3] = scale.z;
        } else if (z === undefined) {
          _tempFloatArray[0] = 2;
          this._lscale.x = _tempFloatArray[1] = val;
          this._lscale.y = _tempFloatArray[2] = y;
        } else {
          _tempFloatArray[0] = 3;
          this._lscale.x = _tempFloatArray[1] = val;
          this._lscale.y = _tempFloatArray[2] = y;
          this._lscale.z = _tempFloatArray[3] = z;
        }

        this._setScale();
      };

      nodeProto.getWorldPosition = function getWorldPosition(out) {
        this._getWorldPosition();

        out = out || new Vec3();
        return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
      };

      nodeProto.getWorldRotation = function getWorldRotation(out) {
        this._getWorldRotation();

        out = out || new Quat();
        return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2], _tempFloatArray[3]);
      };

      nodeProto.getWorldScale = function getWorldScale(out) {
        this._getWorldScale();

        out = out || new Vec3();
        return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
      };

      nodeProto.getWorldMatrix = function getWorldMatrix(out) {
        this._getWorldMatrix();

        out = out || new Mat4();
        fillMat4WithTempFloatArray(out);
        return out;
      };

      nodeProto.getEulerAngles = function getEulerAngles(out) {
        this._getEulerAngles();

        out = out || new Vec3();
        return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
      };

      nodeProto.getForward = function getForward(out) {
        this._getForward();

        out = out || new Vec3();
        return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
      };

      nodeProto.getUp = function getUp(out) {
        this._getUp();

        out = out || new Vec3();
        return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
      };

      nodeProto.getRight = function getRight(out) {
        this._getRight();

        out = out || new Vec3();
        return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
      };

      nodeProto.inverseTransformPoint = function inverseTransformPoint(out, p) {
        _tempFloatArray[0] = p.x;
        _tempFloatArray[1] = p.y;
        _tempFloatArray[2] = p.z;

        this._inverseTransformPoint();

        out.x = _tempFloatArray[0];
        out.y = _tempFloatArray[1];
        out.z = _tempFloatArray[2];
        return out;
      };

      nodeProto.getWorldRT = function getWorldRT(out) {
        out = out || new Mat4();

        this._getWorldRT();

        fillMat4WithTempFloatArray(out);
        return out;
      };

      nodeProto.getWorldRS = function getWorldRS(out) {
        out = out || new Mat4();

        this._getWorldRS();

        fillMat4WithTempFloatArray(out);
        return out;
      };

      nodeProto.isTransformDirty = function () {
        return this._transformFlags !== TransformBit.NONE;
      };

      Object.defineProperty(nodeProto, 'name', {
        configurable: true,
        enumerable: true,

        get() {
          return this._name;
        },

        set(v) {
          this._name = v;
        }

      });
      Object.defineProperty(nodeProto, 'position', {
        configurable: true,
        enumerable: true,

        get() {
          return this._lpos;
        },

        set(v) {
          this.setPosition(v);
        }

      });
      Object.defineProperty(nodeProto, 'rotation', {
        configurable: true,
        enumerable: true,

        get() {
          return this._lrot;
        },

        set(v) {
          this.setRotation(v);
        }

      });
      Object.defineProperty(nodeProto, 'scale', {
        configurable: true,
        enumerable: true,

        get() {
          return this._lscale;
        },

        set(v) {
          this.setScale(v);
        }

      });
      Object.defineProperty(nodeProto, 'worldPosition', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getWorldPosition();
        },

        set(v) {
          this.setWorldPosition(v);
        }

      });
      Object.defineProperty(nodeProto, 'worldRotation', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getWorldRotation();
        },

        set(v) {
          this.setWorldRotation(v);
        }

      });
      Object.defineProperty(nodeProto, 'worldScale', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getWorldScale();
        },

        set(v) {
          this.setWorldScale(v);
        }

      });
      Object.defineProperty(nodeProto, '_pos', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getWorldPosition();
        }

      });
      Object.defineProperty(nodeProto, '_rot', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getWorldRotation();
        }

      });
      Object.defineProperty(nodeProto, '_scale', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getWorldScale();
        }

      });
      Object.defineProperty(nodeProto, 'eulerAngles', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getEulerAngles();
        },

        set(v) {
          this.setRotationFromEuler(v.x, v.y, v.z);
        }

      });
      Object.defineProperty(nodeProto, 'worldMatrix', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getWorldMatrix();
        }

      });
      Object.defineProperty(nodeProto, '_mat', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getWorldMatrix();
        }

      });
      Object.defineProperty(nodeProto, 'activeInHierarchy', {
        configurable: true,
        enumerable: true,

        get() {
          return this._sharedUint8Arr[0] != 0;
        },

        set(v) {
          this._sharedUint8Arr[0] = v ? 1 : 0;
        }

      });
      Object.defineProperty(nodeProto, '_activeInHierarchy', {
        configurable: true,
        enumerable: true,

        get() {
          return this._sharedUint8Arr[0] != 0;
        },

        set(v) {
          this._sharedUint8Arr[0] = v ? 1 : 0;
        }

      });
      Object.defineProperty(nodeProto, 'layer', {
        configurable: true,
        enumerable: true,

        get() {
          return this._sharedUint32Arr[1];
        },

        set(v) {
          this._sharedUint32Arr[1] = v;

          if (this._uiProps && this._uiProps.uiComp) {
            this._uiProps.uiComp.setNodeDirty();

            this._uiProps.uiComp.markForUpdateRenderData();
          }

          this.emit(NodeEventType.LAYER_CHANGED, v);
        }

      });
      Object.defineProperty(nodeProto, '_layer', {
        configurable: true,
        enumerable: true,

        get() {
          return this._sharedUint32Arr[1];
        },

        set(v) {
          this._sharedUint32Arr[1] = v;
        }

      });
      Object.defineProperty(nodeProto, '_eventMask', {
        configurable: true,
        enumerable: true,

        get() {
          return this._sharedUint32Arr[0];
        },

        set(v) {
          this._sharedUint32Arr[0] = v;
        }

      });
      Object.defineProperty(nodeProto, '_siblingIndex', {
        configurable: true,
        enumerable: true,

        get() {
          return this._sharedInt32Arr[0];
        },

        set(v) {
          this._sharedInt32Arr[0] = v;
        }

      });

      nodeProto.getSiblingIndex = function getSiblingIndex() {
        return this._sharedInt32Arr[0];
      };

      Object.defineProperty(nodeProto, '_transformFlags', {
        configurable: true,
        enumerable: true,

        get() {
          return this._sharedUint32Arr[2];
        },

        set(v) {
          this._sharedUint32Arr[2] = v;
        }

      });
      Object.defineProperty(nodeProto, '_active', {
        configurable: true,
        enumerable: true,

        get() {
          return this._sharedUint8Arr[1] != 0;
        },

        set(v) {
          this._sharedUint8Arr[1] = v ? 1 : 0;
        }

      });
      Object.defineProperty(nodeProto, 'active', {
        configurable: true,
        enumerable: true,

        get() {
          return this._sharedUint8Arr[1] != 0;
        },

        set(v) {
          this.setActive(!!v);
        }

      });
      Object.defineProperty(nodeProto, '_static', {
        configurable: true,
        enumerable: true,

        get() {
          return this._sharedUint8Arr[2] != 0;
        },

        set(v) {
          this._sharedUint8Arr[2] = v ? 1 : 0;
        }

      });
      Object.defineProperty(nodeProto, 'forward', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getForward();
        },

        set(dir) {
          this.setForward(dir);
        }

      });
      Object.defineProperty(nodeProto, 'up', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getUp();
        }

      });
      Object.defineProperty(nodeProto, 'right', {
        configurable: true,
        enumerable: true,

        get() {
          return this.getRight();
        }

      });
      Object.defineProperty(nodeProto, 'eventProcessor', {
        configurable: true,
        enumerable: true,

        get() {
          return this._eventProcessor;
        }

      });
      Object.defineProperty(nodeProto, 'components', {
        configurable: true,
        enumerable: true,

        get() {
          return this._components;
        }

      });
      Object.defineProperty(nodeProto, '_parent', {
        configurable: true,
        enumerable: true,

        get() {
          this._parentRef = this._parentInternal;
          return this._parentRef;
        },

        set(v) {
          this._parentRef = this._parentInternal = v;
        }

      });
      Object.defineProperty(nodeProto, 'parent', {
        configurable: true,
        enumerable: true,

        get() {
          this._parentRef = this.getParent();
          return this._parentRef;
        },

        set(v) {
          this._parentRef = v;
          this.setParent(v);
        }

      });
      Object.defineProperty(nodeProto, 'children', {
        configurable: true,
        enumerable: true,

        get() {
          return this._children;
        },

        set(v) {
          this._children = v;
        }

      });
      Object.defineProperty(nodeProto, 'scene', {
        configurable: true,
        enumerable: true,

        get() {
          return this._scene;
        }

      });

      nodeProto.rotate = function (rot, ns) {
        _tempFloatArray[1] = rot.x;
        _tempFloatArray[2] = rot.y;
        _tempFloatArray[3] = rot.z;
        _tempFloatArray[4] = rot.w;

        if (ns) {
          _tempFloatArray[5] = ns;
          _tempFloatArray[0] = 5;
        } else {
          _tempFloatArray[0] = 4;
        }

        this._rotateForJS();

        const lrot = this._lrot;
        lrot.x = _tempFloatArray[0];
        lrot.y = _tempFloatArray[1];
        lrot.z = _tempFloatArray[2];
        lrot.w = _tempFloatArray[3];
      };

      nodeProto.addChild = function (child) {
        child.setParent(this);
      };

      nodeProto.insertChild = function (child, siblingIndex) {
        child.parent = this;
        child.setSiblingIndex(siblingIndex);
      };

      nodeProto[serializeTag] = function (serializationOutput, context) {
        {
          serializationOutput.writeThis();
        }

        const isMountedChild = () => {
          var _this$editorExtrasTag;

          return !!((_this$editorExtrasTag = this[editorExtrasTag]) !== null && _this$editorExtrasTag !== void 0 && _this$editorExtrasTag.mountedRoot);
        };

        const isSyncPrefab = () => {
          var _this$_prefab, _this$_prefab$root, _this$_prefab$root$_p, _this$_prefab2;

          return ((_this$_prefab = this._prefab) === null || _this$_prefab === void 0 ? void 0 : (_this$_prefab$root = _this$_prefab.root) === null || _this$_prefab$root === void 0 ? void 0 : (_this$_prefab$root$_p = _this$_prefab$root._prefab) === null || _this$_prefab$root$_p === void 0 ? void 0 : _this$_prefab$root$_p.instance) && ((this === null || this === void 0 ? void 0 : (_this$_prefab2 = this._prefab) === null || _this$_prefab2 === void 0 ? void 0 : _this$_prefab2.instance) || !isMountedChild());
        };

        const canDiscardByPrefabRoot = () => !(context.customArguments[reserveContentsForAllSyncablePrefabTag] || !isSyncPrefab() || context.root === this);

        if (canDiscardByPrefabRoot()) {
          var _this$_prefab3;

          const isRoot = ((_this$_prefab3 = this._prefab) === null || _this$_prefab3 === void 0 ? void 0 : _this$_prefab3.root) === this;

          if (isRoot) {
            serializationOutput.writeProperty('_objFlags', this._objFlags);
            serializationOutput.writeProperty('_parent', this._parent);
            serializationOutput.writeProperty('_prefab', this._prefab);

            if (context.customArguments.keepNodeUuid) {
              serializationOutput.writeProperty('_id', this._id);
            }

            serializationOutput.writeProperty(editorExtrasTag, this[editorExtrasTag]);
          }
        } else {
          serializationOutput.writeThis();
        }
      };

      nodeProto._onActiveNode = function (shouldActiveNow) {
        legacyCC.director._nodeActivator.activateNode(this, shouldActiveNow);
      };

      nodeProto._onBatchCreated = function (dontSyncChildPrefab) {
        this.hasChangedFlags = TRANSFORMBIT_TRS;
        this._transformFlags |= TRANSFORMBIT_TRS;
        const children = this._children;
        const len = children.length;
        let child;

        for (let i = 0; i < len; ++i) {
          child = children[i];
          child._siblingIndex = i;

          child._onBatchCreated(dontSyncChildPrefab);
        }

        syncNodeValues(this);
      };

      nodeProto._onSceneUpdated = function (scene) {
        this._scene = scene;
      };

      nodeProto._onLocalPositionUpdated = function (x, y, z) {
        const lpos = this._lpos;
        lpos.x = x;
        lpos.y = y;
        lpos.z = z;
      };

      nodeProto._onLocalRotationUpdated = function (x, y, z, w) {
        const lrot = this._lrot;
        lrot.x = x;
        lrot.y = y;
        lrot.z = z;
        lrot.w = w;
      };

      nodeProto._onLocalScaleUpdated = function (x, y, z) {
        const lscale = this._lscale;
        lscale.x = x;
        lscale.y = y;
        lscale.z = z;
      };

      nodeProto._onLocalPositionRotationScaleUpdated = function (px, py, pz, rx, ry, rz, rw, sx, sy, sz) {
        const lpos = this._lpos;
        lpos.x = px;
        lpos.y = py;
        lpos.z = pz;
        const lrot = this._lrot;
        lrot.x = rx;
        lrot.y = ry;
        lrot.z = rz;
        lrot.w = rw;
        const lscale = this._lscale;
        lscale.x = sx;
        lscale.y = sy;
        lscale.z = sz;
      };

      nodeProto._instantiate = function (cloned, isSyncedNode) {
        if (!cloned) {
          cloned = legacyCC.instantiate._clone(this, this);
        }

        const newPrefabInfo = cloned._prefab;

        cloned._parent = null;

        cloned._onBatchCreated(isSyncedNode);

        return cloned;
      };

      nodeProto._ctor = function (name) {
        this.__nativeRefs = {};
        this._parentRef = null;
        this.__jsb_ref_id = undefined;
        this._iN$t = null;
        this.__editorExtras__ = {
          editorOnly: true
        };
        this._components = [];
        this._eventProcessor = new legacyCC.NodeEventProcessor(this);
        this._uiProps = new NodeUIProperties(this);

        const sharedArrayBuffer = this._getSharedArrayBufferObject();

        this._sharedUint32Arr = new Uint32Array(sharedArrayBuffer, 0, 3);
        this._sharedInt32Arr = new Int32Array(sharedArrayBuffer, 12, 1);
        this._sharedUint8Arr = new Uint8Array(sharedArrayBuffer, 16, 3);
        this._sharedUint32Arr[1] = Layers.Enum.DEFAULT;
        this._scene = null;
        this._prefab = null;
        this._originalSceneId = '';

        this._registerListeners();

        this._children = [];
        this._lpos = new Vec3();
        this._lrot = new Quat();
        this._lscale = new Vec3(1, 1, 1);
        this._euler = new Vec3();
        this._registeredNodeEventTypeMask = 0;
        this.on(NodeEventType.CHILD_ADDED, child => {
          this._children.push(child);
        });
        this.on(NodeEventType.CHILD_REMOVED, child => {
          const removeAt = this._children.indexOf(child);

          if (removeAt < 0) {
            errorID(1633);
            return;
          }

          this._children.splice(removeAt, 1);
        });

        this._onSiblingIndexChanged = function (index) {
          const siblings = this._parent._children;
          index = index !== -1 ? index : siblings.length - 1;
          const oldIndex = siblings.indexOf(this);

          if (index !== oldIndex) {
            siblings.splice(oldIndex, 1);

            if (index < siblings.length) {
              siblings.splice(index, 0, this);
            } else {
              siblings.push(this);
            }
          }
        };
      };

      const NodeProto = Node$1.prototype;

      const _persistNodeDescriptor = Object.getOwnPropertyDescriptor(NodeProto, '_persistNode');

      property(NodeProto, '_persistNode', _persistNodeDescriptor);
      serializable(NodeProto, '_parent', () => null);
      serializable(NodeProto, '_children', () => []);
      serializable(NodeProto, '_active', () => true);
      serializable(NodeProto, '_components', () => []);
      serializable(NodeProto, '_prefab', () => null);
      serializable(NodeProto, '_lpos', () => new Vec3());
      serializable(NodeProto, '_lrot', () => new Quat());
      serializable(NodeProto, '_lscale', () => new Vec3(1, 1, 1));
      serializable(NodeProto, '_mobility', () => MobilityMode.Static);
      serializable(NodeProto, '_layer', () => Layers.Enum.DEFAULT);
      serializable(NodeProto, '_euler', () => new Vec3());
      const eulerAnglesDescriptor = Object.getOwnPropertyDescriptor(NodeProto, 'eulerAngles');
      type(Vec3)(NodeProto, 'eulerAngles', eulerAnglesDescriptor);
      const mobilityDescriptor = Object.getOwnPropertyDescriptor(NodeProto, 'mobility');
      type(MobilityMode)(NodeProto, 'mobility', mobilityDescriptor);
      ccclass('cc.Node')(Node$1);

      CCClass.Attr.setClassAttr(EventHandler, 'target', 'type', 'Object');
      CCClass.Attr.setClassAttr(EventHandler, 'target', 'ctor', Node$1);

      const _cachedArray = new Array(16);

      let _currentHovered = null;
      const pos = new Vec2();
      const _touchEvents = [NodeEventType.TOUCH_START, NodeEventType.TOUCH_MOVE, NodeEventType.TOUCH_END, NodeEventType.TOUCH_CANCEL];
      const _mouseEvents = [NodeEventType.MOUSE_DOWN, NodeEventType.MOUSE_ENTER, NodeEventType.MOUSE_MOVE, NodeEventType.MOUSE_LEAVE, NodeEventType.MOUSE_UP, NodeEventType.MOUSE_WHEEL];
      let DispatcherEventType;

      (function (DispatcherEventType) {
        DispatcherEventType[DispatcherEventType["ADD_POINTER_EVENT_PROCESSOR"] = 0] = "ADD_POINTER_EVENT_PROCESSOR";
        DispatcherEventType[DispatcherEventType["REMOVE_POINTER_EVENT_PROCESSOR"] = 1] = "REMOVE_POINTER_EVENT_PROCESSOR";
        DispatcherEventType[DispatcherEventType["MARK_LIST_DIRTY"] = 2] = "MARK_LIST_DIRTY";
      })(DispatcherEventType || (DispatcherEventType = exports('dg', {})));

      class NodeEventProcessor {
        get isEnabled() {
          return this._isEnabled;
        }

        get node() {
          return this._node;
        }

        constructor(node) {
          this.claimedTouchIdList = [];
          this.maskList = null;
          this.cachedCameraPriority = 0;
          this.previousMouseIn = false;
          this.bubblingTarget = null;
          this.capturingTarget = null;
          this.shouldHandleEventMouse = false;
          this.shouldHandleEventTouch = false;
          this._dispatchingTouch = null;
          this._isEnabled = false;
          this._node = void 0;
          this._node = node;
        }

        setEnabled(value, recursive = false) {
          if (this._isEnabled === value) {
            return;
          }

          this._isEnabled = value;
          const node = this.node;
          const children = node.children;

          if (value) {
            this._attachMask();
          }

          NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.MARK_LIST_DIRTY);

          if (recursive && children.length > 0) {
            for (let i = 0; i < children.length; ++i) {
              const child = children[i];

              child._eventProcessor.setEnabled(value, true);
            }
          }

          if (this._dispatchingTouch && !this._isEnabled) {
            const cancelEvent = new EventTouch([this._dispatchingTouch], true, InputEventType.TOUCH_CANCEL);
            cancelEvent.touch = this._dispatchingTouch;
            this.dispatchEvent(cancelEvent);
            this.claimedTouchIdList.length = 0;
            this._dispatchingTouch = null;
          }
        }

        reattach() {
          let currentMaskList;
          this.node.walk(node => {
            if (!currentMaskList) {
              currentMaskList = this._searchComponentsInParent(NodeEventProcessor._maskComp);
            }

            node.eventProcessor.maskList = currentMaskList;
          });
        }

        destroy() {
          if (_currentHovered === this._node) {
            _currentHovered = null;
          }

          if (this.capturingTarget) this.capturingTarget.clear();
          if (this.bubblingTarget) this.bubblingTarget.clear();
          NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.REMOVE_POINTER_EVENT_PROCESSOR, this);

          if (this._dispatchingTouch) {
            const cancelEvent = new EventTouch([this._dispatchingTouch], true, InputEventType.TOUCH_CANCEL);
            cancelEvent.touch = this._dispatchingTouch;
            this.dispatchEvent(cancelEvent);
            this._dispatchingTouch = null;
          }
        }

        on(type, callback, target, useCapture) {
          this._tryEmittingAddEvent(type);

          useCapture = !!useCapture;
          let invoker;

          if (useCapture) {
            var _this$capturingTarget;

            invoker = (_this$capturingTarget = this.capturingTarget) !== null && _this$capturingTarget !== void 0 ? _this$capturingTarget : this.capturingTarget = this._newCallbacksInvoker();
          } else {
            var _this$bubblingTarget;

            invoker = (_this$bubblingTarget = this.bubblingTarget) !== null && _this$bubblingTarget !== void 0 ? _this$bubblingTarget : this.bubblingTarget = this._newCallbacksInvoker();
          }

          invoker.on(type, callback, target);
          return callback;
        }

        once(type, callback, target, useCapture) {
          this._tryEmittingAddEvent(type);

          useCapture = !!useCapture;
          let invoker;

          if (useCapture) {
            var _this$capturingTarget2;

            invoker = (_this$capturingTarget2 = this.capturingTarget) !== null && _this$capturingTarget2 !== void 0 ? _this$capturingTarget2 : this.capturingTarget = this._newCallbacksInvoker();
          } else {
            var _this$bubblingTarget2;

            invoker = (_this$bubblingTarget2 = this.bubblingTarget) !== null && _this$bubblingTarget2 !== void 0 ? _this$bubblingTarget2 : this.bubblingTarget = this._newCallbacksInvoker();
          }

          invoker.on(type, callback, target, true);
          return callback;
        }

        off(type, callback, target, useCapture) {
          var _invoker;

          useCapture = !!useCapture;
          let invoker;

          if (useCapture) {
            invoker = this.capturingTarget;
          } else {
            invoker = this.bubblingTarget;
          }

          (_invoker = invoker) === null || _invoker === void 0 ? void 0 : _invoker.off(type, callback, target);
        }

        targetOff(target) {
          var _this$capturingTarget3, _this$bubblingTarget3;

          (_this$capturingTarget3 = this.capturingTarget) === null || _this$capturingTarget3 === void 0 ? void 0 : _this$capturingTarget3.removeAll(target);
          (_this$bubblingTarget3 = this.bubblingTarget) === null || _this$bubblingTarget3 === void 0 ? void 0 : _this$bubblingTarget3.removeAll(target);

          if (this.shouldHandleEventTouch && !this._hasTouchListeners()) {
            this.shouldHandleEventTouch = false;
          }

          if (this.shouldHandleEventMouse && !this._hasMouseListeners()) {
            this.shouldHandleEventMouse = false;
          }

          if (!this._hasPointerListeners()) {
            NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.REMOVE_POINTER_EVENT_PROCESSOR, this);
          }
        }

        emit(type, arg0, arg1, arg2, arg3, arg4) {
          var _this$bubblingTarget4;

          (_this$bubblingTarget4 = this.bubblingTarget) === null || _this$bubblingTarget4 === void 0 ? void 0 : _this$bubblingTarget4.emit(type, arg0, arg1, arg2, arg3, arg4);
        }

        dispatchEvent(event) {
          const owner = this.node;
          let target;
          let i = 0;
          event.target = owner;
          _cachedArray.length = 0;
          this.getCapturingTargets(event.type, _cachedArray);
          event.eventPhase = 1;

          for (i = _cachedArray.length - 1; i >= 0; --i) {
            target = _cachedArray[i];

            if (target.eventProcessor.capturingTarget) {
              event.currentTarget = target;
              target.eventProcessor.capturingTarget.emit(event.type, event, _cachedArray);

              if (event.propagationStopped) {
                _cachedArray.length = 0;
                return;
              }
            }
          }

          _cachedArray.length = 0;
          event.eventPhase = 2;
          event.currentTarget = owner;

          if (this.capturingTarget) {
            this.capturingTarget.emit(event.type, event);
          }

          if (!event.propagationImmediateStopped && this.bubblingTarget) {
            this.bubblingTarget.emit(event.type, event);
          }

          if (!event.propagationStopped && event.bubbles) {
            this.getBubblingTargets(event.type, _cachedArray);
            event.eventPhase = 3;

            for (i = 0; i < _cachedArray.length; ++i) {
              target = _cachedArray[i];

              if (target.eventProcessor.bubblingTarget) {
                event.currentTarget = target;
                target.eventProcessor.bubblingTarget.emit(event.type, event);

                if (event.propagationStopped) {
                  _cachedArray.length = 0;
                  return;
                }
              }
            }
          }

          _cachedArray.length = 0;
        }

        hasEventListener(type, callback, target) {
          let has = false;

          if (this.bubblingTarget) {
            has = this.bubblingTarget.hasEventListener(type, callback, target);
          }

          if (!has && this.capturingTarget) {
            has = this.capturingTarget.hasEventListener(type, callback, target);
          }

          return has;
        }

        getCapturingTargets(type, targets) {
          let parent = this._node.parent;

          while (parent) {
            var _parent$eventProcesso;

            if ((_parent$eventProcesso = parent.eventProcessor.capturingTarget) !== null && _parent$eventProcesso !== void 0 && _parent$eventProcesso.hasEventListener(type)) {
              targets.push(parent);
            }

            parent = parent.parent;
          }
        }

        getBubblingTargets(type, targets) {
          let parent = this._node.parent;

          while (parent) {
            var _parent$eventProcesso2;

            if ((_parent$eventProcesso2 = parent.eventProcessor.bubblingTarget) !== null && _parent$eventProcesso2 !== void 0 && _parent$eventProcesso2.hasEventListener(type)) {
              targets.push(parent);
            }

            parent = parent.parent;
          }
        }

        onUpdatingSiblingIndex() {
          NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.MARK_LIST_DIRTY);
        }

        _searchComponentsInParent(ctor) {
          const node = this.node;

          if (ctor) {
            let index = 0;
            let list = [];

            for (let curr = node; curr && Node$1.isNode(curr); curr = curr.parent, ++index) {
              const comp = curr.getComponent(ctor);

              if (comp) {
                const next = {
                  index,
                  comp
                };

                if (list) {
                  list.push(next);
                } else {
                  list = [next];
                }
              }
            }

            return list.length > 0 ? list : null;
          }

          return null;
        }

        _attachMask() {
          this.maskList = this._searchComponentsInParent(NodeEventProcessor._maskComp);
        }

        _isTouchEvent(type) {
          const index = _touchEvents.indexOf(type);

          return index !== -1;
        }

        _isMouseEvent(type) {
          const index = _mouseEvents.indexOf(type);

          return index !== -1;
        }

        _hasTouchListeners() {
          for (let i = 0; i < _touchEvents.length; ++i) {
            const eventType = _touchEvents[i];

            if (this.hasEventListener(eventType)) {
              return true;
            }
          }

          return false;
        }

        _hasMouseListeners() {
          for (let i = 0; i < _mouseEvents.length; ++i) {
            const eventType = _mouseEvents[i];

            if (this.hasEventListener(eventType)) {
              return true;
            }
          }

          return false;
        }

        _hasPointerListeners() {
          const has = this._hasTouchListeners();

          if (has) {
            return true;
          }

          return this._hasMouseListeners();
        }

        _tryEmittingAddEvent(typeToAdd) {
          const isTouchEvent = this._isTouchEvent(typeToAdd);

          const isMouseEvent = this._isMouseEvent(typeToAdd);

          if (isTouchEvent) {
            this.shouldHandleEventTouch = true;
          } else if (isMouseEvent) {
            this.shouldHandleEventMouse = true;
          }

          if ((isTouchEvent || isMouseEvent) && !this._hasPointerListeners()) {
            NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.ADD_POINTER_EVENT_PROCESSOR, this);
          }
        }

        _newCallbacksInvoker() {
          const callbacksInvoker = new CallbacksInvoker();

          callbacksInvoker._registerOffCallback(() => {
            if (this.shouldHandleEventTouch && !this._hasTouchListeners()) {
              this.shouldHandleEventTouch = false;
            }

            if (this.shouldHandleEventMouse && !this._hasMouseListeners()) {
              this.shouldHandleEventMouse = false;
            }

            if (!this._hasPointerListeners()) {
              NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.REMOVE_POINTER_EVENT_PROCESSOR, this);
            }
          });

          return callbacksInvoker;
        }

        _handleEventMouse(eventMouse) {
          switch (eventMouse.type) {
            case InputEventType.MOUSE_DOWN:
              return this._handleMouseDown(eventMouse);

            case InputEventType.MOUSE_MOVE:
              return this._handleMouseMove(eventMouse);

            case InputEventType.MOUSE_UP:
              return this._handleMouseUp(eventMouse);

            case InputEventType.MOUSE_WHEEL:
              return this._handleMouseWheel(eventMouse);

            default:
              return false;
          }
        }

        _handleMouseDown(event) {
          const node = this._node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.getLocation(pos);

          if (node._uiProps.uiTransformComp.hitTest(pos, event.windowId)) {
            event.type = NodeEventType.MOUSE_DOWN;
            event.bubbles = true;
            node.dispatchEvent(event);
            event.propagationStopped = true;
            return true;
          }

          return false;
        }

        _handleMouseMove(event) {
          const node = this._node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.getLocation(pos);

          const hit = node._uiProps.uiTransformComp.hitTest(pos, event.windowId);

          if (hit) {
            if (!this.previousMouseIn) {
              if (_currentHovered && _currentHovered !== node) {
                event.type = NodeEventType.MOUSE_LEAVE;

                _currentHovered.dispatchEvent(event);

                _currentHovered.eventProcessor.previousMouseIn = false;
              }

              _currentHovered = node;
              event.type = NodeEventType.MOUSE_ENTER;
              node.dispatchEvent(event);
              this.previousMouseIn = true;
            }

            event.type = NodeEventType.MOUSE_MOVE;
            event.bubbles = true;
            node.dispatchEvent(event);
            event.propagationStopped = true;
            return true;
          } else if (this.previousMouseIn) {
            event.type = NodeEventType.MOUSE_LEAVE;
            node.dispatchEvent(event);
            this.previousMouseIn = false;
            _currentHovered = null;
          }

          return false;
        }

        _handleMouseUp(event) {
          const node = this._node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.getLocation(pos);

          if (node._uiProps.uiTransformComp.hitTest(pos, event.windowId)) {
            event.type = NodeEventType.MOUSE_UP;
            event.bubbles = true;
            node.dispatchEvent(event);
            event.propagationStopped = true;
            return true;
          }

          return false;
        }

        _handleMouseWheel(event) {
          const node = this._node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.getLocation(pos);

          if (node._uiProps.uiTransformComp.hitTest(pos, event.windowId)) {
            event.type = NodeEventType.MOUSE_WHEEL;
            event.bubbles = true;
            node.dispatchEvent(event);
            event.propagationStopped = true;
            return true;
          }

          return false;
        }

        _handleEventTouch(eventTouch) {
          switch (eventTouch.type) {
            case InputEventType.TOUCH_START:
              return this._handleTouchStart(eventTouch);

            case InputEventType.TOUCH_MOVE:
              return this._handleTouchMove(eventTouch);

            case InputEventType.TOUCH_END:
              return this._handleTouchEnd(eventTouch);

            case InputEventType.TOUCH_CANCEL:
              return this._handleTouchCancel(eventTouch);

            default:
              return false;
          }
        }

        _handleTouchStart(event) {
          const node = this.node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.getLocation(pos);

          if (node._uiProps.uiTransformComp.hitTest(pos, event.windowId)) {
            event.type = NodeEventType.TOUCH_START;
            event.bubbles = true;
            this._dispatchingTouch = event.touch;
            node.dispatchEvent(event);
            return true;
          }

          return false;
        }

        _handleTouchMove(event) {
          const node = this.node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.type = NodeEventType.TOUCH_MOVE;
          event.bubbles = true;
          this._dispatchingTouch = event.touch;
          node.dispatchEvent(event);
          return true;
        }

        _handleTouchEnd(event) {
          const node = this.node;

          if (!node || !node._uiProps.uiTransformComp) {
            return;
          }

          event.getLocation(pos);

          if (node._uiProps.uiTransformComp.hitTest(pos, event.windowId)) {
            event.type = NodeEventType.TOUCH_END;
          } else {
            event.type = NodeEventType.TOUCH_CANCEL;
          }

          event.bubbles = true;
          node.dispatchEvent(event);
          this._dispatchingTouch = null;
        }

        _handleTouchCancel(event) {
          const node = this.node;

          if (!node || !node._uiProps.uiTransformComp) {
            return;
          }

          event.type = NodeEventType.TOUCH_CANCEL;
          event.bubbles = true;
          node.dispatchEvent(event);
        }

      } exports('cQ', NodeEventProcessor);
      NodeEventProcessor._maskComp = null;
      NodeEventProcessor.callbacksInvoker = new CallbacksInvoker();
      legacyCC.NodeEventProcessor = NodeEventProcessor;

      const textureCubeProto = jsb.TextureCube.prototype;
      var FaceIndex;

      (function (FaceIndex) {
        FaceIndex[FaceIndex["right"] = 0] = "right";
        FaceIndex[FaceIndex["left"] = 1] = "left";
        FaceIndex[FaceIndex["top"] = 2] = "top";
        FaceIndex[FaceIndex["bottom"] = 3] = "bottom";
        FaceIndex[FaceIndex["front"] = 4] = "front";
        FaceIndex[FaceIndex["back"] = 5] = "back";
      })(FaceIndex || (FaceIndex = {}));

      var MipmapMode;

      (function (MipmapMode) {
        MipmapMode[MipmapMode["NONE"] = 0] = "NONE";
        MipmapMode[MipmapMode["AUTO"] = 1] = "AUTO";
        MipmapMode[MipmapMode["BAKED_CONVOLUTION_MAP"] = 2] = "BAKED_CONVOLUTION_MAP";
      })(MipmapMode || (MipmapMode = {}));

      textureCubeProto.createNode = null;
      const TextureCube = exports('gG', jsb.TextureCube);
      TextureCube.Filter = Filter$1;
      TextureCube.PixelFormat = PixelFormat;
      TextureCube.WrapMode = WrapMode;

      textureCubeProto._ctor = function () {
        jsb.SimpleTexture.prototype._ctor.apply(this, arguments);

        this._mipmaps = null;
        this._mipmapAtlas = null;
      };

      Object.defineProperty(textureCubeProto, 'mipmaps', {
        get() {
          return this._mipmaps;
        },

        set(value) {
          this._mipmaps = value;
          this.setMipmaps(value);
        }

      });
      Object.defineProperty(textureCubeProto, 'image', {
        get() {
          return this._mipmaps.length === 0 ? null : this._mipmaps[0];
        },

        set(value) {
          this.mipmaps = value ? [value] : [];
        }

      });
      const oldOnLoaded$1 = textureCubeProto.onLoaded;

      textureCubeProto.onLoaded = function () {
        if (this._mipmapMode === MipmapMode.BAKED_CONVOLUTION_MAP) {
          this.setMipmapAtlasForJS(this._mipmapAtlas);
        } else {
          this.setMipmapsForJS(this._mipmaps);
        }

        oldOnLoaded$1.apply(this);
      };

      textureCubeProto._serialize = function (ctxForExporting) {

        return null;
      };

      textureCubeProto._deserialize = function (serializedData, handle) {
        const data = serializedData;

        jsb.TextureBase.prototype._deserialize.call(this, data.base, handle);

        this.isRGBE = data.rgbe;

        if (data.mipmapMode != undefined) {
          this._mipmapMode = data.mipmapMode;
        }

        if (this._mipmapMode === MipmapMode.BAKED_CONVOLUTION_MAP) {
          const mipmapAtlas = data.mipmapAtlas;
          const mipmapLayout = data.mipmapLayout;
          this._mipmapAtlas = {
            atlas: {},
            layout: mipmapLayout
          };
          this._mipmapAtlas.atlas = {
            front: new jsb.ImageAsset(),
            back: new jsb.ImageAsset(),
            left: new jsb.ImageAsset(),
            right: new jsb.ImageAsset(),
            top: new jsb.ImageAsset(),
            bottom: new jsb.ImageAsset()
          };

          if (mipmapAtlas) {
            const imageAssetClassId = getClassId(jsb.ImageAsset);
            handle.result.push(this._mipmapAtlas.atlas, `front`, mipmapAtlas.front, imageAssetClassId);
            handle.result.push(this._mipmapAtlas.atlas, `back`, mipmapAtlas.back, imageAssetClassId);
            handle.result.push(this._mipmapAtlas.atlas, `left`, mipmapAtlas.left, imageAssetClassId);
            handle.result.push(this._mipmapAtlas.atlas, `right`, mipmapAtlas.right, imageAssetClassId);
            handle.result.push(this._mipmapAtlas.atlas, `top`, mipmapAtlas.top, imageAssetClassId);
            handle.result.push(this._mipmapAtlas.atlas, `bottom`, mipmapAtlas.bottom, imageAssetClassId);
          }
        } else {
          this._mipmaps = new Array(data.mipmaps.length);

          for (let i = 0; i < data.mipmaps.length; ++i) {
            this._mipmaps[i] = {
              front: new jsb.ImageAsset(),
              back: new jsb.ImageAsset(),
              left: new jsb.ImageAsset(),
              right: new jsb.ImageAsset(),
              top: new jsb.ImageAsset(),
              bottom: new jsb.ImageAsset()
            };
            const mipmap = data.mipmaps[i];
            const imageAssetClassId = getClassId(jsb.ImageAsset);
            handle.result.push(this._mipmaps[i], `front`, mipmap.front, imageAssetClassId);
            handle.result.push(this._mipmaps[i], `back`, mipmap.back, imageAssetClassId);
            handle.result.push(this._mipmaps[i], `left`, mipmap.left, imageAssetClassId);
            handle.result.push(this._mipmaps[i], `right`, mipmap.right, imageAssetClassId);
            handle.result.push(this._mipmaps[i], `top`, mipmap.top, imageAssetClassId);
            handle.result.push(this._mipmaps[i], `bottom`, mipmap.bottom, imageAssetClassId);
          }
        }
      };

      legacyCC.TextureCube = jsb.TextureCube;
      const TextureCubeProto = TextureCube.prototype;
      serializable(TextureCubeProto, 'isRGBE', () => false);
      serializable(TextureCubeProto, '_mipmaps', () => []);
      serializable(TextureCubeProto, '_mipmapMode', () => MipmapMode.NONE);
      serializable(TextureCubeProto, '_mipmapAtlas', () => null);
      ccclass('cc.TextureCube')(TextureCube);

      let ModelType;

      (function (ModelType) {
        ModelType[ModelType["DEFAULT"] = 0] = "DEFAULT";
        ModelType[ModelType["SKINNING"] = 1] = "SKINNING";
        ModelType[ModelType["BAKED_SKINNING"] = 2] = "BAKED_SKINNING";
        ModelType[ModelType["BATCH_2D"] = 3] = "BATCH_2D";
        ModelType[ModelType["PARTICLE_BATCH"] = 4] = "PARTICLE_BATCH";
        ModelType[ModelType["LINE"] = 5] = "LINE";
      })(ModelType || (ModelType = exports('bj', {})));

      const Model = exports('bk', jsb.Model);
      const modelProto = Model.prototype;

      modelProto._ctor = function () {
        this._device = deviceManager.gfxDevice;
      };

      const oldCreateBoundingShape = modelProto.createBoundingShape;

      modelProto.createBoundingShape = function (minPos, maxPos) {
        if (!minPos || !maxPos) {
          return;
        }

        oldCreateBoundingShape.call(this, minPos, maxPos);
      };

      const SubModel = exports('bl', jsb.SubModel);

      let CameraFOVAxis;

      (function (CameraFOVAxis) {
        CameraFOVAxis[CameraFOVAxis["VERTICAL"] = 0] = "VERTICAL";
        CameraFOVAxis[CameraFOVAxis["HORIZONTAL"] = 1] = "HORIZONTAL";
      })(CameraFOVAxis || (CameraFOVAxis = exports('bm', {})));

      let CameraProjection;

      (function (CameraProjection) {
        CameraProjection[CameraProjection["ORTHO"] = 0] = "ORTHO";
        CameraProjection[CameraProjection["PERSPECTIVE"] = 1] = "PERSPECTIVE";
      })(CameraProjection || (CameraProjection = exports('bn', {})));

      let CameraAperture;

      (function (CameraAperture) {
        CameraAperture[CameraAperture["F1_8"] = 0] = "F1_8";
        CameraAperture[CameraAperture["F2_0"] = 1] = "F2_0";
        CameraAperture[CameraAperture["F2_2"] = 2] = "F2_2";
        CameraAperture[CameraAperture["F2_5"] = 3] = "F2_5";
        CameraAperture[CameraAperture["F2_8"] = 4] = "F2_8";
        CameraAperture[CameraAperture["F3_2"] = 5] = "F3_2";
        CameraAperture[CameraAperture["F3_5"] = 6] = "F3_5";
        CameraAperture[CameraAperture["F4_0"] = 7] = "F4_0";
        CameraAperture[CameraAperture["F4_5"] = 8] = "F4_5";
        CameraAperture[CameraAperture["F5_0"] = 9] = "F5_0";
        CameraAperture[CameraAperture["F5_6"] = 10] = "F5_6";
        CameraAperture[CameraAperture["F6_3"] = 11] = "F6_3";
        CameraAperture[CameraAperture["F7_1"] = 12] = "F7_1";
        CameraAperture[CameraAperture["F8_0"] = 13] = "F8_0";
        CameraAperture[CameraAperture["F9_0"] = 14] = "F9_0";
        CameraAperture[CameraAperture["F10_0"] = 15] = "F10_0";
        CameraAperture[CameraAperture["F11_0"] = 16] = "F11_0";
        CameraAperture[CameraAperture["F13_0"] = 17] = "F13_0";
        CameraAperture[CameraAperture["F14_0"] = 18] = "F14_0";
        CameraAperture[CameraAperture["F16_0"] = 19] = "F16_0";
        CameraAperture[CameraAperture["F18_0"] = 20] = "F18_0";
        CameraAperture[CameraAperture["F20_0"] = 21] = "F20_0";
        CameraAperture[CameraAperture["F22_0"] = 22] = "F22_0";
      })(CameraAperture || (CameraAperture = exports('bo', {})));

      let CameraISO;

      (function (CameraISO) {
        CameraISO[CameraISO["ISO100"] = 0] = "ISO100";
        CameraISO[CameraISO["ISO200"] = 1] = "ISO200";
        CameraISO[CameraISO["ISO400"] = 2] = "ISO400";
        CameraISO[CameraISO["ISO800"] = 3] = "ISO800";
      })(CameraISO || (CameraISO = exports('bp', {})));

      let CameraShutter;

      (function (CameraShutter) {
        CameraShutter[CameraShutter["D1"] = 0] = "D1";
        CameraShutter[CameraShutter["D2"] = 1] = "D2";
        CameraShutter[CameraShutter["D4"] = 2] = "D4";
        CameraShutter[CameraShutter["D8"] = 3] = "D8";
        CameraShutter[CameraShutter["D15"] = 4] = "D15";
        CameraShutter[CameraShutter["D30"] = 5] = "D30";
        CameraShutter[CameraShutter["D60"] = 6] = "D60";
        CameraShutter[CameraShutter["D125"] = 7] = "D125";
        CameraShutter[CameraShutter["D250"] = 8] = "D250";
        CameraShutter[CameraShutter["D500"] = 9] = "D500";
        CameraShutter[CameraShutter["D1000"] = 10] = "D1000";
        CameraShutter[CameraShutter["D2000"] = 11] = "D2000";
        CameraShutter[CameraShutter["D4000"] = 12] = "D4000";
      })(CameraShutter || (CameraShutter = exports('bq', {})));

      let CameraType;

      (function (CameraType) {
        CameraType[CameraType["DEFAULT"] = -1] = "DEFAULT";
        CameraType[CameraType["LEFT_EYE"] = 0] = "LEFT_EYE";
        CameraType[CameraType["RIGHT_EYE"] = 1] = "RIGHT_EYE";
        CameraType[CameraType["MAIN"] = 2] = "MAIN";
      })(CameraType || (CameraType = exports('br', {})));

      let TrackingType;

      (function (TrackingType) {
        TrackingType[TrackingType["NO_TRACKING"] = 0] = "NO_TRACKING";
        TrackingType[TrackingType["POSITION_AND_ROTATION"] = 1] = "POSITION_AND_ROTATION";
        TrackingType[TrackingType["POSITION"] = 2] = "POSITION";
        TrackingType[TrackingType["ROTATION"] = 3] = "ROTATION";
      })(TrackingType || (TrackingType = exports('bs', {})));

      let CameraUsage;

      (function (CameraUsage) {
        CameraUsage[CameraUsage["EDITOR"] = 0] = "EDITOR";
        CameraUsage[CameraUsage["GAME_VIEW"] = 1] = "GAME_VIEW";
        CameraUsage[CameraUsage["SCENE_VIEW"] = 2] = "SCENE_VIEW";
        CameraUsage[CameraUsage["PREVIEW"] = 3] = "PREVIEW";
        CameraUsage[CameraUsage["GAME"] = 100] = "GAME";
      })(CameraUsage || (CameraUsage = exports('bt', {})));

      const SKYBOX_FLAG = exports('bu', ClearFlagBit.STENCIL << 1);
      const Camera = exports('bv', jsb.Camera);
      const cameraProto = jsb.Camera.prototype;
      Object.defineProperty(Camera, "standardExposureValue", {
        configurable: true,
        enumerable: true,

        get() {
          return Camera.getStandardExposureValue();
        }

      });
      Object.defineProperty(Camera, "standardLightMeterScale", {
        configurable: true,
        enumerable: true,

        get() {
          return Camera.getStandardLightMeterScale();
        }

      });
      Object.defineProperty(cameraProto, 'matView', {
        configurable: true,
        enumerable: true,

        get() {
          this.getMatView();
          fillMat4WithTempFloatArray(this._matView);
          return this._matView;
        }

      });
      Object.defineProperty(cameraProto, 'matProj', {
        configurable: true,
        enumerable: true,

        get() {
          this.getMatProj();
          fillMat4WithTempFloatArray(this._matProj);
          return this._matProj;
        }

      });
      Object.defineProperty(cameraProto, 'matProjInv', {
        configurable: true,
        enumerable: true,

        get() {
          this.getMatProjInv();
          fillMat4WithTempFloatArray(this._matProjInv);
          return this._matProjInv;
        }

      });
      Object.defineProperty(cameraProto, 'matViewProj', {
        configurable: true,
        enumerable: true,

        get() {
          this.getMatViewProj();
          fillMat4WithTempFloatArray(this._matViewProj);
          return this._matViewProj;
        }

      });
      Object.defineProperty(cameraProto, 'matViewProjInv', {
        configurable: true,
        enumerable: true,

        get() {
          this.getMatViewProjInv();
          fillMat4WithTempFloatArray(this._matViewProjInv);
          return this._matViewProjInv;
        }

      });
      const oldInitialize = cameraProto.initialize;

      cameraProto.initialize = function initialize() {
        oldInitialize.apply(this, arguments);
        this._matView = new Mat4();
        this._matProj = new Mat4();
        this._matProjInv = new Mat4();
        this._matViewProj = new Mat4();
        this._matViewProjInv = new Mat4();
      };

      const oldScreenPointToRay = cameraProto.screenPointToRay;
      const oldScreenToWorld = cameraProto.screenToWorld;
      const oldWorldToScreen = cameraProto.worldToScreen;
      const oldWorldMatrixToScreen = cameraProto.worldMatrixToScreen;

      cameraProto.screenPointToRay = function screenPointToRay(out, x, y) {
        _tempFloatArray[0] = x;
        _tempFloatArray[1] = y;
        oldScreenPointToRay.call(this);
        out.o.x = _tempFloatArray[0];
        out.o.y = _tempFloatArray[1];
        out.o.z = _tempFloatArray[2];
        out.d.x = _tempFloatArray[3];
        out.d.y = _tempFloatArray[4];
        out.d.z = _tempFloatArray[5];
        return out;
      };

      cameraProto.screenToWorld = function screenToWorld(out, screenPos) {
        _tempFloatArray[0] = screenPos.x;
        _tempFloatArray[1] = screenPos.y;
        _tempFloatArray[2] = screenPos.z;
        oldScreenToWorld.call(this);
        Vec3.set(out, _tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
        return out;
      };

      cameraProto.worldToScreen = function worldToScreen(out, worldPos) {
        _tempFloatArray[0] = worldPos.x;
        _tempFloatArray[1] = worldPos.y;
        _tempFloatArray[2] = worldPos.z;
        oldWorldToScreen.call(this);
        Vec3.set(out, _tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
        return out;
      };

      cameraProto.worldMatrixToScreen = function worldMatrixToScreen(out, worldMatrix, width, height) {
        _tempFloatArray[0] = worldMatrix.m00;
        _tempFloatArray[1] = worldMatrix.m01;
        _tempFloatArray[2] = worldMatrix.m02;
        _tempFloatArray[3] = worldMatrix.m03;
        _tempFloatArray[4] = worldMatrix.m04;
        _tempFloatArray[5] = worldMatrix.m05;
        _tempFloatArray[6] = worldMatrix.m06;
        _tempFloatArray[7] = worldMatrix.m07;
        _tempFloatArray[8] = worldMatrix.m08;
        _tempFloatArray[9] = worldMatrix.m09;
        _tempFloatArray[10] = worldMatrix.m10;
        _tempFloatArray[11] = worldMatrix.m11;
        _tempFloatArray[12] = worldMatrix.m12;
        _tempFloatArray[13] = worldMatrix.m13;
        _tempFloatArray[14] = worldMatrix.m14;
        _tempFloatArray[15] = worldMatrix.m15;
        _tempFloatArray[16] = width;
        _tempFloatArray[17] = height;
        oldWorldMatrixToScreen.call(this);
        fillMat4WithTempFloatArray(out);
        return out;
      };

      let ProbeClearFlag;

      (function (ProbeClearFlag) {
        ProbeClearFlag[ProbeClearFlag["SKYBOX"] = SKYBOX_FLAG | ClearFlagBit.DEPTH_STENCIL] = "SKYBOX";
        ProbeClearFlag[ProbeClearFlag["SOLID_COLOR"] = ClearFlagBit.ALL] = "SOLID_COLOR";
      })(ProbeClearFlag || (ProbeClearFlag = exports('bw', {})));

      let ProbeType;

      (function (ProbeType) {
        ProbeType[ProbeType["CUBE"] = 0] = "CUBE";
        ProbeType[ProbeType["PLANAR"] = 1] = "PLANAR";
      })(ProbeType || (ProbeType = exports('bx', {})));

      const ReflectionProbe = exports('by', jsb.ReflectionProbe);
      const reflectionProbeProto = jsb.ReflectionProbe.prototype;

      reflectionProbeProto._ctor = function (id) {
        this._probeId = id;
      };

      const Ambient = exports('bz', jsb.Ambient);
      legacyCC.Ambient = Ambient;
      const LODData = exports('bA', jsb.LODData);
      const LODGroup = exports('bB', jsb.LODGroup);
      function ColorTemperatureToRGB(rgb, kelvin) {
        if (kelvin < 1000.0) {
          kelvin = 1000.0;
        } else if (kelvin > 15000.0) {
          kelvin = 15000.0;
        }

        const kSqr = kelvin * kelvin;
        const u = (0.860117757 + 1.54118254e-4 * kelvin + 1.28641212e-7 * kSqr) / (1.0 + 8.42420235e-4 * kelvin + 7.08145163e-7 * kSqr);
        const v = (0.317398726 + 4.22806245e-5 * kelvin + 4.20481691e-8 * kSqr) / (1.0 - 2.89741816e-5 * kelvin + 1.61456053e-7 * kSqr);
        const d = 2.0 * u - 8.0 * v + 4.0;
        const x = 3.0 * u / d;
        const y = 2.0 * v / d;
        const z = 1.0 - x - y;
        const X = 1.0 / y * x;
        const Z = 1.0 / y * z;
        rgb.x = 3.2404542 * X + -1.5371385 + -0.4985314 * Z;
        rgb.y = -0.9692660 * X + 1.8760108 + 0.0415560 * Z;
        rgb.z = 0.0556434 * X + -0.2040259 + 1.0572252 * Z;
      }
      let LightType$1;

      (function (LightType) {
        LightType[LightType["DIRECTIONAL"] = 0] = "DIRECTIONAL";
        LightType[LightType["SPHERE"] = 1] = "SPHERE";
        LightType[LightType["SPOT"] = 2] = "SPOT";
        LightType[LightType["UNKNOWN"] = 3] = "UNKNOWN";
      })(LightType$1 || (LightType$1 = exports('bD', {})));

      const nt2lm = exports('bE', size => 4 * Math.PI * Math.PI * size * size);
      const Light = exports('bF', jsb.Light);
      legacyCC.Light = jsb.Light;
      const DirectionalLight = exports('bG', jsb.DirectionalLight);
      legacyCC.DirectionalLight = jsb.DirectionalLight;
      const SpotLight = exports('bH', jsb.SpotLight);
      legacyCC.SpotLight = jsb.SpotLight;
      const SphereLight = exports('bI', jsb.SphereLight);
      legacyCC.SphereLight = jsb.SphereLight;
      const FogType = exports('bJ', Enum({
        LINEAR: 0,
        EXP: 1,
        EXP_SQUARED: 2,
        LAYERED: 3
      }));
      const FogInfo = exports('bK', jsb.FogInfo);
      const Fog = exports('bL', jsb.Fog);
      legacyCC.Fog = Fog;
      const ShadowSize = exports('bM', Enum({
        Low_256x256: 256,
        Medium_512x512: 512,
        High_1024x1024: 1024,
        Ultra_2048x2048: 2048
      }));
      const ShadowType = exports('bN', Enum({
        Planar: 0,
        ShadowMap: 1
      }));
      const PCFType = exports('bO', Enum({
        HARD: 0,
        SOFT: 1,
        SOFT_2X: 2
      }));
      const CSMLevel = exports('bP', Enum({
        LEVEL_1: 1,
        LEVEL_2: 2,
        LEVEL_3: 3,
        LEVEL_4: 4
      }));
      const CSMOptimizationMode = exports('bQ', Enum({
        NONE: 1,
        RemoveDuplicates: 2,
        DisableRotaitonFix: 3
      }));
      const EnvironmentLightingType = exports('bR', Enum({
        HEMISPHERE_DIFFUSE: 0,
        AUTOGEN_HEMISPHERE_DIFFUSE_WITH_REFLECTION: 1,
        DIFFUSEMAP_WITH_REFLECTION: 2
      }));
      const ShadowsInfo = exports('bS', jsb.ShadowsInfo);
      const Shadows = exports('bT', jsb.Shadows);
      legacyCC.Shadows = Shadows;
      const Skybox = exports('bU', jsb.Skybox);
      legacyCC.Skybox = Skybox;

      const EffectAsset = exports('eN', jsb.EffectAsset);
      legacyCC.EffectAsset = EffectAsset;
      const effectAssetProto = EffectAsset.prototype;

      effectAssetProto._ctor = function () {
        jsb.Asset.prototype._ctor.apply(this, arguments);

        this.hideInEditor = false;
      };

      const EffectAssetProto = EffectAsset.prototype;
      serializable(EffectAssetProto, 'techniques', () => []);
      serializable(EffectAssetProto, 'shaders', () => []);
      serializable(EffectAssetProto, 'combinations', () => []);
      editorOnly(EffectAssetProto, 'hideInEditor', () => false);
      serializable(EffectAssetProto, 'hideInEditor', () => false);
      ccclass('cc.EffectAsset')(EffectAsset);

      const matProto = jsb.Material.prototype;

      function wrapSetProperty(cb, target, name, val, passIdx) {
        if (passIdx != undefined) {
          cb.call(target, name, val, passIdx);
        } else {
          cb.call(target, name, val);
        }
      }

      var MathType$1;

      (function (MathType) {
        MathType[MathType["VEC2"] = 0] = "VEC2";
        MathType[MathType["VEC3"] = 1] = "VEC3";
        MathType[MathType["VEC4"] = 2] = "VEC4";
        MathType[MathType["QUATERNION"] = 3] = "QUATERNION";
        MathType[MathType["MAT3"] = 4] = "MAT3";
        MathType[MathType["MAT4"] = 5] = "MAT4";
        MathType[MathType["SIZE"] = 6] = "SIZE";
        MathType[MathType["RECT"] = 7] = "RECT";
        MathType[MathType["COLOR"] = 8] = "COLOR";
      })(MathType$1 || (MathType$1 = {}));

      matProto.setProperty = function (name, val, passIdx) {
        if (Array.isArray(val)) {
          const first = val[0];

          if (typeof first === 'number') {
            if (Number.isInteger(first)) {
              wrapSetProperty(this.setPropertyInt32Array, this, name, val, passIdx);
            } else {
              wrapSetProperty(this.setPropertyFloat32Array, this, name, val, passIdx);
            }
          } else if (first instanceof Vec2) {
            wrapSetProperty(this.setPropertyVec2Array, this, name, val, passIdx);
          } else if (first instanceof Vec3) {
            wrapSetProperty(this.setPropertyVec3Array, this, name, val, passIdx);
          } else if (first instanceof Vec4) {
            wrapSetProperty(this.setPropertyVec4Array, this, name, val, passIdx);
          } else if (first instanceof Color) {
            wrapSetProperty(this.setPropertyColorArray, this, name, val, passIdx);
          } else if (first instanceof Mat3) {
            wrapSetProperty(this.setPropertyMat3Array, this, name, val, passIdx);
          } else if (first instanceof Mat4) {
            wrapSetProperty(this.setPropertyMat4Array, this, name, val, passIdx);
          } else if (first instanceof Quat) {
            wrapSetProperty(this.setPropertyQuatArray, this, name, val, passIdx);
          } else if (first instanceof TextureBase) {
            wrapSetProperty(this.setPropertyTextureBaseArray, this, name, val, passIdx);
          } else if (first instanceof Texture) {
            wrapSetProperty(this.setPropertyGFXTextureArray, this, name, val, passIdx);
          } else {
            legacyCC.error(`Material.setProperty Unknown type: ${val}`);
          }
        } else if (typeof val === 'number') {
          if (Number.isInteger(val)) {
            wrapSetProperty(this.setPropertyInt32, this, name, val, passIdx);
          } else {
            wrapSetProperty(this.setPropertyFloat32, this, name, val, passIdx);
          }
        } else if (val instanceof Vec2) {
          wrapSetProperty(this.setPropertyVec2, this, name, val, passIdx);
        } else if (val instanceof Vec3) {
          wrapSetProperty(this.setPropertyVec3, this, name, val, passIdx);
        } else if (val instanceof Vec4) {
          wrapSetProperty(this.setPropertyVec4, this, name, val, passIdx);
        } else if (val instanceof Color) {
          wrapSetProperty(this.setPropertyColor, this, name, val, passIdx);
        } else if (val instanceof Mat3) {
          wrapSetProperty(this.setPropertyMat3, this, name, val, passIdx);
        } else if (val instanceof Mat4) {
          wrapSetProperty(this.setPropertyMat4, this, name, val, passIdx);
        } else if (val instanceof Quat) {
          wrapSetProperty(this.setPropertyQuat, this, name, val, passIdx);
        } else if (val instanceof TextureBase) {
          wrapSetProperty(this.setPropertyTextureBase, this, name, val, passIdx);
        } else if (val instanceof Texture) {
          wrapSetProperty(this.setPropertyGFXTexture, this, name, val, passIdx);
        } else if (val === null) {
          if (passIdx) {
            this.setPropertyNull(name, passIdx);
          } else {
            this.setPropertyNull(name);
          }
        } else {
          legacyCC.error(`Material.setProperty Unknown type: ${val}`);
        }
      };

      matProto.getProperty = function (name, passIdx) {
        let val;

        if (passIdx !== undefined) {
          val = this._getProperty(name, passIdx);
        } else {
          val = this._getProperty(name);
        }

        if (Array.isArray(val)) {
          const first = val[0];
          const arr = [];

          if (first instanceof jsb.Vec2 || first.type === MathType$1.VEC2) {
            for (let i = 0, len = val.length; i < len; ++i) {
              const e = val[i];
              arr.push(new Vec2(e.x, e.y));
            }
          } else if (first.type === MathType$1.VEC3) {
            for (let i = 0, len = val.length; i < len; ++i) {
              const e = val[i];
              arr.push(new Vec3(e.x, e.y, e.z));
            }
          } else if (first.type === MathType$1.VEC4) {
            for (let i = 0, len = val.length; i < len; ++i) {
              const e = val[i];
              arr.push(new Vec4(e.x, e.y, e.z, e.w));
            }
          } else if (first instanceof jsb.Color) {
            for (let i = 0, len = val.length; i < len; ++i) {
              const e = val[i];
              arr.push(new Color(e.r, e.g, e.b, e.a));
            }
          } else if (first.type === MathType$1.MAT3) {
            for (let i = 0, len = val.length; i < len; ++i) {
              const e = val[i];
              arr.push(new Mat3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]));
            }
          } else if (first.type === MathType$1.MAT4) {
            for (let i = 0, len = val.length; i < len; ++i) {
              const e = val[i];
              arr.push(new Mat4(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10], e[11], e[12], e[13], e[14], e[15]));
            }
          } else if (first.type === MathType$1.QUATERNION) {
            for (let i = 0, len = val.length; i < len; ++i) {
              const e = val[i];
              arr.push(new Quat(e.x, e.y, e.z, e.w));
            }
          }

          return arr || val;
        } else if (val === null || val === undefined) {
          return null;
        }

        let ret;
        const e = val;

        if (val instanceof jsb.Vec2 || val.type === MathType$1.VEC2) {
          ret = new Vec3(e.x, e.y);
        } else if (val.type === MathType$1.VEC3) {
          ret = new Vec3(e.x, e.y, e.z);
        } else if (val.type === MathType$1.VEC4) {
          ret = new Vec4(e.x, e.y, e.z, e.w);
        } else if (val instanceof jsb.Color) {
          ret = new Color(e.r, e.g, e.b, e.a);
        } else if (val.type === MathType$1.MAT3) {
          ret = new Mat3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);
        } else if (val.type === MathType$1.MAT4) {
          ret = new Mat4(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10], e[11], e[12], e[13], e[14], e[15]);
        } else if (val.type === MathType$1.QUATERNION) {
          ret = new Quat(e.x, e.y, e.z, e.w);
        }

        return ret || val;
      };

      const Material = exports('cE', jsb.Material);
      legacyCC.Material = Material;
      const materialProto = Material.prototype;

      materialProto._ctor = function () {
        jsb.Asset.prototype._ctor.apply(this, arguments);

        this._props = [];
        this._passes = [];

        this._registerPassesUpdatedListener();

        this._isCtorCalled = true;
      };

      const oldOnLoaded$2 = materialProto.onLoaded;

      materialProto.onLoaded = function () {
        this._propsInternal = this._props;
        oldOnLoaded$2.call(this);
      };

      materialProto._onPassesUpdated = function () {
        this._passes = this.getPasses();
      };

      Object.defineProperty(materialProto, 'passes', {
        enumerable: true,
        configurable: true,

        get() {
          if (!this._isCtorCalled) {
            this._ctor();

            this._passes = this.getPasses();
          }

          return this._passes;
        }

      });
      const MaterialProto = Material.prototype;
      type(EffectAsset)(MaterialProto, '_effectAsset', () => null);
      serializable(MaterialProto, '_techIdx', () => 0);
      serializable(MaterialProto, '_defines', () => []);
      serializable(MaterialProto, '_states', () => []);
      serializable(MaterialProto, '_props', () => []);
      ccclass('cc.Material')(Material);

      const DEFAULT_WORLD_MIN_POS = exports('gm', new Vec3(-1024.0, -1024.0, -1024.0));
      const DEFAULT_WORLD_MAX_POS = exports('gn', new Vec3(1024.0, 1024.0, 1024.0));
      const DEFAULT_OCTREE_DEPTH = exports('go', 8);
      const FogType$1 = exports('gp', Enum({
        LINEAR: 0,
        EXP: 1,
        EXP_SQUARED: 2,
        LAYERED: 3
      }));
      const ShadowSize$1 = exports('gq', Enum({
        Low_256x256: 256,
        Medium_512x512: 512,
        High_1024x1024: 1024,
        Ultra_2048x2048: 2048
      }));
      const ShadowType$1 = exports('gr', Enum({
        Planar: 0,
        ShadowMap: 1
      }));
      const AmbientInfo = exports('gs', jsb.AmbientInfo);
      legacyCC.AmbientInfo = AmbientInfo;
      const SkyboxInfo = exports('gt', jsb.SkyboxInfo);
      legacyCC.SkyboxInfo = SkyboxInfo;
      const FogInfo$1 = exports('gu', jsb.FogInfo);
      legacyCC.FogInfo = FogInfo$1;
      FogInfo$1.FogType = FogType$1;
      const ShadowsInfo$1 = exports('gv', jsb.ShadowsInfo);
      legacyCC.ShadowsInfo = ShadowsInfo$1;
      const OctreeInfo = exports('gw', jsb.OctreeInfo);
      legacyCC.OctreeInfo = OctreeInfo;
      const LightProbeInfo = exports('gx', jsb.LightProbeInfo);
      const SceneGlobals = exports('gy', jsb.SceneGlobals);
      legacyCC.SceneGlobals = SceneGlobals;

      (function () {
        const sceneGlobalsProto = SceneGlobals.prototype;

        sceneGlobalsProto._ctor = function () {
          this._ambientRef = this.getAmbientInfo();
          this._shadowsRef = this.getShadowsInfo();
          this._skyboxRef = this.getSkyboxInfo();
          this._fogRef = this.getFogInfo();
          this._octreeRef = this.getOctreeInfo();
          this._lightProbeRef = this.getLightProbeInfo();
        };

        Object.defineProperty(sceneGlobalsProto, 'ambient', {
          enumerable: true,
          configurable: true,

          get() {
            return this._ambientRef;
          },

          set(v) {
            this._ambientRef = v;
            this.setAmbientInfo(v);
          }

        });
        Object.defineProperty(sceneGlobalsProto, 'shadows', {
          enumerable: true,
          configurable: true,

          get() {
            return this._shadowsRef;
          },

          set(v) {
            this._shadowsRef = v;
            this.setShadowsInfo(v);
          }

        });
        Object.defineProperty(sceneGlobalsProto, '_skybox', {
          enumerable: true,
          configurable: true,

          get() {
            return this._skyboxRef;
          },

          set(v) {
            this._skyboxRef = v;
            this.setSkyboxInfo(v);
          }

        });
        Object.defineProperty(sceneGlobalsProto, 'skybox', {
          enumerable: true,
          configurable: true,

          get() {
            return this._skyboxRef;
          },

          set(v) {
            this._skyboxRef = v;
            this.setSkyboxInfo(v);
          }

        });
        Object.defineProperty(sceneGlobalsProto, 'fog', {
          enumerable: true,
          configurable: true,

          get() {
            return this._fogRef;
          },

          set(v) {
            this._fogRef = v;
            this.setFogInfo(v);
          }

        });
        Object.defineProperty(sceneGlobalsProto, 'octree', {
          enumerable: true,
          configurable: true,

          get() {
            return this._octreeRef;
          },

          set(v) {
            this._octreeRef = v;
            this.setOctreeInfo(v);
          }

        });
        Object.defineProperty(sceneGlobalsProto, 'lightProbeInfo', {
          enumerable: true,
          configurable: true,

          get() {
            return this._lightProbeRef;
          },

          set(v) {
            this._lightProbeRef = v;
            this.setLightProbeInfo(v);
          }

        });
      })();

      function checkFieldIs(attr, value) {
        return function () {
          return this[attr] === value;
        };
      }

      function checkFieldNot(attr, value) {
        return function () {
          return this[attr] !== value;
        };
      }

      const SceneGlobalsProto = SceneGlobals.prototype;
      serializable(SceneGlobalsProto, 'ambient', () => new AmbientInfo());
      serializable(SceneGlobalsProto, 'shadows', () => new ShadowsInfo$1());
      serializable(SceneGlobalsProto, '_skybox', () => new SkyboxInfo());
      serializable(SceneGlobalsProto, 'fog', () => new FogInfo$1());
      const skyboxDescriptor = Object.getOwnPropertyDescriptor(SceneGlobalsProto, 'skybox');
      type(SkyboxInfo)(SceneGlobalsProto, 'skybox', skyboxDescriptor);
      serializable(SceneGlobalsProto, 'octree', () => new OctreeInfo());
      serializable(SceneGlobalsProto, 'lightProbeInfo', () => new LightProbeInfo());
      ccclass('cc.SceneGlobals')(SceneGlobals);
      const OctreeInfoProto = OctreeInfo.prototype;
      serializable(OctreeInfoProto, '_enabled', () => false);
      serializable(OctreeInfoProto, '_minPos', () => new Vec3(DEFAULT_WORLD_MIN_POS));
      serializable(OctreeInfoProto, '_maxPos', () => new Vec3(DEFAULT_WORLD_MAX_POS));
      serializable(OctreeInfoProto, '_depth', () => DEFAULT_OCTREE_DEPTH);
      const depthDescriptor = Object.getOwnPropertyDescriptor(OctreeInfoProto, 'depth');
      type(CCInteger)(OctreeInfoProto, 'depth', depthDescriptor);
      ccclass('cc.OctreeInfo')(OctreeInfo);
      const ShadowsInfoProto = ShadowsInfo$1.prototype;
      serializable(ShadowsInfoProto, '_enabled', () => false);
      serializable(ShadowsInfoProto, '_type', () => ShadowType$1.Planar);
      serializable(ShadowsInfoProto, '_normal', () => new Vec3(0, 1, 0));
      serializable(ShadowsInfoProto, '_distance', () => 0);
      serializable(ShadowsInfoProto, '_shadowColor', () => new Color(0, 0, 0, 76));
      serializable(ShadowsInfoProto, '_maxReceived', () => 4);
      serializable(ShadowsInfoProto, '_size', () => new Vec2(1024, 1024));
      const typeDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfoProto, 'type');
      type(ShadowType$1)(ShadowsInfoProto, 'type', typeDescriptor);
      const shadowColorDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfoProto, 'shadowColor');
      visible(checkFieldIs("_type", ShadowType$1.Planar))(ShadowsInfoProto, 'shadowColor', shadowColorDescriptor);
      const planeDirectionDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfoProto, 'planeDirection');
      visible(checkFieldIs("_type", ShadowType$1.Planar))(ShadowsInfoProto, 'planeDirection', planeDirectionDescriptor);
      const planeHeightDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfoProto, 'planeHeight');
      visible(checkFieldIs("_type", ShadowType$1.Planar))(ShadowsInfoProto, 'planeHeight', planeHeightDescriptor);
      type(CCFloat)(ShadowsInfoProto, 'planeHeight', planeHeightDescriptor);
      const maxReceivedDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfoProto, 'maxReceived');
      visible(checkFieldIs("_type", ShadowType$1.ShadowMap))(ShadowsInfoProto, 'maxReceived', maxReceivedDescriptor);
      type(CCInteger)(ShadowsInfoProto, 'maxReceived', maxReceivedDescriptor);
      const shadowMapSizeDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfoProto, 'shadowMapSize');
      visible(checkFieldIs("_type", ShadowType$1.ShadowMap))(ShadowsInfoProto, 'shadowMapSize', shadowMapSizeDescriptor);
      type(ShadowSize$1)(ShadowsInfoProto, 'shadowMapSize', shadowMapSizeDescriptor);
      ccclass('cc.ShadowsInfo')(ShadowsInfo$1);
      const FogInfoProto = FogInfo$1.prototype;
      serializable(FogInfoProto, '_type', () => FogType$1.LINEAR);
      serializable(FogInfoProto, '_fogColor', () => new Color('#C8C8C8'));
      serializable(FogInfoProto, '_enabled', () => false);
      serializable(FogInfoProto, '_fogDensity', () => 0.3);
      serializable(FogInfoProto, '_fogStart', () => 0.5);
      serializable(FogInfoProto, '_fogEnd', () => 300);
      serializable(FogInfoProto, '_fogAtten', () => 5);
      serializable(FogInfoProto, '_fogTop', () => 1.5);
      serializable(FogInfoProto, '_fogRange', () => 1.2);
      serializable(FogInfoProto, '_accurate', () => false);
      const fogTypeDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'type');
      type(FogType$1)(FogInfoProto, 'type', fogTypeDescriptor);
      const fogDensityDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogDensity');
      type(CCFloat)(FogInfoProto, 'fogDensity', fogDensityDescriptor);
      const fogStartDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogStart');
      type(CCFloat)(FogInfoProto, 'fogStart', fogStartDescriptor);
      visible(checkFieldNot("_type", FogType$1.LAYERED))(FogInfoProto, 'fogStart', fogStartDescriptor);
      const fogEndDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogEnd');
      type(CCFloat)(FogInfoProto, 'fogEnd', fogEndDescriptor);
      visible(checkFieldIs("_type", FogType$1.LINEAR))(FogInfoProto, 'fogEnd', fogEndDescriptor);
      const fogAttenDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogAtten');
      type(CCFloat)(FogInfoProto, 'fogAtten', fogAttenDescriptor);
      visible(checkFieldNot("_type", FogType$1.LINEAR))(FogInfoProto, 'fogAtten', fogAttenDescriptor);
      const fogTopDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogTop');
      type(CCFloat)(FogInfoProto, 'fogTop', fogTopDescriptor);
      visible(checkFieldIs("_type", FogType$1.LAYERED))(FogInfoProto, 'fogTop', fogTopDescriptor);
      const fogRangeDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogRange');
      type(CCFloat)(FogInfoProto, 'fogRange', fogRangeDescriptor);
      visible(checkFieldIs("_type", FogType$1.LAYERED))(FogInfoProto, 'fogRange', fogRangeDescriptor);
      ccclass('cc.FogInfo')(FogInfo$1);
      const SkyboxInfoProto = SkyboxInfo.prototype;
      serializable(SkyboxInfoProto, '_envLightingType', () => EnvironmentLightingType.HEMISPHERE_DIFFUSE);
      formerlySerializedAs('_envmap')(SkyboxInfoProto, '_envmapHDR', () => null);
      type(TextureCube)(SkyboxInfoProto, '_envmapHDR', () => null);
      serializable(SkyboxInfoProto, '_envmapHDR', () => null);
      type(TextureCube)(SkyboxInfoProto, '_envmapLDR', () => null);
      serializable(SkyboxInfoProto, '_envmapLDR', () => null);
      type(TextureCube)(SkyboxInfoProto, '_diffuseMapHDR', () => null);
      serializable(SkyboxInfoProto, '_diffuseMapHDR', () => null);
      type(TextureCube)(SkyboxInfoProto, '_diffuseMapLDR', () => null);
      serializable(SkyboxInfoProto, '_diffuseMapLDR', () => null);
      serializable(SkyboxInfoProto, '_enabled', () => false);
      serializable(SkyboxInfoProto, '_useHDR', () => true);
      type(Material)(SkyboxInfoProto, '_editableMaterial', () => null);
      serializable(SkyboxInfoProto, '_editableMaterial', () => null);
      type(TextureCube)(SkyboxInfoProto, '_reflectionHDR', () => null);
      serializable(SkyboxInfoProto, '_reflectionHDR', () => null);
      type(TextureCube)(SkyboxInfoProto, '_reflectionLDR', () => null);
      serializable(SkyboxInfoProto, '_reflectionLDR', () => null);
      const skyboxRotationAngleDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfoProto, 'rotationAngle');
      type(CCFloat)(SkyboxInfoProto, 'rotationAngle', skyboxRotationAngleDescriptor);
      const skyboxReflectionMapDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfoProto, 'reflectionMap');
      type(TextureCube)(SkyboxInfoProto, 'reflectionMap', skyboxReflectionMapDescriptor);
      const envLightingTypeDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfoProto, 'envLightingType');
      type(EnvironmentLightingType)(SkyboxInfoProto, 'envLightingType', envLightingTypeDescriptor);
      const envmapDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfoProto, 'envmap');
      type(TextureCube)(SkyboxInfoProto, 'envmap', envmapDescriptor);
      const diffuseMapDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfoProto, 'diffuseMap');
      type(TextureCube)(SkyboxInfoProto, 'diffuseMap', diffuseMapDescriptor);
      const skyboxMaterialDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfoProto, 'skyboxMaterial');
      type(Material)(SkyboxInfoProto, 'skyboxMaterial', skyboxMaterialDescriptor);
      serializable(SkyboxInfoProto, '_rotationAngle', () => 0);
      ccclass('cc.SkyboxInfo')(SkyboxInfo);
      const AmbientInfoProto = AmbientInfo.prototype;
      formerlySerializedAs('_skyColor')(AmbientInfoProto, '_skyColorHDR', () => new Vec4(0.2, 0.5, 0.8, 1.0));
      serializable(AmbientInfoProto, '_skyColorHDR', () => new Vec4(0.2, 0.5, 0.8, 1.0));
      formerlySerializedAs('_skyIllum')(AmbientInfoProto, '_skyIllumHDR', () => Ambient.SKY_ILLUM);
      serializable(AmbientInfoProto, '_skyIllumHDR', () => Ambient.SKY_ILLUM);
      formerlySerializedAs('_groundAlbedo')(AmbientInfoProto, '_groundAlbedoHDR', () => new Vec4(0.2, 0.2, 0.2, 1.0));
      serializable(AmbientInfoProto, '_groundAlbedoHDR', () => new Vec4(0.2, 0.2, 0.2, 1.0));
      serializable(AmbientInfoProto, '_skyColorLDR', () => new Vec4(0.2, 0.5, 0.8, 1.0));
      serializable(AmbientInfoProto, '_skyIllumLDR', () => Ambient.SKY_ILLUM);
      serializable(AmbientInfoProto, '_groundAlbedoLDR', () => new Vec4(0.2, 0.2, 0.2, 1.0));
      const skyIllumDescriptor = Object.getOwnPropertyDescriptor(AmbientInfoProto, 'skyIllum');
      type(CCFloat)(AmbientInfoProto, 'skyIllum', skyIllumDescriptor);
      ccclass('cc.AmbientInfo')(AmbientInfo);
      const LightProbeInfoProto = LightProbeInfo.prototype;
      serializable(LightProbeInfoProto, '_giScale', () => 1.0);
      serializable(LightProbeInfoProto, '_giSamples', () => 1024);
      serializable(LightProbeInfoProto, '_bounces', () => 2);
      serializable(LightProbeInfoProto, '_reduceRinging', () => 0.0);
      serializable(LightProbeInfoProto, '_showProbe', () => true);
      serializable(LightProbeInfoProto, '_showWireframe', () => true);
      serializable(LightProbeInfoProto, '_showConvex', () => false);
      serializable(LightProbeInfoProto, '_data', () => null);
      const lightProbeGIScaleDescriptor = Object.getOwnPropertyDescriptor(LightProbeInfoProto, 'giScale');
      type(CCFloat)(LightProbeInfoProto, 'giScale', lightProbeGIScaleDescriptor);
      const lightProbeGISamplesDescriptor = Object.getOwnPropertyDescriptor(LightProbeInfoProto, 'giSamples');
      type(CCInteger)(LightProbeInfoProto, 'giSamples', lightProbeGISamplesDescriptor);
      const lightProbeBouncesDescriptor = Object.getOwnPropertyDescriptor(LightProbeInfoProto, 'bounces');
      type(CCInteger)(LightProbeInfoProto, 'bounces', lightProbeBouncesDescriptor);
      const lightProbeReduceRingingDescriptor = Object.getOwnPropertyDescriptor(LightProbeInfoProto, 'reduceRinging');
      type(CCFloat)(LightProbeInfoProto, 'reduceRinging', lightProbeReduceRingingDescriptor);
      ccclass('cc.LightProbeInfo')(LightProbeInfo);

      var _dec$8, _class$8;
      replaceProperty(Node$1.prototype, 'Node', [{
        name: 'childrenCount',
        newName: 'children.length',

        customGetter() {
          return this.children.length;
        }

      }]);
      replaceProperty(Node$1.prototype, 'Node', [{
        name: 'width',
        targetName: 'node.getComponent(UITransform)',

        customGetter() {
          return this._uiProps.uiTransformComp.width;
        },

        customSetter(value) {
          this._uiProps.uiTransformComp.width = value;
        }

      }, {
        name: 'height',
        targetName: 'node.getComponent(UITransform)',

        customGetter() {
          return this._uiProps.uiTransformComp.height;
        },

        customSetter(value) {
          this._uiProps.uiTransformComp.height = value;
        }

      }, {
        name: 'anchorX',
        targetName: 'node.getComponent(UITransform)',

        customGetter() {
          return this._uiProps.uiTransformComp.anchorX;
        },

        customSetter(value) {
          this._uiProps.uiTransformComp.anchorX = value;
        }

      }, {
        name: 'anchorY',
        targetName: 'node.getComponent(UITransform)',

        customGetter() {
          return this._uiProps.uiTransformComp.anchorY;
        },

        customSetter(value) {
          this._uiProps.uiTransformComp.anchorY = value;
        }

      }, {
        name: 'getAnchorPoint',
        targetName: 'node.getComponent(UITransform)',

        customFunction(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._uiProps.uiTransformComp.anchorPoint);
          return out;
        }

      }, {
        name: 'setAnchorPoint',
        targetName: 'node.getComponent(UITransform)',

        customFunction(point, y) {
          this._uiProps.uiTransformComp.setAnchorPoint(point, y);
        }

      }, {
        name: 'getContentSize',
        targetName: 'node.getComponent(UITransform)',

        customFunction(out) {
          if (!out) {
            out = new Size();
          }

          out.set(this._uiProps.uiTransformComp.contentSize);
          return out;
        }

      }, {
        name: 'setContentSize',
        targetName: 'node.getComponent(UITransform)',

        customFunction(size, height) {
          if (typeof size === 'number') {
            this._uiProps.uiTransformComp.setContentSize(size, height);
          } else {
            this._uiProps.uiTransformComp.setContentSize(size);
          }
        }

      }]);
      removeProperty(SceneGlobals.prototype, 'SceneGlobals.prototype', [{
        name: 'aspect'
      }, {
        name: 'selfShadow'
      }, {
        name: 'linear'
      }, {
        name: 'packing'
      }, {
        name: 'autoAdapt'
      }, {
        name: 'fixedArea'
      }, {
        name: 'pcf'
      }, {
        name: 'bias'
      }, {
        name: 'normalBias'
      }, {
        name: 'near'
      }, {
        name: 'far'
      }, {
        name: 'shadowDistance'
      }, {
        name: 'invisibleOcclusionRange'
      }, {
        name: 'orthoSize'
      }, {
        name: 'saturation'
      }]);
      replaceProperty(SceneGlobals.prototype, 'SceneGlobals.prototype', [{
        name: 'distance',
        newName: 'planeHeight'
      }, {
        name: 'normal',
        newName: 'planeDirection'
      }, {
        name: 'size',
        newName: 'shadowMapSize'
      }]);
      removeProperty(Node$1.prototype, 'Node.prototype', [{
        name: 'addLayer'
      }, {
        name: 'removeLayer'
      }]);
      replaceProperty(NodeUIProperties.prototype, 'NodeUIProperties', [{
        name: 'opacityDirty',
        newName: 'colorDirty'
      }]);
      removeProperty(Layers, 'Layers', [{
        name: 'All'
      }, {
        name: 'RaycastMask'
      }, {
        name: 'check'
      }]);
      replaceProperty(Layers, 'Layers', [{
        name: 'Default',
        newName: 'DEFAULT',
        target: Layers.Enum,
        targetName: 'Layers.Enum'
      }, {
        name: 'Always',
        newName: 'ALWAYS',
        target: Layers.Enum,
        targetName: 'Layers.Enum'
      }, {
        name: 'IgnoreRaycast',
        newName: 'IGNORE_RAYCAST',
        target: Layers.Enum,
        targetName: 'Layers.Enum'
      }, {
        name: 'Gizmos',
        newName: 'GIZMOS',
        target: Layers.Enum,
        targetName: 'Layers.Enum'
      }, {
        name: 'Editor',
        newName: 'EDITOR',
        target: Layers.Enum,
        targetName: 'Layers.Enum'
      }, {
        name: 'UI',
        newName: 'UI_3D',
        target: Layers.Enum,
        targetName: 'Layers.Enum'
      }, {
        name: 'UI2D',
        newName: 'UI_2D',
        target: Layers.Enum,
        targetName: 'Layers.Enum'
      }, {
        name: 'SceneGizmo',
        newName: 'SCENE_GIZMO',
        target: Layers.Enum,
        targetName: 'Layers.Enum'
      }, {
        name: 'makeInclusiveMask',
        newName: 'makeMaskInclude',
        target: Layers,
        targetName: 'Layers'
      }, {
        name: 'makeExclusiveMask',
        newName: 'makeMaskExclude',
        target: Layers,
        targetName: 'Layers'
      }]);
      removeProperty(Layers.Enum, 'Layers.Enum', [{
        name: 'ALWAYS'
      }]);
      removeProperty(Layers.BitMask, 'Layers.BitMask', [{
        name: 'ALWAYS'
      }]);
      const HideInHierarchy$1 = CCObject.Flags.HideInHierarchy;
      const DontSave$1 = CCObject.Flags.DontSave;
      let PrivateNode = exports('gz', (_dec$8 = ccclass('cc.PrivateNode'), _dec$8(_class$8 = class PrivateNode extends Node$1 {
        constructor(name) {
          super(name);
          warnID(12003, this.name);
          this.hideFlags |= DontSave$1 | HideInHierarchy$1;
        }

      }) || _class$8));

      replaceProperty(SystemEventType, 'SystemEventType', ['MOUSE_ENTER', 'MOUSE_LEAVE', 'TRANSFORM_CHANGED', 'SCENE_CHANGED_FOR_PERSISTS', 'SIZE_CHANGED', 'ANCHOR_CHANGED', 'COLOR_CHANGED', 'CHILD_ADDED', 'CHILD_REMOVED', 'PARENT_CHANGED', 'NODE_DESTROYED', 'LAYER_CHANGED', 'SIBLING_ORDER_CHANGED'].map(name => ({
        name,
        target: Node$1.EventType,
        targetName: 'Node.EventType'
      })));
      replaceProperty(Node$1.EventType, 'Node.EventType', [{
        name: 'DEVICEMOTION',
        target: SystemEvent.EventType,
        targetName: 'SystemEvent.EventType'
      }, {
        name: 'KEY_DOWN',
        target: SystemEvent.EventType,
        targetName: 'SystemEvent.EventType'
      }, {
        name: 'KEY_UP',
        target: SystemEvent.EventType,
        targetName: 'SystemEvent.EventType'
      }]);
      legacyCC.PrivateNode = PrivateNode;

      deprecateModuleExportedName({
        BaseNode: {
          newName: 'Node',
          since: '3.7.0',
          removed: false
        }
      });

      var _dec$9, _class$9, _class2$6, _initializer$6, _dec2$4, _dec3$2, _dec4$1, _dec5, _dec6, _class4$2, _class5$1, _initializer2$5, _initializer3$5, _initializer4$4, _initializer5$3, _initializer6, _dec7, _class7, _class8, _initializer7, _dec8, _dec9, _class10, _class11, _initializer8, _initializer9, _initializer10, _dec10, _dec11, _dec12, _class13, _class14, _initializer11, _initializer12, _dec13, _dec14, _dec15, _class16, _class17, _initializer13, _initializer14, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class19, _class20, _initializer15, _initializer16, _initializer17, _initializer18, _initializer19, _initializer20, _dec22, _dec23, _dec24, _dec25, _class22, _class23, _initializer21, _initializer22, _initializer23, _initializer24, _initializer25, _initializer26;

      let TargetInfo = (_dec$9 = ccclass('cc.TargetInfo'), _dec$9(_class$9 = (_class2$6 = class TargetInfo {
        constructor() {
          this.localID = _initializer$6 && _initializer$6();
        }

      }, (_initializer$6 = applyDecoratedInitializer(_class2$6.prototype, "localID", [serializable], function () {
        return [];
      })), _class2$6)) || _class$9);
      let TargetOverrideInfo = (_dec2$4 = ccclass('cc.TargetOverrideInfo'), _dec3$2 = type(CCObject), _dec4$1 = type(TargetInfo), _dec5 = type(Node$1), _dec6 = type(TargetInfo), _dec2$4(_class4$2 = (_class5$1 = class TargetOverrideInfo {
        constructor() {
          this.source = _initializer2$5 && _initializer2$5();
          this.sourceInfo = _initializer3$5 && _initializer3$5();
          this.propertyPath = _initializer4$4 && _initializer4$4();
          this.target = _initializer5$3 && _initializer5$3();
          this.targetInfo = _initializer6 && _initializer6();
        }

      }, (_initializer2$5 = applyDecoratedInitializer(_class5$1.prototype, "source", [serializable, _dec3$2], function () {
        return null;
      }), _initializer3$5 = applyDecoratedInitializer(_class5$1.prototype, "sourceInfo", [serializable, _dec4$1], function () {
        return null;
      }), _initializer4$4 = applyDecoratedInitializer(_class5$1.prototype, "propertyPath", [serializable], function () {
        return [];
      }), _initializer5$3 = applyDecoratedInitializer(_class5$1.prototype, "target", [serializable, _dec5], function () {
        return null;
      }), _initializer6 = applyDecoratedInitializer(_class5$1.prototype, "targetInfo", [serializable, _dec6], function () {
        return null;
      })), _class5$1)) || _class4$2);
      let CompPrefabInfo = (_dec7 = ccclass('cc.CompPrefabInfo'), _dec7(_class7 = (_class8 = class CompPrefabInfo {
        constructor() {
          this.fileId = _initializer7 && _initializer7();
        }

      }, (_initializer7 = applyDecoratedInitializer(_class8.prototype, "fileId", [serializable], function () {
        return '';
      })), _class8)) || _class7);
      let PropertyOverrideInfo = (_dec8 = ccclass('CCPropertyOverrideInfo'), _dec9 = type(TargetInfo), _dec8(_class10 = (_class11 = class PropertyOverrideInfo {
        constructor() {
          this.targetInfo = _initializer8 && _initializer8();
          this.propertyPath = _initializer9 && _initializer9();
          this.value = _initializer10 && _initializer10();
        }

        isTarget(localID, propPath) {
        }

      }, (_initializer8 = applyDecoratedInitializer(_class11.prototype, "targetInfo", [serializable, _dec9], function () {
        return null;
      }), _initializer9 = applyDecoratedInitializer(_class11.prototype, "propertyPath", [serializable], function () {
        return [];
      }), _initializer10 = applyDecoratedInitializer(_class11.prototype, "value", [serializable], null)), _class11)) || _class10);
      let MountedChildrenInfo = (_dec10 = ccclass('cc.MountedChildrenInfo'), _dec11 = type(TargetInfo), _dec12 = type([Node$1]), _dec10(_class13 = (_class14 = class MountedChildrenInfo {
        constructor() {
          this.targetInfo = _initializer11 && _initializer11();
          this.nodes = _initializer12 && _initializer12();
        }

        isTarget(localID) {
        }

      }, (_initializer11 = applyDecoratedInitializer(_class14.prototype, "targetInfo", [serializable, _dec11], function () {
        return null;
      }), _initializer12 = applyDecoratedInitializer(_class14.prototype, "nodes", [serializable, _dec12], function () {
        return [];
      })), _class14)) || _class13);
      let MountedComponentsInfo = (_dec13 = ccclass('cc.MountedComponentsInfo'), _dec14 = type(TargetInfo), _dec15 = type([Component]), _dec13(_class16 = (_class17 = class MountedComponentsInfo {
        constructor() {
          this.targetInfo = _initializer13 && _initializer13();
          this.components = _initializer14 && _initializer14();
        }

        isTarget(localID) {
        }

      }, (_initializer13 = applyDecoratedInitializer(_class17.prototype, "targetInfo", [serializable, _dec14], function () {
        return null;
      }), _initializer14 = applyDecoratedInitializer(_class17.prototype, "components", [serializable, _dec15], function () {
        return [];
      })), _class17)) || _class16);
      let PrefabInstance = (_dec16 = ccclass('cc.PrefabInstance'), _dec17 = type(Node$1), _dec18 = type([MountedChildrenInfo]), _dec19 = type([MountedComponentsInfo]), _dec20 = type([PropertyOverrideInfo]), _dec21 = type([TargetInfo]), _dec16(_class19 = (_class20 = class PrefabInstance {
        constructor() {
          this.fileId = _initializer15 && _initializer15();
          this.prefabRootNode = _initializer16 && _initializer16();
          this.mountedChildren = _initializer17 && _initializer17();
          this.mountedComponents = _initializer18 && _initializer18();
          this.propertyOverrides = _initializer19 && _initializer19();
          this.removedComponents = _initializer20 && _initializer20();
          this.targetMap = {};
          this.expanded = false;
        }

        findPropertyOverride(localID, propPath) {
        }

        removePropertyOverride(localID, propPath) {
        }

      }, (_initializer15 = applyDecoratedInitializer(_class20.prototype, "fileId", [serializable], function () {
        return '';
      }), _initializer16 = applyDecoratedInitializer(_class20.prototype, "prefabRootNode", [serializable, _dec17], null), _initializer17 = applyDecoratedInitializer(_class20.prototype, "mountedChildren", [serializable, _dec18], function () {
        return [];
      }), _initializer18 = applyDecoratedInitializer(_class20.prototype, "mountedComponents", [serializable, _dec19], function () {
        return [];
      }), _initializer19 = applyDecoratedInitializer(_class20.prototype, "propertyOverrides", [serializable, _dec20], function () {
        return [];
      }), _initializer20 = applyDecoratedInitializer(_class20.prototype, "removedComponents", [serializable, _dec21], function () {
        return [];
      })), _class20)) || _class19);
      let PrefabInfo = (_dec22 = ccclass('cc.PrefabInfo'), _dec23 = type(Node$1), _dec24 = type(PrefabInstance), _dec25 = type([TargetOverrideInfo]), _dec22(_class22 = (_class23 = class PrefabInfo {
        constructor() {
          this.root = _initializer21 && _initializer21();
          this.asset = _initializer22 && _initializer22();
          this.fileId = _initializer23 && _initializer23();
          this.instance = _initializer24 && _initializer24();
          this.targetOverrides = _initializer25 && _initializer25();
          this.nestedPrefabInstanceRoots = _initializer26 && _initializer26();
        }

      }, (_initializer21 = applyDecoratedInitializer(_class23.prototype, "root", [serializable, _dec23], null), _initializer22 = applyDecoratedInitializer(_class23.prototype, "asset", [serializable], null), _initializer23 = applyDecoratedInitializer(_class23.prototype, "fileId", [serializable], function () {
        return '';
      }), _initializer24 = applyDecoratedInitializer(_class23.prototype, "instance", [serializable, _dec24], null), _initializer25 = applyDecoratedInitializer(_class23.prototype, "targetOverrides", [serializable, _dec25], null), _initializer26 = applyDecoratedInitializer(_class23.prototype, "nestedPrefabInstanceRoots", [serializable], null)), _class23)) || _class22);
      legacyCC._PrefabInfo = PrefabInfo;

      function createNodeWithPrefab(node) {
        const prefabInfo = node._prefab;

        if (!prefabInfo) {
          return;
        }

        const prefabInstance = prefabInfo.instance;

        if (!prefabInstance) {
          return;
        }

        if (!prefabInfo.asset) {
          {
            errorID(3701, node.name);
          }

          prefabInfo.instance = undefined;
          return;
        }

        const _objFlags = node._objFlags;
        const _parent = node._parent;
        const _id = node._id;
        const _prefab = node._prefab;
        const editorExtras = node[editorExtrasTag];
        legacyCC.game._isCloning = true;

        {
          prefabInfo.asset._doInstantiate(node);
        }

        legacyCC.game._isCloning = false;
        node._objFlags = _objFlags;
        node._parent = _parent;
        node._id = _id;

        if (node._prefab) {
          node._prefab.instance = _prefab === null || _prefab === void 0 ? void 0 : _prefab.instance;
        }
      }
      function generateTargetMap(node, targetMap, isRoot) {
        var _node$_prefab;

        if (!targetMap) {
          return;
        }

        if (!node) {
          return;
        }

        let curTargetMap = targetMap;
        const prefabInstance = (_node$_prefab = node._prefab) === null || _node$_prefab === void 0 ? void 0 : _node$_prefab.instance;

        if (!isRoot && prefabInstance) {
          targetMap[prefabInstance.fileId] = {};
          curTargetMap = targetMap[prefabInstance.fileId];
        }

        const prefabInfo = node._prefab;

        if (prefabInfo) {
          curTargetMap[prefabInfo.fileId] = node;
        }

        const components = node.components;

        for (let i = 0; i < components.length; i++) {
          const comp = components[i];

          if (comp.__prefab) {
            curTargetMap[comp.__prefab.fileId] = comp;
          }
        }

        for (let i = 0; i < node.children.length; i++) {
          const childNode = node.children[i];
          generateTargetMap(childNode, curTargetMap, false);
        }
      }
      function getTarget(localID, targetMap) {
        if (!localID) {
          return null;
        }

        let target = null;
        let targetIter = targetMap;

        for (let i = 0; i < localID.length; i++) {
          if (!targetIter) {
            return null;
          }

          targetIter = targetIter[localID[i]];
        }

        target = targetIter;
        return target;
      }
      function applyMountedChildren(node, mountedChildren, targetMap) {
        if (!mountedChildren) {
          return;
        }

        for (let i = 0; i < mountedChildren.length; i++) {
          const childInfo = mountedChildren[i];

          if (childInfo && childInfo.targetInfo) {
            const target = getTarget(childInfo.targetInfo.localID, targetMap);

            if (!target) {
              continue;
            }

            let curTargetMap = targetMap;
            const localID = childInfo.targetInfo.localID;

            if (localID.length > 0) {
              for (let i = 0; i < localID.length - 1; i++) {
                curTargetMap = curTargetMap[localID[i]];
              }
            }

            if (childInfo.nodes) {
              for (let i = 0; i < childInfo.nodes.length; i++) {
                const childNode = childInfo.nodes[i];

                if (!childNode || target._children.includes(childNode)) {
                  continue;
                }

                target._children.push(childNode);

                childNode._parent = target;

                generateTargetMap(childNode, curTargetMap, false);
                childNode._siblingIndex = target._children.length - 1;
                expandPrefabInstanceNode(childNode, true);
              }
            }
          }
        }
      }
      function applyMountedComponents(node, mountedComponents, targetMap) {
        if (!mountedComponents) {
          return;
        }

        for (let i = 0; i < mountedComponents.length; i++) {
          const componentsInfo = mountedComponents[i];

          if (componentsInfo && componentsInfo.targetInfo) {
            const target = getTarget(componentsInfo.targetInfo.localID, targetMap);

            if (!target) {
              continue;
            }

            if (componentsInfo.components) {
              for (let i = 0; i < componentsInfo.components.length; i++) {
                const comp = componentsInfo.components[i];

                if (!comp) {
                  continue;
                }

                comp.node = target;

                target._components.push(comp);
              }
            }
          }
        }
      }
      function applyRemovedComponents(node, removedComponents, targetMap) {
        if (!removedComponents) {
          return;
        }

        for (let i = 0; i < removedComponents.length; i++) {
          const targetInfo = removedComponents[i];

          if (targetInfo) {
            const target = getTarget(targetInfo.localID, targetMap);

            if (!target || !target.node) {
              continue;
            }

            const index = target.node.components.indexOf(target);

            if (index >= 0) {
              target.node._components.splice(index, 1);
            }
          }
        }
      }
      function applyPropertyOverrides(node, propertyOverrides, targetMap) {
        if (propertyOverrides.length <= 0) {
          return;
        }

        let target = null;

        for (let i = 0; i < propertyOverrides.length; i++) {
          const propOverride = propertyOverrides[i];

          if (propOverride && propOverride.targetInfo) {
            const targetInfo = propOverride.targetInfo;
            target = getTarget(targetInfo.localID, targetMap);

            if (!target) {
              continue;
            }

            let targetPropOwner = target;
            const propertyPath = propOverride.propertyPath.slice();

            if (propertyPath.length > 0) {
              const targetPropName = propertyPath.pop();

              if (!targetPropName) {
                continue;
              }

              for (let i = 0; i < propertyPath.length; i++) {
                const propName = propertyPath[i];
                targetPropOwner = targetPropOwner[propName];

                if (!targetPropOwner) {
                  break;
                }
              }

              if (!targetPropOwner) {
                continue;
              }

              if (Array.isArray(targetPropOwner)) {
                if (targetPropName === 'length') {
                  targetPropOwner[targetPropName] = propOverride.value;
                } else {
                  const index = Number.parseInt(targetPropName);

                  if (Number.isInteger(index) && index < targetPropOwner.length) {
                    targetPropOwner[targetPropName] = propOverride.value;
                  }
                }
              } else if (targetPropOwner[targetPropName] instanceof ValueType) {
                targetPropOwner[targetPropName].set(propOverride.value);
              } else {
                targetPropOwner[targetPropName] = propOverride.value;
              }
            }
          }
        }
      }
      function applyTargetOverrides(node) {
        var _node$_prefab2;

        const targetOverrides = (_node$_prefab2 = node._prefab) === null || _node$_prefab2 === void 0 ? void 0 : _node$_prefab2.targetOverrides;

        if (targetOverrides) {
          for (let i = 0; i < targetOverrides.length; i++) {
            var _targetOverride$targe, _targetOverride$targe2;

            const targetOverride = targetOverrides[i];
            let source = targetOverride.source;
            const sourceInfo = targetOverride.sourceInfo;

            if (sourceInfo) {
              var _targetOverride$sourc, _targetOverride$sourc2;

              const sourceInstance = (_targetOverride$sourc = targetOverride.source) === null || _targetOverride$sourc === void 0 ? void 0 : (_targetOverride$sourc2 = _targetOverride$sourc._prefab) === null || _targetOverride$sourc2 === void 0 ? void 0 : _targetOverride$sourc2.instance;

              if (sourceInstance && sourceInstance.targetMap) {
                source = getTarget(sourceInfo.localID, sourceInstance.targetMap);
              }
            }

            if (!source) {
              continue;
            }

            let target = null;
            const targetInfo = targetOverride.targetInfo;

            if (!targetInfo) {
              continue;
            }

            const targetInstance = (_targetOverride$targe = targetOverride.target) === null || _targetOverride$targe === void 0 ? void 0 : (_targetOverride$targe2 = _targetOverride$targe._prefab) === null || _targetOverride$targe2 === void 0 ? void 0 : _targetOverride$targe2.instance;

            if (!targetInstance || !targetInstance.targetMap) {
              continue;
            }

            target = getTarget(targetInfo.localID, targetInstance.targetMap);

            if (!target) {
              continue;
            }

            const propertyPath = targetOverride.propertyPath.slice();
            let targetPropOwner = source;

            if (propertyPath.length > 0) {
              const targetPropName = propertyPath.pop();

              if (!targetPropName) {
                return;
              }

              for (let i = 0; i < propertyPath.length; i++) {
                const propName = propertyPath[i];
                targetPropOwner = targetPropOwner[propName];

                if (!targetPropOwner) {
                  break;
                }
              }

              if (!targetPropOwner) {
                continue;
              }

              targetPropOwner[targetPropName] = target;
            }
          }
        }
      }
      function expandPrefabInstanceNode(node, recursively = false) {
        const prefabInfo = node._prefab;
        const prefabInstance = prefabInfo === null || prefabInfo === void 0 ? void 0 : prefabInfo.instance;

        if (prefabInstance && !prefabInstance.expanded) {
          createNodeWithPrefab(node);

          if (recursively) {
            if (node && node.children) {
              node.children.forEach(child => {
                expandPrefabInstanceNode(child, true);
              });
            }
          }

          const targetMap = {};
          prefabInstance.targetMap = targetMap;
          generateTargetMap(node, targetMap, true);
          applyMountedChildren(node, prefabInstance.mountedChildren, targetMap);
          applyRemovedComponents(node, prefabInstance.removedComponents, targetMap);
          applyMountedComponents(node, prefabInstance.mountedComponents, targetMap);
          applyPropertyOverrides(node, prefabInstance.propertyOverrides, targetMap);
          prefabInstance.expanded = true;
        } else if (recursively) {
          if (node && node.children) {
            node.children.forEach(child => {
              expandPrefabInstanceNode(child, true);
            });
          }
        }
      }
      function expandNestedPrefabInstanceNode(node) {
        const prefabInfo = node._prefab;

        if (prefabInfo && prefabInfo.nestedPrefabInstanceRoots) {
          prefabInfo.nestedPrefabInstanceRoots.forEach(instanceNode => {
            expandPrefabInstanceNode(instanceNode);

            {
              var _instanceNode$_prefab, _instanceNode$_prefab2;

              applyNodeAndComponentId(instanceNode, (_instanceNode$_prefab = instanceNode._prefab) === null || _instanceNode$_prefab === void 0 ? void 0 : (_instanceNode$_prefab2 = _instanceNode$_prefab.instance) === null || _instanceNode$_prefab2 === void 0 ? void 0 : _instanceNode$_prefab2.fileId);
            }
          });
        }
      }
      function applyNodeAndComponentId(prefabInstanceNode, rootId) {
        const {
          components,
          children
        } = prefabInstanceNode;

        for (let i = 0; i < components.length; i++) {
          var _comp$__prefab$fileId, _comp$__prefab;

          const comp = components[i];
          const fileID = (_comp$__prefab$fileId = (_comp$__prefab = comp.__prefab) === null || _comp$__prefab === void 0 ? void 0 : _comp$__prefab.fileId) !== null && _comp$__prefab$fileId !== void 0 ? _comp$__prefab$fileId : '';
          comp._id = `${rootId}${fileID}`;
        }

        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          const prefabInfo = child._prefab;
          const fileId = prefabInfo !== null && prefabInfo !== void 0 && prefabInfo.instance ? prefabInfo.instance.fileId : prefabInfo === null || prefabInfo === void 0 ? void 0 : prefabInfo.fileId;
          if (!fileId) continue;
          child._id = `${rootId}${fileId}`;

          if (!(prefabInfo !== null && prefabInfo !== void 0 && prefabInfo.instance)) {
            applyNodeAndComponentId(child, rootId);
          }
        }
      }

      var utils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        createNodeWithPrefab: createNodeWithPrefab,
        generateTargetMap: generateTargetMap,
        getTarget: getTarget,
        applyMountedChildren: applyMountedChildren,
        applyMountedComponents: applyMountedComponents,
        applyRemovedComponents: applyRemovedComponents,
        applyPropertyOverrides: applyPropertyOverrides,
        applyTargetOverrides: applyTargetOverrides,
        expandPrefabInstanceNode: expandPrefabInstanceNode,
        expandNestedPrefabInstanceNode: expandNestedPrefabInstanceNode,
        applyNodeAndComponentId: applyNodeAndComponentId,
        TargetInfo: TargetInfo,
        TargetOverrideInfo: TargetOverrideInfo,
        CompPrefabInfo: CompPrefabInfo,
        PropertyOverrideInfo: PropertyOverrideInfo,
        MountedChildrenInfo: MountedChildrenInfo,
        MountedComponentsInfo: MountedComponentsInfo,
        PrefabInstance: PrefabInstance,
        PrefabInfo: PrefabInfo
      });

      const Scene = exports('f3', jsb.Scene);
      legacyCC.Scene = Scene;
      const sceneProto = Scene.prototype;
      Object.defineProperty(sceneProto, '_globals', {
        enumerable: true,
        configurable: true,

        get() {
          return this.getSceneGlobals();
        },

        set(v) {
          this._globalRef = v;
          this.setSceneGlobals(v);
        }

      });
      Object.defineProperty(sceneProto, 'globals', {
        enumerable: true,
        configurable: true,

        get() {
          return this.getSceneGlobals();
        }

      });
      Object.defineProperty(sceneProto, '_renderScene', {
        enumerable: true,
        configurable: true,

        get() {
          if (!this._renderSceneInternal) {
            this._renderSceneInternal = this.getRenderScene();
          }

          return this._renderSceneInternal;
        }

      });
      Object.defineProperty(sceneProto, 'renderScene', {
        enumerable: true,
        configurable: true,

        get() {
          if (!this._renderSceneInternal) {
            this._renderSceneInternal = this.getRenderScene();
          }

          return this._renderSceneInternal;
        }

      });

      sceneProto._ctor = function () {
        Node$1.prototype._ctor.apply(this, arguments);

        this._inited = false;
        this._renderSceneInternal = null;
        this._globalRef = null;
        this._prefabSyncedInLiveReload = false;
      };

      sceneProto._onBatchCreated = function (dontSyncChildPrefab) {
        if (this._parent) {
          this._siblingIndex = this._parent.children.indexOf(this);
        }

        const len = this._children.length;

        for (let i = 0; i < len; ++i) {
          this.children[i]._siblingIndex = i;

          this._children[i]._onBatchCreated(dontSyncChildPrefab);
        }
      };

      const oldLoad = sceneProto._load;

      sceneProto._load = function () {
        this._scene = this;

        if (!this._inited) {

          expandNestedPrefabInstanceNode(this);
          applyTargetOverrides(this);

          this._onBatchCreated(EDITOR$1 );

          this._inited = true;
        }

        updateChildrenForDeserialize(this);
        oldLoad.call(this);
      };

      sceneProto._activate = function (active) {
        active = active !== false;

        legacyCC.director._nodeActivator.activateNode(this, active);

        {
          this._globals.activate(this);

          if (this._renderScene) {
            this._renderScene.activate();
          }
        }
      };

      const SceneProto = Scene.prototype;
      serializable(SceneProto, 'autoReleaseAssets', () => false);
      serializable(SceneProto, '_globals', () => new SceneGlobals());
      ccclass('cc.Scene')(Scene);

      function find(path, referenceNode) {
        if (!referenceNode) {
          const scene = legacyCC.director.getScene();

          if (!scene) {

            return null;
          }

          referenceNode = scene;
        }

        return referenceNode.getChildByPath(path);
      }
      legacyCC.find = find;

      const fastRemoveAt$2 = fastRemoveAt;
      const IsStartCalled$1 = CCObject.Flags.IsStartCalled;
      const IsOnEnableCalled$1 = CCObject.Flags.IsOnEnableCalled;
      const IsEditorOnEnableCalled$1 = CCObject.Flags.IsEditorOnEnableCalled;

      function sortedIndex(array, comp) {
        const order = comp.constructor._executionOrder;
        const id = comp._id;
        let l = 0;

        for (let h = array.length - 1, m = h >>> 1; l <= h; m = l + h >>> 1) {
          const test = array[m];
          const testOrder = test.constructor._executionOrder;

          if (testOrder > order) {
            h = m - 1;
          } else if (testOrder < order) {
            l = m + 1;
          } else {
            const testId = test._id;

            if (testId > id) {
              h = m - 1;
            } else if (testId < id) {
              l = m + 1;
            } else {
              return m;
            }
          }
        }

        return ~l;
      }

      function stableRemoveInactive(iterator, flagToClear) {
        const array = iterator.array;
        let next = iterator.i + 1;

        while (next < array.length) {
          const comp = array[next];

          if (comp.node._activeInHierarchy) {
            ++next;
          } else {
            iterator.removeAt(next);

            if (flagToClear) {
              comp._objFlags &= ~flagToClear;
            }
          }
        }
      }

      class LifeCycleInvoker {
        constructor(invokeFunc) {
          this._zero = void 0;
          this._neg = void 0;
          this._pos = void 0;
          this._invoke = void 0;
          const Iterator = MutableForwardIterator;
          this._zero = new Iterator([]);
          this._neg = new Iterator([]);
          this._pos = new Iterator([]);

          this._invoke = invokeFunc;
        }

      }
      LifeCycleInvoker.stableRemoveInactive = stableRemoveInactive;

      function compareOrder(a, b) {
        return a.constructor._executionOrder - b.constructor._executionOrder;
      }

      class OneOffInvoker extends LifeCycleInvoker {
        add(comp) {
          const order = comp.constructor._executionOrder;
          (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).array.push(comp);
        }

        remove(comp) {
          const order = comp.constructor._executionOrder;
          (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).fastRemove(comp);
        }

        cancelInactive(flagToClear) {
          stableRemoveInactive(this._zero, flagToClear);
          stableRemoveInactive(this._neg, flagToClear);
          stableRemoveInactive(this._pos, flagToClear);
        }

        invoke() {
          const compsNeg = this._neg;

          if (compsNeg.array.length > 0) {
            compsNeg.array.sort(compareOrder);

            this._invoke(compsNeg);

            compsNeg.array.length = 0;
          }

          this._invoke(this._zero);

          this._zero.array.length = 0;
          const compsPos = this._pos;

          if (compsPos.array.length > 0) {
            compsPos.array.sort(compareOrder);

            this._invoke(compsPos);

            compsPos.array.length = 0;
          }
        }

      }

      class ReusableInvoker extends LifeCycleInvoker {
        add(comp) {
          const order = comp.constructor._executionOrder;

          if (order === 0) {
            this._zero.array.push(comp);
          } else {
            const array = order < 0 ? this._neg.array : this._pos.array;
            const i = sortedIndex(array, comp);

            if (i < 0) {
              array.splice(~i, 0, comp);
            }
          }
        }

        remove(comp) {
          const order = comp.constructor._executionOrder;

          if (order === 0) {
            this._zero.fastRemove(comp);
          } else {
            const iterator = order < 0 ? this._neg : this._pos;
            const i = sortedIndex(iterator.array, comp);

            if (i >= 0) {
              iterator.removeAt(i);
            }
          }
        }

        invoke(dt) {
          if (this._neg.array.length > 0) {
            this._invoke(this._neg, dt);
          }

          this._invoke(this._zero, dt);

          if (this._pos.array.length > 0) {
            this._invoke(this._pos, dt);
          }
        }

      }

      function createInvokeImplJit(code, useDt, ensureFlag) {
        const body = `${'var a=it.array;' + 'for(it.i=0;it.i<a.length;++it.i){' + 'var c=a[it.i];'}${code}}`;
        const fastPath = useDt ? Function('it', 'dt', body) : Function('it', body);
        const singleInvoke = Function('c', 'dt', code);
        return createInvokeImpl(singleInvoke, fastPath, ensureFlag);
      }
      function createInvokeImpl(singleInvoke, fastPath, ensureFlag) {
        return (iterator, dt) => {
          try {
            fastPath(iterator, dt);
          } catch (e) {
            legacyCC._throw(e);

            const array = iterator.array;

            if (ensureFlag) {
              array[iterator.i]._objFlags |= ensureFlag;
            }

            ++iterator.i;

            for (; iterator.i < array.length; ++iterator.i) {
              try {
                singleInvoke(array[iterator.i], dt);
              } catch (e) {
                legacyCC._throw(e);

                if (ensureFlag) {
                  array[iterator.i]._objFlags |= ensureFlag;
                }
              }
            }
          }
        };
      }
      const invokeStart =  createInvokeImplJit(`c.start();c._objFlags|=${IsStartCalled$1}`, false, IsStartCalled$1) ;
      const invokeUpdate =  createInvokeImplJit('c.update(dt)', true) ;
      const invokeLateUpdate =  createInvokeImplJit('c.lateUpdate(dt)', true) ;
      const invokeOnEnable =  iterator => {
        const compScheduler = legacyCC.director._compScheduler;
        const array = iterator.array;

        for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
          const comp = array[iterator.i];

          if (comp._enabled) {
            comp.onEnable();
            const deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

            if (!deactivatedDuringOnEnable) {
              compScheduler._onEnabled(comp);
            }
          }
        }
      };
      class ComponentScheduler {
        constructor() {
          this._deferredComps = [];
          this.unscheduleAll();
        }

        unscheduleAll() {
          this.startInvoker = new OneOffInvoker(invokeStart);
          this.updateInvoker = new ReusableInvoker(invokeUpdate);
          this.lateUpdateInvoker = new ReusableInvoker(invokeLateUpdate);
          this._updating = false;
        }

        _onEnabled(comp) {
          legacyCC.director.getScheduler().resumeTarget(comp);
          comp._objFlags |= IsOnEnableCalled$1;

          if (this._updating) {
            this._deferredComps.push(comp);
          } else {
            this._scheduleImmediate(comp);
          }
        }

        _onDisabled(comp) {
          legacyCC.director.getScheduler().pauseTarget(comp);
          comp._objFlags &= ~IsOnEnableCalled$1;

          const index = this._deferredComps.indexOf(comp);

          if (index >= 0) {
            fastRemoveAt$2(this._deferredComps, index);
            return;
          }

          if (comp.start && !(comp._objFlags & IsStartCalled$1)) {
            this.startInvoker.remove(comp);
          }

          if (comp.update) {
            this.updateInvoker.remove(comp);
          }

          if (comp.lateUpdate) {
            this.lateUpdateInvoker.remove(comp);
          }
        }

        enableComp(comp, invoker) {
          if (!(comp._objFlags & IsOnEnableCalled$1)) {
            if (comp.onEnable) {
              if (invoker) {
                invoker.add(comp);
                return;
              } else {
                comp.onEnable();
                const deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

                if (deactivatedDuringOnEnable) {
                  return;
                }
              }
            }

            this._onEnabled(comp);
          }
        }

        disableComp(comp) {
          if (comp._objFlags & IsOnEnableCalled$1) {
            if (comp.onDisable) {
              comp.onDisable();
            }

            this._onDisabled(comp);
          }
        }

        startPhase() {
          this._updating = true;
          this.startInvoker.invoke();

          this._startForNewComps();
        }

        updatePhase(dt) {
          this.updateInvoker.invoke(dt);
        }

        lateUpdatePhase(dt) {
          this.lateUpdateInvoker.invoke(dt);
          this._updating = false;

          this._startForNewComps();
        }

        _startForNewComps() {
          if (this._deferredComps.length > 0) {
            this._deferredSchedule();

            this.startInvoker.invoke();
          }
        }

        _scheduleImmediate(comp) {
          if (typeof comp.start === 'function' && !(comp._objFlags & IsStartCalled$1)) {
            this.startInvoker.add(comp);
          }

          if (typeof comp.update === 'function') {
            this.updateInvoker.add(comp);
          }

          if (typeof comp.lateUpdate === 'function') {
            this.lateUpdateInvoker.add(comp);
          }
        }

        _deferredSchedule() {
          const comps = this._deferredComps;

          for (let i = 0, len = comps.length; i < len; i++) {
            this._scheduleImmediate(comps[i]);
          }

          comps.length = 0;
        }

      }

      const MAX_POOL_SIZE$1 = 4;
      const IsPreloadStarted$1 = CCObject.Flags.IsPreloadStarted;
      const IsOnLoadStarted$1 = CCObject.Flags.IsOnLoadStarted;
      const IsOnLoadCalled$2 = CCObject.Flags.IsOnLoadCalled;
      const Deactivating$1 = CCObject.Flags.Deactivating;

      class UnsortedInvoker extends LifeCycleInvoker {
        add(comp) {
          this._zero.array.push(comp);
        }

        remove(comp) {
          this._zero.fastRemove(comp);
        }

        cancelInactive(flagToClear) {
          LifeCycleInvoker.stableRemoveInactive(this._zero, flagToClear);
        }

        invoke() {
          this._invoke(this._zero);

          this._zero.array.length = 0;
        }

      }

      const invokePreload =  createInvokeImplJit('c.__preload();') ;
      const invokeOnLoad =  createInvokeImplJit(`c.onLoad();c._objFlags|=${IsOnLoadCalled$2}`, false, IsOnLoadCalled$2) ;
      const activateTasksPool = new Pool(MAX_POOL_SIZE$1);

      activateTasksPool.get = function getActivateTask() {
        const task = this._get() || {
          preload: new UnsortedInvoker(invokePreload),
          onLoad: new OneOffInvoker(invokeOnLoad),
          onEnable: new OneOffInvoker(invokeOnEnable)
        };
        task.preload._zero.i = -1;
        let invoker = task.onLoad;
        invoker._zero.i = -1;
        invoker._neg.i = -1;
        invoker._pos.i = -1;
        invoker = task.onEnable;
        invoker._zero.i = -1;
        invoker._neg.i = -1;
        invoker._pos.i = -1;
        return task;
      };

      function _componentCorrupted(node, comp, index) {
        errorID(3817, node.name, index);
        console.log('Corrupted component value:', comp);

        if (comp) {
          node._removeComponent(comp);
        } else {
          removeAt(node._components, index);
        }
      }

      class NodeActivator {
        constructor() {
          this.resetComp = void 0;
          this.reset();
        }

        reset() {
          this._activatingStack = [];
        }

        activateNode(node, active) {
          if (active) {
            const task = activateTasksPool.get();

            this._activatingStack.push(task);

            this._activateNodeRecursively(node, task.preload, task.onLoad, task.onEnable);

            task.preload.invoke();
            task.onLoad.invoke();
            task.onEnable.invoke();

            this._activatingStack.pop();

            activateTasksPool.put(task);
          } else {
            this._deactivateNodeRecursively(node);

            const stack = this._activatingStack;

            for (const lastTask of stack) {
              lastTask.preload.cancelInactive(IsPreloadStarted$1);
              lastTask.onLoad.cancelInactive(IsOnLoadStarted$1);
              lastTask.onEnable.cancelInactive();
            }
          }

          node.emit(NodeEventType.ACTIVE_IN_HIERARCHY_CHANGED, node);
        }

        activateComp(comp, preloadInvoker, onLoadInvoker, onEnableInvoker) {
          if (!isValid(comp, true)) {
            return;
          }

          if (!(comp._objFlags & IsPreloadStarted$1)) {
            comp._objFlags |= IsPreloadStarted$1;

            if (comp.__preload) {
              if (preloadInvoker) {
                preloadInvoker.add(comp);
              } else {
                comp.__preload();
              }
            }
          }

          if (!(comp._objFlags & IsOnLoadStarted$1)) {
            comp._objFlags |= IsOnLoadStarted$1;

            if (comp.onLoad) {
              if (onLoadInvoker) {
                onLoadInvoker.add(comp);
              } else {
                comp.onLoad();
                comp._objFlags |= IsOnLoadCalled$2;
              }
            } else {
              comp._objFlags |= IsOnLoadCalled$2;
            }
          }

          if (comp._enabled) {
            {
              assertIsTrue(comp.node, getError(3823, comp.uuid, comp.name));
            }

            const deactivatedOnLoading = !comp.node._activeInHierarchy;

            if (deactivatedOnLoading) {
              return;
            }

            legacyCC.director._compScheduler.enableComp(comp, onEnableInvoker);
          }
        }

        destroyComp(comp) {
          legacyCC.director._compScheduler.disableComp(comp);

          if (comp.onDestroy && comp._objFlags & IsOnLoadCalled$2) {
            comp.onDestroy();
          }
        }

        _activateNodeRecursively(node, preloadInvoker, onLoadInvoker, onEnableInvoker) {
          if (node._objFlags & Deactivating$1) {
            errorID(3816, node.name);
            return;
          }

          node._activeInHierarchy = true;
          let originCount = node._components.length;

          for (let i = 0; i < originCount; ++i) {
            const component = node._components[i];

            if (component instanceof legacyCC.Component) {
              this.activateComp(component, preloadInvoker, onLoadInvoker, onEnableInvoker);
            } else {
              _componentCorrupted(node, component, i);

              --i;
              --originCount;
            }
          }

          for (let i = 0, len = node._children.length; i < len; ++i) {
            const child = node._children[i];

            if (child._active) {
              this._activateNodeRecursively(child, preloadInvoker, onLoadInvoker, onEnableInvoker);
            }
          }

          node._onPostActivated(true);
        }

        _deactivateNodeRecursively(node) {

          node._objFlags |= Deactivating$1;
          node._activeInHierarchy = false;
          const originCount = node._components.length;

          for (let c = 0; c < originCount; ++c) {
            const component = node._components[c];

            if (component._enabled) {
              legacyCC.director._compScheduler.disableComp(component);

              if (node._activeInHierarchy) {
                node._objFlags &= ~Deactivating$1;
                return;
              }
            }
          }

          for (let i = 0, len = node._children.length; i < len; ++i) {
            const child = node._children[i];

            if (child._activeInHierarchy) {
              this._deactivateNodeRecursively(child);

              if (node._activeInHierarchy) {
                node._objFlags &= ~Deactivating$1;
                return;
              }
            }
          }

          node._onPostActivated(false);

          node._objFlags &= ~Deactivating$1;
        }

      } exports('gk', NodeActivator);

      const Destroyed$1 = CCObject.Flags.Destroyed;
      const PersistentMask$1 = CCObject.Flags.PersistentMask;
      const DEFAULT = `${CCClass.Attr.DELIMETER}default`;
      const IDENTIFIER_RE$1 = CCClass.IDENTIFIER_RE;
      const VAR = 'var ';
      const LOCAL_OBJ = 'o';
      const LOCAL_TEMP_OBJ = 't';
      const LOCAL_ARRAY = 'a';
      const LINE_INDEX_OF_NEW_OBJ = 0;
      const DEFAULT_MODULE_CACHE = {
        'cc.ClickEvent': false,
        'cc.PrefabInfo': false
      };
      const escapeForJS$1 = CCClass.escapeForJS;

      class Declaration {
        constructor(varName, expression) {
          this.varName = void 0;
          this.expression = void 0;
          this.varName = varName;
          this.expression = expression;
        }

        toString() {
          return `${VAR + this.varName}=${this.expression};`;
        }

      }

      function mergeDeclaration(statement, expression) {
        if (expression instanceof Declaration) {
          return new Declaration(expression.varName, statement + expression.expression);
        } else {
          return statement + expression;
        }
      }

      function writeAssignment(codeArray, statement, expression) {
        if (Array.isArray(expression)) {
          expression[0] = mergeDeclaration(statement, expression[0]);
          codeArray.push(expression);
        } else {
          codeArray.push(`${mergeDeclaration(statement, expression)};`);
        }
      }

      class Assignments {
        constructor(targetExpression) {
          this._exps = void 0;
          this._targetExp = void 0;
          this._exps = [];
          this._targetExp = targetExpression;
        }

        append(key, expression) {
          this._exps.push([key, expression]);
        }

        writeCode(codeArray) {
          let targetVar;

          if (this._exps.length > 1) {
            codeArray.push(`${LOCAL_TEMP_OBJ}=${this._targetExp};`);
            targetVar = LOCAL_TEMP_OBJ;
          } else if (this._exps.length === 1) {
            targetVar = this._targetExp;
          } else {
            return;
          }

          for (let i = 0; i < this._exps.length; i++) {
            const pair = this._exps[i];
            writeAssignment(codeArray, `${targetVar + getPropAccessor(pair[0])}=`, pair[1]);
          }
        }

      }

      Assignments.pool = void 0;
      Assignments.pool = new Pool(obj => {
        obj._exps.length = 0;
        obj._targetExp = null;
      }, 1);

      Assignments.pool.get = function (targetExpression) {
        const cache = this._get() || new Assignments();
        cache._targetExp = targetExpression;
        return cache;
      };

      function getPropAccessor(key) {
        return IDENTIFIER_RE$1.test(key) ? `.${key}` : `[${escapeForJS$1(key)}]`;
      }

      class Parser {
        constructor(obj, parent) {
          this.parent = void 0;
          this.objsToClear_iN$t = void 0;
          this.codeArray = void 0;
          this.objs = void 0;
          this.funcs = void 0;
          this.funcModuleCache = void 0;
          this.globalVariables = void 0;
          this.globalVariableId = void 0;
          this.localVariableId = void 0;
          this.result = void 0;
          this.parent = parent;
          this.objsToClear_iN$t = [];
          this.codeArray = [];
          this.objs = [];
          this.funcs = [];
          this.funcModuleCache = createMap();
          mixin(this.funcModuleCache, DEFAULT_MODULE_CACHE);
          this.globalVariables = [];
          this.globalVariableId = 0;
          this.localVariableId = 0;
          this.codeArray.push(`${VAR + LOCAL_OBJ},${LOCAL_TEMP_OBJ};`, 'if(R){', `${LOCAL_OBJ}=R;`, '}else{', `${LOCAL_OBJ}=R=new ${this.getFuncModule(obj.constructor, true)}();`, '}');
          obj._iN$t = {
            globalVar: 'R'
          };
          this.objsToClear_iN$t.push(obj);
          this.enumerateObject(this.codeArray, obj);
          let globalVariablesDeclaration;

          if (this.globalVariables.length > 0) {
            globalVariablesDeclaration = `${VAR + this.globalVariables.join(',')};`;
          }

          const code = flattenCodeArray(['return (function(R){', globalVariablesDeclaration || [], this.codeArray, 'return o;', '})']);
          this.result = Function('O', 'F', code)(this.objs, this.funcs);

          for (let i = 0, len = this.objsToClear_iN$t.length; i < len; ++i) {
            this.objsToClear_iN$t[i]._iN$t = null;
          }

          this.objsToClear_iN$t.length = 0;
        }

        getFuncModule(func, usedInNew) {
          const clsName = getClassName(func);

          if (clsName) {
            const cache = this.funcModuleCache[clsName];

            if (cache) {
              return cache;
            } else if (cache === undefined) {
              let clsNameIsModule = clsName.indexOf('.') !== -1;

              if (clsNameIsModule) {
                try {
                  clsNameIsModule = func === Function(`return ${clsName}`)();

                  if (clsNameIsModule) {
                    this.funcModuleCache[clsName] = clsName;
                    return clsName;
                  }
                } catch (e) {}
              }
            }
          }

          let index = this.funcs.indexOf(func);

          if (index < 0) {
            index = this.funcs.length;
            this.funcs.push(func);
          }

          let res = `F[${index}]`;

          if (usedInNew) {
            res = `(${res})`;
          }

          this.funcModuleCache[clsName] = res;
          return res;
        }

        getObjRef(obj) {
          let index = this.objs.indexOf(obj);

          if (index < 0) {
            index = this.objs.length;
            this.objs.push(obj);
          }

          return `O[${index}]`;
        }

        setValueType(codeArray, defaultValue, srcValue, targetExpression) {
          const assignments = Assignments.pool.get(targetExpression);
          let fastDefinedProps = defaultValue.constructor.__props__;

          if (!fastDefinedProps) {
            fastDefinedProps = Object.keys(defaultValue);
          }

          for (let i = 0; i < fastDefinedProps.length; i++) {
            const propName = fastDefinedProps[i];
            const prop = srcValue[propName];

            if (defaultValue[propName] === prop) {
              continue;
            }

            const expression = this.enumerateField(srcValue, propName, prop);
            assignments.append(propName, expression);
          }

          assignments.writeCode(codeArray);
          Assignments.pool.put(assignments);
        }

        enumerateCCClass(codeArray, obj, klass) {
          const props = klass.__values__;
          const attrs = CCClass.Attr.getClassAttrs(klass);

          for (let p = 0; p < props.length; p++) {
            const key = props[p];
            const val = obj[key];
            let defaultValue = attrs[key + DEFAULT];

            if (equalsToDefault(defaultValue, val)) {
              continue;
            }

            if (typeof val === 'object' && val instanceof legacyCC.ValueType) {
              defaultValue = CCClass.getDefault(defaultValue);

              if (defaultValue && defaultValue.constructor === val.constructor) {
                const targetExpression = LOCAL_OBJ + getPropAccessor(key);
                this.setValueType(codeArray, defaultValue, val, targetExpression);
                continue;
              }
            }

            this.setObjProp(codeArray, obj, key, val);
          }
        }

        instantiateArray(value) {
          if (value.length === 0) {
            return '[]';
          }

          const arrayVar = LOCAL_ARRAY + ++this.localVariableId;
          const declaration = new Declaration(arrayVar, `new Array(${value.length})`);
          const codeArray = [declaration];
          value._iN$t = {
            globalVar: '',
            source: codeArray
          };
          this.objsToClear_iN$t.push(value);

          for (let i = 0; i < value.length; ++i) {
            const statement = `${arrayVar}[${i}]=`;
            const expression = this.enumerateField(value, i, value[i]);
            writeAssignment(codeArray, statement, expression);
          }

          return codeArray;
        }

        instantiateTypedArray(value) {
          const type = value.constructor.name;

          if (value.length === 0) {
            return `new ${type}`;
          }

          const arrayVar = LOCAL_ARRAY + ++this.localVariableId;
          const declaration = new Declaration(arrayVar, `new ${type}(${value.length})`);
          const codeArray = [declaration];
          value._iN$t = {
            globalVar: '',
            source: codeArray
          };
          this.objsToClear_iN$t.push(value);

          for (let i = 0; i < value.length; ++i) {
            if (value[i] !== 0) {
              const statement = `${arrayVar}[${i}]=`;
              writeAssignment(codeArray, statement, value[i]);
            }
          }

          return codeArray;
        }

        enumerateField(obj, key, value) {
          if (typeof value === 'object' && value) {
            const _iN$t = value._iN$t;

            if (_iN$t) {
              let globalVar = _iN$t.globalVar;

              if (!globalVar) {
                globalVar = _iN$t.globalVar = `v${++this.globalVariableId}`;
                this.globalVariables.push(globalVar);
                const line = _iN$t.source[LINE_INDEX_OF_NEW_OBJ];
                _iN$t.source[LINE_INDEX_OF_NEW_OBJ] = mergeDeclaration(`${globalVar}=`, line);
              }

              return globalVar;
            } else if (ArrayBuffer.isView(value)) {
              return this.instantiateTypedArray(value);
            } else if (Array.isArray(value)) {
              return this.instantiateArray(value);
            } else {
              return this.instantiateObj(value);
            }
          } else if (typeof value === 'function') {
            return this.getFuncModule(value);
          } else if (typeof value === 'string') {
            return escapeForJS$1(value);
          } else {
            if (key === '_objFlags' && isCCObject(obj)) {
              value &= PersistentMask$1;
            }

            return value;
          }
        }

        setObjProp(codeArray, obj, key, value) {
          const statement = `${LOCAL_OBJ + getPropAccessor(key)}=`;
          const expression = this.enumerateField(obj, key, value);
          writeAssignment(codeArray, statement, expression);
        }

        enumerateObject(codeArray, obj) {
          const klass = obj.constructor;

          if (isCCClassOrFastDefined(klass)) {
            this.enumerateCCClass(codeArray, obj, klass);
          } else {
            for (const key in obj) {
              if (!obj.hasOwnProperty(key) || key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95 && key !== '__type__') {
                continue;
              }

              const value = obj[key];

              if (typeof value === 'object' && value && value === obj._iN$t) {
                continue;
              }

              this.setObjProp(codeArray, obj, key, value);
            }
          }
        }

        instantiateObj(obj) {
          if (obj instanceof legacyCC.ValueType) {
            return CCClass.getNewValueTypeCode(obj);
          }

          if (obj instanceof legacyCC.Asset) {
            return this.getObjRef(obj);
          }

          if (obj._objFlags & Destroyed$1) {
            return null;
          }

          let createCode;
          const ctor = obj.constructor;

          if (isCCClassOrFastDefined(ctor)) {
            if (this.parent) {
              if (this.parent instanceof legacyCC.Component) {
                if (obj instanceof legacyCC.Node || obj instanceof legacyCC.Component) {
                  return this.getObjRef(obj);
                }
              } else if (this.parent instanceof legacyCC.Node) {
                if (obj instanceof legacyCC.Node) {
                  if (!obj.isChildOf(this.parent)) {
                    return this.getObjRef(obj);
                  }
                } else if (obj instanceof legacyCC.Component) {
                  var _obj$node;

                  if (!((_obj$node = obj.node) !== null && _obj$node !== void 0 && _obj$node.isChildOf(this.parent))) {
                    return this.getObjRef(obj);
                  }
                }
              }
            }

            createCode = new Declaration(LOCAL_OBJ, `new ${this.getFuncModule(ctor, true)}()`);
          } else if (ctor === Object) {
            createCode = new Declaration(LOCAL_OBJ, '{}');
          } else if (!ctor) {
            createCode = new Declaration(LOCAL_OBJ, 'Object.create(null)');
          } else {
            return this.getObjRef(obj);
          }

          const codeArray = [createCode];
          obj._iN$t = {
            globalVar: '',
            source: codeArray
          };
          this.objsToClear_iN$t.push(obj);
          this.enumerateObject(codeArray, obj);
          return ['(function(){', codeArray, 'return o;})();'];
        }

      }

      function equalsToDefault(def, value) {
        if (typeof def === 'function') {
          try {
            def = def();
          } catch (e) {
            return false;
          }
        }

        if (def === value) {
          return true;
        }

        if (def && value && typeof def === 'object' && typeof value === 'object' && def.constructor === value.constructor) {
          if (def instanceof legacyCC.ValueType) {
            if (def.equals(value)) {
              return true;
            }
          } else if (Array.isArray(def)) {
            return def.length === 0 && value.length === 0;
          } else if (def.constructor === Object) {
            return isEmptyObject(def) && isEmptyObject(value);
          }
        }

        return false;
      }
      function compile(node) {
        const root = node instanceof legacyCC.Node && node;
        const parser = new Parser(node, root);
        return parser.result;
      }

      var _dec$a, _class$a, _class2$7, _initializer$7, _initializer2$6, _initializer3$6, _class3$4, _temp$2;
      const OptimizationPolicy = Enum({
        AUTO: 0,
        SINGLE_INSTANCE: 1,
        MULTI_INSTANCE: 2
      });
      let Prefab = exports('d5', (_dec$a = ccclass('cc.Prefab'), _dec$a(_class$a = (_class2$7 = (_temp$2 = _class3$4 = class Prefab extends Asset {
        constructor() {
          super();
          this.data = _initializer$7 && _initializer$7();
          this.optimizationPolicy = _initializer2$6 && _initializer2$6();
          this.persistent = _initializer3$6 && _initializer3$6();
          this._createFunction = void 0;
          this._instantiatedTimes = void 0;
          this._createFunction = null;
          this._instantiatedTimes = 0;
        }

        createNode(cb) {
          const node = legacyCC.instantiate(this);
          node.name = this.name;
          cb(null, node);
        }

        compileCreateFunction() {
          this._createFunction = compile(this.data);
        }

        _doInstantiate(rootToRedirect) {
          if (!this.data._prefab) {
            warnID(3700);
          }

          if (!this._createFunction) {
            this.compileCreateFunction();
          }

          return this._createFunction(rootToRedirect);
        }

        _instantiate() {
          let node;
          let useJit = false;

          {
            if (this.optimizationPolicy === OptimizationPolicy.SINGLE_INSTANCE) {
              useJit = false;
            } else if (this.optimizationPolicy === OptimizationPolicy.MULTI_INSTANCE) {
              useJit = true;
            } else {
              useJit = this._instantiatedTimes + 1 >= Prefab.OptimizationPolicyThreshold;
            }
          }

          if (useJit) {
            node = this._doInstantiate();

            this.data._instantiate(node);
          } else {
            node = this.data._instantiate();
          }

          ++this._instantiatedTimes;
          return node;
        }

        initDefault(uuid) {
          super.initDefault(uuid);
          this.data = new Node$1();
          this.data.name = '(Missing Node)';
          const prefabInfo = new legacyCC._PrefabInfo();
          prefabInfo.asset = this;
          prefabInfo.root = this.data;
          this.data._prefab = prefabInfo;
        }

        validate() {
          return !!this.data;
        }

        onLoaded() {
          const rootNode = this.data;
          expandNestedPrefabInstanceNode(rootNode);
          applyTargetOverrides(rootNode);

          {
            updateChildrenForDeserialize(rootNode);
          }
        }

      }, _class3$4.OptimizationPolicy = OptimizationPolicy, _class3$4.OptimizationPolicyThreshold = 3, _temp$2), (_initializer$7 = applyDecoratedInitializer(_class2$7.prototype, "data", [serializable], function () {
        return null;
      }), _initializer2$6 = applyDecoratedInitializer(_class2$7.prototype, "optimizationPolicy", [serializable], function () {
        return OptimizationPolicy.AUTO;
      }), _initializer3$6 = applyDecoratedInitializer(_class2$7.prototype, "persistent", [serializable], function () {
        return false;
      })), _class2$7)) || _class$a));
      value(Prefab, '_utils', utils);
      legacyCC.Prefab = Prefab;

      {
        obsolete(legacyCC, 'cc._Prefab', 'Prefab');
      }

      class UIRendererManager {
        constructor() {
          this._allRenderers = [];
          this._dirtyRenderers = [];
          this._dirtyVersion = 0;
        }

        addRenderer(uiRenderer) {
          if (uiRenderer._internalId === -1) {
            uiRenderer._internalId = this._allRenderers.length;

            this._allRenderers.push(uiRenderer);
          }
        }

        removeRenderer(uiRenderer) {
          if (uiRenderer._internalId !== -1) {
            {
              assert(this._allRenderers[uiRenderer._internalId] === uiRenderer);
            }

            const id = uiRenderer._internalId;
            this._allRenderers[this._allRenderers.length - 1]._internalId = id;
            fastRemoveAt(this._allRenderers, id);
            uiRenderer._internalId = -1;

            if (uiRenderer._dirtyVersion === this._dirtyVersion) {
              fastRemove(this._dirtyRenderers, uiRenderer);
              uiRenderer._dirtyVersion = -1;
            }
          }
        }

        markDirtyRenderer(uiRenderer) {
          if (uiRenderer._dirtyVersion !== this._dirtyVersion && uiRenderer._internalId !== -1) {
            this._dirtyRenderers.push(uiRenderer);

            uiRenderer._dirtyVersion = this._dirtyVersion;
          }
        }

        updateAllDirtyRenderers() {
          const length = this._dirtyRenderers.length;
          const dirtyRenderers = this._dirtyRenderers;

          for (let i = 0; i < length; i++) {
            {
              assert(dirtyRenderers[i]._internalId !== -1);
            }

            dirtyRenderers[i].updateRenderer();
          }

          this._dirtyRenderers.length = 0;
          this._dirtyVersion++;
        }

      }
      const uiRendererManager = exports('cI', new UIRendererManager());

      const isMatchByWord = (path, test) => {
        if (path.length > test.length) {
          const nextAscii = path.charCodeAt(test.length);
          return nextAscii === 47;
        }

        return true;
      };

      const processOptions = options => {

        let uuids = options.uuids;
        const paths = options.paths;
        const types = options.types;
        const bundles = options.deps;
        const realEntries = options.paths = Object.create(null);

        if (options.debug === false) {
          for (let i = 0, l = uuids.length; i < l; i++) {
            uuids[i] = decodeUuid(uuids[i]);
          }

          for (const id in paths) {
            const entry = paths[id];
            const type = entry[1];
            entry[1] = types[type];
          }
        } else {
          const out = Object.create(null);

          for (let i = 0, l = uuids.length; i < l; i++) {
            const uuid = uuids[i];
            uuids[i] = out[uuid] = decodeUuid(uuid);
          }

          uuids = out;
        }

        for (const id in paths) {
          const entry = paths[id];
          realEntries[uuids[id]] = entry;
        }

        const scenes = options.scenes;

        for (const name in scenes) {
          const uuid = scenes[name];
          scenes[name] = uuids[uuid];
        }

        const packs = options.packs;

        for (const packId in packs) {
          const packedIds = packs[packId];

          for (let j = 0; j < packedIds.length; ++j) {
            packedIds[j] = uuids[packedIds[j]];
          }
        }

        const versions = options.versions;

        if (versions) {
          for (const folder in versions) {
            const entries = versions[folder];

            for (let i = 0; i < entries.length; i += 2) {
              const uuid = entries[i];
              entries[i] = uuids[uuid] || uuid;
            }
          }
        }

        const redirect = options.redirect;

        if (redirect) {
          for (let i = 0; i < redirect.length; i += 2) {
            redirect[i] = uuids[redirect[i]];
            redirect[i + 1] = bundles[redirect[i + 1]];
          }
        }

        const extensionMap = options.extensionMap;

        if (extensionMap) {
          for (const ext in options.extensionMap) {
            if (!Object.prototype.hasOwnProperty.call(options.extensionMap, ext)) {
              continue;
            }

            options.extensionMap[ext].forEach((uuid, index) => {
              options.extensionMap[ext][index] = uuids[uuid] || uuid;
            });
          }
        }
      };

      class Config {
        constructor() {
          this.name = '';
          this.base = '';
          this.importBase = '';
          this.nativeBase = '';
          this.deps = null;
          this.assetInfos = new Cache();
          this.scenes = new Cache();
          this.paths = new Cache();
        }

        init(options) {
          processOptions(options);
          this.importBase = options.importBase || '';
          this.nativeBase = options.nativeBase || '';
          this.base = options.base || '';
          this.name = options.name || '';
          this.deps = options.deps || [];

          this._initUuid(options.uuids);

          this._initPath(options.paths);

          this._initScene(options.scenes);

          this._initPackage(options.packs);

          this._initVersion(options.versions);

          this._initRedirect(options.redirect);

          for (const ext in options.extensionMap) {
            if (!Object.prototype.hasOwnProperty.call(options.extensionMap, ext)) {
              continue;
            }

            options.extensionMap[ext].forEach(uuid => {
              const assetInfo = this.assetInfos.get(uuid);

              if (assetInfo) {
                assetInfo.extension = ext;
              }
            });
          }
        }

        getInfoWithPath(path, type) {
          if (!path) {
            return null;
          }

          path = normalize(path);
          const items = this.paths.get(path);

          if (items) {
            if (type) {
              for (let i = 0, l = items.length; i < l; i++) {
                const assetInfo = items[i];

                if (isChildClassOf(assetInfo.ctor, type)) {
                  return assetInfo;
                }
              }
            } else {
              return items[0];
            }
          }

          return null;
        }

        getDirWithPath(path, type, out) {
          path = normalize(path);

          if (path[path.length - 1] === '/') {
            path = path.slice(0, -1);
          }

          const infos = out || [];
          this.paths.forEach((items, p) => {
            if (p.startsWith(path) && isMatchByWord(p, path) || !path) {
              for (let i = 0, l = items.length; i < l; i++) {
                const entry = items[i];

                if (!type || isChildClassOf(entry.ctor, type)) {
                  infos.push(entry);
                }
              }
            }
          });
          return infos;
        }

        getAssetInfo(uuid) {
          return this.assetInfos.get(uuid) || null;
        }

        getSceneInfo(name) {
          if (!name.endsWith('.scene')) {
            name += '.scene';
          }

          if (name[0] !== '/' && !name.startsWith('db://')) {
            name = `/${name}`;
          }

          const info = this.scenes.find((val, key) => key.endsWith(name));
          return info;
        }

        destroy() {
          this.paths.destroy();
          this.scenes.destroy();
          this.assetInfos.destroy();
        }

        _initUuid(uuidList) {
          if (!uuidList) {
            return;
          }

          this.assetInfos.clear();

          for (let i = 0, l = uuidList.length; i < l; i++) {
            const uuid = uuidList[i];
            this.assetInfos.add(uuid, {
              uuid
            });
          }
        }

        _initPath(pathList) {
          if (!pathList) {
            return;
          }

          const paths = this.paths;
          paths.clear();

          for (const uuid in pathList) {
            const info = pathList[uuid];
            const path = info[0];
            const type = info[1];
            const isSubAsset = info.length === 3;
            const assetInfo = this.assetInfos.get(uuid);
            assetInfo.path = path;
            assetInfo.ctor = getClassById(type);

            if (paths.has(path)) {
              if (isSubAsset) {
                paths.get(path).push(assetInfo);
              } else {
                paths.get(path).unshift(assetInfo);
              }
            } else {
              paths.add(path, [assetInfo]);
            }
          }
        }

        _initScene(sceneList) {
          if (!sceneList) {
            return;
          }

          const scenes = this.scenes;
          scenes.clear();
          const assetInfos = this.assetInfos;

          for (const sceneName in sceneList) {
            const uuid = sceneList[sceneName];
            const assetInfo = assetInfos.get(uuid);
            assetInfo.url = sceneName;
            scenes.add(sceneName, assetInfo);
          }
        }

        _initPackage(packageList) {
          if (!packageList) {
            return;
          }

          const assetInfos = this.assetInfos;

          for (const packUuid in packageList) {
            const uuids = packageList[packUuid];
            const pack = {
              uuid: packUuid,
              packedUuids: uuids,
              ext: '.json'
            };
            assetInfos.add(packUuid, pack);

            for (let i = 0, l = uuids.length; i < l; i++) {
              const uuid = uuids[i];
              const assetInfo = assetInfos.get(uuid);
              const assetPacks = assetInfo.packs;

              if (assetPacks) {
                if (l === 1) {
                  assetPacks.unshift(pack);
                } else {
                  assetPacks.push(pack);
                }
              } else {
                assetInfo.packs = [pack];
              }
            }
          }
        }

        _initVersion(versions) {
          if (!versions) {
            return;
          }

          const assetInfos = this.assetInfos;
          let entries = versions.import;

          if (entries) {
            for (let i = 0, l = entries.length; i < l; i += 2) {
              const uuid = entries[i];
              const assetInfo = assetInfos.get(uuid);
              assetInfo.ver = entries[i + 1];
            }
          }

          entries = versions.native;

          if (entries) {
            for (let i = 0, l = entries.length; i < l; i += 2) {
              const uuid = entries[i];
              const assetInfo = assetInfos.get(uuid);
              assetInfo.nativeVer = entries[i + 1];
            }
          }
        }

        _initRedirect(redirect) {
          if (!redirect) {
            return;
          }

          const assetInfos = this.assetInfos;

          for (let i = 0, l = redirect.length; i < l; i += 2) {
            const uuid = redirect[i];
            const assetInfo = assetInfos.get(uuid);
            assetInfo.redirect = redirect[i + 1];
          }
        }

      }

      function visitAsset(asset, deps) {
        if (!asset._uuid) {
          return;
        }

        deps.push(asset._uuid);
      }

      function visitComponent(comp, deps) {
        const props = Object.getOwnPropertyNames(comp);

        for (let i = 0; i < props.length; i++) {
          const propName = props[i];

          if (propName === 'node' || propName === '__eventTargets') {
            continue;
          }

          const value = comp[propName];

          if (typeof value === 'object' && value) {
            if (Array.isArray(value)) {
              for (let j = 0; j < value.length; j++) {
                const val = value[j];

                if (val instanceof Asset) {
                  visitAsset(val, deps);
                }
              }
            } else if (!value.constructor || value.constructor === Object) {
              const keys = Object.getOwnPropertyNames(value);

              for (let j = 0; j < keys.length; j++) {
                const val = value[keys[j]];

                if (val instanceof Asset) {
                  visitAsset(val, deps);
                }
              }
            } else if (value instanceof Asset) {
              visitAsset(value, deps);
            }
          }
        }
      }

      function visitNode(node, deps) {
        for (let i = 0; i < node._components.length; i++) {
          visitComponent(node._components[i], deps);
        }

        for (let i = 0; i < node._children.length; i++) {
          visitNode(node._children[i], deps);
        }
      }

      function descendOpRef(asset, refs, exclude, op) {
        exclude.push(asset._uuid);
        const depends = dependUtil.getDeps(asset._uuid);

        for (let i = 0, l = depends.length; i < l; i++) {
          const dependAsset = assets.get(depends[i]);

          if (!dependAsset) {
            continue;
          }

          const uuid = dependAsset._uuid;

          if (!(uuid in refs)) {
            refs[uuid] = dependAsset.refCount + op;
          } else {
            refs[uuid] += op;
          }

          if (exclude.includes(uuid)) {
            continue;
          }

          descendOpRef(dependAsset, refs, exclude, op);
        }
      }

      const _temp$3 = [];

      function checkCircularReference(asset) {
        const refs = Object.create(null);
        refs[asset._uuid] = asset.refCount;
        descendOpRef(asset, refs, _temp$3, -1);
        _temp$3.length = 0;

        if (refs[asset._uuid] !== 0) {
          return refs[asset._uuid];
        }

        for (const uuid in refs) {
          if (refs[uuid] !== 0) {
            descendOpRef(assets.get(uuid), refs, _temp$3, 1);
          }
        }

        _temp$3.length = 0;
        return refs[asset._uuid];
      }

      class ReleaseManager {
        constructor() {
          this._persistNodeDeps = new Cache();
          this._toDelete = new Cache();
          this._eventListener = false;
          this._dontDestroyAssets = [];
        }

        addIgnoredAsset(asset) {
          this._dontDestroyAssets.push(asset._uuid);
        }

        init() {
          this._persistNodeDeps.clear();

          this._toDelete.clear();
        }

        _addPersistNodeRef(node) {
          const deps = [];
          visitNode(node, deps);

          for (let i = 0, l = deps.length; i < l; i++) {
            const dependAsset = assets.get(deps[i]);

            if (dependAsset) {
              dependAsset.addRef();
            }
          }

          this._persistNodeDeps.add(node.uuid, deps);
        }

        _removePersistNodeRef(node) {
          if (!this._persistNodeDeps.has(node.uuid)) {
            return;
          }

          const deps = this._persistNodeDeps.get(node.uuid);

          for (let i = 0, l = deps.length; i < l; i++) {
            const dependAsset = assets.get(deps[i]);

            if (dependAsset) {
              dependAsset.decRef();
            }
          }

          this._persistNodeDeps.remove(node.uuid);
        }

        _autoRelease(oldScene, newScene, persistNodes) {
          if (oldScene) {
            const childs = dependUtil.getDeps(oldScene.uuid);

            for (let i = 0, l = childs.length; i < l; i++) {
              const asset = assets.get(childs[i]);

              if (asset) {
                asset.decRef( oldScene.autoReleaseAssets);
              }
            }

            const dependencies = dependUtil._depends.get(oldScene.uuid);

            if (dependencies && dependencies.persistDeps) {
              const persistDeps = dependencies.persistDeps;

              for (let i = 0, l = persistDeps.length; i < l; i++) {
                const asset = assets.get(persistDeps[i]);

                if (asset) {
                  asset.decRef( oldScene.autoReleaseAssets);
                }
              }
            }

            if (oldScene.uuid !== newScene.uuid) {
              dependUtil.remove(oldScene.uuid);
            }
          }

          const sceneDeps = dependUtil._depends.get(newScene.uuid);

          if (sceneDeps) {
            sceneDeps.persistDeps = [];
          }

          for (const key in persistNodes) {
            const node = persistNodes[key];

            const deps = this._persistNodeDeps.get(node.uuid);

            for (const dep of deps) {
              const dependAsset = assets.get(dep);

              if (dependAsset) {
                dependAsset.addRef();
              }
            }

            if (!sceneDeps) {
              continue;
            }

            sceneDeps.persistDeps.push(...deps);
          }
        }

        tryRelease(asset, force = false) {
          if (!(asset instanceof Asset)) {
            return;
          }

          if (force) {
            this._free(asset, force);

            return;
          }

          this._toDelete.add(asset._uuid, asset);

          if (!this._eventListener) {
            this._eventListener = true;
            callInNextTick(this._freeAssets.bind(this));
          }
        }

        _freeAssets() {
          this._eventListener = false;

          this._toDelete.forEach(asset => {
            this._free(asset);
          });

          this._toDelete.clear();
        }

        _free(asset, force = false) {
          const uuid = asset._uuid;

          this._toDelete.remove(uuid);

          if (!isValid(asset, true) || this._dontDestroyAssets.indexOf(uuid) !== -1) {
            return;
          }

          if (!force) {
            if (asset.refCount > 0) {
              if (checkCircularReference(asset) > 0) {
                return;
              }
            }
          }

          assets.remove(uuid);
          const depends = dependUtil.getDeps(uuid);

          for (let i = 0, l = depends.length; i < l; i++) {
            const dependAsset = assets.get(depends[i]);

            if (dependAsset) {
              dependAsset.decRef(false);

              {
                this._free(dependAsset, false);
              }
            }
          }

          {
            asset.destroy();
          }

          dependUtil.remove(uuid);
        }

      }

      var releaseManager = new ReleaseManager();

      let defaultProgressCallback = null;
      function setDefaultProgressCallback(onProgress) {
        defaultProgressCallback = onProgress;
      }
      function clear$1(task, clearRef) {
        for (let i = 0, l = task.input.length; i < l; i++) {
          const item = task.input[i];

          if (clearRef) {
            if (!item.isNative && item.content instanceof Asset) {
              item.content.decRef(false);
            }
          }

          item.recycle();
        }

        task.input = null;
      }
      function urlAppendTimestamp(url, append) {
        if (append) {
          if (/\?/.test(url)) {
            return `${url}&_t=${Date.now()}`;
          }

          return `${url}?_t=${Date.now()}`;
        }

        return url;
      }
      function retry(process, times, wait, onComplete, index = 0) {
        process(index, (err, result) => {
          index++;

          if (!err || index > times) {
            if (onComplete) {
              onComplete(err, result);
            }
          } else {
            setTimeout(() => {
              retry(process, times, wait, onComplete, index);
            }, wait);
          }
        });
      }
      function getDepends(uuid, data, exclude, depends, config) {
        try {
          const info = dependUtil.parse(uuid, data);

          for (let i = 0, l = info.deps.length; i < l; i++) {
            const dep = info.deps[i];

            if (!(dep in exclude)) {
              exclude[dep] = true;
              depends.push({
                uuid: dep,
                bundle: config && config.name
              });
            }
          }

          if (info.nativeDep) {
            if (config) {
              info.nativeDep.bundle = config.name;
            }

            depends.push({ ...info.nativeDep
            });
          }
        } catch (e) {
          error(e.message, e.stack);
        }
      }
      function cache(id, asset, cacheAsset) {
        if (!asset) {
          return;
        }

        cacheAsset = cacheAsset !== undefined ? cacheAsset : legacyCC.assetManager.cacheAsset;

        if (!isScene(asset) && cacheAsset && !asset.isDefault) {
          assets.add(id, asset);
        }
      }
      function setProperties(uuid, asset, assetsMap) {
        let missingAsset = false;
        const depends = dependMap.get(asset);

        if (depends) {

          for (let i = 0, l = depends.length; i < l; i++) {
            const depend = depends[i];
            const dependAsset = assetsMap[`${depend.uuid}@import`];

            if (!dependAsset) {
              {
                error(`The asset ${depend.uuid} is missing!`);
              }

              if (depend.type && depend.type !== Asset) {
                const placeHolder = new depend.type();
                placeHolder.initDefault(depend.uuid);
                depend.owner[depend.prop] = placeHolder;
              }

              missingAsset = true;
            } else {
              depend.owner[depend.prop] = dependAsset.addRef();
            }
          }

          dependMap.delete(asset);
        }

        if (nativeDependMap.has(asset)) {
          if (assetsMap[`${uuid}@native`]) {
            asset._nativeAsset = assetsMap[`${uuid}@native`];
          } else {
            missingAsset = true;
            console.error(`the native asset of ${uuid} is missing!`);
          }

          nativeDependMap.delete(asset);
        }

        return missingAsset;
      }
      function gatherAsset(task) {
        const source = task.source;

        if (!task.options.__outputAsArray__ && source.length === 1) {
          task.output = source[0].content;
        } else {
          const output = task.output = [];

          for (let i = 0, l = source.length; i < l; i++) {
            output.push(source[i].content);
          }
        }
      }
      function forEach(array, process, onComplete) {
        let count = 0;
        const errs = [];
        const length = array.length;

        if (length === 0 && onComplete) {
          onComplete(errs);
        }

        const cb = err => {
          if (err) {
            errs.push(err);
          }

          count++;

          if (count === length) {
            if (onComplete) {
              onComplete(errs);
            }
          }
        };

        for (let i = 0; i < length; i++) {
          process(array[i], cb);
        }
      }
      function parseParameters(options, onProgress, onComplete) {
        let optionsOut = options;
        let onProgressOut = onProgress;
        let onCompleteOut = onComplete;

        if (onComplete === undefined) {
          const isCallback = typeof options === 'function';

          if (onProgress) {
            onCompleteOut = onProgress;

            if (!isCallback) {
              onProgressOut = null;
            }
          } else if (onProgress === undefined && isCallback) {
            onCompleteOut = options;
            optionsOut = null;
            onProgressOut = null;
          }

          if (onProgress !== undefined && isCallback) {
            onProgressOut = options;
            optionsOut = null;
          }
        }

        return {
          options: optionsOut || Object.create(null),
          onProgress: onProgressOut,
          onComplete: onCompleteOut
        };
      }
      function parseLoadResArgs(type, onProgress, onComplete) {
        let typeOut = type;
        let onProgressOut = onProgress;
        let onCompleteOut = onComplete;

        if (onComplete === undefined) {
          const isValidType = isChildClassOf(type, Asset);

          if (onProgress) {
            onCompleteOut = onProgress;

            if (isValidType) {
              onProgressOut = null;
            }
          } else if (onProgress === undefined && !isValidType) {
            onCompleteOut = type;
            onProgressOut = null;
            typeOut = null;
          }

          if (onProgress !== undefined && !isValidType) {
            onProgressOut = type;
            typeOut = null;
          }
        }

        return {
          type: typeOut,
          onProgress: onProgressOut || defaultProgressCallback,
          onComplete: onCompleteOut
        };
      }
      function checkCircleReference(owner, uuid, map, checked = {}) {
        const item = map[uuid];

        if (!item || checked[uuid]) {
          return false;
        }

        checked[uuid] = true;
        let result = false;
        const deps = dependUtil.getDeps(uuid);

        if (deps) {
          for (let i = 0, l = deps.length; i < l; i++) {
            const dep = deps[i];

            if (dep === owner || checkCircleReference(owner, dep, map, checked)) {
              result = true;
              break;
            }
          }
        }

        return result;
      }
      function asyncify(cb) {
        return (p1, p2) => {
          if (!cb) {
            return;
          }

          const refs = [];

          if (Array.isArray(p2)) {
            p2.forEach(x => x instanceof Asset && refs.push(x.addRef()));
          } else if (p2 instanceof Asset) {
            refs.push(p2.addRef());
          }

          callInNextTick(() => {
            refs.forEach(x => x.decRef(false));
            cb(p1, p2);
          });
        };
      }

      class Bundle {
        constructor() {
          this._config = new Config();
        }

        get config() {
          return this._config;
        }

        get name() {
          return this._config.name;
        }

        get deps() {
          return this._config.deps;
        }

        get base() {
          return this._config.base;
        }

        getInfoWithPath(path, type) {
          return this._config.getInfoWithPath(path, type);
        }

        getDirWithPath(path, type, out) {
          return this._config.getDirWithPath(path, type, out);
        }

        getAssetInfo(uuid) {
          return this._config.getAssetInfo(uuid);
        }

        getSceneInfo(name) {
          return this._config.getSceneInfo(name);
        }

        init(options) {
          this._config.init(options);

          bundles.add(options.name, this);
        }

        load(paths, type, onProgress, onComplete) {
          const {
            type: _type,
            onProgress: onProg,
            onComplete: onComp
          } = parseLoadResArgs(type, onProgress, onComplete);
          const options = {
            __requestType__: RequestType.PATH,
            type: _type,
            bundle: this.name,
            __outputAsArray__: Array.isArray(paths)
          };
          legacyCC.assetManager.loadAny(paths, options, onProg, onComp);
        }

        preload(paths, type, onProgress, onComplete) {
          const {
            type: _type,
            onProgress: onProg,
            onComplete: onComp
          } = parseLoadResArgs(type, onProgress, onComplete);
          legacyCC.assetManager.preloadAny(paths, {
            __requestType__: RequestType.PATH,
            type: _type,
            bundle: this.name
          }, onProg, onComp);
        }

        loadDir(dir, type, onProgress, onComplete) {
          const {
            type: _type,
            onProgress: onProg,
            onComplete: onComp
          } = parseLoadResArgs(type, onProgress, onComplete);
          legacyCC.assetManager.loadAny(dir, {
            __requestType__: RequestType.DIR,
            type: _type,
            bundle: this.name,
            __outputAsArray__: true
          }, onProg, onComp);
        }

        preloadDir(dir, type, onProgress, onComplete) {
          const {
            type: _type,
            onProgress: onProg,
            onComplete: onComp
          } = parseLoadResArgs(type, onProgress, onComplete);
          legacyCC.assetManager.preloadAny(dir, {
            __requestType__: RequestType.DIR,
            type: _type,
            bundle: this.name
          }, onProg, onComp);
        }

        loadScene(sceneName, options, onProgress, onComplete) {
          const {
            options: opts,
            onProgress: onProg,
            onComplete: onComp
          } = parseParameters(options, onProgress, onComplete);
          opts.preset = opts.preset || 'scene';
          opts.bundle = this.name;
          legacyCC.assetManager.loadAny({
            scene: sceneName
          }, opts, onProg, (err, sceneAsset) => {
            if (err) {
              error(err.message, err.stack);
            } else if (sceneAsset.scene) {
              const scene = sceneAsset.scene;
              scene._id = sceneAsset._uuid;
              scene.name = sceneAsset.name;
            } else {
              err = new Error(`The asset ${sceneAsset._uuid} is not a scene`);
            }

            if (onComp) {
              onComp(err, sceneAsset);
            }
          });
        }

        preloadScene(sceneName, options, onProgress, onComplete) {
          const {
            options: opts,
            onProgress: onProg,
            onComplete: onComp
          } = parseParameters(options, onProgress, onComplete);
          opts.bundle = this.name;
          legacyCC.assetManager.preloadAny({
            scene: sceneName
          }, opts, onProg, err => {
            if (err) {
              errorID(1210, sceneName, err.message);
            }

            if (onComp) {
              onComp(err);
            }
          });
        }

        get(path, type) {
          const info = this.getInfoWithPath(path, type);

          if (info) {
            return assets.get(info.uuid) || null;
          }

          return null;
        }

        release(path, type) {
          const asset = this.get(path, type);

          if (asset) {
            releaseManager.tryRelease(asset, true);
          }
        }

        releaseUnusedAssets() {
          assets.forEach(asset => {
            const info = this.getAssetInfo(asset._uuid);

            if (info && !info.redirect) {
              releaseManager.tryRelease(asset);
            }
          });
        }

        releaseAll() {
          assets.forEach(asset => {
            const info = this.getAssetInfo(asset._uuid);

            if (info && !info.redirect) {
              releaseManager.tryRelease(asset, true);
            }
          });
        }

        _destroy() {
          this._config.destroy();
        }

      }
      const resources = exports('gL', new Bundle());
      legacyCC.resources = resources;

      class CacheManager {
        constructor() {
          this.cacheDir = void 0;
          this.cacheEnabled = void 0;
          this.autoClear = void 0;
          this.cacheInterval = void 0;
          this.deleteInterval = void 0;
          this.cachedFiles = void 0;
        }

      }

      function downloadDomImage(url, options, onComplete) {
        const img = new ccwindow.Image();

        if (ccwindow.location.protocol !== 'file:' || XIAOMI) {
          img.crossOrigin = 'anonymous';
        }

        function loadCallback() {
          img.removeEventListener('load', loadCallback);
          img.removeEventListener('error', errorCallback);

          if (onComplete) {
            onComplete(null, img);
          }
        }

        function errorCallback() {
          img.removeEventListener('load', loadCallback);
          img.removeEventListener('error', errorCallback);

          if (onComplete) {
            onComplete(new Error(getError(4930, url)));
          }
        }

        img.addEventListener('load', loadCallback);
        img.addEventListener('error', errorCallback);
        img.src = url;
        return img;
      }

      function downloadFile(url, options, onProgress, onComplete) {
        const xhr = new XMLHttpRequest();
        const errInfo = `download failed: ${url}, status: `;
        xhr.open('GET', url, true);

        if (options.xhrResponseType !== undefined) {
          xhr.responseType = options.xhrResponseType;
        }

        if (options.xhrWithCredentials !== undefined) {
          xhr.withCredentials = options.xhrWithCredentials;
        }

        if (options.xhrMimeType !== undefined && xhr.overrideMimeType) {
          xhr.overrideMimeType(options.xhrMimeType);
        }

        if (options.xhrTimeout !== undefined) {
          xhr.timeout = options.xhrTimeout;
        }

        if (options.xhrHeader) {
          for (const header in options.xhrHeader) {
            xhr.setRequestHeader(header, options.xhrHeader[header]);
          }
        }

        xhr.onload = () => {
          if (xhr.status === 200 || xhr.status === 0) {
            if (onComplete) {
              onComplete(null, xhr.response);
            }
          } else if (onComplete) {
            onComplete(new Error(`${errInfo}${xhr.status}(no response)`));
          }
        };

        if (onProgress) {
          xhr.onprogress = e => {
            if (e.lengthComputable) {
              onProgress(e.loaded, e.total);
            }
          };
        }

        xhr.onerror = () => {
          if (onComplete) {
            onComplete(new Error(`${errInfo}${xhr.status}(error)`));
          }
        };

        xhr.ontimeout = () => {
          if (onComplete) {
            onComplete(new Error(`${errInfo}${xhr.status}(time out)`));
          }
        };

        xhr.onabort = () => {
          if (onComplete) {
            onComplete(new Error(`${errInfo}${xhr.status}(abort)`));
          }
        };

        xhr.send(null);
        return xhr;
      }

      const ccdocument$1 = ccwindow.document;
      const downloaded = {};
      function downloadScript(url, options, onComplete) {
        if (downloaded[url]) {
          if (onComplete) {
            onComplete(null);
          }

          return null;
        }

        const script = ccdocument$1.createElement('script');

        if (ccwindow.location.protocol !== 'file:') {
          script.crossOrigin = 'anonymous';
        }

        script.async = options.scriptAsyncLoading || false;
        script.src = url;

        function loadHandler() {
          script.parentNode.removeChild(script);
          script.removeEventListener('load', loadHandler, false);
          script.removeEventListener('error', errorHandler, false);
          downloaded[url] = true;

          if (onComplete) {
            onComplete(null);
          }
        }

        function errorHandler() {
          script.parentNode.removeChild(script);
          script.removeEventListener('load', loadHandler, false);
          script.removeEventListener('error', errorHandler, false);

          if (onComplete) {
            onComplete(new Error(getError(4928, url)));
          }
        }

        script.addEventListener('load', loadHandler, false);
        script.addEventListener('error', errorHandler, false);
        ccdocument$1.body.appendChild(script);
        return script;
      }

      const REGEX = /^(?:\w+:\/\/|\.+\/).+/;

      const downloadImage = (url, options, onComplete) => {
        const func = sys.hasFeature(sys.Feature.IMAGE_BITMAP) && legacyCC.assetManager.allowImageBitmap ? downloadBlob : downloadDomImage;
        func(url, options, onComplete);
      };

      const downloadBlob = (url, options, onComplete) => {
        options.xhrResponseType = 'blob';
        downloadFile(url, options, options.onFileProgress, onComplete);
      };

      const downloadJson = (url, options, onComplete) => {
        options.xhrResponseType = 'json';
        downloadFile(url, options, options.onFileProgress, onComplete);
      };

      const downloadArrayBuffer = (url, options, onComplete) => {
        options.xhrResponseType = 'arraybuffer';
        downloadFile(url, options, options.onFileProgress, onComplete);
      };

      const downloadCCON = (url, options, onComplete) => {
        downloadJson(url, options, (err, json) => {
          if (err) {
            onComplete(err);
            return;
          }

          const cconPreface = parseCCONJson(json);
          const chunkPromises = Promise.all(cconPreface.chunks.map(chunk => new Promise((resolve, reject) => {
            downloadArrayBuffer(`${mainFileName(url)}${chunk}`, {}, (errChunk, chunkBuffer) => {
              if (err) {
                reject(err);
              } else {
                resolve(new Uint8Array(chunkBuffer));
              }
            });
          })));
          chunkPromises.then(chunks => {
            const ccon = new CCON(cconPreface.document, chunks);
            onComplete(null, ccon);
          }).catch(err => {
            onComplete(err);
          });
        });
      };

      const downloadCCONB = (url, options, onComplete) => {
        downloadArrayBuffer(url, options, (err, arrayBuffer) => {
          if (err) {
            onComplete(err);
            return;
          }

          try {
            const ccon = decodeCCONBinary(new Uint8Array(arrayBuffer));
            onComplete(null, ccon);
          } catch (err) {
            onComplete(err);
          }
        });
      };

      const downloadText = (url, options, onComplete) => {
        options.xhrResponseType = 'text';
        downloadFile(url, options, options.onFileProgress, onComplete);
      };

      const downloadBundle = (nameOrUrl, options, onComplete) => {
        const bundleName = basename(nameOrUrl);
        let url = nameOrUrl;

        if (!REGEX.test(url)) {
          if (downloader.remoteBundles.indexOf(bundleName) !== -1) {
            url = `${downloader.remoteServerAddress}remote/${bundleName}`;
          } else {
            url = `assets/${bundleName}`;
          }
        }

        const version = options.version || downloader.bundleVers[bundleName];
        let count = 0;
        const config = `${url}/config.${version ? `${version}.` : ''}json`;
        let out = null;
        let error = null;
        downloadJson(config, options, (err, response) => {
          error = err;
          out = response;

          if (out) {
            out.base = `${url}/`;
          }

          if (++count === 2) {
            onComplete(error, out);
          }
        });
        const jspath = `${url}/index.${version ? `${version}.` : ''}js`;
        downloadScript(jspath, options, err => {
          error = err;

          if (++count === 2) {
            onComplete(err, out);
          }
        });
      };

      class Downloader {
        static get instance() {
          if (!Downloader._instance) {
            Downloader._instance = new Downloader();
          }

          return Downloader._instance;
        }

        get remoteServerAddress() {
          return this._remoteServerAddress;
        }

        init(remoteServerAddress = '', bundleVers = {}, remoteBundles = []) {
          this._downloading.clear();

          this._queue.length = 0;
          this._remoteServerAddress = remoteServerAddress;
          this.bundleVers = bundleVers;
          this.remoteBundles = remoteBundles;
        }

        register(type, handler) {
          if (typeof type === 'object') {
            mixin(this._downloaders, type);
          } else {
            this._downloaders[type] = handler;
          }
        }

        download(id, url, type, options, onComplete) {
          const file = files.get(id);

          if (file) {
            onComplete(null, file);
            return;
          }

          const downloadCallbacks = this._downloading.get(id);

          if (downloadCallbacks) {
            downloadCallbacks.push(onComplete);

            const request = this._queue.find(x => x.id === id);

            if (!request) {
              return;
            }

            const priority = options.priority || 0;

            if (request.priority < priority) {
              request.priority = priority;
              this._queueDirty = true;
            }

            return;
          }

          const maxRetryCount = typeof options.maxRetryCount !== 'undefined' ? options.maxRetryCount : this.maxRetryCount;
          const maxConcurrency = typeof options.maxConcurrency !== 'undefined' ? options.maxConcurrency : this.maxConcurrency;
          const maxRequestsPerFrame = typeof options.maxRequestsPerFrame !== 'undefined' ? options.maxRequestsPerFrame : this.maxRequestsPerFrame;
          const handler = this._downloaders[type] || this._downloaders.default;

          const process = (index, callback) => {
            if (index === 0) {
              this._downloading.add(id, [onComplete]);
            }

            if (!this.limited) {
              handler(urlAppendTimestamp(url, this.appendTimeStamp), options, callback);
              return;
            }

            this._updateTime();

            const done = (err, data) => {
              this._totalNum--;

              this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);

              callback(err, data);
            };

            if (this._totalNum < maxConcurrency && this._totalNumThisPeriod < maxRequestsPerFrame) {
              handler(urlAppendTimestamp(url, this.appendTimeStamp), options, done);
              this._totalNum++;
              this._totalNumThisPeriod++;
            } else {
              this._queue.push({
                id,
                priority: options.priority || 0,
                url,
                options,
                done,
                handler
              });

              this._queueDirty = true;

              if (this._totalNum < maxConcurrency) {
                this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);
              }
            }
          };

          const finale = (err, result) => {
            if (!err) {
              files.add(id, result);
            }

            const callbacks = this._downloading.remove(id);

            for (let i = 0, l = callbacks.length; i < l; i++) {
              callbacks[i](err, result);
            }
          };

          retry(process, maxRetryCount, this.retryInterval, finale);
        }

        loadSubpackage(name, completeCallback) {
          legacyCC.assetManager.loadBundle(name, null, completeCallback);
        }

        constructor() {
          this.maxConcurrency = 6;
          this.maxRequestsPerFrame = 6;
          this.maxRetryCount =  3 ;
          this.appendTimeStamp = !!(EDITOR$1 );
          this.limited = !(EDITOR$1 );
          this.retryInterval = 2000;
          this.bundleVers = {};
          this.remoteBundles = [];
          this.downloadDomImage = downloadDomImage;
          this.downloadDomAudio = null;
          this.downloadFile = downloadFile;
          this.downloadScript = downloadScript;
          this._downloaders = {
            '.png': downloadImage,
            '.jpg': downloadImage,
            '.bmp': downloadImage,
            '.jpeg': downloadImage,
            '.gif': downloadImage,
            '.ico': downloadImage,
            '.tiff': downloadImage,
            '.webp': downloadImage,
            '.image': downloadImage,
            '.pvr': downloadArrayBuffer,
            '.pkm': downloadArrayBuffer,
            '.astc': downloadArrayBuffer,
            '.txt': downloadText,
            '.xml': downloadText,
            '.vsh': downloadText,
            '.fsh': downloadText,
            '.atlas': downloadText,
            '.tmx': downloadText,
            '.tsx': downloadText,
            '.json': downloadJson,
            '.ExportJson': downloadJson,
            '.plist': downloadText,
            '.ccon': downloadCCON,
            '.cconb': downloadCCONB,
            '.fnt': downloadText,
            '.binary': downloadArrayBuffer,
            '.bin': downloadArrayBuffer,
            '.dbbin': downloadArrayBuffer,
            '.skel': downloadArrayBuffer,
            '.js': downloadScript,
            bundle: downloadBundle,
            default: downloadText
          };
          this._downloading = new Cache();
          this._queue = [];
          this._queueDirty = false;
          this._totalNum = 0;
          this._totalNumThisPeriod = 0;
          this._lastDate = -1;
          this._checkNextPeriod = false;
          this._remoteServerAddress = '';
          this._maxInterval = 1 / 30;
        }

        _updateTime() {
          const now = performance.now();
          const deltaTime = legacyCC.game.deltaTime;
          const interval = deltaTime > this._maxInterval ? this._maxInterval : deltaTime;

          if (now - this._lastDate > interval * 1000) {
            this._totalNumThisPeriod = 0;
            this._lastDate = now;
          }
        }

        _handleQueue(maxConcurrency, maxRequestsPerFrame) {
          this._checkNextPeriod = false;

          this._updateTime();

          while (this._queue.length > 0 && this._totalNum < maxConcurrency && this._totalNumThisPeriod < maxRequestsPerFrame) {
            if (this._queueDirty) {
              this._queue.sort((a, b) => a.priority - b.priority);

              this._queueDirty = false;
            }

            const request = this._queue.pop();

            if (!request) {
              break;
            }

            this._totalNum++;
            this._totalNumThisPeriod++;
            request.handler(urlAppendTimestamp(request.url, this.appendTimeStamp), request.options, request.done);
          }

          this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);
        }

        _handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame) {
          if (!this._checkNextPeriod && this._queue.length > 0) {
            callInNextTick(this._handleQueue.bind(this), maxConcurrency, maxRequestsPerFrame);
            this._checkNextPeriod = true;
          }
        }

      }
      Downloader._instance = void 0;
      const downloader = Downloader.instance;
      var downloader$1 = exports('dl', Downloader.instance);

      var _dec$b, _class$b, _class2$8, _initializer$8;
      let JsonAsset = exports('gF', (_dec$b = ccclass('cc.JsonAsset'), _dec$b(_class$b = (_class2$8 = class JsonAsset extends Asset {
        constructor(...args) {
          super(...args);
          this.json = _initializer$8 && _initializer$8();
        }

      }, (_initializer$8 = applyDecoratedInitializer(_class2$8.prototype, "json", [serializable], function () {
        return null;
      })), _class2$8)) || _class$b));
      legacyCC.JsonAsset = JsonAsset;

      var _dec$c, _class$c, _class2$9, _initializer$9;
      let TextAsset = exports('eR', (_dec$c = ccclass('cc.TextAsset'), _dec$c(_class$c = (_class2$9 = class TextAsset extends Asset {
        constructor(...args) {
          super(...args);
          this.text = _initializer$9 && _initializer$9();
        }

        toString() {
          return this.text;
        }

      }, (_initializer$9 = applyDecoratedInitializer(_class2$9.prototype, "text", [serializable], function () {
        return '';
      })), _class2$9)) || _class$c));
      legacyCC.TextAsset = TextAsset;

      const BufferAsset = exports('gD', jsb.BufferAsset);
      legacyCC.BufferAsset = jsb.BufferAsset;
      const BufferAssetProto = BufferAsset.prototype;

      const _nativeAssetDescriptor$2 = Object.getOwnPropertyDescriptor(BufferAssetProto, '_nativeAsset');

      override(BufferAssetProto, '_nativeAsset', _nativeAssetDescriptor$2);
      ccclass('cc.BufferAsset')(BufferAsset);

      function createImageAsset(id, data, options, onComplete) {
        let out = null;
        let err = null;

        try {
          out = new ImageAsset();
          out._nativeUrl = id;
          out._nativeAsset = data;
        } catch (e) {
          err = e;
        }

        onComplete(err, out);
      }

      function createJsonAsset(id, data, options, onComplete) {
        const out = new JsonAsset();
        out.json = data;
        onComplete(null, out);
      }

      function createTextAsset(id, data, options, onComplete) {
        const out = new TextAsset();
        out.text = data;
        onComplete(null, out);
      }

      function createBufferAsset(id, data, options, onComplete) {
        const out = new BufferAsset();
        out._nativeUrl = id;
        out._nativeAsset = data;
        onComplete(null, out);
      }

      function createAsset(id, data, options, onComplete) {
        const out = new Asset();
        out._nativeUrl = id;
        out._nativeAsset = data;
        onComplete(null, out);
      }

      function createBundle(id, data, options, onComplete) {
        let bundle = bundles.get(data.name);

        if (!bundle) {
          bundle = data.name === BuiltinBundleName.RESOURCES ? resources : new Bundle();
          data.base = data.base || `${id}/`;
          bundle.init(data);
        }

        {
          module.import(`virtual:///prerequisite-imports/${bundle.name}`).then(() => {
            onComplete(null, bundle);
          }).catch(onComplete);
        }
      }

      class Factory {
        constructor() {
          this._creating = new Cache();
          this._producers = {
            '.png': createImageAsset,
            '.jpg': createImageAsset,
            '.bmp': createImageAsset,
            '.jpeg': createImageAsset,
            '.gif': createImageAsset,
            '.ico': createImageAsset,
            '.tiff': createImageAsset,
            '.webp': createImageAsset,
            '.image': createImageAsset,
            '.pvr': createImageAsset,
            '.pkm': createImageAsset,
            '.txt': createTextAsset,
            '.xml': createTextAsset,
            '.vsh': createTextAsset,
            '.fsh': createTextAsset,
            '.atlas': createTextAsset,
            '.tmx': createTextAsset,
            '.tsx': createTextAsset,
            '.fnt': createTextAsset,
            '.json': createJsonAsset,
            '.ExportJson': createJsonAsset,
            '.binary': createBufferAsset,
            '.bin': createBufferAsset,
            '.dbbin': createBufferAsset,
            '.skel': createBufferAsset,
            bundle: createBundle,
            default: createAsset
          };
        }

        register(type, handler) {
          if (typeof type === 'object') {
            mixin(this._producers, type);
          } else {
            this._producers[type] = handler;
          }
        }

        create(id, data, type, options, onComplete) {
          const handler = this._producers[type] || this._producers.default;
          const asset = assets.get(id);

          if (!options.reloadAsset && asset) {
            onComplete(null, asset);
            return;
          }

          const creating = this._creating.get(id);

          if (creating) {
            creating.push(onComplete);
            return;
          }

          this._creating.add(id, [onComplete]);

          handler(id, data, options, (err, result) => {
            if (!err && result instanceof Asset) {
              result._uuid = id;
              cache(id, result, options.cacheAsset);
            }

            const callbacks = this._creating.remove(id);

            for (let i = 0, l = callbacks.length; i < l; i++) {
              callbacks[i](err, result);
            }
          });
        }

      }
      var factory = exports('dm', new Factory());

      class PackManager {
        constructor() {
          this._loading = new Cache();
          this._unpackers = {
            '.json': this.unpackJson
          };
        }

        unpackJson(pack, json, options, onComplete) {
          let out = createMap(true);
          let err = null;

          if (Array.isArray(json)) {
            json = unpackJSONs(json);

            if (json.length !== pack.length) {
              errorID(4915);
            }

            for (let i = 0; i < pack.length; i++) {
              out[`${pack[i]}@import`] = json[i];
            }
          } else {
            const textureType = getClassId(Texture2D);
            const imageAssetType = getClassId(ImageAsset);

            if (json.type === textureType && json.data) {
              const datas = json.data;

              if (datas.length !== pack.length) {
                errorID(4915);
              }

              for (let i = 0; i < pack.length; i++) {
                out[`${pack[i]}@import`] = packCustomObjData(textureType, {
                  base: datas[i][0],
                  mipmaps: datas[i][1]
                });
              }
            } else if (json.type === imageAssetType && json.data) {
              const datas = json.data;

              if (datas.length !== pack.length) {
                errorID(4915);
              }

              for (let i = 0; i < pack.length; i++) {
                out[`${pack[i]}@import`] = datas[i];
              }
            } else {
              err = new Error('unmatched type pack!');
              out = null;
            }
          }

          onComplete(err, out);
        }

        init() {
          this._loading.clear();
        }

        register(type, handler) {
          if (typeof type === 'object') {
            mixin(this._unpackers, type);
          } else {
            this._unpackers[type] = handler;
          }
        }

        unpack(pack, data, type, options, onComplete) {
          if (!data) {
            onComplete(new Error('package data is wrong!'));
            return;
          }

          const unpacker = this._unpackers[type];
          unpacker(pack, data, options, onComplete);
        }

        load(item, options, onComplete) {
          if (item.isNative || !item.info || !item.info.packs) {
            downloader$1.download(item.id, item.url, item.ext, item.options, onComplete);
            return;
          }

          if (files.has(item.id)) {
            onComplete(null, files.get(item.id));
            return;
          }

          const packs = item.info.packs;
          let pack = packs.find(val => this._loading.has(val.uuid));

          if (pack) {
            this._loading.get(pack.uuid).push({
              onComplete,
              id: item.id
            });

            return;
          }

          pack = packs[0];

          this._loading.add(pack.uuid, [{
            onComplete,
            id: item.id
          }]);

          const url = transform(pack.uuid, {
            ext: pack.ext,
            bundle: item.config.name
          });
          downloader$1.download(pack.uuid, url, pack.ext, item.options, (err, data) => {
            files.remove(pack.uuid);

            if (err) {
              error(err.message, err.stack);
            }

            this.unpack(pack.packedUuids, data, pack.ext, item.options, (err2, result) => {
              if (!err2) {
                for (const id in result) {
                  files.add(id, result[id]);
                }
              }

              const callbacks = this._loading.remove(pack.uuid);

              for (let i = 0, l = callbacks.length; i < l; i++) {
                const cb = callbacks[i];

                if (err || err2) {
                  cb.onComplete(err || err2);
                  continue;
                }

                const unpackedData = result[cb.id];

                if (!unpackedData) {
                  cb.onComplete(new Error('can not retrieve data from package'));
                } else {
                  cb.onComplete(null, unpackedData);
                }
              }
            });
          });
        }

      }
      var packManager = new PackManager();

      function fetch$1(task, done) {
        let firstTask = false;

        if (!task.progress) {
          task.progress = {
            finish: 0,
            total: task.input.length,
            canInvoke: true
          };
          firstTask = true;
        }

        const {
          options,
          progress
        } = task;
        const depends = [];
        const total = progress.total;
        const exclude = options.__exclude__ = options.__exclude__ || Object.create(null);
        task.output = [];
        forEach(task.input, (item, cb) => {
          if (!item.isNative && assets.has(item.uuid)) {
            const asset = assets.get(item.uuid);
            item.content = asset.addRef();
            task.output.push(item);

            if (progress.canInvoke) {
              task.dispatch('progress', ++progress.finish, progress.total, item);
            }

            cb();
            return;
          }

          packManager.load(item, task.options, (err, data) => {
            if (err) {
              if (!task.isFinished) {
                if (!legacyCC.assetManager.force || firstTask) {
                  error(err.message, err.stack);
                  progress.canInvoke = false;
                  done(err);
                } else {
                  task.output.push(item);

                  if (progress.canInvoke) {
                    task.dispatch('progress', ++progress.finish, progress.total, item);
                  }
                }
              }
            } else if (!task.isFinished) {
              item.file = data;
              task.output.push(item);

              if (!item.isNative) {
                exclude[item.uuid] = true;
                getDepends(item.uuid, data, exclude, depends, item.config);
                progress.total = total + depends.length;
              }

              if (progress.canInvoke) {
                task.dispatch('progress', ++progress.finish, progress.total, item);
              }
            }

            cb();
          });
        }, () => {
          if (task.isFinished) {
            clear$1(task, true);
            task.dispatch('error');
            return;
          }

          if (depends.length > 0) {
            const subTask = Task.create({
              input: depends,
              progress,
              options,
              onProgress: task.onProgress,
              onError: Task.prototype.recycle,
              onComplete: err => {
                if (!err) {
                  task.output.push(...subTask.output);
                  subTask.recycle();
                }

                if (firstTask) {
                  decreaseRef(task);
                }

                done(err);
              }
            });
            fetchPipeline.async(subTask);
            return;
          }

          if (firstTask) {
            decreaseRef(task);
          }

          done();
        });
      }

      function decreaseRef(task) {
        const output = task.output;

        for (let i = 0, l = output.length; i < l; i++) {
          if (output[i].content) {
            output[i].content.decRef(false);
          }
        }
      }

      class SAXParser {
        constructor() {
          this._parser = null;

          if (globalThis.DOMParser) {
            this._parser = new DOMParser();
          }
        }

        parse(xmlTxt) {
          return this._parseXML(xmlTxt);
        }

        _parseXML(textxml) {
          if (this._parser) {
            return this._parser.parseFromString(textxml, 'text/xml');
          }

          throw new Error('Dom parser is not supported in this platform!');
        }

      } exports('eQ', SAXParser);

      class PlistParser extends SAXParser {
        parse(xmlTxt) {
          const xmlDoc = this._parseXML(xmlTxt);

          const plist = xmlDoc.documentElement;

          if (plist.tagName !== 'plist') {
            warnID(5100);
            return {};
          }

          let node = null;

          for (let i = 0, len = plist.childNodes.length; i < len; i++) {
            node = plist.childNodes[i];

            if (node.nodeType === 1) {
              break;
            }
          }

          return this._parseNode(node);
        }

        _parseNode(node) {
          let data = null;
          const tagName = node.tagName;

          if (tagName === 'dict') {
            data = this._parseDict(node);
          } else if (tagName === 'array') {
            data = this._parseArray(node);
          } else if (tagName === 'string') {
            if (node.childNodes.length === 1) {
              data = node.firstChild.nodeValue;
            } else {
              data = '';

              for (let i = 0; i < node.childNodes.length; i++) {
                data += node.childNodes[i].nodeValue;
              }
            }
          } else if (tagName === 'false') {
            data = false;
          } else if (tagName === 'true') {
            data = true;
          } else if (tagName === 'real') {
            data = parseFloat(node.firstChild.nodeValue);
          } else if (tagName === 'integer') {
            data = parseInt(node.firstChild.nodeValue, 10);
          }

          return data;
        }

        _parseArray(node) {
          const data = [];

          for (let i = 0, len = node.childNodes.length; i < len; i++) {
            const child = node.childNodes[i];

            if (child.nodeType !== 1) {
              continue;
            }

            data.push(this._parseNode(child));
          }

          return data;
        }

        _parseDict(node) {
          const data = {};
          let key = '';

          for (let i = 0, len = node.childNodes.length; i < len; i++) {
            const child = node.childNodes[i];

            if (child.nodeType !== 1) {
              continue;
            }

            if (child.tagName === 'key') {
              key = child.firstChild.nodeValue;
            } else {
              data[key] = this._parseNode(child);
            }
          }

          return data;
        }

      }

      const plistParser = new PlistParser();

      class Parser$1 {
        static get instance() {
          if (!this._instance) {
            this._instance = new Parser$1();
          }

          return this._instance;
        }

        constructor() {
          this._parsing = new Cache();
          this._parsers = {
            '.png': this.parseImage,
            '.jpg': this.parseImage,
            '.bmp': this.parseImage,
            '.jpeg': this.parseImage,
            '.gif': this.parseImage,
            '.ico': this.parseImage,
            '.tiff': this.parseImage,
            '.webp': this.parseImage,
            '.image': this.parseImage,
            '.pvr': this.parsePVRTex,
            '.pkm': this.parsePKMTex,
            '.astc': this.parseASTCTex,
            '.plist': this.parsePlist,
            import: this.parseImport,
            '.ccon': this.parseImport,
            '.cconb': this.parseImport
          };
        }

        parseImage(file, options, onComplete) {
          if (file instanceof HTMLImageElement) {
            onComplete(null, file);
            return;
          }

          createImageBitmap(file, {
            premultiplyAlpha: 'none'
          }).then(result => {
            onComplete(null, result);
          }, err => {
            onComplete(err, null);
          });
        }

        parsePVRTex(file, options, onComplete) {
          let err = null;
          let out = null;

          try {
            out = ImageAsset.parseCompressedTextures(file, 0);
          } catch (e) {
            err = e;
            console.warn(err);
          }

          onComplete(err, out);
        }

        parsePKMTex(file, options, onComplete) {
          let err = null;
          let out = null;

          try {
            out = ImageAsset.parseCompressedTextures(file, 1);
          } catch (e) {
            err = e;
            console.warn(err);
          }

          onComplete(err, out);
        }

        parseASTCTex(file, options, onComplete) {
          let err = null;
          let out = null;

          try {
            out = ImageAsset.parseCompressedTextures(file, 2);
          } catch (e) {
            err = e;
            console.warn(err);
          }

          onComplete(err, out);
        }

        parsePlist(file, options, onComplete) {
          let err = null;
          const result = plistParser.parse(file);

          if (!result) {
            err = new Error('parse failed');
          }

          onComplete(err, result);
        }

        parseImport(file, options, onComplete) {
          if (!file) {
            onComplete(new Error(`The json file of asset ${options.__uuid__} is empty or missing`));
            return;
          }

          let result = null;
          let err = null;

          try {
            result = deserializeAsset(file, options);
          } catch (e) {
            err = e;
          }

          onComplete(err, result);
        }

        init() {
          this._parsing.clear();
        }

        register(type, handler) {
          if (typeof type === 'object') {
            mixin(this._parsers, type);
          } else {
            this._parsers[type] = handler;
          }
        }

        parse(id, file, type, options, onComplete) {
          const parsedAsset = parsed.get(id);

          if (parsedAsset) {
            onComplete(null, parsedAsset);
            return;
          }

          const parsing = this._parsing.get(id);

          if (parsing) {
            parsing.push(onComplete);
            return;
          }

          const parseHandler = this._parsers[type];

          if (!parseHandler) {
            onComplete(null, file);
            return;
          }

          this._parsing.add(id, [onComplete]);

          parseHandler(file, options, (err, data) => {
            if (err) {
              files.remove(id);
            } else if (!isScene(data)) {
              parsed.add(id, data);
            }

            const callbacks = this._parsing.remove(id);

            for (let i = 0, l = callbacks.length; i < l; i++) {
              callbacks[i](err, data);
            }
          });
        }

      }
      Parser$1._instance = void 0;
      var parser = Parser$1.instance;

      function load(task, done) {
        let firstTask = false;

        if (!task.progress) {
          task.progress = {
            finish: 0,
            total: task.input.length,
            canInvoke: true
          };
          firstTask = true;
        }

        const {
          options,
          progress
        } = task;
        options.__exclude__ = options.__exclude__ || Object.create(null);
        task.output = [];
        forEach(task.input, (item, cb) => {
          const subTask = Task.create({
            input: item,
            onProgress: task.onProgress,
            options,
            progress,
            onComplete: (err, result) => {
              if (err && !task.isFinished) {
                if (!legacyCC.assetManager.force || firstTask) {
                  {
                    error(err.message, err.stack);
                  }

                  progress.canInvoke = false;
                  done(err);
                } else if (progress.canInvoke) {
                  task.dispatch('progress', ++progress.finish, progress.total, item);
                }
              }

              task.output.push(result);
              subTask.recycle();
              cb(null);
            }
          });
          loadOneAssetPipeline.async(subTask);
        }, () => {
          options.__exclude__ = null;

          if (task.isFinished) {
            clear$1(task, true);
            task.dispatch('error');
            return;
          }

          gatherAsset(task);
          clear$1(task, true);
          done();
        });
      }
      const loadOneAssetPipeline = new Pipeline('loadOneAsset', [function fetch(task, done) {
        const item = task.output = task.input;
        const {
          options,
          isNative,
          uuid,
          file
        } = item;
        const {
          reloadAsset
        } = options;

        if (file || !reloadAsset && !isNative && assets.has(uuid)) {
          done();
          return;
        }

        packManager.load(item, task.options, (err, data) => {
          item.file = data;
          done(err);
        });
      }, function parse(task, done) {
        const item = task.output = task.input;
        const progress = task.progress;
        const exclude = task.options.__exclude__;
        const {
          id,
          file,
          options
        } = item;

        if (item.isNative) {
          parser.parse(id, file, item.ext, options, (err, asset) => {
            if (err) {
              done(err);
              return;
            }

            item.content = asset;

            if (progress.canInvoke) {
              task.dispatch('progress', ++progress.finish, progress.total, item);
            }

            files.remove(id);
            parsed.remove(id);
            done();
          });
        } else {
          const {
            uuid
          } = item;

          if (uuid in exclude) {
            const {
              finish,
              content,
              err,
              callbacks
            } = exclude[uuid];

            if (progress.canInvoke) {
              task.dispatch('progress', ++progress.finish, progress.total, item);
            }

            if (finish || checkCircleReference(uuid, uuid, exclude)) {
              if (content) {
                content.addRef();
              }

              item.content = content;
              done(err);
            } else {
              callbacks.push({
                done,
                item
              });
            }
          } else if (!options.reloadAsset && assets.has(uuid)) {
            const asset = assets.get(uuid);
            item.content = asset.addRef();

            if (progress.canInvoke) {
              task.dispatch('progress', ++progress.finish, progress.total, item);
            }

            done();
          } else {
            options.__uuid__ = uuid;
            parser.parse(id, file, 'import', options, (err, asset) => {
              if (err) {
                done(err);
                return;
              }

              loadDepends(task, asset, done);
            });
          }
        }
      }]);

      function loadDepends(task, asset, done) {
        const {
          input: item,
          progress
        } = task;
        const {
          uuid,
          id,
          options,
          config
        } = item;
        const {
          cacheAsset
        } = options;
        const depends = [];

        if (asset.addRef) {
          asset.addRef();
        }

        getDepends(uuid, asset, Object.create(null), depends, config);

        if (progress.canInvoke) {
          task.dispatch('progress', ++progress.finish, progress.total += depends.length, item);
        }

        const repeatItem = task.options.__exclude__[uuid] = {
          content: asset,
          finish: false,
          callbacks: [{
            done,
            item
          }]
        };
        const subTask = Task.create({
          input: depends,
          options: task.options,
          onProgress: task.onProgress,
          onError: Task.prototype.recycle,
          progress,
          onComplete: err => {
            if (asset.decRef) {
              asset.decRef(false);
            }

            repeatItem.finish = true;
            repeatItem.err = err;

            if (!err) {
              const output = Array.isArray(subTask.output) ? subTask.output : [subTask.output];
              const map = Object.create(null);

              for (const dependAsset of output) {
                if (!dependAsset) {
                  continue;
                }

                map[dependAsset instanceof Asset ? `${dependAsset._uuid}@import` : `${uuid}@native`] = dependAsset;
              }

              setProperties(uuid, asset, map);

              try {
                if (typeof asset.onLoaded === 'function' && !onLoadedInvokedMap.has(asset) && !nativeDependMap.has(asset)) {
                  asset.onLoaded();
                  onLoadedInvokedMap.add(asset);
                }
              } catch (e) {
                error(`The asset ${uuid} is invalid for some reason, detail message: ${e.message}, stack: ${e.stack}`);
              }

              files.remove(id);
              parsed.remove(id);

              cache(uuid, asset, cacheAsset);
              subTask.recycle();
            }

            const callbacks = repeatItem.callbacks;

            for (let i = 0, l = callbacks.length; i < l; i++) {
              const cb = callbacks[i];

              if (asset.addRef) {
                asset.addRef();
              }

              cb.item.content = asset;
              cb.done(err);
            }

            callbacks.length = 0;
          }
        });
        pipeline.async(subTask);
      }

      function preprocess(task, done) {
        const options = task.options;
        const subOptions = Object.create(null);
        const leftOptions = Object.create(null);

        for (const op in options) {
          switch (op) {
            case RequestType.PATH:
            case RequestType.UUID:
            case RequestType.DIR:
            case RequestType.SCENE:
            case RequestType.URL:
              break;

            case '__requestType__':
            case '__isNative__':
            case 'ext':
            case 'type':
            case '__nativeName__':
            case 'audioLoadMode':
            case 'bundle':
              subOptions[op] = options[op];
              break;

            case '__exclude__':
            case '__outputAsArray__':
              leftOptions[op] = options[op];
              break;

            default:
              subOptions[op] = options[op];
              leftOptions[op] = options[op];
              break;
          }
        }

        task.options = leftOptions;
        const subTask = Task.create({
          input: task.input,
          options: subOptions
        });
        let err = null;

        try {
          task.output = task.source = transformPipeline.sync(subTask);
        } catch (e) {
          err = e;

          for (let i = 0, l = subTask.output.length; i < l; i++) {
            subTask.output[i].recycle();
          }
        }

        subTask.recycle();
        done(err);
      }

      class RequestItem {
        constructor() {
          this.uuid = '';
          this.overrideUuid = '';
          this.url = '';
          this.ext = '.json';
          this.content = null;
          this.file = null;
          this.info = null;
          this.config = null;
          this.isNative = false;
          this.options = Object.create(null);
          this._id = '';
        }

        get id() {
          if (!this._id) {
            this._id = `${this.overrideUuid || this.uuid}@${this.isNative ? 'native' : 'import'}`;
          }

          return this._id;
        }

        static create() {
          let out;

          if (RequestItem._deadPool.length !== 0) {
            out = RequestItem._deadPool.pop();
          } else {
            out = new RequestItem();
          }

          return out;
        }

        recycle() {
          if (RequestItem._deadPool.length === RequestItem.MAX_DEAD_NUM) {
            return;
          }

          this._id = '';
          this.uuid = '';
          this.overrideUuid = '';
          this.url = '';
          this.ext = '.json';
          this.content = null;
          this.file = null;
          this.info = null;
          this.config = null;
          this.isNative = false;
          this.options = Object.create(null);

          RequestItem._deadPool.push(this);
        }

      }
      RequestItem.MAX_DEAD_NUM = 500;
      RequestItem._deadPool = [];

      const infos = [];
      function parse(task) {
        var _info2;

        const options = task.options;
        const input = Array.isArray(task.input) ? task.input : [task.input];
        task.output = [];

        for (let i = 0; i < input.length; i++) {
          let item = input[i];
          let out = RequestItem.create();
          let config = null;
          let info = null;

          if (typeof item === 'string') {
            item = Object.create(null);
            item[options.__requestType__ || RequestType.UUID] = input[i];
          }

          if (typeof item === 'object') {
            addon(item, options);

            if (item.preset) {
              addon(item, presets[item.preset]);
            }

            for (const key in item) {
              switch (key) {
                case RequestType.UUID:
                  {
                    var _info;

                    const uuid = out.uuid = decodeUuid(item.uuid);

                    if (!item.bundle) {
                      const bundle = bundles.find(bundle => !!bundle.getAssetInfo(uuid));
                      item.bundle = bundle && bundle.name;
                    }

                    if (bundles.has(item.bundle)) {
                      config = bundles.get(item.bundle).config;
                      info = config.getAssetInfo(uuid);

                      if (info && info.redirect) {
                        if (!bundles.has(info.redirect)) {
                          throw new Error(`Please load bundle ${info.redirect} first`);
                        }

                        config = bundles.get(info.redirect).config;
                        info = config.getAssetInfo(uuid);
                      }

                      out.config = config;
                      out.info = info;
                    }

                    out.ext = item.ext || ((_info = info) === null || _info === void 0 ? void 0 : _info.extension) || '.json';
                    break;
                  }

                case '__requestType__':
                case 'ext':
                case 'bundle':
                case 'preset':
                case 'type':
                  break;

                case RequestType.DIR:
                  if (bundles.has(item.bundle)) {
                    bundles.get(item.bundle).config.getDirWithPath(item.dir, item.type, infos);

                    for (const assetInfo of infos) {
                      input.push({
                        uuid: assetInfo.uuid,
                        __isNative__: false,
                        ext: assetInfo.extension || '.json',
                        bundle: item.bundle
                      });
                    }

                    infos.length = 0;
                  }

                  out.recycle();
                  out = null;
                  break;

                case RequestType.PATH:
                  if (bundles.has(item.bundle)) {
                    config = bundles.get(item.bundle).config;
                    info = config.getInfoWithPath(item.path, item.type);

                    if (info && info.redirect) {
                      if (!bundles.has(info.redirect)) {
                        throw new Error(`you need to load bundle ${info.redirect} first`);
                      }

                      config = bundles.get(info.redirect).config;
                      info = config.getAssetInfo(info.uuid);
                    }

                    if (!info) {
                      out.recycle();
                      throw new Error(`Bundle ${item.bundle} doesn't contain ${item.path}`);
                    }

                    out.config = config;
                    out.uuid = info.uuid;
                    out.info = info;
                  }

                  out.ext = item.ext || ((_info2 = info) === null || _info2 === void 0 ? void 0 : _info2.extension) || '.json';
                  break;

                case RequestType.SCENE:
                  if (!item.bundle) {
                    const bundle = bundles.find(bundle => !!bundle.getSceneInfo(item.scene));
                    item.bundle = bundle && bundle.name;
                  }

                  if (bundles.has(item.bundle)) {
                    config = bundles.get(item.bundle).config;
                    info = config.getSceneInfo(item.scene);

                    if (info && info.redirect) {
                      if (!bundles.has(info.redirect)) {
                        throw new Error(`you need to load bundle ${info.redirect} first`);
                      }

                      config = bundles.get(info.redirect).config;
                      info = config.getAssetInfo(info.uuid);
                    }

                    if (!info) {
                      out.recycle();
                      throw new Error(`Bundle ${config.name} doesn't contain scene ${item.scene}`);
                    }

                    out.config = config;
                    out.uuid = info.uuid;
                    out.info = info;
                  }

                  break;

                case '__isNative__':
                  out.isNative = item.__isNative__;
                  break;

                case RequestType.URL:
                  out.url = item.url;
                  out.uuid = item.uuid || item.url;
                  out.ext = item.ext || extname(item.url);
                  out.isNative = item.__isNative__ !== undefined ? item.__isNative__ : true;
                  break;

                default:
                  out.options[key] = item[key];
              }

              if (!out) {
                break;
              }
            }
          }

          if (!out) {
            continue;
          }

          task.output.push(out);

          if (!out.uuid && !out.url) {
            throw new Error(`Can not parse this input:${JSON.stringify(item)}`);
          }
        }

        return null;
      }
      function replaceOverrideAsset(task) {
        const input = task.output = task.input;

        for (let i = 0; i < input.length; i++) {
          const item = input[i];

          if (assetsOverrideMap.has(item.uuid)) {
            const uuid = assetsOverrideMap.get(item.uuid);

            const bundle = bundles.find(bundle => !!bundle.getAssetInfo(uuid));

            if (bundle) {
              var _info3;

              item.overrideUuid = uuid;
              let config = bundle.config;
              let info = config.getAssetInfo(uuid);

              if (info && info.redirect) {
                if (!bundles.has(info.redirect)) {
                  throw new Error(`Please load bundle ${info.redirect} first`);
                }

                config = bundles.get(info.redirect).config;
                info = config.getAssetInfo(uuid);
              }

              item.config = config;
              item.info = info;
              item.ext = item.isNative ? item.ext : ((_info3 = info) === null || _info3 === void 0 ? void 0 : _info3.extension) || '.json';
            } else {
              warnID(16201, uuid, item.uuid);
            }
          }
        }
      }
      function combine(task) {
        const input = task.output = task.input;

        for (let i = 0; i < input.length; i++) {
          const item = input[i];

          if (item.url) {
            continue;
          }

          let url = '';
          let base = '';
          const config = item.config;

          if (item.isNative) {
            base = config && config.nativeBase ? config.base + config.nativeBase : legacyCC.assetManager.generalNativeBase;
          } else {
            base = config && config.importBase ? config.base + config.importBase : legacyCC.assetManager.generalImportBase;
          }

          const uuid = item.overrideUuid || item.uuid;
          let ver = '';

          if (item.info) {
            if (item.isNative) {
              ver = item.info.nativeVer ? `.${item.info.nativeVer}` : '';
            } else {
              ver = item.info.ver ? `.${item.info.ver}` : '';
            }
          }

          if (item.ext === '.ttf') {
            url = `${base}/${uuid.slice(0, 2)}/${uuid}${ver}/${item.options.__nativeName__}`;
          } else {
            url = `${base}/${uuid.slice(0, 2)}/${uuid}${ver}${item.ext}`;
          }

          item.url = url;
        }

        return null;
      }

      class AssetManager {
        static get instance() {
          if (!this._instance) {
            this._instance = new AssetManager();
          }

          return this._instance;
        }

        constructor() {
          this.pipeline = pipeline.append(preprocess).append(load);
          this.fetchPipeline = fetchPipeline.append(preprocess).append(fetch$1);
          this.transformPipeline = transformPipeline.append(parse).append(replaceOverrideAsset).append(combine);
          this.bundles = bundles;
          this.assets = assets;
          this.assetsOverrideMap = assetsOverrideMap;
          this.generalImportBase = '';
          this.generalNativeBase = '';
          this.dependUtil = dependUtil;
          this.force =  PREVIEW;
          this.allowImageBitmap =  !sys.isMobile;
          this.utils = helper;
          this.downloader = downloader$1;
          this.parser = parser;
          this.packManager = packManager;
          this.cacheAsset = true;
          this.cacheManager = null;
          this.presets = presets;
          this.factory = factory;
          this.preprocessPipe = preprocess;
          this.fetchPipe = fetch$1;
          this.loadPipe = load;
          this.references = references;
          this._releaseManager = releaseManager;
          this._files = files;
          this._parsed = parsed;
          this._parsePipeline =  null ;
          this._projectBundles = [];
        }

        get main() {
          return bundles.get(BuiltinBundleName.MAIN) || null;
        }

        get resources() {
          return bundles.get(BuiltinBundleName.RESOURCES) || null;
        }

        init(options = {}) {
          const server = options.server || settings.querySettings(Settings.Category.ASSETS, 'server') || '';
          const bundleVers = options.bundleVers || settings.querySettings(Settings.Category.ASSETS, 'bundleVers') || {};
          const remoteBundles = options.remoteBundles || settings.querySettings(Settings.Category.ASSETS, 'remoteBundles') || [];

          this._files.clear();

          this._parsed.clear();

          this._releaseManager.init();

          this.assets.clear();
          this.bundles.clear();
          this.packManager.init();
          this.downloader.init(server, bundleVers, remoteBundles);
          this.parser.init();
          this.dependUtil.init();
          let importBase = options.importBase || settings.querySettings(Settings.Category.ASSETS, 'importBase') || '';

          if (importBase && importBase.endsWith('/')) {
            importBase = importBase.substr(0, importBase.length - 1);
          }

          let nativeBase = options.nativeBase || settings.querySettings(Settings.Category.ASSETS, 'nativeBase') || '';

          if (nativeBase && nativeBase.endsWith('/')) {
            nativeBase = nativeBase.substr(0, nativeBase.length - 1);
          }

          this.generalImportBase = importBase;
          this.generalNativeBase = nativeBase;
          this._projectBundles = settings.querySettings(Settings.Category.ASSETS, 'projectBundles') || [];
          const assetsOverride = settings.querySettings(Settings.Category.ASSETS, 'assetsOverrides') || {};

          for (const key in assetsOverride) {
            this.assetsOverrideMap.set(key, assetsOverride[key]);
          }
        }

        getBundle(name) {
          return bundles.get(name) || null;
        }

        removeBundle(bundle) {
          bundle._destroy();

          bundles.remove(bundle.name);
        }

        loadAny(requests, options, onProgress, onComplete) {
          const {
            options: opts,
            onProgress: onProg,
            onComplete: onComp
          } = parseParameters(options, onProgress, onComplete);
          opts.preset = opts.preset || 'default';
          requests = Array.isArray(requests) ? requests.slice() : requests;
          const task = Task.create({
            input: requests,
            onProgress: onProg,
            onComplete: asyncify(onComp),
            options: opts
          });
          pipeline.async(task);
        }

        preloadAny(requests, options, onProgress, onComplete) {
          const {
            options: opts,
            onProgress: onProg,
            onComplete: onComp
          } = parseParameters(options, onProgress, onComplete);
          opts.preset = opts.preset || 'preload';
          requests = Array.isArray(requests) ? requests.slice() : requests;
          const task = Task.create({
            input: requests,
            onProgress: onProg,
            onComplete: asyncify(onComp),
            options: opts
          });
          fetchPipeline.async(task);
        }

        loadRemote(url, options, onComplete) {
          const {
            options: opts,
            onComplete: onComp
          } = parseParameters(options, undefined, onComplete);

          if (!opts.reloadAsset && this.assets.has(url)) {
            asyncify(onComp)(null, this.assets.get(url));
            return;
          }

          opts.__isNative__ = true;
          opts.preset = opts.preset || 'remote';
          this.loadAny({
            url
          }, opts, null, (err, data) => {
            if (err) {
              error(err.message, err.stack);

              if (onComp) {
                onComp(err, data);
              }
            } else {
              factory.create(url, data, opts.ext || extname(url), opts, (p1, p2) => {
                if (onComp) {
                  onComp(p1, p2);
                }
              });
            }
          });
        }

        loadBundle(nameOrUrl, options, onComplete) {
          const {
            options: opts,
            onComplete: onComp
          } = parseParameters(options, undefined, onComplete);
          const bundleName = basename(nameOrUrl);

          if (this.bundles.has(bundleName)) {
            asyncify(onComp)(null, this.getBundle(bundleName));
            return;
          }

          opts.preset = opts.preset || 'bundle';
          opts.ext = 'bundle';
          opts.__isNative__ = true;
          this.loadAny({
            url: nameOrUrl
          }, opts, null, (err, data) => {
            if (err) {
              error(err.message, err.stack);

              if (onComp) {
                onComp(err, data);
              }
            } else {
              factory.create(nameOrUrl, data, 'bundle', opts, (p1, p2) => {
                if (onComp) {
                  onComp(p1, p2);
                }
              });
            }
          });
        }

        releaseAsset(asset) {
          releaseManager.tryRelease(asset, true);
        }

        releaseUnusedAssets() {
          assets.forEach(asset => {
            releaseManager.tryRelease(asset);
          });
        }

        releaseAll() {
          assets.forEach(asset => {
            releaseManager.tryRelease(asset, true);
          });
        }

        loadWithJson(json, options, onProgress, onComplete) {
          {
            throw new Error('Only valid in Editor');
          }
        }

      } exports('gK', AssetManager);
      AssetManager._instance = void 0;
      AssetManager.Pipeline = Pipeline;
      AssetManager.Task = Task;
      AssetManager.Cache = Cache;
      AssetManager.RequestItem = RequestItem;
      AssetManager.Bundle = Bundle;
      AssetManager.BuiltinBundleName = BuiltinBundleName;
      AssetManager.CacheManager = CacheManager;
      AssetManager.Downloader = Downloader;
      AssetManager.Parser = Parser$1;
      AssetManager.DependUtil = DependUtil;
      const assetManager = exports('eA', legacyCC.assetManager = AssetManager.instance);
      legacyCC.AssetManager = AssetManager;

      const ImageFmts = ['.png', '.jpg', '.bmp', '.jpeg', '.gif', '.ico', '.tiff', '.webp', '.image', '.pvr', '.pkm', '.astc'];
      const AudioFmts = ['.mp3', '.ogg', '.wav', '.m4a'];

      function GetTrue() {
        return true;
      }

      const md5Pipe = {
        transformURL(url) {
          const uuid = getUuidFromURL(url);

          if (!uuid) {
            return url;
          }

          const bundle = bundles.find(b => !!b.getAssetInfo(uuid));

          if (!bundle) {
            return url;
          }

          let hashValue = '';
          const info = bundle.getAssetInfo(uuid);

          if (url.startsWith(bundle.base + bundle.config.nativeBase)) {
            hashValue = info.nativeVer || '';
          } else {
            hashValue = info.ver || '';
          }

          if (!hashValue || url.indexOf(hashValue) !== -1) {
            return url;
          }

          let hashPatchInFolder = false;

          if (extname(url) === '.ttf') {
            hashPatchInFolder = true;
          }

          if (hashPatchInFolder) {
            const dirname$1 = dirname(url);
            const basename$1 = basename(url);
            url = `${dirname$1}.${hashValue}/${basename$1}`;
          } else {
            url = url.replace(/.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-@]{8,})/, (match, uuid) => `${match}.${hashValue}`);
          }

          return url;
        }

      };
      class CCLoader {
        constructor() {
          this._autoReleaseSetting = Object.create(null);
          this._parseLoadResArgs = parseLoadResArgs;
        }

        set onProgress(val) {
          setDefaultProgressCallback(val);
        }

        get _cache() {
          if (assets instanceof Cache) {
            return assets._map;
          } else {
            const map = {};
            assets.forEach((val, key) => {
              map[key] = val;
            });
            return map;
          }
        }

        load(res, progressCallback, completeCallback) {
          if (completeCallback === undefined) {
            if (progressCallback !== undefined) {
              completeCallback = progressCallback;
              progressCallback = null;
            }
          }

          const requests = Array.isArray(res) ? res : [res];

          for (let i = 0; i < requests.length; i++) {
            const item = requests[i];

            if (typeof item === 'string') {
              requests[i] = {
                url: item,
                __isNative__: true
              };
            } else {
              if (item.type) {
                item.ext = `.${item.type}`;
                item.type = undefined;
              }

              if (item.url) {
                item.__isNative__ = true;
              }
            }
          }

          const images = [];
          const audios = [];
          assetManager.loadAny(requests, null, (finish, total, item) => {
            if (item.content) {
              if (ImageFmts.includes(item.ext)) {
                images.push(item.content);
              } else if (AudioFmts.includes(item.ext)) {
                audios.push(item.content);
              }
            }

            if (progressCallback) {
              progressCallback(finish, total, item);
            }
          }, (err, native) => {
            let out = null;

            if (!err) {
              native = Array.isArray(native) ? native : [native];

              for (let i = 0; i < native.length; i++) {
                const item = native[i];

                if (!(item instanceof Asset)) {
                  let asset = item;
                  const url = requests[i].url;

                  if (images.includes(asset)) {
                    factory.create(url, item, '.png', {}, (err, image) => {
                      asset = native[i] = image;
                    });
                  } else if (audios.includes(asset)) {
                    factory.create(url, item, '.mp3', {}, (err, audio) => {
                      asset = native[i] = audio;
                    });
                  }

                  assets.add(url, asset);
                }
              }

              if (native.length > 1) {
                const map = Object.create(null);
                native.forEach(asset => {
                  map[asset._uuid] = asset;
                });
                out = {
                  isCompleted: GetTrue,
                  _map: map
                };
              } else {
                out = native[0];
              }
            }

            if (completeCallback) {
              completeCallback(err, out);
            }
          });
        }

        getXMLHttpRequest() {
          return new XMLHttpRequest();
        }

        getItem(id) {
          return assetManager.assets.has(id) ? {
            content: assetManager.assets.get(id)
          } : null;
        }

        loadRes(url, type, progressCallback, completeCallback) {
          const {
            type: _type,
            onProgress,
            onComplete
          } = this._parseLoadResArgs(type, progressCallback, completeCallback);

          const extname$1 = extname(url);

          if (extname$1 && !resources.getInfoWithPath(url, _type)) {
            url = url.slice(0, -extname$1.length);
          }

          resources.load(url, _type, onProgress, onComplete);
        }

        loadResArray(urls, type, progressCallback, completeCallback) {
          const {
            type: _type,
            onProgress,
            onComplete
          } = this._parseLoadResArgs(type, progressCallback, completeCallback);

          urls.forEach((url, i) => {
            const extname$1 = extname(url);

            if (extname$1 && !resources.getInfoWithPath(url, _type)) {
              urls[i] = url.slice(0, -extname$1.length);
            }
          });
          resources.load(urls, _type, onProgress, onComplete);
        }

        loadResDir(url, type, progressCallback, completeCallback) {
          const {
            type: _type,
            onProgress,
            onComplete
          } = this._parseLoadResArgs(type, progressCallback, completeCallback);

          resources.loadDir(url, _type, onProgress, (err, out) => {
            let urls = [];

            if (!err) {
              const infos = resources.getDirWithPath(url, _type);
              urls = infos.map(info => info.path);
            }

            if (onComplete) {
              onComplete(err, out, urls);
            }
          });
        }

        getRes(url, type) {
          return assets.has(url) ? assets.get(url) : resources.get(url, type);
        }

        getResCount() {
          return assets.count;
        }

        getDependsRecursively(owner) {
          if (!owner) {
            return [];
          }

          const uuid = typeof owner === 'string' ? owner : owner._uuid;
          return dependUtil.getDepsRecursively(uuid).concat([uuid]);
        }

        get md5Pipe() {
          return md5Pipe;
        }

        get downloader() {
          return downloader$1;
        }

        get loader() {
          return assetManager.parser;
        }

        addDownloadHandlers(extMap) {
          const handler = Object.create(null);

          for (const type in extMap) {
            const func = extMap[type];

            handler[`.${type}`] = (url, options, onComplete) => {
              func({
                url
              }, onComplete);
            };
          }

          downloader$1.register(handler);
        }

        addLoadHandlers(extMap) {
          const handler = Object.create(null);

          for (const type in extMap) {
            const func = extMap[type];

            handler[`.${type}`] = (file, options, onComplete) => {
              func({
                content: file
              }, onComplete);
            };
          }

          parser.register(handler);
        }

        release(asset) {
          if (Array.isArray(asset)) {
            for (let i = 0; i < asset.length; i++) {
              let key = asset[i];

              if (typeof key === 'string') {
                key = assets.get(key);
              }

              assetManager.releaseAsset(key);
            }
          } else if (asset) {
            if (typeof asset === 'string') {
              asset = assets.get(asset);
            }

            assetManager.releaseAsset(asset);
          }
        }

        releaseAsset(asset) {
          assetManager.releaseAsset(asset);
        }

        releaseRes(res, type) {
          resources.release(res, type);
        }

        releaseAll() {
          assetManager.releaseAll();
          assets.clear();
        }

        removeItem(id) {
          return !!assets.remove(id);
        }

        setAutoRelease(asset, autoRelease) {
          if (typeof asset === 'object') {
            asset = asset._uuid;
          }

          this._autoReleaseSetting[asset] = !!autoRelease;
        }

        setAutoReleaseRecursively(asset, autoRelease) {
          if (typeof asset === 'object') {
            asset = asset._uuid;
          }

          autoRelease = !!autoRelease;
          this._autoReleaseSetting[asset] = autoRelease;
          const depends = dependUtil.getDepsRecursively(asset);

          for (let i = 0; i < depends.length; i++) {
            this._autoReleaseSetting[depends[i]] = autoRelease;
          }
        }

        isAutoRelease(asset) {
          if (typeof asset === 'object') {
            asset = asset._uuid;
          }

          return !!this._autoReleaseSetting[asset];
        }

      } exports('gM', CCLoader);
      const loader = exports('gN', new CCLoader());
      const AssetLibrary = exports('gO', {
        init(options) {
          options.importBase = options.libraryPath;
          options.nativeBase =  options.rawAssetsBase ;
          assetManager.init(options);

          if (options.rawAssets) {
            resources.init({
              base: '',
              deps: [],
              scenes: {},
              redirect: [],
              debug: true,
              packs: {},
              types: [],
              versions: {
                import: [],
                native: []
              },
              name: BuiltinBundleName.RESOURCES,
              importBase: options.importBase,
              nativeBase: options.nativeBase,
              paths: options.rawAssets.assets,
              uuids: Object.keys(options.rawAssets.assets),
              extensionMap: {}
            });
          }
        },

        loadAsset(uuid, callback, options) {
          assetManager.loadAny(uuid, callback);
        }

      });
      const url = exports('gP', {});
      replaceProperty(url, 'url', [{
        name: 'normalize',
        target: assetManager.utils,
        targetName: 'assetManager.utils',
        newName: 'normalize'
      }, {
        name: 'raw',
        targetName: 'Asset.prototype',
        newName: 'nativeUrl',
        customFunction: url => {
          if (url.startsWith('resources/')) {
            return transform({
              path: changeExtname(url.substr(10)),
              bundle: BuiltinBundleName.RESOURCES,
              __isNative__: true,
              ext: extname(url)
            });
          }

          return '';
        }
      }]);
      removeProperty(AssetLibrary, 'AssetLibrary', [{
        name: 'getLibUrlNoExt',
        suggest: 'AssetLibrary.getLibUrlNoExt was removed, if you want to transform url, please use assetManager.utils.getUrlWithUuid instead'
      }, {
        name: 'queryAssetInfo',
        suggest: 'AssetLibrary.queryAssetInfo was removed'
      }]);
      removeProperty(loader, 'loader', [{
        name: 'releaseResDir',
        suggest: 'loader.releaseResDir was removed, please use assetManager.releaseAsset instead'
      }, {
        name: 'flowInDeps',
        suggest: 'loader.flowInDeps was removed'
      }, {
        name: 'assetLoader',
        suggest: 'loader.assetLoader was removed, assetLoader and md5Pipe were merged into assetManager.transformPipeline'
      }]);
      replaceProperty(legacyCC, 'cc', [{
        name: 'loader',
        newName: 'assetManager',
        logTimes: 1,
        customGetter: () => loader
      }, {
        name: 'AssetLibrary',
        newName: 'assetManager',
        logTimes: 1,
        customGetter: () => AssetLibrary
      }, {
        name: 'Pipeline',
        target: AssetManager,
        targetName: 'AssetManager',
        newName: 'Pipeline',
        logTimes: 1
      }, {
        name: 'url',
        targetName: 'assetManager',
        newName: 'utils',
        logTimes: 1,
        customGetter: () => url
      }]);
      removeProperty(legacyCC, 'cc', [{
        name: 'LoadingItems',
        suggest: getError(1400, 'LoadingItems', 'AssetManager.Task')
      }]);
      replaceProperty(macro, 'macro', [{
        name: 'DOWNLOAD_MAX_CONCURRENT',
        target: downloader$1,
        targetName: 'assetManager.downloader',
        newName: 'maxConcurrency'
      }]);
      const _autoRelease = releaseManager._autoRelease;

      releaseManager._autoRelease = function (oldScene, newScene, persistNodes) {
        _autoRelease.call(releaseManager, oldScene, newScene, persistNodes);

        const releaseSettings = loader._autoReleaseSetting;
        const keys = Object.keys(releaseSettings);

        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];

          if (releaseSettings[key] === true) {
            const asset = assets.get(key);

            if (asset) {
              releaseManager.tryRelease(asset);
            }
          }
        }
      };

      const Texture2D$1 = jsb.Texture2D;
      const ImageAsset$1 = jsb.ImageAsset;
      const BuiltinResMgr = jsb.BuiltinResMgr;
      const builtinResMgrProto = BuiltinResMgr.prototype;

      builtinResMgrProto.init = function () {
        this._resources = {};
        this._materialsToBeCompiled = [];
        const resources = this._resources;
        const len = 2;
        const numChannels = 4;
        const blackValueView = new Uint8Array(len * len * numChannels);
        let offset = 0;

        for (let i = 0; i < len * len; i++) {
          blackValueView[offset] = 0;
          blackValueView[offset + 1] = 0;
          blackValueView[offset + 2] = 0;
          blackValueView[offset + 3] = 255;
        }

        const blackMemImageSource = {
          width: len,
          height: len,
          _data: blackValueView,
          _compressed: false,
          format: Texture2D$1.PixelFormat.RGBA8888
        };
        const imgAsset = new ImageAsset$1(blackMemImageSource);
        const blackTexture = new Texture2D$1();
        blackTexture._uuid = 'black-texture';
        blackTexture.image = imgAsset;
        resources[blackTexture._uuid] = blackTexture;

        if (legacyCC.SpriteFrame) {
          const spriteFrame = new legacyCC.SpriteFrame();
          const image = imgAsset;
          const texture = new Texture2D$1();
          texture.image = image;
          spriteFrame.texture = texture;
          spriteFrame._uuid = 'default-spriteframe';
          resources[spriteFrame._uuid] = spriteFrame;
        }

        this.initBuiltinRes();
      };

      builtinResMgrProto.get = function (uuid) {
        const res = this._resources[uuid];
        return res || this.getAsset(uuid);
      };

      builtinResMgrProto.compileBuiltinMaterial = function () {
        for (let i = 0; i < this._materialsToBeCompiled.length; ++i) {
          const mat = this._materialsToBeCompiled[i];

          for (let j = 0; j < mat.passes.length; ++j) {
            mat.passes[j].tryCompile();
          }
        }

        this._materialsToBeCompiled.length = 0;
      };

      builtinResMgrProto.loadBuiltinAssets = function () {
        const builtinAssets = settings.querySettings(Settings.Category.ENGINE, 'builtinAssets');
        if ( !builtinAssets) return Promise.resolve();
        const resources = this._resources;
        return new Promise((resolve, reject) => {
          assetManager.loadBundle(BuiltinBundleName.INTERNAL, (err, bundle) => {
            if (err) {
              reject(err);
              return;
            }

            assetManager.loadAny(builtinAssets, (err, assets) => {
              if (err) {
                reject(err);
              } else {
                assets.forEach(asset => {
                  resources[asset.name] = asset;
                  const url = asset.nativeUrl;
                  releaseManager.addIgnoredAsset(asset);
                  this.addAsset(asset.name, asset);

                  if (asset instanceof legacyCC.Material) {
                    this._materialsToBeCompiled.push(asset);
                  }
                });
                resolve();
              }
            });
          });
        });
      };

      const builtinResMgr = exports('cJ', legacyCC.builtinResMgr = BuiltinResMgr.getInstance());

      class Director extends EventTarget {
        constructor() {
          super();
          this._compScheduler = void 0;
          this._nodeActivator = void 0;
          this._invalid = void 0;
          this._paused = void 0;
          this._root = void 0;
          this._loadingScene = void 0;
          this._scene = void 0;
          this._totalFrames = void 0;
          this._scheduler = void 0;
          this._systems = void 0;
          this._persistRootNodes = {};
          this._invalid = false;
          this._paused = false;
          this._root = null;
          this._loadingScene = '';
          this._scene = null;
          this._totalFrames = 0;
          this._scheduler = new Scheduler();
          this._compScheduler = new ComponentScheduler();
          this._nodeActivator = new NodeActivator();
          this._systems = [];
        }

        calculateDeltaTime(now) {}

        end() {
          this.once(Director.EVENT_END_FRAME, () => {
            this.purgeDirector();
          });
        }

        pause() {
          if (this._paused) {
            return;
          }

          this._paused = true;
        }

        purgeDirector() {
          this._scheduler.unscheduleAll();

          this._compScheduler.unscheduleAll();

          this._nodeActivator.reset();

          {
            if (isValid(this._scene)) {
              this._scene.destroy();
            }

            this._scene = null;
          }

          this.stopAnimation();
          assetManager.releaseAll();
        }

        reset() {
          var _this$getScene;

          this.purgeDirector();

          for (const id in this._persistRootNodes) {
            this.removePersistRootNode(this._persistRootNodes[id]);
          }

          (_this$getScene = this.getScene()) === null || _this$getScene === void 0 ? void 0 : _this$getScene.destroy();
          this.emit(Director.EVENT_RESET);
          this.startAnimation();
        }

        runSceneImmediate(scene, onBeforeLoadScene, onLaunched) {
          if (scene instanceof SceneAsset) scene = scene.scene;
          assertID(scene instanceof Scene, 1216);

          {
            console.time('InitScene');
          }

          scene._load();

          {
            console.timeEnd('InitScene');
          }

          {
            console.time('AttachPersist');
          }

          const persistNodeList = Object.keys(this._persistRootNodes).map(x => this._persistRootNodes[x]);

          for (let i = 0; i < persistNodeList.length; i++) {
            const node = persistNodeList[i];
            node.emit(Node$1.EventType.SCENE_CHANGED_FOR_PERSISTS, scene.renderScene);
            const existNode = scene.uuid === node._originalSceneId && scene.getChildByUuid(node.uuid);

            if (existNode) {
              const index = existNode.getSiblingIndex();
              node.hideFlags &= ~CCObject.Flags.DontSave;
              node.hideFlags |= CCObject.Flags.DontSave & existNode.hideFlags;

              existNode._destroyImmediate();

              scene.insertChild(node, index);
            } else {
              node.hideFlags |= CCObject.Flags.DontSave;
              node.parent = scene;
            }
          }

          {
            console.timeEnd('AttachPersist');
          }

          const oldScene = this._scene;

          {
            console.time('Destroy');
          }

          if (isValid(oldScene)) {
            oldScene.destroy();
          }

          {
            {
              console.time('AutoRelease');
            }

            assetManager._releaseManager._autoRelease(oldScene, scene, this._persistRootNodes);

            {
              console.timeEnd('AutoRelease');
            }
          }

          this._scene = null;

          CCObject._deferredDestroy();

          {
            console.timeEnd('Destroy');
          }

          if (onBeforeLoadScene) {
            onBeforeLoadScene();
          }

          this.emit(Director.EVENT_BEFORE_SCENE_LAUNCH, scene);
          this._scene = scene;

          {
            console.time('Activate');
          }

          scene._activate();

          {
            console.timeEnd('Activate');
          }

          if (this._root) {
            this._root.resetCumulativeTime();
          }

          this.startAnimation();

          if (onLaunched) {
            onLaunched(null, scene);
          }

          this.emit(Director.EVENT_AFTER_SCENE_LAUNCH, scene);
        }

        runScene(scene, onBeforeLoadScene, onLaunched) {
          if (scene instanceof SceneAsset) scene = scene.scene;
          assertID(scene, 1205);
          assertID(scene instanceof Scene, 1216);
          this.once(Director.EVENT_END_FRAME, () => {
            this.runSceneImmediate(scene, onBeforeLoadScene, onLaunched);
          });
        }

        loadScene(sceneName, onLaunched, onUnloaded) {
          if (this._loadingScene) {
            warnID(1208, sceneName, this._loadingScene);
            return false;
          }

          const bundle = assetManager.bundles.find(bundle => !!bundle.getSceneInfo(sceneName));

          if (bundle) {
            this.emit(Director.EVENT_BEFORE_SCENE_LOADING, sceneName);
            this._loadingScene = sceneName;
            console.time(`LoadScene ${sceneName}`);
            bundle.loadScene(sceneName, (err, scene) => {
              console.timeEnd(`LoadScene ${sceneName}`);
              this._loadingScene = '';

              if (err) {
                error(err);

                if (onLaunched) {
                  onLaunched(err);
                }
              } else {
                this.runSceneImmediate(scene, onUnloaded, onLaunched);
              }
            });
            return true;
          } else {
            errorID(1209, sceneName);
            return false;
          }
        }

        preloadScene(sceneName, onProgress, onLoaded) {
          const bundle = assetManager.bundles.find(bundle => !!bundle.getSceneInfo(sceneName));

          if (bundle) {
            bundle.preloadScene(sceneName, null, onProgress, onLoaded);
          } else {
            const err = `Can not preload the scene "${sceneName}" because it is not in the build settings.`;

            if (onLoaded) {
              onLoaded(new Error(err));
            }

            error(`preloadScene: ${err}`);
          }
        }

        resume() {
          if (!this._paused) {
            return;
          }

          this._paused = false;
        }

        get root() {
          return this._root;
        }

        getScene() {
          return this._scene;
        }

        getDeltaTime() {
          return legacyCC.game.deltaTime;
        }

        getTotalTime() {
          return legacyCC.game.totalTime;
        }

        getCurrentTime() {
          return legacyCC.game.frameStartTime;
        }

        getTotalFrames() {
          return this._totalFrames;
        }

        isPaused() {
          return this._paused;
        }

        getScheduler() {
          return this._scheduler;
        }

        setScheduler(scheduler) {
          if (this._scheduler !== scheduler) {
            this.unregisterSystem(this._scheduler);
            this._scheduler = scheduler;
            this.registerSystem(Scheduler.ID, scheduler, 200);
          }
        }

        registerSystem(name, sys, priority) {
          sys.id = name;
          sys.priority = priority;

          this._systems.push(sys);

          this._systems.sort(System.sortByPriority);
        }

        unregisterSystem(sys) {
          fastRemove(this._systems, sys);

          this._systems.sort(System.sortByPriority);
        }

        getSystem(name) {
          return this._systems.find(sys => sys.id === name);
        }

        getAnimationManager() {
          return this.getSystem(legacyCC.AnimationManager.ID);
        }

        startAnimation() {
          this._invalid = false;
        }

        stopAnimation() {
          this._invalid = true;
        }

        mainLoop(now) {
          let dt;

          {
            dt = legacyCC.game._calculateDT(now);
          }

          this.tick(dt);
        }

        tick(dt) {
          if (!this._invalid) {
            this.emit(Director.EVENT_BEGIN_FRAME);

            {
              input._frameDispatchEvents();
            }

            if (!this._paused) {
              this.emit(Director.EVENT_BEFORE_UPDATE);

              this._compScheduler.startPhase();

              this._compScheduler.updatePhase(dt);

              for (let i = 0; i < this._systems.length; ++i) {
                this._systems[i].update(dt);
              }

              this._compScheduler.lateUpdatePhase(dt);

              this.emit(Director.EVENT_AFTER_UPDATE);

              CCObject._deferredDestroy();

              for (let i = 0; i < this._systems.length; ++i) {
                this._systems[i].postUpdate(dt);
              }
            }

            this.emit(Director.EVENT_BEFORE_DRAW);
            uiRendererManager.updateAllDirtyRenderers();

            this._root.frameMove(dt);

            this.emit(Director.EVENT_AFTER_DRAW);
            Node$1.resetHasChangedFlags();
            Node$1.clearNodeArray();
            scalableContainerManager.update(dt);
            this.emit(Director.EVENT_END_FRAME);
            this._totalFrames++;
          }
        }

        buildRenderPipeline() {
          if (this._root) {
            this._root.customPipeline.beginSetup();

            const builder = legacyCC.rendering.getCustomPipeline(macro.CUSTOM_PIPELINE_NAME);
            builder.setup(this._root.cameraList, this._root.customPipeline);

            this._root.customPipeline.endSetup();
          }
        }

        setupRenderPipelineBuilder() {
          if (macro.CUSTOM_PIPELINE_NAME !== '' && legacyCC.rendering && this._root && this._root.usesCustomPipeline) {
            this.on(Director.EVENT_BEFORE_RENDER, this.buildRenderPipeline, this);
          }
        }

        init() {
          this._totalFrames = 0;
          this._paused = false;
          this.registerSystem(Scheduler.ID, this._scheduler, 200);
          this._root = new Root(deviceManager.gfxDevice);
          const rootInfo = {};

          this._root.initialize(rootInfo);

          this.setupRenderPipelineBuilder();

          for (let i = 0; i < this._systems.length; i++) {
            this._systems[i].init();
          }

          this.emit(Director.EVENT_INIT);
        }

        addPersistRootNode(node) {
          if (!Node$1.isNode(node) || !node.uuid) {
            warnID(3800);
            return;
          }

          const id = node.uuid;

          if (!this._persistRootNodes[id]) {
            const scene = this._scene;

            if (isValid(scene)) {
              if (!node.parent) {
                node.parent = scene;
                node._originalSceneId = scene.uuid;
              } else if (!(node.parent instanceof Scene)) {
                warnID(3801);
                return;
              } else if (node.parent !== scene) {
                warnID(3802);
                return;
              } else {
                node._originalSceneId = scene.uuid;
              }
            }

            this._persistRootNodes[id] = node;
            node._persistNode = true;

            assetManager._releaseManager._addPersistNodeRef(node);
          }
        }

        removePersistRootNode(node) {
          const id = node.uuid || '';

          if (node === this._persistRootNodes[id]) {
            delete this._persistRootNodes[id];
            node._persistNode = false;
            node._originalSceneId = '';

            assetManager._releaseManager._removePersistNodeRef(node);
          }
        }

        isPersistRootNode(node) {
          return !!node._persistNode;
        }

      } exports('cr', Director);
      Director.EVENT_INIT = 'director_init';
      Director.EVENT_RESET = 'director_reset';
      Director.EVENT_BEFORE_SCENE_LOADING = 'director_before_scene_loading';
      Director.EVENT_BEFORE_SCENE_LAUNCH = 'director_before_scene_launch';
      Director.EVENT_AFTER_SCENE_LAUNCH = 'director_after_scene_launch';
      Director.EVENT_BEFORE_UPDATE = 'director_before_update';
      Director.EVENT_AFTER_UPDATE = 'director_after_update';
      Director.EVENT_BEFORE_DRAW = 'director_before_draw';
      Director.EVENT_AFTER_DRAW = 'director_after_draw';
      Director.EVENT_BEFORE_COMMIT = 'director_before_commit';
      Director.EVENT_BEFORE_RENDER = 'director_before_render';
      Director.EVENT_AFTER_RENDER = 'director_after_render';
      Director.EVENT_BEFORE_PHYSICS = 'director_before_physics';
      Director.EVENT_AFTER_PHYSICS = 'director_after_physics';
      Director.EVENT_BEGIN_FRAME = 'director_begin_frame';
      Director.EVENT_END_FRAME = 'director_end_frame';
      Director.instance = void 0;
      legacyCC.Director = Director;
      const director = exports('bZ', Director.instance = legacyCC.director = new Director());

      const ccwindow$1 = typeof globalThis.jsb !== 'undefined' ? typeof jsb.window !== 'undefined' ? jsb.window : window : window;
      const ccdocument$2 = ccwindow$1.document;
      function findCanvas() {
        const container = ccdocument$2.createElement('div');
        const frame = ccdocument$2.documentElement;
        const canvas = ccwindow$1.__canvas;
        return {
          frame,
          canvas,
          container
        };
      }
      function loadJsFile(path) {

        return require(`${path}`);
      }

      class Pacer {
        constructor() {
          this._rafHandle = 0;
          this._onTick = null;
          this._targetFrameRate = 60;
          this._isPlaying = false;
          this._updateCallback = void 0;

          this._updateCallback = () => {
            if (this._isPlaying) {
              this._rafHandle = requestAnimationFrame(this._updateCallback);
            }

            if (this._onTick) {
              this._onTick();
            }
          };
        }

        get targetFrameRate() {
          return this._targetFrameRate;
        }

        set targetFrameRate(val) {
          if (this._targetFrameRate !== val) {
            assertIsTrue(val > 0);
            this._targetFrameRate = val;
            jsb.setPreferredFramesPerSecond(this._targetFrameRate);

            if (this._isPlaying) {
              this.stop();
              this.start();
            }
          }
        }

        set onTick(val) {
          this._onTick = val;
        }

        get onTick() {
          return this._onTick;
        }

        start() {
          if (this._isPlaying) return;
          this._rafHandle = requestAnimationFrame(this._updateCallback);
          this._isPlaying = true;
        }

        stop() {
          if (!this._isPlaying) return;
          cancelAnimationFrame(this._rafHandle);
          this._rafHandle = 0;
          this._isPlaying = false;
        }

      }

      let XREye;

      (function (XREye) {
        XREye[XREye["NONE"] = -1] = "NONE";
        XREye[XREye["LEFT"] = 0] = "LEFT";
        XREye[XREye["RIGHT"] = 1] = "RIGHT";
      })(XREye || (XREye = {}));

      let XRConfigKey;

      (function (XRConfigKey) {
        XRConfigKey[XRConfigKey["SESSION_RUNNING"] = 2] = "SESSION_RUNNING";
        XRConfigKey[XRConfigKey["VIEW_COUNT"] = 6] = "VIEW_COUNT";
        XRConfigKey[XRConfigKey["SWAPCHAIN_WIDTH"] = 7] = "SWAPCHAIN_WIDTH";
        XRConfigKey[XRConfigKey["SWAPCHAIN_HEIGHT"] = 8] = "SWAPCHAIN_HEIGHT";
        XRConfigKey[XRConfigKey["DEVICE_IPD"] = 37] = "DEVICE_IPD";
        XRConfigKey[XRConfigKey["SPLIT_AR_GLASSES"] = 42] = "SPLIT_AR_GLASSES";
      })(XRConfigKey || (XRConfigKey = {}));

      let XRPoseType;

      (function (XRPoseType) {
        XRPoseType[XRPoseType["VIEW_LEFT"] = 0] = "VIEW_LEFT";
        XRPoseType[XRPoseType["HAND_LEFT"] = 1] = "HAND_LEFT";
        XRPoseType[XRPoseType["AIM_LEFT"] = 2] = "AIM_LEFT";
        XRPoseType[XRPoseType["VIEW_RIGHT"] = 3] = "VIEW_RIGHT";
        XRPoseType[XRPoseType["HAND_RIGHT"] = 4] = "HAND_RIGHT";
        XRPoseType[XRPoseType["AIM_RIGHT"] = 5] = "AIM_RIGHT";
        XRPoseType[XRPoseType["HEAD_MIDDLE"] = 6] = "HEAD_MIDDLE";
      })(XRPoseType || (XRPoseType = {}));

      const v2_0 = new Vec2();
      class SplashScreen {
        get isFinished() {
          return this._curTime >= this.settings.totalTime;
        }

        set curTime(val) {
          this._curTime = val;
        }

        get curTime() {
          return this._curTime;
        }

        init() {
          var _settings$querySettin, _settings$querySettin2, _settings$querySettin3, _settings$querySettin4, _settings$querySettin5, _settings$querySettin6, _settings$querySettin7, _settings$querySettin8;

          this.settings = {
            displayRatio: (_settings$querySettin = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'displayRatio')) !== null && _settings$querySettin !== void 0 ? _settings$querySettin : 0.4,
            totalTime: (_settings$querySettin2 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'totalTime')) !== null && _settings$querySettin2 !== void 0 ? _settings$querySettin2 : 3000,
            watermarkLocation: (_settings$querySettin3 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'watermarkLocation')) !== null && _settings$querySettin3 !== void 0 ? _settings$querySettin3 : 'default',
            autoFit: (_settings$querySettin4 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'autoFit')) !== null && _settings$querySettin4 !== void 0 ? _settings$querySettin4 : true,
            url: (_settings$querySettin5 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'url')) !== null && _settings$querySettin5 !== void 0 ? _settings$querySettin5 : '',
            type: (_settings$querySettin6 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'type')) !== null && _settings$querySettin6 !== void 0 ? _settings$querySettin6 : 'default',
            bgBase64: (_settings$querySettin7 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'bgBase64')) !== null && _settings$querySettin7 !== void 0 ? _settings$querySettin7 : '',
            base64src: (_settings$querySettin8 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'base64src')) !== null && _settings$querySettin8 !== void 0 ? _settings$querySettin8 : ''
          };
          this._curTime = 0;

          if ( this.settings.base64src === '' || this.settings.totalTime <= 0) {
            this.settings.totalTime = 0;
          } else {
            this.device = legacyCC.director.root.device;
            this.swapchain = legacyCC.director.root.mainWindow.swapchain;
            this.preInit();
            this.initLayout();
            this.initWaterMark();
            const bgPromise = new Promise((resolve, reject) => {
              this.bgImage = new ccwindow.Image();

              this.bgImage.onload = () => {
                this.initBG();
                resolve();
              };

              this.bgImage.onerror = () => {
                reject();
              };

              this.bgImage.src = this.settings.bgBase64;
            });
            const logoPromise = new Promise((resolve, reject) => {
              this.logoImage = new ccwindow.Image();

              this.logoImage.onload = () => {
                this.initLogo();
                resolve();
              };

              this.logoImage.onerror = () => {
                reject();
              };

              this.logoImage.src = this.settings.base64src;
            });
            return Promise.all([bgPromise, logoPromise]);
          }

          return Promise.resolve([]);
        }

        preInit() {
          this.clearColors = [new Color$1(0, 0, 0, 255)];
          const {
            device,
            swapchain
          } = this;
          this.renderArea = new Rect$1(0, 0, swapchain.width, swapchain.height);
          this.cmdBuff = device.commandBuffer;
          const verts = new Float32Array([0.5, 0.5, 1, 0, -0.5, 0.5, 0, 0, 0.5, -0.5, 1, 1, -0.5, -0.5, 0, 1]);
          const vbStride = Float32Array.BYTES_PER_ELEMENT * 4;
          const vbSize = vbStride * 4;
          this.vertexBuffers = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, vbSize, vbStride));
          this.vertexBuffers.update(verts);
          const indices = new Uint16Array([0, 1, 2, 1, 3, 2]);
          const ibStride = Uint16Array.BYTES_PER_ELEMENT;
          const ibSize = ibStride * 6;
          this.indicesBuffers = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, ibSize, ibStride));
          this.indicesBuffers.update(indices);
          const attributes = [new Attribute('a_position', Format.RG32F), new Attribute('a_texCoord', Format.RG32F)];
          const IAInfo = new InputAssemblerInfo(attributes, [this.vertexBuffers], this.indicesBuffers);
          this.quadAssmebler = device.createInputAssembler(IAInfo);
          this.projection = new Mat4();
          Mat4.ortho(this.projection, -1, 1, -1, 1, -1, 1, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY, swapchain.surfaceTransform);
          this.isMobile = sys.isMobile;
        }

        initLayout() {
          if (this.isMobile) {
            this.bgWidth = 812;
            this.bgHeight = 375;
            this.logoWidthTemp = 70;
            this.logoHeightTemp = 100;
            this.logoXTrans = 1 / 2;
            this.logoYTrans = 2 / 3;
            this.textSize = 12;
            this.textHeight = this.textSize + this.textExpandSize;
            this.textXTrans = 1 / 2;
            this.textYExtraTrans = 16;
          } else {
            this.bgWidth = 1920;
            this.bgHeight = 1080;
            this.logoWidthTemp = 140;
            this.logoHeightTemp = 200;
            this.logoXTrans = 1 / 2;
            this.logoYTrans = 1 / 6 + 2.5 / 6;
            this.textSize = 24;
            this.textHeight = this.textSize + this.textExpandSize;
            this.textXTrans = 1 / 2;
            this.textYExtraTrans = 32;
          }

          this.initScale();
        }

        initScale() {
          const dw = this.swapchain.width;
          const dh = this.swapchain.height;
          let desiredWidth = this.isMobile ? 375 : 1080;
          let desiredHeight = this.isMobile ? 812 : 1920;

          if (dw > dh) {
            const temp = desiredHeight;
            desiredHeight = desiredWidth;
            desiredWidth = temp;
          }

          if (dw / dh > 16 / 9) {
            this.scaleSize = dh / desiredHeight;
          } else {
            this.scaleSize = dw / desiredWidth;
          }
        }

        update(deltaTime) {
          const settings = this.settings;
          const {
            device,
            swapchain
          } = this;
          Mat4.ortho(this.projection, -1, 1, -1, 1, -1, 1, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY, swapchain.surfaceTransform);
          const dw = swapchain.width;
          const dh = swapchain.height;
          this.initScale();
          this._curTime += deltaTime * 1000;
          const percent = clamp01(this._curTime / settings.totalTime);
          const u_p = cubicOut(percent);
          let scaleX = 1;
          let scaleY = 1;

          if (dw < dh) {
            scaleX = dh * this.bgRatio;
            scaleY = dh;
          } else {
            scaleX = dw;
            scaleY = dw * this.bgRatio;
          }

          this.bgMat.setProperty('resolution', v2_0.set(dw, dh), 0);
          this.bgMat.setProperty('scale', v2_0.set(scaleX, scaleY), 0);
          this.bgMat.setProperty('translate', v2_0.set(dw * 0.5, dh * 0.5), 0);
          this.bgMat.setProperty('percent', 1.0);
          this.bgMat.setProperty('u_projection', this.projection);
          this.bgMat.passes[0].update();
          scaleX = 1;
          scaleY = 1;
          scaleX = this.logoWidth * this.scaleSize * settings.displayRatio;
          scaleY = this.logoHeight * this.scaleSize * settings.displayRatio;
          const logoYTrans = dh * this.logoYTrans;
          this.logoMat.setProperty('resolution', v2_0.set(dw, dh), 0);
          this.logoMat.setProperty('scale', v2_0.set(scaleX, scaleY), 0);
          this.logoMat.setProperty('translate', v2_0.set(dw * this.logoXTrans, logoYTrans), 0);
          this.logoMat.setProperty('percent', u_p);
          this.logoMat.setProperty('u_projection', this.projection);
          this.logoMat.passes[0].update();

          if (this.watermarkMat) {
            const watermarkTW = this.watermarkTexture.width;
            const watermarkTH = this.watermarkTexture.height;
            scaleX = watermarkTW;
            scaleY = watermarkTH;
            const textYTrans = logoYTrans - (this.logoHeight * 0.5 * settings.displayRatio + this.textYExtraTrans) * this.scaleSize - watermarkTH * 0.5;
            this.watermarkMat.setProperty('resolution', v2_0.set(dw, dh), 0);
            this.watermarkMat.setProperty('scale', v2_0.set(scaleX, scaleY), 0);
            this.watermarkMat.setProperty('translate', v2_0.set(dw * this.textXTrans, textYTrans), 0);
            this.watermarkMat.setProperty('percent', u_p);
            this.watermarkMat.setProperty('u_projection', this.projection);
            this.watermarkMat.passes[0].update();
          }

          this.frame();
        }

        initBG() {
          const device = this.device;
          this.bgMat = new Material();
          this.bgMat.initialize({
            effectName: 'util/splash-screen'
          });
          const samplerInfo = new SamplerInfo();
          samplerInfo.addressU = Address.CLAMP;
          samplerInfo.addressV = Address.CLAMP;
          samplerInfo.addressW = Address.CLAMP;
          this.sampler = device.getSampler(samplerInfo);
          this.bgTexture = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, this.bgImage.width, this.bgImage.height));
          const pass = this.bgMat.passes[0];
          const binding = pass.getBinding('mainTexture');
          pass.bindTexture(binding, this.bgTexture);
          this.shader = pass.getShaderVariant();
          const descriptorSet = pass.descriptorSet;
          descriptorSet.bindSampler(binding, this.sampler);
          descriptorSet.update();
          const region = new BufferTextureCopy();
          region.texExtent.width = this.bgImage.width;
          region.texExtent.height = this.bgImage.height;
          region.texExtent.depth = 1;
          device.copyTexImagesToTexture([this.bgImage], this.bgTexture, [region]);
        }

        initLogo() {
          const device = this.device;
          this.logoMat = new Material();
          this.logoMat.initialize({
            effectName: 'util/splash-screen'
          });
          const samplerInfo = new SamplerInfo();
          samplerInfo.addressU = Address.CLAMP;
          samplerInfo.addressV = Address.CLAMP;
          samplerInfo.addressW = Address.CLAMP;
          this.sampler = device.getSampler(samplerInfo);
          this.logoTexture = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, this.logoImage.width, this.logoImage.height));
          const pass = this.logoMat.passes[0];
          const binding = pass.getBinding('mainTexture');
          pass.bindTexture(binding, this.logoTexture);
          this.shader = pass.getShaderVariant();
          const descriptorSet = pass.descriptorSet;
          descriptorSet.bindSampler(binding, this.sampler);
          descriptorSet.update();
          const region = new BufferTextureCopy();
          region.texExtent.width = this.logoImage.width;
          region.texExtent.height = this.logoImage.height;
          region.texExtent.depth = 1;
          device.copyTexImagesToTexture([this.logoImage], this.logoTexture, [region]);
          const logoRatio = this.logoImage.width / this.logoImage.height;

          if (logoRatio < 1) {
            this.logoWidth = this.logoWidthTemp;
            this.logoHeight = this.logoWidthTemp / logoRatio;
          } else {
            this.logoWidth = this.logoHeightTemp * logoRatio;
            this.logoHeight = this.logoHeightTemp;
          }
        }

        initWaterMark() {
          const watermarkImg = ccwindow.document.createElement('canvas');
          watermarkImg.height = this.textHeight * this.scaleSize;
          watermarkImg.style.width = `${watermarkImg.width}`;
          watermarkImg.style.height = `${watermarkImg.height}`;
          const text = 'Created with Cocos';
          const ctx = watermarkImg.getContext('2d');
          ctx.font = `${this.textSize * this.scaleSize}px Arial`;
          ctx.textBaseline = 'top';
          ctx.textAlign = 'center';
          ctx.fillStyle = '#707070';
          const textLength = ctx.measureText(text).width + 10;
          watermarkImg.width = textLength;
          ctx.font = `${this.textSize * this.scaleSize}px Arial`;
          ctx.textBaseline = 'top';
          ctx.textAlign = 'center';
          ctx.fillStyle = '#707070';
          ctx.fillText(text, watermarkImg.width / 2, 0);
          const region = new BufferTextureCopy();
          region.texExtent.width = watermarkImg.width;
          region.texExtent.height = watermarkImg.height;
          region.texExtent.depth = 1;
          this.watermarkTexture = this.device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, watermarkImg.width, watermarkImg.height));
          this.device.copyTexImagesToTexture([watermarkImg], this.watermarkTexture, [region]);
          this.watermarkMat = new Material();
          this.watermarkMat.initialize({
            effectName: 'util/splash-screen'
          });
          const pass = this.watermarkMat.passes[0];
          const binding = pass.getBinding('mainTexture');
          pass.bindTexture(binding, this.watermarkTexture);
          pass.descriptorSet.update();
        }

        frame() {
          const {
            device,
            swapchain
          } = this;

          if (!sys.isXR || xr.entry.isRenderAllowable()) {
            const renderSize = sys.isXR ? 2 : 1;

            for (let xrEye = 0; xrEye < renderSize; xrEye++) {
              if (sys.isXR) {
                xr.entry.renderLoopStart(xrEye);
                const xrFov = xr.entry.getEyeFov(xrEye);
                let radioLeft = 1.0;
                let radioRight = 1.0;

                if (xrEye === XREye.LEFT) {
                  radioLeft = Math.abs(Math.tan(xrFov[0])) / Math.abs(Math.tan(xrFov[1]));
                } else if (xrEye === XREye.RIGHT) {
                  radioRight = Math.abs(Math.tan(xrFov[1])) / Math.abs(Math.tan(xrFov[0]));
                }

                Mat4.ortho(this.projection, -radioLeft, radioRight, -1, 1, -1, 1, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY, swapchain.surfaceTransform);
                this.projection.m00 = preTransforms[swapchain.surfaceTransform][0];
                this.projection.m05 = preTransforms[swapchain.surfaceTransform][3] * device.capabilities.clipSpaceSignY;
                this.bgMat.setProperty('u_projection', this.projection);
                this.bgMat.passes[0].update();
                this.logoMat.setProperty('u_projection', this.projection);
                this.logoMat.passes[0].update();

                if (this.watermarkMat) {
                  this.watermarkMat.setProperty('u_projection', this.projection);
                  this.watermarkMat.passes[0].update();
                }
              }

              device.enableAutoBarrier(true);
              device.acquire([swapchain]);
              const cmdBuff = this.cmdBuff;
              const framebuffer = legacyCC.director.root.mainWindow.framebuffer;
              const renderArea = this.renderArea;
              renderArea.width = swapchain.width;
              renderArea.height = swapchain.height;
              cmdBuff.begin();
              cmdBuff.beginRenderPass(framebuffer.renderPass, framebuffer, renderArea, this.clearColors, 1.0, 0);
              const bgPass = this.bgMat.passes[0];
              const bgPso = PipelineStateManager.getOrCreatePipelineState(device, bgPass, this.shader, framebuffer.renderPass, this.quadAssmebler);
              cmdBuff.bindPipelineState(bgPso);
              cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, bgPass.descriptorSet);
              cmdBuff.bindInputAssembler(this.quadAssmebler);
              cmdBuff.draw(this.quadAssmebler);
              const logoPass = this.logoMat.passes[0];
              const logoPso = PipelineStateManager.getOrCreatePipelineState(device, logoPass, this.shader, framebuffer.renderPass, this.quadAssmebler);
              cmdBuff.bindPipelineState(logoPso);
              cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, logoPass.descriptorSet);
              cmdBuff.bindInputAssembler(this.quadAssmebler);
              cmdBuff.draw(this.quadAssmebler);

              if (this.watermarkMat) {
                const wartermarkPass = this.watermarkMat.passes[0];
                const watermarkPso = PipelineStateManager.getOrCreatePipelineState(device, wartermarkPass, this.shader, framebuffer.renderPass, this.quadAssmebler);
                cmdBuff.bindPipelineState(watermarkPso);
                cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, wartermarkPass.descriptorSet);
                cmdBuff.bindInputAssembler(this.quadAssmebler);
                cmdBuff.draw(this.quadAssmebler);
              }

              cmdBuff.endRenderPass();
              cmdBuff.end();
              device.flushCommands([cmdBuff]);
              device.queue.submit([cmdBuff]);
              device.present();
              device.enableAutoBarrier(!legacyCC.rendering);

              if (sys.isXR) {
                xr.entry.renderLoopEnd(xrEye);
              }
            }
          }
        }

        destroy() {
          this.device = null;
          this.swapchain = null;
          this.clearColors = null;
          if (this.bgImage.destroy) this.bgImage.destroy();
          this.bgImage = null;
          this.bgMat.destroy();
          this.bgMat = null;
          this.bgTexture.destroy();
          this.bgTexture = null;
          if (this.logoImage.destroy) this.logoImage.destroy();
          this.logoImage = null;
          this.renderArea = null;
          this.cmdBuff = null;
          this.shader = null;
          this.logoMat.destroy();
          this.logoMat = null;
          this.logoTexture.destroy();
          this.logoTexture = null;
          this.quadAssmebler.destroy();
          this.quadAssmebler = null;
          this.vertexBuffers.destroy();
          this.vertexBuffers = null;
          this.indicesBuffers.destroy();
          this.indicesBuffers = null;
          this.sampler = null;

          if (this.watermarkTexture) {
            this.watermarkMat.destroy();
            this.watermarkMat = null;
            this.watermarkTexture.destroy();
            this.watermarkTexture = null;
          }

          this.settings = null;
        }

        static get instance() {
          if (!SplashScreen._ins) {
            SplashScreen._ins = new SplashScreen();
          }

          return SplashScreen._ins;
        }

        constructor() {
          this._curTime = 0;
          this.isMobile = false;
          this.bgWidth = 1920;
          this.bgHeight = 1080;
          this.bgRatio = 16 / 9;
          this.logoWidthTemp = 140;
          this.logoHeightTemp = 200;
          this.logoWidth = 0;
          this.logoHeight = 0;
          this.logoXTrans = 1 / 2;
          this.logoYTrans = 1 / 6 + 2.5 / 6;
          this.textSize = 24;
          this.textHeight = 24;
          this.textXTrans = 1 / 2;
          this.textYExtraTrans = 32;
          this.textExpandSize = 4;
          this.scaleSize = 1;
        }

      }
      SplashScreen._ins = void 0;
      legacyCC.internal.SplashScreen = SplashScreen;

      class EffectSettings {
        constructor() {
          this._data = null;
        }

        init(path = '') {
          if (!legacyCC.rendering || !legacyCC.rendering.enableEffectImport || !path) {
            return Promise.resolve();
          }

          return new Promise((resolve, reject) => {
            if ( !path.startsWith('http')) {
              fsUtils.readArrayBuffer(path, (err, arrayBuffer) => {
                if (err) {
                  reject(err);
                  return;
                }

                this._data = arrayBuffer;
                resolve();
              });
            } else {
              const xhr = new XMLHttpRequest();
              xhr.open('GET', path);
              xhr.responseType = 'arraybuffer';

              xhr.onload = () => {
                this._data = xhr.response;
                resolve();
              };

              xhr.onerror = () => {
                reject(new Error('request effect settings failed!'));
              };

              xhr.send(null);
            }
          });
        }

        get data() {
          return this._data;
        }

      }
      const effectSettings = new EffectSettings();
      legacyCC.effectSettings = effectSettings;

      class Game extends EventTarget {
        constructor(...args) {
          super(...args);
          this.frame = null;
          this.container = null;
          this.canvas = null;
          this.renderType = -1;
          this.eventTargetOn = super.on;
          this.eventTargetOnce = super.once;
          this.config = {};
          this.onStart = null;
          this.frameTime = 1000 / 60;
          this._isCloning = false;
          this._inited = false;
          this._engineInited = false;
          this._rendererInitialized = false;
          this._paused = true;
          this._pausedByEngine = false;
          this._frameRate = 60;
          this._pacer = null;
          this._initTime = 0;
          this._startTime = 0;
          this._deltaTime = 0.0;
          this._useFixedDeltaTime = false;
          this._shouldLoadLaunchScene = true;
          this.onPreBaseInitDelegate = new AsyncDelegate();
          this.onPostBaseInitDelegate = new AsyncDelegate();
          this.onPreInfrastructureInitDelegate = new AsyncDelegate();
          this.onPostInfrastructureInitDelegate = new AsyncDelegate();
          this.onPreSubsystemInitDelegate = new AsyncDelegate();
          this.onPostSubsystemInitDelegate = new AsyncDelegate();
          this.onPreProjectInitDelegate = new AsyncDelegate();
          this.onPostProjectInitDelegate = new AsyncDelegate();
        }

        get inited() {
          return this._inited;
        }

        get frameRate() {
          return this._frameRate;
        }

        set frameRate(frameRate) {
          if (typeof frameRate !== 'number') {
            frameRate = parseInt(frameRate, 10);

            if (Number.isNaN(frameRate)) {
              frameRate = 60;
            }
          }

          this._frameRate = frameRate;
          this.frameTime = 1000 / frameRate;
          if (this._pacer) this._pacer.targetFrameRate = this._frameRate;
        }

        get deltaTime() {
          return this._useFixedDeltaTime ? this.frameTime / 1000 : this._deltaTime;
        }

        get totalTime() {
          return performance.now() - this._initTime;
        }

        get frameStartTime() {
          return this._startTime;
        }

        setFrameRate(frameRate) {
          this.frameRate = frameRate;
        }

        getFrameRate() {
          return this.frameRate;
        }

        step() {
          director.tick(this._calculateDT(true));
        }

        pauseByEngine() {
          if (this._paused) {
            return;
          }

          this._pausedByEngine = true;
          this.pause();
        }

        resumeByEngine() {
          if (this._pausedByEngine) {
            this.resume();
            this._pausedByEngine = false;
          }
        }

        pause() {
          var _this$_pacer;

          if (this._paused) {
            return;
          }

          this._paused = true;
          (_this$_pacer = this._pacer) === null || _this$_pacer === void 0 ? void 0 : _this$_pacer.stop();
          this.emit(Game.EVENT_PAUSE);
        }

        resume() {
          var _this$_pacer2;

          if (!this._paused) {
            return;
          }

          input._clearEvents();

          this._paused = false;
          (_this$_pacer2 = this._pacer) === null || _this$_pacer2 === void 0 ? void 0 : _this$_pacer2.start();
          this.emit(Game.EVENT_RESUME);
        }

        isPaused() {
          return this._paused;
        }

        restart() {
          const endFramePromise = new Promise(resolve => {
            director.once(Director.EVENT_END_FRAME, () => resolve());
          });
          return endFramePromise.then(() => {
            director.reset();

            legacyCC.Object._deferredDestroy();

            this.pause();
            this.resume();
            this._shouldLoadLaunchScene = true;
            SplashScreen.instance.curTime = 0;

            this._safeEmit(Game.EVENT_RESTART);
          });
        }

        end() {
          systemInfo.close();
        }

        on(type, callback, target, once) {
          if (this._engineInited && type === Game.EVENT_ENGINE_INITED || this._inited && type === Game.EVENT_GAME_INITED || this._rendererInitialized && type === Game.EVENT_RENDERER_INITED) {
            callback.call(target);
          }

          return this.eventTargetOn(type, callback, target, once);
        }

        once(type, callback, target) {
          if (this._engineInited && type === Game.EVENT_ENGINE_INITED) {
            return callback.call(target);
          }

          return this.eventTargetOnce(type, callback, target);
        }

        init(config) {
          this._compatibleWithOldParams(config);

          return Promise.resolve().then(() => {
            this.emit(Game.EVENT_PRE_BASE_INIT);
            return this.onPreBaseInitDelegate.dispatch();
          }).then(() => {
            {
              console.time('Init Base');
            }

            const debugMode = config.debugMode || DebugMode.NONE;

            _resetDebugSetting(debugMode);
          }).then(() => sys.init()).then(() => {
            this._initEvents();
          }).then(() => settings.init(config.settingsPath, config.overrideSettings)).then(() => {
            {
              console.timeEnd('Init Base');
            }

            this.emit(Game.EVENT_POST_BASE_INIT);
            return this.onPostBaseInitDelegate.dispatch();
          }).then(() => {
            this.emit(Game.EVENT_PRE_INFRASTRUCTURE_INIT);
            return this.onPreInfrastructureInitDelegate.dispatch();
          }).then(() => {
            {
              console.time('Init Infrastructure');
            }

            macro.init();

            this._initXR();

            const adapter = findCanvas();

            if (adapter) {
              this.canvas = adapter.canvas;
              this.frame = adapter.frame;
              this.container = adapter.container;
            }

            screen.init();
            garbageCollectionManager.init();
            deviceManager.init(this.canvas, bindingMappingInfo);

            if (macro.CUSTOM_PIPELINE_NAME === '') {
              legacyCC.rendering = undefined;
            }

            assetManager.init();
            builtinResMgr.init();
            Layers.init();
            this.initPacer();

            {
              console.timeEnd('Init Infrastructure');
            }
          }).then(() => {
            this.emit(Game.EVENT_POST_INFRASTRUCTURE_INIT);
            return this.onPostInfrastructureInitDelegate.dispatch();
          }).then(() => {
            this.emit(Game.EVENT_PRE_SUBSYSTEM_INIT);
            return this.onPreSubsystemInitDelegate.dispatch();
          }).then(() => effectSettings.init(settings.querySettings(Settings.Category.RENDERING, 'effectSettingsPath'))).then(() => {
            if (!legacyCC.rendering || !legacyCC.rendering.enableEffectImport) {
              return;
            }

            const renderMode = settings.querySettings(Settings.Category.RENDERING, 'renderMode');

            if (renderMode === LegacyRenderMode.HEADLESS) {
              legacyCC.rendering.init(deviceManager.gfxDevice, null);
              return;
            }

            const data = effectSettings.data;

            if (data === null) {
              console.error('Effect settings not found, effects will not be imported.');
              return;
            }

            legacyCC.rendering.init(deviceManager.gfxDevice, data);
          }).then(() => {
            {
              console.time('Init SubSystem');
            }

            director.init();
            return builtinResMgr.loadBuiltinAssets();
          }).then(() => {
            {
              console.timeEnd('Init SubSystem');
            }

            this.emit(Game.EVENT_POST_SUBSYSTEM_INIT);
            return this.onPostSubsystemInitDelegate.dispatch();
          }).then(() => {
            console.log(`Cocos Creator v${engineVersion}`);
            this.emit(Game.EVENT_ENGINE_INITED);
            this._engineInited = true;
          }).then(() => {
            this.emit(Game.EVENT_PRE_PROJECT_INIT);
            return this.onPreProjectInitDelegate.dispatch();
          }).then(() => {
            {
              console.time('Init Project');
            }

            const jsList = settings.querySettings(Settings.Category.PLUGINS, 'jsList');
            let promise = Promise.resolve();

            if (jsList) {
              jsList.forEach(jsListFile => {
                promise = promise.then(() => loadJsFile(`${ 'src'}/${jsListFile}`));
              });
            }

            return promise;
          }).then(() => {
            const scriptPackages = settings.querySettings(Settings.Category.SCRIPTING, 'scriptPackages');

            if (scriptPackages) {
              return Promise.all(scriptPackages.map(pack => module.import(pack)));
            }

            return Promise.resolve([]);
          }).then(() => this._loadProjectBundles()).then(() => this._loadCCEScripts()).then(() => this._setupRenderPipeline()).then(() => this._loadPreloadAssets()).then(() => {
            builtinResMgr.compileBuiltinMaterial();
            return SplashScreen.instance.init();
          }).then(() => {
            {
              console.timeEnd('Init Project');
            }

            this.emit(Game.EVENT_POST_PROJECT_INIT);
            return this.onPostProjectInitDelegate.dispatch();
          }).then(() => {
            this._inited = true;

            this._safeEmit(Game.EVENT_GAME_INITED);
          });
        }

        _initXR() {
          var _settings$querySettin;

          if (typeof globalThis.__globalXR === 'undefined') {
            globalThis.__globalXR = {};
          }

          const globalXR = globalThis.__globalXR;
          globalXR.webxrCompatible = (_settings$querySettin = settings.querySettings(Settings.Category.XR, 'webxrCompatible')) !== null && _settings$querySettin !== void 0 ? _settings$querySettin : false;

          if (sys.isXR) {
            var _settings$querySettin2, _settings$querySettin3;

            xr.entry = xr.XrEntry.getInstance();
            const xrMSAA = (_settings$querySettin2 = settings.querySettings(Settings.Category.RENDERING, 'msaa')) !== null && _settings$querySettin2 !== void 0 ? _settings$querySettin2 : 1;
            const xrRenderingScale = (_settings$querySettin3 = settings.querySettings(Settings.Category.RENDERING, 'renderingScale')) !== null && _settings$querySettin3 !== void 0 ? _settings$querySettin3 : 1.0;
            xr.entry.setMultisamplesRTT(xrMSAA);
            xr.entry.setRenderingScale(xrRenderingScale);
          }
        }

        _compatibleWithOldParams(config) {
          const overrideSettings = config.overrideSettings = config.overrideSettings || {};

          if ('showFPS' in config) {
            overrideSettings.profiling = overrideSettings.profiling || {};
            overrideSettings.profiling.showFPS = config.showFPS;
          }

          if ('frameRate' in config) {
            overrideSettings.screen = overrideSettings.screen || {};
            overrideSettings.screen.frameRate = config.frameRate;
          }

          if ('renderMode' in config) {
            overrideSettings.rendering = overrideSettings.rendering || {};
            overrideSettings.rendering.renderMode = config.renderMode;
          }

          if ('renderPipeline' in config) {
            overrideSettings.rendering = overrideSettings.rendering || {};
            overrideSettings.rendering.renderPipeline = config.renderPipeline;
          }

          if ('assetOptions' in config) {
            overrideSettings.assets = overrideSettings.assets || {};
            Object.assign(overrideSettings.assets, config.assetOptions);
          }

          if ('customJointTextureLayouts' in config) {
            overrideSettings.animation = overrideSettings.animation || {};
            overrideSettings.animation.customJointTextureLayouts = config.customJointTextureLayouts;
          }

          if ('physics' in config) {
            overrideSettings.physics = overrideSettings.physics || {};
            Object.assign(overrideSettings.physics, config.physics);
          }

          if ('orientation' in config) {
            overrideSettings.screen = overrideSettings.screen || {};
            overrideSettings.screen.orientation = config.orientation;
          }

          if ('exactFitScreen' in config) {
            overrideSettings.screen = overrideSettings.screen || {};
            overrideSettings.screen.exactFitScreen = config.exactFitScreen;
          }
        }

        _loadPreloadAssets() {
          const preloadAssets = settings.querySettings(Settings.Category.ASSETS, 'preloadAssets');
          if (!preloadAssets) return Promise.resolve([]);
          return Promise.all(preloadAssets.map(uuid => new Promise((resolve, reject) => {
            assetManager.loadAny(uuid, err => {
              if (err) {
                reject(err);
                return;
              }

              resolve();
            });
          })));
        }

        _loadCCEScripts() {
          return new Promise((resolve, reject) => {
            {
              resolve();
            }
          });
        }

        _loadProjectBundles() {
          const preloadBundles = settings.querySettings(Settings.Category.ASSETS, 'preloadBundles');
          if (!preloadBundles) return Promise.resolve([]);
          return Promise.all(preloadBundles.map(({
            bundle,
            version
          }) => new Promise((resolve, reject) => {
            const opts = {};
            if (version) opts.version = version;
            assetManager.loadBundle(bundle, opts, err => {
              if (err) {
                reject(err);
                return;
              }

              resolve();
            });
          })));
        }

        run(onStart) {
          if (onStart) {
            this.onStart = onStart;
          }

          if (!this._inited || EDITOR$1 ) {
            return;
          }

          this.resume();
        }

        _calculateDT(useFixedDeltaTime) {
          this._useFixedDeltaTime = useFixedDeltaTime;

          if (useFixedDeltaTime) {
            this._startTime = performance.now();
            return this.frameTime / 1000;
          }

          const now = performance.now();
          this._deltaTime = now > this._startTime ? (now - this._startTime) / 1000 : 0;

          if (this._deltaTime > Game.DEBUG_DT_THRESHOLD) {
            this._deltaTime = this.frameTime / 1000;
          }

          this._startTime = now;
          return this._deltaTime;
        }

        _updateCallback() {
          if (!this._inited) return;

          if (!SplashScreen.instance.isFinished) {
            SplashScreen.instance.update(this._calculateDT(false));
          } else if (this._shouldLoadLaunchScene) {
            this._shouldLoadLaunchScene = false;
            const launchScene = settings.querySettings(Settings.Category.LAUNCH, 'launchScene');

            if (launchScene) {
              director.loadScene(launchScene, () => {
                var _this$onStart;

                console.log(`Success to load scene: ${launchScene}`);
                this._initTime = performance.now();
                director.startAnimation();
                (_this$onStart = this.onStart) === null || _this$onStart === void 0 ? void 0 : _this$onStart.call(this);
              });
            } else {
              var _this$onStart2;

              this._initTime = performance.now();
              director.startAnimation();
              (_this$onStart2 = this.onStart) === null || _this$onStart2 === void 0 ? void 0 : _this$onStart2.call(this);
            }
          } else {
            director.tick(this._calculateDT(false));
          }
        }

        initPacer() {
          var _settings$querySettin4;

          const frameRate = (_settings$querySettin4 = settings.querySettings(Settings.Category.SCREEN, 'frameRate')) !== null && _settings$querySettin4 !== void 0 ? _settings$querySettin4 : 60;
          assert(typeof frameRate === 'number');
          this._pacer = new Pacer();
          this._pacer.onTick = this._updateCallback.bind(this);
          this.frameRate = frameRate;
        }

        _initEvents() {
          systemInfo.on('show', this._onShow, this);
          systemInfo.on('hide', this._onHide, this);
        }

        _onHide() {
          this.emit(Game.EVENT_HIDE);
          this.pauseByEngine();
        }

        _onShow() {
          this.emit(Game.EVENT_SHOW);
          this.resumeByEngine();
        }

        addPersistRootNode(node) {
          director.addPersistRootNode(node);
        }

        removePersistRootNode(node) {
          director.removePersistRootNode(node);
        }

        isPersistRootNode(node) {
          return director.isPersistRootNode(node);
        }

        _setupRenderPipeline() {
          const renderPipeline = settings.querySettings(Settings.Category.RENDERING, 'renderPipeline');

          if (!renderPipeline) {
            return this._setRenderPipeline();
          }

          return new Promise((resolve, reject) => {
            assetManager.loadAny(renderPipeline, (err, asset) => err || !(asset instanceof RenderPipeline) ? reject(err) : resolve(asset));
          }).then(asset => {
            this._setRenderPipeline(asset);
          }).catch(reason => {
            warn(reason);
            warn(`Failed load render pipeline: ${renderPipeline}, engine failed to initialize, will fallback to default pipeline`);

            this._setRenderPipeline();
          });
        }

        _setRenderPipeline(rppl) {
          if (!director.root.setRenderPipeline(rppl)) {
            this._setRenderPipeline();
          }

          this._rendererInitialized = true;

          this._safeEmit(Game.EVENT_RENDERER_INITED);
        }

        _safeEmit(event) {
          {
            this.emit(event);
          }
        }

      } exports('dp', Game);
      Game.EVENT_HIDE = 'game_on_hide';
      Game.EVENT_SHOW = 'game_on_show';
      Game.EVENT_LOW_MEMORY = 'game_on_low_memory';
      Game.EVENT_GAME_INITED = 'game_inited';
      Game.EVENT_ENGINE_INITED = 'engine_inited';
      Game.EVENT_RENDERER_INITED = 'renderer_inited';
      Game.EVENT_PRE_BASE_INIT = 'pre_base_init';
      Game.EVENT_POST_BASE_INIT = 'post_base_init';
      Game.EVENT_PRE_INFRASTRUCTURE_INIT = 'pre_infrastructure_init';
      Game.EVENT_POST_INFRASTRUCTURE_INIT = 'post_infrastructure_init';
      Game.EVENT_PRE_SUBSYSTEM_INIT = 'pre_subsystem_init';
      Game.EVENT_POST_SUBSYSTEM_INIT = 'post_subsystem_init';
      Game.EVENT_PRE_PROJECT_INIT = 'pre_project_init';
      Game.EVENT_POST_PROJECT_INIT = 'post_project_init';
      Game.EVENT_RESTART = 'game_on_restart';
      Game.EVENT_PAUSE = 'game_on_pause';
      Game.EVENT_RESUME = 'game_on_resume';
      Game.RENDER_TYPE_CANVAS = 0;
      Game.RENDER_TYPE_WEBGL = 1;
      Game.RENDER_TYPE_OPENGL = 2;
      Game.RENDER_TYPE_HEADLESS = 3;
      Game.DEBUG_DT_THRESHOLD = 1;
      legacyCC.Game = Game;
      const game = exports('dn', legacyCC.game = new Game());

      markAsWarning(Director.prototype, 'director', [{
        name: 'calculateDeltaTime'
      }, {
        name: 'getDeltaTime',
        suggest: 'Use game.deltaTime instead'
      }, {
        name: 'getTotalTime',
        suggest: 'Use game.totalTime instead'
      }, {
        name: 'getCurrentTime',
        suggest: 'Use game.frameStartTime instead'
      }]);
      removeProperty(Director.prototype, 'director', [{
        name: 'setAnimationInterval',
        suggest: 'please use game.frameRate instead'
      }, {
        name: 'getAnimationInterval',
        suggest: 'please use game.frameRate instead'
      }, {
        name: 'getRunningScene',
        suggest: 'please use getScene instead'
      }, {
        name: 'setDepthTest',
        suggest: 'please use camera API instead'
      }, {
        name: 'setClearColor',
        suggest: 'please use camera API instead'
      }, {
        name: 'getWinSize',
        suggest: 'please use view.getVisibleSize instead'
      }, {
        name: 'getWinSizeInPixels'
      }, {
        name: 'purgeCachedData',
        suggest: 'please use assetManager.releaseAll instead'
      }, {
        name: 'convertToGL'
      }, {
        name: 'convertToUI'
      }]);
      replaceProperty(director, 'director', [{
        name: '_getSceneUuid',
        targetName: 'assetManager.main',
        newName: 'getSceneInfo',
        customFunction: sceneName => {
          if (assetManager.main) {
            var _assetManager$main$ge;

            return (_assetManager$main$ge = assetManager.main.getSceneInfo(sceneName)) === null || _assetManager$main$ge === void 0 ? void 0 : _assetManager$main$ge.uuid;
          }

          return '';
        }
      }]);
      markAsWarning(game, 'game', [{
        name: 'collisionMatrix'
      }, {
        name: 'groupList'
      }]);
      replaceProperty(game, 'game', [{
        name: '_sceneInfos',
        targetName: 'assetManager.main',
        newName: 'getSceneInfo',
        customGetter: () => {
          const scenes = [];

          if (assetManager.main) {
            assetManager.main.config.scenes.forEach(val => {
              scenes.push(val);
            });
          }

          return scenes;
        }
      }]);

      var commonjsGlobal = exports('eD', typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {});

      function unwrapExports (x) {
      	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
      }

      function createCommonjsModule(fn, module) {
      	return module = { exports: {} }, fn(module, module.exports), module.exports;
      }

      var bullet_cocos=createCommonjsModule(function(module,exports$1){(function(global,factory){{factory(exports$1);}})(typeof globalThis!=="undefined"?globalThis:typeof self!=="undefined"?self:commonjsGlobal,function(_exports){Object.defineProperty(_exports,"__esModule",{value:true});_exports.default=void 0;function instantiate(i){for(var a,o=new Uint8Array(123),c=25;0<=c;--c)o[48+c]=52+c,o[65+c]=c,o[97+c]=26+c;function k(A,e,r){for(var f,i,a=0,n=e,b=r.length,t=e+(3*b>>2)-("="==r[b-2])-("="==r[b-1]);a<b;a+=4)f=o[r.charCodeAt(a+1)],i=o[r.charCodeAt(a+2)],A[n++]=o[r.charCodeAt(a)]<<2|f>>4,n<t&&(A[n++]=f<<4|i>>2),n<t&&(A[n++]=i<<6|o[r.charCodeAt(a+3)]);}o[43]=62,o[47]=63;var u,l,S2,$,X2,J2,A2,X,U2,M,H2,P2,j2,B,m2,z2,Y,O2,U,j,v,d,Z,_,K2,H,N2,g=new ArrayBuffer(16),S=new Int32Array(g),E=new Float32Array(g),Q=new Float64Array(g);function z(A,e){S[A]=e;}function O(){return Q[0];}function L(A){Q[0]=A;}function m(A){E[2]=A;}function N(){return E[2];}return u=(g=i).memory,l=u.buffer,u.grow=o6,S2=new Int8Array(l),$=new Int16Array(l),X2=new Int32Array(l),J2=new Uint8Array(l),A2=new Uint16Array(l),X=new Uint32Array(l),U2=new Float32Array(l),M=new Float64Array(l),H2=Math.imul,P2=Math.fround,j2=Math.abs,B=Math.clz32,m2=Math.min,z2=Math.max,Y=Math.floor,O2=Math.sqrt,U=g.abort,j=1/0,v=g.syncPhysicsToGraphics,d=g.fd_close,Z=g.fd_write,_=g.fd_seek,K2=92960,H=0,k(a=J2,1024,"OGPtPtoPST9emHs/2g/JP2k3rDFoISIztA8UM2ghojPbD0k/2w9Jv+TLFkDkyxbAAAAAAAAAAIDbD0lA2w9JwAB1bmV4cGVjdGVkX2hhbmRsZXIgdW5leHBlY3RlZGx5IHJldHVybmVkAHRlcm1pbmF0ZV9oYW5kbGVyIHVuZXhwZWN0ZWRseSByZXR1cm5lZABQdXJlIHZpcnR1YWwgZnVuY3Rpb24gY2FsbGVkIQBEZWxldGVkIHZpcnR1YWwgZnVuY3Rpb24gY2FsbGVkIQAAAAAoXgAAAAAAAAAAAAAAGRJEOwI/LEcUPTMwChsGRktFNw9JDhcDQB08KzYfSi0cASAlKSEIDBUWIi4QOD4LNDEYL0EJOREjQzJCOgUEJignDSoeNQcaSBMkTP8AAFN1Y2Nlc3MASWxsZWdhbCBieXRlIHNlcXVlbmNlAERvbWFpbiBlcnJvcgBSZXN1bHQgbm90IHJlcHJlc2VudGFibGUATm90IGEgdHR5AFBlcm1pc3Npb24gZGVuaWVkAE9wZXJhdGlvbiBub3QgcGVybWl0dGVkAE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkATm8gc3VjaCBwcm9jZXNzAEZpbGUgZXhpc3RzAFZhbHVlIHRvbyBsYXJnZSBmb3IgZGF0YSB0eXBlAE5vIHNwYWNlIGxlZnQgb24gZGV2aWNlAE91dCBvZiBtZW1vcnkAUmVzb3VyY2UgYnVzeQBJbnRlcnJ1cHRlZCBzeXN0ZW0gY2FsbABSZXNvdXJjZSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZQBJbnZhbGlkIHNlZWsAQ3Jvc3MtZGV2aWNlIGxpbmsAUmVhZC1vbmx5IGZpbGUgc3lzdGVtAERpcmVjdG9yeSBub3QgZW1wdHkAQ29ubmVjdGlvbiByZXNldCBieSBwZWVyAE9wZXJhdGlvbiB0aW1lZCBvdXQAQ29ubmVjdGlvbiByZWZ1c2VkAEhvc3QgaXMgdW5yZWFjaGFibGUAQWRkcmVzcyBpbiB1c2UAQnJva2VuIHBpcGUASS9PIGVycm9yAE5vIHN1Y2ggZGV2aWNlIG9yIGFkZHJlc3MATm8gc3VjaCBkZXZpY2UATm90IGEgZGlyZWN0b3J5AElzIGEgZGlyZWN0b3J5AFRleHQgZmlsZSBidXN5AEV4ZWMgZm9ybWF0IGVycm9yAEludmFsaWQgYXJndW1lbnQAQXJndW1lbnQgbGlzdCB0b28gbG9uZwBTeW1ib2xpYyBsaW5rIGxvb3AARmlsZW5hbWUgdG9vIGxvbmcAVG9vIG1hbnkgb3BlbiBmaWxlcyBpbiBzeXN0ZW0ATm8gZmlsZSBkZXNjcmlwdG9ycyBhdmFpbGFibGUAQmFkIGZpbGUgZGVzY3JpcHRvcgBObyBjaGlsZCBwcm9jZXNzAEJhZCBhZGRyZXNzAEZpbGUgdG9vIGxhcmdlAFRvbyBtYW55IGxpbmtzAE5vIGxvY2tzIGF2YWlsYWJsZQBSZXNvdXJjZSBkZWFkbG9jayB3b3VsZCBvY2N1cgBTdGF0ZSBub3QgcmVjb3ZlcmFibGUAUHJldmlvdXMgb3duZXIgZGllZABPcGVyYXRpb24gY2FuY2VsZWQARnVuY3Rpb24gbm90IGltcGxlbWVudGVkAE5vIG1lc3NhZ2Ugb2YgZGVzaXJlZCB0eXBlAElkZW50aWZpZXIgcmVtb3ZlZABMaW5rIGhhcyBiZWVuIHNldmVyZWQAUHJvdG9jb2wgZXJyb3IAQmFkIG1lc3NhZ2UATm90IGEgc29ja2V0AERlc3RpbmF0aW9uIGFkZHJlc3MgcmVxdWlyZWQATWVzc2FnZSB0b28gbGFyZ2UAUHJvdG9jb2wgd3JvbmcgdHlwZSBmb3Igc29ja2V0AFByb3RvY29sIG5vdCBhdmFpbGFibGUAUHJvdG9jb2wgbm90IHN1cHBvcnRlZABOb3Qgc3VwcG9ydGVkAEFkZHJlc3MgZmFtaWx5IG5vdCBzdXBwb3J0ZWQgYnkgcHJvdG9jb2wAQWRkcmVzcyBub3QgYXZhaWxhYmxlAE5ldHdvcmsgaXMgZG93bgBOZXR3b3JrIHVucmVhY2hhYmxlAENvbm5lY3Rpb24gcmVzZXQgYnkgbmV0d29yawBDb25uZWN0aW9uIGFib3J0ZWQATm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZQBTb2NrZXQgaXMgY29ubmVjdGVkAFNvY2tldCBub3QgY29ubmVjdGVkAE9wZXJhdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzAE9wZXJhdGlvbiBpbiBwcm9ncmVzcwBTdGFsZSBmaWxlIGhhbmRsZQBRdW90YSBleGNlZWRlZABNdWx0aWhvcCBhdHRlbXB0ZWQAQ2FwYWJpbGl0aWVzIGluc3VmZmljaWVudABObyBlcnJvciBpbmZvcm1hdGlvbgAALSsgICAwWDB4AChudWxsKQAAAAAAAAAAAAAZAAoAGRkZAAAAAAUAAAAAAAAJAAAAAAsAAAAAAAAAABkAEQoZGRkDCgcAARsJCxgAAAkGCwAACwAGGQAAABkZGQAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAAAZAAoNGRkZAA0AAAIACQ4AAAAJAA4AAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAEwAAAAATAAAAAAkMAAAAAAAMAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAA8AAAAEDwAAAAAJEAAAAAAAEAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAARAAAAABEAAAAACRIAAAAAABIAABIAABoAAAAaGhoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgAAABoaGgAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAABcAAAAAFwAAAAAJFAAAAAAAFAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAAAAAAAAAAAAAAVAAAAABUAAAAACRYAAAAAABYAABYAAFN1cHBvcnQgZm9yIGZvcm1hdHRpbmcgbG9uZyBkb3VibGUgdmFsdWVzIGlzIGN1cnJlbnRseSBkaXNhYmxlZC4KVG8gZW5hYmxlIGl0LCBhZGQgLWxjLXByaW50c2Nhbi1sb25nLWRvdWJsZSB0byB0aGUgbGluayBjb21tYW5kLgoAAAAAAAAAAAAAAAAAADAxMjM0NTY3ODlBQkNERUYtMFgrMFggMFgtMHgrMHggMHgAaW5mAElORgBuYW4ATkFOAC4ACgBzdGQ6OmV4Y2VwdGlvbgBzdGQ6OmJhZF9leGNlcHRpb24AAAAAAAAAAOwOAAAIAAAACgAAAAsAAABzdGQ6OmJhZF9hbGxvYwAAAAAAABQPAAAJAAAADAAAAA0AAABiYWRfYXJyYXlfbmV3X2xlbmd0aAAAAAAAAAAAoA4AAAYAAAAOAAAADwAAAFN0OWV4Y2VwdGlvbgAAAABQFwAAkA4AAAAAAADQDgAABwAAABAAAAARAAAAU3QxM2JhZF9leGNlcHRpb24AAAB4FwAAvA4AAKAOAABTdDliYWRfYWxsb2MAAAAAeBcAANwOAACgDgAAU3QyMGJhZF9hcnJheV9uZXdfbGVuZ3RoAAAAAHgXAAD4DgAA7A4AAAAAAACcDwAAEwAAABUAAAAWAAAAc3RkOjpiYWRfY2FzdAAAAAAAAAC4DwAAFAAAABcAAAAYAAAAc3RkOjpiYWRfdHlwZWlkAAAAAACIDwAAEgAAABkAAABTdDl0eXBlX2luZm8AAAAAUBcAAHgPAABTdDhiYWRfY2FzdAB4FwAAkA8AAKAOAABTdDEwYmFkX3R5cGVpZAAAeBcAAKgPAACgDgAATjEwX19jeHhhYml2MTE2X19zaGltX3R5cGVfaW5mb0UAAAAAeBcAAMQPAACIDwAATjEwX19jeHhhYml2MTE3X19jbGFzc190eXBlX2luZm9FAAAAeBcAAPQPAADoDwAATjEwX19jeHhhYml2MTE3X19wYmFzZV90eXBlX2luZm9FAAAAeBcAACQQAADoDwAATjEwX19jeHhhYml2MTE5X19wb2ludGVyX3R5cGVfaW5mb0UAeBcAAFQQAABIEAAATjEwX19jeHhhYml2MTIwX19mdW5jdGlvbl90eXBlX2luZm9FAAAAAHgXAACEEAAA6A8AAE4xMF9fY3h4YWJpdjEyOV9fcG9pbnRlcl90b19tZW1iZXJfdHlwZV9pbmZvRQAAAHgXAAC4EAAASBAAAAAAAAAAAAAA/////wAAAADoDwAAJAAAACUAAAAmAAAAJwAAACgAAAAAAAAAYBEAABoAAAApAAAAJgAAACcAAAAqAAAATjEwX19jeHhhYml2MTIzX19mdW5kYW1lbnRhbF90eXBlX2luZm9FAHgXAAA4EQAA6A8AAHYAAAAkEQAAbBEAAFB2AABMGAAAeBEAAAAAAABwEQAAUEt2AEwYAACMEQAAAQAAAHARAABEbgAAJBEAAKARAABQRG4ATBgAAKwRAAAAAAAApBEAAFBLRG4AAAAATBgAAMARAAABAAAApBEAAGIAAAAkEQAA2BEAAFBiAABMGAAA5BEAAAAAAADcEQAAUEtiAEwYAAD4EQAAAQAAANwRAAB3AAAAJBEAAAwSAABQdwAATBgAABgSAAAAAAAAEBIAAFBLdwBMGAAALBIAAAEAAAAQEgAAYwAAACQRAABAEgAAUGMAAEwYAABMEgAAAAAAAEQSAABQS2MATBgAAGASAAABAAAARBIAAGgAAAAkEQAAdBIAAFBoAABMGAAAgBIAAAAAAAB4EgAAUEtoAEwYAACUEgAAAQAAAHgSAABhAAAAJBEAAKgSAABQYQAATBgAALQSAAAAAAAArBIAAFBLYQBMGAAAyBIAAAEAAACsEgAAcwAAACQRAADcEgAAUHMAAEwYAADoEgAAAAAAAOASAABQS3MATBgAAPwSAAABAAAA4BIAAHQAAAAkEQAAEBMAAFB0AABMGAAAHBMAAAAAAAAUEwAAUEt0AEwYAAAwEwAAAQAAABQTAABpAAAAJBEAAEQTAABQaQAATBgAAFATAAAAAAAASBMAAFBLaQBMGAAAZBMAAAEAAABIEwAAagAAACQRAAB4EwAAUGoAAEwYAACEEwAAAAAAAHwTAABQS2oATBgAAJgTAAABAAAAfBMAAGwAAAAkEQAArBMAAFBsAABMGAAAuBMAAAAAAACwEwAAUEtsAEwYAADMEwAAAQAAALATAABtAAAAJBEAAOATAABQbQAATBgAAOwTAAAAAAAA5BMAAFBLbQBMGAAAABQAAAEAAADkEwAAeAAAACQRAAAUFAAAUHgAAEwYAAAgFAAAAAAAABgUAABQS3gATBgAADQUAAABAAAAGBQAAHkAAAAkEQAASBQAAFB5AABMGAAAVBQAAAAAAABMFAAAUEt5AEwYAABoFAAAAQAAAEwUAABuAAAAJBEAAHwUAABQbgAATBgAAIgUAAAAAAAAgBQAAFBLbgBMGAAAnBQAAAEAAACAFAAAbwAAACQRAACwFAAAUG8AAEwYAAC8FAAAAAAAALQUAABQS28ATBgAANAUAAABAAAAtBQAAERoAAAkEQAA5BQAAFBEaABMGAAA8BQAAAAAAADoFAAAUEtEaAAAAABMGAAABBUAAAEAAADoFAAAZgAAACQRAAAcFQAAUGYAAEwYAAAoFQAAAAAAACAVAABQS2YATBgAADwVAAABAAAAIBUAAGQAAAAkEQAAUBUAAFBkAABMGAAAXBUAAAAAAABUFQAAUEtkAEwYAABwFQAAAQAAAFQVAABlAAAAJBEAAIQVAABQZQAATBgAAJAVAAAAAAAAiBUAAFBLZQBMGAAApBUAAAEAAACIFQAAZwAAACQRAAC4FQAAUGcAAEwYAADEFQAAAAAAALwVAABQS2cATBgAANgVAAABAAAAvBUAAER1AAAkEQAA7BUAAFBEdQBMGAAA+BUAAAAAAADwFQAAUEtEdQAAAABMGAAADBYAAAEAAADwFQAARHMAACQRAAAkFgAAUERzAEwYAAAwFgAAAAAAACgWAABQS0RzAAAAAEwYAABEFgAAAQAAACgWAABEaQAAJBEAAFwWAABQRGkATBgAAGgWAAAAAAAAYBYAAFBLRGkAAAAATBgAAHwWAAABAAAAYBYAAAAAAADUFgAAGwAAACsAAAAmAAAAJwAAACwAAABOMTBfX2N4eGFiaXYxMTdfX2FycmF5X3R5cGVfaW5mb0UAAAB4FwAAsBYAAOgPAAAAAAAArBAAABwAAAAtAAAAJgAAACcAAAAuAAAAAAAAADwXAAAdAAAALwAAACYAAAAnAAAAMAAAAE4xMF9fY3h4YWJpdjExNl9fZW51bV90eXBlX2luZm9FAAAAAHgXAAAYFwAA6A8AAAAAAAAYEAAAHgAAADEAAAAmAAAAJwAAADIAAAAzAAAANAAAADUAAAAAAAAAwBcAAB8AAAA2AAAAJgAAACcAAAAyAAAANwAAADgAAAA5AAAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAAHgXAACYFwAAGBAAAAAAAAAcGAAAIAAAADoAAAAmAAAAJwAAADIAAAA7AAAAPAAAAD0AAABOMTBfX2N4eGFiaXYxMjFfX3ZtaV9jbGFzc190eXBlX2luZm9FAAAAeBcAAPQXAAAYEAAAAAAAAEgQAAAhAAAAPgAAACYAAAAnAAAAPwAAAAAAAAB4EAAAIgAAAEAAAAAmAAAAJwAAAEEAAAAAAAAA6BAAACMAAABCAAAAJgAAACcAAABDAAAAAAAAAAMAAAAEAAAABAAAAAYAAACD+aIARE5uAPwpFQDRVycA3TT1AGLbwAA8mZUAQZBDAGNR/gC73qsAt2HFADpuJADSTUIASQbgAAnqLgAcktEA6x3+ACmxHADoPqcA9TWCAES7LgCc6YQAtCZwAEF+XwDWkTkAU4M5AJz0OQCLX4QAKPm9APgfOwDe/5cAD5gFABEv7wAKWosAbR9tAM9+NgAJyycARk+3AJ5mPwAt6l8Auid1AOXrxwA9e/EA9zkHAJJSigD7a+oAH7FfAAhdjQAwA1YAe/xGAPCrawAgvM8ANvSaAOOpHQBeYZEACBvmAIWZZQCgFF8AjUBoAIDY/wAnc00ABgYxAMpWFQDJqHMAe+JgAGuMwAAZxEcAzWfDAAno3ABZgyoAi3bEAKYclgBEr90AGVfRAKU+BQAFB/8AM34/AMIy6ACYT94Au30yACY9wwAea+8An/heADUfOgB/8soA8YcdAHyQIQBqJHwA1W76ADAtdwAVO0MAtRTGAMMZnQCtxMIALE1BAAwAXQCGfUYA43EtAJvGmgAzYgAAtNJ8ALSnlwA3VdUA1z72AKMQGABNdvwAZJ0qAHDXqwBjfPgAerBXABcV5wDASVYAO9bZAKeEOAAkI8sA1op3AFpUIwAAH7kA8QobABnO3wCfMf8AZh5qAJlXYQCs+0cAfn/YACJltwAy6IkA5r9gAO/EzQBsNgkAXT/UABbe1wBYO94A3puSANIiKAAohugA4lhNAMbKMgAI4xYA4H3LABfAUADzHacAGOBbAC4TNACDEmIAg0gBAPWOWwCtsH8AHunyAEhKQwAQZ9MAqt3YAK5fQgBqYc4ACiikANOZtAAGpvIAXHd/AKPCgwBhPIgAinN4AK+MWgBv170ALaZjAPS/ywCNge8AJsFnAFXKRQDK2TYAKKjSAMJhjQASyXcABCYUABJGmwDEWcQAyMVEAE2ykQAAF/MA1EOtAClJ5QD91RAAAL78AB6UzABwzu4AEz71AOzxgACz58MAx/goAJMFlADBcT4ALgmzAAtF8wCIEpwAqyB7AC61nwBHksIAezIvAAxVbQByp5AAa+cfADHLlgB5FkoAQXniAPTfiQDolJcA4uaEAJkxlwCI7WsAX182ALv9DgBImrQAZ6RsAHFyQgCNXTIAnxW4ALzlCQCNMSUA93Q5ADAFHAANDAEASwhoACzuWABHqpAAdOcCAL3WJAD3faYAbkhyAJ8W7wCOlKYAtJH2ANFTUQDPCvIAIJgzAPVLfgCyY2gA3T5fAEBdAwCFiX8AVVIpADdkwABt2BAAMkgyAFtMdQBOcdQARVRuAAsJwQAq9WkAFGbVACcHnQBdBFAAtDvbAOp2xQCH+RcASWt9AB0nugCWaSkAxsysAK0UVACQ4moAiNmJACxyUAAEpL4AdweUAPMwcAAA/CcA6nGoAGbCSQBk4D0Al92DAKM/lwBDlP0ADYaMADFB3gCSOZ0A3XCMABe35wAI3zsAFTcrAFyAoABagJMAEBGSAA/o2ABsgK8A2/9LADiQDwBZGHYAYqUVAGHLuwDHibkAEEC9ANLyBABJdScA67b2ANsiuwAKFKoAiSYvAGSDdgAJOzMADpQaAFE6qgAdo8IAr+2uAFwmEgBtwk0ALXqcAMBWlwADP4MACfD2ACtAjABtMZkAObQHAAwgFQDYw1sA9ZLEAMatSwBOyqUApzfNAOapNgCrkpQA3UJoABlj3gB2jO8AaItSAPzbNwCuoasA3xUxAACuoQAM+9oAZE1mAO0FtwApZTAAV1a/AEf/OgBq+bkAdb7zACiT3wCrgDAAZoz2AATLFQD6IgYA2eQdAD2zpABXG48ANs0JAE5C6QATvqQAMyO1APCqGgBPZagA0sGlAAs/DwBbeM0AI/l2AHuLBACJF3IAxqZTAG9u4gDv6wAAm0pYAMTatwCqZroAds/PANECHQCx8S0AjJnBAMOtdwCGSNoA912gAMaA9ACs8C8A3eyaAD9cvADQ3m0AkMcfACrbtgCjJToAAK+aAK1TkwC2VwQAKS20AEuAfgDaB6cAdqoOAHtZoQAWEioA3LctAPrl/QCJ2/4Aib79AOR2bAAGqfwAPoBwAIVuFQD9h/8AKD4HAGFnMwAqGIYATb3qALPnrwCPbW4AlWc5ADG/WwCE10gAMN8WAMctQwAlYTUAyXDOADDLuAC/bP0ApACiAAVs5ABa3aAAIW9HAGIS0gC5XIQAcGFJAGtW4ACZUgEAUFU3AB7VtwAz8cQAE25fAF0w5ACFLqkAHbLDAKEyNgAIt6QA6rHUABb3IQCPaeQAJ/93AAwDgACNQC0AT82gACClmQCzotMAL10KALT5QgAR2ssAfb7QAJvbwQCrF70AyqKBAAhqXAAuVRcAJwBVAH8U8ADhB4YAFAtkAJZBjQCHvt4A2v0qAGsltgB7iTQABfP+ALm/ngBoak8ASiqoAE/EWgAt+LwA11qYAPTHlQANTY0AIDqmAKRXXwAUP7EAgDiVAMwgAQBx3YYAyd62AL9g9QBNZREAAQdrAIywrACywNAAUVVIAB77DgCVcsMAowY7AMBANQAG3HsA4EXMAE4p+gDWysgA6PNBAHxk3gCbZNgA2b4xAKSXwwB3WNQAaePFAPDaEwC6OjwARhhGAFV1XwDSvfUAbpLGAKwuXQAORO0AHD5CAGHEhwAp/ekA59bzACJ8ygBvkTUACODFAP/XjQBuauIAsP3GAJMIwQB8XXQAa62yAM1unQA+cnsAxhFqAPfPqQApc98Atcm6ALcAUQDisg0AdLokAOV9YAB02IoADRUsAIEYDAB+ZpQAASkWAJ96dgD9/b4AVkXvANl+NgDs2RMAi7q5AMSX/AAxqCcA8W7DAJTFNgDYqFYAtKi1AM/MDgASiS0Ab1c0ACxWiQCZzuMA1iC5AGteqgA+KpwAEV/MAP0LSgDh9PsAjjttAOKGLADp1IQA/LSpAO/u0QAuNckALzlhADghRAAb2cgAgfwKAPtKagAvHNgAU7SEAE6ZjABUIswAKlXcAMDG1gALGZYAGnC4AGmVZAAmWmAAP1LuAH8RDwD0tREA/Mv1ADS8LQA0vO4A6F3MAN1eYABnjpsAkjPvAMkXuABhWJsA4Ve8AFGDxgDYPhAA3XFIAC0c3QCvGKEAISxGAFnz1wDZepgAnlTAAE+G+gBWBvwA5XmuAIkiNgA4rSIAZ5PcAFXoqgCCJjgAyuebAFENpACZM7EAqdcOAGkFSABlsvAAf4inAIhMlwD50TYAIZKzAHuCSgCYzyEAQJ/cANxHVQDhdDoAZ+tCAP6d3wBe1F8Ae2ekALqsegBV9qIAK4gjAEG6VQBZbggAISqGADlHgwCJ4+YA5Z7UAEn7QAD/VukAHA/KAMVZigCU+isA08HFAA/FzwDbWq4AR8WGAIVDYgAhhjsALHmUABBhhwAqTHsAgCwaAEO/EgCIJpAAeDyJAKjE5ADl23sAxDrCACb06gD3Z4oADZK/AGWjKwA9k7EAvXwLAKRR3AAn3WMAaeHdAJqUGQCoKZUAaM4oAAnttABEnyAATpjKAHCCYwB+fCMAD7kyAKf1jgAUVucAIfEIALWdKgBvfk0ApRlRALX5qwCC39YAlt1hABY2AgDEOp8Ag6KhAHLtbQA5jXoAgripAGsyXABGJ1sAADTtANIAdwD89FUAAVlNAOBxgAAAAAAAAAAAAAAAAED7Ifk/AAAAAC1EdD4AAACAmEb4PAAAAGBRzHg7AAAAgIMb8DkAAABAICV6OAAAAIAiguM2AAAAAB3zaTW+8/h57GH2PxkwllvG/t6/PYivSu1x9T+k/NQyaAvbv7AQ8PA5lfQ/e7cfCotB17+FA7iwlcnzP3vPbRrpndO/pWSIDBkN8z8xtvLzmx3Qv6COC3siXvI/8Ho7Gx18yb8/NBpKSrvxP588r5Pj+cK/uuWK8Fgj8T9cjXi/y2C5v6cAmUE/lfA/zl9Htp1vqr8AAAAAAADwPwAAAAAAAAAArEea/Yxg7j899SSfyjizP6BqAh+zpOw/upE4VKl2xD/m/GpXNiDrP9LkxEoLhM4/LaqhY9HC6T8cZcbwRQbUP+1BeAPmhug/+J8bLJyO2D9iSFP13GfnP8x7sU6k4Nw/C25JyRZ20j96xnWgaRnXv926p2wKx94/yPa+SEcV578ruCplRxX3PwAAAAAAAPA/dIUV07DZ7z8PiflsWLXvP1FbEtABk+8/e1F9PLhy7z+quWgxh1TvPzhidW56OO8/4d4f9Z0e7z8VtzEK/gbvP8upOjen8e4/IjQSTKbe7j8tiWFgCM7uPycqNtXav+4/gk+dViu07j8pVEjdB6vuP4VVOrB+pO4/zTt/Zp6g7j90X+zodZ/uP4cB63MUoe4/E85MmYml7j/boCpC5azuP+XFzbA3t+4/kPCjgpHE7j9dJT6yA9XuP63TWpmf6O4/R1778nb/7j+cUoXdmxnvP2mQ79wgN+8/h6T73BhY7z9fm3szl3zvP9qQpKKvpO8/QEVuW3bQ7z8AAAAAAADoQpQjkUv4aqw/88T6UM6/zj/WUgz/Qi7mPwAAAAAAADhD/oIrZUcVR0CUI5FL+Gq8PvPE+lDOvy4/1lIM/0Iulj8AAAAAcCYAAE4AAABPAAAAUAAAAFEAAAAAAAAAQCYAAE4AAABSAAAAUwAAACgAAABQFwAASCYAAE4xNmJ0Q29sbGlzaW9uV29ybGQxN1JheVJlc3VsdENhbGxiYWNrRQB4FwAAfCYAAKAmAABOMmNjMjZjY0Nsb3Nlc3RSYXlSZXN1bHRDYWxsYmFja0UAAAB4FwAArCYAAEAmAABOMTZidENvbGxpc2lvbldvcmxkMjRDbG9zZXN0UmF5UmVzdWx0Q2FsbGJhY2tFAAAAAAAASCcAAFQAAABVAAAAVgAAAFcAAAAAAAAADCcAAFgAAABZAAAAUwAAAFoAAAB4FwAAGCcAAEAmAABOMTZidENvbGxpc2lvbldvcmxkMjRBbGxIaXRzUmF5UmVzdWx0Q2FsbGJhY2tFAAB4FwAAVCcAAAwnAABOMmNjMjZjY0FsbEhpdHNSYXlSZXN1bHRDYWxsYmFja0UAAAAAAAAAnCcAAFsAAABcAAAAXQAAAF4AAABfAAAAYAAAAGEAAABQFwAAvycAAGJ0Q29sbGlzaW9uT2JqZWN0RmxvYXREYXRhADE3YnRDb2xsaXNpb25PYmplY3QAYnRDb2xsaXNpb25TaGFwZURhdGEAMTZidENvbGxpc2lvblNoYXBlAABQFwAA6CcAAHgXAAAQKAAA/CcAADEzYnRDb252ZXhTaGFwZQB4FwAALCgAAAQoAAAyMWJ0Q29udmV4SW50ZXJuYWxTaGFwZQAAAAAAVCgAAGIAAABjAAAAUBcAAFwoAAAxOGJ0Q29udmV4UG9seWhlZHJvbgAAAAAAAAAA+CgAAGQAAABlAAAAZgAAAGcAAABoAAAAaQAAAGoAAABrAAAAbAAAACgAAABtAAAAbgAAAG8AAABwAAAAcQAAAHIAAABzAAAAdAAAAHUAAAB2AAAAdwAAAHgAAAB5AAAAegAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAB4FwAABCkAACAoAAAyM2J0UG9seWhlZHJhbENvbnZleFNoYXBlAAAAeBcAACwpAAD4KAAAMzRidFBvbHloZWRyYWxDb252ZXhBYWJiQ2FjaGluZ1NoYXBlAAAAAAAAAADcKQAAZAAAAHsAAAB8AAAAZwAAAGgAAABpAAAAfQAAAGsAAAB+AAAAfwAAAG0AAACAAAAAbwAAAHAAAABxAAAAcgAAAIEAAACCAAAAdQAAAIMAAAB3AAAAhAAAAIUAAAB6AAAAhgAAAIcAAACIAAAAiQAAAIoAAACLAAAAjAAAAI0AAAB4FwAArioAAPgoAAAAAAAAAAAAAAEAAAACAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAEAAAABQAAAAYAAAABAAAAAgAAAAMAAAADAAAABAAAAAUAAAAGAAAABwAAAAUAAAAGAAAABwAAAAcAAAAAAIA/AACAvwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgD8AAIC/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAPwAAgL9idENvbnZleEludGVybmFsU2hhcGVEYXRhAEJveAAxMGJ0Qm94U2hhcGUAAAAAAAAgKwAAjgAAAI8AAACQAAAAZwAAAGgAAABpAAAAkQAAAGsAAACSAAAAkwAAAJQAAACVAAAAbwAAAJYAAACXAAAAcgAAAHMAAACYAAAAdQAAAJkAAAB3AAAAeAAAAHkAAAB4FwAATCsAACAoAABidENhcHN1bGVTaGFwZURhdGEAQ2Fwc3VsZVNoYXBlADE0YnRDYXBzdWxlU2hhcGUAAAAAAAAAAMgrAACOAAAAmgAAAJsAAABnAAAAaAAAAGkAAACcAAAAawAAAJ0AAACeAAAAnwAAAKAAAABvAAAAoQAAAKIAAAByAAAAowAAAKQAAAB1AAAApQAAAHcAAAB4AAAAeQAAAKYAAAB4FwAA8isAACAoAABidEN5bGluZGVyU2hhcGVEYXRhAEN5bGluZGVyWQAxNWJ0Q3lsaW5kZXJTaGFwZQAAAAAAaCwAAI4AAACnAAAAZgAAAGcAAABoAAAAaQAAAKgAAABrAAAAqQAAAKoAAACrAAAAbgAAAG8AAACsAAAArQAAAHIAAACuAAAArwAAAHUAAACwAAAAdwAAAHgAAAB5AAAAeBcAAIksAAAgKAAAYnRDb25lU2hhcGVEYXRhAENvbmUAMTFidENvbmVTaGFwZQAAeBcAAKQsAAD8JwAAMTRidENvbmNhdmVTaGFwZQAAAAAAAAAABC0AALEAAACyAAAAswAAAGcAAABoAAAAaQAAALQAAAC1AAAAtgAAALcAAABtAAAAuAAAALkAAAC6AAAAuwAAAHIAAAC8AAAAeBcAADMtAACYLAAAYnRTdGF0aWNQbGFuZVNoYXBlRGF0YQBTVEFUSUNQTEFORQAxOGJ0U3RhdGljUGxhbmVTaGFwZQBONmJ0RGJ2dDhJQ29sbGlkZUUAAFAXAABILQAAAAAAALQtAAC9AAAAvgAAAL8AAABnAAAAaAAAAGkAAADAAAAAwQAAAMIAAADDAAAAbQAAAMQAAADFAAAAxgAAAMcAAAByAAAAyAAAAMkAAAB4FwAA7S0AAPwnAABidENvbXBvdW5kU2hhcGVDaGlsZERhdGEAYnRDb21wb3VuZFNoYXBlRGF0YQAxNWJ0Q29tcG91bmRTaGFwZQAxOGJ0VHJpYW5nbGVDYWxsYmFjawBQFwAA/y0AADMxYnRJbnRlcm5hbFRyaWFuZ2xlSW5kZXhDYWxsYmFjawAAAFAXAAAcLgAAYnRJbnRJbmRleERhdGEAYnRTaG9ydEludEluZGV4VHJpcGxldERhdGEAYnRDaGFySW5kZXhUcmlwbGV0RGF0YQBidFZlY3RvcjNGbG9hdERhdGEAYnRWZWN0b3IzRG91YmxlRGF0YQBidE1lc2hQYXJ0RGF0YQBidFN0cmlkaW5nTWVzaEludGVyZmFjZURhdGEAMjNidFN0cmlkaW5nTWVzaEludGVyZmFjZQAAAABQFwAA2y4AAAAAAABELwAAygAAAMsAAADMAAAAzQAAAM4AAADPAAAA0AAAANEAAADSAAAA0wAAANQAAADVAAAA1gAAANcAAADYAAAAeBcAAFAvAAD4LgAAMjZidFRyaWFuZ2xlSW5kZXhWZXJ0ZXhBcnJheQAAAAAAAAAAtC8AANkAAADaAAAAzAAAAM0AAADOAAAAzwAAANAAAADRAAAA2wAAANwAAADUAAAA1QAAANYAAADXAAAA2AAAAHgXAADALwAARC8AADE0YnRUcmlhbmdsZU1lc2gAAAAAAAAAACgwAADdAAAA3gAAAN8AAABnAAAAaAAAAGkAAADgAAAA4QAAAOIAAADjAAAAbQAAALgAAAC5AAAA5AAAAOUAAAByAAAA5gAAAOcAAADoAAAAeBcAAP8wAACYLAAAAAAAAEgwAADpAAAA6gAAAOsAAAB4FwAAVDAAABQuAAAyMVN1cHBvcnRWZXJ0ZXhDYWxsYmFjawAAAAAAgDAAAOwAAADtAAAA7gAAAHgXAACMMAAAQC4AAFpOSzE5YnRUcmlhbmdsZU1lc2hTaGFwZTE5cHJvY2Vzc0FsbFRyaWFuZ2xlc0VQMThidFRyaWFuZ2xlQ2FsbGJhY2tSSzlidFZlY3RvcjNTNF9FMTZGaWx0ZXJlZENhbGxiYWNrAFRSSUFOR0xFTUVTSAAxOWJ0VHJpYW5nbGVNZXNoU2hhcGUAAAAAAAAAADwxAADvAAAA8AAAAPEAAADyAAAA8wAAAPQAAAD1AAAAUBcAAJ8xAABidE9wdGltaXplZEJ2aE5vZGVEYXRhAGJ0UXVhbnRpemVkQnZoTm9kZURhdGEAYnRCdmhTdWJ0cmVlSW5mb0RhdGEAYnRRdWFudGl6ZWRCdmhGbG9hdERhdGEAMTRidFF1YW50aXplZEJ2aAAAAAAA2DEAAPYAAAD3AAAA8QAAAPIAAADzAAAA9AAAAPUAAAD4AAAAeBcAAOQxAAA8MQAAMTRidE9wdGltaXplZEJ2aAAAAAAAAAAAiDIAAOwAAAD5AAAA+gAAAAAAAAAgMgAA7AAAAPsAAAD8AAAAeBcAACwyAABALgAAWk4xNGJ0T3B0aW1pemVkQnZoNWJ1aWxkRVAyM2J0U3RyaWRpbmdNZXNoSW50ZXJmYWNlYlJLOWJ0VmVjdG9yM1M0X0UyME5vZGVUcmlhbmdsZUNhbGxiYWNrAAB4FwAAlDIAAEAuAABaTjE0YnRPcHRpbWl6ZWRCdmg1YnVpbGRFUDIzYnRTdHJpZGluZ01lc2hJbnRlcmZhY2ViUks5YnRWZWN0b3IzUzRfRTI5UXVhbnRpemVkTm9kZVRyaWFuZ2xlQ2FsbGJhY2sAAAAAAFQzAAD9AAAA/gAAAN8AAABnAAAAaAAAAGkAAAD/AAAA4QAAAOIAAAAAAQAAbQAAALgAAAC5AAAAAQEAAAIBAAByAAAAAwEAAOcAAADoAAAABAEAAAUBAAB4FwAAODQAACgwAAAAAAAAdDMAAAYBAAAHAQAACAEAAHgXAACAMwAA8DMAAFpOSzIyYnRCdmhUcmlhbmdsZU1lc2hTaGFwZTE5cHJvY2Vzc0FsbFRyaWFuZ2xlc0VQMThidFRyaWFuZ2xlQ2FsbGJhY2tSSzlidFZlY3RvcjNTNF9FMjFNeU5vZGVPdmVybGFwQ2FsbGJhY2sAAABQFwAA+DMAADIxYnROb2RlT3ZlcmxhcENhbGxiYWNrAGJ0VHJpYW5nbGVNZXNoU2hhcGVEYXRhAEJWSFRSSUFOR0xFTUVTSAAyMmJ0QnZoVHJpYW5nbGVNZXNoU2hhcGUAAAAAAAAAAGg0AAAGAQAACQEAAAoBAAB4FwAAdDQAAPAzAABaTjIyYnRCdmhUcmlhbmdsZU1lc2hTaGFwZTE0cGVyZm9ybVJheWNhc3RFUDE4YnRUcmlhbmdsZUNhbGxiYWNrUks5YnRWZWN0b3IzUzRfRTIxTXlOb2RlT3ZlcmxhcENhbGxiYWNrAAAAAADwNAAABgEAAAsBAAAMAQAAeBcAAPw0AADwMwAAWk4yMmJ0QnZoVHJpYW5nbGVNZXNoU2hhcGUxN3BlcmZvcm1Db252ZXhjYXN0RVAxOGJ0VHJpYW5nbGVDYWxsYmFja1JLOWJ0VmVjdG9yM1M0X1M0X1M0X0UyMU15Tm9kZU92ZXJsYXBDYWxsYmFjawAAAAAAAAAAvDUAAA0BAAAOAQAADwEAAGcAAABoAAAAaQAAABABAAARAQAAEgEAABMBAABtAAAAuAAAALkAAAAUAQAAFQEAAHIAAAAWAQAAeBcAADc2AACYLAAAAAAAANw1AADpAAAAFwEAABgBAAB4FwAA6DUAABQuAAAyNGJ0U2NhbGVkVHJpYW5nbGVDYWxsYmFjawBidFNjYWxlZFRyaWFuZ2xlTWVzaFNoYXBlRGF0YQBTQ0FMRURCVkhUUklBTkdMRU1FU0gAMjhidFNjYWxlZEJ2aFRyaWFuZ2xlTWVzaFNoYXBlAAAAAAAAANw2AABkAAAAGQEAABoBAABnAAAAaAAAAGkAAAAbAQAAHAEAAGwAAAAdAQAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAHgEAAB8BAAB1AAAAIAEAAHcAAAB4AAAAeQAAAHoAAAAhAQAAIgEAACMBAAAkAQAAJQEAACYBAAAnAQAAeBcAADM3AAAgKQAAAAAAAPw2AADsAAAAKAEAACkBAAB4FwAACDcAAEAuAAAyNkxvY2FsU3VwcG9ydFZlcnRleENhbGxiYWNrAENvbnZleFRyaW1lc2gAMjVidENvbnZleFRyaWFuZ2xlTWVzaFNoYXBlAAAAAAAAnDcAACoBAAArAQAALAEAAGcAAABoAAAAaQAAAC0BAAAuAQAALwEAADABAABtAAAAuAAAALkAAADkAAAA5QAAAHIAAAAxAQAAeBcAAK43AACYLAAARW1wdHkAMTJidEVtcHR5U2hhcGUAAAAAAAAAAEg4AABkAAAAMgEAADMBAABnAAAAaAAAAGkAAAA0AQAAawAAAGwAAAA1AQAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAA2AQAANwEAADgBAAA5AQAAOgEAADsBAAA8AQAAPQEAAHgXAABxOAAAICkAAAEAAAADAAAABgAAAGJ0QlVfU2ltcGxleDF0bzQAMTZidEJVX1NpbXBsZXgxdG80AAAAAADUOAAAPgEAAD8BAABAAQAAZwAAAGgAAABpAAAAQQEAAEIBAABDAQAARAEAAG0AAAC4AAAAuQAAAOQAAADlAAAAcgAAAEUBAABGAQAAeBcAAOw4AACYLAAASEVJR0hURklFTEQAMjVidEhlaWdodGZpZWxkVGVycmFpblNoYXBlAFNQSEVSRQAAAAAAAHQ5AACOAAAARwEAAEgBAABnAAAAaAAAAGkAAABqAAAAawAAAEkBAABKAQAAbQAAAEsBAABMAQAAcAAAAHEAAAByAAAATQEAAE4BAAB1AAAATwEAAHcAAAB4AAAAeQAAAHgXAACAOQAAICgAADEzYnRTcGhlcmVTaGFwZQAAAAAA4DkAAL0AAABQAQAAvwAAAGcAAABoAAAAaQAAAMAAAADBAAAAwgAAAMMAAABtAAAAxAAAAMUAAADGAAAAxwAAAHIAAADIAAAAyQAAAHgXAAD1OQAAtC0AAENvbXBvdW5kAE4yY2MxNWNjQ29tcG91bmRTaGFwZUUAeBcAABg6AAA8OgAAMzBidEFjdGl2YXRpbmdDb2xsaXNpb25BbGdvcml0aG0AAAAAUBcAAEQ6AAAyMGJ0Q29sbGlzaW9uQWxnb3JpdGhtAAAK16M8AAAAAHQ6AABRAQAAUgEAAFMBAAB4FwAAgDoAAJQ6AAAxN2J0R2prUGFpckRldGVjdG9yAFAXAACcOgAAMzZidERpc2NyZXRlQ29sbGlzaW9uRGV0ZWN0b3JJbnRlcmZhY2UAMTJidENvbnZleENhc3QAAABQFwAAwzoAAAAAAADwOgAAVAEAAFUBAABWAQAAeBcAADc7AADUOgAAAAAAABg7AABXAQAAWAEAAFkBAABaAQAAWwEAAHgXAAAkOwAALD0AADE2YnRQb2ludENvbGxlY3RvcgAxNWJ0R2prQ29udmV4Q2FzdAAAAAAAAAAAaDsAAFcBAABcAQAAXQEAAF4BAABfAQAAeBcAAHQ7AAAsPQAAMTZidE1hbmlmb2xkUmVzdWx0AAAAAAAAnDsAAGABAABhAQAAYgEAAHgXAAAPPgAAfEYAAAAAAADEOwAAYwEAAGQBAABlAQAAZgEAAGcBAAB4FwAA9T0AAAw6AAAAAAAA7DsAAGgBAABpAQAAagEAAGsBAABsAQAAUBcAAPQ7AABOMTJidENvbnZleENhc3QxMENhc3RSZXN1bHRFAAAAAAAAAABkPQAAVwEAAG0BAABuAQAAbwEAAHABAAAAAAAAkDwAAFcBAABxAQAAcgEAAHMBAAB0AQAAAAAAAGg8AABXAQAAdQEAAF0BAABeAQAAdgEAAHgXAAB0PAAAaDsAADI0YnRQZXJ0dXJiZWRDb250YWN0UmVzdWx0AAB4FwAAnDwAACw9AABaTjIzYnRDb252ZXhDb252ZXhBbGdvcml0aG0xNnByb2Nlc3NDb2xsaXNpb25FUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclMyX1JLMTZidERpc3BhdGNoZXJJbmZvUDE2YnRNYW5pZm9sZFJlc3VsdEUyMWJ0V2l0aG91dE1hcmdpblJlc3VsdAAAAABQFwAAND0AAE4zNmJ0RGlzY3JldGVDb2xsaXNpb25EZXRlY3RvckludGVyZmFjZTZSZXN1bHRFAHgXAABwPQAALD0AAFpOMjNidENvbnZleENvbnZleEFsZ29yaXRobTE2cHJvY2Vzc0NvbGxpc2lvbkVQSzI0YnRDb2xsaXNpb25PYmplY3RXcmFwcGVyUzJfUksxNmJ0RGlzcGF0Y2hlckluZm9QMTZidE1hbmlmb2xkUmVzdWx0RTEzYnREdW1teVJlc3VsdAAyM2J0Q29udmV4Q29udmV4QWxnb3JpdGhtAE4yM2J0Q29udmV4Q29udmV4QWxnb3JpdGhtMTBDcmVhdGVGdW5jRQAAAAAAAEw+AABUAQAAdwEAAHgBAAB4FwAAWD4AANQ6AAAyMmJ0U3Vic2ltcGxleENvbnZleENhc3QAAAAAAAAAAHw/AAB5AQAAegEAAHsBAAB8AQAAfQEAAAAAAACkPgAAfgEAAH8BAACAAQAAeBcAAF8/AAAULgAAAAAAADg/AABkAAAAgQEAAIIBAABnAAAAaAAAAGkAAABqAAAAawAAAIMBAACEAQAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAIUBAAB1AAAAhgEAAHcAAACHAQAAiAEAAHoAAACJAQAAigEAAIsBAACMAQAAjQEAAI4BAACPAQAAkAEAAHgXAABNPwAA+CgAAFRyaWFuZ2xlADE1YnRUcmlhbmdsZVNoYXBlADI0YnRDb252ZXhUcmlhbmdsZUNhbGxiYWNrAAAAeBcAAEZAAAAMOgAAAAAAAJw/AADpAAAAkQEAAJIBAAB4FwAAqD8AABQuAABaTjMzYnRDb252ZXhDb25jYXZlQ29sbGlzaW9uQWxnb3JpdGhtMjFjYWxjdWxhdGVUaW1lT2ZJbXBhY3RFUDE3YnRDb2xsaXNpb25PYmplY3RTMV9SSzE2YnREaXNwYXRjaGVySW5mb1AxNmJ0TWFuaWZvbGRSZXN1bHRFMzFMb2NhbFRyaWFuZ2xlU3BoZXJlQ2FzdENhbGxiYWNrADMzYnRDb252ZXhDb25jYXZlQ29sbGlzaW9uQWxnb3JpdGhtAAAAAAAAAIhAAACTAQAAlAEAAJUBAACWAQAAlwEAAHgXAADdQAAADDoAAAAAAAC4QAAAmAEAAJkBAACaAQAAmwEAAJwBAACdAQAAngEAAHgXAADEQAAAXC0AADIyYnRDb21wb3VuZExlYWZDYWxsYmFjawAyOGJ0Q29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0AAAAAABhBAACfAQAAoAEAAKEBAACiAQAAowEAAFAXAAAgQQAAMjNidEhhc2hlZFNpbXBsZVBhaXJDYWNoZQAAAAAAAABYQQAApAEAAKUBAACmAQAApwEAAKgBAAB4FwAAtUEAAIhAAAAAAAAAiEEAAJgBAACpAQAAqgEAAKsBAACcAQAAnQEAAJ4BAAB4FwAAlEEAAFwtAAAzMGJ0Q29tcG91bmRDb21wb3VuZExlYWZDYWxsYmFjawAzNmJ0Q29tcG91bmRDb21wb3VuZENvbGxpc2lvbkFsZ29yaXRobQAAAAAA+EEAAKwBAACtAQAArgEAAK8BAACwAQAAeBcAAARCAAA8OgAAMTZidEVtcHR5QWxnb3JpdGhtAAAAAAAANEIAALEBAACyAQAAswEAALQBAAC1AQAAeBcAAEBCAAAMOgAAMzJidFNwaGVyZVNwaGVyZUNvbGxpc2lvbkFsZ29yaXRobQAAAAAAAHhCAABRAQAAtgEAALcBAAB4FwAAhEIAAJQ6AAAyMlNwaGVyZVRyaWFuZ2xlRGV0ZWN0b3IAAAAAAAAAALxCAAC4AQAAuQEAALoBAAC7AQAAvAEAAHgXAADIQgAADDoAADM0YnRTcGhlcmVUcmlhbmdsZUNvbGxpc2lvbkFsZ29yaXRobQAAAAAAAAAABEMAAFEBAAC9AQAAvgEAAHgXAAAQQwAAlDoAADE2YnRCb3hCb3hEZXRlY3RvcgAAAAAAAEBDAAC/AQAAwAEAAMEBAADCAQAAwwEAAHgXAABMQwAADDoAADI2YnRCb3hCb3hDb2xsaXNpb25BbGdvcml0aG0AAAAAAAAAAIhDAADEAQAAxQEAAMYBAADHAQAAyAEAAHgXAACUQwAAPDoAADMxYnRDb252ZXhQbGFuZUNvbGxpc2lvbkFsZ29yaXRobQAAAAEAAAACAAAAAAAAAAIAAAAAAAAAAQAAAAAAAADkQwAAyQEAAMoBAADLAQAAeBcAAPBDAAAURAAAMzBidEdqa0VwYVBlbmV0cmF0aW9uRGVwdGhTb2x2ZXIAAAAAUBcAABxEAAAzMGJ0Q29udmV4UGVuZXRyYXRpb25EZXB0aFNvbHZlcgAAAAAAAAAAXEQAAFcBAADMAQAAzQEAAM4BAADPAQAAeBcAAGhEAAAsPQAAWk4zM2J0TWlua293c2tpUGVuZXRyYXRpb25EZXB0aFNvbHZlcjEyY2FsY1BlbkRlcHRoRVIyMmJ0Vm9yb25vaVNpbXBsZXhTb2x2ZXJQSzEzYnRDb252ZXhTaGFwZVM0X1JLMTFidFRyYW5zZm9ybVM3X1I5YnRWZWN0b3IzUzlfUzlfUDEyYnRJRGVidWdEcmF3RTIwYnRJbnRlcm1lZGlhdGVSZXN1bHQAAAAAAAAoRQAAyQEAANABAADRAQAAeBcAADRFAAAURAAAMzNidE1pbmtvd3NraVBlbmV0cmF0aW9uRGVwdGhTb2x2ZXIAAAAAANhIAADSAQAA0wEAANQBAADVAQAA1gEAANcBAAAAAAAAmEgAANgBAADZAQAA2gEAAAAAAABQSAAA2AEAANsBAADcAQAAAAAAABRIAADYAQAA3QEAAN4BAAAAAAAA0EcAANgBAADfAQAA4AEAAAAAAACQRwAA2AEAAOEBAADiAQAAAAAAAGBHAADYAQAA4wEAAOQBAAAAAAAAIEcAANgBAADlAQAA5gEAAAAAAADgRgAA2AEAAOcBAADoAQAAAAAAAKhGAADYAQAA6QEAAOoBAAAAAAAAQEYAANgBAADrAQAA7AEAAHgXAABMRgAAfEYAAE4zMWJ0Q29udmV4UGxhbmVDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAFAXAACERgAAMzBidENvbGxpc2lvbkFsZ29yaXRobUNyZWF0ZUZ1bmMAAAAAeBcAALRGAAB8RgAATjI2YnRCb3hCb3hDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAB4FwAA7EYAAHxGAABOMzRidFNwaGVyZVRyaWFuZ2xlQ29sbGlzaW9uQWxnb3JpdGhtMTBDcmVhdGVGdW5jRQAAeBcAACxHAAB8RgAATjMyYnRTcGhlcmVTcGhlcmVDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAAAAHgXAABsRwAAfEYAAE4xNmJ0RW1wdHlBbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAAAAHgXAACcRwAAfEYAAE4yOGJ0Q29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0xN1N3YXBwZWRDcmVhdGVGdW5jRQB4FwAA3EcAAHxGAABOMzZidENvbXBvdW5kQ29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAAAAHgXAAAgSAAAfEYAAE4yOGJ0Q29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAAAAHgXAABcSAAAfEYAAE4zM2J0Q29udmV4Q29uY2F2ZUNvbGxpc2lvbkFsZ29yaXRobTE3U3dhcHBlZENyZWF0ZUZ1bmNFAAAAAHgXAACkSAAAfEYAAE4zM2J0Q29udmV4Q29uY2F2ZUNvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAAAB4FwAA5EgAAAhJAAAzMWJ0RGVmYXVsdENvbGxpc2lvbkNvbmZpZ3VyYXRpb24AAABQFwAAEEkAADI0YnRDb2xsaXNpb25Db25maWd1cmF0aW9uADEyYnREaXNwYXRjaGVyAAAAUBcAACtJAAAAAAAAjEkAAO0BAADuAQAA7wEAAPABAADxAQAA8gEAAPMBAAD0AQAA9QEAAPYBAAD3AQAA+AEAAPkBAAD6AQAA+wEAAPwBAAB4FwAA8EkAADxJAAAAAAAArEkAAP0BAAD+AQAA/wEAAHgXAAC4SQAA1EkAADIzYnRDb2xsaXNpb25QYWlyQ2FsbGJhY2sAAABQFwAA3EkAADE3YnRPdmVybGFwQ2FsbGJhY2sAMjFidENvbGxpc2lvbkRpc3BhdGNoZXIAAAAAAFRKAAAAAgAAAQIAAAICAAADAgAABAIAAAUCAAAGAgAABwIAAAgCAAAJAgAACgIAAAsCAAAMAgAADQIAAA4CAAAPAgAAEAIAAHgXAACRSwAAsEsAAAAAAAB0SgAA/QEAABECAAASAgAAeBcAAIBKAADUSQAAWk4yOGJ0SGFzaGVkT3ZlcmxhcHBpbmdQYWlyQ2FjaGUxOWNsZWFuUHJveHlGcm9tUGFpcnNFUDE3YnRCcm9hZHBoYXNlUHJveHlQMTJidERpc3BhdGNoZXJFMTdDbGVhblBhaXJDYWxsYmFjawAAAAAAAAAESwAA/QEAABMCAAAUAgAAeBcAABBLAADUSQAAWk4yOGJ0SGFzaGVkT3ZlcmxhcHBpbmdQYWlyQ2FjaGUzN3JlbW92ZU92ZXJsYXBwaW5nUGFpcnNDb250YWluaW5nUHJveHlFUDE3YnRCcm9hZHBoYXNlUHJveHlQMTJidERpc3BhdGNoZXJFMThSZW1vdmVQYWlyQ2FsbGJhY2sAMjhidEhhc2hlZE92ZXJsYXBwaW5nUGFpckNhY2hlAHgXAAC8SwAA2EsAADIyYnRPdmVybGFwcGluZ1BhaXJDYWNoZQAAAABQFwAA4EsAADI1YnRPdmVybGFwcGluZ1BhaXJDYWxsYmFjawAAAAAAPEwAABUCAAAWAgAAFwIAABgCAAAZAgAAGgIAABsCAAAcAgAAHQIAAB4CAAAfAgAAIAIAACECAAAiAgAAeBcAAB5NAAA0TQAAAAAAAGxMAACYAQAAIwIAACQCAAAlAgAAnAEAAJ0BAACeAQAAeBcAAHhMAABcLQAAMThidERidnRUcmVlQ29sbGlkZXIAAAAAAAAAALRMAACYAQAAJgIAAJoBAAAnAgAAnAEAAJ0BAACeAQAAeBcAAMBMAABcLQAAMjBCcm9hZHBoYXNlQWFiYlRlc3RlcgAAAAAAAPxMAACYAQAAKAIAAJoBAAApAgAAnAEAAJ0BAACeAQAAeBcAAAhNAABcLQAAMTlCcm9hZHBoYXNlUmF5VGVzdGVyADE2YnREYnZ0QnJvYWRwaGFzZQAAAABQFwAAPE0AADIxYnRCcm9hZHBoYXNlSW50ZXJmYWNlAAAAAAB4TQAAKgIAACsCAABdAAAAXgAAACwCAAAtAgAALgIAAHgXAACZTQAAnCcAAGJ0UmlnaWRCb2R5RmxvYXREYXRhADExYnRSaWdpZEJvZHkAAAAAAADkTQAALwIAADACAAAxAgAAMgIAADMCAAA0AgAANQIAADYCAAA3AgAAOAIAADkCAAA6AgAAOwIAAHgXAADwTQAAGE4AADM1YnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXIAAABQFwAAIE4AADE4YnRDb25zdHJhaW50U29sdmVyAAAAAAAAAABMTgAAVAEAADwCAAA9AgAAeBcAAFhOAADUOgAAMjdidENvbnRpbnVvdXNDb252ZXhDb2xsaXNpb24AAAB4FwAAhE4AABQuAAAyNWJ0VHJpYW5nbGVSYXljYXN0Q2FsbGJhY2sAAAAAALhOAADpAAAAPgIAAD8CAAAoAAAAeBcAAMROAAAULgAAMjhidFRyaWFuZ2xlQ29udmV4Y2FzdENhbGxiYWNrAAAAAAAAIE8AAEACAABBAgAAQgIAAEMCAABEAgAARQIAAEYCAABHAgAASAIAAEkCAABKAgAASwIAAEwCAABQFwAA31IAAAAAAAA8TwAATQIAAE4CAABPAgAAeBcAAFtRAAB0UQAAAAAAALxQAADpAAAAUAIAAFECAABSAgAAAAAAADBQAACYAQAAUwIAAJoBAABUAgAAnAEAAJ0BAACeAQAAAAAAAJxPAABOAAAAVQIAAFYCAABXAgAAeBcAAKhPAABAJgAAWk4xNmJ0Q29sbGlzaW9uV29ybGQyMXJheVRlc3RTaW5nbGVJbnRlcm5hbEVSSzExYnRUcmFuc2Zvcm1TMl9QSzI0YnRDb2xsaXNpb25PYmplY3RXcmFwcGVyUk5TXzE3UmF5UmVzdWx0Q2FsbGJhY2tFRTE1TG9jYWxJbmZvQWRkZXIyAAAAAHgXAAA8UAAAXC0AAFpOMTZidENvbGxpc2lvbldvcmxkMjFyYXlUZXN0U2luZ2xlSW50ZXJuYWxFUksxMWJ0VHJhbnNmb3JtUzJfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18xN1JheVJlc3VsdENhbGxiYWNrRUU5UmF5VGVzdGVyAAAAeBcAAMhQAAB4TgAAWk4xNmJ0Q29sbGlzaW9uV29ybGQyMXJheVRlc3RTaW5nbGVJbnRlcm5hbEVSSzExYnRUcmFuc2Zvcm1TMl9QSzI0YnRDb2xsaXNpb25PYmplY3RXcmFwcGVyUk5TXzE3UmF5UmVzdWx0Q2FsbGJhY2tFRTI5QnJpZGdlVHJpYW5nbGVSYXljYXN0Q2FsbGJhY2sAMTlidFNpbmdsZVJheUNhbGxiYWNrAAAAAHgXAACAUQAAnFEAADIzYnRCcm9hZHBoYXNlUmF5Q2FsbGJhY2sAAABQFwAApFEAADI0YnRCcm9hZHBoYXNlQWFiYkNhbGxiYWNrAAAAAAAA7FEAAFgCAABZAgAAWgIAAFsCAAD8////7FEAAFwCAABdAgAAXgIAANQXAAAMUgAAAAAAAAIAAAAULgAAAgAAAEAuAAACBAAAMTdEZWJ1Z0RyYXdjYWxsYmFjawBPdmVyZmxvdyBpbiBBQUJCLCBvYmplY3QgcmVtb3ZlZCBmcm9tIHNpbXVsYXRpb24ASWYgeW91IGNhbiByZXByb2R1Y2UgdGhpcywgcGxlYXNlIGVtYWlsIGJ1Z3NAY29udGludW91c3BoeXNpY3MuY29tCgBQbGVhc2UgaW5jbHVkZSBhYm92ZSBpbmZvcm1hdGlvbiwgeW91ciBQbGF0Zm9ybSwgdmVyc2lvbiBvZiBPUy4KAFRoYW5rcy4KADE2YnRDb2xsaXNpb25Xb3JsZAAAAAAAAAD0VQAA6QAAAF8CAAA/AgAAYAIAAAAAAAA0VQAA6QAAAGECAAA/AgAAYgIAAAAAAACAVAAAmAEAAGMCAACaAQAAZAIAAJwBAACdAQAAngEAAAAAAABgUwAAZQIAAGYCAABnAgAAaAIAAHgXAABsUwAATFQAAFpaTjE2YnRDb2xsaXNpb25Xb3JsZDI1b2JqZWN0UXVlcnlTaW5nbGVJbnRlcm5hbEVQSzEzYnRDb252ZXhTaGFwZVJLMTFidFRyYW5zZm9ybVM1X1BLMjRidENvbGxpc2lvbk9iamVjdFdyYXBwZXJSTlNfMjBDb252ZXhSZXN1bHRDYWxsYmFja0VmRU4yMmJ0Q29tcG91bmRMZWFmQ2FsbGJhY2sxMlByb2Nlc3NDaGlsZEVpUzVfUEsxNmJ0Q29sbGlzaW9uU2hhcGVFMTRMb2NhbEluZm9BZGRlcgAAUBcAAFRUAABOMTZidENvbGxpc2lvbldvcmxkMjBDb252ZXhSZXN1bHRDYWxsYmFja0UAAHgXAACMVAAAXC0AAFpOMTZidENvbGxpc2lvbldvcmxkMjVvYmplY3RRdWVyeVNpbmdsZUludGVybmFsRVBLMTNidENvbnZleFNoYXBlUksxMWJ0VHJhbnNmb3JtUzVfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18yMENvbnZleFJlc3VsdENhbGxiYWNrRWZFMjJidENvbXBvdW5kTGVhZkNhbGxiYWNrAAAAAHgXAABAVQAAuE4AAFpOMTZidENvbGxpc2lvbldvcmxkMjVvYmplY3RRdWVyeVNpbmdsZUludGVybmFsRVBLMTNidENvbnZleFNoYXBlUksxMWJ0VHJhbnNmb3JtUzVfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18yMENvbnZleFJlc3VsdENhbGxiYWNrRWZFMzJCcmlkZ2VUcmlhbmdsZUNvbnZleGNhc3RDYWxsYmFja18wAAAAAHgXAAAAVgAAuE4AAFpOMTZidENvbGxpc2lvbldvcmxkMjVvYmplY3RRdWVyeVNpbmdsZUludGVybmFsRVBLMTNidENvbnZleFNoYXBlUksxMWJ0VHJhbnNmb3JtUzVfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18yMENvbnZleFJlc3VsdENhbGxiYWNrRWZFMzJCcmlkZ2VUcmlhbmdsZUNvbnZleGNhc3RDYWxsYmFjawAAAAAAAMRWAABNAgAAaQIAAGoCAAB4FwAA0FYAAHRRAAAyMWJ0U2luZ2xlU3dlZXBDYWxsYmFjawAAAAAAAFcAAGsCAABsAgAAbQIAAG4CAABQFwAACFcAADI1YnRTaW11bGF0aW9uSXNsYW5kTWFuYWdlcgAAAAAAWFcAAG8CAABwAgAAcQIAAHICAAAoAAAAKAAAAHMCAAAoAAAAKAAAAHQCAAB1AgAA1BcAAItXAAAAAAAAAQAAAKBXAAACBAAAYnRUeXBlZENvbnN0cmFpbnRGbG9hdERhdGEAMTdidFR5cGVkQ29uc3RyYWludAAAUBcAAKhXAAAxM2J0VHlwZWRPYmplY3QAAAAAAPRYAAB2AgAAdwIAAEICAABDAgAARAIAAEUCAAB4AgAARwIAAEgCAAB5AgAAegIAAEsCAAB7AgAAfAIAAH0CAAB+AgAAfwIAAIACAACBAgAAggIAAIMCAACEAgAAhQIAAIYCAACHAgAAiAIAAIkCAACKAgAAiwIAAIwCAACNAgAAjgIAAI8CAACQAgAAkQIAAJICAACTAgAAlAIAAJUCAACWAgAAlwIAAJgCAACZAgAAmgIAAJsCAACcAgAAnQIAAAAAAACQWAAAngIAAJ8CAACgAgAAeBcAAJxYAAC8WAAAMjdJbnBsYWNlU29sdmVySXNsYW5kQ2FsbGJhY2sAAABQFwAAxFgAAE4yNWJ0U2ltdWxhdGlvbklzbGFuZE1hbmFnZXIxNElzbGFuZENhbGxiYWNrRQAAAHgXAABiWQAAfFkAAAAAAAAYWQAAZQIAAKECAACiAgAAowIAAHgXAAAkWQAAIFsAADM0YnRDbG9zZXN0Tm90TWVDb252ZXhSZXN1bHRDYWxsYmFjawBidER5bmFtaWNzV29ybGRGbG9hdERhdGEAMjNidERpc2NyZXRlRHluYW1pY3NXb3JsZAB4FwAAiFkAACBPAAAxNWJ0RHluYW1pY3NXb3JsZAAAAAAAAADEWgAApAIAAKUCAABCAgAAQwIAAEQCAABFAgAAeAIAAEcCAABIAgAAeQIAAHoCAABLAgAAewIAAHwCAAB9AgAAfgIAAH8CAACAAgAAgQIAAIICAACDAgAAhAIAAIUCAACGAgAAhwIAAIgCAACJAgAAigIAAIsCAACMAgAAjQIAAI4CAACPAgAAkAIAAJECAACSAgAAkwIAAJQCAACVAgAAlgIAAJcCAACmAgAAmQIAAJoCAACnAgAAnAIAAJ0CAAAAAAAAdFoAAKgCAACpAgAAqgIAAHgXAACAWgAAoFoAAE4yY2MyM2NjT3ZlcmxhcEZpbHRlckNhbGxiYWNrRQAAUBcAAKhaAAAyM2J0T3ZlcmxhcEZpbHRlckNhbGxiYWNrAAAAeBcAAF5bAAD0WAAAAAAAAOhaAABlAgAAqwIAAKwCAACtAgAAeBcAAPRaAAAgWwAATjJjYzM0Y2NOb3RNZUNsb3Nlc3RDb252ZXhSZXN1bHRDYWxsYmFja0UAAAB4FwAALFsAAExUAABOMTZidENvbGxpc2lvbldvcmxkMjdDbG9zZXN0Q29udmV4UmVzdWx0Q2FsbGJhY2tFAE4yY2MyM2NjRGlzY3JldGVEeW5hbWljc1dvcmxkRQAAAAAAAAAAuFsAAG8CAACuAgAArwIAAHICAACwAgAAsQIAAHMCAACyAgAAswIAALQCAAC1AgAAtgIAAHgXAADfWwAAWFcAAGJ0SGluZ2VDb25zdHJhaW50RmxvYXREYXRhADE3YnRIaW5nZUNvbnN0cmFpbnQAAAAAAAAsXAAAbwIAALcCAAC4AgAAcgIAALkCAAC6AgAAcwIAALsCAAC8AgAAvQIAAL4CAAC/AgAAeBcAAFlcAABYVwAAYnRQb2ludDJQb2ludENvbnN0cmFpbnRGbG9hdERhdGEAMjNidFBvaW50MlBvaW50Q29uc3RyYWludAAAAAAAAKhcAABvAgAAwAIAAMECAAByAgAAwgIAAMMCAABzAgAAxAIAAMUCAADGAgAAxwIAAHgXAADwXAAAWFcAAAEAAAACAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAEAAAAAAAAAAQAAAAEAAAACAAAAAgAAADMwYnRHZW5lcmljNkRvZlNwcmluZzJDb25zdHJhaW50AAAAAAAAAABIXQAAyAIAAMkCAADBAgAAcgIAAMICAADDAgAAcwIAAMQCAADFAgAAxgIAAMcCAAB4FwAAd10AAKhcAABidEdlbmVyaWM2RG9mU3ByaW5nMkNvbnN0cmFpbnREYXRhADE3YnRGaXhlZENvbnN0cmFpbnQAAAAAAACkXQAAygIAAMsCAADMAgAAzQIAAHgXAACwXQAAyF0AADIwYnREZWZhdWx0TW90aW9uU3RhdGUAAFAXAADQXQAAMTNidE1vdGlvblN0YXRlAAAAAAD4XQAAygIAAM4CAADPAgAA0AIAAHgXAAAEXgAAyF0AAE4yY2MxM2NjTW90aW9uU3RhdGVFAA=="),k(a,24096,"AgAAAAEAAAAFAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAFAAAArGEAAAAAAAAAAAAAAAAAAAIAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),k(anull,r2,G,function(A){var e=0,e=0;return (A=0|d(X2[(A|=0)+56>>2]))&&(X2[6180]=A,e=-1),0|e;},function(A,e,r){A|=0,e|=0;var f,i,a,n=0,b=0,t=0;X2[12+(K2=a=K2-16|0)>>2]=r|=0,X2[8+a>>2]=e,e=X2[A+24>>2],X2[a>>2]=e,e=X2[A+20>>2]-e|0,X2[4+a>>2]=e;A:{if((0|(n=i2(X2[A+56>>(b=2)],a,2)))!=(0|(t=e+r|0)))for(e=a;;){if((0|n)<=-1){if(X2[A+24>>2]=0,X2[A+16>>2]=0,X2[A+20>>2]=0,X2[A>>2]=32|X2[A>>2],2==((A=0)|b))break A;A=r-X2[e+4>>2]|0;break A;}if(f=X2[e+4>>2],X2[(e=(i=f>>>0<n>>>0)?e+8|0:e)>>2]=(f=n-(i?f:0)|0)+X2[e>>2],X2[e+4>>2]=X2[e+4>>2]-f,(0|(t=t-n|0))==(0|(n=i2(X2[A+56>>2],e,b=b-i|0))))break;}e=X2[A+40>>2],X2[A+24>>2]=e,X2[A+20>>2]=e,X2[A+16>>2]=e+X2[A+44>>2],A=r;}return K2=16+a|0,0|A;},function(A,e,r,f){var i;return K2=i=K2-16|0,A=(A=0|_(X2[(A|=0)+56>>2],0|(e|=0),0|(r|=0),255&(f|=0),8+i|0))?(X2[6180]=76==(0|A)?70:A,e=-1):(e=X2[12+i>>2],X2[8+i>>2]),K2=16+i|0,H=e,0|A;},u2,r,r,Q2,d2,g2,w2,G2,s2,l2,d2,Z2,u2,r,r,d2,h2,d2,Y2,s2,Q2,Q2,Q2,Q2,Q2,W2,W2,Q2,W2,W2,r,function(A){X2[12+(K2-16|0)>>2]=A|=0,U();},T2,T2,f2,w2,x2,w2,y2,w2,y2,w2,x2,w2,function(A,e,r){var f;return e|=0,r|=0,X2[72+(K2=f=K2-80|0)>>2]=A|=0,X2[68+f>>2]=e,X2[64+f>>2]=r,1&b(e=X2[72+f>>2],X2[68+f>>2],0)?S2[79+f|0]=1:(A=(A=X2[68+(r=f)>>2])?t(A,4072,4120,0):0,X2[r+60>>2]=A,X2[60+f>>2]&&(X2[f>>2]=X2[60+f>>2],X2[4+f>>2]=0,X2[8+f>>2]=e,X2[12+f>>2]=-1,X2[16+f>>2]=0,X2[20+f>>2]=0,X2[24+f>>2]=0,X2[28+f>>2]=0,X2[32+f>>2]=0,X2[36+f>>2]=0,X2[40+f>>2]=0,X2[44+f>>2]=0,X2[48+f>>2]=0,S2[52+f|0]=0,S2[53+f|0]=0,S2[54+f|0]=0,X2[48+f>>2]=1,A=X2[60+f>>2],N2[X2[X2[A>>2]+28>>2]](A,f,X2[X2[64+f>>2]>>2],1),1==X2[24+f>>2])?(X2[X2[64+f>>2]>>2]=X2[16+f>>2],S2[79+f|0]=1):S2[79+f|0]=0),K2=80+f|0,1&S2[79+f|0];},function(A,e,r,f,i,a){var n;e|=0,r|=0,f|=0,i|=0,a|=0,X2[28+(K2=n=K2-32|0)>>2]=A|=0,X2[24+n>>2]=e,X2[20+n>>2]=r,X2[16+n>>2]=f,X2[12+n>>2]=i,S2[11+n|0]=a,1&b(A=X2[28+n>>2],X2[X2[24+n>>2]+8>>2],1&S2[11+n|0])&&e0(A,X2[24+n>>2],X2[20+n>>2],X2[16+n>>2],X2[12+n>>2]),K2=32+n|0;},function(A,e,r,f,i){var a;e|=0,r|=0,f|=0,i|=0,X2[28+(K2=a=K2-32|0)>>2]=A|=0,X2[24+a>>2]=e,X2[20+a>>2]=r,X2[16+a>>2]=f,S2[15+a|0]=i,1&b(A=X2[28+a>>2],X2[X2[24+a>>2]+8>>2],1&S2[15+a|0])?r0(A,X2[24+a>>2],X2[20+a>>2],X2[16+a>>2]):1&b(A,X2[X2[24+a>>2]>>2],1&S2[15+a|0])&&(X2[20+a>>2]==X2[X2[24+a>>2]+20>>2]||X2[20+a>>2]==X2[X2[24+a>>2]+16>>2]?1==X2[16+a>>2]&&(X2[X2[24+a>>2]+32>>2]=1):(X2[X2[24+a>>2]+32>>2]=X2[16+a>>2],X2[X2[24+a>>2]+20>>2]=X2[20+a>>2],A=X2[24+a>>2],X2[A+40>>2]=X2[A+40>>2]+1,1==X2[X2[24+a>>2]+36>>2]&&2==X2[X2[24+a>>2]+24>>2]&&(S2[X2[24+a>>2]+54|0]=1),X2[X2[24+a>>2]+44>>2]=4)),K2=32+a|0;},function(A,e,r,f){var i;e|=0,r|=0,f|=0,X2[12+(K2=i=K2-16|0)>>2]=A|=0,X2[8+i>>2]=e,X2[4+i>>2]=r,X2[i>>2]=f,1&b(A=X2[12+i>>2],X2[X2[8+i>>2]+8>>2],0)&&V2(A,X2[8+i>>2],X2[4+i>>2],X2[i>>2]),K2=16+i|0;},I2,function(A,e,r,f,i,a){var n;e|=0,r|=0,f|=0,i|=0,a|=0,X2[28+(K2=n=K2-32|0)>>2]=A|=0,X2[24+n>>2]=e,X2[20+n>>2]=r,X2[16+n>>2]=f,X2[12+n>>2]=i,S2[11+n|0]=a,1&b(A=X2[28+n>>2],X2[X2[24+n>>2]+8>>2],1&S2[11+n|0])?e0(A,X2[24+n>>2],X2[20+n>>2],X2[16+n>>2],X2[12+n>>2]):(A=X2[A+8>>2],N2[X2[X2[A>>2]+20>>2]](A,X2[24+n>>2],X2[20+n>>2],X2[16+n>>2],X2[12+n>>2],1&S2[11+n|0])),K2=32+n|0;},function(A,e,r,f,i){var a;e|=0,r|=0,f|=0,i|=0,X2[28+(K2=a=K2-32|0)>>2]=A|=0,X2[24+a>>2]=e,X2[20+a>>2]=r,X2[16+a>>2]=f,S2[15+a|0]=i,1&b(A=X2[28+a>>2],X2[X2[24+a>>2]+8>>2],1&S2[15+a|0])?r0(A,X2[24+a>>2],X2[20+a>>2],X2[16+a>>2]):1&b(A,X2[X2[24+a>>2]>>2],1&S2[15+a|0])?X2[20+a>>2]==X2[X2[24+a>>2]+20>>2]||X2[20+a>>2]==X2[X2[24+a>>2]+16>>2]?1==X2[16+a>>2]&&(X2[X2[24+a>>2]+32>>2]=1):(X2[X2[24+a>>2]+32>>2]=X2[16+a>>2],S2[14+a|0]=0,4!=X2[X2[24+a>>2]+44>>2]&&(S2[13+a|0]=0,S2[X2[24+a>>2]+52|0]=0,S2[X2[24+a>>2]+53|0]=0,A=X2[A+8>>2],N2[X2[X2[A>>2]+20>>2]](A,X2[24+a>>2],X2[20+a>>2],X2[20+a>>2],1,1&S2[15+a|0]),1&S2[X2[24+a>>2]+53|0]&&(S2[13+a|0]=1)&S2[X2[24+a>>2]+52|0]&&(S2[14+a|0]=1),1&S2[13+a|0]?X2[X2[24+a>>2]+44>>2]=3:X2[X2[24+a>>2]+44>>2]=4),1&S2[14+a|0]||(X2[X2[24+a>>2]+20>>2]=X2[20+a>>2],A=X2[24+a>>2],X2[A+40>>2]=X2[A+40>>2]+1,1==X2[X2[24+a>>2]+36>>2]&&2==X2[X2[24+a>>2]+24>>2]&&(S2[X2[24+a>>2]+54|0]=1))):(A=X2[A+8>>2],N2[X2[X2[A>>2]+24>>2]](A,X2[24+a>>2],X2[20+a>>2],X2[16+a>>2],1&S2[15+a|0])),K2=32+a|0;},function(A,e,r,f){var i;e|=0,r|=0,f|=0,X2[12+(K2=i=K2-16|0)>>2]=A|=0,X2[8+i>>2]=e,X2[4+i>>2]=r,X2[i>>2]=f,1&b(A=X2[12+i>>2],X2[X2[8+i>>2]+8>>2],0)?V2(A,X2[8+i>>2],X2[4+i>>2],X2[i>>2]):(A=X2[A+8>>2],N2[X2[X2[A>>2]+28>>2]](A,X2[8+i>>2],X2[4+i>>2],X2[i>>2])),K2=16+i|0;},I2,function(A,e,r,f,i,a){var n;if(e|=0,r|=0,f|=0,i|=0,a|=0,X2[28+(K2=n=K2-32|0)>>2]=A|=0,X2[24+n>>2]=e,X2[20+n>>2]=r,X2[16+n>>2]=f,X2[12+n>>2]=i,S2[11+n|0]=a,1&b(A=X2[28+n>>2],X2[X2[24+n>>2]+8>>2],1&S2[11+n|0]))e0(A,X2[24+n>>2],X2[20+n>>2],X2[16+n>>2],X2[12+n>>2]);else {if(S2[10+n|0]=1&S2[X2[24+n>>2]+52|0],S2[9+n|0]=1&S2[X2[24+n>>2]+53|0],X2[4+n>>2]=(A+16|0)+(X2[A+12>>2]<<3),X2[n>>2]=A+16,S2[X2[24+n>>2]+52|0]=0,S2[X2[24+n>>2]+53|0]=0,f0(X2[n>>2],X2[24+n>>2],X2[20+n>>2],X2[16+n>>2],X2[12+n>>2],1&S2[11+n|0]),S2[10+n|0]=1&S2[X2[24+n>>2]+52|0]|1&S2[10+n|0],S2[9+n|0]=1&S2[X2[24+n>>2]+53|0]|1&S2[9+n|0],e=X2[n>>2]+8|0,(X2[n>>2]=e)>>>0<X[4+n>>2])for(;;){A:if(!(1&S2[X2[24+n>>2]+54|0])){e:{if(1&S2[X2[24+n>>2]+52|0]){if(1==X2[X2[24+n>>2]+24>>2])break A;if(2&X2[A+8>>2])break e;break A;}if(!(1&X2[A+8>>2])&&1&S2[X2[24+n>>2]+53|0])break A;}if(S2[X2[24+n>>2]+52|0]=0,S2[X2[24+n>>2]+53|0]=0,f0(X2[n>>2],X2[24+n>>2],X2[20+n>>2],X2[16+n>>2],X2[12+n>>2],1&S2[11+n|0]),S2[10+n|0]=1&S2[X2[24+n>>2]+52|0]|1&S2[10+n|0],S2[9+n|0]=1&S2[X2[24+n>>2]+53|0]|1&S2[9+n|0],e=X2[n>>2]+8|0,(X2[n>>2]=e)>>>0<X[4+n>>2])continue;}break;}S2[X2[24+n>>2]+52|0]=1&S2[10+n|0],S2[X2[24+n>>2]+53|0]=1&S2[9+n|0];}K2=32+n|0;},function(A,e,r,f,i){var a;if(e|=0,r|=0,f|=0,i|=0,X2[44+(K2=a=K2-48|0)>>2]=A|=0,X2[40+a>>2]=e,X2[36+a>>2]=r,X2[32+a>>2]=f,S2[31+a|0]=i,1&b(A=X2[44+a>>2],X2[X2[40+a>>2]+8>>2],1&S2[31+a|0]))r0(A,X2[40+a>>2],X2[36+a>>2],X2[32+a>>2]);else if(1&b(A,X2[X2[40+a>>2]>>2],1&S2[31+a|0])){if(X2[36+a>>2]==X2[X2[40+a>>2]+20>>2]||X2[36+a>>2]==X2[X2[40+a>>2]+16>>2])1==X2[32+a>>2]&&(X2[X2[40+a>>2]+32>>2]=1);else {if(X2[X2[40+a>>2]+32>>2]=X2[32+a>>2],S2[30+a|0]=0,4!=X2[X2[40+a>>2]+44>>2]){for(S2[29+a|0]=0,X2[24+a>>2]=(A+16|0)+(X2[A+12>>2]<<3),X2[20+a>>2]=A+16;;){A:if(!(X[20+a>>2]>=X[24+a>>2]||(S2[X2[40+a>>2]+52|0]=0,S2[X2[40+a>>2]+53|0]=0,f0(X2[20+a>>2],X2[40+a>>2],X2[36+a>>2],X2[36+a>>2],1,1&S2[31+a|0]),1&S2[X2[40+a>>2]+54|0]))){if(1&S2[X2[40+a>>2]+53|0])e:{if((S2[29+a|0]=1)&S2[X2[40+a>>2]+52|0]){if((S2[30+a|0]=1)==X2[X2[40+a>>2]+24>>2])break A;if(2&X2[A+8>>2])break e;break A;}if(!(1&X2[A+8>>2]))break A;}X2[20+a>>2]=X2[20+a>>2]+8;continue;}break;}1&S2[29+a|0]?X2[X2[40+a>>2]+44>>2]=3:X2[X2[40+a>>2]+44>>2]=4;}1&S2[30+a|0]||(X2[X2[40+a>>2]+20>>2]=X2[36+a>>2],A=X2[40+a>>2],X2[A+40>>2]=X2[A+40>>2]+1,1==X2[X2[40+a>>2]+36>>2]&&2==X2[X2[40+a>>2]+24>>2]&&(S2[X2[40+a>>2]+54|0]=1));}}else if(X2[16+a>>2]=(A+16|0)+(X2[A+12>>2]<<3),X2[12+a>>2]=A+16,i0(X2[12+a>>2],X2[40+a>>2],X2[36+a>>2],X2[32+a>>2],1&S2[31+a|0]),e=X2[12+a>>2]+8|0,(X2[12+a>>2]=e)>>>0<X[16+a>>2])if(1==X2[X2[40+a>>2]+36>>2]||2&X2[A+8>>2]){for(;;)if(1&S2[X2[40+a>>2]+54|0]||(i0(X2[12+a>>2],X2[40+a>>2],X2[36+a>>2],X2[32+a>>2],1&S2[31+a|0]),A=X2[12+a>>2]+8|0,!((X2[12+a>>2]=A)>>>0<X[16+a>>2])))break;}else if(1&X2[A+8>>2]){for(;;)if(1&S2[X2[40+a>>2]+54|0]||1==X2[X2[40+a>>2]+36>>2]&&1==X2[X2[40+a>>2]+24>>2]||(i0(X2[12+a>>2],X2[40+a>>2],X2[36+a>>2],X2[32+a>>2],1&S2[31+a|0]),A=X2[12+a>>2]+8|0,!((X2[12+a>>2]=A)>>>0<X[16+a>>2])))break;}else for(;;)if(1&S2[X2[40+a>>2]+54|0]||1==X2[X2[40+a>>2]+36>>2]||(i0(X2[12+a>>2],X2[40+a>>2],X2[36+a>>2],X2[32+a>>2],1&S2[31+a|0]),A=X2[12+a>>2]+8|0,!((X2[12+a>>2]=A)>>>0<X[16+a>>2])))break;K2=48+a|0;},function(A,e,r,f){var i;if(e|=0,r|=0,f|=0,X2[28+(K2=i=K2-32|0)>>2]=A|=0,X2[24+i>>2]=e,X2[20+i>>2]=r,X2[16+i>>2]=f,1&b(A=X2[28+i>>2],X2[X2[24+i>>2]+8>>2],0))V2(A,X2[24+i>>2],X2[20+i>>2],X2[16+i>>2]);else if(X2[12+i>>2]=(A+16|0)+(X2[A+12>>2]<<3),X2[8+i>>2]=A+16,p2(X2[8+i>>2],X2[24+i>>2],X2[20+i>>2],X2[16+i>>2]),A=X2[8+i>>2]+8|0,(X2[8+i>>2]=A)>>>0<X[12+i>>2])for(;;)if(p2(X2[8+i>>2],X2[24+i>>2],X2[20+i>>2],X2[16+i>>2]),1&S2[X2[24+i>>2]+54|0]||(A=X2[8+i>>2]+8|0,!((X2[8+i>>2]=A)>>>0<X[12+i>>2])))break;K2=32+i|0;},w2,M2,I2,function(A,e,r){e|=0,r|=0;var f,i=0,a=0;return X2[88+(K2=f=K2-96|0)>>2]=A|=0,X2[84+f>>2]=e,X2[80+f>>2]=r,A=X2[88+f>>2],1&b(X2[84+f>>2],4516,0)?(X2[X2[80+f>>2]>>2]=0,S2[95+f|0]=1):1&M2(A,X2[84+f>>2],X2[80+f>>2])?(X2[X2[80+f>>2]>>2]&&(X2[X2[80+f>>2]>>2]=X2[X2[X2[80+f>>2]>>2]>>2]),S2[95+f|0]=1):(e=(e=X2[84+(r=f)>>2])?t(e,4072,4216,0):0,X2[r+76>>2]=e,!X2[76+f>>2]||(X2[X2[80+f>>2]>>2]&&(X2[X2[80+f>>2]>>2]=X2[X2[X2[80+f>>2]>>2]>>2]),X2[X2[76+f>>2]+8>>2]&(-1^X2[A+8>>2])&7||X2[A+8>>2]&(-1^X2[X2[76+f>>2]+8>>2])&96)?S2[95+f|0]=0:1&b(X2[A+12>>2],X2[X2[76+f>>2]+12>>2],0)?S2[95+f|0]=1:1&b(X2[A+12>>2],4464,0)?(A=(A=X2[X2[76+(e=f)>>2]+12>>2])?t(A,4072,4268,0):0,X2[e+72>>2]=A,S2[95+f|0]=!X2[72+f>>2]):(r=f,e=(e=X2[A+12>>2])?t(e,4072,4216,0):0,X2[r+68>>2]=e,X2[68+f>>2]?1&(-1^X2[A+8>>2])?S2[95+f|0]=0:(a=1&function A(e,r){var f=0,i=0,a=0,n=0;f=K2-32|0;K2=f;X2[24+f>>2]=e;X2[20+f>>2]=r;e=X2[24+f>>2];i=f;r=X2[20+f>>2];r=r?t(r,4072,4216,0):0;X2[16+i>>2]=r;!X2[16+f>>2]||X2[X2[16+f>>2]+8>>2]&(-1^X2[e+8>>2])?S2[31+f|0]=0:1&b(X2[e+12>>2],X2[X2[16+f>>2]+12>>2],0)?S2[31+f|0]=1:1&(-1^X2[e+8>>2])?S2[31+f|0]=0:(i=f,r=(r=X2[e+12>>2])?t(r,4072,4216,0):0,X2[12+i>>2]=r,X2[12+f>>2]?(n=1&A(X2[12+(a=f)>>2],X2[X2[16+f>>2]+12>>2]),S2[a+31|0]=n):(r=f,e=(e=X2[e+12>>2])?t(e,4072,4328,0):0,X2[r+8>>2]=e,X2[8+f>>2]?(n=1&A0(X2[8+(a=f)>>2],X2[X2[16+f>>2]+12>>2]),S2[a+31|0]=n):S2[31+f|0]=0));K2=32+f|0;return 1&S2[31+f|0];}(X2[68+(i=f)>>2],X2[X2[76+f>>2]+12>>2]),S2[i+95|0]=a):(r=f,e=(e=X2[A+12>>2])?t(e,4072,4328,0):0,X2[r+64>>2]=e,X2[64+f>>2]?1&(-1^X2[A+8>>2])?S2[95+f|0]=0:(a=1&A0(X2[64+(i=f)>>2],X2[X2[76+f>>2]+12>>2]),S2[i+95|0]=a):(e=f,A=(A=X2[A+12>>2])?t(A,4072,4120,0):0,X2[e+60>>2]=A,X2[60+f>>2]&&(A=(A=X2[X2[76+(e=f)>>2]+12>>2])?t(A,4072,4120,0):0,X2[e+56>>2]=A,X2[56+f>>2]&&(X2[f>>2]=X2[56+f>>2],X2[4+f>>2]=0,X2[8+f>>2]=X2[60+f>>2],X2[12+f>>2]=-1,X2[16+f>>2]=0,X2[20+f>>2]=0,X2[24+f>>2]=0,X2[28+f>>2]=0,X2[32+f>>2]=0,X2[36+f>>2]=0,X2[40+f>>2]=0,X2[44+f>>2]=0,X2[48+f>>2]=0,S2[52+f|0]=0,S2[53+f|0]=0,S2[54+f|0]=0,X2[48+f>>2]=1,A=X2[56+f>>2],N2[X2[X2[A>>2]+28>>2]](A,f,X2[X2[80+f>>2]>>2],1),1==X2[24+f>>2]))?(X2[X2[80+f>>2]>>2]&&(X2[X2[80+f>>2]>>2]=X2[16+f>>2]),S2[95+f|0]=1):S2[95+f|0]=0)))),K2=96+f|0,1&S2[95+f|0];},I2,function(A,e,r){var f;return e|=0,r|=0,X2[24+(K2=f=K2-32|0)>>2]=A|=0,X2[20+f>>2]=e,X2[16+f>>2]=r,A=X2[24+f>>2],1&b(X2[20+f>>2],4516,0)?(A=(A=X2[A+12>>2])?t(A,4072,4268,0):0,X2[X2[16+f>>2]>>2]=A?4340:4348,S2[31+f|0]=1):1&M2(A,X2[20+f>>2],X2[16+f>>2])||(e=(e=X2[20+(r=f)>>2])?t(e,4072,4328,0):0,X2[r+12>>2]=e,X2[12+f>>2]&&!(X2[X2[12+f>>2]+8>>2]&(-1^X2[A+8>>2])&7)&&!(X2[A+8>>2]&(-1^X2[X2[12+f>>2]+8>>2])&96)&&1&b(X2[A+12>>2],X2[X2[12+f>>2]+12>>2],0)&&1&b(X2[A+16>>2],X2[X2[12+f>>2]+16>>2],0))?S2[31+f|0]=1:S2[31+f|0]=0,K2=32+f|0,1&S2[31+f|0];},function(A){X2[6261]=9776;},function(A){l0(25140);},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b=P2(0),t=P2(0),o=P2(0),c=0;P2(0),K2=n=K2-32|0,i=X2[4+(a=r+8|0)>>2],X2[(c=f=24+n|0)>>2]=X2[a>>2],X2[4+c>>2]=i,c=X2[r+4>>2],X2[16+n>>2]=X2[r>>2],X2[20+n>>2]=c,b=U2[16+n>>2],o=U2[20+n>>2],t=U2[f>>2],P2(P2(P2(b*b)+P2(o*o))+P2(t*t))<P2(14210854715202004e-30)&&(X2[28+n>>2]=0,t=P2(-1),o=P2(-1),b=P2(-1)),a=t,t=P2(P2(1)/P2(O2(P2(P2(P2(b*b)+P2(o*o))+P2(t*t))))),U2[24+n>>2]=a*t,U2[20+n>>2]=o*t,U2[16+n>>2]=b*t,w0(n,e,16+n|0);A:{e:switch(X2[e+4>>2]){case 8:b=P2(U2[e+36>>2]*U2[e+20>>2]);break A;case 0:case 1:case 13:case 11:case 10:b=U2[e+52>>2];break A;case 4:case 5:b=U2[e+52>>2];break A;default:break e;}b=P2(N2[X2[X2[e>>2]+48>>2]](e));}X2[A+12>>2]=0,U2[A+8>>2]=P2(b*U2[24+n>>2])+U2[8+n>>2],U2[A+4>>2]=P2(b*U2[20+n>>2])+U2[4+n>>2],U2[A>>2]=P2(b*U2[16+n>>2])+U2[n>>2],K2=32+n|0;},w0,function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b=P2(0),t=P2(0),o=P2(0),c=P2(0);return P2(0),P2(0),P2(0),(t=U2[r+128>>2])!=P2(0)&&(X2[6628]=X2[6628]+1,b=U2[r+96>>2],o=P2(t-P2(b*U2[r+116>>2])),c=U2[r+16>>2],f=U2[r+20>>2],i=U2[r+24>>2],t=U2[r+108>>2],t=P2(P2(o-P2(P2(P2(P2(P2(c*U2[A+144>>2])+P2(f*U2[A+148>>2]))+P2(i*U2[A+152>>2]))+P2(P2(P2(U2[r>>2]*U2[A+160>>2])+P2(U2[r+4>>2]*U2[A+164>>2]))+P2(U2[r+8>>2]*U2[A+168>>2])))*t))-P2(t*P2(P2(P2(P2(U2[r+48>>2]*U2[e+144>>2])+P2(U2[r+52>>2]*U2[e+148>>2]))+P2(U2[r+56>>2]*U2[e+152>>2]))+P2(P2(P2(U2[r+32>>2]*U2[e+160>>2])+P2(U2[r+36>>2]*U2[e+164>>2]))+P2(U2[r+40>>2]*U2[e+168>>2]))))),a=P2(b+t),o=U2[r+120>>2],U2[r+96>>2]=(n=a<o)?o:a,b=n?P2(o-b):t,X2[A+240>>2]&&(U2[A+144>>2]=P2(U2[A+112>>2]*P2(b*P2(c*U2[A+128>>2])))+U2[A+144>>2],U2[A+148>>2]=P2(P2(b*P2(f*U2[A+132>>2]))*U2[A+116>>2])+U2[A+148>>2],U2[A+152>>2]=P2(P2(b*P2(i*U2[A+136>>2]))*U2[A+120>>2])+U2[A+152>>2],t=U2[r+72>>2],o=U2[r+68>>2],U2[A+160>>2]=P2(P2(b*U2[A+96>>2])*U2[r+64>>2])+U2[A+160>>2],c=U2[A+104>>2],U2[A+164>>2]=P2(o*P2(b*U2[A+100>>2]))+U2[A+164>>2],U2[A+168>>2]=P2(t*P2(b*c))+U2[A+168>>2]),X2[e+240>>2]&&(t=U2[r+56>>2],o=U2[r+52>>2],U2[e+144>>2]=P2(U2[e+112>>2]*P2(b*P2(U2[r+48>>2]*U2[e+128>>2])))+U2[e+144>>2],U2[e+148>>2]=P2(P2(b*P2(o*U2[e+132>>2]))*U2[e+116>>2])+U2[e+148>>2],U2[e+152>>2]=P2(P2(b*P2(t*U2[e+136>>2]))*U2[e+120>>2])+U2[e+152>>2],t=U2[r+88>>2],o=U2[r+84>>2],U2[e+160>>2]=P2(P2(b*U2[e+96>>2])*U2[r+80>>2])+U2[e+160>>2],c=U2[e+104>>2],U2[e+164>>2]=P2(o*P2(b*U2[e+100>>2]))+U2[e+164>>2],U2[e+168>>2]=P2(t*P2(b*c))+U2[e+168>>2])),P2(b);},function(A,e,r){A|=0,e|=0,r|=0,P2(0);var f,i,a=P2(0),n=P2(0),b=P2(0),t=(P2(0),P2(0),P2(0),U2[r+100>>2]),b=U2[r+16>>2],o=U2[r+20>>2],c=U2[r+24>>2],a=U2[r+108>>2];return a=P2(P2(P2(U2[r+112>>2]-P2(t*U2[r+116>>2]))-P2(P2(P2(P2(P2(b*U2[A+64>>2])+P2(o*U2[A+68>>2]))+P2(c*U2[A+72>>2]))+P2(P2(P2(U2[r>>2]*U2[A+80>>2])+P2(U2[r+4>>2]*U2[A+84>>2]))+P2(U2[r+8>>2]*U2[A+88>>2])))*a))-P2(a*P2(P2(P2(P2(U2[r+48>>2]*U2[e+64>>2])+P2(U2[r+52>>2]*U2[e+68>>2]))+P2(U2[r+56>>2]*U2[e+72>>2]))+P2(P2(P2(U2[r+32>>2]*U2[e+80>>2])+P2(U2[r+36>>2]*U2[e+84>>2]))+P2(U2[r+40>>2]*U2[e+88>>2]))))),f=P2(t+a),n=U2[r+120>>2],U2[r+100>>2]=(i=f<n)?n:f,t=i?P2(n-t):a,X2[A+240>>2]&&(U2[A+64>>2]=P2(U2[A+112>>2]*P2(t*P2(b*U2[A+128>>2])))+U2[A+64>>2],U2[A+68>>2]=P2(P2(t*P2(o*U2[A+132>>2]))*U2[A+116>>2])+U2[A+68>>2],U2[A+72>>2]=P2(P2(t*P2(c*U2[A+136>>2]))*U2[A+120>>2])+U2[A+72>>2],a=U2[r+72>>2],n=U2[r+68>>2],U2[A+80>>2]=P2(P2(t*U2[A+96>>2])*U2[r+64>>2])+U2[A+80>>2],b=U2[A+104>>2],U2[A+84>>2]=P2(n*P2(t*U2[A+100>>2]))+U2[A+84>>2],U2[A+88>>2]=P2(a*P2(t*b))+U2[A+88>>2]),X2[e+240>>2]&&(a=U2[r+56>>2],n=U2[r+52>>2],U2[e+64>>2]=P2(U2[e+112>>2]*P2(t*P2(U2[r+48>>2]*U2[e+128>>2])))+U2[e+64>>2],U2[e+68>>2]=P2(P2(t*P2(n*U2[e+132>>2]))*U2[e+116>>2])+U2[e+68>>2],U2[e+72>>2]=P2(P2(t*P2(a*U2[e+136>>2]))*U2[e+120>>2])+U2[e+72>>2],a=U2[r+88>>2],n=U2[r+84>>2],U2[e+80>>2]=P2(P2(t*U2[e+96>>2])*U2[r+80>>2])+U2[e+80>>2],b=U2[e+104>>2],U2[e+84>>2]=P2(n*P2(t*U2[e+100>>2]))+U2[e+84>>2],U2[e+88>>2]=P2(a*P2(t*b))+U2[e+88>>2]),P2(t);},function(A,e,r){A|=0,e|=0,r|=0;var f=P2(0),i=P2(0),a=P2(0),n=P2(0),n=(P2(0),P2(0),P2(0),U2[r+100>>2]),b=U2[r+16>>2],t=U2[r+20>>2],o=U2[r+24>>2],i=U2[r+108>>2],f=P2(P2(P2(U2[r+112>>2]-P2(n*U2[r+116>>2]))-P2(P2(P2(P2(P2(b*U2[A+64>>2])+P2(t*U2[A+68>>2]))+P2(o*U2[A+72>>2]))+P2(P2(P2(U2[r>>2]*U2[A+80>>2])+P2(U2[r+4>>2]*U2[A+84>>2]))+P2(U2[r+8>>2]*U2[A+88>>2])))*i))-P2(i*P2(P2(P2(P2(U2[r+48>>2]*U2[e+64>>2])+P2(U2[r+52>>2]*U2[e+68>>2]))+P2(U2[r+56>>2]*U2[e+72>>2]))+P2(P2(P2(U2[r+32>>2]*U2[e+80>>2])+P2(U2[r+36>>2]*U2[e+84>>2]))+P2(U2[r+40>>2]*U2[e+88>>2])))));return ((i=P2(n+f))<(a=U2[r+120>>2])||(a=U2[r+124>>2])<i)&&(f=P2(a-n),i=a),U2[r+100>>2]=i,X2[A+240>>2]&&(U2[A+64>>2]=P2(U2[A+112>>2]*P2(f*P2(b*U2[A+128>>2])))+U2[A+64>>2],U2[A+68>>2]=P2(P2(f*P2(t*U2[A+132>>2]))*U2[A+116>>2])+U2[A+68>>2],U2[A+72>>2]=P2(P2(f*P2(o*U2[A+136>>2]))*U2[A+120>>2])+U2[A+72>>2],i=U2[r+72>>2],a=U2[r+68>>2],U2[A+80>>2]=P2(P2(f*U2[A+96>>2])*U2[r+64>>2])+U2[A+80>>2],n=U2[A+104>>2],U2[A+84>>2]=P2(a*P2(f*U2[A+100>>2]))+U2[A+84>>2],U2[A+88>>2]=P2(i*P2(f*n))+U2[A+88>>2]),X2[e+240>>2]&&(i=U2[r+56>>2],a=U2[r+52>>2],U2[e+64>>2]=P2(U2[e+112>>2]*P2(f*P2(U2[r+48>>2]*U2[e+128>>2])))+U2[e+64>>2],U2[e+68>>2]=P2(P2(f*P2(a*U2[e+132>>2]))*U2[e+116>>2])+U2[e+68>>2],U2[e+72>>2]=P2(P2(f*P2(i*U2[e+136>>2]))*U2[e+120>>2])+U2[e+72>>2],i=U2[r+88>>2],a=U2[r+84>>2],U2[e+80>>2]=P2(P2(f*U2[e+96>>2])*U2[r+80>>2])+U2[e+80>>2],n=U2[e+104>>2],U2[e+84>>2]=P2(a*P2(f*U2[e+100>>2]))+U2[e+84>>2],U2[e+88>>2]=P2(i*P2(f*n))+U2[e+88>>2]),P2(f);},function(A){o4(27204);},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n=0;P2(0),K2=a=K2-96|0,f=X2[X2[A>>2]>>2],i=X2[X2[A+4>>2]>>2],0|N2[X2[X2[e>>2]+24>>2]](e,f,i)&&(X2[88+a>>2]=-1,X2[92+a>>2]=-1,X2[72+a>>2]=0,X2[80+a>>2]=f,X2[84+a>>2]=f+4,X2[76+a>>2]=X2[f+192>>2],X2[64+a>>2]=-1,X2[68+a>>2]=-1,X2[48+a>>2]=0,X2[56+a>>2]=i,X2[60+a>>2]=i+4,X2[52+a>>2]=X2[i+192>>2],((n=X2[A+8>>2])||(n=0|N2[X2[X2[e>>2]+8>>2]](e,72+a|0,48+a|0,0,1),X2[A+8>>2]=n))&&(X2[40+a>>2]=0,X2[12+a>>2]=0,X2[8+a>>2]=15188,A=X2[r+8>>2],X2[20+a>>2]=48+a,X2[16+a>>2]=72+a,1==(0|A)?N2[X2[X2[n>>2]+8>>2]](n,72+a|0,48+a|0,r,8+a|0):(e=P2(N2[X2[X2[n>>2]+12>>2]](n,f,i,r,8+a|0)))<U2[r+12>>2]&&(U2[r+12>>2]=e))),K2=96+a|0;},function(A){A|=0,X2[6630]=19804,(A=X2[6769])&&J2[27080]&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),S2[27080]=1,X2[6767]=0,X2[6768]=0,X2[6630]=10112,X2[6769]=0,(A=X2[6704])&&J2[26820]&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),S2[26820]=1,X2[6702]=0,X2[6703]=0,X2[6704]=0;},function(A){return X2[(A|=0)>>2]=9776,0|A;},A,function(A,e){var r=0;return X2[(A|=0)+12>>2]&X2[(e|=0)+4>>2]?(r=1,J2[A+88|0]||(A=X2[e>>2])&&(r=!(4&J2[A+204|0])),0|r):0;},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b,t,o,c=0,k=P2(0),u=P2(0),s=0,c=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),X2[e>>2]),s=X2[c+192>>2];return 31==X2[s+4>>2]&&(i=X2[e+4>>2])&&(s=X2[64+(X2[s+32>>2]+H2(X2[i>>2],80)|0)>>2]),X2[A+8>>2]=c,X2[A+84>>2]=X2[s+8>>2],U2[A+4>>2]=U2[e+24>>2],r?(r=X2[e+12>>2],X2[A+52>>2]=X2[e+8>>2],X2[A+56>>2]=r,s=X2[(c=e+16|0)+4>>2],X2[(r=A+60|0)>>2]=X2[c>>2],X2[r+4>>2]=s):(i=U2[c+8>>2],r=U2[c+12>>2],s=U2[c+20>>2],a=U2[c+24>>2],n=U2[c+28>>2],b=U2[c+36>>2],t=U2[c+40>>2],k=U2[e+12>>2],o=U2[c+44>>2],u=U2[e+16>>2],c=U2[c+4>>2],f=U2[e+8>>2],X2[A- -64>>2]=0,U2[A+60>>2]=P2(P2(f*b)+P2(k*t))+P2(u*o),U2[A+56>>2]=P2(P2(f*s)+P2(k*a))+P2(u*n),U2[A+52>>2]=P2(P2(c*f)+P2(i*k))+P2(r*u)),k=U2[e+24>>2],u=P2(P2(1)-k),U2[A+68>>2]=P2(u*U2[A+20>>2])+P2(k*U2[A+36>>2]),U2[A+72>>2]=P2(u*U2[A+24>>2])+P2(k*U2[A+40>>2]),U2[A+76>>2]=P2(u*U2[A+28>>2])+P2(k*U2[A+44>>2]),P2(U2[e+24>>2]);},u0,function(A,e){return (A=X2[(A|=0)+12>>2])&X2[(e|=0)+4>>2]?0!=(A&X2[e+8>>2])|0:0;},l0,function(A){n(l0(A|=0));},function(A,e){var r=0;return X2[(A|=0)+12>>2]&X2[(e|=0)+4>>2]?(r=1,J2[A+152|0]||(A=X2[e>>2])&&(r=!(4&J2[A+204|0])),0|r):0;},function(A,e,r){A|=0,r|=0;var f=0,i=0,a=0,n=0,b=0,t=0,o=0,i=X2[X2[(e|=0)>>2]+192>>2];if(31==X2[i+4>>2]&&(a=X2[e+4>>2])){if(o=X2[X2[64+(X2[i+32>>2]+H2(X2[a>>2],80)|0)>>2]+8>>2],(0|(f=X2[A+136>>2]))==X2[A+140>>2]&&!((0|(n=f?f<<1:1))<=(0|f))){n&&(X2[6258]=X2[6258]+1,(i=L2(19+(n<<2)|0))&&(X2[(b=i+19&-16)-4>>2]=i)),t=X2[A+144>>2];A:{if(1<=(0|f)){for(i=b,a=t;;)if(X2[i>>2]=X2[a>>2],i=i+4|0,a=a+4|0,!(f=f-1|0))break;}else if(!t)break A;J2[A+148|0]&&(X2[6259]=X2[6259]+1,q2(X2[t-4>>2])),f=X2[A+136>>2];}X2[A+144>>2]=b,X2[A+140>>2]=n,S2[A+148|0]=1;}}else if(o=X2[i+8>>2],(0|(f=X2[A+136>>2]))==X2[A+140>>2]&&!((0|(n=f?f<<1:1))<=(0|f))){n&&(X2[6258]=X2[6258]+1,(i=L2(19+(n<<2)|0))&&(X2[(b=i+19&-16)-4>>2]=i)),t=X2[A+144>>2];A:{if(1<=(0|f)){for(i=b,a=t;;)if(X2[i>>2]=X2[a>>2],i=i+4|0,a=a+4|0,!(f=f-1|0))break;}else if(!t)break A;J2[A+148|0]&&(X2[6259]=X2[6259]+1,q2(X2[t-4>>2])),f=X2[A+136>>2];}X2[A+144>>2]=b,X2[A+140>>2]=n,S2[A+148|0]=1;}return X2[X2[A+144>>2]+(f<<2)>>2]=o,X2[A+136>>2]=X2[A+136>>2]+1,P2(B0(A,e,r));},function(A){var e;return X2[(A|=0)>>2]=9980,(e=X2[A+124>>2])&&J2[A+128|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+124>>2]=0,S2[A+128|0]=1,X2[(e=A+116|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+104>>2])&&J2[A+108|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+104>>2]=0,S2[A+108|0]=1,X2[(e=A+96|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+84>>2])&&J2[A+88|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+84>>2]=0,S2[A+88|0]=1,X2[(e=A+76|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+32>>2]=0,X2[A>>2]=9776,S2[A+36|0]=1,X2[(e=A+24|0)>>2]=0,(X2[4+e>>2]=0)|A;},function(A){var e;X2[(A|=0)>>2]=9980,(e=X2[A+124>>2])&&J2[A+128|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+124>>2]=0,S2[A+128|0]=1,X2[(e=A+116|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+104>>2])&&J2[A+108|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+104>>2]=0,S2[A+108|0]=1,X2[(e=A+96|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+84>>2])&&J2[A+88|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+84>>2]=0,S2[A+88|0]=1,X2[(e=A+76|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),n(A);},B0,function(A){var e;return X2[(A|=0)>>2]=10112,(e=X2[A+296>>2])&&J2[A+300|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+296>>2]=0,S2[A+300|0]=1,X2[(e=A+288|0)>>2]=0,(X2[4+e>>2]=0)|A;},function(A){var e;X2[(A|=0)>>2]=10112,(e=X2[A+296>>2])&&J2[A+300|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+296>>2]=0,S2[A+300|0]=1,X2[(e=A+288|0)>>2]=0,X2[4+e>>2]=0,X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A,e){X2[(A|=0)+200>>2]=e|=0,X2[A+192>>2]=e,X2[A+304>>2]=X2[A+304>>2]+1;},function(A,e){e|=0;var r,f=0,f=r=X2[(A|=0)+288>>2];A:if(!((0|r)<1)){for(A=X2[A+296>>2],f=0;;){if(X2[A>>2]==(0|e))break A;if(A=A+4|0,(0|r)==(0|(f=f+1|0)))break;}f=r;}return (0|r)<=(0|f)|0;},function(A){return 264;},_0,function(A,e){var r,f=0,i=0,i=e|=0,a=0|N2[X2[X2[(A|=0)>>2]+16>>2]](A),n=X2[X2[e>>2]+16>>2],f=0|N2[n](0|i,0|a,1);r=e,i=0|N2[X2[X2[A>>2]+20>>2]](A,X2[8+(a=f)>>2],e),f=A,n=X2[X2[e>>2]+20>>2],N2[n](0|r,0|a,0|i,1245859651,0|f);},C0,function(A){A=C0(A|=0),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A){var e;return X2[(A|=0)>>2]=10364,(e=X2[A+60>>2])&&(N2[X2[X2[e>>2]>>2]](e),(e=X2[A+60>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),0|A;},u0,x0,function(A,e,r){var f,i,a,n,b,t,o,c;A|=0,e|=0,r|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),X2[(n=44+(K2=c=K2-96|0)|0)>>2]=0,X2[4+n>>2]=0,X2[(n=56+c|0)>>2]=0,X2[4+n>>2]=0,X2[52+c>>2]=1065353216,X2[(n=c+64|0)>>2]=0,X2[4+n>>2]=0,X2[(n=76+c|0)>>2]=0,X2[4+n>>2]=0,X2[72+c>>2]=1065353216,X2[(n=84+c|0)>>2]=0,X2[4+n>>2]=0,X2[92+c>>2]=0,X2[36+c>>2]=0,X2[40+c>>2]=0,X2[32+c>>2]=1065353216,N2[X2[X2[A>>2]+8>>2]](A,32+c|0,16+c|0,c),n=U2[c>>2],A=U2[16+c>>2],f=P2(n-A),a=P2(f*f),f=U2[4+c>>2],b=U2[20+c>>2],i=P2(f-b),o=P2(a+P2(i*i)),i=U2[8+c>>2],a=U2[24+c>>2],t=P2(i-a),U2[r>>2]=P2(O2(P2(o+P2(t*t))))*P2(.5),X2[e+12>>2]=0,U2[e+8>>2]=P2(i+a)*P2(.5),U2[e+4>>2]=P2(f+b)*P2(.5),U2[e>>2]=P2(n+A)*P2(.5),K2=96+c|0;},function(A){var e,r;return A|=0,P2(0),P2(0),K2=r=K2-32|0,N2[X2[X2[A>>2]+12>>2]](A,16+r|0,12+r|0),K2=32+r|0,A=U2[16+r>>2],e=P2(A*A),A=U2[20+r>>2],e=P2(e+P2(A*A)),A=U2[24+r>>2],P2(P2(U2[12+r>>2]+P2(O2(P2(e+P2(A*A))))));},function(A,e){return A|=0,e=P2(e),P2(P2(P2(N2[X2[X2[A>>2]+16>>2]](A))*e));},function(A,e){A|=0,e|=0,P2(0),P2(0),P2(0);var r=U2[e>>2],f=U2[e+4>>2],e=U2[e+8>>2];X2[A+32>>2]=0,U2[A+28>>2]=j2(e),U2[A+24>>2]=j2(f),U2[A+20>>2]=j2(r);},function(A){return (A|=0)+20|0;},function(A,e,r){var f,i,a;A|=0,e=P2(e),r|=0,P2(0),P2(0),P2(0),K2=a=K2-96|0,f=P2(N2[X2[X2[A>>2]+48>>2]](A)),X2[(i=44+a|0)>>2]=0,X2[4+i>>2]=0,X2[(i=56+a|0)>>2]=0,X2[4+i>>2]=0,X2[52+a>>2]=1065353216,X2[(i=a+64|0)>>2]=0,X2[4+i>>2]=0,X2[(i=76+a|0)>>2]=0,X2[4+i>>2]=0,X2[72+a>>2]=1065353216,X2[(i=84+a|0)>>2]=0,X2[4+i>>2]=0,X2[92+a>>2]=0,X2[36+a>>2]=0,X2[40+a>>2]=0,X2[32+a>>2]=1065353216,N2[X2[X2[A>>2]+8>>2]](A,32+a|0,16+a|0,a),X2[r+12>>2]=0,e=P2(e*P2(.0833333283662796)),i=P2(f+P2(P2(U2[a>>2]-U2[16+a>>2])*P2(.5))),i=P2(i+i),i=P2(i*i),A=P2(f+P2(P2(U2[4+a>>2]-U2[20+a>>2])*P2(.5))),A=P2(A+A),A=P2(A*A),U2[r+8>>2]=e*P2(i+A),f=P2(f+P2(P2(U2[8+a>>2]-U2[24+a>>2])*P2(.5))),f=P2(f+f),f=P2(f*f),U2[r+4>>2]=e*P2(i+f),U2[r>>2]=e*P2(A+f),K2=96+a|0;},function(A,e){X2[(A|=0)+8>>2]=1065353216,X2[A+12>>2]=0,X2[A>>2]=1065353216,X2[A+4>>2]=1065353216;},y0,function(A){return P2(U2[(A|=0)+52>>2]);},P0,function(A,e,r){e|=0;var f=0|N2[X2[X2[(r|=0)>>2]+40>>2]](r,A|=0),i=0|N2[X2[X2[r>>2]+28>>2]](r,f);return (X2[e>>2]=i)&&N2[X2[X2[r>>2]+48>>2]](r,f),r=X2[A+4>>2],X2[e+8>>2]=0,U2[e+28>>2]=U2[A+36>>2],U2[e+32>>2]=U2[A+40>>2],U2[e+36>>2]=U2[A+44>>2],U2[e+40>>2]=U2[A+48>>2],U2[e+12>>2]=U2[A+20>>2],U2[e+16>>2]=U2[A+24>>2],U2[e+20>>2]=U2[A+28>>2],U2[e+24>>2]=U2[A+32>>2],X2[e+4>>2]=r,U2[e+44>>2]=U2[A+52>>2],X2[e+48>>2]=0,10896;},function(A,e){var r,f=0,i=0,i=e|=0,a=0|N2[X2[X2[(A|=0)>>2]+52>>2]](A),n=X2[X2[e>>2]+16>>2],f=0|N2[n](0|i,0|a,1);r=e,i=0|N2[X2[X2[A>>2]+56>>2]](A,X2[8+(a=f)>>2],e),f=A,n=X2[X2[e>>2]+20>>2],N2[n](0|r,0|a,0|i,1346455635,0|f);},G0,function(A,e,r){A|=0,e|=0,r|=0;var f,i=0,a=P2(0),n=P2(0),b=0,t=P2(0),o=P2(0),c=0,k=0,u=0,s=P2(0),l=P2(0),B=P2(0);if(K2=f=K2-2048|0,X2[A>>2]=0,X2[A+4>>2]=0,X2[(i=A+8|0)>>2]=0,X2[i+4>>2]=0,t=U2[r>>2],a=U2[r+4>>2],o=U2[r+8>>2],n=P2(P2(P2(t*t)+P2(a*a))+P2(o*o)),s=P2(1),n<P2(9999999747378752e-20)||(n=P2(P2(1)/P2(O2(n))),l=P2(o*n),B=P2(a*n),s=P2(t*n)),n=s,1<=(0|N2[X2[X2[e>>2]+96>>2]](e)))for(o=P2(-0xde0b6b000000000);;){if(c=128,127<((0|N2[X2[X2[e>>2]+96>>2]](e))-k|0)||1<=(0|(c=(0|N2[X2[X2[e>>2]+96>>2]](e))-k|0))){for(r=0,i=f;;)if(N2[X2[X2[e>>2]+108>>2]](e,r,i),i=i+16|0,(0|c)==(0|(r=r+1|0)))break;for(i=0,u=-1,a=P2(-34028234663852886e22),r=f;;)if(a=(b=a<(t=P2(P2(P2(n*U2[r>>2])+P2(B*U2[r+4>>2]))+P2(l*U2[r+8>>2]))))?t:a,u=b?i:u,r=r+16|0,(0|c)==(0|(i=i+1|0)))break;}else a=P2(-34028234663852886e22),u=-1;if(o<a&&(r=X2[(b=(u<<4)+f|0)+12>>2],X2[(i=A+8|0)>>2]=X2[b+8>>2],X2[i+4>>2]=r,r=X2[b+4>>2],X2[A>>2]=X2[b>>2],X2[A+4>>2]=r,o=a),k=k+128|0,!((0|N2[X2[X2[e>>2]+96>>2]](e))>(0|k)))break;}K2=2048+f|0;},function(A,e,r,f,i,a,n){var b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h,F,Y,m,N,R,D,T,W,I;A|=0,e|=0,r|=0,f|=0,i|=0,a|=0,n|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),X2[44+(K2=I=K2-48|0)>>2]=0,b=U2[r>>2],t=U2[r+4>>2],o=U2[r+8>>2],U2[32+I>>2]=P2(P2(U2[e>>2]*b)+P2(U2[e+16>>2]*t))+P2(U2[e+32>>2]*o),m=e+24|0,h=e+40|0,U2[40+I>>2]=P2(P2(b*U2[e+8>>2])+P2(t*U2[m>>2]))+P2(o*U2[h>>2]),N=e+20|0,F=e+36|0,U2[36+I>>2]=P2(P2(b*U2[e+4>>2])+P2(t*U2[N>>2]))+P2(o*U2[F>>2]),N2[X2[X2[A>>2]+64>>2]](16+I|0,A,32+I|0),B=U2[(C=e+56|0)>>2],v=U2[h>>2],d=U2[F>>2],s=U2[(Y=e+52|0)>>2],Z=U2[m>>2],_=U2[N>>2],g=U2[e+32>>2],l=U2[e+48>>2],E=U2[e+8>>2],Q=U2[e>>2],w=U2[e+4>>2],G=U2[e+16>>2],b=U2[24+I>>2],t=U2[16+I>>2],o=U2[20+I>>2],X2[12+I>>2]=0,U2[8+I>>2]=-U2[40+I>>2],U2[4+I>>2]=-U2[36+I>>2],U2[I>>2]=-U2[32+I>>2],N2[X2[X2[A>>2]+64>>2]](16+I|0,A,I),A=U2[C>>2],C=U2[h>>2],h=U2[F>>2],F=U2[Y>>2],Y=U2[m>>2],m=U2[N>>2],N=U2[e+32>>2],R=U2[e+48>>2],D=U2[e+8>>2],T=U2[e>>2],W=U2[e+4>>2],e=U2[e+16>>2],c=U2[24+I>>2],k=U2[16+I>>2],u=U2[20+I>>2],l=P2(l+P2(P2(P2(t*Q)+P2(o*w))+P2(b*E))),s=P2(s+P2(P2(P2(t*G)+P2(o*_))+P2(b*Z))),b=P2(B+P2(P2(P2(t*g)+P2(o*d))+P2(b*v))),U2[f>>2]=P2(P2(l*U2[r>>2])+P2(s*U2[r+4>>2]))+P2(b*U2[r+8>>2]),t=P2(R+P2(P2(P2(k*T)+P2(u*W))+P2(c*D))),o=P2(F+P2(P2(P2(k*e)+P2(u*m))+P2(c*Y))),c=P2(A+P2(P2(P2(k*N)+P2(u*h))+P2(c*C))),U2[i>>2]=P2(P2(t*U2[r>>2])+P2(o*U2[r+4>>2]))+P2(c*U2[r+8>>2]),X2[n+12>>2]=0,U2[n+8>>2]=c,U2[n+4>>2]=o,U2[n>>2]=t,X2[a+12>>2]=0,U2[a+8>>2]=b,U2[a+4>>2]=s,U2[a>>2]=l,k=U2[f>>2],(u=U2[i>>2])<k&&(U2[f>>2]=u,U2[i>>2]=k,X2[n+12>>2]=0,U2[n+8>>2]=b,U2[n+4>>2]=s,U2[n>>2]=l,X2[a+12>>2]=0,U2[a+8>>2]=c,U2[a+4>>2]=o,U2[a>>2]=t),K2=48+I|0;},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b,t,o,c,k,u,s,l,B=0,v=0,d=P2(0),Z=0,_=0,g=0,E=0;if(P2(0),P2(0),P2(0),P2(0),K2=l=K2-2048|0,1<=(0|f)){for(v=r+12|0,B=f;;)if(X2[v>>2]=-581039253,v=v+16|0,!(B=B-1|0))break;for(;;){if(1<=(0|N2[X2[X2[A>>2]+96>>2]](A)))for(n=12+(i=(B=E<<4)+r|0)|0,o=8+(a=e+B|0)|0,c=4+a|0,_=0;;){if(g=128,127<((0|N2[X2[X2[A>>2]+96>>2]](A))-_|0)||1<=(0|(g=(0|N2[X2[X2[A>>2]+96>>2]](A))-_|0))){for(v=0,B=l;;)if(N2[X2[X2[A>>2]+108>>2]](A,v,B),B=B+16|0,(0|g)==(0|(v=v+1|0)))break;for(k=U2[o>>2],u=U2[c>>2],s=U2[a>>2],B=0,Z=-1,d=P2(-34028234663852886e22),v=l;;)if(d=(t=d<(b=P2(P2(P2(s*U2[v>>2])+P2(u*U2[v+4>>2]))+P2(k*U2[v+8>>2]))))?b:d,Z=t?B:Z,v=v+16|0,(0|g)==(0|(B=B+1|0)))break;}else d=P2(-34028234663852886e22),Z=-1;if(U2[n>>2]<d&&(Z=X2[(B=(Z<<4)+l|0)+12>>2],X2[(v=8+i|0)>>2]=X2[B+8>>2],X2[v+4>>2]=Z,v=X2[B+4>>2],X2[i>>2]=X2[B>>2],X2[4+i>>2]=v,U2[n>>2]=d),_=_+128|0,!((0|N2[X2[X2[A>>2]+96>>2]](A))>(0|_)))break;}if((0|(E=E+1|0))==(0|f))break;}}K2=2048+l|0;},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0);var i,a,n,b,t,o,c,k=0;for(P2(0),K2=c=K2-80|0,o=P2(N2[X2[X2[A>>2]+48>>2]](A)),t=72+c|0;;)if(X2[t>>2]=0,X2[4+t>>2]=0,X2[64+c>>2]=0,X2[68+c>>2]=0,X2[(b=(c+64|0)+k|0)>>2]=1065353216,X2[44+c>>2]=0,i=U2[64+c>>2],a=U2[68+c>>2],n=U2[t>>2],U2[40+c>>2]=P2(P2(i*U2[e+8>>2])+P2(a*U2[e+24>>2]))+P2(n*U2[e+40>>2]),U2[36+c>>2]=P2(P2(i*U2[e+4>>2])+P2(a*U2[e+20>>2]))+P2(n*U2[e+36>>2]),U2[32+c>>2]=P2(P2(i*U2[e>>2])+P2(a*U2[e+16>>2]))+P2(n*U2[e+32>>2]),N2[X2[X2[A>>2]+64>>2]](48+c|0,A,32+c|0),X2[44+c>>2]=0,i=U2[48+c>>2],a=U2[52+c>>2],n=U2[56+c>>2],U2[40+c>>2]=P2(P2(P2(i*U2[e+32>>2])+P2(a*U2[e+36>>2]))+P2(n*U2[e+40>>2]))+U2[e+56>>2],U2[36+c>>2]=P2(P2(P2(i*U2[e+16>>2])+P2(a*U2[e+20>>2]))+P2(n*U2[e+24>>2]))+U2[e+52>>2],U2[32+c>>2]=P2(P2(P2(i*U2[e>>2])+P2(a*U2[e+4>>2]))+P2(n*U2[e+8>>2]))+U2[e+48>>2],X2[b>>2]=-1082130432,U2[f+k>>2]=o+U2[(b=(32+c|0)+k|0)>>2],X2[12+c>>2]=0,i=U2[64+c>>2],a=U2[68+c>>2],n=U2[t>>2],U2[8+c>>2]=P2(P2(i*U2[e+8>>2])+P2(a*U2[e+24>>2]))+P2(n*U2[e+40>>2]),U2[4+c>>2]=P2(P2(i*U2[e+4>>2])+P2(a*U2[e+20>>2]))+P2(n*U2[e+36>>2]),U2[c>>2]=P2(P2(i*U2[e>>2])+P2(a*U2[e+16>>2]))+P2(n*U2[e+32>>2]),N2[X2[X2[A>>2]+64>>2]](16+c|0,A,c),X2[44+c>>2]=0,i=U2[16+c>>2],a=U2[20+c>>2],n=U2[24+c>>2],U2[40+c>>2]=P2(P2(P2(i*U2[e+32>>2])+P2(a*U2[e+36>>2]))+P2(n*U2[e+40>>2]))+U2[e+56>>2],U2[36+c>>2]=P2(P2(P2(i*U2[e+16>>2])+P2(a*U2[e+20>>2]))+P2(n*U2[e+24>>2]))+U2[e+52>>2],U2[32+c>>2]=P2(P2(P2(i*U2[e>>2])+P2(a*U2[e+4>>2]))+P2(n*U2[e+8>>2]))+U2[e+48>>2],U2[r+k>>2]=U2[b>>2]-o,12==(0|(k=k+4|0)))break;K2=80+c|0;},V0,f,function(A,e){A|=0,e|=0;var x,y,V,p,M,r=0,f=0,i=0,a=0,n=0,b=0,t=P2(0),o=0,c=P2(0),k=0,u=P2(0),s=P2(0),l=0,B=0,v=0,d=P2(0),Z=0,_=0,g=0,E=P2(0),Q=P2(0),w=P2(0),G=P2(0),C=0,h=0,F=0,Y=0,m=0,N=0,R=P2(0),D=P2(0),T=0,W=P2(0),S=P2(0),X=0,J=0,I=(P2(0),P2(0),P2(0),K2-208|0);if(K2=I,(f=X2[A+60>>2])&&(N2[X2[X2[f>>2]>>2]](f),(f=X2[A+60>>2])&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2]))),X2[6258]=X2[6258]+1,(f=L2(151))&&(X2[(r=f+19&-16)-4>>2]=f),X2[r>>2]=10316,S2[r+20|0]=1,X2[r+16>>2]=0,S2[r+40|0]=1,X2[r+8>>2]=0,X2[r+12>>2]=0,X2[r+36>>2]=0,S2[r+60|0]=1,X2[r+28>>2]=0,X2[r+32>>2]=0,X2[r+56>>2]=0,X2[r+48>>2]=0,X2[r+52>>2]=0,X2[A+60>>2]=r,!(((r=0)|N2[X2[X2[A>>2]+96>>2]](A))<1)){for(;;){if((0|a)==(0|g)&&!((0|(f=a?a<<1:1))<=(0|a))){n=0,f&&(X2[6258]=X2[6258]+1,(r=L2(19+(f<<4)|0))&&(X2[(n=r+19&-16)-4>>2]=r));A:{if(1<=(0|a)){for(r=n,i=Y;;)if(o=X2[i+4>>2],X2[r>>2]=X2[i>>2],X2[r+4>>2]=o,C=X2[(Z=i+8|0)+4>>2],X2[(o=r+8|0)>>2]=X2[Z>>2],X2[o+4>>2]=C,r=r+16|0,i=i+16|0,!(a=a-1|0))break;}else if(!Y)break A;X2[6259]=X2[6259]+1,q2(X2[Y-4>>2]);}a=f,Y=n;}if(n=X2[108+I>>2],X2[(r=(g<<4)+Y|0)>>2]=X2[104+I>>2],X2[r+4>>2]=n,i=X2[(n=112+I|0)+4>>2],X2[(f=r+8|0)>>2]=X2[n>>2],X2[f+4>>2]=i,N2[X2[X2[A>>2]+108>>2]](A,g,r),g=g+1|0,!((0|N2[X2[X2[A>>2]+96>>2]](A))>(0|g)))break;}r=Y;}S2[140+I|0]=1,X2[136+I>>2]=0,S2[160+I|0]=1,X2[(f=128+I|0)>>2]=0,X2[f+4>>2]=0,X2[156+I>>2]=0,X2[(f=148+I|0)>>2]=0,X2[f+4>>2]=0,X2[116+I>>2]=0,S2[120+I|0]=1,X2[108+I>>2]=0,X2[112+I>>2]=0;A:{e:{if(!e){I0(104+I|0,r,g);break A;}if(!((0|g)<1)){for(h=g-1|0,n=Y+24|0;;){if((k=(e=k)+1|0)>>>0<g>>>0)for(C=(b=(e<<4)+Y|0)+8|0,m=b+4|0,o=k;;){if((0|(o=(e=o)+1|0))<(0|g))for(X=(_=(e<<4)+Y|0)+8|0,N=_+4|0,Z=o;;){for(t=U2[b>>2],c=P2(U2[_>>2]-t),u=U2[m>>2],s=P2(U2[(e=(Z<<4)+Y|0)+4>>2]-u),u=P2(U2[N>>2]-u),t=P2(U2[e>>2]-t),E=P2(P2(c*s)-P2(u*t)),w=U2[C>>2],G=P2(U2[X>>2]-w),d=P2(G*t),t=P2(U2[e+8>>2]-w),w=P2(d-P2(c*t)),G=P2(P2(u*t)-P2(G*s)),c=P2(1),e=1;;){t=P2(E*c),u=P2(G*c),c=P2(w*c);r:if((s=P2(P2(t*t)+P2(P2(u*u)+P2(c*c))))>P2(9999999747378752e-20)){s=P2(P2(1)/P2(O2(s))),t=P2(t*s),c=P2(c*s),u=P2(u*s),a=(0|l)<1;f:if(!a){if(P2(P2(P2(u*U2[B>>2])+P2(c*U2[B+4>>2]))+P2(t*U2[B+8>>2]))>P2(.9990000128746033))break r;for(f=l-1|0,r=B+24|0,i=0;;){if((0|f)==(0|i))break f;if(F=r-4|0,T=r-8|0,s=U2[r>>2],r=r+16|0,i=i+1|0,P2(P2(P2(u*U2[T>>2])+P2(c*U2[F>>2]))+P2(t*s))>P2(.9990000128746033))break;}if((0|i)<(0|l))break r;}if(s=P2(P2(P2(u*U2[b>>2])+P2(c*U2[m>>2]))+P2(t*U2[C>>2])),!(P2(P2(P2(P2(P2(u*U2[Y>>2])+P2(c*U2[Y+4>>2]))+P2(t*U2[Y+8>>2]))-s)+P2(-.009999999776482582))>P2(0))){d=P2(-s),i=0,r=n;f:{for(;;){if((0|i)==(0|h))break f;if(f=r-4|0,F=r-8|0,Q=U2[r>>2],r=r+16|0,i=i+1|0,P2(P2(P2(P2(P2(u*U2[F>>2])+P2(c*U2[f>>2]))+P2(t*Q))-s)+P2(-.009999999776482582))>P2(0))break;}if((0|i)<(0|g))break r;}if((0|l)==(0|v))if((0|(v=l?l<<1:1))<=(0|l))v=l;else {f=0,v&&(X2[6258]=X2[6258]+1,(r=L2(19+(v<<4)|0))&&(X2[(f=r+19&-16)-4>>2]=r));f:{if(a){if(!B)break f;}else for(r=f,i=B,a=l;;)if(F=X2[i+4>>2],X2[r>>2]=X2[i>>2],X2[r+4>>2]=F,J=X2[(T=i+8|0)+4>>2],X2[(F=r+8|0)>>2]=X2[T>>2],X2[F+4>>2]=J,r=r+16|0,i=i+16|0,!(a=a-1|0))break;X2[6259]=X2[6259]+1,q2(X2[B-4>>2]);}B=f;}U2[(r=(l<<4)+B|0)+12>>2]=d,U2[r+8>>2]=t,U2[r+4>>2]=c,U2[r>>2]=u,l=l+1|0;}}if(r=1&e,c=P2(-1),e=0,!r)break;}if(!((0|(Z=Z+1|0))<(0|g)))break;}if((0|o)==(0|g))break;}if((0|k)==(0|g))break;}if((0|l)<1)b=0;else {for(n=e=b=0;;){if(X2[(v=40+I|0)>>2]=X2[(r=(n<<4)+B|0)+8>>2],f=X2[r+4>>2],X2[32+I>>2]=X2[r>>2],X2[36+I>>2]=f,t=P2(U2[r+12>>2]-P2(N2[X2[X2[A>>2]+48>>2]](A))),(0|n)!=(0|(f=e)))f=n;else if((0|(e=f?f<<1:1))<=(0|f))e=f;else {o=0,e&&(X2[6258]=X2[6258]+1,(r=L2(19+(e<<4)|0))&&(X2[(o=r+19&-16)-4>>2]=r));r:{if(1<=(0|f)){for(r=o,i=b,a=f;;)if(k=X2[i+4>>2],X2[r>>2]=X2[i>>2],X2[r+4>>2]=k,g=X2[(Z=i+8|0)+4>>2],X2[(k=r+8|0)>>2]=X2[Z>>2],X2[k+4>>2]=g,r=r+16|0,i=i+16|0,!(a=a-1|0))break;}else if(!b)break r;X2[6259]=X2[6259]+1,q2(X2[b-4>>2]);}b=o;}if(r=(f<<4)+b|0,f=X2[36+I>>2],X2[r>>2]=X2[32+I>>2],X2[r+4>>2]=f,f=X2[v>>2],U2[r+12>>2]=t,X2[r+8>>2]=f,(0|l)==(0|(n=n+1|0)))break;}if(!((0|l)<1)){for(k=Z=r=e=0;;){if((k=(f=k)+1|0)>>>0<l>>>0)for(_=(v=(f<<4)+b|0)+12|0,h=v+4|0,X=v+8|0,g=k;;){if((0|(g=(f=g)+1|0))<(0|l))for(N=(m=(f<<4)+b|0)+12|0,F=m+8|0,T=m+4|0,i=g;;){if(f=r,u=U2[(r=(i<<4)+b|0)+4>>2],s=U2[m>>2],E=U2[T>>2],w=U2[r>>2],G=P2(P2(u*s)-P2(E*w)),d=U2[r+8>>2],Q=U2[F>>2],D=P2(P2(E*d)-P2(Q*u)),W=P2(P2(Q*w)-P2(d*s)),P2(P2(G*G)+P2(P2(D*D)+P2(W*W)))>P2(9999999747378752e-20)){if(t=U2[h>>2],c=U2[v>>2],S=P2(P2(w*t)-P2(u*c)),R=u,u=U2[X>>2],R=P2(P2(R*u)-P2(d*t)),w=P2(P2(d*c)-P2(w*u)),P2(P2(S*S)+P2(P2(R*R)+P2(w*w)))>P2(9999999747378752e-20)){if(d=P2(P2(E*c)-P2(s*t)),E=P2(P2(Q*t)-P2(E*u)),s=P2(P2(s*u)-P2(Q*c)),P2(P2(d*d)+P2(P2(E*E)+P2(s*s)))>P2(9999999747378752e-20)){if(t=P2(P2(u*G)+P2(P2(t*W)+P2(D*c))),P2(j2(t))>P2(9.999999974752427e-7)){for(t=P2(P2(-1)/t),c=U2[r+12>>2],u=U2[_>>2],Q=P2(G*u),G=U2[N>>2],d=P2(t*P2(P2(d*c)+P2(Q+P2(S*G)))),s=P2(t*P2(P2(s*c)+P2(P2(W*u)+P2(w*G)))),t=P2(t*P2(P2(E*c)+P2(P2(D*u)+P2(R*G)))),a=0,n=1,r=b;;)if(P2(P2(U2[r+12>>2]+P2(P2(P2(t*U2[r>>2])+P2(s*U2[r+4>>2]))+P2(d*U2[r+8>>2])))+P2(-.009999999776482582))>P2(0)||(r=r+16|0,n=(a=a+1|0)>>>0<l>>>0,(0|a)==(0|l)))break;if(1&n)r=f;else {if((0|f)!=(0|Z))r=f,f=Z;else if((0|(r=f?f<<1:1))<=(0|f))r=f;else {o=0,r&&(X2[6258]=X2[6258]+1,(n=L2(19+(r<<4)|0))&&(X2[(o=n+19&-16)-4>>2]=n));r:{if(1<=(0|f)){for(a=o,n=e,C=f;;)if(J=X2[n+4>>2],X2[a>>2]=X2[n>>2],X2[a+4>>2]=J,y=X2[4+(x=n+8|0)>>2],X2[(J=a+8|0)>>2]=X2[x>>2],X2[J+4>>2]=y,a=a+16|0,n=n+16|0,!(C=C-1|0))break;}else if(!e)break r;X2[6259]=X2[6259]+1,q2(X2[e-4>>2]);}e=o;}X2[(f=(f<<4)+e|0)+12>>2]=0,U2[f+8>>2]=d,U2[f+4>>2]=s,U2[f>>2]=t,Z=Z+1|0;}}else r=f;}else r=f;}else r=f;}else r=f;if(!((0|(i=i+1|0))<(0|l)))break;}if((0|l)==(0|g))break;}if((0|k)==(0|l))break;}if(I0(104+I|0,e,Z),!e)break e;X2[6259]=X2[6259]+1,q2(X2[e-4>>2]);break e;}}}I0(104+I|0,0,0);}b&&(X2[6259]=X2[6259]+1,q2(X2[b-4>>2])),B&&(X2[6259]=X2[6259]+1,q2(X2[B-4>>2]));}if(1<=((g=0)|(n=X2[148+I>>2])))for(X2[6258]=X2[6258]+1,(e=L2(19+(n<<4)|0))&&(X2[(g=e+19&-16)-4>>2]=e),r=g,i=n;;)if(e=X2[36+I>>2],X2[r>>2]=X2[32+I>>2],X2[r+4>>2]=e,a=X2[(f=40+I|0)+4>>2],X2[(e=r+8|0)>>2]=X2[f>>2],X2[e+4>>2]=a,r=r+16|0,!(i=i-1|0))break;if(X2[92+I>>2]=0,S2[96+I|0]=1,X2[84+I>>2]=0,X2[88+I>>2]=0,S2[0|(e=47+I|0)]=0,S2[e+1|0]=0,S2[e+2|0]=0,S2[e+3|0]=0,X2[(e=40+I|0)>>2]=0,X2[e+4>>2]=0,X2[32+I>>2]=0,-1<((X2[36+I>>2]=0)|n)){if(n)for(p0(80+I|0,n),r=X2[92+I>>2]+20|0,e=32+I|3,a=n;;)if(X2[(f=o=r-16|0)>>2]=0,X2[f+4>>2]=0,S2[r-4|0]=1,f=J2[e+4|0]|J2[e+5|0]<<8|(J2[e+6|0]<<16|J2[e+7|0]<<24),i=J2[0|e]|J2[e+1|0]<<8|(J2[e+2|0]<<16|J2[e+3|0]<<24),S2[0|r]=i,S2[r+1|0]=i>>>8,S2[r+2|0]=i>>>16,S2[r+3|0]=i>>>24,S2[r+4|0]=f,S2[r+5|0]=f>>>8,S2[r+6|0]=f>>>16,S2[r+7|0]=f>>>24,X2[o+8>>2]=0,o=J2[(i=e+8|0)+4|0]|J2[i+5|0]<<8|(J2[i+6|0]<<16|J2[i+7|0]<<24),i=J2[0|i]|J2[i+1|0]<<8|(J2[i+2|0]<<16|J2[i+3|0]<<24),S2[0|(f=r+8|0)]=i,S2[f+1|0]=i>>>8,S2[f+2|0]=i>>>16,S2[f+3|0]=i>>>24,S2[f+4|0]=o,S2[f+5|0]=o>>>8,S2[f+6|0]=o>>>16,S2[f+7|0]=o>>>24,r=r+36|0,!(a=a-1|0))break;if(X2[84+I>>2]=n,i=X2[108+I>>2],o=X2[A+60>>2],(0|(f=X2[o+8>>2]))<(0|i)){if(X2[o+12>>2]<(0|i)){if(e=0,i&&(X2[6258]=X2[6258]+1,(r=L2(19+(i<<4)|0))&&(X2[(e=r+19&-16)-4>>2]=r)),1<=(0|f))for(r=0,a=f;;)if(b=X2[o+16>>2]+r|0,Z=X2[b+4>>2],X2[(k=v=e+r|0)>>2]=X2[b>>2],X2[k+4>>2]=Z,k=X2[(b=b+8|0)+4>>2],X2[(v=v+8|0)>>2]=X2[b>>2],X2[v+4>>2]=k,r=r+16|0,!(a=a-1|0))break;(r=X2[o+16>>2])&&J2[o+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[o+16>>2]=e,X2[o+12>>2]=i,S2[o+20|0]=1;}for(r=f<<4,a=i-f|0;;)if(b=X2[36+I>>2],e=X2[o+16>>2]+r|0,X2[e>>2]=X2[32+I>>2],X2[e+4>>2]=b,b=X2[(f=40+I|0)+4>>2],X2[(e=e+8|0)>>2]=X2[f>>2],X2[e+4>>2]=b,r=r+16|0,!(a=a-1|0))break;}if(1<=(0|(X2[o+8>>2]=i)))for(r=0;;)if(e=X2[116+I>>2]+r|0,o=X2[e+4>>2],f=X2[X2[A+60>>2]+16>>2]+r|0,X2[f>>2]=X2[e>>2],X2[f+4>>2]=o,a=X2[(e=e+8|0)+4>>2],X2[(f=f+8|0)>>2]=X2[e>>2],X2[f+4>>2]=a,r=r+16|0,!(i=i-1|0))break;if(!((0|n)<1))for(B=0;;){for(e=0,f=_=X2[136+I>>2]+H2(X2[X2[156+I>>2]+(B<<2)>>2],12)|0;;){if(v=(b=(l=H2(B,36))+X2[92+I>>2]|0)+4|0,C=X2[8+(H2(X2[f+4>>2],12)+f|0)>>2],(0|(a=X2[b+4>>2]))==X2[b+8>>2]&&!((0|(Z=a?a<<1:1))<=(0|a))){Z?(k=0,X2[6258]=X2[6258]+1,(r=L2(19+(Z<<2)|0))&&(X2[(k=r+19&-16)-4>>2]=r),a=X2[v>>2]):k=0,h=b+8|0,m=b+12|0,o=X2[b+12>>2];A:{if(1<=(0|a)){for(r=k,i=o;;)if(X2[r>>2]=X2[i>>2],r=r+4|0,i=i+4|0,!(a=a-1|0))break;}else if(!o)break A;J2[b+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[o-4>>2])),X2[m>>2]=0,a=X2[v>>2];}X2[m>>2]=k,X2[h>>2]=Z,S2[b+16|0]=1;}if(X2[X2[b+12>>2]+(a<<2)>>2]=C,X2[v>>2]=X2[v>>2]+1,e=(0|e)<=1?(i=X2[116+I>>2],t=U2[(r=i+(C<<4)|0)+4>>2],i=i+(X2[f+8>>2]<<4)|0,u=U2[i+4>>2],c=U2[r>>2],s=U2[i>>2],E=U2[r+8>>2],w=U2[i+8>>2],X2[(r=(32+I|0)+(e<<4)|0)+12>>2]=0,c=P2(s-c),u=P2(u-t),s=P2(w-E),t=P2(P2(1)/P2(O2(P2(P2(P2(c*c)+P2(u*u))+P2(s*s))))),U2[r+8>>2]=s*t,U2[r+4>>2]=u*t,U2[r>>2]=c*t,e+1|0):2,r=H2(X2[f+4>>2],12)+f|0,(0|_)==(0|(f=H2(X2[r>>2],12)+r|0)))break;}if(2==(0|e)?(t=U2[36+I>>2],c=U2[52+I>>2],u=U2[48+I>>2],s=U2[40+I>>2],E=U2[32+I>>2],w=U2[56+I>>2],X2[(e=(B<<4)+g|0)+12>>2]=0,G=P2(P2(c*E)-P2(t*u)),c=P2(P2(t*w)-P2(s*c)),u=P2(P2(s*u)-P2(w*E)),t=P2(P2(1)/P2(O2(P2(P2(G*G)+P2(P2(c*c)+P2(u*u)))))),U2[e+8>>2]=G*t,U2[e+4>>2]=u*t,t=P2(c*t),U2[e>>2]=t,i=X2[92+I>>2],U2[(r=l+i|0)+20>>2]=t,U2[r+24>>2]=U2[e+4>>2],U2[r+28>>2]=U2[e+8>>2],X2[r+32>>2]=1900671690):(X2[(e=(B<<4)+g|0)>>2]=0,X2[e+4>>2]=0,X2[(e=e+8|0)>>2]=0,X2[e+4>>2]=0,i=X2[92+I>>2]),(0|(f=X2[(e=i+l|0)+4>>2]))<1)c=P2(1.0000000150474662e30);else if(o=X2[X2[A+60>>2]+16>>2],a=X2[e+12>>2],r=o+(X2[a>>2]<<4)|0,t=U2[(i=(B<<4)+g|0)>>2],u=U2[i+4>>2],s=U2[i+8>>2],c=(c=P2(P2(P2(U2[r>>2]*t)+P2(U2[r+4>>2]*u))+P2(U2[r+8>>2]*s)))<P2(1.0000000150474662e30)?c:P2(1.0000000150474662e30),1!=(0|f))for(r=a+4|0,a=f-1|0;;)if(f=o+(X2[r>>2]<<4)|0,c=(E=P2(P2(P2(U2[f>>2]*t)+P2(U2[f+4>>2]*u))+P2(U2[f+8>>2]*s)))<c?E:c,r=r+4|0,!(a=a-1|0))break;if(U2[e+32>>2]=-c,(0|n)==(0|(B=B+1|0)))break;}}else U();if(1<=X2[84+I>>2]){for(f=o=Z=0;;){if((0|f)==(0|o))if((f=o?o<<1:1)>>>0<=o>>>0)f=o;else {n=0,X2[6258]=X2[6258]+1,(e=L2(19+(f<<2)|0))&&(X2[(n=e+19&-16)-4>>2]=e);A:{if(o){for(r=n,i=Z,a=o;;)if(X2[r>>2]=X2[i>>2],r=r+4|0,i=i+4|0,!(a=a-1|0))break;}else if(!Z){f=1;break A;}X2[6259]=X2[6259]+1,q2(X2[Z-4>>2]);}Z=n;}if(!((0|(o=(X2[(o<<2)+Z>>2]=o)+1|0))<X2[84+I>>2]))break;}for(m=52+I|0;;){e=X2[((f=o-1|0)<<2)+Z>>2],X2[6258]=X2[6258]+1,v=0,(r=L2(23))&&(X2[(v=r+19&-16)-4>>2]=r),X2[v>>2]=e;A:{if((0|o)<2)C=1,o=f;else {for(e=(i=X2[92+I>>2])+H2(e,36)|0,t=U2[e+20>>2],c=U2[e+28>>2],u=U2[e+24>>2],n=o-2|0,e=v,o=f,C=r=1;;){f=X2[(n<<2)+Z>>2],i=H2(f,36)+i|0;e:if(P2(P2(P2(t*U2[i+20>>2])+P2(u*U2[i+24>>2]))+P2(c*U2[i+28>>2]))>P2(.9990000128746033)){r:if((0|r)!=(0|C)||(0|(b=r?r<<1:1))<=(0|r))v=e,b=r;else {if(v=0,b&&(X2[6258]=X2[6258]+1,(i=L2(19+(b<<2)|0))&&(X2[(v=i+19&-16)-4>>2]=i)),1<=(0|r)){for(i=v,a=e;;)if(X2[i>>2]=X2[a>>2],i=i+4|0,a=a+4|0,!(r=r-1|0))break;}else if(!e)break r;X2[6259]=X2[6259]+1,q2(X2[e-4>>2]);}if(X2[(C<<2)+v>>2]=f,C=C+1|0,!((0|o)<1)){for(i=0,r=Z;;){if((0|f)==X2[r>>2])break;if(r=r+4|0,(0|o)==(0|(i=i+1|0)))break e;}(0|o)<=(0|i)||(X2[r>>2]=X2[(e=((o=o-1|0)<<2)+Z|0)>>2],X2[e>>2]=f);}}else v=e,b=r;if(!(1<=(0|n)))break;n=n-1|0,i=X2[92+I>>2],e=v,r=b;}if((0|C)<=1){if(e=1!=(0|C),C=1,e)break A;}else {for(X2[20+I>>2]=n=0,S2[24+I|0]=1,X2[12+I>>2]=0,X2[16+I>>2]=0,c=P2(0),u=P2(f=0),s=P2(0),a=0;;){if(r=X2[92+I>>2]+H2(X2[(a<<2)+v>>2],36)|0,t=U2[r+20>>2],E=U2[r+28>>2],w=U2[r+24>>2],1<=(0|(e=X2[r+4>>2])))for(h=r+4|0,X=r+12|0,b=0;;){l=X2[X2[X>>2]+(b<<2)>>2],r=X2[X2[A+60>>2]+16>>2]+(l<<4)|0,_=X2[(B=r+8|0)+4>>2],X2[(i=k=176+I|0)>>2]=X2[B>>2],X2[i+4>>2]=_,i=X2[r+4>>2],X2[168+I>>2]=X2[r>>2],X2[172+I>>2]=i;e:{if(1<=(0|f)){for(i=1<(0|n)?n:1,r=X2[20+I>>2]+20|0;;){if((0|l)==X2[r>>2])break e;if(r=r+24|0,!(i=i-1|0))break;}f=n;}if(r=X2[k+4>>2],X2[(e=_=40+I|0)>>2]=X2[k>>2],X2[e+4>>2]=r,e=X2[172+I>>2],X2[32+I>>2]=X2[168+I>>2],X2[36+I>>2]=e,X2[16+I>>2]!=(0|f))n=f;else if((0|(B=f?f<<1:1))<=(0|f))n=f;else {if(k=0,B&&(X2[6258]=X2[6258]+1,(e=L2(H2(B,24)+19|0))&&(X2[(k=e+19&-16)-4>>2]=e),f=n),e=X2[20+I>>2],1<=(0|f))for(r=k,i=e;;)if(N=X2[i+4>>2],X2[r>>2]=X2[i>>2],X2[r+4>>2]=N,T=X2[(F=i+16|0)+4>>2],X2[(N=r+16|0)>>2]=X2[F>>2],X2[N+4>>2]=T,T=X2[(F=i+8|0)+4>>2],X2[(N=r+8|0)>>2]=X2[F>>2],X2[N+4>>2]=T,r=r+24|0,i=i+24|0,!(f=f-1|0))break;e&&J2[24+I|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]),n=X2[12+I>>2]),X2[20+I>>2]=k,S2[24+I|0]=1,X2[16+I>>2]=B;}f=X2[36+I>>2],r=X2[20+I>>2]+H2(n,24)|0,X2[r>>2]=X2[32+I>>2],X2[r+4>>2]=f,X2[r+20>>2]=l,X2[r+16>>2]=X2[48+I>>2],e=r+8|0,r=X2[_+4>>2],X2[e>>2]=X2[_>>2],X2[e+4>>2]=r,n=X2[12+I>>2]+1|0,X2[12+I>>2]=n,e=X2[h>>2];}if(f=n,!((0|(b=b+1|0))<(0|e)))break;}if(s=P2(t+s),c=P2(E+c),u=P2(w+u),(0|(a=a+1|0))==(0|C))break;}X2[36+I>>2]=0,X2[40+I>>2]=0,e=X2[92+I>>2]+H2(X2[v>>2],36)|0,U2[52+I>>2]=U2[e+20>>2],U2[56+I>>2]=U2[e+24>>2],U2[60+I>>2]=U2[e+28>>2],X2[44+I>>2]=0,U2[64+I>>2]=U2[e+32>>2],t=P2(P2(1)/P2(O2(P2(P2(P2(s*s)+P2(u*u))+P2(c*c))))),E=P2(u*t),w=P2(s*t),S2[48+I|0]=1,G=P2(c*t),t=P2(j2(G))>P2(.7071067690849304)?(c=P2(P2(G*G)+P2(E*E)),t=P2(P2(1)/P2(O2(c))),W=P2(c*t),c=P2(t*P2(-G)),S=P2(w*c),s=P2(0),u=P2(E*t),P2(u*P2(-w))):(c=P2(P2(w*w)+P2(E*E)),t=P2(P2(1)/P2(O2(c))),S=P2(c*t),c=P2(w*t),W=P2(c*P2(-G)),u=P2(0),s=P2(t*P2(-E)),P2(G*s));e:{r:{f:{i:if(2<=(0|n)){for(a=0,r=f=X2[20+I>>2];;)if(e=r+8|0,P2(P2(P2(s*U2[r>>2])+P2(c*U2[r+4>>2]))+P2(u*U2[e>>2]))<P2(P2(P2(s*U2[f>>2])+P2(c*U2[f+4>>2]))+P2(u*U2[f+8>>2]))&&(k=X2[f>>2],B=X2[f+4>>2],i=X2[r+4>>2],X2[f>>2]=X2[r>>2],X2[f+4>>2]=i,l=X2[(i=f+16|0)>>2],_=X2[i+4>>2],h=X2[(b=r+16|0)+4>>2],X2[i>>2]=X2[b>>2],X2[i+4>>2]=h,h=X2[(i=f+8|0)>>2],X=X2[i+4>>2],N=X2[e+4>>2],X2[i>>2]=X2[e>>2],X2[i+4>>2]=N,X2[r>>2]=k,X2[r+4>>2]=B,X2[b>>2]=l,X2[b+4>>2]=_,X2[e>>2]=h,X2[e+4>>2]=X),r=r+24|0,!((0|(a=a+1|0))<(0|n)))break;if(X2[f+16>>2]=-246811958,2<=(0|n))for(r=f+40|0,a=n-1|0,V=U2[f+8>>2],p=U2[f+4>>2],M=U2[f>>2];;)if(d=P2(U2[(e=r)-16>>2]-M),Q=P2(U2[r-12>>2]-p),R=P2(U2[r-8>>2]-V),D=P2(P2(P2(W*d)+P2(t*Q))+P2(S*R)),d=P2(P2(P2(s*d)+P2(c*Q))+P2(u*R)),d=P2(P2(D*D)+P2(d*d))<P2(1.1920928955078125e-7)?P2(0):(Q=P2(j2(D)),d=d>=P2(0)?(R=P2(.7853981852531433),P2(P2(d-Q)/P2(d+Q))):(R=P2(2.356194496154785),P2(P2(d+Q)/P2(Q-d))),d=P2(R+P2(d*P2(-.7853981852531433))),D<P2(0)?P2(-d):d),U2[e>>2]=d,r=r+24|0,!(a=a-1|0))break;if(i=X2[(r=f+8|0)+4>>2],X2[(e=176+I|0)>>2]=X2[r>>2],X2[e+4>>2]=i,e=X2[f+4>>2],X2[168+I>>2]=X2[f>>2],X2[172+I>>2]=e,!function A(e,r,f,i){var a=P2(0),n=0,b=0,t=0,o=P2(0),c=0,k=0,u=0,s=0,l=0,B=P2(0),v=0,d=P2(0),Z=P2(0),_=P2(0),g=P2(0),E=0,Q=0,w=0,G=0,C=P2(0),h=P2(0),F=P2(0),Y=0;u=K2-32|0;K2=u;c=X2[e+12>>2];b=c+H2((f+i|0)/2|0,24)|0;G=X2[b+20>>2];d=U2[b+16>>2];C=U2[b+8>>2];h=U2[b+4>>2];F=U2[b>>2];b=f;k=i;for(;;){for(Z=U2[r>>2],o=P2(F-Z),a=P2(o*o),_=U2[r+4>>2],o=P2(h-_),a=P2(a+P2(o*o)),g=U2[r+8>>2],o=P2(C-g),o=P2(a+P2(o*o)),n=20+(H2(b,24)+c|0)|0;;){a:{n:{if((a=U2[n-4>>2])!=d){if(a<d)break n;break a;}if(a=P2(U2[n-20>>2]-Z),B=P2(a*a),a=P2(U2[n-16>>2]-_),B=P2(B+P2(a*a)),a=P2(U2[n-12>>2]-g),1!=(0|((a=P2(B+P2(a*a)))!=o?a<o:X2[n>>2]<(0|G))))break a;}n=n+24|0,b=b+1|0;continue;}break;}for(s=H2(k,24);;){a:{n:{if((a=U2[(E=(t=s+c|0)+16|0)>>2])!=d){if(d<a)break n;break a;}if(a=P2(U2[t>>2]-Z),B=P2(a*a),a=P2(U2[t+4>>2]-_),B=P2(B+P2(a*a)),a=P2(U2[t+8>>2]-g),1!=(0|((a=P2(B+P2(a*a)))!=o?o<a:X2[t+20>>2]>(0|G))))break a;}s=s-24|0,k=k-1|0;continue;}break;}if((0|b)<=(0|k)&&(l=X2[4+(v=Q=(n=n-20|0)+16|0)>>2],X2[(c=24+u|0)>>2]=X2[v>>2],X2[c+4>>2]=l,Y=X2[4+(v=n+8|0)>>2],X2[(l=w=16+u|0)>>2]=X2[v>>2],X2[4+l>>2]=Y,l=X2[n+4>>2],X2[8+u>>2]=X2[n>>2],X2[12+u>>2]=l,l=X2[t+4>>2],X2[n>>2]=X2[t>>2],X2[n+4>>2]=l,t=X2[(n=t+8|0)+4>>2],X2[v>>2]=X2[n>>2],X2[4+v>>2]=t,n=X2[E+4>>2],X2[Q>>2]=X2[E>>2],X2[4+Q>>2]=n,n=X2[e+12>>2]+s|0,s=X2[12+u>>2],X2[n>>2]=X2[8+u>>2],X2[n+4>>2]=s,s=X2[c+4>>2],X2[(t=n+16|0)>>2]=X2[c>>2],X2[t+4>>2]=s,t=X2[4+w>>2],X2[(n=n+8|0)>>2]=X2[w>>2],X2[n+4>>2]=t,k=k-1|0,b=b+1|0),!((0|b)<=(0|k)))break;c=X2[e+12>>2];}(0|f)<(0|k)&&A(e,r,f,k);(0|b)<(0|i)&&A(e,r,b,i);K2=32+u|0;}(8+I|0,168+I|0,1,n-1|0),b=0,X2[6258]=X2[6258]+1,e=X2[20+I>>2],r=0,(f=L2(43))&&(X2[(r=f+19&-16)-4>>2]=f),i=X2[20+I>>2],f=X2[e+4>>2],X2[r>>2]=X2[e>>2],X2[r+4>>2]=f,k=X2[(a=e+16|0)+4>>2],X2[(f=r+16|0)>>2]=X2[a>>2],X2[f+4>>2]=k,k=X2[(e=e+8|0)+4>>2],X2[(a=n=r+8|0)>>2]=X2[e>>2],X2[a+4>>2]=k,X2[6258]=X2[6258]+1,(e=L2(67))&&(X2[(b=e+19&-16)-4>>2]=e),e=X2[r+4>>2],X2[b>>2]=X2[r>>2],X2[b+4>>2]=e,a=X2[f+4>>2],X2[(e=b+16|0)>>2]=X2[f>>2],X2[e+4>>2]=a,f=X2[n+4>>2],X2[(e=b+8|0)>>2]=X2[n>>2],X2[e+4>>2]=f,X2[6259]=X2[6259]+1,q2(X2[r-4>>2]),n=X2[(f=(e=i+24|0)+16|0)+4>>2],X2[(r=b+40|0)>>2]=X2[f>>2],X2[r+4>>2]=n,n=X2[(f=e+8|0)+4>>2],X2[(r=b+32|0)>>2]=X2[f>>2],X2[r+4>>2]=n,r=X2[e+4>>2],X2[b+24>>2]=X2[e>>2],X2[b+28>>2]=r,2!=X2[12+I>>2]){for(B=i=n=f=2;;){a:{n:{b:if(!((0|i)<2)){for(a=i<<1,r=(H2(i,24)+b|0)-48|0,e=X2[20+I>>2]+H2(B,24)|0,t=U2[e+8>>2],c=U2[e+4>>2],u=U2[e>>2];;){if(s=U2[r>>2],d=P2(s-U2[r+24>>2]),Q=U2[r+4>>2],D=P2(Q-c),Q=P2(Q-U2[r+28>>2]),s=P2(s-u),S=P2(P2(P2(d*D)-P2(Q*s))*G),R=Q,Q=U2[r+8>>2],W=P2(Q-t),Q=P2(Q-U2[r+32>>2]),P2(S+P2(P2(w*P2(P2(R*W)-P2(Q*D)))+P2(E*P2(P2(Q*s)-P2(d*W)))))>P2(0)){if(!((0|a)<=(0|i))&&(0|f)==(0|i)){if(l=0,X2[6258]=X2[6258]+1,(r=L2(H2(f,48)+19|0))&&(X2[(l=r+19&-16)-4>>2]=r),1<=(0|n))for(r=l,i=b,f=n;;)if(k=X2[i+4>>2],X2[r>>2]=X2[i>>2],X2[r+4>>2]=k,h=X2[(_=i+16|0)+4>>2],X2[(k=r+16|0)>>2]=X2[_>>2],X2[k+4>>2]=h,h=X2[(_=i+8|0)+4>>2],X2[(k=r+8|0)>>2]=X2[_>>2],X2[k+4>>2]=h,r=r+24|0,i=i+24|0,!(f=f-1|0))break;X2[6259]=X2[6259]+1,q2(X2[b-4>>2]),f=a,b=l,i=n;}a=X2[e+4>>2],r=H2(i,24)+b|0,X2[r>>2]=X2[e>>2],X2[r+4>>2]=a,k=X2[(a=e+16|0)+4>>2],X2[(i=r+16|0)>>2]=X2[a>>2],X2[i+4>>2]=k,i=X2[(e=e+8|0)+4>>2],X2[(r=r+8|0)>>2]=X2[e>>2],X2[r+4>>2]=i,i=n=n+1|0;break b;}if(r=r-24|0,a=a-2|0,!(2<((i=n=i-1|0)+1|0)))break;}n=1;break n;}if(1!=(0|i))break a;}if(i=X2[20+I>>2]+H2(B,24)|0,1==(0|f)){e=0,X2[6258]=X2[6258]+1,(r=L2(67))&&(X2[(e=r+19&-16)-4>>2]=r);n:{if(1<=(0|n)){for(r=0,f=n;;)if(h=X2[(k=_=r+b|0)+4>>2],X2[(a=e+r|0)>>2]=X2[k>>2],X2[a+4>>2]=h,h=X2[(k=k+16|0)+4>>2],X2[(l=a+16|0)>>2]=X2[k>>2],X2[l+4>>2]=h,l=X2[(k=_+8|0)+4>>2],X2[(a=a+8|0)>>2]=X2[k>>2],X2[a+4>>2]=l,r=r+24|0,!(f=f-1|0))break;}else if(!b)break n;X2[6259]=X2[6259]+1,q2(X2[b-4>>2]);}f=2,b=e,e=n;}else e=1;a=X2[i+4>>2],e=H2(e,24)+b|0,X2[(r=e)>>2]=X2[i>>2],X2[r+4>>2]=a,k=X2[(a=i+16|0)+4>>2],X2[(r=r+16|0)>>2]=X2[a>>2],X2[r+4>>2]=k,i=X2[(r=i+8|0)+4>>2],X2[(e=e+8|0)>>2]=X2[r>>2],X2[e+4>>2]=i,i=n=n+1|0;}if((0|(B=B+1|0))==X2[12+I>>2])break;}if(0<(0|n))break i;break f;}n=2;}else {if(1!=((b=0)|n))break r;X2[6258]=X2[6258]+1,e=X2[20+I>>2],(r=L2(43))&&(X2[(b=r+19&-16)-4>>2]=r),r=X2[e+4>>2],X2[b>>2]=X2[e>>2],X2[b+4>>2]=r,n=X2[(f=e+16|0)+4>>2],X2[(r=b+16|0)>>2]=X2[f>>2],X2[r+4>>2]=n,f=X2[(e=e+8|0)+4>>2],X2[(r=b+8|0)>>2]=X2[e>>2],X2[r+4>>2]=f,n=1;}for(a=X2[40+I>>2],k=J2[48+I|(l=0)],e=X2[36+I>>2];;){if(_=20+(H2(l,24)+b|0)|0,(0|e)==(0|a))if((0|(f=a?a<<1:1))<=(0|a))e=a;else {B=0,f&&(X2[6258]=X2[6258]+1,(e=L2(19+(f<<2)|0))&&(X2[(B=e+19&-16)-4>>2]=e)),e=X2[44+I>>2];i:{if(1<=(0|a)){for(r=B,i=e;;)if(X2[r>>2]=X2[i>>2],r=r+4|0,i=i+4|0,!(a=a-1|0))break;}else if(!e)break i;k&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),a=X2[36+I>>2];}e=a,X2[40+I>>2]=f,X2[44+I>>2]=B,k=1,a=f;}X2[X2[44+I>>2]+(e<<2)>>2]=X2[_>>2],X2[36+I>>2]=e=e+1|0,f=(0|(B=X2[12+I>>2]))<1;i:if(!f){for(r=X2[20+I>>2]+20|0,_=X2[_>>2],i=B;;){if((0|_)==X2[r>>2])break;if(r=r+24|0,!(i=i-1|0))break i;}X2[r>>2]=-1;}if((0|(l=l+1|0))==(0|n))break;}if(S2[48+I|0]=k,f)break r;}if(!((0|(n=X2[84+I>>2]))<1))for(k=X2[92+I>>2],l=X2[20+I>>2],B=1<(0|B)?B:1,e=0;;){if(-1!=(0|(_=X2[20+(l+H2(e,24)|0)>>2])))for(a=0;;){r=v,i=C;f:{for(;;){if(X2[r>>2]==(0|a))break f;if(r=r+4|0,!(i=i-1|0))break;}if(r=k+H2(a,36)|0,!((0|(i=X2[r+4>>2]))<1))for(r=X2[r+12>>2];;){if(f=1,(0|_)==X2[r>>2])break e;if(r=r+4|0,!(i=i-1|0))break;}}if((0|n)==(0|(a=a+1|0)))break;}if((0|B)==(0|(e=e+1|0)))break;}}M0(X2[A+60>>2]+24|0,32+I|0),f=0;}if(b&&(X2[6259]=X2[6259]+1,q2(X2[b-4>>2])),(e=X2[44+I>>2])&&J2[48+I|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),(e=X2[20+I>>2])&&J2[24+I|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),!f)break A;}}for(n=0;;){if(X2[44+I>>2]=0,e=X2[(n<<2)+v>>2],X2[40+I>>2]=0,f=X2[92+I>>2]+H2(e,36)|0,a=X2[f+4>>2],(S2[48+I|0]=1)<=(0|a)){for(r=0,X2[6258]=X2[6258]+1,(e=L2((i=a<<2)+19|0))&&(X2[(r=e+19&-16)-4>>2]=e,(e=X2[44+I>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),X2[44+I>>2]=r,S2[48+I|0]=1,X2[40+I>>2]=a,v2(r,0,i),X2[36+I>>2]=a,i=X2[f+12>>2];;)if(X2[r>>2]=X2[i>>2],r=r+4|0,i=i+4|0,!(a=a-1|0))break;i=J2[48+I|0],e=X2[44+I>>2];}else X2[36+I>>2]=a,i=1,e=0;if(r=X2[f+24>>2],X2[m>>2]=X2[f+20>>2],X2[m+4>>2]=r,a=X2[(f=f+28|0)+4>>2],X2[(r=m+8|0)>>2]=X2[f>>2],X2[r+4>>2]=a,M0(X2[A+60>>2]+24|0,32+I|0),e&&255&i&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),(0|C)==(0|(n=n+1|0)))break;}}if(v&&(X2[6259]=X2[6259]+1,q2(X2[v-4>>2])),!o)break;}if(F0(X2[A+60>>2]),Z&&(X2[6259]=X2[6259]+1,q2(X2[Z-4>>2])),!((0|(i=X2[84+I>>2]))<1))for(r=X2[92+I>>2]+8|0;;)if((e=X2[(A=r+4|0)>>2])&&J2[r+8|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A>>2]=0,S2[r+8|0]=1,X2[(A=r-4|0)>>2]=0,r=r+36|(X2[A+4>>2]=0),!(i=i-1|0))break;}else F0(X2[A+60>>2]);return (A=X2[92+I>>2])&&J2[96+I|0]&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),g&&(X2[6259]=X2[6259]+1,q2(X2[g-4>>2])),(A=X2[156+I>>2])&&J2[160+I|0]&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),X2[156+I>>2]=0,S2[160+I|0]=1,X2[148+I>>2]=0,X2[152+I>>2]=0,(A=X2[136+I>>2])&&J2[140+I|0]&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),X2[136+I>>2]=0,S2[140+I|0]=1,X2[128+I>>2]=0,X2[132+I>>2]=0,(A=X2[116+I>>2])&&J2[120+I|0]&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),Y&&(X2[6259]=X2[6259]+1,q2(X2[Y-4>>2])),K2=208+I|0,1;},J0,U0,H0,function(A,e,r){A|=0,e=P2(e),r|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var f=U2[A+44>>2],i=U2[A+40>>2],a=U2[A+36>>2],n=P2(N2[X2[X2[A>>2]+48>>2]](A)),b=P2(N2[X2[X2[A>>2]+48>>2]](A)),A=P2(N2[X2[X2[A>>2]+48>>2]](A));X2[r+12>>2]=0,e=P2(e/P2(12)),a=P2(a+n),a=P2(a+a),a=P2(a*a),i=P2(i+b),i=P2(i+i),i=P2(i*i),U2[r+8>>2]=e*P2(a+i),f=P2(f+A),f=P2(f+f),f=P2(f*f),U2[r+4>>2]=e*P2(a+f),U2[r>>2]=e*P2(i+f);},function(A){return 10922;},X0,function(A,e,r){A|=0,e|=0,r|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var f=U2[e+40>>2],i=U2[e+44>>2],a=U2[e+36>>2],n=P2(N2[X2[X2[e>>2]+48>>2]](e)),b=P2(N2[X2[X2[e>>2]+48>>2]](e)),e=P2(N2[X2[X2[e>>2]+48>>2]](e));X2[A+12>>2]=0,i=P2(i+e),U2[A+8>>2]=U2[r+8>>2]>=P2(0)?i:P2(-i),f=P2(f+b),U2[A+4>>2]=U2[r+4>>2]>=P2(0)?f:P2(-f),f=P2(a+n),U2[A>>2]=U2[r>>2]>=P2(0)?f:P2(-f);},function(A,e,r){var f;A|=0,e|=0,r|=0,P2(0),X2[A+12>>2]=0,f=U2[e+36>>2],U2[A>>2]=U2[r>>2]>=P2(0)?f:P2(-f),f=U2[e+44>>2],U2[A+8>>2]=U2[r+8>>2]>=P2(0)?f:P2(-f),f=U2[e+40>>2],U2[A+4>>2]=U2[r+4>>2]>=P2(0)?f:P2(-f);},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b,t,o,c,k=0;if(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),1<=(0|f))for(;;)if(t=U2[4+(i=e+k|0)>>2],o=U2[8+i>>2],c=U2[i>>2],a=U2[A+40>>2],n=U2[A+44>>2],b=U2[A+36>>2],X2[12+(i=r+k|0)>>2]=0,U2[i>>2]=c>=P2(0)?b:P2(-b),U2[8+i>>2]=o>=P2(0)?n:P2(-n),U2[4+i>>2]=t>=P2(0)?a:P2(-a),k=k+16|0,!(f=f-1|0))break;},j0,function(A,e,r){A|=0,r|=0,(e|=0)>>>0<=5&&(X2[r+12>>2]=0,U2[r+8>>2]=U2[(A=e<<2)+10872>>2],U2[r+4>>2]=U2[A+10848>>2],U2[r>>2]=U2[A+10824>>2]);},function(A){return 8;},Q0,function(A,e,r,f){f|=0;var i=0,a=0,i=A|=0;e=(e|=0)>>>0<=11?(a=X2[(e<<=2)+10776>>2],X2[e+10728>>2]):0,N2[X2[X2[A>>2]+108>>2]](i,e,r|=0),N2[X2[X2[A>>2]+108>>2]](A,a,f);},function(A,e,r){A|=0,e|=0,r|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var f=U2[A+44>>2],i=U2[A+40>>2],a=U2[A+36>>2],n=P2(N2[X2[X2[A>>2]+48>>2]](A)),b=P2(N2[X2[X2[A>>2]+48>>2]](A)),t=P2(N2[X2[X2[A>>2]+48>>2]](A));X2[r+12>>2]=0,i=P2(i+b),U2[r+4>>2]=P2(i*P2(0|!(A=e>>>1&1)))-P2(i*P2(0|A)),i=P2(a+n),U2[r>>2]=P2(i*P2(0|!(A=1&e)))-P2(i*P2(0|A)),f=P2(f+t),U2[r+8>>2]=P2(f*P2(0|!(A=e>>>2&1)))-P2(f*P2(0|A));},j0,function(A,e,r,f){var i,a,n,b;A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),K2=b=K2-48|0,N2[X2[X2[A>>2]+124>>2]](A,32+b|0,f),X2[e+12>>2]=0,i=U2[40+b>>2],U2[e+8>>2]=i,a=U2[36+b>>2],U2[e+4>>2]=a,n=U2[32+b>>2],U2[e>>2]=n,X2[12+b>>2]=0,U2[8+b>>2]=-i,U2[4+b>>2]=-a,U2[b>>2]=-n,N2[X2[X2[A>>2]+64>>2]](16+b|0,A,b),f=X2[(e=24+b|0)+4>>2],X2[(A=r+8|0)>>2]=X2[e>>2],X2[A+4>>2]=f,A=X2[20+b>>2],X2[r>>2]=X2[16+b>>2],X2[r+4>>2]=A,K2=48+b|0;},function(A,e,r){A|=0,e|=0,r=P2(r),P2(0),P2(0);var f=0,i=U2[e>>2],a=U2[A+36>>2];return i<=P2(a+r)&&i>=P2(P2(-a)-r)&&(i=U2[e+4>>2],a=U2[A+40>>2],i<=P2(a+r)&&i>=P2(P2(-a)-r)&&(i=U2[e+8>>2],a=U2[A+44>>2],i<=P2(a+r)&&(f=i>=P2(P2(-a)-r)))),0|f;},function(A,e,r){A|=0,e|=0,r|=0;var f=P2(0),i=P2(0),a=P2(0),n=(P2(0),P2(0),P2(0)),b=U2[A+44>>2],t=U2[A+40>>2],f=U2[A+36>>2],i=P2(1);A:{e:{r:{f:{i:switch(0|r){case 1:i=P2(-1);break e;case 2:a=P2(1);break r;case 3:a=P2(-1);break r;case 4:f=P2(1);break f;case 0:break e;case 5:break i;default:break A;}f=P2(-1);}n=f,i=P2(0),f=b;break e;}i=P2(0),f=t;}U2[e+8>>2]=n,U2[e+4>>2]=a,U2[e>>2]=i,U2[e+12>>2]=-f;}},e,z0,function(A,e,r,f){A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var i,a,n,b,t,o,c,k,u,s,l,B,v=K2-16|0,d=A+36|0;A=X2[A+60>>2],a=U2[d+((A+2|0)%3<<2)>>2],U2[8+v>>2]=a,U2[4+v>>2]=a,U2[v>>2]=a,U2[(A<<=2)+v>>2]=a+U2[A+d>>2],a=U2[e+56>>2],A=U2[e+40>>2],d=U2[e+36>>2],o=U2[e+52>>2],b=U2[e+24>>2],k=U2[e+20>>2],u=U2[e+32>>2],s=U2[e+16>>2],c=U2[e+48>>2],n=U2[e+8>>2],i=U2[e>>2],e=U2[e+4>>2],X2[r+12>>2]=0,t=P2(j2(i)),i=U2[v>>2],l=P2(j2(e)),e=U2[4+v>>2],B=P2(j2(n)),n=U2[8+v>>2],t=P2(P2(P2(t*i)+P2(l*e))+P2(B*n)),U2[r>>2]=c-t,b=P2(P2(P2(i*P2(j2(s)))+P2(e*P2(j2(k))))+P2(n*P2(j2(b)))),U2[r+4>>2]=o-b,i=P2(P2(P2(i*P2(j2(u)))+P2(e*P2(j2(d))))+P2(n*P2(j2(A)))),U2[r+8>>2]=a-i,U2[f>>2]=c+t,U2[f+4>>2]=o+b,U2[f+8>>2]=a+i,X2[f+12>>2]=0;},function(A,e){A|=0,e|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var r,f,i,a=U2[e>>2],n=U2[e+4>>2],b=U2[e+8>>2];X2[A+32>>2]=0,r=U2[(f=A+28|0)>>2],U2[f>>2]=j2(b),b=U2[(f=A+24|0)>>2],U2[f>>2]=j2(n),n=U2[A+20>>2],U2[A+20>>2]=j2(a),a=U2[e+8>>2],f=U2[e+4>>2],i=U2[e>>2],X2[A+48>>2]=0,U2[A+36>>2]=i*P2(U2[A+36>>2]/n),U2[(e=A+40|0)>>2]=f*P2(U2[e>>2]/b),U2[(e=A+44|0)>>2]=a*P2(U2[e>>2]/r),U2[A+52>>2]=U2[(A+36|0)+((X2[A+60>>2]+2|0)%3<<2)>>2];},function(A,e,r){A|=0,e=P2(e),r|=0,P2(0),P2(0);var f,i,a=0,a=(P2(0),X2[A+60>>2]),n=U2[(i=A+36|0)+((a+2|0)%3<<2)>>2];X2[(A=K2-16|0)+12>>2]=0,U2[A+8>>2]=n,U2[A+4>>2]=n,U2[A>>2]=n,U2[(f=(a<<=2)+A|0)>>2]=U2[a+i>>2]+U2[f>>2],e=P2(e*P2(.0833333283662796)),n=U2[A>>2],n=P2(n+n),n=P2(n*n),a=U2[A+4>>2],a=P2(a+a),a=P2(a*a),U2[r+8>>2]=e*P2(n+a),i=n,n=U2[A+8>>2],n=P2(n+n),n=P2(n*n),U2[r+4>>2]=e*P2(i+n),U2[r>>2]=e*P2(a+n);},function(A){return 11071;},O0,K0,L0,function(A,e,r){e|=0;var f=0|N2[X2[X2[(r|=0)>>2]+40>>2]](r,A|=0),i=0|N2[X2[X2[r>>2]+28>>2]](r,f);return (X2[e>>2]=i)&&N2[X2[X2[r>>2]+48>>2]](r,f),r=X2[A+4>>2],X2[e+8>>2]=0,U2[e+28>>2]=U2[A+36>>2],U2[e+32>>2]=U2[A+40>>2],U2[e+36>>2]=U2[A+44>>2],U2[e+40>>2]=U2[A+48>>2],U2[e+12>>2]=U2[A+20>>2],U2[e+16>>2]=U2[A+24>>2],U2[e+20>>2]=U2[A+28>>2],U2[e+24>>2]=U2[A+32>>2],X2[e+4>>2]=r,U2[e+44>>2]=U2[A+52>>2],X2[e+48>>2]=0,A=X2[A+60>>2],X2[e+56>>2]=0,X2[e+52>>2]=A,11052;},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b=P2(0),t=P2(0),o=P2(0),c=P2(0),k=P2(0),u=(P2(0),P2(0)),s=(P2(0),P2(0),K2-16|0);X2[A>>2]=0,X2[A+4>>2]=0,X2[(i=A+8|0)>>2]=0,X2[4+i>>2]=0,t=U2[r>>2],o=U2[r+4>>2],b=U2[r+8>>2],t=(c=P2(P2(P2(t*t)+P2(o*o))+P2(b*b)))<P2(9999999747378752e-20)?(c=P2(0),P2(1)):(k=b,b=P2(P2(1)/P2(O2(c))),u=P2(k*b),c=P2(o*b),P2(t*b)),X2[(r=8+s|0)>>2]=0,X2[r+4>>2]=0,X2[s>>2]=0,X2[4+s>>2]=0,i=X2[e+60>>2]<<2,k=U2[36+(e+i|0)>>2],U2[(i=s+i|0)>>2]=k,o=P2(-0xde0b6b000000000),f=U2[s>>2],a=U2[4+s>>2],n=U2[r>>2],(b=P2(P2(P2(t*f)+P2(c*a))+P2(u*n)))>P2(-0xde0b6b000000000)&&(U2[A+12>>2]=U2[12+s>>2],U2[A+8>>2]=n,U2[A+4>>2]=a,U2[A>>2]=f,o=b),X2[(r=e=8+s|0)>>2]=0,X2[r+4>>2]=0,X2[s>>2]=0,X2[4+s>>2]=0,U2[i>>2]=-k,k=o,f=t,t=U2[s>>2],o=U2[4+s>>2],b=U2[r>>2],k<P2(P2(P2(f*t)+P2(c*o))+P2(u*b))&&(U2[A+12>>2]=U2[12+s>>2],U2[A+8>>2]=b,U2[A+4>>2]=o,U2[A>>2]=t);},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b,t,o,c,k,u=0,s=P2(0),l=P2(0),B=(P2(0),P2(0),0),v=P2(0),d=P2(0),Z=P2(0),_=(P2(0),P2(0),K2-16|0);if(1<=(0|f))for(;;)if(X2[(i=8+_|0)>>2]=0,X2[4+i>>2]=0,X2[_>>2]=0,X2[4+_>>2]=0,u=X2[A+60>>2],s=U2[36+((a=u<<2)+A|0)>>2],U2[_+a>>2]=s,l=P2(-0xde0b6b000000000),b=U2[_>>2],v=U2[(a=e+B|0)>>2],t=U2[4+_>>2],d=U2[(o=4+a|0)>>2],c=U2[i>>2],Z=U2[(k=8+a|0)>>2],(n=P2(P2(P2(b*v)+P2(t*d))+P2(c*Z)))>P2(-0xde0b6b000000000)&&(U2[(u=r+B|0)>>2]=b,U2[u+12>>2]=U2[12+_>>2],U2[u+8>>2]=c,U2[u+4>>2]=t,Z=U2[k>>2],d=U2[o>>2],u=X2[A+60>>2],s=U2[36+((u<<2)+A|0)>>2],v=U2[a>>2],l=n),X2[i>>2]=0,X2[4+i>>2]=0,X2[_>>2]=0,X2[4+_>>2]=0,U2[(u<<2)+_>>2]=-s,b=l,l=U2[_>>2],n=U2[4+_>>2],s=U2[i>>2],b<P2(P2(P2(l*v)+P2(n*d))+P2(s*Z))&&(U2[(i=r+B|0)>>2]=l,U2[12+i>>2]=U2[12+_>>2],U2[8+i>>2]=s,U2[4+i>>2]=n),B=B+16|0,!(f=f-1|0))break;},z0,U0,H0,function(A,e,r){A|=0,e=P2(e),r|=0;var f,i,a,n=P2(0),b=P2(0),t=P2(0),t=(P2(0),P2(0),P2(0),P2(0),P2(0),U2[A+44>>2]),n=U2[A+40>>2],o=U2[A+36>>2],c=P2(N2[X2[X2[A>>2]+48>>2]](A));n=P2(n+P2(N2[X2[X2[A>>2]+48>>2]](A))),a=P2(N2[X2[X2[A>>2]+48>>2]](A)),b=P2(e*P2(.5)),f=P2(e*P2(.25)),i=P2(e/P2(12)),e=P2(c+o);A:{e:switch(X2[A+60>>2]){case 0:t=b,b=P2(n*n),n=P2(t*b),b=e=P2(P2(f*b)+P2(i*P2(e*P2(e*P2(4)))));break A;case 2:e=P2(e*e),b=P2(b*e),n=P2(f*e),e=P2(a+t),e=n=P2(n+P2(i*P2(e*P2(e*P2(4)))));break A;default:break e;}t=b,b=P2(e*e),e=P2(t*b),b=n=P2(P2(f*b)+P2(i*P2(n*P2(n*P2(4)))));}X2[r+12>>2]=0,U2[r+8>>2]=b,U2[r+4>>2]=e,U2[r>>2]=n;},function(A){return 11240;},O0,X0,L0,function(A,e,r){e|=0;var f=0|N2[X2[X2[(r|=0)>>2]+40>>2]](r,A|=0),i=0|N2[X2[X2[r>>2]+28>>2]](r,f);return (X2[e>>2]=i)&&N2[X2[X2[r>>2]+48>>2]](r,f),r=X2[A+4>>2],X2[e+8>>2]=0,U2[e+28>>2]=U2[A+36>>2],U2[e+32>>2]=U2[A+40>>2],U2[e+36>>2]=U2[A+44>>2],U2[e+40>>2]=U2[A+48>>2],U2[e+12>>2]=U2[A+20>>2],U2[e+16>>2]=U2[A+24>>2],U2[e+20>>2]=U2[A+28>>2],U2[e+24>>2]=U2[A+32>>2],X2[e+4>>2]=r,U2[e+44>>2]=U2[A+52>>2],X2[e+48>>2]=0,A=X2[A+60>>2],X2[e+56>>2]=0,X2[e+52>>2]=A,11220;},function(A,e,r){var f,i,a,n,b;A|=0,e|=0,r|=0,P2(0),P2(0),P2(0),P2(0),P2(0),K2=b=K2-16|0,N2[X2[X2[e>>2]+68>>2]](b,e,r),a=X2[4+(i=8+b|0)>>2],X2[(f=A+8|0)>>2]=X2[i>>2],X2[4+f>>2]=a,f=X2[4+b>>2],X2[A>>2]=X2[b>>2],X2[A+4>>2]=f,P2(N2[X2[X2[e>>2]+48>>2]](e))!=P2(0)&&(i=U2[r+4>>2],a=U2[r>>2],f=U2[r+8>>2],r=P2(N2[X2[X2[e>>2]+48>>2]](e)),n=a=(e=P2(P2(P2(a*a)+P2(i*i))+P2(f*f))<P2(14210854715202004e-30))?P2(-1):a,f=e?P2(-1):f,i=e?P2(-1):i,a=P2(P2(1)/P2(O2(P2(P2(f*f)+P2(P2(a*a)+P2(i*i)))))),U2[A>>2]=U2[A>>2]+P2(r*P2(n*a)),U2[A+4>>2]=U2[A+4>>2]+P2(r*P2(i*a)),U2[A+8>>2]=U2[A+8>>2]+P2(r*P2(f*a))),K2=16+b|0;},function(A,e,r){A|=0,e|=0,r|=0;var f,i=P2(0),a=P2(0),n=(P2(0),P2(0),P2(0),P2(0)),i=U2[e+40>>2],a=U2[e+36>>2],e=U2[r>>2],b=U2[r+8>>2];i=((f=P2(O2(P2(P2(e*e)+P2(b*b)))))!=P2(0)&&(a=P2(a/f),n=P2(b*a),a=P2(e*a)),U2[r+4>>2]<P2(0)?P2(-i):i),U2[A+8>>2]=n,U2[A+4>>2]=i,U2[A>>2]=a;},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n=P2(0),b=P2(0),t=P2(0);if(P2(0),P2(0),1<=(0|f))for(;;)if(n=U2[A+40>>2],b=U2[A+36>>2],i=U2[e>>2],t=U2[e+8>>2],n=((a=P2(O2(P2(P2(i*i)+P2(t*t)))))!=P2(0)?(b=P2(b/a),t=P2(t*b),b=P2(i*b)):t=P2(0),U2[e+4>>2]<P2(0)?P2(-n):n),U2[r>>2]=b,U2[r+8>>2]=t,U2[r+4>>2]=n,e=e+16|0,r=r+16|0,!(f=f-1|0))break;},function(A){A|=0,P2(0),P2(0);var e=U2[A+36>>2],r=P2(N2[X2[X2[A>>2]+48>>2]](A));return P2(N2[X2[X2[A>>2]+48>>2]](A)),P2(N2[X2[X2[A>>2]+48>>2]](A)),P2(P2(e+r));},z0,function(A,e){A|=0,e|=0,P2(0),P2(0),P2(0);var r,f=X2[A+76>>2]<<2,i=U2[f+e>>2],a=P2(U2[A+68>>2]*P2(i/U2[f+(f=A+20|0)>>2]));U2[A+68>>2]=a,r=X2[A+72>>2]<<2,i=P2(U2[r+e>>2]/U2[f+r>>2]),r=X2[A+80>>2]<<2,f=P2(U2[A+64>>2]*P2(P2(i+P2(U2[r+e>>2]/U2[f+r>>2]))*P2(.5))),U2[A+64>>2]=f,U2[A+60>>2]=f/P2(O2(P2(P2(a*a)+P2(f*f)))),f=U2[e+8>>2],a=U2[e+4>>2],i=U2[e>>2],X2[A+32>>2]=0,U2[A+20>>2]=j2(i),U2[A+24>>2]=j2(a),U2[A+28>>2]=j2(f);},function(A,e,r){var f,i,a,n,b,t,o;A|=0,e=P2(e),r|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),X2[(a=44+(K2=o=K2-96|0)|0)>>2]=0,X2[4+a>>2]=0,X2[(a=56+o|0)>>2]=0,X2[4+a>>2]=0,X2[52+o>>2]=1065353216,X2[(a=o+64|0)>>2]=0,X2[4+a>>2]=0,X2[(a=76+o|0)>>2]=0,X2[4+a>>2]=0,X2[72+o>>2]=1065353216,X2[(a=84+o|0)>>2]=0,X2[4+a>>2]=0,X2[92+o>>2]=0,X2[36+o>>2]=0,X2[40+o>>2]=0,X2[32+o>>2]=1065353216,N2[X2[X2[A>>2]+8>>2]](A,32+o|0,16+o|0,o),a=U2[24+o>>2],n=U2[8+o>>2],f=U2[16+o>>2],i=U2[o>>2],b=U2[20+o>>2],t=U2[4+o>>2],A=P2(N2[X2[X2[A>>2]+48>>2]](A)),X2[r+12>>2]=0,e=P2(e*P2(.0833333283662796)),f=P2(A+P2(P2(i-f)*P2(.5))),f=P2(f+f),f=P2(f*f),i=P2(A+P2(P2(t-b)*P2(.5))),i=P2(i+i),i=P2(i*i),U2[r+8>>2]=e*P2(f+i),A=P2(A+P2(P2(n-a)*P2(.5))),A=P2(A+A),A=P2(A*A),U2[r+4>>2]=e*P2(f+A),U2[r>>2]=e*P2(i+A),K2=96+o|0;},function(A){return 11396;},function(A,e){X2[(A|=0)+8>>2]=0,X2[A+12>>2]=0,X2[A>>2]=0,X2[A+4>>2]=1065353216;},L0,function(A,e,r){A|=0,e|=0,r|=0,P2(0);var f=0|N2[X2[X2[r>>2]+40>>2]](r,A),i=0|N2[X2[X2[r>>2]+28>>2]](r,f);return (X2[e>>2]=i)&&N2[X2[X2[r>>2]+48>>2]](r,f),r=X2[A+4>>2],X2[e+8>>2]=0,U2[e+28>>2]=U2[A+36>>2],U2[e+32>>2]=U2[A+40>>2],U2[e+36>>2]=U2[A+44>>2],U2[e+40>>2]=U2[A+48>>2],U2[e+12>>2]=U2[A+20>>2],U2[e+16>>2]=U2[A+24>>2],U2[e+20>>2]=U2[A+28>>2],U2[e+24>>2]=U2[A+32>>2],X2[e+4>>2]=r,i=U2[A+52>>2],X2[e+48>>2]=0,U2[e+44>>2]=i,A=X2[A+76>>2],X2[e+56>>2]=0,X2[e+52>>2]=A,11380;},function(A,e,r){A|=0,e|=0,r|=0;var f,i=P2(0),a=P2(0),n=P2(0),b=P2(0),t=0,o=P2(0),a=P2(U2[e+68>>2]*P2(.5)),c=X2[e+72>>2],t=(f=X2[e+76>>2])<<2,i=U2[r>>2],b=P2(i*i);i=U2[r+4>>2],b=P2(b+P2(i*i)),i=U2[r+8>>2];A:{if(U2[t+r>>2]>P2(U2[e+60>>2]*P2(O2(P2(b+P2(i*i))))))X2[(c<<2)+A>>2]=0,U2[A+t>>2]=a,t=X2[e+80>>2];else {if(i=U2[(c<<2)+r>>2],t=X2[e+80>>2],n=U2[(t<<2)+r>>2],(o=P2(O2(P2(P2(i*i)+P2(n*n)))))>P2(1.1920928955078125e-7)){b=i,i=P2(U2[e+64>>2]/o),U2[(c<<2)+A>>2]=b*i,U2[(f<<2)+A>>2]=-a,a=P2(n*i);break A;}X2[(c<<2)+A>>2]=0,U2[(f<<2)+A>>2]=-a;}a=P2(0);}U2[(t<<2)+A>>2]=a,P2(N2[X2[X2[e>>2]+48>>2]](e))!=P2(0)&&(a=U2[r+4>>2],i=U2[r>>2],n=U2[r+8>>2],o=P2(N2[X2[X2[e>>2]+48>>2]](e)),b=i=(e=P2(P2(P2(i*i)+P2(a*a))+P2(n*n))<P2(14210854715202004e-30))?P2(-1):i,n=e?P2(-1):n,a=e?P2(-1):a,i=P2(P2(1)/P2(O2(P2(P2(n*n)+P2(P2(i*i)+P2(a*a)))))),U2[A>>2]=U2[A>>2]+P2(o*P2(b*i)),U2[A+4>>2]=U2[A+4>>2]+P2(o*P2(a*i)),U2[A+8>>2]=U2[A+8>>2]+P2(o*P2(n*i)));},function(A,e,r){A|=0,e|=0,r|=0,P2(0);var f,i,a,n=P2(0),n=(P2(0),P2(0),P2(0),P2(U2[e+68>>2]*P2(.5))),b=X2[e+72>>2],t=(a=X2[e+76>>2])<<2,o=U2[r>>2],c=P2(o*o);o=U2[r+4>>2],c=P2(c+P2(o*o)),o=U2[r+8>>2];A:{if(U2[t+r>>2]>P2(U2[e+60>>2]*P2(O2(P2(c+P2(o*o))))))X2[(b<<2)+A>>2]=0,U2[A+t>>2]=n,r=X2[e+80>>2];else {if(o=U2[(b<<2)+r>>2],t=r,r=X2[e+80>>2],f=U2[t+(r<<2)>>2],(i=P2(O2(P2(P2(o*o)+P2(f*f)))))>P2(1.1920928955078125e-7)){c=o,o=P2(U2[e+64>>2]/i),U2[(b<<2)+A>>2]=c*o,U2[(a<<2)+A>>2]=-n,n=P2(f*o);break A;}X2[(b<<2)+A>>2]=0,U2[(a<<2)+A>>2]=-n;}n=P2(0);}U2[(r<<2)+A>>2]=n;},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0,P2(0);var i,a,n,b,t,o=0,c=P2(0),k=(P2(0),0),u=(P2(0),P2(0),K2-16|0);if(1<=(0|f))for(;;){c=P2(U2[A+68>>2]*P2(.5)),o=X2[A+72>>2],a=X2[A+76>>2]<<2,i=U2[e>>2],n=P2(i*i),i=U2[e+4>>2],n=P2(n+P2(i*i)),i=U2[e+8>>2];A:{if(U2[a+e>>2]>P2(U2[A+60>>2]*P2(O2(P2(n+P2(i*i))))))X2[(o<<2)+u>>2]=0,U2[u+a>>2]=c,o=X2[A+80>>2];else {if(i=U2[(k=o<<2)+e>>2],o=X2[A+80>>2],b=U2[(o<<2)+e>>2],(t=P2(O2(P2(P2(i*i)+P2(b*b)))))>P2(1.1920928955078125e-7)){n=i,i=P2(U2[A+64>>2]/t),U2[u+k>>2]=n*i,U2[u+a>>2]=-c,c=P2(b*i);break A;}X2[u+k>>2]=0,U2[u+a>>2]=-c;}c=P2(0);}if(U2[(o<<2)+u>>2]=c,a=X2[4+u>>2],X2[r>>2]=X2[u>>2],X2[r+4>>2]=a,k=X2[(o=8+u|0)+4>>2],X2[(a=r+8|0)>>2]=X2[o>>2],X2[4+a>>2]=k,e=e+16|0,r=r+16|0,!(f=f-1|0))break;}},e,z0,function(A,e,r,f){f|=0,X2[(r|=0)+8>>2]=-581039253,X2[r+12>>2]=0,X2[r>>2]=-581039253,X2[r+4>>2]=-581039253,X2[f+8>>2]=1566444395,X2[f+12>>2]=0,X2[f>>2]=1566444395,X2[f+4>>2]=1566444395;},function(A,e){var r=X2[(e|=0)+4>>2];X2[(A|=0)+76>>2]=X2[e>>2],X2[A+80>>2]=r,r=X2[(e=e+8|0)+4>>2],X2[(A=A+84|0)>>2]=X2[e>>2],X2[A+4>>2]=r;},function(A){return (A|=0)+76|0;},q0,function(A){return 11559;},function(A,e){A|=0,e=P2(e),U2[A+20>>2]=e;},function(A){return P2(U2[(A|=0)+20>>2]);},P0,function(A,e,r){A|=0,e|=0,r|=0,P2(0);var f=0|N2[X2[X2[r>>2]+40>>2]](r,A),i=0|N2[X2[X2[r>>2]+28>>2]](r,f);return (X2[e>>2]=i)&&N2[X2[X2[r>>2]+48>>2]](r,f),r=X2[A+4>>2],X2[e+8>>2]=0,U2[e+12>>2]=U2[A+76>>2],U2[e+16>>2]=U2[A+80>>2],U2[e+20>>2]=U2[A+84>>2],U2[e+24>>2]=U2[A+88>>2],U2[e+28>>2]=U2[A+56>>2],U2[e+32>>2]=U2[A+60>>2],U2[e+36>>2]=U2[A- -64>>2],U2[e+40>>2]=U2[A+68>>2],X2[e+4>>2]=r,i=U2[A+72>>2],X2[e+48>>2]=0,U2[e+44>>2]=i,11536;},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b,t,o,c,k,u,s,l,B=P2(0),v=P2(0),d=(P2(0),P2(0)),Z=(P2(0),P2(0),P2(0),P2(0)),_=(P2(0),P2(0),P2(0)),g=P2(0),E=P2(0),Q=(P2(0),P2(0));P2(0),K2=l=K2-48|0,n=U2[f>>2],d=U2[r>>2],i=P2(P2(n-d)*P2(.5)),a=P2(i*i),v=U2[f+4>>2],B=U2[r+4>>2],i=P2(P2(v-B)*P2(.5)),t=P2(a+P2(i*i)),a=U2[f+8>>2],b=U2[r+8>>2],i=P2(P2(a-b)*P2(.5)),i=P2(O2(P2(t+P2(i*i)))),a=P2(P2(a+b)*P2(.5)),b=P2(P2(v+B)*P2(.5)),o=P2(P2(n+d)*P2(.5)),n=U2[A- -64>>2],P2(j2(n))>P2(.7071067690849304)?(d=U2[A+60>>2],v=P2(P2(n*n)+P2(d*d)),B=P2(P2(1)/P2(O2(v))),_=P2(v*B),Z=P2(d*B),v=U2[A+56>>2],g=P2(Z*P2(-v)),B=P2(B*P2(-n)),E=P2(v*B)):(v=U2[A+56>>2],d=U2[A+60>>2],_=P2(P2(v*v)+P2(d*d)),B=P2(P2(1)/P2(O2(_))),E=P2(_*B),Q=P2(B*P2(-d)),g=P2(n*Q),B=P2(v*B),_=P2(B*P2(-n))),s=U2[A+72>>2],X2[(A=44+l|0)>>2]=0,f=40+l|(X2[(r=28+l|0)>>2]=0),a=P2(P2(P2(n*(t=a))+P2(P2(o*v)+P2(b*d)))-s),s=P2(t-P2(n*a)),Z=P2(i*Z),t=P2(s-Z),n=P2(i*E),E=P2(t-n),U2[f>>2]=E,c=36+l|0,b=P2(b-P2(d*a)),B=P2(i*B),k=P2(b-B),d=P2(i*g),g=P2(k-d),U2[c>>2]=g,u=24+l|0,Z=P2(Z+s),U2[u>>2]=Z-n,s=20+l|0,B=P2(B+b),U2[s>>2]=B-d,X2[12+l>>2]=0,v=P2(o-P2(v*a)),a=P2(i*Q),b=P2(v-a),i=P2(i*_),o=P2(b-i),U2[32+l>>2]=o,v=P2(a+v),U2[16+l>>2]=v-i,a=P2(n+Z),U2[8+l>>2]=a,B=P2(d+B),U2[4+l>>2]=B,v=P2(i+v),U2[l>>2]=v,N2[X2[X2[e>>2]+8>>2]](e,l,0,0),X2[A>>2]=0,U2[f>>2]=a,U2[c>>2]=B,X2[r>>2]=0,U2[u>>2]=n+t,U2[s>>2]=d+k,U2[32+l>>2]=v,U2[16+l>>2]=i+b,X2[12+l>>2]=0,U2[8+l>>2]=E,U2[4+l>>2]=g,U2[l>>2]=o,N2[X2[X2[e>>2]+8>>2]](e,l,0,1),K2=48+l|0;},n1,function(A){var e=0;X2[(A|=0)>>2]=11628,(e=X2[A+72>>2])&&($0(e),(e=X2[A+72>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),(e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+32>>2]=0,S2[A+36|0]=1,X2[(e=A+24|0)>>2]=0,X2[e+4>>2]=0,X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i=P2(0),a=P2(0),n=P2(0),b=P2(0),t=P2(0),o=(P2(0),P2(0),P2(0)),c=(P2(0),P2(0),P2(0)),k=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0)),i=(P2(0),P2(0),P2(0),P2(0),X2[A+24>>2]?(n=U2[A- -64>>2],i=U2[A+48>>2],b=P2(P2(n+i)*P2(.5)),a=U2[A+60>>2],o=U2[A+44>>2],t=P2(P2(a+o)*P2(.5)),c=P2(P2(n-i)*P2(.5)),k=P2(P2(a-o)*P2(.5)),i=U2[A+56>>2],a=U2[A+40>>2],n=P2(P2(i+a)*P2(.5)),P2(P2(i-a)*P2(.5))):P2(0)),u=P2(N2[X2[X2[A>>2]+48>>2]](A)),s=P2(N2[X2[X2[A>>2]+48>>2]](A)),A=P2(N2[X2[X2[A>>2]+48>>2]](A)),l=U2[e+52>>2],a=U2[e+20>>2],o=U2[e+24>>2],B=U2[e+56>>2],v=U2[e+36>>2],d=U2[e+40>>2],Z=U2[e+48>>2],_=U2[e+8>>2],g=U2[e>>2],E=U2[e+4>>2],Q=U2[e+16>>2],e=U2[e+32>>2];X2[r+12>>2]=0,B=P2(B+P2(P2(P2(n*e)+P2(t*v))+P2(b*d))),i=P2(i+u),u=P2(i*P2(j2(e))),e=P2(k+s),u=P2(u+P2(e*P2(j2(v)))),v=P2(c+A),d=P2(u+P2(v*P2(j2(d)))),U2[r+8>>2]=B-d,c=P2(l+P2(P2(P2(n*Q)+P2(t*a))+P2(b*o))),a=P2(P2(P2(i*P2(j2(Q)))+P2(e*P2(j2(a))))+P2(v*P2(j2(o)))),U2[r+4>>2]=c-a,b=P2(Z+P2(P2(P2(n*g)+P2(t*E))+P2(b*_))),t=P2(P2(P2(i*P2(j2(g)))+P2(e*P2(j2(E))))+P2(v*P2(j2(_)))),U2[r>>2]=b-t,X2[f+12>>2]=0,U2[f+8>>2]=d+B,U2[f+4>>2]=a+c,U2[f>>2]=t+b;},function(A,e){e|=0;var r,f,i,a,n,b,t,o,c,k,u=0,s=0,l=0,B=0,v=0;if(K2=k=K2-144|0,1<=X2[(A|=0)+24>>2])for(n=96+k|0,b=k+64|0,t=48+k|0,o=32+k|0;;){if(u=(B=H2(v,80))+X2[A+32>>2]|0,i=X2[(s=u+8|0)+4>>2],X2[(r=24+k|0)>>2]=X2[s>>2],X2[4+r>>2]=i,f=X2[u+4>>2],X2[16+k>>2]=X2[u>>2],X2[20+k>>2]=f,l=X2[4+(i=u+24|0)>>2],X2[(s=f=8+o|0)>>2]=X2[i>>2],X2[s+4>>2]=l,s=X2[u+20>>2],X2[o>>2]=X2[u+16>>2],X2[4+o>>2]=s,a=X2[4+(l=u+40|0)>>2],X2[(s=8+t|0)>>2]=X2[l>>2],X2[s+4>>2]=a,i=X2[u+36>>2],X2[t>>2]=X2[u+32>>2],X2[4+t>>2]=i,c=X2[4+(a=u+56|0)>>2],X2[(l=i=8+b|0)>>2]=X2[a>>2],X2[4+l>>2]=c,l=X2[u+52>>2],X2[b>>2]=X2[u+48>>2],X2[4+b>>2]=l,u=X2[u+64>>2],u=0|N2[X2[X2[u>>2]+28>>2]](u),a=X2[4+(c=u+8|0)>>2],X2[(l=8+k|0)>>2]=X2[c>>2],X2[4+l>>2]=a,a=X2[u+4>>2],u=X2[u>>2],U2[l>>2]=P2(U2[l>>2]*U2[e+8>>2])/U2[A+92>>2],X2[k>>2]=u,X2[4+k>>2]=a,X2[12+k>>2]=0,U2[k>>2]=P2(U2[k>>2]*U2[e>>2])/U2[A+84>>2],U2[4+k>>2]=P2(U2[4+k>>2]*U2[e+4>>2])/U2[A+88>>2],u=X2[64+(B+X2[A+32>>2]|0)>>2],N2[X2[X2[u>>2]+24>>2]](u,k),X2[76+k>>2]=0,U2[72+k>>2]=P2(U2[72+k>>2]*U2[e+8>>2])/U2[A+92>>2],U2[68+k>>2]=P2(U2[68+k>>2]*U2[e+4>>2])/U2[A+88>>2],U2[64+k>>2]=P2(U2[64+k>>2]*U2[e>>2])/U2[A+84>>2],a=X2[4+r>>2],u=B+X2[A+32>>2]|0,X2[(l=u+8|0)>>2]=X2[r>>2],X2[4+l>>2]=a,r=X2[20+k>>2],X2[u>>2]=X2[16+k>>2],X2[u+4>>2]=r,l=X2[4+f>>2],X2[(r=u+24|0)>>2]=X2[f>>2],X2[4+r>>2]=l,r=X2[4+o>>2],X2[u+16>>2]=X2[o>>2],X2[u+20>>2]=r,f=X2[s+4>>2],X2[(r=u+40|0)>>2]=X2[s>>2],X2[4+r>>2]=f,r=X2[4+t>>2],X2[u+32>>2]=X2[t>>2],X2[u+36>>2]=r,r=X2[4+b>>2],X2[u+48>>2]=X2[b>>2],X2[u+52>>2]=r,r=X2[4+i>>2],X2[(u=u+56|0)>>2]=X2[i>>2],X2[u+4>>2]=r,X2[A+72>>2]){u=X2[64+(B+X2[A+32>>2]|0)>>2],N2[X2[X2[u>>2]+8>>2]](u,16+k|0,128+k|0,112+k|0),f=X2[4+(r=136+k|0)>>2],X2[(u=i=88+k|0)>>2]=X2[r>>2],X2[u+4>>2]=f,u=X2[116+k>>2],X2[n>>2]=X2[112+k>>2],X2[4+n>>2]=u,f=X2[4+(r=120+k|0)>>2],X2[(u=8+n|0)>>2]=X2[r>>2],X2[u+4>>2]=f,u=X2[132+k>>2],X2[80+k>>2]=X2[128+k>>2],X2[84+k>>2]=u;A:if(u=f1(f=X2[A+72>>2],r=X2[76+(B+X2[A+32>>2]|0)>>2])){if(0<=(0|(s=X2[f+8>>2]))){if(s)for(;;){if(!(B=X2[u+32>>2]))break A;if(u=B,!(s=s-1|0))break;}}else u=X2[f>>2];}else u=0;B=X2[84+k>>2],X2[r>>2]=X2[80+k>>2],X2[r+4>>2]=B,l=X2[(s=104+k|0)+4>>2],X2[(B=r+24|0)>>2]=X2[s>>2],X2[B+4>>2]=l,s=X2[4+n>>2],X2[(B=r+16|0)>>2]=X2[n>>2],X2[B+4>>2]=s,s=X2[4+i>>2],X2[(B=r+8|0)>>2]=X2[i>>2],X2[B+4>>2]=s,i1(f,u,r);}if(!((0|(v=v+1|0))<X2[A+24>>2]))break;}u=X2[e+4>>2],X2[A+84>>2]=X2[e>>2],X2[A+88>>2]=u,B=X2[(e=e+8|0)+4>>2],X2[(u=A+92|0)>>2]=X2[e>>2],X2[u+4>>2]=B,N2[X2[X2[A>>2]+68>>2]](A),K2=144+k|0;},function(A){return (A|=0)+84|0;},function(A,e,r){var f,i,a;A|=0,e=P2(e),r|=0,P2(0),P2(0),P2(0),X2[(f=44+(K2=a=K2-96|0)|0)>>2]=0,X2[4+f>>2]=0,X2[(f=56+a|0)>>2]=0,X2[4+f>>2]=0,X2[52+a>>2]=1065353216,X2[(f=a+64|0)>>2]=0,X2[4+f>>2]=0,X2[(f=76+a|0)>>2]=0,X2[4+f>>2]=0,X2[72+a>>2]=1065353216,X2[(f=84+a|0)>>2]=0,X2[4+f>>2]=0,X2[92+a>>2]=0,X2[36+a>>2]=0,X2[40+a>>2]=0,X2[32+a>>2]=1065353216,N2[X2[X2[A>>2]+8>>2]](A,32+a|0,16+a|0,a),e=P2(e/P2(12)),f=P2(P2(U2[a>>2]-U2[16+a>>2])*P2(.5)),f=P2(f+f),f=P2(f*f),A=P2(P2(U2[4+a>>2]-U2[20+a>>2])*P2(.5)),A=P2(A+A),A=P2(A*A),U2[r+8>>2]=e*P2(f+A),i=f,f=P2(P2(U2[8+a>>2]-U2[24+a>>2])*P2(.5)),f=P2(f+f),f=P2(f*f),U2[r+4>>2]=e*P2(i+f),U2[r>>2]=e*P2(A+f),K2=96+a|0;},function(A){return 14828;},function(A,e){A|=0,e=P2(e),U2[A+80>>2]=e;},function(A){return P2(U2[(A|=0)+80>>2]);},function(A){return 24;},function(A,e,r){e|=0;var f,i,a,n,b,t,o=0,c=0,k=0,u=0,s=0,o=0|N2[X2[X2[(r|=0)>>2]+40>>2]](r,A|=0),c=0|N2[X2[X2[r>>2]+28>>2]](r,o);if((X2[e>>2]=c)&&N2[X2[X2[r>>2]+48>>2]](r,o),o=X2[A+4>>2],X2[e+8>>2]=0,X2[e+12>>2]=0,X2[e+4>>2]=o,U2[e+20>>2]=U2[A+80>>2],o=X2[A+24>>2],X2[e+16>>2]=o){if(f=0|N2[X2[X2[r>>2]+16>>2]](r,76,o),o=X2[8+f>>2],i=e,a=0|N2[X2[X2[r>>2]+28>>2]](r,o),X2[i+12>>2]=a,0<X2[e+16>>2])for(o=o+36|0,u=X2[A+32>>2],k=36;;)if(U2[o+36>>2]=U2[(c=k+u|0)+36>>2],i=o+28|0,a=0|N2[X2[X2[r>>2]+28>>2]](r,X2[c+28>>2]),X2[i>>2]=a,0|N2[X2[X2[r>>2]+24>>2]](r,X2[28+(X2[A+32>>2]+k|0)>>2])||(c=X2[28+(X2[A+32>>2]+k|0)>>2],a=r,n=0|N2[X2[X2[c>>2]+52>>2]](c),i=X2[X2[r>>2]+16>>2],c=0|N2[i](0|a,0|n,1),u=X2[28+(X2[A+32>>2]+k|0)>>2],b=r,n=c,a=0|N2[X2[X2[u>>2]+56>>2]](u,X2[c+8>>2],r),t=X2[28+(X2[A+32>>2]+k|0)>>2],i=X2[X2[r>>2]+20>>2],N2[i](0|b,0|n,0|a,1346455635,0|t)),u=X2[A+32>>2],U2[o-36>>2]=U2[(c=u+k|0)-36>>2],U2[o-32>>2]=U2[c-32>>2],U2[o-28>>2]=U2[c-28>>2],U2[o-24>>2]=U2[c-24>>2],U2[o-20>>2]=U2[c-20>>2],U2[o-16>>2]=U2[c-16>>2],U2[o-12>>2]=U2[c-12>>2],U2[o-8>>2]=U2[c-8>>2],U2[o-4>>2]=U2[c-4>>2],U2[o>>2]=U2[c>>2],U2[o+4>>2]=U2[c+4>>2],U2[o+8>>2]=U2[c+8>>2],U2[o+12>>2]=U2[c+12>>2],U2[o+16>>2]=U2[c+16>>2],U2[o+20>>2]=U2[c+20>>2],X2[o+32>>2]=X2[c+32>>2],U2[o+24>>2]=U2[c+24>>2],k=k+80|0,o=o+76|0,!((0|(s=s+1|0))<X2[e+16>>2]))break;N2[X2[X2[r>>2]+20>>2]](r,f,11712,1497453121,X2[8+f>>2]);}return 11737;},function(A,e){e|=0;var r=0,f=0;if(X2[(A|=0)+76>>2]=X2[A+76>>2]+1,1<=(0|(r=X2[A+24>>2])))for(f=r+1|0,r=H2(r,80)-16|0;;)if(X2[X2[A+32>>2]+r>>2]==(0|e)&&b1(A,f-2|0),r=r-80|0,!(1<(0|(f=f-1|0))))break;N2[X2[X2[A>>2]+68>>2]](A);},function(A){A|=0,P2(0);var e,r,f,i=0,a=0;if(K2=f=K2-32|0,X2[A+56>>2]=-581039253,X2[A+60>>2]=-581039253,X2[A+40>>2]=1566444395,X2[A+44>>2]=1566444395,X2[(e=A- -64|0)>>2]=-581039253,X2[4+e>>2]=0,X2[(e=A+48|0)>>2]=1566444395,X2[4+e>>2]=0,1<=X2[A+24>>2])for(;;)if(e=X2[A+32>>2]+i|0,r=X2[e+64>>2],N2[X2[X2[r>>2]+8>>2]](r,e,16+f|0,f),(r=U2[16+f>>2])<U2[A+40>>2]&&(U2[A+40>>2]=r),(r=U2[f>>2])>U2[A+56>>2]&&(U2[A+56>>2]=r),(r=U2[20+f>>2])<U2[A+44>>2]&&(U2[A+44>>2]=r),(r=U2[4+f>>2])>U2[A+60>>2]&&(U2[A+60>>2]=r),(r=U2[24+f>>2])<U2[A+48>>2]&&(U2[A+48>>2]=r),(r=U2[8+f>>2])>U2[A+64>>2]&&(U2[A+64>>2]=r),i=i+80|0,!((0|(a=a+1|0))<X2[A+24>>2]))break;K2=32+f|0;},function(A){var e;return X2[(A|=0)>>2]=12040,(e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+32>>2]=0,S2[A+36|0]=1,X2[(e=A+24|0)>>2]=0,(X2[4+e>>2]=0)|A;},function(A){var e;X2[(A|=0)>>2]=12040,(e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+32>>2]=0,S2[A+36|0]=1,X2[(e=A+24|0)>>2]=0,X2[4+e>>2]=0,X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b,t,o,c,k=0,u=0,s=0,l=0,B=(P2(0),P2(0),P2(0),P2(0)),v=P2(0),d=P2(0),Z=0;if(K2=r=K2-80|0,1<=(0|(b=0|N2[X2[X2[A>>2]+28>>2]](A))))for(i=U2[A+12>>2],a=U2[A+8>>2],n=U2[A+4>>2];;){N2[X2[X2[A>>2]+16>>2]](A,r+76|0,r+52|0,r- -64|0,r+56|0,r+72|0,r+68|0,r+48|0,r+60|0,Z);A:{e:switch(X2[r+64>>2]){case 0:r:switch(X2[r+60>>2]-2|0){case 3:if(X2[r+48>>2]<1)break A;for(f=0;;)if(l=X2[r+76>>2],s=X2[r+56>>2],u=X2[r+72>>2]+H2(X2[r+68>>2],f)|0,k=l+H2(s,J2[0|u])|0,B=U2[k>>2],v=U2[k+4>>2],d=U2[k+8>>2],X2[r+12>>2]=0,U2[r+8>>2]=i*d,U2[r+4>>2]=a*v,U2[r>>2]=n*B,k=l+H2(s,J2[u+1|0])|0,B=U2[k>>2],v=U2[k+4>>2],d=U2[k+8>>2],X2[r+28>>2]=0,U2[r+24>>2]=i*d,U2[r+20>>2]=a*v,U2[r+16>>2]=n*B,u=l+H2(s,J2[u+2|0])|0,B=U2[u>>2],v=U2[u+4>>2],d=U2[u+8>>2],X2[r+44>>2]=0,U2[r+40>>2]=i*d,U2[r+36>>2]=a*v,U2[r+32>>2]=n*B,N2[X2[X2[e>>2]+8>>2]](e,r,Z,f),!((0|(f=f+1|0))<X2[r+48>>2]))break;break A;case 1:if(X2[r+48>>2]<1)break A;for(f=0;;)if(l=X2[r+76>>2],s=X2[r+56>>2],u=X2[r+72>>2]+H2(X2[r+68>>2],f)|0,k=l+H2(s,A2[u>>1])|0,B=U2[k>>2],v=U2[k+4>>2],d=U2[k+8>>2],X2[r+12>>2]=0,U2[r+8>>2]=i*d,U2[r+4>>2]=a*v,U2[r>>2]=n*B,k=l+H2(s,A2[u+2>>1])|0,B=U2[k>>2],v=U2[k+4>>2],d=U2[k+8>>2],X2[r+28>>2]=0,U2[r+24>>2]=i*d,U2[r+20>>2]=a*v,U2[r+16>>2]=n*B,u=l+H2(s,A2[u+4>>1])|0,B=U2[u+8>>2],v=U2[u+4>>2],d=U2[u>>2],X2[r+44>>2]=0,U2[r+32>>2]=n*d,U2[r+36>>2]=a*v,U2[r+40>>2]=i*B,N2[X2[X2[e>>2]+8>>2]](e,r,Z,f),!((0|(f=f+1|0))<X2[r+48>>2]))break;break A;case 0:break r;default:break A;}if(X2[r+48>>2]<1)break A;for(f=0;;)if(l=X2[r+76>>2],s=X2[r+56>>2],u=X2[r+72>>2]+H2(X2[r+68>>2],f)|0,k=l+H2(s,X2[u>>2])|0,B=U2[k>>2],v=U2[k+4>>2],d=U2[k+8>>2],X2[r+12>>2]=0,U2[r+8>>2]=i*d,U2[r+4>>2]=a*v,U2[r>>2]=n*B,k=l+H2(s,X2[u+4>>2])|0,B=U2[k>>2],v=U2[k+4>>2],d=U2[k+8>>2],X2[r+28>>2]=0,U2[r+24>>2]=i*d,U2[r+20>>2]=a*v,U2[r+16>>2]=n*B,u=l+H2(s,X2[u+8>>2])|0,B=U2[u+8>>2],v=U2[u+4>>2],d=U2[u>>2],X2[r+44>>2]=0,U2[r+32>>2]=n*d,U2[r+36>>2]=a*v,U2[r+40>>2]=i*B,N2[X2[X2[e>>2]+8>>2]](e,r,Z,f),!((0|(f=f+1|0))<X2[r+48>>2]))break;break A;case 1:break e;default:break A;}e:switch(X2[r+60>>2]-2|0){case 3:if(X2[r+48>>2]<1)break A;for(f=0;;)if(u=X2[r+72>>2]+H2(X2[r+68>>2],f)|0,s=J2[0|u],X2[r+12>>2]=0,l=X2[r+76>>2],k=s,s=X2[r+56>>2],k=l+H2(k,s)|0,U2[r+8>>2]=i*P2(M[k+16>>3]),U2[r+4>>2]=a*P2(M[k+8>>3]),U2[r>>2]=n*P2(M[k>>3]),k=J2[u+1|0],X2[r+28>>2]=0,k=l+H2(k,s)|0,U2[r+24>>2]=i*P2(M[k+16>>3]),U2[r+20>>2]=a*P2(M[k+8>>3]),U2[r+16>>2]=n*P2(M[k>>3]),u=l+H2(s,J2[u+2|0])|0,t=M[u>>3],o=M[u+8>>3],c=M[u+16>>3],X2[r+44>>2]=0,U2[r+40>>2]=i*P2(c),U2[r+36>>2]=a*P2(o),U2[r+32>>2]=n*P2(t),N2[X2[X2[e>>2]+8>>2]](e,r,Z,f),!((0|(f=f+1|0))<X2[r+48>>2]))break;break A;case 1:if(X2[r+48>>2]<1)break A;for(f=0;;)if(X2[r+12>>2]=0,X2[r+28>>2]=0,l=X2[r+76>>2],s=X2[r+56>>2],u=X2[r+72>>2]+H2(X2[r+68>>2],f)|0,k=l+H2(s,A2[u>>1])|0,U2[r+8>>2]=i*P2(M[k+16>>3]),U2[r+4>>2]=a*P2(M[k+8>>3]),U2[r>>2]=n*P2(M[k>>3]),k=l+H2(s,A2[u+2>>1])|0,U2[r+24>>2]=i*P2(M[k+16>>3]),U2[r+20>>2]=a*P2(M[k+8>>3]),U2[r+16>>2]=n*P2(M[k>>3]),X2[r+44>>2]=0,u=l+H2(s,A2[u+4>>1])|0,U2[r+32>>2]=n*P2(M[u>>3]),U2[r+36>>2]=a*P2(M[u+8>>3]),U2[r+40>>2]=i*P2(M[u+16>>3]),N2[X2[X2[e>>2]+8>>2]](e,r,Z,f),!((0|(f=f+1|0))<X2[r+48>>2]))break;break A;case 0:break e;default:break A;}if(!(X2[r+48>>2]<1))for(f=0;;)if(X2[r+12>>2]=0,X2[r+28>>2]=0,l=X2[r+76>>2],s=X2[r+56>>2],u=X2[r+72>>2]+H2(X2[r+68>>2],f)|0,k=l+H2(s,X2[u>>2])|0,U2[r+8>>2]=i*P2(M[k+16>>3]),U2[r+4>>2]=a*P2(M[k+8>>3]),U2[r>>2]=n*P2(M[k>>3]),k=l+H2(s,X2[u+4>>2])|0,U2[r+24>>2]=i*P2(M[k+16>>3]),U2[r+20>>2]=a*P2(M[k+8>>3]),U2[r+16>>2]=n*P2(M[k>>3]),X2[r+44>>2]=0,u=l+H2(s,X2[u+8>>2])|0,U2[r+32>>2]=n*P2(M[u>>3]),U2[r+36>>2]=a*P2(M[u+8>>3]),U2[r+40>>2]=i*P2(M[u+16>>3]),N2[X2[X2[e>>2]+8>>2]](e,r,Z,f),!((0|(f=f+1|0))<X2[r+48>>2]))break;}if(N2[X2[X2[A>>2]+24>>2]](A,Z),(0|b)==(0|(Z=Z+1|0)))break;}K2=r+80|0;},t1,t1,o1,o1,k1,o1,o1,function(A){return 1==X2[(A|=0)+48>>2]|0;},function(A,e,r){r|=0;var f,i=X2[(e|=0)+4>>2];X2[(A|=0)+52>>2]=X2[e>>2],X2[A+56>>2]=i,f=X2[(e=e+8|0)+4>>2],X2[(i=A+60|0)>>2]=X2[e>>2],X2[4+i>>2]=f,e=X2[r+4>>2],X2[A+68>>2]=X2[r>>2],X2[A+72>>2]=e,i=X2[(r=r+8|0)+4>>2],X2[(e=A+76|0)>>2]=X2[r>>2],X2[e+4>>2]=i,X2[A+48>>2]=1;},function(A,e,r){r|=0;var f,i=X2[(A|=0)+56>>2];X2[(e|=0)>>2]=X2[A+52>>2],X2[e+4>>2]=i,f=X2[4+(i=A+60|0)>>2],X2[(e=e+8|0)>>2]=X2[i>>2],X2[e+4>>2]=f,f=X2[4+(i=A+76|0)>>2],X2[(e=r+8|0)>>2]=X2[i>>2],X2[e+4>>2]=f,e=X2[A+72>>2],X2[r>>2]=X2[A+68>>2],X2[r+4>>2]=e;},function(A){return 28;},function(A,e,r){e|=0,r|=0;var f,i,a,n=0,b=0,t=0,o=0,c=0,k=0,u=0,s=0,l=0;if(K2=a=K2-32|0,n=0|N2[X2[X2[(A|=0)>>2]+28>>2]](A),X2[e>>2]=0,X2[e+20>>2]=n){if(f=0|N2[X2[X2[r>>2]+16>>2]](r,32,n),c=X2[8+f>>2],s=e,l=0|N2[X2[X2[r>>2]+28>>2]](r,c),X2[s>>2]=l,0<(0|(i=0|N2[X2[X2[A>>2]+28>>2]](A))))for(;;){N2[X2[X2[A>>2]+16>>2]](A,28+a|0,4+a|0,16+a|0,8+a|0,24+a|0,20+a|0,a,12+a|0,u),X2[c>>2]=0,X2[c+4>>2]=0,X2[(n=c+8|0)>>2]=0,X2[n+4>>2]=0,X2[(n=c+16|0)>>2]=0,X2[n+4>>2]=0,n=X2[a>>2],X2[c+24>>2]=n,X2[c+28>>2]=X2[4+a>>2];A:{e:switch(X2[12+a>>2]-2|0){case 0:if(!n)break A;if(t=0|N2[X2[X2[r>>2]+16>>2]](r,4,H2(n,3)),n=X2[t+8>>2],s=c,l=0|N2[X2[X2[r>>2]+28>>2]](r,n),X2[s+8>>2]=l,1<=X2[a>>2])for(b=0,k=X2[24+a>>2];;)if(o=k+H2(X2[20+a>>2],b)|0,X2[n>>2]=X2[o>>2],X2[n+4>>2]=X2[o+4>>2],X2[n+8>>2]=X2[o+8>>2],n=n+12|0,!((0|(b=b+1|0))<X2[a>>2]))break;N2[X2[X2[r>>2]+20>>2]](r,t,11848,1497453121,X2[t+8>>2]);break A;case 1:if(!n)break A;if(t=0|N2[X2[X2[r>>2]+16>>2]](r,8,n),n=X2[t+8>>2],s=c,l=0|N2[X2[X2[r>>2]+28>>2]](r,n),X2[s+12>>2]=l,1<=X2[a>>2])for(b=0;;)if(o=X2[24+a>>2]+H2(X2[20+a>>2],b)|0,$[n>>1]=A2[o>>1],$[n+2>>1]=A2[o+2>>1],o=A2[o+4>>1],$[n+6>>1]=0,$[n+4>>1]=o,n=n+8|0,!((0|(b=b+1|0))<X2[a>>2]))break;N2[X2[X2[r>>2]+20>>2]](r,t,11863,1497453121,X2[t+8>>2]);break A;case 3:break e;default:break A;}if(n){if(t=0|N2[X2[X2[r>>2]+16>>2]](r,4,n),n=X2[t+8>>2],s=c,l=0|N2[X2[X2[r>>2]+28>>2]](r,n),X2[s+16>>2]=l,1<=X2[a>>2])for(b=0;;)if(o=X2[24+a>>2]+H2(X2[20+a>>2],b)|0,S2[0|n]=J2[0|o],S2[n+1|0]=J2[o+1|0],S2[n+2|0]=J2[o+2|0],n=n+4|(S2[n+3|0]=0),!((0|(b=b+1|0))<X2[a>>2]))break;N2[X2[X2[r>>2]+20>>2]](r,t,11890,1497453121,X2[t+8>>2]);}}A:{e:switch(X2[16+a>>2]){case 0:if(!(n=X2[4+a>>2]))break A;if(o=0|N2[X2[X2[r>>2]+16>>2]](r,16,n),n=X2[o+8>>2],s=c,l=0|N2[X2[X2[r>>2]+28>>2]](r,n),X2[s>>2]=l,1<=(0|(t=X2[4+a>>2])))for(k=X2[8+a>>2],b=X2[28+a>>2];;)if(U2[n>>2]=U2[b>>2],U2[n+4>>2]=U2[b+4>>2],U2[n+8>>2]=U2[b+8>>2],b=b+k|0,n=n+16|0,!(t=t-1|0))break;N2[X2[X2[r>>2]+20>>2]](r,o,11913,1497453121,X2[o+8>>2]);break A;case 1:break e;default:break A;}if(n=X2[4+a>>2]){if(o=0|N2[X2[X2[r>>2]+16>>2]](r,32,n),n=X2[o+8>>2],s=c,l=0|N2[X2[X2[r>>2]+28>>2]](r,n),X2[s+4>>2]=l,1<=(0|(t=X2[4+a>>2])))for(k=X2[8+a>>2],b=X2[28+a>>2];;)if(M[n>>3]=M[b>>3],M[n+8>>3]=M[b+8>>3],M[n+16>>3]=M[b+16>>3],b=b+k|0,n=n+32|0,!(t=t-1|0))break;N2[X2[X2[r>>2]+20>>2]](r,o,11932,1497453121,X2[o+8>>2]);}}if(N2[X2[X2[A>>2]+24>>2]](A,u),c=c+32|0,(0|i)==(0|(u=u+1|0)))break;}N2[X2[X2[r>>2]+20>>2]](r,f,11952,1497453121,X2[8+f>>2]);}return X2[e+24>>2]=0,U2[e+4>>2]=U2[A+4>>2],U2[e+8>>2]=U2[A+8>>2],U2[e+12>>2]=U2[A+12>>2],U2[e+16>>2]=U2[A+16>>2],K2=32+a|0,11967;},c1,function(A){A=c1(A|=0),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A,e){e|=0;var r,f=0,i=0,a=0,n=0,b=0;A:{if(J2[(A|=0)+165|0]){if(X2[A+92>>2]>=(0|e))break A;if(e&&(X2[6258]=X2[6258]+1,(f=L2(19+(e<<4)|0))&&(X2[(a=f+19&-16)-4>>2]=f)),1<=(0|(n=X2[A+88>>2])))for(;;)if(i=X2[A+96>>2]+b|0,f=X2[i+4>>2],X2[(r=b+a|0)>>2]=X2[i>>2],X2[4+r>>2]=f,f=X2[(i=i+8|0)+4>>2],X2[(r=8+r|0)>>2]=X2[i>>2],X2[4+r>>2]=f,b=b+16|0,!(n=n-1|0))break;return (f=X2[A+96>>2])&&J2[A+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+96>>2]=a,X2[A+92>>2]=e,void(S2[A+100|0]=1);}if(!(X2[A+112>>2]>=(0|e))){e&&(X2[6258]=X2[6258]+1,(i=L2(19+(e<<2)|0))&&(X2[(f=i+19&-16)-4>>2]=i)),i=X2[A+116>>2];e:{if(1<=(0|(a=X2[A+108>>2]))){for(b=f,n=i;;)if(U2[b>>2]=U2[n>>2],b=b+4|0,n=n+4|0,!(a=a-1|0))break;}else if(!i)break e;J2[A+120|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2]));}X2[A+116>>2]=f,X2[A+112>>2]=e,S2[A+120|0]=1;}}},function(A,e){e|=0;var r=0,f=0,i=0,a=0,n=0;A:{if(J2[(A|=0)+164|0]){if(X2[A+132>>2]>=(0|e))break A;e&&(X2[6258]=X2[6258]+1,(r=L2(19+(e<<2)|0))&&(X2[(i=r+19&-16)-4>>2]=r)),a=X2[A+136>>2];e:{if(1<=(0|(f=X2[A+128>>2]))){for(n=i,r=a;;)if(X2[n>>2]=X2[r>>2],n=n+4|0,r=r+4|0,!(f=f-1|0))break;}else if(!a)break e;J2[A+140|0]&&(X2[6259]=X2[6259]+1,q2(X2[a-4>>2]));}return X2[A+136>>2]=i,X2[A+132>>2]=e,void(S2[A+140|0]=1);}if(!(X2[A+152>>2]>=(0|e))){e&&(X2[6258]=X2[6258]+1,(r=L2(19+(e<<1)|0))&&(X2[(i=r+19&-16)-4>>2]=r)),a=X2[A+156>>2];e:{if(1<=(0|(f=X2[A+148>>2]))){for(n=i,r=a;;)if($[n>>1]=A2[r>>1],n=n+2|0,r=r+2|0,!(f=f-1|0))break;}else if(!a)break e;J2[A+160|0]&&(X2[6259]=X2[6259]+1,q2(X2[a-4>>2]));}X2[A+156>>2]=i,X2[A+152>>2]=e,S2[A+160|0]=1;}}},e,z0,function(A,e,r,f){A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var i,a=U2[(g=A+32|0)>>2],n=U2[(E=A+48|0)>>2],b=U2[(Z=A+28|0)>>2],t=U2[(_=A+44|0)>>2],o=U2[A+24>>2],c=U2[A+40>>2],k=P2(N2[X2[X2[A>>2]+48>>2]](A)),u=P2(N2[X2[X2[A>>2]+48>>2]](A)),s=P2(N2[X2[X2[A>>2]+48>>2]](A)),l=U2[e+52>>2],B=U2[e+24>>2],v=U2[e+20>>2],d=U2[e+56>>2],Z=U2[Z>>2],_=U2[_>>2],g=U2[g>>2],E=U2[E>>2],Q=U2[e+40>>2],w=U2[e+36>>2],G=U2[e+48>>2],C=U2[e+8>>2],h=U2[e>>2],F=U2[e+4>>2],Y=U2[e+16>>2],m=U2[A+24>>2],A=U2[A+40>>2],e=U2[e+32>>2];X2[r+12>>2]=0,i=d,d=P2(P2(A+m)*P2(.5)),Z=P2(P2(_+Z)*P2(.5)),_=P2(P2(E+g)*P2(.5)),g=P2(i+P2(P2(P2(e*d)+P2(w*Z))+P2(Q*_))),o=P2(k+P2(P2(c-o)*P2(.5))),i=P2(o*P2(j2(e))),e=P2(u+P2(P2(t-b)*P2(.5))),i=P2(i+P2(e*P2(j2(w)))),w=P2(s+P2(P2(n-a)*P2(.5))),Q=P2(i+P2(w*P2(j2(Q)))),U2[r+8>>2]=g-Q,a=P2(l+P2(P2(P2(d*Y)+P2(Z*v))+P2(_*B))),B=P2(P2(P2(o*P2(j2(Y)))+P2(e*P2(j2(v))))+P2(w*P2(j2(B)))),U2[r+4>>2]=a-B,v=P2(G+P2(P2(P2(d*h)+P2(Z*F))+P2(_*C))),w=P2(P2(P2(o*P2(j2(h)))+P2(e*P2(j2(F))))+P2(w*P2(j2(C)))),U2[r>>2]=v-w,X2[f+12>>2]=0,U2[f+8>>2]=Q+g,U2[f+4>>2]=B+a,U2[f>>2]=w+v;},l1,function(A){return X2[(A|=0)+56>>2]+4|0;},q0,function(A){return 12530;},Q0,function(A,e,r){e|=0;var f=0|N2[X2[X2[(r|=0)>>2]+40>>2]](r,A|=0),i=0|N2[X2[X2[r>>2]+28>>2]](r,f);return (X2[e>>2]=i)&&N2[X2[X2[r>>2]+48>>2]](r,f),A=X2[A+4>>2],X2[e+8>>2]=0,X2[e+4>>2]=A,10195;},function(A,e,r,f){var i,a,n,b;A|=0,e|=0,f|=0,K2=b=K2-48|0,n=X2[4+(a=(r|=0)+8|0)>>2],X2[(i=24+b|0)>>2]=X2[a>>2],X2[4+i>>2]=n,n=X2[4+(a=f+8|0)>>2],X2[(i=40+b|0)>>2]=X2[a>>2],X2[4+i>>2]=n,X2[8+b>>2]=12404,i=X2[r+4>>2],X2[16+b>>2]=X2[r>>2],X2[20+b>>2]=i,i=X2[f+4>>2],X2[32+b>>2]=X2[f>>2],X2[36+b>>2]=i,X2[12+b>>2]=e,A=X2[A+56>>2],N2[X2[X2[A>>2]+8>>2]](A,8+b|0,r,f),K2=48+b|0;},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b,t,o=0;P2(0),P2(0),P2(0),P2(0),P2(0),X2[(o=f=52+(K2=t=K2-144|0)|0)>>2]=0,X2[4+o>>2]=0,X2[(o=t+64|0)>>2]=0,X2[4+o>>2]=0,X2[(o=72+t|0)>>2]=0,X2[4+o>>2]=0,X2[(o=84+t|0)>>2]=0,X2[4+o>>2]=0,X2[80+t>>2]=1065353216,X2[(o=92+t|0)>>2]=0,X2[4+o>>2]=0,X2[(o=104+t|0)>>2]=0,X2[4+o>>2]=0,X2[100+t>>2]=1065353216,X2[(o=112+t|0)>>2]=0,X2[4+o>>2]=0,X2[(o=120+t|0)>>2]=0,X2[4+o>>2]=-581039253,X2[140+t>>2]=0,o=U2[r+8>>2],i=U2[r>>2],a=P2(i*P2(0)),n=U2[r+4>>2],b=P2(n*P2(0)),U2[136+t>>2]=o+P2(a+b),o=P2(o*P2(0)),U2[132+t>>2]=P2(n+a)+o,X2[44+t>>2]=0,X2[48+t>>2]=0,X2[40+t>>2]=12348,X2[60+t>>2]=1065353216,U2[128+t>>2]=P2(i+b)+o,X2[32+t>>2]=1566444395,X2[36+t>>2]=0,X2[24+t>>2]=1566444395,X2[28+t>>2]=1566444395,X2[16+t>>2]=-581039253,X2[20+t>>2]=0,X2[8+t>>2]=-581039253,X2[12+t>>2]=-581039253,N2[X2[X2[e>>2]+64>>2]](e,40+t|0,8+t|0,24+t|0),r=X2[4+f>>2],X2[(e=A+8|0)>>2]=X2[f>>2],X2[e+4>>2]=r,e=X2[48+t>>2],X2[A>>2]=X2[44+t>>2],X2[A+4>>2]=e,K2=144+t|0;},function(A,e,r){N2[X2[X2[(e|=0)>>2]+68>>2]](A|=0,e,r|=0);},e,A,function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b=P2(0),t=P2(0),o=0,c=(P2(0),P2(0),P2(0),0);r=A+4|0,t=U2[A+84>>2],i=U2[A+88>>2],a=U2[A+92>>2],n=U2[A+96>>2],t<(b=P2(P2(P2(i*U2[e>>2])+P2(a*U2[e+4>>2]))+P2(n*U2[e+8>>2])))&&(U2[A+84>>2]=b,f=X2[e+4>>2],X2[r>>2]=X2[e>>2],X2[r+4>>2]=f,c=X2[(o=e+8|0)+4>>2],X2[(f=r+8|0)>>2]=X2[o>>2],X2[f+4>>2]=c,t=b),t<(b=P2(P2(P2(i*U2[e+16>>2])+P2(a*U2[e+20>>2]))+P2(n*U2[e+24>>2])))?(U2[A+84>>2]=b,o=X2[(f=e+16|0)+4>>2],X2[r>>2]=X2[f>>2],X2[r+4>>2]=o,c=X2[(f=f+8|0)+4>>2],X2[(o=r+8|0)>>2]=X2[f>>2],X2[o+4>>2]=c):b=t,b<(t=P2(P2(P2(i*U2[e+32>>2])+P2(a*U2[e+36>>2]))+P2(n*U2[e+40>>2])))&&(U2[A+84>>2]=t,e=X2[(A=e+32|0)+4>>2],X2[r>>2]=X2[A>>2],X2[r+4>>2]=e,e=r+8|0,r=X2[(A=A+8|0)+4>>2],X2[e>>2]=X2[A>>2],X2[e+4>>2]=r);},e,A,function(A,e,r,f){A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0);var i,a,n,b=U2[e>>2],t=U2[e+16>>2],o=U2[e+32>>2];U2[A+24>>2]<((a=b<t?b:t)<o?a:o)||U2[(o<U2[e+(i=!(t<b)<<4)>>2]?i:32)+e>>2]<U2[A+8>>2]||(b=U2[e+8>>2],t=U2[(i=e+24|0)>>2],o=U2[(n=e+40|0)>>2],U2[A+32>>2]<((a=b<t?b:t)<o?a:o)||U2[(o<U2[(i=t<b?e+8|0:i)>>2]?i:n)>>2]<U2[A+16>>2]||(b=U2[e+4>>2],t=U2[(i=e+20|0)>>2],o=U2[(n=e+36|0)>>2],U2[A+28>>2]<((a=b<t?b:t)<o?a:o)||U2[(o<U2[(i=t<b?e+4|0:i)>>2]?i:n)>>2]<U2[A+12>>2]||(A=X2[A+4>>2],N2[X2[X2[A>>2]+8>>2]](A,e,r,f))));},B1,function(A){A=B1(A|=0),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},v1,_1,function(A,e,r){r|=0;var f,i,a=0,n=0,b=0,t=0,o=0;if(U2[(e|=0)+16>>2]=U2[(A|=0)+20>>2],U2[e+20>>2]=U2[A+24>>2],U2[e+24>>2]=U2[A+28>>2],U2[e+28>>2]=U2[A+32>>2],U2[e>>2]=U2[A+4>>2],U2[e+4>>2]=U2[A+8>>2],U2[e+8>>2]=U2[A+12>>2],U2[e+12>>2]=U2[A+16>>2],U2[e+32>>2]=U2[A+36>>2],U2[e+36>>2]=U2[A+40>>2],U2[e+40>>2]=U2[A+44>>2],U2[e+44>>2]=U2[A+48>>2],X2[e+48>>2]=X2[A+56>>2],X2[e+52>>2]=J2[A+60|0],a=X2[A+88>>2],X2[e+56>>2]=a){if(a=0|N2[X2[X2[r>>2]+28>>2]](r,X2[A+96>>2]),X2[e+64>>2]=a){if(b=X2[A+88>>2],o=0|N2[X2[X2[r>>2]+16>>2]](r,48,b),1<=(0|b))for(a=X2[o+8>>2]+44|0,t=40;;)if(n=X2[A+96>>2]+t|0,U2[a-28>>2]=U2[n-24>>2],U2[a-24>>2]=U2[n-20>>2],U2[a-20>>2]=U2[n-16>>2],U2[a-16>>2]=U2[n-12>>2],U2[a-44>>2]=U2[n-40>>2],U2[a-40>>2]=U2[n-36>>2],U2[a-36>>2]=U2[n-32>>2],U2[a-32>>2]=U2[n-28>>2],X2[a-12>>2]=X2[n-8>>2],X2[a-8>>2]=X2[n-4>>2],n=X2[n>>2],X2[a>>2]=0,X2[a-4>>2]=n,t=t- -64|0,a=a+48|0,!(b=b-1|0))break;N2[X2[X2[r>>2]+20>>2]](r,o,12612,1497453121,X2[A+96>>2]);}}else X2[e+64>>2]=0;if(a=X2[A+128>>2],X2[e+60>>2]=a){if(a=0|N2[X2[X2[r>>2]+28>>2]](r,X2[A+136>>2]),X2[e+68>>2]=a){if(b=X2[A+128>>2],f=(t=0)|N2[X2[X2[r>>2]+16>>2]](r,16,b),(0|b)<=0)o=X2[A+136>>2];else for(o=X2[A+136>>2],i=X2[8+f>>2];;)if($[(a=t+i|0)+6>>1]=A2[(n=t+o|0)+6>>1],$[a+8>>1]=A2[n+8>>1],$[a+10>>1]=A2[n+10>>1],$[a>>1]=A2[n>>1],$[a+2>>1]=A2[n+2>>1],X2[a+12>>2]=X2[n+12>>2],$[a+4>>1]=A2[n+4>>1],t=t+16|0,!(b=b-1|0))break;N2[X2[X2[r>>2]+20>>2]](r,f,12635,1497453121,o);}}else X2[e+68>>2]=0;if(X2[e+76>>2]=X2[A+144>>2],a=X2[A+152>>2],X2[e+80>>2]=a){if(a=e,e=0|N2[X2[X2[r>>2]+28>>2]](r,X2[A+160>>2]),X2[a+72>>2]=e){if(t=X2[A+152>>2],n=0|N2[X2[X2[r>>2]+16>>2]](r,20,t),(0|t)<=0)A=X2[A+160>>2];else for(a=(A=X2[A+160>>2])+16|0,e=X2[n+8>>2];;)if($[e+14>>1]=A2[a-10>>1],$[e+16>>1]=A2[a-8>>1],$[e+18>>1]=A2[a-6>>1],$[e+8>>1]=A2[a-16>>1],$[e+10>>1]=A2[a-14>>1],o=X2[(b=a-4|0)+4>>2],X2[e>>2]=X2[b>>2],X2[e+4>>2]=o,$[e+12>>1]=A2[a-12>>1],a=a+32|0,e=e+20|0,!(t=t-1|0))break;N2[X2[X2[r>>2]+20>>2]](r,n,12658,1497453121,A);}}else X2[e+72>>2]=0;return 12679;},function(A,e){var r,f=0,i=0,a=0,n=0,b=0,t=0,o=0,c=0,k=0,u=0;if(K2=r=K2+-64|0,U2[(A|=0)+20>>2]=U2[(e|=0)+16>>2],U2[A+24>>2]=U2[e+20>>2],U2[A+28>>2]=U2[e+24>>2],U2[A+32>>2]=U2[e+28>>2],U2[A+4>>2]=U2[e>>2],U2[A+8>>2]=U2[e+4>>2],U2[A+12>>2]=U2[e+8>>2],U2[A+16>>2]=U2[e+12>>2],U2[A+36>>2]=U2[e+32>>2],U2[A+40>>2]=U2[e+36>>2],U2[A+44>>2]=U2[e+40>>2],U2[A+48>>2]=U2[e+44>>2],X2[A+56>>2]=X2[e+48>>2],S2[A+60|0]=0!=X2[e+52>>2],o=X2[e+56>>2],X2[(f=56+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=48+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=40+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=32+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=24+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=16+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=8+r|0)>>2]=0,X2[f+4>>2]=0,X2[r>>2]=0,((X2[4+r>>2]=0)|(a=X2[A+88>>2]))<(0|o)){if(X2[A+92>>2]<(0|o)){if(o&&(X2[6258]=X2[6258]+1,(f=L2(o<<6|19))&&(X2[(n=f+19&-16)-4>>2]=f)),1<=(0|a))for(f=a;;)if(t=X2[A+96>>2]+c|0,u=X2[(b=t)+4>>2],X2[(i=n+c|0)>>2]=X2[b>>2],X2[i+4>>2]=u,u=X2[(b=b+56|0)+4>>2],X2[(k=i+56|0)>>2]=X2[b>>2],X2[k+4>>2]=u,u=X2[(k=t+48|0)+4>>2],X2[(b=i+48|0)>>2]=X2[k>>2],X2[b+4>>2]=u,u=X2[(k=t+40|0)+4>>2],X2[(b=i+40|0)>>2]=X2[k>>2],X2[b+4>>2]=u,u=X2[(k=t+32|0)+4>>2],X2[(b=i+32|0)>>2]=X2[k>>2],X2[b+4>>2]=u,u=X2[(k=t+24|0)+4>>2],X2[(b=i+24|0)>>2]=X2[k>>2],X2[b+4>>2]=u,u=X2[(k=t+16|0)+4>>2],X2[(b=i+16|0)>>2]=X2[k>>2],X2[b+4>>2]=u,b=X2[(t=t+8|0)+4>>2],X2[(i=i+8|0)>>2]=X2[t>>2],X2[i+4>>2]=b,c=c- -64|0,!(f=f-1|0))break;(f=X2[A+96>>2])&&J2[A+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+96>>2]=n,X2[A+92>>2]=o,S2[A+100|0]=1;}for(f=a<<6,c=o-a|0;;)if(n=X2[4+r>>2],a=X2[A+96>>2]+f|0,X2[(i=a)>>2]=X2[r>>2],X2[i+4>>2]=n,t=X2[(n=56+r|0)+4>>2],X2[(i=i+56|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=48+r|0)+4>>2],X2[(i=a+48|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=40+r|0)+4>>2],X2[(i=a+40|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=32+r|0)+4>>2],X2[(i=a+32|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=24+r|0)+4>>2],X2[(i=a+24|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=16+r|0)+4>>2],X2[(i=a+16|0)>>2]=X2[n>>2],X2[i+4>>2]=t,n=X2[(i=8+r|0)+4>>2],X2[(a=a+8|0)>>2]=X2[i>>2],X2[a+4>>2]=n,f=f- -64|0,!(c=c-1|0))break;}if(1<=(0|(X2[A+88>>2]=o)))for(i=X2[e+64>>2]+40|0,f=X2[A+96>>2]+40|0;;)if(U2[f-24>>2]=U2[i-24>>2],U2[f-20>>2]=U2[i-20>>2],U2[f-16>>2]=U2[i-16>>2],U2[f-12>>2]=U2[i-12>>2],U2[f-40>>2]=U2[i-40>>2],U2[f-36>>2]=U2[i-36>>2],U2[f-32>>2]=U2[i-32>>2],X2[f-8>>2]=X2[i-8>>2],U2[f-28>>2]=U2[i-28>>2],X2[f-4>>2]=X2[i-4>>2],X2[f>>2]=X2[i>>2],f=f- -64|0,i=i+48|0,!(o=o-1|0))break;if(c=X2[e+60>>2],X2[(f=8+r|0)>>2]=0,X2[f+4>>2]=0,X2[r>>2]=0,((X2[4+r>>2]=0)|(a=X2[A+128>>2]))<(0|c)){if(X2[A+132>>2]<(0|c)){if(n=0,c&&(X2[6258]=X2[6258]+1,(f=L2(19+(c<<4)|0))&&(X2[(n=f+19&-16)-4>>2]=f)),1<=(0|a))for(i=0,f=a;;)if(o=X2[A+136>>2]+i|0,k=X2[o+4>>2],X2[(b=t=i+n|0)>>2]=X2[o>>2],X2[b+4>>2]=k,b=X2[(o=o+8|0)+4>>2],X2[(t=t+8|0)>>2]=X2[o>>2],X2[t+4>>2]=b,i=i+16|0,!(f=f-1|0))break;(f=X2[A+136>>2])&&J2[A+140|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+136>>2]=n,X2[A+132>>2]=c,S2[A+140|0]=1;}for(i=a<<4,f=c-a|0;;)if(n=X2[4+r>>2],a=X2[A+136>>2]+i|0,X2[a>>2]=X2[r>>2],X2[a+4>>2]=n,n=X2[(o=8+r|0)+4>>2],X2[(a=a+8|0)>>2]=X2[o>>2],X2[a+4>>2]=n,i=i+16|0,!(f=f-1|0))break;}if(1<=(0|(X2[A+128>>2]=c)))for(i=X2[A+136>>2],n=X2[e+68>>2],o=0;;)if($[(f=i+o|0)+6>>1]=A2[(a=n+o|0)+6>>1],$[f+8>>1]=A2[a+8>>1],$[f+10>>1]=A2[a+10>>1],$[f>>1]=A2[a>>1],$[f+2>>1]=A2[a+2>>1],X2[f+12>>2]=X2[a+12>>2],$[f+4>>1]=A2[a+4>>1],o=o+16|0,!(c=c-1|0))break;if(X2[A+144>>2]=X2[e+76>>2],o=X2[e+80>>2],(0|(a=X2[A+152>>2]))<(0|o)){if(X2[A+156>>2]<(0|o)){if(n=0,o&&(X2[6258]=X2[6258]+1,(f=L2(o<<5|19))&&(X2[(n=f+19&-16)-4>>2]=f)),1<=(0|a))for(i=0,f=a;;)if(t=X2[A+160>>2]+i|0,u=X2[(b=t)+4>>2],X2[(c=i+n|0)>>2]=X2[b>>2],X2[c+4>>2]=u,u=X2[(b=b+24|0)+4>>2],X2[(k=c+24|0)>>2]=X2[b>>2],X2[k+4>>2]=u,u=X2[(k=t+16|0)+4>>2],X2[(b=c+16|0)>>2]=X2[k>>2],X2[b+4>>2]=u,b=X2[(t=t+8|0)+4>>2],X2[(c=c+8|0)>>2]=X2[t>>2],X2[c+4>>2]=b,i=i+32|0,!(f=f-1|0))break;(f=X2[A+160>>2])&&J2[A+164|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+160>>2]=n,X2[A+156>>2]=o,S2[A+164|0]=1;}for(f=a<<5,c=o-a|0;;)if(n=X2[4+r>>2],a=X2[A+160>>2]+f|0,X2[(i=a)>>2]=X2[r>>2],X2[i+4>>2]=n,t=X2[(n=24+r|0)+4>>2],X2[(i=i+24|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=16+r|0)+4>>2],X2[(i=a+16|0)>>2]=X2[n>>2],X2[i+4>>2]=t,n=X2[(i=8+r|0)+4>>2],X2[(a=a+8|0)>>2]=X2[i>>2],X2[a+4>>2]=n,f=f+32|0,!(c=c-1|0))break;}if(1<=(0|(X2[A+152>>2]=o)))for(i=X2[A+160>>2]+16|0,f=X2[e+72>>2];;)if($[i-10>>1]=A2[f+14>>1],$[i-8>>1]=A2[f+16>>1],$[i-6>>1]=A2[f+18>>1],$[i-16>>1]=A2[f+8>>1],$[i-14>>1]=A2[f+10>>1],e=X2[f+4>>2],X2[(A=i-4|0)>>2]=X2[f>>2],X2[A+4>>2]=e,$[i-12>>1]=A2[f+12>>1],i=i+32|0,f=f+20|0,!(o=o-1|0))break;K2=r+64|0;},function(A,e){var r,f=0,i=0,a=0,n=0,b=0,t=0,o=0,c=0,k=0,u=0;if(K2=r=K2+-64|0,U2[(A|=0)+20>>2]=M[(e|=0)+32>>3],U2[A+4>>2]=M[e>>3],U2[A+8>>2]=M[e+8>>3],U2[A+12>>2]=M[e+16>>3],U2[A+16>>2]=M[e+24>>3],U2[A+36>>2]=M[e+64>>3],U2[A+24>>2]=M[e+40>>3],U2[A+28>>2]=M[e+48>>3],U2[A+32>>2]=M[e+56>>3],U2[A+40>>2]=M[e+72>>3],X2[A+56>>2]=X2[e+96>>2],U2[A+44>>2]=M[e+80>>3],U2[A+48>>2]=M[e+88>>3],S2[A+60|0]=0!=X2[e+100>>2],o=X2[e+104>>2],X2[(f=56+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=48+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=40+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=32+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=24+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=16+r|0)>>2]=0,X2[f+4>>2]=0,X2[(f=8+r|0)>>2]=0,X2[f+4>>2]=0,X2[r>>2]=0,((X2[4+r>>2]=0)|(a=X2[A+88>>2]))<(0|o)){if(X2[A+92>>2]<(0|o)){if(o&&(X2[6258]=X2[6258]+1,(f=L2(o<<6|19))&&(X2[(n=f+19&-16)-4>>2]=f)),1<=(0|a))for(f=a;;)if(t=X2[A+96>>2]+c|0,u=X2[(b=t)+4>>2],X2[(i=n+c|0)>>2]=X2[b>>2],X2[i+4>>2]=u,u=X2[(b=b+56|0)+4>>2],X2[(k=i+56|0)>>2]=X2[b>>2],X2[k+4>>2]=u,u=X2[(k=t+48|0)+4>>2],X2[(b=i+48|0)>>2]=X2[k>>2],X2[b+4>>2]=u,u=X2[(k=t+40|0)+4>>2],X2[(b=i+40|0)>>2]=X2[k>>2],X2[b+4>>2]=u,u=X2[(k=t+32|0)+4>>2],X2[(b=i+32|0)>>2]=X2[k>>2],X2[b+4>>2]=u,u=X2[(k=t+24|0)+4>>2],X2[(b=i+24|0)>>2]=X2[k>>2],X2[b+4>>2]=u,u=X2[(k=t+16|0)+4>>2],X2[(b=i+16|0)>>2]=X2[k>>2],X2[b+4>>2]=u,b=X2[(t=t+8|0)+4>>2],X2[(i=i+8|0)>>2]=X2[t>>2],X2[i+4>>2]=b,c=c- -64|0,!(f=f-1|0))break;(f=X2[A+96>>2])&&J2[A+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+96>>2]=n,X2[A+92>>2]=o,S2[A+100|0]=1;}for(f=a<<6,c=o-a|0;;)if(n=X2[4+r>>2],a=X2[A+96>>2]+f|0,X2[(i=a)>>2]=X2[r>>2],X2[i+4>>2]=n,t=X2[(n=56+r|0)+4>>2],X2[(i=i+56|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=48+r|0)+4>>2],X2[(i=a+48|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=40+r|0)+4>>2],X2[(i=a+40|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=32+r|0)+4>>2],X2[(i=a+32|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=24+r|0)+4>>2],X2[(i=a+24|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=16+r|0)+4>>2],X2[(i=a+16|0)>>2]=X2[n>>2],X2[i+4>>2]=t,n=X2[(i=8+r|0)+4>>2],X2[(a=a+8|0)>>2]=X2[i>>2],X2[a+4>>2]=n,f=f- -64|0,!(c=c-1|0))break;}if(1<=(0|(X2[A+88>>2]=o)))for(i=X2[e+112>>2]+72|0,f=X2[A+96>>2]+40|0;;)if(X2[f-8>>2]=X2[i-8>>2],U2[f-24>>2]=M[i-40>>3],U2[f-20>>2]=M[i-32>>3],U2[f-16>>2]=M[i-24>>3],U2[f-12>>2]=M[i-16>>3],U2[f-40>>2]=M[i-72>>3],U2[f-36>>2]=M[i+-64>>3],U2[f-32>>2]=M[i-56>>3],U2[f-28>>2]=M[i-48>>3],X2[f-4>>2]=X2[i-4>>2],X2[f>>2]=X2[i>>2],f=f- -64|0,i=i+80|0,!(o=o-1|0))break;if(c=X2[e+108>>2],X2[(f=8+r|0)>>2]=0,X2[f+4>>2]=0,X2[r>>2]=0,((X2[4+r>>2]=0)|(a=X2[A+128>>2]))<(0|c)){if(X2[A+132>>2]<(0|c)){if(n=0,c&&(X2[6258]=X2[6258]+1,(f=L2(19+(c<<4)|0))&&(X2[(n=f+19&-16)-4>>2]=f)),1<=(0|a))for(i=0,f=a;;)if(o=X2[A+136>>2]+i|0,k=X2[o+4>>2],X2[(b=t=i+n|0)>>2]=X2[o>>2],X2[b+4>>2]=k,b=X2[(o=o+8|0)+4>>2],X2[(t=t+8|0)>>2]=X2[o>>2],X2[t+4>>2]=b,i=i+16|0,!(f=f-1|0))break;(f=X2[A+136>>2])&&J2[A+140|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+136>>2]=n,X2[A+132>>2]=c,S2[A+140|0]=1;}for(i=a<<4,f=c-a|0;;)if(n=X2[4+r>>2],a=X2[A+136>>2]+i|0,X2[a>>2]=X2[r>>2],X2[a+4>>2]=n,n=X2[(o=8+r|0)+4>>2],X2[(a=a+8|0)>>2]=X2[o>>2],X2[a+4>>2]=n,i=i+16|0,!(f=f-1|0))break;}if(1<=(0|(X2[A+128>>2]=c)))for(i=X2[A+136>>2],n=X2[e+116>>2],o=0;;)if($[(f=i+o|0)+6>>1]=A2[(a=n+o|0)+6>>1],$[f+8>>1]=A2[a+8>>1],$[f+10>>1]=A2[a+10>>1],$[f>>1]=A2[a>>1],$[f+2>>1]=A2[a+2>>1],X2[f+12>>2]=X2[a+12>>2],$[f+4>>1]=A2[a+4>>1],o=o+16|0,!(c=c-1|0))break;if(X2[A+144>>2]=X2[e+120>>2],o=X2[e+124>>2],(0|(a=X2[A+152>>2]))<(0|o)){if(X2[A+156>>2]<(0|o)){if(n=0,o&&(X2[6258]=X2[6258]+1,(f=L2(o<<5|19))&&(X2[(n=f+19&-16)-4>>2]=f)),1<=(0|a))for(i=0,f=a;;)if(t=X2[A+160>>2]+i|0,u=X2[(b=t)+4>>2],X2[(c=i+n|0)>>2]=X2[b>>2],X2[c+4>>2]=u,u=X2[(b=b+24|0)+4>>2],X2[(k=c+24|0)>>2]=X2[b>>2],X2[k+4>>2]=u,u=X2[(k=t+16|0)+4>>2],X2[(b=c+16|0)>>2]=X2[k>>2],X2[b+4>>2]=u,b=X2[(t=t+8|0)+4>>2],X2[(c=c+8|0)>>2]=X2[t>>2],X2[c+4>>2]=b,i=i+32|0,!(f=f-1|0))break;(f=X2[A+160>>2])&&J2[A+164|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+160>>2]=n,X2[A+156>>2]=o,S2[A+164|0]=1;}for(f=a<<5,c=o-a|0;;)if(n=X2[4+r>>2],a=X2[A+160>>2]+f|0,X2[(i=a)>>2]=X2[r>>2],X2[i+4>>2]=n,t=X2[(n=24+r|0)+4>>2],X2[(i=i+24|0)>>2]=X2[n>>2],X2[i+4>>2]=t,t=X2[(n=16+r|0)+4>>2],X2[(i=a+16|0)>>2]=X2[n>>2],X2[i+4>>2]=t,n=X2[(i=8+r|0)+4>>2],X2[(a=a+8|0)>>2]=X2[i>>2],X2[a+4>>2]=n,f=f+32|0,!(c=c-1|0))break;}if(1<=(0|(X2[A+152>>2]=o)))for(i=X2[A+160>>2]+16|0,f=X2[e+128>>2];;)if($[i-10>>1]=A2[f+14>>1],$[i-8>>1]=A2[f+16>>1],$[i-6>>1]=A2[f+18>>1],$[i-16>>1]=A2[f+8>>1],$[i-14>>1]=A2[f+10>>1],e=X2[f+4>>2],X2[(A=i-4|0)>>2]=X2[f>>2],X2[A+4>>2]=e,$[i-12>>1]=A2[f+12>>1],i=i+32|0,f=f+20|0,!(o=o-1|0))break;K2=r+64|0;},function(A){return B1(A|=0),0|A;},function(A){B1(A|=0),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A,e,r,f){return v1(A|=0,e|=0,r|=0,f|=0),1;},A,function(A,e,r,f){A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0);var i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E=0,Q=(P2(0),0),w=(P2(0),P2(0),P2(0),P2(0),P2(0),0),G=(P2(0),P2(0),P2(0),P2(0),P2(0),U2[e+40>>2]),C=U2[e+24>>2],h=(g=(g=(_=U2[e+8>>2])>P2(-0xde0b6b000000000)?_:P2(-0xde0b6b000000000))<C?C:g)<G?G:g;if(_=_<P2(0xde0b6b000000000)?_:P2(0xde0b6b000000000),B=P2(h-(n=G<(C=C<_?C:_)?G:C)),g=(G=U2[e+36>>2])<(g=(C=U2[e+20>>2])<(g=(_=U2[e+4>>2])<P2(0xde0b6b000000000)?_:P2(0xde0b6b000000000))?C:g)?G:g,G=(C=(_=_>P2(-0xde0b6b000000000)?_:P2(-0xde0b6b000000000))<C?C:_)<G?G:C,v=(C=U2[e+32>>2])<(c=(_=U2[e+16>>2])<(o=(a=U2[e>>2])<P2(0xde0b6b000000000)?a:P2(0xde0b6b000000000))?_:o),d=(b=(a=a>P2(-0xde0b6b000000000)?a:P2(-0xde0b6b000000000))<_?_:a)<C,e=X2[A+8>>2],_=U2[e+44>>2],a=U2[e+40>>2],o=U2[e+12>>2],u=U2[e+8>>2],s=U2[e+36>>2],l=U2[e+4>>2],i=X2[A+4>>2],(0|(A=X2[i+4>>2]))==X2[i+8>>2]&&!((0|(Q=A?A<<1:1))<=(0|A))){if(Q&&(X2[6258]=X2[6258]+1,(e=L2(19+(Q<<4)|0))&&(X2[(w=e+19&-16)-4>>2]=e)),1<=(0|A))for(e=0;;)if(t=X2[i+12>>2]+e|0,k=X2[4+t>>2],X2[(E=e+w|0)>>2]=X2[t>>2],X2[E+4>>2]=k,k=X2[4+(t=8+t|0)>>2],X2[(E=E+8|0)>>2]=X2[t>>2],X2[E+4>>2]=k,e=e+16|0,!(A=A-1|0))break;(A=X2[i+12>>2])&&J2[i+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),X2[i+12>>2]=w,S2[i+16|0]=1,X2[i+8>>2]=Q,A=X2[i+4>>2];}Z=P2(G-g),A=X2[i+12>>2]+(A<<4)|0,X2[A+12>>2]=r<<21|f,c=P2((b=d?C:b)-(C=v?C:c)),e=A,r=B<P2(.0020000000949949026),f=(n=P2(P2((r?P2(n+P2(-.0010000000474974513)):n)-o)*_))<P2(4294967296)&n>=P2(0)?~~n>>>0:0,$[e+4>>1]=65534&f,e=A,f=Z<P2(.0020000000949949026),Q=(g=P2(P2((f?P2(g+P2(-.0010000000474974513)):g)-u)*a))<P2(4294967296)&g>=P2(0)?~~g>>>0:0,$[e+2>>1]=65534&Q,e=A,Q=c<P2(.0020000000949949026),E=(C=P2(P2((Q?P2(C+P2(-.0010000000474974513)):C)-l)*s))<P2(4294967296)&C>=P2(0)?~~C>>>0:0,$[e>>1]=65534&E,E=A+10|0,e=(C=P2(P2(P2((r?P2(h+P2(.0010000000474974513)):h)-o)*_)+P2(1)))<P2(4294967296)&C>=P2(0)?~~C>>>0:0,$[E>>1]=1|e,r=A+8|0,e=(G=P2(P2(P2((f?P2(G+P2(.0010000000474974513)):G)-u)*a)+P2(1)))<P2(4294967296)&G>=P2(0)?~~G>>>0:0,$[r>>1]=1|e,e=(G=P2(P2(P2((Q?P2(b+P2(.0010000000474974513)):b)-l)*s)+P2(1)))<P2(4294967296)&G>=P2(0)?~~G>>>0:0,$[A+6>>1]=1|e,X2[i+4>>2]=X2[i+4>>2]+1;},A,function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G=0,C=(P2(0),P2(0),P2(0),P2(0),0),h=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2-32|0);if(K2=h,a=U2[e+28>>2],_=(t=(b=U2[e+12>>2])>P2(0)?b:P2(0))<a?a:t,t=U2[e+24>>2],g=(c=(s=U2[e+8>>2])>P2(-0xde0b6b000000000)?s:P2(-0xde0b6b000000000))<t?t:c,c=U2[e+20>>2],E=(B=(l=U2[e+4>>2])>P2(-0xde0b6b000000000)?l:P2(-0xde0b6b000000000))<c?c:B,B=U2[e+16>>2],v=(v=(d=U2[e>>2])>P2(-0xde0b6b000000000)?d:P2(-0xde0b6b000000000))<B?B:v,Q=a<(b=b<P2(0)?b:P2(0))?a:b,w=t<(a=s<P2(0xde0b6b000000000)?s:P2(0xde0b6b000000000))?t:a,c=c<(a=l<P2(0xde0b6b000000000)?l:P2(0xde0b6b000000000))?c:a,l=B<(a=d<P2(0xde0b6b000000000)?d:P2(0xde0b6b000000000))?B:a,a=U2[e+44>>2],b=U2[e+40>>2],t=U2[e+36>>2],s=U2[e+32>>2],o=X2[A+4>>2],(0|(C=X2[o+4>>2]))==X2[o+8>>2]&&!((0|(Z=C?C<<1:1))<=(0|C))){if(e=0,Z&&(X2[6258]=X2[6258]+1,(A=L2(Z<<6|19))&&(X2[(e=A+19&-16)-4>>2]=A)),1<=(0|C))for(A=0;;)if(k=X2[o+12>>2]+A|0,n=X2[4+(i=k)>>2],X2[(G=u=A+e|0)>>2]=X2[i>>2],X2[4+G>>2]=n,n=X2[4+(i=56+i|0)>>2],X2[(G=56+G|0)>>2]=X2[i>>2],X2[4+G>>2]=n,n=X2[4+(G=48+k|0)>>2],X2[(i=48+u|0)>>2]=X2[G>>2],X2[4+i>>2]=n,n=X2[4+(G=40+k|0)>>2],X2[(i=40+u|0)>>2]=X2[G>>2],X2[4+i>>2]=n,n=X2[4+(G=32+k|0)>>2],X2[(i=32+u|0)>>2]=X2[G>>2],X2[4+i>>2]=n,n=X2[4+(G=24+k|0)>>2],X2[(i=24+u|0)>>2]=X2[G>>2],X2[4+i>>2]=n,n=X2[4+(G=16+k|0)>>2],X2[(i=16+u|0)>>2]=X2[G>>2],X2[4+i>>2]=n,i=X2[4+(k=8+k|0)>>2],X2[(u=8+u|0)>>2]=X2[k>>2],X2[4+u>>2]=i,A=A- -64|0,!(C=C-1|0))break;(A=X2[o+12>>2])&&J2[o+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),X2[o+12>>2]=e,S2[o+16|0]=1,X2[o+8>>2]=Z,C=X2[o+4>>2];}A=X2[o+12>>2]+(C<<6)|0,X2[A+40>>2]=f,X2[A+36>>2]=r,X2[A+32>>2]=-1,U2[A+16>>2]=v<s?s:v,U2[A+12>>2]=a<Q?a:Q,U2[A+8>>2]=b<w?b:w,U2[A+4>>2]=t<c?t:c,U2[A>>2]=s<l?s:l,e=X2[16+h>>2],X2[A+44>>2]=X2[12+h>>2],X2[A+48>>2]=e,U2[A+28>>2]=_<a?a:_,U2[A+24>>2]=g<b?b:g,U2[A+20>>2]=E<t?t:E,f=X2[(r=20+h|0)+4>>2],X2[(e=A+52|0)>>2]=X2[r>>2],X2[e+4>>2]=f,X2[A+60>>2]=X2[28+h>>2],X2[o+4>>2]=X2[o+4>>2]+1,K2=32+h|0;},function(A){var e;return X2[(A|=0)>>2]=13056,J2[A+69|0]&&(e=X2[A+60>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+60>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),0|A;},function(A){var e;X2[(A|=0)>>2]=13056,J2[A+69|0]&&(e=X2[A+60>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+60>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A,e){A|=0,e|=0,P2(0),P2(0);var r=0|N2[X2[X2[A>>2]+28>>2]](A),f=P2(U2[r>>2]-U2[e>>2]),i=P2(f*f);f=P2(U2[4+r>>2]-U2[e+4>>2]),i=P2(i+P2(f*f)),f=P2(U2[8+r>>2]-U2[e+8>>2]),P2(i+P2(f*f))>P2(1.1920928955078125e-7)&&(l1(A,e),J2[A+69|0]&&(e=X2[A+60>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+60>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),X2[6258]=X2[6258]+1,e=0,(r=L2(191))&&(X2[(e=r+19&-16)-4>>2]=r),S2[e+80|0]=1,S2[e+60|0]=0,X2[e+52>>2]=287,X2[e+76>>2]=0,S2[e+100|0]=1,X2[e+68>>2]=0,X2[e+72>>2]=0,X2[e+96>>2]=0,S2[e+120|0]=1,X2[e+88>>2]=0,X2[e+92>>2]=0,X2[e+116>>2]=0,S2[e+140|0]=1,X2[e+108>>2]=0,X2[e+112>>2]=0,X2[e+136>>2]=0,S2[e+164|0]=1,X2[e+144>>2]=0,X2[e+128>>2]=0,X2[e+132>>2]=0,X2[e+160>>2]=0,X2[e+152>>2]=0,X2[e+156>>2]=0,X2[e+168>>2]=0,X2[e+28>>2]=2139095039,X2[e+32>>2]=0,X2[e+20>>2]=2139095039,X2[e+24>>2]=2139095039,X2[e+12>>2]=-8388609,X2[e+16>>2]=0,X2[e+4>>2]=-8388609,X2[e+8>>2]=-8388609,X2[e>>2]=12728,g1(X2[A+60>>2]=e,X2[A+56>>2],J2[A+68|0],A+24|0,A+40|0),S2[A+69|0]=1);},function(A){return 13352;},L0,function(A,e,r){e|=0;var f=0,i=0,a=0,n=0,b=0,t=0,o=0,c=0,f=0|N2[X2[X2[(r|=0)>>2]+40>>2]](r,A|=0),i=0|N2[X2[X2[r>>2]+28>>2]](r,f);return (X2[e>>2]=i)&&N2[X2[X2[r>>2]+48>>2]](r,f),f=X2[A+4>>2],X2[e+8>>2]=0,X2[e+4>>2]=f,f=X2[A+56>>2],N2[X2[X2[f>>2]+56>>2]](f,e+12|0,r),U2[e+52>>2]=U2[A+20>>2],!X2[A+60>>2]||1&N2[X2[X2[r>>2]+52>>2]](r)?(X2[e+40>>2]=0,X2[e+44>>2]=0):(f=0|N2[X2[X2[r>>2]+24>>2]](r,X2[A+60>>2]))?(X2[e+44>>2]=0,X2[e+40>>2]=f):(f=0|N2[X2[X2[r>>2]+28>>2]](r,X2[A+60>>2]),X2[e+44>>2]=0,X2[e+40>>2]=f,f=X2[A+60>>2],n=r,b=0|N2[X2[X2[f>>2]+12>>2]](f),a=X2[X2[r>>2]+16>>2],f=0|N2[a](0|n,0|b,0|(t=1)),i=X2[A+60>>2],t=r,b=f,n=0|N2[X2[X2[i>>2]+16>>2]](i,X2[f+8>>2],r),c=X2[A+60>>2],a=X2[X2[r>>2]+20>>2],N2[a](0|t,0|b,0|n,0|(o=1213612625),0|c)),!X2[A+64>>2]||2&N2[X2[X2[r>>2]+52>>2]](r)?X2[e+48>>2]=0:(f=0|N2[X2[X2[r>>2]+24>>2]](r,X2[A+64>>2]))?X2[e+48>>2]=f:(a=e,c=0|N2[X2[X2[r>>2]+28>>2]](r,X2[A+64>>2]),X2[a+48>>2]=c,f=X2[A+64>>2],c=r,o=0|N2[X2[X2[f>>2]+8>>2]](f),a=X2[X2[r>>2]+16>>2],f=0|N2[a](0|c,0|o,0|(n=1)),i=X2[A+64>>2],n=r,o=f,c=0|N2[X2[X2[i>>2]+12>>2]](i,X2[f+8>>2],r),t=X2[A+64>>2],a=X2[X2[r>>2]+20>>2],N2[a](0|n,0|o,0|c,0|(b=1346456916),0|t)),X2[e+56>>2]=0,13328;},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b,t,o,c,k,u,s,l,B,v,d=0,Z=0,_=(P2(0),P2(0),0),g=(P2(0),P2(0),0),E=(P2(0),0),Q=0,w=0,G=0,C=0;P2(0),P2(0),P2(0),P2(0),P2(0),X2[60+(K2=v=K2-80|0)>>2]=0,X2[8+v>>2]=e,X2[v>>2]=13160,X2[4+v>>2]=X2[A+56>>2],d=X2[A+60>>2];A:if(J2[d+60|0]){Z=A=v,t=U2[d+28>>2],i=U2[d+12>>2],a=U2[r+8>>2],k=U2[d+44>>2],e=(a=P2(P2((t<(a=a<i?i:a)?t:a)-i)*k))<P2(4294967296)&a>=P2(0)?~~a>>>0:0,$[Z+78>>1]=e&=65534,g=A,o=U2[d+24>>2],a=U2[d+8>>2],n=U2[r+4>>2],u=U2[d+40>>2],Z=(n=P2(P2((o<(n=n<a?a:n)?o:n)-a)*u))<P2(4294967296)&n>=P2(0)?~~n>>>0:0,$[g+76>>1]=Z&=65534,g=A,c=U2[d+20>>2],n=U2[d+4>>2],b=U2[r>>2],s=U2[d+36>>2],r=(b=P2(P2((c<(b=b<n?n:b)?c:b)-n)*s))<P2(4294967296)&b>=P2(0)?~~b>>>0:0,$[g+74>>1]=E=65534&r,b=U2[f+8>>2],r=(i=P2(P2(k*P2((t<(b=b<i?i:b)?t:b)-i))+P2(1)))<P2(4294967296)&i>=P2(0)?~~i>>>0:0,i=U2[f>>2],t=U2[f+4>>2],$[A+72>>1]=f=1|r,r=(a=P2(P2(u*P2((o<(t=t<a?a:t)?o:t)-a))+P2(1)))<P2(4294967296)&a>=P2(0)?~~a>>>0:0,$[A+70>>1]=g=1|r,A=v,r=(i=P2(P2(s*P2((c<(i=i<n?n:i)?c:i)-n))+P2(1)))<P2(4294967296)&i>=P2(0)?~~i>>>0:0,$[A+68>>1]=Q=1|r;e:switch(X2[d+144>>2]){case 0:if(1<=(0|(w=X2[d+56>>2])))for(A=X2[d+136>>2],r=0;;)if(d=E>>>0<=A2[A+6>>1]&Q>>>0>=A2[A>>1]&e>>>0<=A2[A+10>>1]&f>>>0>=A2[A+4>>1]&Z>>>0<=A2[A+8>>1]&g>>>0>=A2[A+2>>1],(C=(0|(G=X2[A+12>>2]))<0)||d&&N2[X2[X2[v>>2]+8>>2]](v,G>>>21|0,2097151&G),A=C&(-1^d)?(r=r-(d=X2[A+12>>2])|0,A-(d<<4)|0):(r=r+1|0,A+16|0),_=_+1|0,!((0|r)<(0|w)))break;if(X2[6352]>=(0|_))break A;X2[6352]=_;break A;case 1:if(X2[d+152>>2]<1)break A;for(;;){if(A=X2[d+160>>2]+(G<<5)|0,!(E>>>0>A2[A+6>>1]||Q>>>0<A2[A>>1]||e>>>0>A2[A+10>>1]||f>>>0<A2[A+4>>1]||Z>>>0>A2[A+8>>1]||g>>>0<A2[A+2>>1])){if((0|(_=X2[A+16>>2]))<1)_=0;else for(B=_+(r=X2[A+12>>2])|0,A=X2[d+136>>2]+(r<<4)|0,_=0;;)if(w=E>>>0<=A2[A+6>>1]&Q>>>0>=A2[A>>1]&e>>>0<=A2[A+10>>1]&f>>>0>=A2[A+4>>1]&Z>>>0<=A2[A+8>>1]&g>>>0>=A2[A+2>>1],(l=(0|(C=X2[A+12>>2]))<0)||w&&N2[X2[X2[v>>2]+8>>2]](v,C>>>21|0,2097151&C),A=(-1^w)&l?(r=r-(w=X2[A+12>>2])|0,A-(w<<4)|0):(r=r+1|0,A+16|0),_=_+1|0,!((0|r)<(0|B)))break;X2[6352]>=(0|_)||(X2[6352]=_);}if(!((0|(G=G+1|0))<X2[d+152>>2]))break;}break A;case 2:break e;default:break A;}!function A(e,r,f,i){for(var a,n=0;;){e:{if(!(A2[f>>1]>A2[e+6>>1]||A2[i>>1]<A2[e>>1]||A2[f+4>>1]>A2[e+10>>1]||A2[i+4>>1]<A2[e+4>>1]||A2[f+2>>1]>A2[e+8>>1]||A2[i+2>>1]<A2[e+2>>1])){if((0|(n=X2[e+12>>2]))<0)break e;N2[X2[X2[r>>2]+8>>2]](r,n>>>21|0,2097151&n);}return;}A(n=e+16|0,r,f,i),a=e+32|0,e=-1<(0|(e=X2[e+28>>2]))?a:n-(e<<4)|0;}}(X2[d+136>>2],v,74+v|0,68+v|0);}else {if(1<=(0|(g=X2[d+56>>2])))for(A=X2[d+96>>2],e=0;;){Z=0,U2[r>>2]>U2[A+16>>2]||(Z=0,U2[f>>2]<U2[A>>2]||(Z=1)),_=0,U2[r+8>>2]>U2[A+24>>2]||U2[f+8>>2]<U2[A+8>>2]||(_=Z);e:{r:{if(U2[f+4>>2]<U2[A+4>>2]||U2[r+4>>2]>U2[A+20>>2])Q=-1==(0|(Z=X2[A+32>>2])),_=0;else if((Q=-1==(0|(Z=X2[A+32>>2])))&_){N2[X2[X2[v>>2]+8>>2]](v,X2[A+36>>2],X2[A+40>>2]),g=X2[d+56>>2];break r;}if(!Q&&!_){e=e+Z|0,A=(Z<<6)+A|0;break e;}}e=e+1|0,A=A- -64|0;}if(E=E+1|0,!((0|e)<(0|g)))break;}X2[6352]>=(0|E)||(X2[6352]=E);}K2=80+v|0;},function(A,e){e|=0;var r,f,i,a,n,b=0;(b=X2[(A|=0)+60>>2])&&(f=e,i=0|N2[X2[X2[b>>2]+12>>2]](b),r=X2[X2[e>>2]+16>>2],b=0|N2[r](0|f,0|i,1),n=X2[A+60>>2],a=e,f=0|N2[X2[X2[n>>2]+16>>2]](n,X2[8+(i=b)>>2],e),n=X2[A+60>>2],r=X2[X2[e>>2]+20>>2],N2[r](0|a,0|i,0|f,1213612625,0|n));},function(A,e){e|=0;var r,f,i,a,n,b=0;(b=X2[(A|=0)+64>>2])&&(f=e,i=0|N2[X2[X2[b>>2]+8>>2]](b),r=X2[X2[e>>2]+16>>2],b=0|N2[r](0|f,0|i,1),n=X2[A+64>>2],a=e,f=0|N2[X2[X2[n>>2]+12>>2]](n,X2[8+(i=b)>>2],e),n=X2[A+64>>2],r=X2[X2[e>>2]+20>>2],N2[r](0|a,0|i,0|f,1346456916,0|n));},e,A,function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b,t,o,c=0,k=0,u=P2(0),s=P2(0),l=P2(0),B=0,v=P2(0),d=0;K2=o=K2-32|0,X2[A+60>>2]=X2[A+60>>2]+1,B=X2[A+4>>2],N2[X2[X2[B>>2]+16>>2]](B,28+o|0,24+o|0,20+o|0,16+o|0,12+o|0,8+o|0,4+o|0,o,e),B=(f=X2[A+4>>2])+12|0,i=X2[12+o>>2]+H2(X2[8+o>>2],r)|0,a=X2[20+o>>2],b=k=X2[28+o>>2],t=n=X2[16+o>>2];A:{e:{r:{f:{i:{a:{n:{if(3!=(0|(d=X2[o>>2]))){if(2!=(0|d))break n;c=X2[8+i>>2];break a;}if(c=H2(A2[4+i>>1],n)+k|0,c=a?(s=P2(U2[f+8>>2]*P2(M[c+8>>3])),l=P2(U2[f+4>>2]*P2(M[c>>3])),u=P2(M[c+16>>3]),B):(s=P2(U2[c+4>>2]*U2[f+8>>2]),l=P2(U2[c>>2]*U2[f+4>>2]),u=U2[f+12>>2],c+8|0),v=U2[c>>2],X2[A+56>>2]=0,U2[A+48>>2]=s,U2[A+44>>2]=l,U2[A+52>>2]=v*u,c=H2(A2[2+i>>1],n)+k|0,!a)break i;s=P2(U2[f+8>>2]*P2(M[c+8>>3])),l=P2(U2[f+4>>2]*P2(M[c>>3])),u=P2(M[c+16>>3]),c=B;break f;}c=J2[2+i|0];}if(c=H2(c,n)+k|0,c=a?(s=P2(U2[f+8>>2]*P2(M[c+8>>3])),l=P2(U2[f+4>>2]*P2(M[c>>3])),u=P2(M[c+16>>3]),B):(s=P2(U2[c+4>>2]*U2[f+8>>2]),l=P2(U2[c>>2]*U2[f+4>>2]),u=U2[f+12>>2],c+8|0),v=U2[c>>2],X2[A+56>>2]=0,U2[A+48>>2]=s,U2[A+44>>2]=l,U2[A+52>>2]=v*u,2==(0|d))break r;c=J2[1+i|0];break e;}s=P2(U2[c+4>>2]*U2[f+8>>2]),l=P2(U2[c>>2]*U2[f+4>>2]),u=U2[f+12>>2],c=c+8|0;}v=U2[c>>2],X2[A+40>>2]=0,U2[A+32>>2]=s,U2[A+28>>2]=l,U2[A+36>>2]=v*u,k=H2(A2[i>>1],n)+k|0,s=a?(l=P2(U2[f+4>>2]*P2(M[k>>3])),u=P2(M[k+16>>3]),P2(U2[f+8>>2]*P2(M[k+8>>3]))):(B=k+8|0,l=P2(U2[k>>2]*U2[f+4>>2]),u=U2[f+12>>2],P2(U2[k+4>>2]*U2[f+8>>2])),u=P2(U2[B>>2]*u);break A;}c=X2[4+i>>2];}c=b+H2(t,c)|0,c=a?(s=P2(U2[f+8>>2]*P2(M[c+8>>3])),l=P2(U2[f+4>>2]*P2(M[c>>3])),u=P2(M[c+16>>3]),B):(s=P2(U2[c+4>>2]*U2[f+8>>2]),l=P2(U2[c>>2]*U2[f+4>>2]),u=U2[f+12>>2],c+8|0),v=U2[c>>2],X2[A+40>>2]=0,U2[A+32>>2]=s,U2[A+28>>2]=l,U2[A+36>>2]=v*u,c=2!=(0|d)?J2[0|i]:X2[i>>2],k=H2(c,n)+k|0,s=a?(l=P2(U2[f+4>>2]*P2(M[k>>3])),u=P2(M[k+16>>3]),P2(U2[f+8>>2]*P2(M[k+8>>3]))):(B=k+8|0,l=P2(U2[k>>2]*U2[f+4>>2]),u=U2[f+12>>2],P2(U2[k+4>>2]*U2[f+8>>2])),u=P2(U2[B>>2]*u);}U2[A+12>>2]=l,X2[A+24>>2]=0,U2[A+20>>2]=u,U2[A+16>>2]=s,B=X2[A+8>>2],N2[X2[X2[B>>2]+8>>2]](B,A+12|0,e,r),A=X2[A+4>>2],N2[X2[X2[A>>2]+24>>2]](A,e),K2=32+o|0;},A,E1,A,E1,e,z0,function(A,e,r,f){A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var i,a=X2[A+40>>2],n=U2[a+32>>2],b=U2[A+32>>2],t=U2[a+48>>2],o=U2[a+28>>2],c=U2[A+28>>2],k=U2[a+44>>2],u=U2[a+24>>2],s=U2[a+40>>2],A=U2[A+24>>2],a=P2(N2[X2[X2[a>>2]+48>>2]](a)),l=U2[e+52>>2],B=U2[e+24>>2],v=U2[e+20>>2],d=U2[e+56>>2],Z=U2[e+40>>2],_=U2[e+36>>2],g=U2[e+48>>2],E=U2[e+8>>2],Q=U2[e+4>>2],w=U2[e>>2],G=U2[e+16>>2],e=U2[e+32>>2];X2[r+12>>2]=0,i=d,u=P2(u*A),s=P2(s*A),d=A>=P2(0)?u:s,u=A<=P2(0)?u:s,A=P2(P2(d+u)*P2(.5)),o=P2(o*c),k=P2(k*c),s=c>=P2(0)?o:k,o=c<=P2(0)?o:k,c=P2(P2(s+o)*P2(.5)),n=P2(n*b),t=P2(t*b),k=b>=P2(0)?n:t,t=b<=P2(0)?n:t,b=P2(P2(k+t)*P2(.5)),i=P2(i+P2(P2(P2(e*A)+P2(_*c))+P2(Z*b))),n=P2(a+P2(P2(u-d)*P2(.5))),d=P2(n*P2(j2(e))),e=P2(a+P2(P2(o-s)*P2(.5))),a=P2(a+P2(P2(t-k)*P2(.5))),Z=P2(P2(d+P2(e*P2(j2(_))))+P2(a*P2(j2(Z)))),U2[r+8>>2]=i-Z,_=P2(l+P2(P2(P2(A*G)+P2(c*v))+P2(b*B))),B=P2(P2(P2(n*P2(j2(G)))+P2(e*P2(j2(v))))+P2(a*P2(j2(B)))),U2[r+4>>2]=_-B,b=P2(g+P2(P2(P2(A*w)+P2(c*Q))+P2(b*E))),c=P2(P2(P2(n*P2(j2(w)))+P2(e*P2(j2(Q))))+P2(a*P2(j2(E)))),U2[r>>2]=b-c,X2[f+12>>2]=0,U2[f+8>>2]=Z+i,U2[f+4>>2]=B+_,U2[f>>2]=c+b;},Q1,w1,G1,function(A){return 13857;},function(A){return 76;},function(A,e,r){var f=X2[(A|=0)+40>>2];return N2[X2[X2[f>>2]+56>>2]](f,e|=0,r|=0),U2[e+60>>2]=U2[A+24>>2],U2[e+64>>2]=U2[A+28>>2],U2[e+68>>2]=U2[A+32>>2],X2[e+4>>2]=22,U2[e+72>>2]=U2[A+36>>2],13827;},function(A,e,r,f){var i,a,n,b,t,o,c,k,u,s;A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=s=K2+-64|0,u=X2[4+(a=A+32|0)>>2],X2[(i=56+s|0)>>2]=X2[a>>2],X2[4+i>>2]=u,X2[44+s>>2]=e,X2[40+s>>2]=13776,e=X2[A+28>>2],X2[48+s>>2]=X2[A+24>>2],X2[52+s>>2]=e,i=U2[a>>2],u=U2[A+28>>2],e=U2[A+24>>2],X2[36+s>>2]=0,X2[20+s>>2]=0,a=P2(P2(1)/e),n=U2[r>>2],b=U2[f>>2],U2[24+s>>2]=a*(e>=P2(0)?n:b),t=P2(P2(1)/u),o=U2[r+4>>2],c=U2[f+4>>2],U2[28+s>>2]=t*(u>=P2(0)?o:c),k=P2(P2(1)/i),r=U2[r+8>>2],f=U2[f+8>>2],U2[32+s>>2]=k*(i>=P2(0)?r:f),U2[16+s>>2]=k*(i<=P2(0)?r:f),U2[12+s>>2]=t*(u<=P2(0)?o:c),U2[8+s>>2]=a*(e<=P2(0)?n:b),A=X2[A+40>>2],N2[X2[X2[A>>2]+64>>2]](A,40+s|0,24+s|0,8+s|0),K2=s+64|0;},A,function(A,e,r,f){var i,a,n,b,t,o;A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),X2[28+(K2=o=K2-48|0)>>2]=0,i=U2[A+16>>2],U2[24+o>>2]=i*U2[e+24>>2],a=U2[A+12>>2],U2[20+o>>2]=a*U2[e+20>>2],X2[12+o>>2]=0,n=U2[A+8>>2],U2[o>>2]=U2[e>>2]*n,U2[16+o>>2]=n*U2[e+16>>2],U2[8+o>>2]=i*U2[e+8>>2],U2[4+o>>2]=a*U2[e+4>>2],b=U2[e+36>>2],t=U2[e+40>>2],e=U2[e+32>>2],X2[44+o>>2]=0,U2[40+o>>2]=i*t,U2[36+o>>2]=a*b,U2[32+o>>2]=n*e,A=X2[A+4>>2],N2[X2[X2[A>>2]+8>>2]](A,o,r,f),K2=48+o|0;},J0,S0,function(A,e){var r,f,i;A|=0,e|=0,P2(0),K2=i=K2-96|0,f=X2[e+4>>2],r=X2[A+100>>2],X2[r+4>>2]=X2[e>>2],X2[r+8>>2]=f,f=X2[(e=e+8|0)+4>>2],X2[(r=r+12|0)>>2]=X2[e>>2],X2[4+r>>2]=f,S2[A+96|0]=1,J2[25296]||(X2[6329]=0,X2[6330]=0,X2[6328]=1065353216,X2[6331]=0,X2[6332]=0,X2[6334]=0,X2[6335]=0,X2[6333]=1065353216,X2[6336]=0,X2[6337]=0,X2[6341]=0,X2[6342]=0,X2[6340]=-1082130432,X2[6338]=1065353216,X2[6339]=0,X2[6343]=0,X2[6344]=0,X2[6346]=0,X2[6347]=0,X2[6345]=-1082130432,X2[6348]=0,X2[6349]=0,X2[6350]=-1082130432,X2[6351]=0,S2[25296]=1),e=v2(i,0,96),N2[X2[X2[A>>2]+76>>2]](A,25312,e,6),r=U2[A+52>>2],U2[A+80>>2]=U2[e>>2]+r,U2[A+64>>2]=U2[e+48>>2]-r,U2[A+84>>2]=r+U2[e+20>>2],U2[A+68>>2]=U2[e+68>>2]-r,U2[A+88>>2]=r+U2[e+40>>2],U2[A+72>>2]=U2[e+88>>2]-r,K2=e+96|0;},function(A){return X2[(A|=0)+100>>2]+4|0;},function(A){return 14117;},G0,function(A,e,r){A|=0,e|=0,r|=0;var f,i=P2(0),a=P2(0),n=P2(0),b=P2(0);K2=f=K2-80|0,a=U2[r>>2],n=U2[r+4>>2],b=U2[r+8>>2],i=(i=P2(P2(P2(a*a)+P2(n*n))+P2(b*b)))<P2(9999999747378752e-20)?(n=P2(0),a=P2(1),b=P2(0),P2(0)):(i=P2(P2(1)/P2(O2(i))),b=P2(b*i),n=P2(n*i),a=P2(a*i),U2[r+12>>2]),X2[(r=52+f|0)>>2]=0,X2[r+4>>2]=0,U2[76+f>>2]=i,U2[72+f>>2]=b,U2[68+f>>2]=n,X2[44+f>>2]=0,X2[48+f>>2]=0,X2[40+f>>2]=14064,U2[64+f>>2]=a,X2[60+f>>2]=-581039253,X2[32+f>>2]=1566444395,X2[36+f>>2]=0,X2[24+f>>2]=1566444395,X2[28+f>>2]=1566444395,e=X2[e+100>>2],X2[16+f>>2]=-581039253,X2[20+f>>2]=0,X2[8+f>>2]=-581039253,X2[12+f>>2]=-581039253,N2[X2[X2[e>>2]+8>>2]](e,40+f|0,8+f|0,24+f|0),i=X2[r+4>>2],X2[(e=A+8|0)>>2]=X2[r>>2],X2[e+4>>2]=i,e=X2[48+f>>2],X2[A>>2]=X2[44+f>>2],X2[A+4>>2]=e,K2=80+f|0;},function(A,e,r,f){A|=0,e|=0,r|=0;var i,a,n,b,t=0,o=0,c=0;if(K2=b=K2-80|0,1<=(0|(f|=0))){for(c=r+12|0,o=f;;)if(X2[c>>2]=-581039253,c=c+16|0,!(o=o-1|0))break;for(o=40+b|4,c=b+64|0;;)if(X2[o>>2]=0,X2[o+4>>2]=0,X2[(t=i=o+8|0)>>2]=0,X2[4+t>>2]=0,t=X2[e+4>>2],X2[c>>2]=X2[e>>2],X2[c+4>>2]=t,n=X2[4+(a=e+8|0)>>2],X2[(t=c+8|0)>>2]=X2[a>>2],X2[4+t>>2]=n,X2[40+b>>2]=14064,X2[60+b>>2]=-581039253,X2[32+b>>2]=1566444395,X2[36+b>>2]=0,X2[24+b>>2]=1566444395,X2[28+b>>2]=1566444395,t=X2[A+100>>2],X2[16+b>>2]=-581039253,X2[20+b>>2]=0,X2[8+b>>2]=-581039253,X2[12+b>>2]=-581039253,N2[X2[X2[t>>2]+8>>2]](t,40+b|0,8+b|0,24+b|0),a=X2[4+i>>2],X2[(t=r+8|0)>>2]=X2[i>>2],X2[4+t>>2]=a,i=X2[o+4>>2],X2[r>>2]=X2[o>>2],X2[r+4>>2]=i,e=e+16|0,r=r+16|0,!(f=f-1|0))break;}K2=80+b|0;},V0,V0,C1,f,V0,C1,h1,A,function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b=P2(0),t=P2(0),o=0,c=(P2(0),P2(0),P2(0),0);r=A+4|0,t=U2[A+20>>2],i=U2[A+24>>2],a=U2[A+28>>2],n=U2[A+32>>2],t<(b=P2(P2(P2(i*U2[e>>2])+P2(a*U2[e+4>>2]))+P2(n*U2[e+8>>2])))&&(U2[A+20>>2]=b,f=X2[e+4>>2],X2[r>>2]=X2[e>>2],X2[r+4>>2]=f,c=X2[(o=e+8|0)+4>>2],X2[(f=r+8|0)>>2]=X2[o>>2],X2[f+4>>2]=c,t=b),t<(b=P2(P2(P2(i*U2[e+16>>2])+P2(a*U2[e+20>>2]))+P2(n*U2[e+24>>2])))?(U2[A+20>>2]=b,o=X2[(f=e+16|0)+4>>2],X2[r>>2]=X2[f>>2],X2[r+4>>2]=o,c=X2[(f=f+8|0)+4>>2],X2[(o=r+8|0)>>2]=X2[f>>2],X2[o+4>>2]=c):b=t,b<(t=P2(P2(P2(i*U2[e+32>>2])+P2(a*U2[e+36>>2]))+P2(n*U2[e+40>>2])))&&(U2[A+20>>2]=t,e=X2[(A=e+32|0)+4>>2],X2[r>>2]=X2[A>>2],X2[r+4>>2]=e,e=r+8|0,r=X2[(A=A+8|0)+4>>2],X2[e>>2]=X2[A>>2],X2[e+4>>2]=r);},e,z0,F1,Q1,w1,G1,function(A){return 14248;},C1,J0,function(A,e,r,f){S0(A|=0,e|=0,r|=0,f|=0);},function(A,e){var r,f,i,a;A|=0,e|=0,P2(0),P2(0),P2(0),K2=a=K2-96|0,S2[A+96|0]=1,r=U2[e>>2],f=U2[e+4>>2],i=U2[e+8>>2],X2[A+32>>2]=0,U2[A+28>>2]=j2(i),U2[A+24>>2]=j2(f),U2[A+20>>2]=j2(r),J2[25296]||(X2[6329]=0,X2[6330]=0,X2[6328]=1065353216,X2[6331]=0,X2[6332]=0,X2[6334]=0,X2[6335]=0,X2[6333]=1065353216,X2[6336]=0,X2[6337]=0,X2[6341]=0,X2[6342]=0,X2[6340]=-1082130432,X2[6338]=1065353216,X2[6339]=0,X2[6343]=0,X2[6344]=0,X2[6346]=0,X2[6347]=0,X2[6345]=-1082130432,X2[6348]=0,X2[6349]=0,X2[6350]=-1082130432,X2[6351]=0,S2[25296]=1),e=v2(a,0,96),N2[X2[X2[A>>2]+76>>2]](A,25312,e,6),r=U2[A+52>>2],U2[A+80>>2]=r+U2[e>>2],U2[A+64>>2]=U2[e+48>>2]-r,U2[A+84>>2]=r+U2[e+20>>2],U2[A+68>>2]=U2[e+68>>2]-r,U2[A+88>>2]=r+U2[e+40>>2],U2[A+72>>2]=U2[e+88>>2]-r,K2=e+96|0;},function(A){return 14432;},function(A){return X2[(A|=0)+100>>2];},function(A){return (A=X2[(A|=0)+100>>2]-2|0)>>>0<=2?X2[14420+(A<<2)>>2]:0;},function(A,e,r,f){e|=0,r|=0,f|=0;var i=0,a=0;A:{e:{r:{f:{i:{a:switch(X2[(A|=0)+100>>2]-2|0){case 1:n:switch(0|e){case 1:break r;case 0:break f;case 2:break n;default:break i;}break e;case 0:break f;case 2:break a;default:break i;}a:switch(0|e){case 3:e=X2[A+108>>2],X2[r>>2]=X2[A+104>>2],X2[r+4>>2]=e,e=r+8|0,i=X2[(r=A+112|0)+4>>2],X2[e>>2]=X2[r>>2],X2[e+4>>2]=i;break A;case 4:a=X2[(i=A+128|0)+4>>2],X2[(e=r+8|0)>>2]=X2[i>>2],X2[e+4>>2]=a,i=X2[(e=A+120|0)+4>>2],X2[r>>2]=X2[e>>2],X2[r+4>>2]=i;break A;case 2:break e;case 1:break r;case 0:break f;case 5:break a;default:break i;}a=X2[(i=A+144|0)+4>>2],X2[(e=r+8|0)>>2]=X2[i>>2],X2[e+4>>2]=a,i=X2[(e=A+136|0)+4>>2],X2[r>>2]=X2[e>>2],X2[r+4>>2]=i,i=X2[(r=A+160|0)+4>>2],X2[(e=f+8|0)>>2]=X2[r>>2],X2[e+4>>2]=i,e=X2[(A=A+152|0)+4>>2],X2[f>>2]=X2[A>>2],X2[f+4>>2]=e;}return;}return e=X2[A+108>>2],X2[r>>2]=X2[A+104>>2],X2[r+4>>2]=e,e=r+8|0,i=X2[(r=A+112|0)+4>>2],X2[e>>2]=X2[r>>2],X2[e+4>>2]=i,i=X2[(r=A+128|0)+4>>2],X2[(e=f+8|0)>>2]=X2[r>>2],X2[e+4>>2]=i,e=X2[(A=A+120|0)+4>>2],X2[f>>2]=X2[A>>2],void(X2[f+4>>2]=e);}return a=X2[(i=A+128|0)+4>>2],X2[(e=r+8|0)>>2]=X2[i>>2],X2[e+4>>2]=a,i=X2[(e=A+120|0)+4>>2],X2[r>>2]=X2[e>>2],X2[r+4>>2]=i,i=X2[(r=A+144|0)+4>>2],X2[(e=f+8|0)>>2]=X2[r>>2],X2[e+4>>2]=i,e=X2[(A=A+136|0)+4>>2],X2[f>>2]=X2[A>>2],void(X2[f+4>>2]=e);}return a=X2[(i=A+144|0)+4>>2],X2[(e=r+8|0)>>2]=X2[i>>2],X2[e+4>>2]=a,i=X2[(e=A+136|0)+4>>2],X2[r>>2]=X2[e>>2],X2[r+4>>2]=i,i=X2[(r=A+112|0)+4>>2],X2[(e=f+8|0)>>2]=X2[r>>2],X2[e+4>>2]=i,e=X2[A+108>>2],X2[f>>2]=X2[A+104>>2],void(X2[f+4>>2]=e);}i=X2[(r=A+160|0)+4>>2],X2[(e=f+8|0)>>2]=X2[r>>2],X2[e+4>>2]=i,e=X2[(A=A+152|0)+4>>2],X2[f>>2]=X2[A>>2],X2[f+4>>2]=e;},function(A,e,r){var f,i=X2[(e=(A=((e|=0)<<4)+(A|=0)|0)+112|0)+4>>2];X2[(f=(r|=0)+8|0)>>2]=X2[e>>2],X2[4+f>>2]=i,e=X2[(A=A+104|0)+4>>2],X2[r>>2]=X2[A>>2],X2[r+4>>2]=e;},function(A){return 0|(4==(0|(A=X2[(A|=0)+100>>2]))?4:(3==(0|A))<<1);},C1,h1,function(A,e){return 0;},function(A){return X2[(A|=0)>>2]=14476,0|A;},function(A){X2[(A|=0)>>2]=14476,X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var i=U2[e+56>>2],a=U2[e+36>>2],n=U2[e+40>>2],b=U2[e+52>>2],t=U2[e+20>>2],o=U2[A+120>>2],c=U2[A+28>>2],k=U2[A+44>>2],u=U2[e+24>>2],s=U2[A+124>>2],l=U2[A+32>>2],B=U2[A+48>>2],v=U2[e+32>>2],d=U2[e+48>>2],Z=U2[e>>2],_=U2[e+4>>2],g=U2[e+8>>2],e=U2[e+16>>2],E=U2[A+116>>2],Q=U2[A+24>>2],w=U2[A+40>>2],G=P2(N2[X2[X2[A>>2]+48>>2]](A)),C=P2(N2[X2[X2[A>>2]+48>>2]](A)),A=P2(N2[X2[X2[A>>2]+48>>2]](A));X2[r+12>>2]=0,E=P2(P2(E*P2(w-Q))*P2(.5)),o=P2(P2(o*P2(k-c))*P2(.5)),c=P2(P2(E*P2(j2(e)))+P2(o*P2(j2(t)))),t=P2(P2(s*P2(B-l))*P2(.5)),c=P2(C+P2(c+P2(t*P2(j2(u))))),U2[r+4>>2]=b-c,k=P2(G+P2(P2(P2(E*P2(j2(Z)))+P2(o*P2(j2(_))))+P2(t*P2(j2(g))))),U2[r>>2]=d-k,E=P2(A+P2(P2(P2(E*P2(j2(v)))+P2(o*P2(j2(a))))+P2(t*P2(j2(n))))),U2[r+8>>2]=i-E,X2[f+12>>2]=0,U2[f+8>>2]=i+E,U2[f+4>>2]=b+c,U2[f>>2]=d+k;},function(A,e){var r=X2[(e|=0)+4>>2];X2[(A|=0)+116>>2]=X2[e>>2],X2[A+120>>2]=r,r=X2[(e=e+8|0)+4>>2],X2[(A=A+124|0)>>2]=X2[e>>2],X2[A+4>>2]=r;},function(A){return (A|=0)+116|0;},q0,function(A){return 14560;},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b,t,o=P2(0),c=P2(0),k=P2(0),u=(P2(0),P2(0),0),s=0,l=0,B=0,v=0,d=0,Z=0;K2=t=K2-48|0,c=U2[A+48>>2],k=U2[A+32>>2],i=P2(P2(1)/U2[A+124>>2]),a=U2[A- -64>>2],n=((o=c<(o=(o=P2(P2(i*U2[f+8>>2])+a))<k?k:o)?c:o)<P2(0)?-.5:.5)+ +o,v=(u=j2(n)<2147483648?~~n:-2147483648)+1|0,n=((o=c<(o=(o=P2(P2(i*U2[r+8>>2])+a))<k?k:o)?c:o)<P2(0)?-.5:.5)+ +o,b=(u=j2(n)<2147483648?~~n:-2147483648)-1|0,c=U2[A+44>>2],k=U2[A+28>>2],i=P2(P2(1)/U2[A+120>>2]),a=U2[A+60>>2],n=((o=c<(o=(o=P2(P2(i*U2[f+4>>2])+a))<k?k:o)?c:o)<P2(0)?-.5:.5)+ +o,d=(u=j2(n)<2147483648?~~n:-2147483648)+1|0,n=((o=c<(o=(o=P2(P2(i*U2[r+4>>2])+a))<k?k:o)?c:o)<P2(0)?-.5:.5)+ +o,u=(u=j2(n)<2147483648?~~n:-2147483648)-1|0,c=U2[A+40>>2],k=U2[A+24>>2],i=P2(P2(1)/U2[A+116>>2]),a=U2[A+56>>2],n=((o=c<(o=(o=P2(P2(i*U2[f>>2])+a))<k?k:o)?c:o)<P2(0)?-.5:.5)+ +o,f=(f=j2(n)<2147483648?~~n:-2147483648)+1|0,n=((o=c<(o=(o=P2(P2(i*U2[r>>2])+a))<k?k:o)?c:o)<P2(0)?-.5:.5)+ +o,r=(r=j2(n)<2147483648?~~n:-2147483648)-1|0,l=X2[A+76>>2]-1|0,B=X2[A+72>>2]-1|0;A:{e:switch(X2[A+112>>2]){case 0:l=(0|v)<(0|l)?v:l,s=0<(0|b)?b:0,B=(0|d)<(0|B)?d:B,Z=0<(0|u)?u:0;break A;case 1:l=(0|v)<(0|l)?v:l,s=0<(0|b)?b:0,B=(0|f)<(0|B)?f:B,Z=0<(0|r)?r:0;break A;case 2:break e;default:break A;}l=(0|d)<(0|l)?d:l,s=0<(0|u)?u:0,B=(0|f)<(0|B)?f:B,Z=0<(0|r)?r:0;}if((0|s)<(0|l))for(;;){if(v=l,(0|B)<=(0|Z))r=s+1|0;else {for(d=1&s,i=P2(0|(u=s+1|0)),a=P2(0|s),r=Z;;){A:{e:{if(!J2[A+108|0]&&(r+s&1||!J2[A+109|0])){if(d)break e;if(!J2[A+110|0])break e;}o=P2(N2[X2[X2[A>>2]+68>>2]](A,r,s));r:{f:switch(X2[A+112>>2]){default:c=U2[4+t>>2],k=U2[t>>2],o=U2[8+t>>2];break r;case 0:X2[12+t>>2]=0,k=P2(o-U2[A+56>>2]),c=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(a-P2(U2[A+92>>2]*P2(.5)));break r;case 1:X2[12+t>>2]=0,c=P2(o-U2[A+60>>2]),k=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(a-P2(U2[A+92>>2]*P2(.5)));break r;case 2:break f;}X2[12+t>>2]=0,c=P2(a-P2(U2[A+92>>2]*P2(.5))),k=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(o-U2[A+64>>2]);}U2[t>>2]=k*U2[A+116>>2],U2[4+t>>2]=c*U2[A+120>>2],U2[8+t>>2]=o*U2[A+124>>2],o=P2(N2[X2[X2[A>>2]+68>>2]](A,r,u));r:{f:switch(X2[A+112>>2]){default:c=U2[20+t>>2],k=U2[16+t>>2],o=U2[24+t>>2];break r;case 0:X2[28+t>>2]=0,k=P2(o-U2[A+56>>2]),c=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(i-P2(U2[A+92>>2]*P2(.5)));break r;case 1:X2[28+t>>2]=0,c=P2(o-U2[A+60>>2]),k=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(i-P2(U2[A+92>>2]*P2(.5)));break r;case 2:break f;}X2[28+t>>2]=0,c=P2(i-P2(U2[A+92>>2]*P2(.5))),k=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(o-U2[A+64>>2]);}U2[16+t>>2]=k*U2[A+116>>2],U2[20+t>>2]=c*U2[A+120>>2],U2[24+t>>2]=o*U2[A+124>>2],o=P2(N2[X2[X2[A>>2]+68>>2]](A,f=r+1|0,u));r:{f:switch(X2[A+112>>2]){default:c=U2[36+t>>2],k=U2[32+t>>2],o=U2[40+t>>2];break r;case 0:X2[44+t>>2]=0,k=P2(o-U2[A+56>>2]),c=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(i-P2(U2[A+92>>2]*P2(.5)));break r;case 1:X2[44+t>>2]=0,c=P2(o-U2[A+60>>2]),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(i-P2(U2[A+92>>2]*P2(.5)));break r;case 2:break f;}X2[44+t>>2]=0,c=P2(i-P2(U2[A+92>>2]*P2(.5))),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(o-U2[A+64>>2]);}U2[32+t>>2]=k*U2[A+116>>2],U2[36+t>>2]=c*U2[A+120>>2],U2[40+t>>2]=o*U2[A+124>>2],N2[X2[X2[e>>2]+8>>2]](e,t,r,s),o=P2(N2[X2[X2[A>>2]+68>>2]](A,f,u));r:{f:switch(X2[A+112>>2]){default:c=U2[20+t>>2],k=U2[16+t>>2],o=U2[24+t>>2];break r;case 0:X2[28+t>>2]=0,k=P2(o-U2[A+56>>2]),c=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(i-P2(U2[A+92>>2]*P2(.5)));break r;case 1:X2[28+t>>2]=0,c=P2(o-U2[A+60>>2]),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(i-P2(U2[A+92>>2]*P2(.5)));break r;case 2:break f;}X2[28+t>>2]=0,c=P2(i-P2(U2[A+92>>2]*P2(.5))),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(o-U2[A+64>>2]);}U2[16+t>>2]=k*U2[A+116>>2],U2[20+t>>2]=c*U2[A+120>>2],U2[24+t>>2]=o*U2[A+124>>2],o=P2(N2[X2[X2[A>>2]+68>>2]](A,f,s));r:{f:switch(X2[A+112>>2]){default:c=U2[36+t>>2],k=U2[32+t>>2],o=U2[40+t>>2];break r;case 0:X2[44+t>>2]=0,k=P2(o-U2[A+56>>2]),c=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(a-P2(U2[A+92>>2]*P2(.5)));break r;case 1:X2[44+t>>2]=0,c=P2(o-U2[A+60>>2]),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(a-P2(U2[A+92>>2]*P2(.5)));break r;case 2:break f;}X2[44+t>>2]=0,c=P2(a-P2(U2[A+92>>2]*P2(.5))),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(o-U2[A+64>>2]);}break A;}o=P2(N2[X2[X2[A>>2]+68>>2]](A,r,s));e:{r:switch(X2[A+112>>2]){default:c=U2[4+t>>2],k=U2[t>>2],o=U2[8+t>>2];break e;case 0:X2[12+t>>2]=0,k=P2(o-U2[A+56>>2]),c=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(a-P2(U2[A+92>>2]*P2(.5)));break e;case 1:X2[12+t>>2]=0,c=P2(o-U2[A+60>>2]),k=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(a-P2(U2[A+92>>2]*P2(.5)));break e;case 2:break r;}X2[12+t>>2]=0,c=P2(a-P2(U2[A+92>>2]*P2(.5))),k=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(o-U2[A+64>>2]);}U2[t>>2]=k*U2[A+116>>2],U2[4+t>>2]=c*U2[A+120>>2],U2[8+t>>2]=o*U2[A+124>>2],o=P2(N2[X2[X2[A>>2]+68>>2]](A,r,u));e:{r:switch(X2[A+112>>2]){default:c=U2[20+t>>2],k=U2[16+t>>2],o=U2[24+t>>2];break e;case 0:X2[28+t>>2]=0,k=P2(o-U2[A+56>>2]),c=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(i-P2(U2[A+92>>2]*P2(.5)));break e;case 1:X2[28+t>>2]=0,c=P2(o-U2[A+60>>2]),k=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(i-P2(U2[A+92>>2]*P2(.5)));break e;case 2:break r;}X2[28+t>>2]=0,c=P2(i-P2(U2[A+92>>2]*P2(.5))),k=P2(P2(0|r)-P2(U2[A+88>>2]*P2(.5))),o=P2(o-U2[A+64>>2]);}U2[16+t>>2]=k*U2[A+116>>2],U2[20+t>>2]=c*U2[A+120>>2],U2[24+t>>2]=o*U2[A+124>>2],o=P2(N2[X2[X2[A>>2]+68>>2]](A,f=r+1|0,s));e:{r:switch(X2[A+112>>2]){default:c=U2[36+t>>2],k=U2[32+t>>2],o=U2[40+t>>2];break e;case 0:X2[44+t>>2]=0,k=P2(o-U2[A+56>>2]),c=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(a-P2(U2[A+92>>2]*P2(.5)));break e;case 1:X2[44+t>>2]=0,c=P2(o-U2[A+60>>2]),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(a-P2(U2[A+92>>2]*P2(.5)));break e;case 2:break r;}X2[44+t>>2]=0,c=P2(a-P2(U2[A+92>>2]*P2(.5))),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(o-U2[A+64>>2]);}U2[32+t>>2]=k*U2[A+116>>2],U2[36+t>>2]=c*U2[A+120>>2],U2[40+t>>2]=o*U2[A+124>>2],N2[X2[X2[e>>2]+8>>2]](e,t,r,s),o=P2(N2[X2[X2[A>>2]+68>>2]](A,f,s));e:{r:switch(X2[A+112>>2]){default:c=U2[4+t>>2],k=U2[t>>2],o=U2[8+t>>2];break e;case 0:X2[12+t>>2]=0,k=P2(o-U2[A+56>>2]),c=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(a-P2(U2[A+92>>2]*P2(.5)));break e;case 1:X2[12+t>>2]=0,c=P2(o-U2[A+60>>2]),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(a-P2(U2[A+92>>2]*P2(.5)));break e;case 2:break r;}X2[12+t>>2]=0,c=P2(a-P2(U2[A+92>>2]*P2(.5))),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(o-U2[A+64>>2]);}U2[t>>2]=k*U2[A+116>>2],U2[4+t>>2]=c*U2[A+120>>2],U2[8+t>>2]=o*U2[A+124>>2],o=P2(N2[X2[X2[A>>2]+68>>2]](A,f,u));e:{r:switch(X2[A+112>>2]){default:c=U2[36+t>>2],k=U2[32+t>>2],o=U2[40+t>>2];break e;case 0:X2[44+t>>2]=0,k=P2(o-U2[A+56>>2]),c=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(i-P2(U2[A+92>>2]*P2(.5)));break e;case 1:X2[44+t>>2]=0,c=P2(o-U2[A+60>>2]),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(i-P2(U2[A+92>>2]*P2(.5)));break e;case 2:break r;}X2[44+t>>2]=0,c=P2(i-P2(U2[A+92>>2]*P2(.5))),k=P2(P2(0|f)-P2(U2[A+88>>2]*P2(.5))),o=P2(o-U2[A+64>>2]);}}if(U2[32+t>>2]=k*U2[A+116>>2],U2[36+t>>2]=c*U2[A+120>>2],U2[40+t>>2]=o*U2[A+124>>2],N2[X2[X2[e>>2]+8>>2]](e,t,r,s),(0|B)==(0|(r=f)))break;}r=u;}if((0|v)==(0|(s=r)))break;}K2=48+t|0;},function(A,e,r){A|=0,e|=0,r|=0;var f=P2(0);A:switch(X2[A+104>>2]){case 0:return P2(U2[X2[A+100>>2]+(H2(X2[A+72>>2],r)+e<<2)>>2]);case 5:return P2(P2(U2[A+96>>2]*P2(J2[X2[A+100>>2]+(H2(X2[A+72>>2],r)+e|0)|0])));case 3:f=P2(U2[A+96>>2]*P2($[X2[A+100>>2]+(H2(X2[A+72>>2],r)+e<<1)>>1]));break;default:break A;}return P2(f);},z0,F1,function(A,e,r){A|=0,e=P2(e),r|=0,P2(0),P2(0);var f=P2(N2[X2[X2[A>>2]+48>>2]](A)),A=P2(N2[X2[X2[A>>2]+48>>2]](A));X2[r+12>>2]=0,e=P2(A*P2(f*P2(e*P2(.4000000059604645)))),U2[r+8>>2]=e,U2[r+4>>2]=e,U2[r>>2]=e;},function(A){return 14600;},y0,function(A){return P2(P2(U2[(A|=0)+36>>2]*U2[A+20>>2]));},function(A,e,r){var f,i,a,n,b,t;A|=0,e|=0,r|=0,P2(0),P2(0),P2(0),P2(0),P2(0),K2=t=K2-16|0,N2[X2[X2[e>>2]+68>>2]](t,e,r),i=X2[4+(n=8+t|0)>>2],X2[(f=A+8|0)>>2]=X2[n>>2],X2[4+f>>2]=i,i=X2[4+t>>2],X2[A>>2]=X2[t>>2],X2[A+4>>2]=i,n=U2[r+4>>2],i=U2[r>>2],r=U2[r+8>>2],a=P2(N2[X2[X2[e>>2]+48>>2]](e)),b=i=(e=P2(P2(P2(i*i)+P2(n*n))+P2(r*r))<P2(14210854715202004e-30))?P2(-1):i,r=e?P2(-1):r,n=e?P2(-1):n,i=P2(P2(1)/P2(O2(P2(P2(r*r)+P2(P2(i*i)+P2(n*n)))))),U2[A>>2]=U2[A>>2]+P2(a*P2(b*i)),U2[A+4>>2]=U2[A+4>>2]+P2(a*P2(n*i)),U2[f>>2]=U2[f>>2]+P2(a*P2(r*i)),K2=16+t|0;},function(A,e,r){X2[(A|=0)>>2]=0,X2[A+4>>2]=0,X2[(A=A+8|0)>>2]=0,X2[A+4>>2]=0;},function(A,e,r,f){r|=0,1<=(0|(f|=0))&&v2(r,0,f<<4);},function(A){n1(A|=0),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},e,A,I1,e,A,V1,e,A,f,f,function(A,e,r,f){var i,a;A|=0,e|=0,r|=0,f=P2(f),U2[A+36>>2]>f&&(S2[A+40|0]=1,i=X2[e+4>>2],X2[A+4>>2]=X2[e>>2],X2[A+8>>2]=i,a=X2[(e=e+8|0)+4>>2],X2[(i=A+12|0)>>2]=X2[e>>2],X2[4+i>>2]=a,e=X2[r+4>>2],X2[A+20>>2]=X2[r>>2],X2[A+24>>2]=e,i=X2[(r=r+8|0)+4>>2],X2[(e=A+28|0)>>2]=X2[r>>2],X2[e+4>>2]=i,U2[A+36>>2]=f);},A,function(A,e,r){e|=0,X2[(A|=0)+24>>2]=r|=0,X2[A+16>>2]=e;},function(A,e,r){e|=0,X2[(A|=0)+28>>2]=r|=0,X2[A+20>>2]=e;},function(A,e,r,f){A|=0,e|=0,r|=0,f=P2(f);var i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g=0,E=0,Q=P2(0),w=P2(0),G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=0,N=0,R=0,D=(P2(0),P2(0)),T=P2(0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=_=K2-208|0,N=X2[A+4>>2],a=U2[N+848>>2];A:if(!(a<f)){if(h=U2[r+8>>2],Q=P2(P2(U2[e+8>>2]*f)+h),n=U2[r+4>>2],C=P2(P2(U2[e+4>>2]*f)+n),b=U2[r>>2],F=P2(P2(U2[e>>2]*f)+b),i=X2[A+8>>2],Y=((R=(0|(g=X2[i+8>>2]))==(0|(E=X2[N+836>>2])))?(Y=P2(F-U2[E+52>>2]),w=P2(C-U2[E+56>>2]),G=P2(Q-U2[E+60>>2]),D=P2(P2(P2(Y*U2[E+12>>2])+P2(w*U2[E+28>>2]))+P2(G*U2[E+44>>2])),T=P2(P2(P2(Y*U2[E+8>>2])+P2(w*U2[E+24>>2]))+P2(G*U2[E+40>>2])),m=X2[A+12>>2],g=X2[m+8>>2]):(m=X2[A+12>>2],E=X2[m+8>>2],Y=P2(F-U2[E+52>>2]),w=P2(C-U2[E+56>>2]),G=P2(Q-U2[E+60>>2]),D=P2(P2(P2(Y*U2[E+12>>2])+P2(w*U2[E+28>>2]))+P2(G*U2[E+44>>2])),T=P2(P2(P2(Y*U2[E+8>>2])+P2(w*U2[E+24>>2]))+P2(G*U2[E+40>>2]))),P2(P2(P2(Y*U2[E+4>>2])+P2(w*U2[E+20>>2]))+P2(G*U2[E+36>>2]))),t=U2[g+20>>2],o=U2[g+36>>2],c=U2[g+40>>2],k=U2[g+8>>2],u=U2[g+24>>2],s=U2[g+44>>2],l=U2[g+60>>2],w=U2[g+12>>2],G=U2[g+52>>2],B=U2[g+28>>2],v=U2[g+56>>2],d=U2[g+4>>2],X2[28+_>>2]=0,X2[(g=92+_|0)>>2]=0,X2[g+4>>2]=0,X2[(g=124+_|0)>>2]=0,X2[g+4>>2]=0,X2[(g=132+_|0)>>2]=0,X2[g+4>>2]=0,X2[(g=140+_|0)>>2]=0,X2[g+4>>2]=0,X2[(g=148+_|0)>>2]=0,X2[g+4>>2]=0,X2[(g=156+_|0)>>2]=0,X2[g+4>>2]=0,X2[164+_>>2]=0,Z=X2[(E=e+8|0)+4>>2],X2[(g=72+_|0)>>2]=X2[E>>2],X2[g+4>>2]=Z,Z=w,w=P2(b-G),G=P2(n-v),h=P2(h-l),U2[24+_>>2]=P2(P2(Z*w)+P2(B*G))+P2(s*h),U2[20+_>>2]=P2(P2(w*k)+P2(G*u))+P2(h*c),X2[12+_>>2]=0,U2[8+_>>2]=D,U2[4+_>>2]=T,U2[_>>2]=Y,X2[84+_>>2]=0,X2[88+_>>2]=0,U2[80+_>>2]=f,X2[116+_>>2]=0,X2[120+_>>2]=0,g=X2[e+4>>2],X2[64+_>>2]=X2[e>>2],X2[68+_>>2]=g,U2[16+_>>2]=P2(P2(w*d)+P2(G*t))+P2(h*o),X2[60+_>>2]=0,U2[56+_>>2]=Q,U2[52+_>>2]=C,E=X2[(g=r+8|0)+4>>2],X2[(e=40+_|0)>>2]=X2[g>>2],X2[e+4>>2]=E,U2[48+_>>2]=F,e=X2[r+4>>2],X2[32+_>>2]=X2[r>>2],X2[36+_>>2]=e,A=R?(E=A+28|0,e=A+24|0,r=A+20|0,R=A+16|0,g=(A=X2[i>>2])||i,(A=X2[m>>2])||m):(E=A+24|0,e=A+28|0,r=A+16|0,R=A+20|0,g=(A=X2[m>>2])||m,(A=X2[i>>2])||i),g=X2[g+4>>2],A=X2[A+4>>2],X2[204+_>>2]=A,E=X2[E>>2],X2[112+_>>2]=E,e=X2[e>>2],X2[108+_>>2]=e,X2[104+_>>2]=X2[r>>2],X2[100+_>>2]=X2[R>>2],X2[200+_>>2]=g,31==X2[g+4>>2]&&(g=X2[64+(X2[g+32>>2]+H2(e,80)|0)>>2],X2[200+_>>2]=g),31==X2[A+4>>2]&&(A=X2[64+(X2[A+32>>2]+H2(E,80)|0)>>2],X2[204+_>>2]=A),r=_,f=(e=X2[g+16>>2])&&(A=X2[A+16>>2])?(U2[96+_>>2]=U2[e>>2]*U2[A>>2],f=U2[e+4>>2],Q=U2[A+4>>2],U2[84+_>>2]=m2(P2(z2(P2(f*Q),P2(-10))),P2(10)),U2[88+_>>2]=m2(P2(z2(P2(P2(Q*U2[e+8>>2])+P2(f*U2[A+8>>2])),P2(-10))),P2(10)),P2(m2(P2(z2(P2(P2(Q*U2[e+12>>2])+P2(f*U2[A+12>>2])),P2(-10))),P2(10)))):(A=X2[i+8>>2],e=X2[m+8>>2],U2[96+_>>2]=U2[A+232>>2]*U2[e+232>>2],f=U2[A+228>>2],Q=U2[e+228>>2],U2[84+_>>2]=m2(P2(z2(P2(f*Q),P2(-10))),P2(10)),U2[88+_>>2]=m2(P2(z2(P2(P2(Q*U2[A+236>>2])+P2(f*U2[e+236>>2])),P2(-10))),P2(10)),P2(m2(P2(z2(P2(P2(Q*U2[A+240>>2])+P2(f*U2[e+240>>2])),P2(-10))),P2(10)))),U2[r+92>>2]=f,f=U2[72+_>>2],P2(j2(f))>P2(.7071067690849304)?(C=U2[68+_>>2],F=P2(P2(f*f)+P2(C*C)),Q=P2(P2(1)/P2(O2(F))),F=P2(F*Q),h=U2[64+_>>2],w=P2(Q*P2(-f)),G=P2(h*w),f=P2(C*Q),C=P2(f*P2(-h)),h=P2(0)):(F=U2[64+_>>2],C=U2[68+_>>2],w=P2(P2(F*F)+P2(C*C)),Q=P2(P2(1)/P2(O2(w))),G=P2(w*Q),h=P2(Q*P2(-C)),C=P2(f*h),w=P2(F*Q),F=P2(w*P2(-f)),f=P2(0)),U2[192+_>>2]=G,U2[188+_>>2]=C,U2[176+_>>2]=f,U2[172+_>>2]=w,U2[184+_>>2]=F,U2[168+_>>2]=h,!((0|(r=X2[N+844>>2]))<1)){for(g=N+12|0,f=P2(a*a),A=0,E=-1;;)if(Q=P2(U2[g-8>>2]-Y),w=P2(Q*Q),Q=P2(U2[g-4>>2]-T),w=P2(w+P2(Q*Q)),Q=P2(U2[g>>2]-D),f=(e=(Q=P2(w+P2(Q*Q)))<f)?Q:f,E=e?A:E,g=g+208|0,(0|r)==(0|(A=A+1|0)))break;if(!((0|E)<0)){A=N+H2(E,208)|0,g=X2[(r=A+120|0)>>2],E=X2[(e=A+136|0)+4>>2],m=X2[e>>2],f=U2[(N=A+144|0)>>2],R=X2[(i=A+168|0)>>2],$2(A+4|0,_,208),X2[i>>2]=R,U2[N>>2]=f,X2[e>>2]=m,X2[e+4>>2]=E,X2[r>>2]=g;break A;}}D1(N,_);}K2=208+_|0;},e,A,function(A,e,r,f){var i;return A|=0,r|=0,f|=0,r=X2[(e|=0)>>2],r=0|N2[X2[X2[r>>2]+56>>2]](r,72),S2[r+60|0]=0,S2[r+52|0]=0,X2[r+36>>2]=0,X2[r+40>>2]=0,f=X2[A+12>>2],i=X2[A+16>>2],X2[r+4>>2]=X2[e>>2],S2[r+28|0]=1,X2[r+8>>2]=X2[A+8>>2],X2[r>>2]=15280,X2[r+24>>2]=0,S2[r+48|0]=1,X2[r+16>>2]=0,X2[r+20>>2]=0,X2[r+44>>2]=0,X2[r+64>>2]=f,X2[r+68>>2]=i,X2[r+56>>2]=X2[e+4>>2],0|r;},function(A){var e,r=0;return X2[(A|=0)>>2]=15280,J2[A+52|0]&&(r=X2[A+56>>2])&&(e=X2[A+4>>2],N2[X2[X2[e>>2]+16>>2]](e,r)),(r=X2[A+44>>2])&&J2[A+48|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+44>>2]=0,S2[A+48|0]=1,X2[(r=A+36|0)>>2]=0,X2[r+4>>2]=0,(r=X2[A+24>>2])&&J2[A+28|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+24>>2]=0,S2[A+28|0]=1,X2[(r=A+16|0)>>2]=0,(X2[r+4>>2]=0)|A;},function(A){var e,r=0;X2[(A|=0)>>2]=15280,J2[A+52|0]&&(r=X2[A+56>>2])&&(e=X2[A+4>>2],N2[X2[X2[e>>2]+16>>2]](e,r)),(r=X2[A+44>>2])&&J2[A+48|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+44>>2]=0,S2[A+48|0]=1,X2[(r=A+36|0)>>2]=0,X2[r+4>>2]=0,(r=X2[A+24>>2])&&J2[A+28|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),n(A);},function(A,e,r,f,i){A|=0,e|=0,r|=0,f|=0,i|=0;var x,y,V,p,M,S,X,J,U,H,P,j,z,O,K,L,q,$,A2,e2,r2,f2,i2,a2,n2,b2,a,n=0,b=P2(0),t=0,o=P2(0),c=P2(0),k=0,u=P2(0),s=0,l=0,B=0,v=0,d=P2(0),Z=0,_=P2(0),g=P2(0),E=P2(0),Q=P2(0),w=0,G=0,C=0,h=0,F=P2(0),Y=P2(0),m=P2(0),N=0,R=P2(0),D=P2(0),T=P2(0),W=P2(0),I=P2(0),t2=P2(0),o2=P2(0),c2=P2(0),k2=P2(0),u2=0,s2=P2(0),l2=P2(0),B2=(P2(0),0),v2=P2(0),d2=P2(0),Z2=P2(0),_2=P2(0),g2=P2(0),E2=P2(0),Q2=P2(0),w2=P2(0),G2=P2(0),C2=P2(0),h2=(P2(0),P2(0)),F2=P2(0),Y2=(P2(0),P2(0),P2(0));P2(0),P2(0),P2(0),K2=a=K2-976|0,(k=X2[A+56>>2])||(n=X2[A+4>>2],k=0|N2[X2[X2[n>>2]+12>>2]](n,X2[e+8>>2],X2[r+8>>2]),S2[A+52|0]=1,X2[A+56>>2]=k),X2[i+4>>2]=k,B=X2[r+4>>2];A:{e:{r:{f:switch(w=X2[e+4>>2],X2[w+4>>2]-8|0){case 0:break r;case 2:break f;default:break e;}f:switch(X2[B+4>>2]-8|0){case 2:if(A=X2[w+60>>2],b=U2[(f=w+36|0)+(A<<2)>>2],c=U2[f+((A+2|0)%3<<2)>>2],f=X2[B+60>>2],o=U2[k+848>>2],(b=p1(400+a|0,8+a|0,b,c,U2[(n=B+36|0)+(f<<2)>>2],U2[n+((f+2|0)%3<<2)>>2],A,f,X2[e+12>>2],X2[r+12>>2],o))<o&&N2[X2[X2[i>>2]+16>>2]](i,400+a|0,8+a|0,b),A=X2[i+4>>2],!X2[A+844>>2])break A;if((0|(e=X2[A+836>>2]))!=(0|(r=X2[X2[i+8>>2]+8>>2]))){R2(A,X2[X2[i+12>>2]+8>>2]+4|0,r+4|0);break A;}R2(A,e+4|0,X2[X2[i+12>>2]+8>>2]+4|0);break A;case 0:break f;default:break e;}if(A=X2[w+60>>2],o=U2[k+848>>2],(b=p1(400+a|0,8+a|0,U2[(f=w+36|0)+(A<<2)>>2],U2[f+((A+2|0)%3<<2)>>2],P2(0),P2(U2[B+36>>2]*U2[B+20>>2]),A,1,X2[e+12>>2],X2[r+12>>2],o))<o&&N2[X2[X2[i>>2]+16>>2]](i,400+a|0,8+a|0,b),A=X2[i+4>>2],!X2[A+844>>2])break A;if((0|(e=X2[A+836>>2]))!=(0|(r=X2[X2[i+8>>2]+8>>2]))){R2(A,X2[X2[i+12>>2]+8>>2]+4|0,r+4|0);break A;}R2(A,e+4|0,X2[X2[i+12>>2]+8>>2]+4|0);break A;}if(10==X2[B+4>>2]){if(f=B+36|0,A=X2[B+60>>2],o=U2[k+848>>2],(b=p1(400+a|0,8+a|0,P2(0),P2(U2[w+36>>2]*U2[w+20>>2]),U2[f+(A<<2)>>2],U2[f+((A+2|0)%3<<2)>>2],1,A,X2[e+12>>2],X2[r+12>>2],o))<o&&N2[X2[X2[i>>2]+16>>2]](i,400+a|0,8+a|0,b),A=X2[i+4>>2],!X2[A+844>>2])break A;if((0|(e=X2[A+836>>2]))!=(0|(r=X2[X2[i+8>>2]+8>>2]))){R2(A,X2[X2[i+12>>2]+8>>2]+4|0,r+4|0);break A;}R2(A,e+4|0,X2[X2[i+12>>2]+8>>2]+4|0);break A;}}X2[888+a>>2]=1566444395,S2[732+a|0]=0,X2[708+a>>2]=953267991,X2[(n=332+a|0)>>2]=0,X2[n+4>>2]=0,X2[320+a>>2]=14952,X2[352+a>>2]=B,X2[348+a>>2]=w,X2[324+a>>2]=0,X2[328+a>>2]=1065353216,X2[340+a>>2]=X2[A+8>>2],X2[356+a>>2]=X2[w+4>>2],X2[360+a>>2]=X2[B+4>>2],X2[344+a>>2]=400+a,n2=a,b2=P2(N2[X2[X2[w>>2]+48>>2]](w)),U2[364+n2>>2]=b2,b=P2(N2[X2[X2[B>>2]+48>>2]](B)),X2[392+a>>2]=1,X2[396+a>>2]=1,X2[380+a>>2]=-1,S2[372+a|0]=0,U2[368+a>>2]=b,X2[352+a>>2]=B,X2[348+a>>2]=w,b=P2(P2(P2(P2(N2[X2[X2[w>>2]+48>>2]](w))+P2(N2[X2[X2[B>>2]+48>>2]](B)))+U2[X2[A+56>>2]+848>>2])+U2[i+32>>2]),U2[888+a>>2]=b*b,n=X2[e+12>>2],s=X2[(k=n+8|0)>>2],k=X2[k+4>>2],t=X2[n>>2],l=X2[n+4>>2],C=X2[(G=n+24|0)+4>>2],X2[(Z=784+a|0)>>2]=X2[G>>2],X2[Z+4>>2]=C,X2[(Z=768+a|0)>>2]=s,X2[Z+4>>2]=k,k=X2[n+16>>2],s=X2[n+20>>2],C=X2[(G=n+40|0)+4>>2],X2[(Z=800+a|0)>>2]=X2[G>>2],X2[Z+4>>2]=C,Z=X2[n+32>>2],G=X2[n+36>>2],u2=X2[(h=n+56|0)+4>>2],X2[(C=816+a|0)>>2]=X2[h>>2],X2[C+4>>2]=u2,X2[776+a>>2]=k,X2[780+a>>2]=s,X2[760+a>>2]=t,X2[764+a>>2]=l,X2[792+a>>2]=Z,X2[796+a>>2]=G,k=X2[n+52>>2],X2[808+a>>2]=X2[n+48>>2],X2[812+a>>2]=k,n=X2[r+12>>2],t=X2[(s=n+8|0)+4>>2],X2[(k=832+a|0)>>2]=X2[s>>2],X2[k+4>>2]=t,k=X2[n+4>>2],X2[824+a>>2]=X2[n>>2],X2[828+a>>2]=k,s=X2[n+20>>2],X2[(k=l=840+a|0)>>2]=X2[n+16>>2],X2[k+4>>2]=s,t=X2[(s=n+24|0)+4>>2],X2[(k=848+a|0)>>2]=X2[s>>2],X2[k+4>>2]=t,s=X2[n+36>>2],X2[(k=Z=856+a|0)>>2]=X2[n+32>>2],X2[k+4>>2]=s,t=X2[(s=n+40|0)+4>>2],X2[(k=864+a|0)>>2]=X2[s>>2],X2[k+4>>2]=t,s=X2[n+52>>2],X2[(k=G=872+a|0)>>2]=X2[n+48>>2],X2[k+4>>2]=s,s=X2[(n=n+56|0)+4>>2],X2[(k=880+a|0)>>2]=X2[n>>2],X2[k+4>>2]=s;e:{r:{f:{if(!(6<(0|(k=X2[w+4>>2])))&&!(6<(0|(n=X2[B+4>>2])))&&(X2[312+a>>2]=15388,b=P2(0),k&&(o=P2(N2[X2[X2[w>>2]+48>>2]](w)),n=X2[B+4>>2]),n&&(b=P2(N2[X2[X2[B>>2]+48>>2]](B))),S2[44+a|0]=0,U2[36+a>>2]=b,U2[32+a>>2]=o,X2[12+a>>2]=i,X2[8+a>>2]=15416,C=X2[w+60>>2])){if(h=X2[B+60>>2]){if(Y2=U2[X2[A+56>>2]+848>>2],J2[f+24|0]){if(X2[6366]=X2[6366]+1,c=U2[C+64>>2],t=X2[e+12>>2],b=U2[t+32>>2],d=U2[C+68>>2],o=U2[t+36>>2],E=U2[C+72>>2],u=U2[t+40>>2],_=U2[h+64>>2],l=X2[r+12>>2],F=U2[h+68>>2],g=U2[h+72>>2],E2=P2(P2(P2(P2(P2(c*b)+P2(d*o))+P2(E*u))+U2[t+56>>2])-P2(P2(P2(P2(_*U2[l+32>>2])+P2(F*U2[l+36>>2]))+P2(g*U2[l+40>>2]))+U2[l+56>>2])),Q=U2[t+16>>2],o2=U2[t+20>>2],c2=U2[t+24>>2],Q2=P2(P2(P2(P2(P2(c*Q)+P2(d*o2))+P2(E*c2))+U2[t+52>>2])-P2(P2(P2(P2(_*U2[l+16>>2])+P2(F*U2[l+20>>2]))+P2(g*U2[l+24>>2]))+U2[l+52>>2])),k2=U2[t+4>>2],Y=U2[t+8>>2],w2=P2(P2(P2(P2(P2(c*U2[t>>2])+P2(d*k2))+P2(E*Y))+U2[t+48>>2])-P2(P2(P2(P2(_*U2[l>>2])+P2(F*U2[l+4>>2]))+P2(g*U2[l+8>>2]))+U2[l+48>>2])),(0|(f=X2[C+28>>2]))<1){d=P2(34028234663852886e22);break f;}for(f=f-1|0,d=P2(34028234663852886e22),G=28;;){if(n=X2[C+36>>2]+G|0,c=U2[n>>2],E=U2[n-8>>2],_=U2[n-4>>2],X2[908+a>>2]=0,b=P2(P2(P2(E*b)+P2(_*o))+P2(c*u)),U2[904+a>>2]=b,o=P2(P2(P2(E*Q)+P2(_*o2))+P2(c*c2)),U2[900+a>>2]=o,c=P2(P2(P2(E*U2[t>>2])+P2(_*k2))+P2(c*Y)),U2[896+a>>2]=c,P2(P2(P2(c*w2)+P2(o*Q2))+P2(b*E2))<P2(0)&&(b=P2(-b),U2[904+a>>2]=b,o=P2(-o),U2[900+a>>2]=o,c=P2(-c),U2[896+a>>2]=c),X2[6367]=X2[6367]+1,x1(t,l,w2,Q2,E2,c,o,b,C,h,d)){if(Z=0,X2[6368]=X2[6368]+1,Y0(C,t,896+a|0,972+a|0,968+a|0,248+a|0,944+a|0),Y0(h,l,896+a|0,964+a|0,960+a|0,928+a|0,912+a|0),(Q=U2[968+a>>2])<(E=U2[964+a>>2])||(u=U2[960+a>>2])<(_=U2[972+a>>2])||(Z=1,g=P2(u-_),(Q=P2(Q-E))<g&&(g=Q)),!Z)break e;g<d&&(m=b,R=o,T=c,d=g);}if(!f)break f;G=G+36|0,f=f-1|0,k2=U2[t+4>>2],u=U2[t+40>>2],o=U2[t+36>>2],b=U2[t+32>>2],c2=U2[t+24>>2],o2=U2[t+20>>2],Q=U2[t+16>>2],Y=U2[t+8>>2];}}if(I1(320+a|0,760+a|0,8+a|0,X2[f+20>>2],0),!((o=U2[40+a>>2])<P2(0)))break e;if(!J2[44+a|0])break e;b=U2[28+a>>2],m=U2[24+a>>2],R=U2[20+a>>2],T=U2[16+a>>2];break r;}if(1==X2[B+4>>2]){if(X2[252+a>>2]=0,n=X2[r+12>>2],u=U2[n+52>>2],d=U2[n+20>>2],g=U2[n+24>>2],m=U2[n+56>>2],b=U2[B- -64>>2],o=U2[B+68>>2],R=U2[n+36>>2],c=U2[B+72>>2],T=U2[n+40>>2],W=U2[n+48>>2],Q=U2[n+8>>2],E=U2[n>>2],_=U2[n+4>>2],F=U2[n+16>>2],o2=U2[n+32>>2],X2[6258]=X2[6258]+1,k=0,(n=L2(35))&&(X2[(k=n+19&-16)-4>>2]=n),X2[256+a>>2]=1,X2[260+a>>2]=k,S2[264+a|0]=1,U2[k+4>>2]=u+P2(P2(P2(b*F)+P2(o*d))+P2(c*g)),U2[k>>2]=W+P2(P2(P2(b*E)+P2(o*_))+P2(c*Q)),X2[k+12>>2]=0,U2[k+8>>2]=m+P2(P2(P2(b*o2)+P2(o*R))+P2(c*T)),k=X2[252+a>>2],X2[252+a>>2]=s=k+1|0,b=U2[B+80>>2],n=X2[r+12>>2],o=U2[B+84>>2],c=U2[B+88>>2],u=P2(P2(P2(P2(b*U2[n>>2])+P2(o*U2[n+4>>2]))+P2(c*U2[n+8>>2]))+U2[n+48>>2]),d=P2(P2(P2(P2(b*U2[n+32>>2])+P2(o*U2[n+36>>2]))+P2(c*U2[n+40>>2]))+U2[n+56>>2]),b=P2(P2(P2(P2(b*U2[n+16>>2])+P2(o*U2[n+20>>2]))+P2(c*U2[n+24>>2]))+U2[n+52>>2]),(0|s)==(0|(n=X2[256+a>>2]))&&!((0|(t=(n=s)?n<<1:1))<=(0|n))){if(Z=0,t&&(X2[6258]=X2[6258]+1,(n=L2(19+(t<<4)|0))&&(X2[(Z=n+19&-16)-4>>2]=n)),0<=(0|k))for(n=k+1|0,k=0;;)if(s=X2[260+a>>2]+k|0,C=X2[s+4>>2],X2[(l=k+Z|0)>>2]=X2[s>>2],X2[l+4>>2]=C,G=X2[(s=s+8|0)+4>>2],X2[(l=l+8|0)>>2]=X2[s>>2],X2[l+4>>2]=G,k=k+16|0,!(n=n-1|0))break;(n=X2[260+a>>2])&&J2[264+a|0]&&(X2[6259]=X2[6259]+1,q2(X2[n-4>>2])),X2[260+a>>2]=Z,S2[264+a|0]=1,X2[256+a>>2]=t,s=X2[252+a>>2],n=t;}if(l=X2[260+a>>2],X2[(k=l+(s<<4)|0)+12>>2]=0,U2[k+8>>2]=d,U2[k+4>>2]=b,U2[k>>2]=u,X2[252+a>>2]=s=s+1|0,b=U2[B+96>>2],r=X2[r+12>>2],o=U2[B+100>>2],c=U2[B+104>>2],u=P2(P2(P2(P2(b*U2[r>>2])+P2(o*U2[r+4>>2]))+P2(c*U2[r+8>>2]))+U2[r+48>>2]),d=P2(P2(P2(P2(b*U2[r+32>>2])+P2(o*U2[r+36>>2]))+P2(c*U2[r+40>>2]))+U2[r+56>>2]),b=P2(P2(P2(P2(b*U2[r+16>>2])+P2(o*U2[r+20>>2]))+P2(c*U2[r+24>>2]))+U2[r+52>>2]),(0|n)==(0|s))if((0|(r=n?n<<1:1))<=(0|n))s=n;else {if(l=0,r&&(X2[6258]=X2[6258]+1,(k=L2(19+(r<<4)|0))&&(X2[(l=k+19&-16)-4>>2]=k)),1<=(0|n))for(k=0;;)if(s=X2[260+a>>2]+k|0,G=X2[s+4>>2],X2[(t=k+l|0)>>2]=X2[s>>2],X2[t+4>>2]=G,Z=X2[(s=s+8|0)+4>>2],X2[(t=t+8|0)>>2]=X2[s>>2],X2[t+4>>2]=Z,k=k+16|0,!(n=n-1|0))break;(n=X2[260+a>>2])&&J2[264+a|0]&&(X2[6259]=X2[6259]+1,q2(X2[n-4>>2])),X2[260+a>>2]=l,S2[264+a|0]=1,X2[256+a>>2]=r,s=X2[252+a>>2];}if(X2[(r=(s<<4)+l|0)+12>>2]=0,U2[r+8>>2]=d,U2[r+4>>2]=b,U2[r>>2]=u,X2[252+a>>2]=X2[252+a>>2]+1,b=U2[X2[A+56>>2]+848>>2],I1(320+a|0,760+a|0,312+a|0,X2[f+20>>2],0),o=U2[324+a>>2],c=U2[328+a>>2],u=U2[332+a>>2],(d=P2(P2(P2(o*o)+P2(c*c))+P2(u*u)))>P2(1.1920928955078125e-7)){if(X2[956+a>>2]=0,g=u,u=P2(P2(1)/d),U2[952+a>>2]=g*u,U2[948+a>>2]=c*u,U2[944+a>>2]=o*u,o=P2(P2(U2[376+a>>2]-P2(N2[X2[X2[w>>2]+48>>2]](w)))-P2(N2[X2[X2[B>>2]+48>>2]](B))),(0|(k=X2[A+36>>2]))<=-1)for(X2[A+40>>2]<=-1&&((r=X2[A+44>>2])&&J2[A+48|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+40>>2]=0,X2[A+44>>2]=0,S2[A+48|0]=1),t=k<<4;;)if(n=X2[932+a>>2],r=X2[A+44>>2]+t|0,X2[r>>2]=X2[928+a>>2],X2[r+4>>2]=n,n=X2[(f=936+a|0)+4>>2],X2[(r=r+8|0)>>2]=X2[f>>2],X2[r+4>>2]=n,t=t+16|0,!((r=k)>>>0<=(k=k+1|0)>>>0))break;y1(944+a|(X2[A+36>>2]=0),X2[w+60>>2],X2[e+12>>2],248+a|0,A+32|0,P2(o-b),b,i);}if(J2[A+52|0]&&(A=X2[i+4>>2],X2[A+844>>2]&&((0|(e=X2[A+836>>2]))!=(0|(r=X2[X2[i+8>>2]+8>>2]))?R2(A,X2[X2[i+12>>2]+8>>2]+4|0,r+4|0):R2(A,e+4|0,X2[X2[i+12>>2]+8>>2]+4|0))),!(A=X2[260+a>>2]))break A;if(!J2[264+a|0])break A;X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);break A;}}if(I1(320+a|0,760+a|0,i,X2[f+20>>2],0),X2[A+64>>2]&&!(X2[X2[i+4>>2]+844>>2]>=X2[A+68>>2])&&(b=U2[324+a>>2],o=U2[328+a>>2],c=U2[332+a>>2],(u=P2(P2(P2(b*b)+P2(o*o))+P2(c*c)))>P2(1.1920928955078125e-7)&&(g=o,o=P2(P2(1)/u),g=P2(g*o),W=P2(b*o),Q=P2(c*o),P2(j2(Q))>P2(.7071067690849304)?(o=P2(P2(1)/P2(O2(P2(P2(Q*Q)+P2(g*g))))),b=P2(g*o),o=P2(o*P2(-Q)),c=P2(0)):(b=P2(P2(1)/P2(O2(P2(P2(W*W)+P2(g*g))))),o=P2(W*b),c=P2(b*P2(-g)),b=P2(0)),B2=824+a|0,C=808+a|0,h=792+a|0,u2=776+a|0,V=272+a|0,n=(X=(u=P2(N2[X2[X2[w>>2]+16>>2]](w)))<(d=P2(N2[X2[X2[B>>2]+16>>2]](B))))?(s=X2[(k=768+a|0)+4>>2],X2[(n=256+a|0)>>2]=X2[k>>2],X2[n+4>>2]=s,n=X2[764+a>>2],X2[248+a>>2]=X2[760+a>>2],X2[252+a>>2]=n,d=P2(m2(P2(P2(.019999999552965164)/u),P2(.39269909262657166))),s=248+a|0,t=h,k=u2,C):(s=X2[(k=B2+8|0)+4>>2],X2[(n=256+a|0)>>2]=X2[k>>2],X2[n+4>>2]=s,n=X2[B2+4>>2],X2[248+a>>2]=X2[B2>>2],X2[252+a>>2]=n,d=P2(m2(P2(P2(.019999999552965164)/d),P2(.39269909262657166))),s=248+a|0,t=Z,k=l,G),w=X2[(B=k+8|0)+4>>2],X2[V>>2]=X2[B>>2],X2[4+V>>2]=w,V=X2[(w=t+8|0)+4>>2],X2[(B=288+a|0)>>2]=X2[w>>2],X2[B+4>>2]=V,V=X2[(w=n+8|0)+4>>2],X2[(B=304+a|0)>>2]=X2[w>>2],X2[B+4>>2]=V,B=X2[k+4>>2],X2[264+a>>2]=X2[k>>2],X2[268+a>>2]=B,k=X2[t+4>>2],X2[280+a>>2]=X2[t>>2],X2[284+a>>2]=k,k=X2[n+4>>2],X2[296+a>>2]=X2[n>>2],X2[300+a>>2]=k,!((0|(t=X2[A+64>>2]))<1))))for(B=296+a|0,w=280+a|0,V=264+a|0,m=b,u=P2(d*P2(.5)),h2=P2(P2(P2(c*c)+P2(o*o))+P2(b*b)),b=P2(o0(u)/P2(O2(h2))),d=P2(m*b),m=P2(o*b),R=P2(c*b),F2=P2(O2(P2(P2(Q*Q)+P2(P2(W*W)+P2(g*g))))),J=224+a|0,U=208+a|0,H=192+a|0,P=176+a|0,j=160+a|0,z=144+a|0,O=128+a|0,K=112+a|0,L=96+a|0,q=80+a|0,$=a+64|0,A2=48+a|0,T=c0(u),k=0;;)if(h2>P2(1.1920928955078125e-7)&&(u=P2(P2(P2(P2(6.2831854820251465)/P2(0|t))*P2(0|k))*P2(.5)),c=P2(o0(u)/F2),b=P2(Q*c),o=P2(g*c),c=P2(W*c),u=c0(u),X?(n=X2[e+12>>2],F=U2[n>>2],o2=U2[n+4>>2],c2=U2[n+8>>2],X2[772+a>>2]=0,k2=U2[n+36>>2],v2=U2[n+20>>2],d2=U2[n+40>>2],Z2=U2[n+24>>2],_2=U2[n+32>>2],g2=U2[n+16>>2],X2[804+a>>2]=0,X2[788+a>>2]=0,I=P2(P2(d*c)+P2(P2(P2(m*u)-P2(T*o))-P2(R*b))),Y=P2(P2(d*b)+P2(P2(m*o)+P2(P2(T*u)+P2(R*c)))),t2=P2(P2(m*b)+P2(P2(P2(R*u)-P2(T*c))-P2(d*o))),D=P2(P2(R*o)+P2(P2(P2(d*u)-P2(T*b))-P2(m*c))),E=P2(P2(P2(b*I)+P2(P2(c*Y)+P2(u*t2)))-P2(o*D)),_=P2(P2(P2(P2(u*Y)-P2(c*t2))-P2(o*I))-P2(b*D)),l2=P2(P2(P2(o*t2)+P2(P2(b*Y)+P2(u*D)))-P2(c*I)),b=P2(P2(P2(c*D)+P2(P2(u*I)+P2(o*Y)))-P2(b*t2)),o=P2(P2(2)/P2(P2(_*_)+P2(P2(l2*l2)+P2(P2(E*E)+P2(b*b))))),c=P2(l2*o),Y=P2(E*c),u=P2(b*o),t2=P2(_*u),I=P2(Y-t2),D=P2(b*c),s2=P2(E*o),G2=P2(_*s2),o=P2(D+G2),s2=P2(E*s2),C2=P2(b*u),b=P2(P2(1)-P2(s2+C2)),U2[800+a>>2]=P2(P2(c2*I)+P2(Z2*o))+P2(d2*b),U2[796+a>>2]=P2(P2(I*o2)+P2(o*v2))+P2(b*k2),U2[792+a>>2]=P2(P2(I*F)+P2(o*g2))+P2(b*_2),u=P2(E*u),E=P2(_*c),b=P2(u+E),_=P2(l2*c),o=P2(P2(1)-P2(s2+_)),c=P2(D-G2),U2[784+a>>2]=P2(P2(c2*b)+P2(Z2*o))+P2(d2*c),U2[780+a>>2]=P2(P2(b*o2)+P2(o*v2))+P2(c*k2),U2[776+a>>2]=P2(P2(b*F)+P2(o*g2))+P2(c*_2),b=P2(P2(1)-P2(C2+_)),o=P2(u-E),c=P2(Y+t2),U2[768+a>>2]=P2(P2(c2*b)+P2(Z2*o))+P2(d2*c),U2[764+a>>2]=P2(P2(b*o2)+P2(o*v2))+P2(c*k2),U2[760+a>>2]=P2(P2(b*F)+P2(o*g2))+P2(c*_2),n=X2[r+12>>2],v=X2[n+4>>2],X2[B2>>2]=X2[n>>2],X2[B2+4>>2]=v,N=X2[(t=n+8|0)+4>>2],X2[(v=B2+8|0)>>2]=X2[t>>2],X2[v+4>>2]=N,N=X2[(v=n+24|0)+4>>2],X2[(t=l+8|0)>>2]=X2[v>>2],X2[t+4>>2]=N,t=X2[n+20>>2],X2[l>>2]=X2[n+16>>2],X2[l+4>>2]=t,N=X2[(v=n+40|0)+4>>2],X2[(t=Z+8|0)>>2]=X2[v>>2],X2[t+4>>2]=N,t=X2[n+36>>2],X2[Z>>2]=X2[n+32>>2],X2[Z+4>>2]=t,N=X2[(v=n+56|0)+4>>2],X2[(t=G+8|0)>>2]=X2[v>>2],X2[t+4>>2]=N,t=X2[n+52>>2],X2[G>>2]=X2[n+48>>2],X2[G+4>>2]=t):(n=X2[e+12>>2],v=X2[(t=n+8|0)>>2],t=X2[t+4>>2],N=X2[n>>2],r2=X2[n+4>>2],y=X2[n+20>>2],X2[u2>>2]=X2[n+16>>2],X2[u2+4>>2]=y,f2=X2[4+(e2=n+24|0)>>2],X2[(y=u2+8|0)>>2]=X2[e2>>2],X2[4+y>>2]=f2,X2[(y=768+a|0)>>2]=v,X2[4+y>>2]=t,t=X2[n+36>>2],X2[h>>2]=X2[n+32>>2],X2[h+4>>2]=t,y=X2[(v=n+40|0)+4>>2],X2[(t=h+8|0)>>2]=X2[v>>2],X2[t+4>>2]=y,y=X2[(v=n+56|0)+4>>2],X2[(t=C+8|0)>>2]=X2[v>>2],X2[t+4>>2]=y,t=X2[n+52>>2],X2[C>>2]=X2[n+48>>2],X2[C+4>>2]=t,X2[760+a>>2]=N,X2[764+a>>2]=r2,n=X2[r+12>>2],F=U2[n+36>>2],o2=U2[n+20>>2],c2=U2[n+40>>2],k2=U2[n+24>>2],v2=U2[n+32>>2],d2=U2[n>>2],Z2=U2[n+16>>2],_2=U2[n+4>>2],g2=U2[n+8>>2],X2[868+a>>2]=0,X2[852+a>>2]=0,X2[836+a>>2]=0,I=P2(P2(d*c)+P2(P2(P2(m*u)-P2(T*o))-P2(R*b))),Y=P2(P2(d*b)+P2(P2(m*o)+P2(P2(T*u)+P2(R*c)))),t2=P2(P2(m*b)+P2(P2(P2(R*u)-P2(T*c))-P2(d*o))),D=P2(P2(R*o)+P2(P2(P2(d*u)-P2(T*b))-P2(m*c))),E=P2(P2(P2(b*I)+P2(P2(c*Y)+P2(u*t2)))-P2(o*D)),_=P2(P2(P2(P2(u*Y)-P2(c*t2))-P2(o*I))-P2(b*D)),l2=P2(P2(P2(o*t2)+P2(P2(b*Y)+P2(u*D)))-P2(c*I)),b=P2(P2(P2(c*D)+P2(P2(u*I)+P2(o*Y)))-P2(b*t2)),o=P2(P2(2)/P2(P2(_*_)+P2(P2(l2*l2)+P2(P2(E*E)+P2(b*b))))),c=P2(l2*o),Y=P2(E*c),u=P2(b*o),t2=P2(_*u),I=P2(Y-t2),D=P2(b*c),s2=P2(E*o),G2=P2(_*s2),o=P2(D+G2),s2=P2(E*s2),C2=P2(b*u),b=P2(P2(1)-P2(s2+C2)),U2[864+a>>2]=P2(P2(g2*I)+P2(k2*o))+P2(c2*b),U2[860+a>>2]=P2(P2(I*_2)+P2(o*o2))+P2(b*F),U2[856+a>>2]=P2(P2(I*d2)+P2(o*Z2))+P2(b*v2),u=P2(E*u),E=P2(_*c),b=P2(u+E),_=P2(l2*c),o=P2(P2(1)-P2(s2+_)),c=P2(D-G2),U2[848+a>>2]=P2(P2(g2*b)+P2(k2*o))+P2(c2*c),U2[844+a>>2]=P2(P2(b*_2)+P2(o*o2))+P2(c*F),U2[840+a>>2]=P2(P2(b*d2)+P2(o*Z2))+P2(c*v2),b=P2(P2(1)-P2(C2+_)),o=P2(u-E),c=P2(Y+t2),U2[832+a>>2]=P2(P2(g2*b)+P2(k2*o))+P2(c2*c),U2[828+a>>2]=P2(P2(b*_2)+P2(o*o2))+P2(c*F),U2[824+a>>2]=P2(P2(b*d2)+P2(o*Z2))+P2(c*v2)),n=X2[764+a>>2],X2[A2>>2]=X2[760+a>>2],X2[4+A2>>2]=n,n=X2[u2+4>>2],X2[$>>2]=X2[u2>>2],X2[4+$>>2]=n,n=X2[h+4>>2],X2[q>>2]=X2[h>>2],X2[4+q>>2]=n,n=X2[C+4>>2],X2[L>>2]=X2[C>>2],X2[4+L>>2]=n,v=X2[(t=768+a|0)+4>>2],X2[(n=8+A2|0)>>2]=X2[t>>2],X2[n+4>>2]=v,v=X2[(t=u2+8|0)+4>>2],X2[(n=8+$|0)>>2]=X2[t>>2],X2[n+4>>2]=v,v=X2[(t=h+8|0)+4>>2],X2[(n=8+q|0)>>2]=X2[t>>2],X2[n+4>>2]=v,v=X2[(t=C+8|0)+4>>2],X2[(n=8+L|0)>>2]=X2[t>>2],X2[n+4>>2]=v,X2[40+a>>2]=0,X2[44+a>>2]=i,X2[8+a>>2]=15444,n=X2[f+20>>2],N=X2[(v=B2+8|0)+4>>2],X2[(t=8+K|0)>>2]=X2[v>>2],X2[t+4>>2]=N,t=X2[B2+4>>2],X2[K>>2]=X2[B2>>2],X2[4+K>>2]=t,N=X2[(v=l+8|0)+4>>2],X2[(t=8+O|0)>>2]=X2[v>>2],X2[t+4>>2]=N,t=X2[l+4>>2],X2[O>>2]=X2[l>>2],X2[4+O>>2]=t,N=X2[(v=Z+8|0)+4>>2],X2[(t=8+z|0)>>2]=X2[v>>2],X2[t+4>>2]=N,t=X2[Z+4>>2],X2[z>>2]=X2[Z>>2],X2[4+z>>2]=t,N=X2[(v=G+8|0)+4>>2],X2[(t=8+j|0)>>2]=X2[v>>2],X2[t+4>>2]=N,t=X2[G+4>>2],X2[j>>2]=X2[G>>2],X2[4+j>>2]=t,N=X2[(v=s+8|0)+4>>2],X2[(t=8+P|0)>>2]=X2[v>>2],X2[t+4>>2]=N,t=X2[s+4>>2],X2[P>>2]=X2[s>>2],X2[4+P>>2]=t,N=X2[(v=8+V|0)+4>>2],X2[(t=8+H|0)>>2]=X2[v>>2],X2[t+4>>2]=N,t=X2[4+V>>2],X2[H>>2]=X2[V>>2],X2[4+H>>2]=t,N=X2[(v=w+8|0)+4>>2],X2[(t=8+U|0)>>2]=X2[v>>2],X2[t+4>>2]=N,t=X2[w+4>>2],X2[U>>2]=X2[w>>2],X2[4+U>>2]=t,N=X2[(v=B+8|0)+4>>2],X2[(t=8+J|0)>>2]=X2[v>>2],X2[t+4>>2]=N,t=X2[B+4>>2],X2[J>>2]=X2[B>>2],X2[4+J>>2]=t,X2[244+a>>2]=n,S2[240+a|0]=X,I1(320+a|0,760+a|0,8+a|0,n,0),t=X2[A+64>>2]),!((0|(k=k+1|0))<(0|t)))break;if(!J2[A+52|0])break A;if(A=X2[i+4>>2],!X2[A+844>>2])break A;if((0|(e=X2[A+836>>2]))!=(0|(r=X2[X2[i+8>>2]+8>>2]))){R2(A,X2[X2[i+12>>2]+8>>2]+4|0,r+4|0);break A;}R2(A,e+4|0,X2[X2[i+12>>2]+8>>2]+4|0);break A;}if(1<=(0|(f=X2[h+28>>2])))for(Z=28;;){if(n=X2[h+36>>2]+Z|0,c=U2[n>>2],g=U2[n-8>>2],Q=U2[n-4>>2],X2[908+a>>2]=0,b=P2(P2(P2(g*U2[l+32>>2])+P2(Q*U2[l+36>>2]))+P2(c*U2[l+40>>2])),U2[904+a>>2]=b,o=P2(P2(P2(g*U2[l+16>>2])+P2(Q*U2[l+20>>2]))+P2(c*U2[l+24>>2])),U2[900+a>>2]=o,c=P2(P2(P2(g*U2[l>>2])+P2(Q*U2[l+4>>2]))+P2(c*U2[l+8>>2])),U2[896+a>>2]=c,P2(P2(P2(c*w2)+P2(o*Q2))+P2(b*E2))<P2(0)&&(b=P2(-b),U2[904+a>>2]=b,o=P2(-o),U2[900+a>>2]=o,c=P2(-c),U2[896+a>>2]=c),X2[6367]=X2[6367]+1,x1(t,l,w2,Q2,E2,c,o,b,C,h,d)){if(G=0,X2[6368]=X2[6368]+1,Y0(C,t,896+a|0,972+a|0,968+a|0,248+a|0,944+a|0),Y0(h,l,896+a|0,964+a|0,960+a|0,928+a|0,912+a|0),(g=U2[968+a>>2])<(Q=U2[964+a>>2])||(E=U2[960+a>>2])<(_=U2[972+a>>2])||(G=1,u=P2(E-_),(g=P2(g-Q))<u&&(u=g)),!G)break e;u<d&&(m=b,R=o,T=c,d=u);}if(Z=Z+36|0,!(f=f-1|0))break;}if((0|(Z=X2[C+48>>2]))<1)s=-1,u=P2(0),g=P2(0),E=P2(0),_=P2(0),F=P2(0),Q=P2(0),n=-1;else for(G=X2[h+48>>2],s=n=-1,Q=P2(k=0),F=P2(0),_=P2(0),E=P2(0),g=P2(0),u=P2(0);;){if(1<=(0|G)){for(f=X2[C+56>>2]+(k<<4)|0,b=U2[f>>2],o=U2[f+4>>2],c=U2[f+8>>2],o2=P2(P2(P2(b*U2[t+32>>2])+P2(o*U2[t+36>>2]))+P2(c*U2[t+40>>2])),c2=P2(P2(P2(b*U2[t+16>>2])+P2(o*U2[t+20>>2]))+P2(c*U2[t+24>>2])),k2=P2(P2(P2(b*U2[t>>2])+P2(o*U2[t+4>>2]))+P2(c*U2[t+8>>2])),f=0,Z=8;;){if(u2=X2[h+56>>2]+Z|0,o=U2[u2>>2],c=U2[u2-8>>2],D=U2[u2-4>>2],x=U2[l+40>>2],p=U2[l+32>>2],M=U2[l+36>>2],b=U2[l+24>>2],Y=U2[l+16>>2],t2=U2[l+20>>2],S=U2[l+8>>2],i2=U2[l>>2],a2=U2[l+4>>2],X2[908+a>>2]=0,Y=P2(P2(P2(c*Y)+P2(D*t2))+P2(o*b)),t2=P2(P2(P2(c*i2)+P2(D*a2))+P2(o*S)),b=P2(P2(k2*Y)-P2(c2*t2)),D=P2(P2(P2(c*p)+P2(D*M))+P2(o*x)),c=P2(P2(o2*t2)-P2(k2*D)),x=P2(P2(c2*D)-P2(o2*Y)),(1e-6<+P2(j2(x))||1e-6<+P2(j2(c))||1e-6<+P2(j2(b)))&&(p=P2(P2(1)/P2(O2(P2(P2(b*b)+P2(P2(x*x)+P2(c*c)))))),o=P2(b*p),U2[904+a>>2]=o,b=P2(c*p),U2[900+a>>2]=b,c=P2(x*p),U2[896+a>>2]=c,P2(P2(P2(c*w2)+P2(b*Q2))+P2(E2*o))<P2(0)&&(o=P2(-o),U2[904+a>>2]=o,b=P2(-b),U2[900+a>>2]=b,c=P2(-c),U2[896+a>>2]=c),X2[6367]=X2[6367]+1,x1(t,l,w2,Q2,E2,c,b,o,C,h,d))){if(G=0,X2[6368]=X2[6368]+1,Y0(C,t,896+a|0,972+a|0,968+a|0,248+a|0,944+a|0),Y0(h,l,896+a|0,964+a|0,960+a|0,928+a|0,912+a|0),(x=U2[968+a>>2])<(p=U2[964+a>>2])||(M=U2[960+a>>2])<(S=U2[972+a>>2])||((W=P2(x-p))<(x=P2(M-S))?(G=1,l2=U2[936+a>>2],h2=U2[932+a>>2],F2=U2[928+a>>2],s2=U2[952+a>>2],G2=U2[948+a>>2],C2=U2[944+a>>2]):(G=1,l2=U2[920+a>>2],h2=U2[916+a>>2],F2=U2[912+a>>2],s2=U2[256+a>>2],G2=U2[252+a>>2],C2=U2[248+a>>2],W=x)),W<d&&G&&(m=o,R=b,T=c,u=F2,g=h2,E=l2,_=C2,F=G2,Q=s2,v2=t2,d2=Y,Z2=D,_2=k2,g2=c2,I=o2,s=k,n=f,d=W),!G)break e;G=X2[h+48>>2];}if(Z=Z+16|0,!((0|(f=f+1|0))<(0|G)))break;}Z=X2[C+48>>2];}if(!((0|(k=k+1|0))<(0|Z)))break;}(n|s)<0||(W=P2(u-_),_=P2(g-F),Q=P2(E-Q),F=P2(P2(P2(W*v2)+P2(_*d2))+P2(Q*Z2)),d=P2(P2(P2(W*_2)+P2(_*g2))+P2(Q*I)),b=P2(0),c=P2(P2(P2(v2*_2)+P2(d2*g2))+P2(Z2*I)),(o=P2(P2(1)-P2(c*c)))!=P2(0)&&(b=P2(-1.0000000150474662e30),(o=P2(P2(d-P2(F*c))/o))<P2(-1.0000000150474662e30)||(b=o)>P2(1.0000000150474662e30)&&(b=P2(1.0000000150474662e30))),(o=P2(P2(c*b)-F))<P2(-1.0000000150474662e30)?(c=P2(d+P2(c*P2(-1.0000000150474662e30))))<P2(-1.0000000150474662e30)?(o=P2(-1.0000000150474662e30),b=P2(-1.0000000150474662e30)):(b=P2(1.0000000150474662e30),c>P2(1.0000000150474662e30)?o=P2(-1.0000000150474662e30):(o=P2(-1.0000000150474662e30),b=c)):o>P2(1.0000000150474662e30)&&(b=P2(-1.0000000150474662e30),o=P2(1.0000000150474662e30),(c=P2(d+P2(c*P2(1.0000000150474662e30))))<P2(-1.0000000150474662e30)||(b=c)>P2(1.0000000150474662e30)&&(b=P2(1.0000000150474662e30))),X2[260+a>>2]=0,F=P2(Z2*o),c=P2(F+P2(Q-P2(I*b))),Q=P2(v2*o),d=P2(Q+P2(W-P2(_2*b))),W=P2(d2*o),b=P2(W+P2(_-P2(g2*b))),(o=P2(P2(c*c)+P2(P2(d*d)+P2(b*b))))>P2(1.1920928955078125e-7)&&(_=P2(O2(o)),o=P2(P2(1)/_),c=P2(c*o),U2[256+a>>2]=c,b=P2(b*o),U2[252+a>>2]=b,o=P2(d*o),U2[248+a>>2]=o,P2(P2(P2(o*w2)+P2(b*Q2))+P2(c*E2))<P2(0)&&(U2[256+a>>2]=-c,U2[252+a>>2]=-b,U2[248+a>>2]=-o),X2[956+a>>2]=0,U2[952+a>>2]=E+F,U2[948+a>>2]=g+W,U2[944+a>>2]=u+Q,N2[X2[X2[i>>2]+16>>2]](i,248+a|0,944+a|0,P2(-_)))),b=P2(0),o=P2(-1.0000000150474662e30),P2(P2(P2(w2*T)+P2(Q2*R))+P2(E2*m))<P2(0)&&(m=P2(-m),R=P2(-R),T=P2(-T));}if((0|(k=X2[A+16>>2]))<=(l=-1))for(X2[A+20>>2]<=-1&&((f=X2[A+24>>2])&&J2[A+28|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+20>>2]=0,X2[A+24>>2]=0,S2[A+28|0]=1),n=k<<4;;)if(t=X2[252+a>>2],f=X2[A+24>>2]+n|0,X2[(s=f)>>2]=X2[248+a>>2],X2[s+4>>2]=t,t=X2[(s=256+a|0)+4>>2],X2[(f=f+8|0)>>2]=X2[s>>2],X2[f+4>>2]=t,n=n+16|0,!((f=k)>>>0<=(k=k+1|0)>>>0))break;if(X2[A+16>>2]=0,r=X2[r+12>>2],G=X2[e+12>>2],C=X2[w+60>>2],f=X2[B+60>>2],U2[260+a>>2]=b,b=P2(P2(1)/P2(O2(P2(P2(P2(T*T)+P2(R*R))+P2(m*m))))),g=P2(m*b),U2[256+a>>2]=g,m=P2(R*b),U2[252+a>>2]=m,R=P2(T*b),U2[248+a>>2]=R,1<=(0|(n=X2[f+28>>2])))for(k=X2[f+36>>2]+28|0,T=U2[r+40>>2],W=U2[r+36>>2],Q=U2[r+24>>2],E=U2[r+20>>2],_=U2[r+32>>2],F=U2[r+16>>2],o2=U2[r+8>>2],c2=U2[r+4>>2],k2=U2[r>>2],b=P2(-34028234663852886e22),t=0;;)if(c=U2[k-8>>2],u=U2[k-4>>2],d=U2[k>>2],b=(e=b<(c=P2(P2(P2(R*P2(P2(P2(c*k2)+P2(u*c2))+P2(d*o2)))+P2(m*P2(P2(P2(c*F)+P2(u*E))+P2(d*Q))))+P2(g*P2(P2(P2(c*_)+P2(u*W))+P2(d*T))))))?c:b,l=e?t:l,k=k+36|0,(0|n)==(0|(t=t+1|0)))break;if(X2[A+16>>2]=0,e=X2[f+36>>2]+H2(l,36)|0,1<=(0|(h=X2[e+4>>2])))for(u2=e+12|0,s=t=0;;){if(e=X2[f+16>>2]+(X2[X2[u2>>2]+(s<<2)>>2]<<4)|0,b=U2[e>>2],c=U2[e+4>>2],u=U2[e+8>>2],d=P2(P2(P2(P2(b*U2[r+32>>2])+P2(c*U2[r+36>>2]))+P2(u*U2[r+40>>2]))+U2[r+56>>2]),g=P2(P2(P2(P2(b*U2[r+16>>2])+P2(c*U2[r+20>>2]))+P2(u*U2[r+24>>2]))+U2[r+52>>2]),b=P2(P2(P2(P2(b*U2[r>>2])+P2(c*U2[r+4>>2]))+P2(u*U2[r+8>>2]))+U2[r+48>>2]),X2[A+20>>2]==(0|t)&&!((0|(n=t?t<<1:1))<=(0|t))){if(e=0,n&&(X2[6258]=X2[6258]+1,(k=L2(19+(n<<4)|0))&&(X2[(e=k+19&-16)-4>>2]=k)),1<=(0|t))for(k=0;;)if(Z=X2[A+24>>2]+k|0,B2=X2[Z+4>>2],X2[(B=e+k|0)>>2]=X2[Z>>2],X2[B+4>>2]=B2,w=X2[(Z=Z+8|0)+4>>2],X2[(B=B+8|0)>>2]=X2[Z>>2],X2[B+4>>2]=w,k=k+16|0,!(t=t-1|0))break;(k=X2[A+24>>2])&&J2[A+28|0]&&(X2[6259]=X2[6259]+1,q2(X2[k-4>>2])),X2[A+24>>2]=e,S2[A+28|0]=1,X2[A+20>>2]=n,t=X2[A+16>>2];}if(e=X2[A+24>>2]+(t<<4)|0,X2[e+12>>2]=0,U2[e+8>>2]=d,U2[e+4>>2]=g,U2[e>>2]=b,t=X2[A+16>>2]+1|0,X2[A+16>>2]=t,(0|h)==(0|(s=s+1|0)))break;}(0|l)<=-1||y1(248+a|0,C,G,A+12|0,A+32|0,P2(o-Y2),Y2,i);}J2[A+52|0]&&(A=X2[i+4>>2],X2[A+844>>2]&&((0|(e=X2[A+836>>2]))!=(0|(r=X2[X2[i+8>>2]+8>>2]))?R2(A,X2[X2[i+12>>2]+8>>2]+4|0,r+4|0):R2(A,e+4|0,X2[X2[i+12>>2]+8>>2]+4|0)));}K2=976+a|0;},function(A,e,r,f,i){A|=0,e|=0,r|=0,f|=0,i|=0;var a,n,b,t,o,c,k,u,s=P2(0),l=P2(0);return P2(0),K2=A=K2-624|0,l=P2(U2[e+116>>2]-U2[e+52>>2]),s=P2(l*l),l=P2(U2[e+120>>2]-U2[e+56>>2]),s=P2(s+P2(l*l)),l=P2(U2[e+124>>2]-U2[e+60>>2]),s=P2(s+P2(l*l)),l=U2[e+276>>2],s<P2(l*l)&&(l=P2(1),s=P2(U2[r+116>>2]-U2[r+52>>2]),a=P2(s*s),s=P2(U2[r+120>>2]-U2[r+56>>2]),a=P2(a+P2(s*s)),s=P2(U2[r+124>>2]-U2[r+60>>2]),a=P2(a+P2(s*s)),s=U2[r+276>>2],a<P2(s*s))||(a=X2[e+192>>2],X2[(f=i=A+592|0)>>2]=0,X2[f+4>>2]=0,X2[(b=A+588|0)>>2]=1065353216,X2[(f=n=A+600|0)>>2]=0,X2[f+4>>2]=0,X2[(t=A+608|0)>>2]=0,X2[A+572>>2]=0,X2[A+576>>2]=0,X2[A+580>>2]=1065353216,X2[A+584>>2]=1065353216,X2[A+564>>2]=8,X2[A+568>>2]=0,X2[A+560>>2]=14616,X2[A+616>>2]=0,l=U2[r+272>>2],U2[A+596>>2]=l,U2[A+612>>2]=l,X2[A+556>>2]=0,X2[A+548>>2]=1566444395,X2[A+552>>2]=0,X2[A+384>>2]=15320,S2[0|(o=A+356|0)]=0,X2[A+332>>2]=953267991,X2[A+16>>2]=a,X2[A+8>>2]=15076,X2[A+20>>2]=A+560,X2[A+12>>2]=A+24,c=e+4|0,k=e+68|0,u=r+4|0,a=r+68|0,l=P2(1),V1(A+8|0,c,k,u,a,A+384|0)&&((s=U2[A+548>>2])<U2[e+268>>2]&&(U2[e+268>>2]=s),s<U2[r+268>>2]&&(U2[r+268>>2]=s),l=P2(1),s<P2(1)&&(l=s)),f=X2[r+192>>2],X2[i>>2]=0,X2[i+4>>2]=0,X2[b>>2]=1065353216,X2[n>>2]=0,X2[4+n>>2]=0,X2[t>>2]=0,X2[A+572>>2]=0,X2[A+576>>2]=0,X2[A+580>>2]=1065353216,X2[A+584>>2]=1065353216,X2[A+564>>2]=8,X2[A+568>>2]=0,X2[A+560>>2]=14616,X2[A+616>>2]=0,s=U2[e+272>>2],U2[A+596>>2]=s,U2[A+612>>2]=s,X2[A+556>>2]=0,X2[A+548>>2]=1566444395,X2[A+552>>2]=0,X2[A+384>>2]=15320,S2[0|o]=0,X2[A+332>>2]=953267991,X2[A+20>>2]=f,X2[A+8>>2]=15076,X2[A+16>>2]=A+560,X2[A+12>>2]=A+24,V1(A+8|0,c,k,u,a,A+384|0)&&((s=U2[A+548>>2])<U2[e+268>>2]&&(U2[e+268>>2]=s),s<U2[r+268>>2]&&(U2[r+268>>2]=s),s<l&&(l=s))),K2=A+624|0,P2(l);},function(A,e){A|=0,e|=0;var r,f=0,i=0,a=0,n=0;if((a=X2[A+56>>2])&&J2[A+52|0]){if((0|(i=X2[e+4>>2]))==X2[e+8>>2]&&!((0|(r=i?i<<1:1))<=(0|i))){if(r&&(X2[6258]=X2[6258]+1,(f=L2(19+(r<<2)|0))&&(X2[(n=f+19&-16)-4>>2]=f)),1<=(0|i))for(a=0,f=i;;)if(X2[a+n>>2]=X2[X2[e+12>>2]+a>>2],a=a+4|0,!(f=f-1|0))break;(f=X2[e+12>>2])&&J2[e+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2]),i=X2[e+4>>2]),X2[e+12>>2]=n,S2[e+16|0]=1,X2[e+8>>2]=r,a=X2[A+56>>2];}X2[e+4>>2]=i+1,X2[X2[e+12>>2]+(i<<2)>>2]=a;}},K0,o1,f,e,A,A,f,f,M1,A,f,f,function(A,e,r,f){var i,a,n,b,t,o,c;A|=0,e|=0,r|=0,f=P2(f),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=c=K2-16|0,U2[A+32>>2]=f,b=X2[e+4>>2],X2[A+8>>2]=X2[e>>2],X2[A+12>>2]=b,n=X2[4+(b=e+8|0)>>2],X2[(a=A+16|0)>>2]=X2[b>>2],X2[4+a>>2]=n,a=U2[b>>2],n=U2[r>>2],b=U2[e>>2],t=U2[r+4>>2],o=U2[e+4>>2],r=U2[r+8>>2],i=U2[A+28>>2],f=P2(P2(i+U2[A+24>>2])+f),U2[A+32>>2]=f,X2[12+c>>2]=0,U2[8+c>>2]=r-P2(i*a),U2[4+c>>2]=t-P2(i*o),U2[c>>2]=n-P2(b*i),f<P2(0)&&(S2[A+36|0]=1),A=X2[A+4>>2],N2[X2[X2[A>>2]+16>>2]](A,e,c,f),K2=16+c|0;},A,function(A,e,r,f){A|=0,e|=0,r|=0,f=P2(f);var i,a,n,b,t,o,c,k,u,s,l,B,v=P2(0),d=P2(0),Z=P2(0),_=P2(0),g=P2(0),E=P2(0),Q=P2(0),w=(P2(0),P2(0)),G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=P2(0),R=P2(0),D=P2(0),T=P2(0),W=(P2(0),P2(0));P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=B=K2-16|0,b=U2[e+8>>2],h=U2[r+8>>2],W=P2(P2(b*f)+h),t=U2[e+4>>2],w=U2[r+4>>2],o=P2(P2(t*f)+w),c=U2[e>>2],v=P2(c*f),f=U2[r>>2],r=P2(v+f),J2[A+232|0]?(F=U2[A+56>>2],g=P2(-U2[A+92>>2]),Y=U2[A+40>>2],_=U2[A+88>>2],m=U2[A+72>>2],E=U2[A+96>>2],d=P2(P2(P2(F*g)-P2(Y*_))-P2(m*E)),N=U2[A+60>>2],R=U2[A+44>>2],D=U2[A+76>>2],G=P2(P2(P2(N*g)-P2(R*_))-P2(D*E)),T=U2[A- -64>>2],v=P2(T*g),g=U2[A+48>>2],v=P2(v-P2(g*_)),_=U2[A+80>>2],E=P2(v-P2(_*E)),v=U2[A+168>>2],Z=U2[A+172>>2],Q=U2[A+176>>2],Q=P2(P2(P2(W*P2(P2(P2(m*v)+P2(D*Z))+P2(_*Q)))+P2(P2(r*P2(P2(P2(Y*v)+P2(R*Z))+P2(g*Q)))+P2(o*P2(P2(P2(F*v)+P2(N*Z))+P2(T*Q)))))+P2(P2(P2(P2(v*d)+P2(G*Z))+P2(E*Q))+U2[A+216>>2])),C=P2(c*P2(Q-f)),f=U2[A+184>>2],v=U2[A+188>>2],Z=U2[A+192>>2],v=P2(P2(P2(W*P2(P2(P2(m*f)+P2(D*v))+P2(_*Z)))+P2(P2(r*P2(P2(P2(Y*f)+P2(R*v))+P2(g*Z)))+P2(o*P2(P2(P2(F*f)+P2(N*v))+P2(T*Z)))))+P2(P2(P2(P2(d*f)+P2(G*v))+P2(E*Z))+U2[A+220>>2])),Z=P2(C+P2(t*P2(v-w))),f=U2[A+200>>2],w=U2[A+204>>2],G=P2(P2(d*f)+P2(G*w)),d=U2[A+208>>2],W=P2(P2(P2(G+P2(E*d))+U2[A+224>>2])+P2(P2(W*P2(P2(P2(m*f)+P2(D*w))+P2(_*d)))+P2(P2(r*P2(P2(P2(Y*f)+P2(R*w))+P2(g*d)))+P2(o*P2(P2(P2(F*f)+P2(N*w))+P2(T*d)))))),f=P2(Z+P2(b*P2(W-h))),U2[4+B>>2]=v+P2(t*f),U2[B>>2]=Q+P2(c*f),h=P2(W+P2(b*f))):(s=U2[A+224>>2],F=U2[A+208>>2],Y=U2[A+200>>2],m=U2[A+204>>2],l=U2[A+216>>2],d=U2[A+172>>2],N=U2[A+176>>2],R=U2[A+168>>2],D=U2[A+120>>2],C=P2(-U2[A+156>>2]),G=U2[A+104>>2],a=U2[A+152>>2],T=U2[A+136>>2],n=U2[A+160>>2],g=P2(P2(P2(D*C)-P2(G*a))-P2(T*n)),_=U2[A+124>>2],E=U2[A+108>>2],v=U2[A+140>>2],Z=P2(P2(P2(_*C)-P2(E*a))-P2(v*n)),Q=U2[A+128>>2],i=P2(Q*C),C=U2[A+112>>2],i=P2(i-P2(C*a)),a=U2[A+144>>2],n=P2(i-P2(a*n)),i=U2[A+184>>2],k=U2[A+188>>2],u=U2[A+192>>2],i=P2(P2(P2(h*P2(P2(P2(T*i)+P2(v*k))+P2(a*u)))+P2(P2(f*P2(P2(P2(G*i)+P2(E*k))+P2(C*u)))+P2(w*P2(P2(P2(D*i)+P2(_*k))+P2(Q*u)))))+P2(P2(P2(P2(g*i)+P2(Z*k))+P2(n*u))+U2[A+220>>2])),U2[4+B>>2]=i,d=P2(P2(P2(h*P2(P2(P2(T*R)+P2(v*d))+P2(a*N)))+P2(P2(f*P2(P2(P2(G*R)+P2(E*d))+P2(C*N)))+P2(w*P2(P2(P2(D*R)+P2(_*d))+P2(Q*N)))))+P2(l+P2(P2(P2(R*g)+P2(Z*d))+P2(n*N)))),U2[B>>2]=d,h=P2(P2(s+P2(P2(P2(g*Y)+P2(Z*m))+P2(n*F)))+P2(P2(h*P2(P2(P2(T*Y)+P2(v*m))+P2(a*F)))+P2(P2(f*P2(P2(P2(G*Y)+P2(E*m))+P2(C*F)))+P2(w*P2(P2(P2(D*Y)+P2(_*m))+P2(Q*F)))))),f=P2(P2(P2(c*P2(r-d))+P2(t*P2(o-i)))+P2(b*P2(W-h)))),X2[12+B>>2]=0,U2[8+B>>2]=h,A=X2[A+36>>2],N2[X2[X2[A>>2]+16>>2]](A,e,B,f),K2=16+B|0;},A,S1,function(A){var e,r;return X2[(A|=0)+8>>2]=16024,X2[A>>2]=15996,r=X2[(e=A+56|0)>>2],N2[X2[X2[r>>2]+20>>2]](r,X2[(r=A+72|0)>>2]),e=X2[e>>2],N2[X2[X2[e>>2]+16>>2]](e,X2[r>>2]),0|A;},function(A){var e,r;X2[(A|=0)+8>>2]=16024,X2[A>>2]=15996,r=X2[(e=A+56|0)>>2],N2[X2[X2[r>>2]+20>>2]](r,X2[(r=A+72|0)>>2]),e=X2[e>>2],N2[X2[X2[e>>2]+16>>2]](e,X2[r>>2]),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A,e,r,f,i){var a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h,F,Y,m,N,R,D,T;A|=0,e|=0,r|=0,f|=0,i|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=T=K2+-64|0,n=J2[A+76|0],b=X2[(d=n?e:r)+4>>2],8<X2[b+4>>2]-21>>>0||19<X2[X2[(n=n?r:e)+4>>2]+4>>2]||(D=P2(N2[X2[X2[b>>2]+48>>2]](b)),U2[A- -64>>2]=D,X2[A+60>>2]=f,X2[A+48>>2]=d,X2[A+44>>2]=n,X2[A+52>>2]=i,X2[i+4>>2]=X2[(f=A+72|0)>>2],e=X2[d+12>>2],t=U2[e+52>>2],Z=U2[e+56>>2],r=X2[n+12>>2],_=U2[r+52>>2],g=U2[r+56>>2],a=U2[e+20>>2],o=U2[e+36>>2],E=U2[r+20>>2],Q=U2[r+36>>2],w=U2[r+24>>2],c=U2[e+24>>2],G=U2[r+40>>2],k=U2[e+40>>2],C=U2[r+32>>2],u=U2[e+32>>2],h=U2[r>>2],s=U2[e>>2],F=U2[r+16>>2],l=U2[e+16>>2],Y=U2[e+48>>2],m=U2[r+48>>2],B=U2[e+4>>2],N=U2[r+4>>2],R=U2[r+8>>2],v=U2[e+8>>2],X2[60+T>>2]=0,X2[44+T>>2]=0,X2[28+T>>2]=0,U2[40+T>>2]=P2(P2(v*R)+P2(c*w))+P2(k*G),U2[36+T>>2]=P2(P2(v*N)+P2(c*E))+P2(k*Q),U2[24+T>>2]=P2(P2(B*R)+P2(a*w))+P2(o*G),U2[20+T>>2]=P2(P2(B*N)+P2(a*E))+P2(o*Q),t=P2(-t),U2[56+T>>2]=P2(P2(P2(c*t)-P2(v*Y))-P2(k*Z))+P2(P2(P2(v*m)+P2(c*_))+P2(k*g)),U2[52+T>>2]=P2(P2(P2(a*t)-P2(B*Y))-P2(o*Z))+P2(P2(P2(B*m)+P2(a*_))+P2(o*g)),X2[12+T>>2]=0,U2[T>>2]=P2(P2(s*h)+P2(l*F))+P2(u*C),U2[32+T>>2]=P2(P2(v*h)+P2(c*F))+P2(k*C),U2[16+T>>2]=P2(P2(B*h)+P2(a*F))+P2(o*C),U2[8+T>>2]=P2(P2(s*R)+P2(l*w))+P2(u*G),U2[4+T>>2]=P2(P2(s*N)+P2(l*E))+P2(u*Q),U2[48+T>>2]=P2(P2(P2(l*t)-P2(s*Y))-P2(u*Z))+P2(P2(P2(s*m)+P2(l*_))+P2(u*g)),v=X2[n+4>>2],N2[X2[X2[v>>2]+8>>2]](v,T,e=A+12|0,r=A+28|0),a=P2(D+U2[i+32>>2]),U2[r>>2]=a+U2[r>>2],U2[(v=A+32|0)>>2]=a+U2[v>>2],U2[(v=A+36|0)>>2]=a+U2[v>>2],U2[e>>2]=U2[e>>2]-a,U2[(v=A+16|0)>>2]=U2[v>>2]-a,U2[(v=A+20|0)>>2]=U2[v>>2]-a,f=X2[f>>2],X2[f+840>>2]=X2[d+8>>2],X2[f+836>>2]=X2[n+8>>2],N2[X2[X2[b>>2]+64>>2]](b,A+8|0,e,r),e=X2[i+4>>2],X2[e+844>>2]&&(f=X2[e+836>>2],b=X2[X2[i+8>>2]+8>>2],v=e,e=X2[X2[i+12>>2]+8>>2],R2(v,((r=(0|f)==(0|b))?f:e)+4|0,(r?e:b)+4|0)),X2[A+44>>2]=0,X2[A+48>>2]=0),K2=T+64|0;},function(A,e,r,f,i){A|=0,e|=0,r|=0,f|=0,i|=0,P2(0),P2(0);var a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h,F,Y,m,N,R,D,T,W,x,y,V,p,M,S,X,J,I=P2(0);return P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=f=K2-240|0,I=P2(1),i=J2[A+76|0],a=P2(U2[(A=i?r:e)+116>>2]-U2[A+52>>2]),n=P2(a*a),a=P2(U2[A+120>>2]-U2[A+56>>2]),n=P2(n+P2(a*a)),a=P2(U2[A+124>>2]-U2[A+60>>2]),n=P2(n+P2(a*a)),a=U2[A+276>>2],n<P2(a*a)||(r=X2[(e=i?e:r)+192>>2],8<X2[r+4>>2]-21>>>0||(i=U2[e+52>>2],I=U2[e+12>>2],a=U2[e+28>>2],n=U2[e+56>>2],b=U2[e+60>>2],t=U2[e+44>>2],Z=U2[A+120>>2],_=U2[A+116>>2],g=U2[A+124>>2],o=U2[e+8>>2],c=U2[e+24>>2],k=U2[e+40>>2],u=U2[e+36>>2],s=U2[e+20>>2],e=U2[e+4>>2],E=U2[A+56>>2],Q=U2[A+52>>2],w=U2[A+60>>2],G=U2[A+108>>2],C=U2[A+92>>2],h=U2[A+76>>2],F=U2[A+104>>2],Y=U2[A+88>>2],m=U2[A+72>>2],N=U2[A+100>>2],R=U2[A+84>>2],D=U2[A+44>>2],T=U2[A+28>>2],W=U2[A+12>>2],x=U2[A+40>>2],y=U2[A+24>>2],V=U2[A+8>>2],p=U2[A+36>>2],M=U2[A+20>>2],S=U2[A+68>>2],X=U2[A+4>>2],X2[f+236>>2]=0,X2[f+220>>2]=0,J=P2(-n),n=P2(P2(P2(a*J)-P2(I*i))-P2(t*b)),B=P2(n+P2(P2(P2(I*_)+P2(a*Z))+P2(t*g))),v=P2(n+P2(P2(P2(I*Q)+P2(a*E))+P2(t*w))),n=U2[A+272>>2],U2[f+232>>2]=(B<v?B:v)-n,l=P2(P2(P2(c*J)-P2(o*i))-P2(k*b)),d=P2(l+P2(P2(P2(o*_)+P2(c*Z))+P2(k*g))),l=P2(l+P2(P2(P2(o*Q)+P2(c*E))+P2(k*w))),U2[f+228>>2]=(d<l?d:l)-n,b=P2(P2(P2(s*J)-P2(e*i))-P2(u*b)),i=P2(b+P2(P2(P2(e*_)+P2(s*Z))+P2(u*g))),b=P2(b+P2(P2(P2(e*Q)+P2(s*E))+P2(u*w))),U2[f+224>>2]=(i<b?i:b)-n,U2[f+216>>2]=n+(v<B?B:v),U2[f+212>>2]=n+(l<d?d:l),U2[f+208>>2]=n+(b<i?i:b),X2[f+128>>2]=0,U2[f+124>>2]=B,U2[f+120>>2]=d,U2[f+116>>2]=i,X2[f+112>>2]=0,U2[f+108>>2]=P2(P2(I*h)+P2(a*C))+P2(t*G),U2[f+104>>2]=P2(P2(I*m)+P2(a*Y))+P2(t*F),U2[f+100>>2]=P2(P2(I*S)+P2(a*R))+P2(t*N),X2[f+96>>2]=0,U2[f+92>>2]=P2(P2(o*h)+P2(c*C))+P2(k*G),U2[f+88>>2]=P2(P2(o*m)+P2(c*Y))+P2(k*F),U2[f+84>>2]=P2(P2(o*S)+P2(c*R))+P2(k*N),X2[f+80>>2]=0,U2[f+76>>2]=P2(P2(e*h)+P2(s*C))+P2(u*G),U2[f+72>>2]=P2(P2(e*m)+P2(s*Y))+P2(u*F),X2[f- -64>>2]=0,U2[f+60>>2]=v,U2[f+56>>2]=l,U2[f+52>>2]=b,X2[f+48>>2]=0,U2[f+44>>2]=P2(P2(I*W)+P2(a*T))+P2(t*D),U2[f+40>>2]=P2(P2(I*V)+P2(a*y))+P2(t*x),U2[f+36>>2]=P2(P2(I*X)+P2(a*M))+P2(t*p),X2[f+32>>2]=0,U2[f+28>>2]=P2(P2(o*W)+P2(c*T))+P2(k*D),U2[f+24>>2]=P2(P2(o*V)+P2(c*y))+P2(k*x),U2[f+20>>2]=P2(P2(o*X)+P2(c*M))+P2(k*p),X2[f+16>>2]=0,U2[f+12>>2]=P2(P2(e*W)+P2(s*T))+P2(u*D),U2[f+8>>2]=P2(P2(e*V)+P2(s*y))+P2(u*x),U2[f+68>>2]=P2(P2(e*S)+P2(s*R))+P2(u*N),U2[f+4>>2]=P2(P2(e*X)+P2(s*M))+P2(u*p),X2[f>>2]=16272,U2[f+196>>2]=n,U2[f+200>>2]=U2[A+268>>2],N2[X2[X2[r>>2]+64>>2]](r,f,f+224|0,f+208|0),(I=U2[f+200>>2])<U2[A+268>>2]?U2[A+268>>2]=I:I=P2(1))),K2=f+240|0,P2(I);},function(A,e){e|=0;var r,f=0,i=0,a=0,n=0;if(a=X2[(A|=0)+72>>2]){if((0|(i=X2[e+4>>2]))==X2[e+8>>2]&&!((0|(r=i?i<<1:1))<=(0|i))){if(r&&(X2[6258]=X2[6258]+1,(f=L2(19+(r<<2)|0))&&(X2[(n=f+19&-16)-4>>2]=f)),1<=(0|i))for(a=0,f=i;;)if(X2[a+n>>2]=X2[X2[e+12>>2]+a>>2],a=a+4|0,!(f=f-1|0))break;(f=X2[e+12>>2])&&J2[e+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2]),i=X2[e+4>>2]),X2[e+12>>2]=n,S2[e+16|0]=1,X2[e+8>>2]=r,a=X2[A+72>>2];}X2[e+4>>2]=i+1,X2[X2[e+12>>2]+(i<<2)>>2]=a;}},function(A){var e;return X2[(A|=0)>>2]=16024,e=X2[A+48>>2],N2[X2[X2[e>>2]+20>>2]](e,X2[A+64>>2]),e=X2[A+48>>2],N2[X2[X2[e>>2]+16>>2]](e,X2[A+64>>2]),0|A;},function(A){var e;X2[(A|=0)>>2]=16024,e=X2[A+48>>2],N2[X2[X2[e>>2]+20>>2]](e,X2[A+64>>2]),e=X2[A+48>>2],N2[X2[X2[e>>2]+16>>2]](e,X2[A+64>>2]),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b,t,o,c,k=0;P2(0),P2(0),P2(0),P2(0),K2=c=K2-144|0,a=U2[e>>2],b=U2[e+16>>2],o=U2[e+32>>2],U2[A+20>>2]<((t=a<b?a:b)<o?t:o)||U2[(o<U2[e+(i=!(b<a)<<4)>>2]?i:32)+e>>2]<U2[A+4>>2]||(a=U2[e+8>>2],b=U2[(i=e+24|0)>>2],o=U2[(n=e+40|0)>>2],U2[A+28>>2]<((t=a<b?a:b)<o?t:o)||U2[(o<U2[(i=b<a?e+8|0:i)>>2]?i:n)>>2]<U2[A+12>>2]||(a=U2[e+4>>2],b=U2[(i=e+20|0)>>2],o=U2[(n=e+36|0)>>2],U2[A+24>>2]<((t=a<b?a:b)<o?t:o)||U2[(o<U2[(i=b<a?e+4|0:i)>>2]?i:n)>>2]<U2[A+8>>2]||(i=X2[A+36>>2],19<X2[X2[i+4>>2]+4>>2]||(n=X2[A+48>>2],X2[(k=60+c|0)>>2]=1065353216,X2[k+4>>2]=0,t=X2[e+20>>2],X2[(k=112+c|0)>>2]=X2[e+16>>2],X2[k+4>>2]=t,t=X2[e+36>>2],X2[(k=128+c|0)>>2]=X2[e+32>>2],X2[k+4>>2]=t,o=X2[4+(t=e+8|0)>>2],X2[(k=104+c|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[4+(t=e+24|0)>>2],X2[(k=120+c|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[4+(t=e+40|0)>>2],X2[(k=136+c|0)>>2]=X2[t>>2],X2[k+4>>2]=o,X2[92+c>>2]=0,X2[52+c>>2]=1065353216,X2[56+c>>2]=1065353216,X2[44+c>>2]=0,X2[48+c>>2]=0,X2[36+c>>2]=1,X2[40+c>>2]=0,X2[32+c>>2]=16056,k=X2[e+4>>2],X2[96+c>>2]=X2[e>>2],X2[100+c>>2]=k,U2[84+c>>2]=U2[A+56>>2],X2[28+c>>2]=f,X2[24+c>>2]=r,e=X2[A+40>>2],X2[8+c>>2]=e,k=X2[e+8>>2],X2[20+c>>2]=X2[e+12>>2],X2[16+c>>2]=k,a=U2[X2[A+44>>2]+32>>2],X2[12+c>>2]=32+c,e=a>P2(0)?0|N2[X2[X2[n>>2]+8>>2]](n,i,8+c|0,0,2):0|N2[X2[X2[n>>2]+8>>2]](n,i,8+c|0,X2[A+64>>2],1),i=X2[A+44>>2],k=X2[i+8>>2],X2[k+8>>2]==X2[X2[A+40>>2]+8>>2]?(X2[i+8>>2]=8+c,N2[X2[X2[i>>2]+8>>2]](i,r,f)):(k=X2[i+12>>2],X2[i+12>>2]=8+c,N2[X2[X2[i>>2]+12>>2]](i,r,f)),N2[X2[X2[e>>2]+8>>2]](e,X2[A+36>>2],8+c|0,X2[A+52>>2],X2[A+44>>2]),r=X2[A+44>>2],X2[(X2[X2[r+8>>2]+8>>2]==X2[X2[A+40>>2]+8>>2]?8:12)+r>>2]=k,N2[X2[X2[e>>2]>>2]](e),N2[X2[X2[n>>2]+60>>2]](n,e),X2[32+c>>2]=10364,(A=X2[92+c>>2])&&(N2[X2[X2[A>>2]>>2]](A),(A=X2[92+c>>2])&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2]))))))),K2=144+c|0;},J0,x0,q0,function(A){return 16196;},function(A,e,r){A|=0,e|=0,r|=0,P2(0),P2(0),P2(0),P2(0),P2(0);var f=U2[r>>2],i=U2[r+4>>2],a=U2[r+8>>2],n=P2(P2(P2(f*U2[e+80>>2])+P2(i*U2[e+84>>2]))+P2(a*U2[e+88>>2])),b=P2(P2(P2(f*U2[e+96>>2])+P2(i*U2[e+100>>2]))+P2(a*U2[e+104>>2]));f=P2(P2(P2(f*U2[e+64>>2])+P2(i*U2[e+68>>2]))+P2(a*U2[e+72>>2])),r=X2[(e=(e- -64|0)+((f<n?n<b?2:1:(f<b)<<1)<<4)|0)+4>>2],X2[A>>2]=X2[e>>2],X2[A+4>>2]=r,r=X2[(e=e+8|0)+4>>2],X2[(A=A+8|0)>>2]=X2[e>>2],X2[A+4>>2]=r;},function(A,e,r,f){var i,a,n,b,t,o;if(A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0),P2(0),1<=(0|f))for(t=A- -64|0;;)if(i=U2[e>>2],a=U2[e+4>>2],n=U2[e+8>>2],o=P2(P2(P2(i*U2[A+80>>2])+P2(a*U2[A+84>>2]))+P2(n*U2[A+88>>2])),b=P2(P2(P2(i*U2[A+96>>2])+P2(a*U2[A+100>>2]))+P2(n*U2[A+104>>2])),i=P2(P2(P2(i*U2[A+64>>2])+P2(a*U2[A+68>>2]))+P2(n*U2[A+72>>2])),n=X2[4+(a=((i<o?o<b?2:1:(i<b)<<1)<<4)+t|0)>>2],X2[r>>2]=X2[a>>2],X2[r+4>>2]=n,o=X2[4+(a=8+a|0)>>2],X2[(n=r+8|0)>>2]=X2[a>>2],X2[4+n>>2]=o,e=e+16|0,r=r+16|0,!(f=f-1|0))break;},X1,function(A,e,r){A|=0,e|=0,r|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var f,i,a=U2[A+96>>2],n=U2[A+80>>2],b=U2[A+84>>2],t=U2[A+104>>2],o=U2[A+72>>2],c=U2[A+88>>2],k=U2[A+100>>2],u=U2[A+68>>2],A=U2[A+64>>2];X2[r+12>>2]=0,n=P2(n-A),k=P2(k-u),b=P2(b-u),A=P2(a-A),u=P2(P2(n*k)-P2(b*A)),i=P2((f=u)*u),u=P2(t-o),a=P2(c-o),o=P2(P2(b*u)-P2(a*k)),u=P2(P2(a*A)-P2(n*u)),A=P2(P2(1)/P2(O2(P2(i+P2(P2(o*o)+P2(u*u)))))),a=P2(f*A),U2[r+8>>2]=a,u=P2(u*A),U2[r+4>>2]=u,o=P2(o*A),U2[r>>2]=o,e&&(U2[r+8>>2]=-a,U2[r+4>>2]=-u,U2[r>>2]=-o);},J1,J1,function(A,e,r,f){f|=0,N2[X2[X2[(A|=0)>>2]+108>>2]](A,e|=0,r|=0),N2[X2[X2[A>>2]+108>>2]](A,(e+1|0)%3|0,f);},function(A,e,r){var f,i=X2[(e=(A=((e|=0)<<4)+(A|=0)|0)+72|0)+4>>2];X2[(f=(r|=0)+8|0)>>2]=X2[e>>2],X2[4+f>>2]=i,e=X2[(A=A- -64|0)+4>>2],X2[r>>2]=X2[A>>2],X2[r+4>>2]=e;},U1,function(A,e,r,f){N2[X2[X2[(A|=0)>>2]+124>>2]](A,f|=0,e|=0,r|=0);},function(A,e,r){A|=0,e|=0,r=P2(r),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var f,i,a,n,b,t,o,c,k,u,s,l,B=0;return K2=l=K2-32|0,c=U2[A+64>>2],b=P2(U2[A+80>>2]-c),f=U2[A+68>>2],n=P2(U2[A+100>>2]-f),i=P2(U2[A+84>>2]-f),t=P2(U2[A+96>>2]-c),a=P2(P2(b*n)-P2(i*t)),s=P2((o=a)*a),u=i,i=U2[A+72>>2],a=P2(U2[A+104>>2]-i),k=P2(U2[A+88>>2]-i),n=P2(P2(u*a)-P2(k*n)),b=P2(P2(k*t)-P2(b*a)),t=P2(P2(1)/P2(O2(P2(s+P2(P2(n*n)+P2(b*b)))))),a=P2(o*t),n=P2(n*t),b=P2(b*t),f=P2(P2(P2(U2[e+8>>2]*a)+P2(P2(U2[e>>2]*n)+P2(U2[e+4>>2]*b)))-P2(P2(i*a)+P2(P2(c*n)+P2(f*b)))),(c=P2(-r))<=f&&f<=r&&(N2[X2[X2[A>>2]+104>>2]](A,0,16+l|0,l),t=U2[16+l>>2],f=P2(U2[l>>2]-t),k=U2[20+l>>2],i=P2(U2[4+l>>2]-k),r=P2(P2(b*f)-P2(n*i)),s=P2((o=r)*r),r=P2(a*i),u=U2[24+l>>2],i=P2(U2[8+l>>2]-u),r=P2(r-P2(b*i)),f=P2(P2(n*i)-P2(a*f)),i=P2(P2(1)/P2(O2(P2(s+P2(P2(r*r)+P2(f*f)))))),o=P2(o*i),r=P2(r*i),f=P2(f*i),c>P2(P2(P2(U2[e+8>>2]*o)+P2(P2(U2[e>>2]*r)+P2(U2[e+4>>2]*f)))-P2(P2(u*o)+P2(P2(t*r)+P2(k*f))))||(N2[X2[X2[A>>2]+104>>2]](A,1,16+l|0,l),t=U2[16+l>>2],f=P2(U2[l>>2]-t),k=U2[20+l>>2],i=P2(U2[4+l>>2]-k),r=P2(P2(b*f)-P2(n*i)),s=P2((o=r)*r),r=P2(a*i),u=U2[24+l>>2],i=P2(U2[8+l>>2]-u),r=P2(r-P2(b*i)),f=P2(P2(n*i)-P2(a*f)),i=P2(P2(1)/P2(O2(P2(s+P2(P2(r*r)+P2(f*f)))))),o=P2(o*i),r=P2(r*i),f=P2(f*i),c>P2(P2(P2(U2[e+8>>2]*o)+P2(P2(U2[e>>2]*r)+P2(U2[e+4>>2]*f)))-P2(P2(u*o)+P2(P2(t*r)+P2(k*f))))||(N2[X2[X2[A>>2]+104>>2]](A,2,16+l|0,l),o=c,c=U2[16+l>>2],f=P2(U2[l>>2]-c),i=U2[20+l>>2],t=P2(U2[4+l>>2]-i),r=P2(P2(b*f)-P2(n*t)),k=P2((u=r)*r),s=P2(a*t),r=b,b=U2[24+l>>2],t=P2(U2[8+l>>2]-b),r=P2(s-P2(r*t)),a=P2(P2(n*t)-P2(a*f)),n=P2(P2(1)/P2(O2(P2(k+P2(P2(r*r)+P2(a*a)))))),f=P2(u*n),r=P2(r*n),a=P2(a*n),o>P2(P2(P2(U2[e+8>>2]*f)+P2(P2(U2[e>>2]*r)+P2(U2[e+4>>2]*a)))-P2(P2(b*f)+P2(P2(c*r)+P2(i*a))))||(B=1)))),K2=32+l|0,0|B;},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var i,a,n=U2[A+96>>2],b=U2[A+80>>2],t=U2[A+84>>2],o=U2[A+104>>2],c=U2[(e=A+72|0)>>2],k=U2[A+88>>2],u=U2[A+100>>2],s=U2[A+68>>2],l=U2[A+64>>2];X2[r+12>>2]=0,b=P2(b-l),u=P2(u-s),t=P2(t-s),l=P2(n-l),s=P2(P2(b*u)-P2(t*l)),a=P2((i=s)*s),s=P2(o-c),n=P2(k-c),c=P2(P2(t*s)-P2(n*u)),s=P2(P2(n*l)-P2(b*s)),l=P2(P2(1)/P2(O2(P2(a+P2(P2(c*c)+P2(s*s)))))),U2[r+8>>2]=i*l,U2[r+4>>2]=s*l,U2[r>>2]=c*l,o=X2[e+4>>2],X2[(r=f+8|0)>>2]=X2[e>>2],X2[r+4>>2]=o,e=X2[A+68>>2],X2[f>>2]=X2[A+64>>2],X2[f+4>>2]=e;},A,function(A,e,r,f){var i,a,n;A|=0,e|=0,r|=0,f|=0,P2(0),X2[(f=(K2=r=K2-800|0)+748|0)>>2]=0,X2[f+4>>2]=0,X2[(f=r+760|0)>>2]=0,X2[f+4>>2]=0,X2[r+756>>2]=1065353216,X2[(f=r+768|0)>>2]=0,X2[f+4>>2]=0,X2[(f=r+780|0)>>2]=0,X2[f+4>>2]=0,X2[r+776>>2]=1065353216,X2[(f=r+788|0)>>2]=0,X2[f+4>>2]=0,X2[r+796>>2]=0,X2[r+740>>2]=0,X2[r+744>>2]=0,X2[r+736>>2]=1065353216,X2[r+728>>2]=0,X2[r+732>>2]=0,X2[r+560>>2]=15320,U2[r+724>>2]=U2[A+200>>2],X2[(f=r+528|0)>>2]=0,X2[f+4>>2]=0,X2[r+524>>2]=1065353216,X2[(f=r+536|0)>>2]=0,X2[f+4>>2]=0,X2[r+544>>2]=0,X2[r+508>>2]=0,X2[r+512>>2]=0,X2[r+516>>2]=1065353216,X2[r+520>>2]=1065353216,X2[r+500>>2]=8,X2[r+504>>2]=0,X2[r+496>>2]=14616,X2[r+552>>2]=0,a=U2[A+196>>2],U2[r+532>>2]=a,U2[r+548>>2]=a,X2[(f=r+412|0)>>2]=1065353216,X2[f+4>>2]=0,n=X2[4+(i=e+8|0)>>2],X2[(f=r+456|0)>>2]=X2[i>>2],X2[f+4>>2]=n,i=X2[e+20>>2],X2[(f=r+464|0)>>2]=X2[e+16>>2],X2[f+4>>2]=i,n=X2[4+(i=e+24|0)>>2],X2[(f=r+472|0)>>2]=X2[i>>2],X2[f+4>>2]=n,i=X2[e+36>>2],X2[(f=r+480|0)>>2]=X2[e+32>>2],X2[f+4>>2]=i,n=X2[4+(i=e+40|0)>>2],X2[(f=r+488|0)>>2]=X2[i>>2],X2[f+4>>2]=n,X2[r+444>>2]=0,X2[r+436>>2]=1025758986,X2[r+404>>2]=1065353216,X2[r+408>>2]=1065353216,X2[r+396>>2]=0,X2[r+400>>2]=0,X2[r+388>>2]=1,X2[r+392>>2]=0,X2[r+384>>2]=16056,f=X2[e+4>>2],X2[r+448>>2]=X2[e>>2],X2[r+452>>2]=f,S2[r+356|0]=0,X2[r+332>>2]=953267991,X2[r+8>>2]=15936,X2[r+20>>2]=r+384,X2[r+16>>2]=r+496,X2[r+12>>2]=r+24,S1(r+8|0,A+4|0,A+68|0,r+736|0,r+736|0,r+560|0)&&(a=U2[r+724>>2])<U2[A+200>>2]&&(U2[A+200>>2]=a),X2[r+384>>2]=10364,(A=X2[r+444>>2])&&(N2[X2[X2[A>>2]>>2]](A),(A=X2[r+444>>2])&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2]))),K2=r+800|0;},P1,function(A){n(P1(A|=0));},j1,function(A,e,r,f,i){A|=0,e|=0,r|=0,f|=0,i|=0;var a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h,F,Y,m,N,R,x,y,V,D=0,T=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),0),W=P2(0),I=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),0);if(P2(0),P2(0),P2(0),P2(0),(0|(T=X2[A+52>>2]))<1)return P2(P2(1));for(m=(D=J2[A+68|0])?e:r,N=U2[(e=D?r:e)- -64>>2],h=U2[e+60>>2],F=U2[e+(D=56)>>2],Y=U2[e+52>>2],R=U2[e+48>>2],n=U2[e+44>>2],b=U2[e+40>>2],t=U2[e+36>>2],x=U2[e+32>>2],o=U2[e+28>>2],c=U2[e+24>>2],k=U2[e+20>>2],y=U2[e+16>>2],u=U2[e+12>>2],s=U2[e+8>>2],r=X2[e+304>>2],l=U2[e+4>>2],V=X2[e+192>>2],W=P2(1);;)if(X2[e+304>>2]=r+1,r=X2[V+32>>2]+D|0,a=U2[r>>2],B=U2[r-8>>2],v=U2[r-4>>2],d=U2[r-24>>2],Z=U2[r-56>>2],_=U2[r-40>>2],g=U2[r-20>>2],E=U2[r-52>>2],Q=U2[r-36>>2],w=U2[r-16>>2],G=U2[r-48>>2],C=U2[r-32>>2],X2[e+64>>2]=0,X2[e+48>>2]=0,X2[e+32>>2]=0,X2[e+16>>2]=0,U2[e+44>>2]=P2(P2(t*G)+P2(b*C))+P2(n*w),U2[e+40>>2]=P2(P2(t*E)+P2(b*Q))+P2(n*g),U2[e+36>>2]=P2(P2(t*Z)+P2(b*_))+P2(n*d),U2[e+28>>2]=P2(P2(k*G)+P2(c*C))+P2(o*w),U2[e+24>>2]=P2(P2(k*E)+P2(c*Q))+P2(o*g),U2[e+20>>2]=P2(P2(k*Z)+P2(c*_))+P2(o*d),U2[e+12>>2]=P2(P2(l*G)+P2(s*C))+P2(u*w),U2[e+8>>2]=P2(P2(l*E)+P2(s*Q))+P2(u*g),U2[e+4>>2]=P2(P2(l*Z)+P2(s*_))+P2(u*d),U2[e+60>>2]=h+P2(P2(P2(t*B)+P2(b*v))+P2(n*a)),U2[e+56>>2]=F+P2(P2(P2(k*B)+P2(c*v))+P2(o*a)),U2[e+52>>2]=Y+P2(P2(P2(l*B)+P2(s*v))+P2(u*a)),r=X2[X2[A+60>>2]+I>>2],a=P2(N2[X2[X2[r>>2]+12>>2]](r,e,m,f,i)),U2[e+64>>2]=N,U2[e+60>>2]=h,U2[e+56>>2]=F,U2[e+52>>2]=Y,U2[e+48>>2]=R,U2[e+44>>2]=n,U2[e+40>>2]=b,U2[e+36>>2]=t,U2[e+32>>2]=x,U2[e+28>>2]=o,U2[e+24>>2]=c,U2[e+20>>2]=k,U2[e+16>>2]=y,U2[e+12>>2]=u,U2[e+8>>2]=s,U2[e+4>>2]=l,r=X2[e+304>>2]+1|0,X2[e+304>>2]=r,W=a<W?a:W,D=D+80|0,I=I+4|0,!(T=T-1|0))break;return P2(W);},function(A,e){e|=0;var r,f=0,i=0,a=0;if(1<=(0|(f=X2[(A|=0)+52>>2])))for(;;)if((r=X2[X2[A+60>>2]+i>>2])&&(N2[X2[X2[r>>2]+16>>2]](r,e),f=X2[A+52>>2]),i=i+4|0,!((0|(a=a+1|0))<(0|f)))break;},e,A,f,function(A,e){var r=0,r=A|=0,f=X2[X2[X2[A+4>>2]+4>>2]+32>>2];A=X2[(e|=0)+36>>2],z1(r,X2[64+(f+H2(A,80)|0)>>2],A);},function(A,e,r){A|=0,e|=0,r=P2(r),N2[X2[X2[A>>2]+12>>2]](A,e);},a1,a1,function(A){var e;return X2[(A|=0)>>2]=16644,(e=X2[A+56>>2])&&J2[A+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+56>>2]=0,S2[A+60|0]=1,X2[(e=A+48|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+36>>2])&&J2[A+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+36>>2]=0,S2[A+40|0]=1,X2[(e=A+28|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+16>>2]=0,S2[A+20|0]=1,X2[(e=A+8|0)>>2]=0,(X2[4+e>>2]=0)|A;},function(A){var e;X2[(A|=0)>>2]=16644,(e=X2[A+56>>2])&&J2[A+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+56>>2]=0,S2[A+60|0]=1,X2[(e=A+48|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+36>>2])&&J2[A+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+36>>2]=0,S2[A+40|0]=1,X2[(e=A+28|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),n(A);},function(A,e,r){A|=0,e|=0,r|=0;var f,i=0,a=0,n=0,b=0,t=0,o=0,c=0,k=0;X2[6370]=X2[6370]+1,b=X2[A+36>>2],i=H2((i=((i=r<<16|e)<<15^-1)+i|0)>>>10^i,9),f=b+((X2[A+12>>2]-1&((i=((i^=i>>>6)<<11^-1)+i|0)>>>16^i))<<2)|0,i=X2[f>>2];A:if(-1!=(0|i)){for(n=X2[A+16>>2],a=i;;){if(t=n+H2(a,12)|0,X2[t+4>>2]==(0|r)&&X2[t>>2]==(0|e))break;if(-1==(0|(a=X2[X2[A+56>>2]+(a<<2)>>2])))break A;}c=X2[8+(n+H2(a,12)|0)>>2],r=X2[A+56>>2];e:{if((0|i)!=(0|a)){for(;;)if((0|a)==(0|(i=X2[(o=r+((e=i)<<2)|0)>>2])))break;if(-1!=(0|e)){X2[o>>2]=X2[r+(a<<2)>>2];break e;}}X2[f>>2]=X2[r+(a<<2)>>2];}if((0|(f=X2[A+8>>2]-1|0))==(0|a))return X2[A+8>>2]=a,0|c;e:{if(n=n+H2(f,12)|0,e=X2[n+4>>2]<<16|X2[n>>2],e=H2((e=(e<<15^-1)+e|0)>>>10^e,9),o=X2[A+12>>2]-1&((e=((e^=e>>>6)<<11^-1)+e|0)>>>16^e),(0|f)!=(0|(i=X2[(b=b+(o<<2)|0)>>2]))){for(;;)if((0|f)==(0|(i=X2[(k=r+((e=i)<<2)|0)>>2])))break;if(-1!=(0|e)){X2[k>>2]=X2[r+(f<<2)>>2];break e;}}X2[b>>2]=X2[r+(f<<2)>>2];}e=X2[n+4>>2],X2[t>>2]=X2[n>>2],X2[t+4>>2]=e,X2[t+8>>2]=X2[n+8>>2],e=X2[A+36>>2]+(o<<2)|0,X2[X2[A+56>>2]+(a<<2)>>2]=X2[e>>2],X2[e>>2]=a,X2[A+8>>2]=X2[A+8>>2]-1;}return 0|c;},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a=0,n=0,b=0,t=0,o=0,c=0,k=0;X2[6369]=X2[6369]+1,a=H2((a=((a=r<<16|e)<<15^-1)+a|0)>>>10^a,9),f=(a=((a^=a>>>6)<<11^-1)+a|0)>>>16^a,a=X2[A+12>>2];A:{if(-1!=(0|(b=X2[X2[A+36>>2]+((o=f&a-1)<<2)>>2])))for(n=X2[A+16>>2];;){if(t=n+H2(b,12)|0,X2[t+4>>2]==(0|r)&&X2[t>>2]==(0|e))break A;if(-1==(0|(b=X2[X2[A+56>>2]+(b<<2)>>2])))break;}e:{r:{if((0|(A=k=X2[(n=A)+8>>2]))==(0|a)){if((0|a)<(0|(A=a?a<<1:1)))break r;A=a;}X2[n+8>>2]=A+1,c=X2[n+16>>2];break e;}if(A&&(X2[6258]=X2[6258]+1,(b=L2(H2(A,12)+19|0))&&(X2[(c=b+19&-16)-4>>2]=b)),1<=(0|a))for(b=0;;)if(o=X2[n+16>>2]+b|0,i=X2[o+4>>2],X2[(t=b+c|0)>>2]=X2[o>>2],X2[t+4>>2]=i,X2[t+8>>2]=X2[o+8>>2],b=b+12|0,!(a=a-1|0))break;(a=X2[n+16>>2])&&J2[n+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[a-4>>2])),X2[n+16>>2]=c,X2[n+12>>2]=A,S2[n+20|0]=1,X2[n+8>>2]=X2[n+8>>2]+1,O1(n),o=X2[n+12>>2]-1&f;}t=H2(k,12)+c|0,X2[t+8>>2]=0,X2[t+4>>2]=r,X2[t>>2]=e,A=X2[n+36>>2]+(o<<2)|0,X2[X2[n+56>>2]+(k<<2)>>2]=X2[A>>2],X2[A>>2]=k;}return 0|t;},K1,q1,function(A){n(q1(A|=0));},function(A,e,r,f,x){A|=0,e|=0,r|=0,f|=0,x|=0;var y,V,p,M,S,X,J,U,H,i=0,a=0,n=0,b=0,t=P2(0),o=P2(0),c=P2(0),k=P2(0),u=P2(0),s=P2(0),l=0,B=P2(0),v=P2(0),d=0,Z=0,_=0,g=P2(0),E=P2(0),Q=P2(0),w=P2(0),G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=P2(0),R=P2(0),D=P2(0),T=P2(0),P=0,j=0,W=P2(0),z=P2(0),O=0,K=0,L=0,q=P2(0),$=(P2(0),P2(0),P2(0),P2(0),0),I=(P2(0),P2(0),P2(0),P2(0),P2(0),K2-3584|0);if(K2=I,O=X2[e+4>>2],(P=X2[O+72>>2])&&(K=X2[r+4>>2],d=X2[K+72>>2])){if(X2[K+76>>2]!=X2[A+112>>2]||X2[O+76>>2]!=X2[A+108>>2]){if(i=X2[A+84>>2],1<=(0|(n=X2[i+(a=8)>>2]))){for(;;)if((l=X2[X2[i+16>>2]+a>>2])&&(N2[X2[X2[l>>2]>>2]](l),b=X2[A+4>>2],N2[X2[X2[b>>2]+60>>2]](b,l)),a=a+12|0,!(n=n-1|0))break;i=X2[A+84>>2];}L1(i),X2[A+108>>2]=X2[O+76>>2],X2[A+112>>2]=X2[K+76>>2];}if(S2[0|(a=88+I|0)]=1,X2[84+I>>2]=0,X2[76+I>>2]=0,X2[80+I>>2]=0,X2[(i=232+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=240+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=248+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=256+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=264+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=272+I|0)>>2]=0,X2[i+4>>2]=0,X2[280+I>>2]=0,X2[(i=440+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=448+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=456+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=464+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=472+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=480+I|0)>>2]=0,X2[i+4>>2]=0,X2[488+I>>2]=0,X2[(i=648+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=656+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=664+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=672+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=680+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=688+I|0)>>2]=0,X2[i+4>>2]=0,X2[696+I>>2]=0,X2[112+I>>2]=1025,X2[904+I>>2]=0,X2[(i=896+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=888+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=880+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=872+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=864+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=856+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1100+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1108+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1116+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1124+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1132+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1140+I|0)>>2]=0,X2[i+4>>2]=0,X2[1148+I>>2]=0,X2[(i=1308+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1316+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1324+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1332+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1340+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1348+I|0)>>2]=0,X2[i+4>>2]=0,X2[1356+I>>2]=0,X2[956+I>>2]=0,X2[948+I>>2]=0,X2[952+I>>2]=0,X2[976+I>>2]=0,X2[980+I>>2]=1025,X2[1564+I>>2]=0,X2[(i=1556+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1548+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1540+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1532+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1524+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1516+I|0)>>2]=0,X2[i+4>>2]=0,X2[1772+I>>2]=0,X2[(i=1764+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1756+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1748+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1740+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1732+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1724+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1844+I|0)>>2]=0,X2[i+4>>2]=1025,X2[(i=1816+I|0)>>2]=0,X2[i+4>>2]=0,X2[1824+I>>2]=0,X2[(i=1968+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1976+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1984+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=1992+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2e3+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2008+I|0)>>2]=0,X2[i+4>>2]=0,X2[2016+I>>2]=0,X2[2224+I>>2]=0,X2[(i=2216+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2208+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2200+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2192+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2184+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2176+I|0)>>2]=0,X2[i+4>>2]=0,X2[2432+I>>2]=0,X2[(i=2424+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2416+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2408+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2400+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2392+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2384+I|0)>>2]=0,X2[i+4>>2]=0,X2[2640+I>>2]=0,X2[(i=2632+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2624+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2616+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2608+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2600+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2592+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2712+I|0)>>2]=0,X2[i+4>>2]=1025,X2[2692+I>>2]=0,X2[(i=2684+I|0)>>2]=0,X2[i+4>>2]=0,X2[2884+I>>2]=0,X2[(i=2876+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2868+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2860+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2852+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2844+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=2836+I|0)>>2]=0,X2[i+4>>2]=0,X2[3092+I>>2]=0,X2[(i=3084+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3076+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3068+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3060+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3052+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3044+I|0)>>2]=0,X2[i+4>>2]=0,X2[3300+I>>2]=0,X2[(i=3292+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3284+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3276+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3268+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3260+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3252+I|0)>>2]=0,X2[i+4>>2]=0,X2[3508+I>>2]=0,X2[(i=3500+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3492+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3484+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3476+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3468+I|0)>>2]=0,X2[i+4>>2]=0,X2[(i=3460+I|0)>>2]=0,X2[i+4>>2]=0,X2[3580+I>>2]=0,X2[3560+I>>2]=0,X2[(i=3552+I|0)>>2]=0,X2[i+4>>2]=0,l=X2[A+84>>2],S2[0|a]=0,X2[84+I>>2]=112+I,X2[76+I>>2]=0,X2[80+I>>2]=4,!((0|(b=X2[l+8>>2]))<=0)){for(n=0;;){if(a=X2[8+(X2[l+16>>2]+H2(n,12)|0)>>2]){if(N2[X2[X2[a>>2]+16>>2]](a,72+I|0),1<=(0|(a=X2[76+I>>2])))for(Z=b=0;;)if(i=X2[X2[84+I>>2]+b>>2],X2[i+844>>2]&&(X2[x+4>>2]=i,_=X2[i+836>>2],j=X2[X2[x+8>>2]+8>>2],L=i,i=X2[X2[x+12>>2]+8>>2],R2(L,((a=(0|_)==(0|j))?_:i)+4|0,(a?i:j)+4|0),X2[x+4>>2]=0,a=X2[76+I>>2]),b=b+4|0,!((0|(Z=Z+1|0))<(0|a)))break;if((0|a)<=-1)for(X2[80+I>>2]<=-1&&((i=X2[84+I>>2])&&J2[88+I|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),S2[88+I|0]=1,X2[80+I>>2]=0,X2[84+I>>2]=0),b=a<<2;;)if(b=b+4|(X2[X2[84+I>>2]+b>>2]=0),!((i=a)>>>0<=(a=i+1|0)>>>0))break;X2[76+I>>2]=0,b=X2[l+8>>2];}if(!((0|(n=n+1|0))<(0|b)))break;}(a=X2[84+I>>2])&&J2[88+I|0]&&(X2[6259]=X2[6259]+1,q2(X2[a-4>>2]));}if(X2[92+I>>2]=f,X2[76+I>>2]=0,X2[72+I>>2]=16748,X2[88+I>>2]=X2[A+4>>2],X2[104+I>>2]=X2[A+72>>2],X2[100+I>>2]=X2[A+84>>2],X2[84+I>>2]=r,f=X2[r+12>>2],t=U2[f+56>>2],X2[80+I>>2]=e,a=X2[e+12>>2],o=U2[a+40>>2],m=U2[f+52>>2],c=U2[a+24>>2],w=U2[f+48>>2],B=U2[a+8>>2],N=U2[a+56>>2],T=U2[a+52>>2],G=U2[a+48>>2],k=U2[a+36>>2],u=U2[a+20>>2],v=U2[a+4>>2],C=U2[f+40>>2],R=U2[f+24>>2],h=U2[f+8>>2],D=U2[f+36>>2],E=U2[f+20>>2],F=U2[f+4>>2],g=U2[a>>2],Q=U2[a+16>>2],s=U2[a+32>>2],Y=U2[f+16>>2],W=U2[f>>2],z=U2[f+32>>2],X2[96+I>>2]=x,(f=X2[P>>2])&&(a=X2[d>>2])){for(T=P2(-T),q=P2(P2(P2(P2(c*T)-P2(B*G))-P2(o*N))+P2(P2(P2(B*w)+P2(c*m))+P2(o*t))),S=P2(P2(P2(P2(u*T)-P2(v*G))-P2(k*N))+P2(P2(P2(v*w)+P2(u*m))+P2(k*t))),m=P2(P2(P2(P2(Q*T)-P2(g*G))-P2(s*N))+P2(P2(P2(g*w)+P2(Q*m))+P2(s*t))),t=U2[x+32>>2],X2[116+I>>2]=a,X2[112+I>>2]=f,w=P2(P2(P2(B*h)+P2(c*R))+P2(o*C)),N=P2(j2(w)),G=P2(P2(P2(B*F)+P2(c*E))+P2(o*D)),T=P2(j2(G)),y=P2(P2(P2(B*W)+P2(c*Y))+P2(o*z)),X=P2(j2(y)),V=P2(P2(P2(v*h)+P2(u*R))+P2(k*C)),J=P2(j2(V)),p=P2(P2(P2(v*F)+P2(u*E))+P2(k*D)),U=P2(j2(p)),M=P2(P2(P2(v*W)+P2(u*Y))+P2(k*z)),H=P2(j2(M)),C=P2(P2(P2(g*h)+P2(Q*R))+P2(s*C)),R=P2(j2(C)),h=P2(P2(P2(g*F)+P2(Q*E))+P2(s*D)),D=P2(j2(h)),g=P2(P2(P2(g*W)+P2(Q*Y))+P2(s*z)),Q=P2(j2(g)),Z=124,i=112+I|0,f=n=128,b=1;;){A:{e:{r:{if(_=X2[(a=(j=(P=b-1|0)<<3)+i|0)>>2],d=X2[a+4>>2],k=U2[d+16>>2],u=U2[d>>2],o=P2(P2(P2(k-u)*P2(.5))+P2(0)),v=U2[d+20>>2],s=U2[d+4>>2],c=P2(P2(P2(v-s)*P2(.5))+P2(0)),E=U2[d+24>>2],F=U2[d+8>>2],B=P2(P2(P2(E-F)*P2(.5))+P2(0)),Y=P2(P2(P2(Q*o)+P2(D*c))+P2(R*B)),k=P2(P2(k+u)*P2(.5)),u=P2(P2(v+s)*P2(.5)),v=P2(P2(E+F)*P2(.5)),s=P2(m+P2(P2(P2(g*k)+P2(h*u))+P2(C*v))),U2[_>>2]<=P2(t+P2(Y+s))&&U2[_+16>>2]>=P2(P2(s-Y)-t)&&(s=P2(P2(P2(H*o)+P2(U*c))+P2(J*B)),E=P2(S+P2(P2(P2(M*k)+P2(p*u))+P2(V*v))),U2[_+4>>2]<=P2(t+P2(s+E))&&U2[_+20>>2]>=P2(P2(E-s)-t)&&(o=P2(P2(P2(X*o)+P2(T*c))+P2(N*B)),c=P2(q+P2(P2(P2(y*k)+P2(G*u))+P2(w*v))),U2[_+8>>2]<=P2(t+P2(o+c))&&U2[_+24>>2]>=P2(P2(c-o)-t)))){if((0|P)<=(0|Z))l=n,a=i;else {if((0|(l=n<<1))<=(0|n))a=i;else if((0|l)<=(0|f))a=i;else {if(a=0,n&&(X2[6258]=X2[6258]+1,(f=L2(19+(n<<4)|0))&&(X2[(a=f+19&-16)-4>>2]=f),!((0|n)<1)))for(Z=a,f=i;;)if(L=X2[f+4>>2],X2[Z>>2]=X2[f>>2],X2[Z+4>>2]=L,Z=Z+8|0,f=f+8|0,!(n=n-1|0))break;$&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),$=1,f=l;}Z=l-4|0;}if(i=X2[d+40>>2],X2[_+40>>2]){if(n=X2[_+36>>2],i){X2[(i=a+j|0)+4>>2]=X2[d+36>>2],X2[i>>2]=n,n=X2[_+40>>2],X2[(i=(b<<3)+a|0)+4>>2]=X2[d+36>>2],X2[i>>2]=n,n=X2[_+36>>2],X2[i+12>>2]=X2[d+40>>2],X2[i+8>>2]=n,n=X2[_+40>>2],X2[i+20>>2]=X2[d+40>>2],X2[i+16>>2]=n,b=b+3|0;break e;}X2[(i=a+j|0)+4>>2]=d,X2[i>>2]=n,i=X2[_+40>>2],X2[(n=(b<<3)+a|0)+4>>2]=d,X2[n>>2]=i;break r;}if(i){X2[(i=a+j|0)+4>>2]=X2[d+36>>2],X2[i>>2]=_,X2[(i=(b<<3)+a|0)+4>>2]=X2[d+40>>2],X2[i>>2]=_;break r;}N2[X2[X2[72+I>>2]+8>>2]](72+I|0,_,d),n=l,i=a;}b=P;break A;}b=b+1|0;}n=l,i=a;}if(!b)break;}i&&$&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2]));}if(l=X2[A+84>>2],1<=X2[l+8>>2])for(i=0;;){if(f=(b=H2(i,12))+X2[l+16>>2]|0,(n=X2[f+8>>2])&&(f=X2[O+32>>2]+H2(X2[f>>2],80)|0,Z=X2[f+64>>2],a=X2[e+12>>2],W=U2[a+52>>2],z=U2[a+56>>2],s=U2[f+48>>2],m=U2[f+52>>2],w=U2[f+56>>2],N=U2[f+4>>2],G=U2[f+20>>2],C=U2[f+36>>2],R=U2[f+8>>2],h=U2[f+24>>2],D=U2[f+40>>2],t=U2[a+20>>2],o=U2[a+24>>2],E=U2[f>>2],c=U2[a+36>>2],F=U2[f+16>>2],B=U2[a+40>>2],Y=U2[f+32>>2],T=U2[a+48>>2],k=U2[a+8>>2],u=U2[a>>2],v=U2[a+4>>2],g=U2[a+16>>2],Q=U2[a+32>>2],X2[172+I>>2]=0,X2[156+I>>2]=0,X2[140+I>>2]=0,X2[124+I>>2]=0,U2[144+I>>2]=P2(P2(Q*E)+P2(c*F))+P2(B*Y),U2[128+I>>2]=P2(P2(g*E)+P2(t*F))+P2(o*Y),U2[112+I>>2]=P2(P2(u*E)+P2(v*F))+P2(k*Y),U2[152+I>>2]=P2(P2(Q*R)+P2(c*h))+P2(B*D),U2[148+I>>2]=P2(P2(Q*N)+P2(c*G))+P2(B*C),U2[136+I>>2]=P2(P2(g*R)+P2(t*h))+P2(o*D),U2[132+I>>2]=P2(P2(g*N)+P2(t*G))+P2(o*C),U2[120+I>>2]=P2(P2(u*R)+P2(v*h))+P2(k*D),U2[116+I>>2]=P2(P2(u*N)+P2(v*G))+P2(k*C),U2[168+I>>2]=z+P2(P2(P2(Q*s)+P2(c*m))+P2(B*w)),U2[164+I>>2]=W+P2(P2(P2(g*s)+P2(t*m))+P2(o*w)),U2[160+I>>2]=T+P2(P2(P2(u*s)+P2(v*m))+P2(k*w)),N2[X2[X2[Z>>2]+8>>2]](Z,112+I|0,56+I|0,40+I|0),t=U2[x+32>>2],U2[56+I>>2]=U2[56+I>>2]-t,U2[60+I>>2]=U2[60+I>>2]-t,U2[64+I>>2]=U2[64+I>>2]-t,U2[40+I>>2]=t+U2[40+I>>2],U2[44+I>>2]=t+U2[44+I>>2],U2[48+I>>2]=t+U2[48+I>>2],f=X2[K+32>>2]+H2(X2[4+(b+X2[l+16>>2]|0)>>2],80)|0,Z=X2[f+64>>2],a=X2[r+12>>2],z=U2[a+52>>2],T=U2[a+56>>2],m=U2[f+48>>2],w=U2[f+52>>2],N=U2[f+56>>2],G=U2[f+4>>2],C=U2[f+20>>2],R=U2[f+36>>2],h=U2[f+8>>2],D=U2[f+24>>2],E=U2[f+40>>2],o=U2[a+20>>2],c=U2[a+24>>2],F=U2[f>>2],B=U2[a+36>>2],Y=U2[f+16>>2],k=U2[a+40>>2],W=U2[f+32>>2],q=U2[a+48>>2],u=U2[a+8>>2],v=U2[a>>2],g=U2[a+4>>2],Q=U2[a+16>>2],s=U2[a+32>>2],X2[172+I>>2]=0,X2[156+I>>2]=0,X2[140+I>>2]=0,X2[124+I>>2]=0,U2[144+I>>2]=P2(P2(s*F)+P2(B*Y))+P2(k*W),U2[128+I>>2]=P2(P2(Q*F)+P2(o*Y))+P2(c*W),U2[112+I>>2]=P2(P2(v*F)+P2(g*Y))+P2(u*W),U2[152+I>>2]=P2(P2(s*h)+P2(B*D))+P2(k*E),U2[148+I>>2]=P2(P2(s*G)+P2(B*C))+P2(k*R),U2[136+I>>2]=P2(P2(Q*h)+P2(o*D))+P2(c*E),U2[132+I>>2]=P2(P2(Q*G)+P2(o*C))+P2(c*R),U2[120+I>>2]=P2(P2(v*h)+P2(g*D))+P2(u*E),U2[116+I>>2]=P2(P2(v*G)+P2(g*C))+P2(u*R),U2[168+I>>2]=T+P2(P2(P2(s*m)+P2(B*w))+P2(k*N)),U2[164+I>>2]=z+P2(P2(P2(Q*m)+P2(o*w))+P2(c*N)),U2[160+I>>2]=q+P2(P2(P2(v*m)+P2(g*w))+P2(u*N)),N2[X2[X2[Z>>2]+8>>2]](Z,112+I|0,24+I|0,8+I|0),o=P2(U2[24+I>>2]-t),U2[24+I>>2]=o,c=P2(U2[28+I>>2]-t),U2[28+I>>2]=c,B=P2(U2[32+I>>2]-t),U2[32+I>>2]=B,k=P2(t+U2[8+I>>2]),U2[8+I>>2]=k,u=P2(t+U2[16+I>>2]),U2[16+I>>2]=u,t=P2(t+U2[12+I>>2]),(U2[12+I>>2]=t)<U2[60+I>>2]||c>U2[44+I>>2]||k<U2[56+I>>2]||o>U2[40+I>>2]||u<U2[64+I>>2]||B>U2[48+I>>2])){if(N2[X2[X2[n>>2]>>2]](n),f=X2[A+4>>2],N2[X2[X2[f>>2]+60>>2]](f,n),f=b+X2[l+16>>2]|0,d=X2[f+4>>2],_=X2[f>>2],(0|(b=X2[A+92>>2]))==X2[A+96>>2]&&!((0|(f=b?b<<1:1))<=(0|b))){if(f?(n=0,X2[6258]=X2[6258]+1,(a=L2(H2(f,12)+19|0))&&(X2[(n=a+19&-16)-4>>2]=a)):n=0,1<=(0|b))for(a=0;;)if(P=X2[A+100>>2]+a|0,j=X2[P+4>>2],X2[(Z=a+n|0)>>2]=X2[P>>2],X2[Z+4>>2]=j,X2[Z+8>>2]=X2[P+8>>2],a=a+12|0,!(b=b-1|0))break;(a=X2[A+100>>2])&&J2[A+104|0]&&(X2[6259]=X2[6259]+1,q2(X2[a-4>>2])),X2[A+100>>2]=n,S2[A+104|0]=1,X2[A+96>>2]=f,b=X2[A+92>>2];}f=X2[A+100>>2]+H2(b,12)|0,X2[f+8>>2]=0,X2[f+4>>2]=d,X2[f>>2]=_,X2[A+92>>2]=X2[A+92>>2]+1;}if(!((0|(i=i+1|0))<X2[l+8>>2]))break;}if(1<=X2[A+92>>2])for(b=0,a=4;;)if(e=X2[A+84>>2],r=X2[A+100>>2]+a|0,N2[X2[X2[e>>2]+8>>2]](e,X2[r-4>>2],X2[r>>2]),a=a+12|0,!((0|(b=b+1|0))<X2[A+92>>2]))break;(e=X2[A+100>>2])&&J2[A+104|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+100>>2]=0,X2[A+92>>2]=0,X2[A+96>>2]=0,S2[A+104|0]=1;}else j1(A,e,r,f,x);K2=3584+I|0;},function(A,e,r,f,i){return P2(P2(0));},function(A,e){e|=0;var r,f=0,i=0,a=0,f=8;if(A=X2[(A|=0)+84>>2],1<=(0|(i=X2[A+8>>2])))for(;;)if((r=X2[X2[A+16>>2]+f>>2])&&(N2[X2[X2[r>>2]+16>>2]](r,e),i=X2[A+8>>2]),f=f+12|0,!((0|(a=a+1|0))<(0|i)))break;},A,function(A,e,r){A|=0,e|=0,r|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var f,i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h,F,Y,m,N=0,R=(P2(0),0),D=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2-240|0);if(K2=D,X2[A+4>>2]=X2[A+4>>2]+1,w=X2[r+36>>2],F=H2(w,80),m=X2[A+12>>2],Y=X2[m+4>>2]+32|0,N=X2[64+(F+X2[Y>>2]|0)>>2],r=X2[A+8>>2],G=X2[e+36>>2],e=X2[X2[r+4>>2]+32>>2]+H2(G,80)|0,R=X2[e+64>>2],r=X2[r+12>>2],s=U2[r+52>>2],k=U2[r+56>>2],a=U2[r+24>>2],b=U2[r+20>>2],f=U2[r+40>>2],i=U2[r+36>>2],C=U2[r+48>>2],t=U2[r+8>>2],o=U2[r>>2],c=U2[r+4>>2],u=U2[r+16>>2],n=U2[r+32>>2],X2[236+D>>2]=r=0,X2[220+D>>2]=0,X2[204+D>>2]=0,l=U2[e+8>>2],B=U2[e+24>>2],v=U2[e+40>>2],U2[216+D>>2]=P2(P2(n*l)+P2(i*B))+P2(f*v),d=U2[e+4>>2],Z=U2[e+20>>2],_=U2[e+36>>2],U2[212+D>>2]=P2(P2(n*d)+P2(i*Z))+P2(f*_),U2[200+D>>2]=P2(P2(u*l)+P2(b*B))+P2(a*v),U2[196+D>>2]=P2(P2(u*d)+P2(b*Z))+P2(a*_),g=k,k=U2[e+48>>2],E=U2[e+52>>2],Q=U2[e+56>>2],U2[232+D>>2]=g+P2(P2(P2(n*k)+P2(i*E))+P2(f*Q)),U2[228+D>>2]=s+P2(P2(P2(u*k)+P2(b*E))+P2(a*Q)),X2[188+D>>2]=0,g=n,n=U2[e>>2],s=i,i=U2[e+16>>2],h=f,f=U2[e+32>>2],U2[208+D>>2]=P2(P2(g*n)+P2(s*i))+P2(h*f),U2[192+D>>2]=P2(P2(u*n)+P2(b*i))+P2(a*f),U2[184+D>>2]=P2(P2(o*l)+P2(c*B))+P2(t*v),U2[180+D>>2]=P2(P2(o*d)+P2(c*Z))+P2(t*_),U2[176+D>>2]=P2(P2(o*n)+P2(c*i))+P2(t*f),U2[224+D>>2]=C+P2(P2(P2(o*k)+P2(c*E))+P2(t*Q)),e=X2[m+12>>2],s=U2[e+52>>2],k=U2[e+56>>2],a=U2[e+24>>2],b=U2[e+20>>2],f=U2[e+40>>2],i=U2[e+36>>2],m=X2[Y>>2],C=U2[e+48>>2],t=U2[e+8>>2],o=U2[e>>2],c=U2[e+4>>2],u=U2[e+16>>2],n=U2[e+32>>2],X2[172+D>>2]=0,X2[156+D>>2]=0,X2[140+D>>2]=0,l=U2[(e=m+F|0)+8>>2],B=U2[e+24>>2],v=U2[e+40>>2],U2[152+D>>2]=P2(P2(n*l)+P2(i*B))+P2(f*v),d=U2[e+4>>2],Z=U2[e+20>>2],_=U2[e+36>>2],U2[148+D>>2]=P2(P2(n*d)+P2(i*Z))+P2(f*_),U2[136+D>>2]=P2(P2(u*l)+P2(b*B))+P2(a*v),U2[132+D>>2]=P2(P2(u*d)+P2(b*Z))+P2(a*_),g=k,k=U2[e+48>>2],E=U2[e+52>>2],Q=U2[e+56>>2],U2[168+D>>2]=g+P2(P2(P2(n*k)+P2(i*E))+P2(f*Q)),U2[164+D>>2]=s+P2(P2(P2(u*k)+P2(b*E))+P2(a*Q)),X2[124+D>>2]=0,g=n,n=U2[e>>2],s=i,i=U2[e+16>>2],h=f,f=U2[e+32>>2],U2[144+D>>2]=P2(P2(g*n)+P2(s*i))+P2(h*f),U2[128+D>>2]=P2(P2(u*n)+P2(b*i))+P2(a*f),U2[120+D>>2]=P2(P2(o*l)+P2(c*B))+P2(t*v),U2[116+D>>2]=P2(P2(o*d)+P2(c*Z))+P2(t*_),U2[112+D>>2]=P2(P2(o*n)+P2(c*i))+P2(t*f),U2[160+D>>2]=C+P2(P2(P2(o*k)+P2(c*E))+P2(t*Q)),N2[X2[X2[R>>2]+8>>2]](R,176+D|0,96+D|0,80+D|0),N2[X2[X2[N>>2]+8>>2]](N,112+D|0,D+64|0,48+D|0),a=U2[X2[A+24>>2]+32>>2],b=P2(U2[100+D>>2]-a),U2[100+D>>2]=b,f=P2(U2[104+D>>2]-a),U2[104+D>>2]=f,i=P2(a+U2[80+D>>2]),U2[80+D>>2]=i,t=P2(a+U2[84+D>>2]),U2[84+D>>2]=t,o=P2(a+U2[88+D>>2]),U2[88+D>>2]=o,c=P2(U2[96+D>>2]-a),e=0,(U2[96+D>>2]=c)>U2[48+D>>2]||(e=0,i<U2[64+D>>2]||(e=1)),f>U2[56+D>>2]||o<U2[72+D>>2]||(r=e),!(b>U2[52+D>>2]||1^r|t<U2[68+D>>2])){X2[40+D>>2]=-1,X2[28+D>>2]=R,e=X2[A+8>>2],X2[24+D>>2]=e,X2[32+D>>2]=X2[e+8>>2],X2[36+D>>2]=176+D,X2[44+D>>2]=G,X2[6371]=X2[6371]+1,X2[16+D>>2]=-1,X2[4+D>>2]=N,e=X2[A+12>>2],X2[D>>2]=e,X2[8+D>>2]=X2[e+8>>2],X2[20+D>>2]=w,N=X2[A+28>>2],e=X2[N+12>>2],r=X2[N+28>>2],X2[12+D>>2]=112+D,R=e-1|0,e=H2((e=((e=w<<16|G)<<15^-1)+e|0)>>>10^e,9),e=R&((e=((e^=e>>>6)<<11^-1)+e|0)>>>16^e);A:{if(!((0|r)<=(0|e))&&-1!=(0|(e=X2[X2[N+36>>2]+(e<<2)>>2])))for(R=X2[N+16>>2];;){if(r=R+H2(e,12)|0,X2[r+4>>2]==(0|w)&&X2[r>>2]==(0|G))break A;if(-1==(0|(e=X2[X2[N+56>>2]+(e<<2)>>2])))break;}r=0;}a>P2(0)?(e=X2[A+16>>2],r=0|N2[X2[X2[e>>2]+8>>2]](e,24+D|0,D,0,2)):r?r=X2[r+8>>2]:(e=X2[A+16>>2],r=0|N2[X2[X2[e>>2]+8>>2]](e,24+D|0,D,X2[A+32>>2],1),e=X2[A+28>>2],Y=0|N2[X2[X2[e>>2]+12>>2]](e,G,w),m=r,X2[8+Y>>2]=m),e=X2[A+24>>2],N=X2[e+12>>2],R=X2[e+8>>2],X2[e+12>>2]=D,X2[e+8>>2]=24+D,N2[X2[X2[e>>2]+8>>2]](e,-1,G),e=X2[A+24>>2],N2[X2[X2[e>>2]+12>>2]](e,-1,w),N2[X2[X2[r>>2]+8>>2]](r,24+D|0,D,X2[A+20>>2],X2[A+24>>2]),A=X2[A+24>>2],X2[A+8>>2]=R,X2[A+12>>2]=N;}K2=240+D|0;},o1,e,A,function(A,e,r,f,i){},$1,o1,function(A){var e,r;return X2[(A|=0)>>2]=16928,J2[A+8|0]&&(e=X2[A+12>>2])&&(r=X2[A+4>>2],N2[X2[X2[r>>2]+16>>2]](r,e)),0|A;},function(A){var e,r;X2[(A|=0)>>2]=16928,J2[A+8|0]&&(e=X2[A+12>>2])&&(r=X2[A+4>>2],N2[X2[X2[r>>2]+16>>2]](r,e)),n(A);},function(A,e,r,f,i){A|=0,e|=0,r|=0,f|=0,i|=0;var a,n,b,t,o=P2(0),c=P2(0),k=P2(0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=f=K2-32|0,(A=X2[A+12>>2])&&(X2[i+4>>2]=A,X2[A+844>>2]=0,A=X2[e+4>>2],o=P2(U2[A+36>>2]*U2[A+20>>2]),A=X2[r+4>>2],a=P2(U2[A+36>>2]*U2[A+20>>2]),n=P2(o+a),A=X2[e+12>>2],e=X2[r+12>>2],r=U2[e+48>>2],b=P2(U2[A+48>>2]-r),t=U2[e+52>>2],c=P2(U2[A+52>>2]-t),e=U2[e+56>>2],k=P2(U2[A+56>>2]-e),o=P2(O2(P2(P2(P2(b*b)+P2(c*c))+P2(k*k)))),P2(n+U2[i+32>>2])<o||(X2[f+24>>2]=0,X2[f+28>>2]=0,X2[f+16>>2]=1065353216,X2[f+20>>2]=0,n=P2(o-n),o>P2(1.1920928955078125e-7)?(X2[f+28>>2]=0,o=P2(P2(1)/o),k=P2(k*o),U2[f+24>>2]=k,c=P2(c*o),U2[f+20>>2]=c,o=P2(b*o),U2[f+16>>2]=o):(o=P2(1),k=P2(0),c=P2(0)),X2[f+12>>2]=0,U2[f+8>>2]=P2(a*k)+e,U2[f+4>>2]=P2(a*c)+t,U2[f>>2]=P2(a*o)+r,N2[X2[X2[i>>2]+16>>2]](i,f+16|0,f,n))),K2=f+32|0;},$1,A4,A,e4,function(A){var e,r;return X2[(A|=0)>>2]=17064,J2[A+8|0]&&(e=X2[A+12>>2])&&(r=X2[A+4>>2],N2[X2[X2[r>>2]+16>>2]](r,e)),0|A;},function(A){var e,r;X2[(A|=0)>>2]=17064,J2[A+8|0]&&(e=X2[A+12>>2])&&(r=X2[A+4>>2],N2[X2[X2[r>>2]+16>>2]](r,e)),n(A);},function(A,e,r,f,i){var a,n,b,t,o,c,k,u,s,l,B;e|=0,r|=0,f|=0,i|=0,K2=B=K2-160|0,(a=X2[(A|=0)+12>>2])&&(X2[i+4>>2]=a,u=J2[A+16|0],b=X2[(n=u?r:e)+4>>2],X2[152+B>>2]=X2[(r=u?e:r)+4>>2],X2[148+B>>2]=b,X2[144+B>>2]=17004,U2[156+B>>2]=U2[a+848>>2]+U2[i+32>>2],X2[136+B>>2]=1566444395,e=X2[n+12>>2],b=X2[4+(n=e+8|0)>>2],X2[(a=16+B|0)>>2]=X2[n>>2],X2[4+a>>2]=b,a=X2[e>>2],n=X2[e+4>>2],t=X2[4+(o=e+24|0)>>2],X2[(b=32+B|0)>>2]=X2[o>>2],X2[4+b>>2]=t,b=X2[e+16>>2],o=X2[e+20>>2],k=X2[4+(c=e+40|0)>>2],X2[(t=48+B|0)>>2]=X2[c>>2],X2[4+t>>2]=k,t=X2[e+32>>2],c=X2[e+36>>2],l=X2[4+(s=e+56|0)>>2],X2[(k=B+64|0)>>2]=X2[s>>2],X2[4+k>>2]=l,X2[8+B>>2]=a,X2[12+B>>2]=n,X2[24+B>>2]=b,X2[28+B>>2]=o,X2[40+B>>2]=t,X2[44+B>>2]=c,a=X2[e+52>>2],X2[56+B>>2]=X2[e+48>>2],X2[60+B>>2]=a,e=X2[r+12>>2],n=X2[(r=e+8|0)+4>>2],X2[(a=80+B|0)>>2]=X2[r>>2],X2[4+a>>2]=n,r=X2[e+4>>2],X2[72+B>>2]=X2[e>>2],X2[76+B>>2]=r,a=X2[e+20>>2],X2[(r=88+B|0)>>2]=X2[e+16>>2],X2[r+4>>2]=a,n=X2[4+(a=e+24|0)>>2],X2[(r=96+B|0)>>2]=X2[a>>2],X2[r+4>>2]=n,n=X2[4+(a=e+40|0)>>2],X2[(r=112+B|0)>>2]=X2[a>>2],X2[r+4>>2]=n,a=X2[e+36>>2],X2[(r=104+B|0)>>2]=X2[e+32>>2],X2[r+4>>2]=a,a=X2[e+52>>2],X2[(r=120+B|0)>>2]=X2[e+48>>2],X2[r+4>>2]=a,a=X2[(e=e+56|0)+4>>2],X2[(r=128+B|0)>>2]=X2[e>>2],X2[r+4>>2]=a,e4(144+B|0,8+B|0,i,X2[f+20>>2],u),J2[A+8|0]&&(A=X2[i+4>>2],X2[A+844>>2]&&((0|(e=X2[A+836>>2]))!=(0|(r=X2[X2[i+8>>2]+8>>2]))?R2(A,X2[X2[i+12>>2]+8>>2]+4|0,r+4|0):R2(A,e+4|0,X2[X2[i+12>>2]+8>>2]+4|0)))),K2=160+B|0;},$1,A4,A,r4,function(A){var e,r;return X2[(A|=0)>>2]=17196,J2[A+8|0]&&(e=X2[A+12>>2])&&(r=X2[A+4>>2],N2[X2[X2[r>>2]+16>>2]](r,e)),0|A;},function(A){var e,r;X2[(A|=0)>>2]=17196,J2[A+8|0]&&(e=X2[A+12>>2])&&(r=X2[A+4>>2],N2[X2[X2[r>>2]+16>>2]](r,e)),n(A);},function(A,e,r,f,i){var a,n,b,t,o,c;e|=0,r|=0,f|=0,i|=0,K2=c=K2-160|0,(t=X2[(A|=0)+12>>2])&&(X2[i+4>>2]=t,t=X2[e+4>>2],o=X2[r+4>>2],e=X2[e+12>>2],b=X2[4+(n=e+8|0)>>2],X2[(a=32+c|0)>>2]=X2[n>>2],X2[4+a>>2]=b,b=X2[4+(n=e+24|0)>>2],X2[(a=48+c|0)>>2]=X2[n>>2],X2[4+a>>2]=b,b=X2[4+(n=e+40|0)>>2],X2[(a=c+64|0)>>2]=X2[n>>2],X2[4+a>>2]=b,b=X2[4+(n=e+56|0)>>2],X2[(a=80+c|0)>>2]=X2[n>>2],X2[4+a>>2]=b,X2[152+c>>2]=1566444395,a=X2[e+4>>2],X2[24+c>>2]=X2[e>>2],X2[28+c>>2]=a,a=X2[e+20>>2],X2[40+c>>2]=X2[e+16>>2],X2[44+c>>2]=a,a=X2[e+36>>2],X2[56+c>>2]=X2[e+32>>2],X2[60+c>>2]=a,a=X2[e+52>>2],X2[72+c>>2]=X2[e+48>>2],X2[76+c>>2]=a,e=X2[r+12>>2],n=X2[(r=e+8|0)+4>>2],X2[(a=96+c|0)>>2]=X2[r>>2],X2[4+a>>2]=n,a=X2[e+20>>2],X2[(r=104+c|0)>>2]=X2[e+16>>2],X2[r+4>>2]=a,n=X2[4+(a=e+24|0)>>2],X2[(r=112+c|0)>>2]=X2[a>>2],X2[r+4>>2]=n,a=X2[e+36>>2],X2[(r=120+c|0)>>2]=X2[e+32>>2],X2[r+4>>2]=a,n=X2[4+(a=e+40|0)>>2],X2[(r=128+c|0)>>2]=X2[a>>2],X2[r+4>>2]=n,a=X2[e+52>>2],X2[(r=136+c|0)>>2]=X2[e+48>>2],X2[r+4>>2]=a,n=X2[4+(a=e+56|0)>>2],X2[(r=144+c|0)>>2]=X2[a>>2],X2[r+4>>2]=n,r=X2[e+4>>2],X2[88+c>>2]=X2[e>>2],X2[92+c>>2]=r,X2[16+c>>2]=o,X2[12+c>>2]=t,X2[8+c>>2]=17144,r4(8+c|0,24+c|0,i,X2[f+20>>2],0),J2[A+8|0]&&(A=X2[i+4>>2],X2[A+844>>2]&&((0|(e=X2[A+836>>2]))!=(0|(r=X2[X2[i+8>>2]+8>>2]))?R2(A,X2[X2[i+12>>2]+8>>2]+4|0,r+4|0):R2(A,e+4|0,X2[X2[i+12>>2]+8>>2]+4|0)))),K2=160+c|0;},$1,A4,function(A){var e,r;return X2[(A|=0)>>2]=17268,J2[A+8|0]&&(e=X2[A+12>>2])&&(r=X2[A+4>>2],N2[X2[X2[r>>2]+16>>2]](r,e)),0|A;},function(A){var e,r;X2[(A|=0)>>2]=17268,J2[A+8|0]&&(e=X2[A+12>>2])&&(r=X2[A+4>>2],N2[X2[X2[r>>2]+16>>2]](r,e)),n(A);},function(A,x,y,e,r){A|=0,x|=0,y|=0,e|=0,r|=0;var f,i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,V,p,M,S,X,J,U,H,P,j,z,O,K,L,q,G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=(P2(0),P2(0)),R=P2(0),D=(P2(0),P2(0)),T=(P2(0),P2(0)),W=(P2(0),P2(0),0),I=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0)),$=(P2(0),0),A2=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0)),e2=(P2(0),P2(0),0),r2=P2(0),f2=P2(0),i2=P2(0),a2=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0));if(P2(0),P2(0),P2(0),P2(0),P2(0),K2=e=K2+-64|0,X2[A+12>>2]){if(b=J2[A+16|0],f=X2[($=b?x:y)+12>>2],a=U2[f+56>>2],A2=U2[f+52>>2],Q=U2[f+48>>2],i=X2[(b=b?y:x)+12>>2],w=U2[i+56>>2],V=U2[i+52>>2],p=U2[i+48>>2],W=X2[b+4>>2],G=U2[i+32>>2],C=U2[i>>2],F=U2[i+16>>2],k=U2[i+36>>2],u=U2[i+20>>2],s=U2[i+4>>2],h=U2[f+40>>2],m=U2[f+24>>2],Y=U2[f+8>>2],N=U2[f+36>>2],c=U2[f+20>>2],l=U2[f+4>>2],b=X2[$+4>>2],B=U2[f+32>>2],T=U2[i+40>>2],v=U2[f+16>>2],I=U2[i+24>>2],d=U2[f>>2],R=U2[i+8>>2],X2[e+60>>2]=0,H=P2(P2(P2(R*l)+P2(I*c))+P2(T*N)),g=P2(-U2[(i=b+60|0)>>2]),P=P2(P2(P2(R*d)+P2(I*v))+P2(T*B)),E=U2[b+56>>2],j=P2(P2(P2(R*Y)+P2(I*m))+P2(T*h)),T=U2[(e2=b- -64|0)>>2],U2[e+56>>2]=P2(P2(H*g)-P2(P*E))-P2(j*T),t=P2(P2(P2(s*l)+P2(u*c))+P2(k*N)),n=P2(P2(P2(s*d)+P2(u*v))+P2(k*B)),o=P2(P2(P2(s*Y)+P2(u*m))+P2(k*h)),U2[e+52>>2]=P2(P2(t*g)-P2(E*n))-P2(T*o),Z=P2(P2(P2(C*l)+P2(F*c))+P2(G*N)),_=P2(P2(P2(C*d)+P2(F*v))+P2(G*B)),M=P2(P2(P2(C*Y)+P2(F*m))+P2(G*h)),U2[e+48>>2]=P2(P2(Z*g)-P2(E*_))-P2(T*M),N2[X2[X2[W>>2]+64>>2]](e,W,e+48|0),f=X2[$+12>>2],r2=U2[f+48>>2],T=U2[f+32>>2],I=U2[f+16>>2],R=U2[f+8>>2],g=U2[f+4>>2],E=U2[f>>2],f2=U2[f+56>>2],i2=U2[f+52>>2],X=U2[f+40>>2],J=U2[f+36>>2],D=U2[f+24>>2],a2=U2[f+20>>2],U=U2[b+72>>2],G=U2[e2>>2],C=U2[b+56>>2],F=U2[i>>2],f=X2[A+12>>2],z=U2[f+848>>2],k=U2[e+8>>2],u=U2[e>>2],s=U2[e+4>>2],X2[r+4>>2]=f,K=P2(P2(P2(p*Y)+P2(V*m))+P2(w*h)),S=m,m=P2(-A2),A2=P2(P2(K+P2(P2(P2(S*m)-P2(Y*Q))-P2(h*a)))+P2(P2(P2(M*u)+P2(o*s))+P2(j*k))),Y=P2(P2(P2(P2(P2(p*d)+P2(V*v))+P2(w*B))+P2(P2(P2(v*m)-P2(d*Q))-P2(B*a)))+P2(P2(P2(_*u)+P2(n*s))+P2(P*k))),N=P2(P2(P2(P2(P2(p*l)+P2(V*c))+P2(w*N))+P2(P2(P2(c*m)-P2(l*Q))-P2(N*a)))+P2(P2(P2(Z*u)+P2(t*s))+P2(H*k))),(h=P2(P2(P2(G*A2)+P2(P2(C*Y)+P2(F*N)))-U))<z&&(X2[e+60>>2]=0,U2[e+56>>2]=P2(P2(C*T)+P2(F*J))+P2(G*X),U2[e+52>>2]=P2(P2(C*I)+P2(F*a2))+P2(G*D),U2[e+48>>2]=P2(P2(E*C)+P2(g*F))+P2(R*G),X2[e+44>>2]=0,m=P2(Y-P2(C*h)),Y=P2(N-P2(F*h)),N=P2(A2-P2(G*h)),U2[e+40>>2]=P2(P2(P2(m*T)+P2(Y*J))+P2(N*X))+f2,U2[e+36>>2]=P2(P2(P2(m*I)+P2(Y*a2))+P2(N*D))+i2,U2[e+32>>2]=P2(P2(R*N)+P2(P2(E*m)+P2(g*Y)))+r2,N2[X2[X2[r>>2]+16>>2]](r,e+48|0,e+32|0,h)),!(6<X2[W+4>>2]||X2[X2[r+4>>2]+844>>2]>=X2[A+24>>2]||(m=U2[b+64>>2],Y=P2(j2(m))>P2(.7071067690849304)?(h=U2[b+60>>2],Y=P2(P2(1)/P2(O2(P2(P2(m*m)+P2(h*h))))),h=P2(h*Y),m=P2(Y*P2(-m)),P2(0)):(h=U2[b+56>>2],Y=U2[b+60>>2],N=P2(P2(1)/P2(O2(P2(P2(h*h)+P2(Y*Y))))),m=P2(h*N),h=P2(0),P2(N*P2(-Y))),c=o0(N=P2(P2(m2(P2(P2(.019999999552965164)/P2(N2[X2[X2[W>>2]+16>>2]](W))),P2(.39269909262657166)))*P2(.5))),$=X2[A+20>>2],g=c0(N),(0|$)<1)))for(S=h,h=P2(c/P2(O2(P2(P2(P2(Y*Y)+P2(m*m))+P2(h*h))))),E=P2(S*h),X=P2(m*h),J=P2(Y*h),e2=0;;)if(i=J2[A+16|0],f=X2[(q=i?x:y)+12>>2],a2=U2[f+56>>2],U=U2[f+52>>2],A2=U2[f+48>>2],i=X2[(W=i?y:x)+12>>2],H=U2[i+56>>2],P=U2[i+52>>2],j=U2[i+48>>2],L=X2[W+4>>2],h=U2[f+40>>2],m=U2[f+8>>2],Y=U2[f+24>>2],N=U2[f+36>>2],c=U2[f+4>>2],l=U2[f+20>>2],W=X2[q+4>>2],B=U2[f+32>>2],Q=U2[i+40>>2],w=U2[i+32>>2],V=U2[i+36>>2],v=U2[f>>2],p=U2[i+8>>2],k=U2[i>>2],u=U2[i+4>>2],d=U2[f+16>>2],s=U2[i+24>>2],T=U2[i+16>>2],I=U2[i+20>>2],G=U2[b+64>>2],C=U2[b+56>>2],a=U2[b+60>>2],X2[e+44>>2]=0,F=P2(P2(P2(P2(6.2831854820251465)/P2(0|$))*P2(0|e2))*P2(.5)),R=P2(o0(F)/P2(O2(P2(P2(P2(C*C)+P2(a*a))+P2(G*G))))),G=P2(G*R),C=P2(C*R),F=c0(F),a=P2(a*R),t=P2(P2(E*C)+P2(P2(P2(X*F)-P2(g*a))-P2(J*G))),n=P2(P2(E*G)+P2(P2(X*a)+P2(P2(g*F)+P2(J*C)))),o=P2(P2(X*G)+P2(P2(P2(J*F)-P2(g*C))-P2(E*a))),Z=P2(P2(J*a)+P2(P2(P2(E*F)-P2(g*G))-P2(X*C))),R=P2(P2(P2(G*t)+P2(P2(C*n)+P2(F*o)))-P2(a*Z)),D=P2(P2(P2(C*Z)+P2(P2(F*t)+P2(a*n)))-P2(G*o)),_=P2(P2(P2(a*o)+P2(P2(G*n)+P2(F*Z)))-P2(C*t)),G=P2(P2(P2(P2(F*n)-P2(C*o))-P2(a*t))-P2(G*Z)),C=P2(P2(2)/P2(P2(P2(P2(R*R)+P2(D*D))+P2(_*_))+P2(G*G))),F=P2(_*C),M=P2(R*F),a=P2(D*C),r2=P2(G*a),t=P2(M+r2),f2=P2(D*F),n=P2(R*C),i2=P2(G*n),C=P2(f2-i2),z=P2(R*n),O=P2(D*a),D=P2(P2(1)-P2(z+O)),n=P2(P2(P2(w*t)+P2(V*C))+P2(Q*D)),o=P2(P2(P2(k*t)+P2(u*C))+P2(p*D)),C=P2(P2(P2(T*t)+P2(I*C))+P2(s*D)),D=P2(-U2[(i=W+60|0)>>2]),t=U2[W+56>>2],Z=U2[($=W- -64|0)>>2],U2[e+40>>2]=P2(P2(P2(P2(N*n)+P2(P2(c*o)+P2(l*C)))*D)-P2(t*P2(P2(B*n)+P2(P2(v*o)+P2(d*C)))))-P2(Z*P2(P2(h*n)+P2(P2(m*o)+P2(Y*C)))),C=P2(f2+i2),n=P2(R*a),o=P2(G*F),G=P2(n-o),_=P2(_*F),F=P2(P2(1)-P2(z+_)),a=P2(P2(Q*C)+P2(P2(w*G)+P2(V*F))),R=P2(P2(p*C)+P2(P2(k*G)+P2(u*F))),G=P2(P2(s*C)+P2(P2(T*G)+P2(I*F))),U2[e+36>>2]=P2(P2(P2(P2(N*a)+P2(P2(c*R)+P2(l*G)))*D)-P2(t*P2(P2(B*a)+P2(P2(v*R)+P2(d*G)))))-P2(Z*P2(P2(h*a)+P2(P2(m*R)+P2(Y*G)))),G=P2(M-r2),C=P2(n+o),F=P2(P2(1)-P2(O+_)),a=P2(P2(Q*G)+P2(P2(V*C)+P2(w*F))),R=P2(P2(p*G)+P2(P2(u*C)+P2(k*F))),G=P2(P2(s*G)+P2(P2(I*C)+P2(T*F))),U2[e+32>>2]=P2(P2(P2(P2(N*a)+P2(P2(c*R)+P2(l*G)))*D)-P2(t*P2(P2(B*a)+P2(P2(v*R)+P2(d*G)))))-P2(Z*P2(P2(h*a)+P2(P2(m*R)+P2(Y*G)))),N2[X2[X2[L>>2]+64>>2]](e+48|0,L,e+32|0),f=X2[q+12>>2],z=U2[f+48>>2],t=U2[f+32>>2],n=U2[f+16>>2],o=U2[f+8>>2],Z=U2[f+4>>2],_=U2[f>>2],O=U2[f+56>>2],L=U2[f+52>>2],M=U2[f+40>>2],r2=U2[f+36>>2],f2=U2[f+24>>2],i2=U2[f+20>>2],q=U2[W+72>>2],G=U2[$>>2],C=U2[W+56>>2],F=U2[i>>2],f=X2[A+12>>2],S=U2[f+848>>2],a=U2[e+56>>2],R=U2[e+48>>2],D=U2[e+52>>2],X2[r+4>>2]=f,K=S,U=P2(-U),S=P2(P2(P2(P2(P2(j*m)+P2(P*Y))+P2(H*h))+P2(P2(P2(Y*U)-P2(m*A2))-P2(h*a2)))+P2(P2(P2(R*P2(P2(P2(k*m)+P2(T*Y))+P2(w*h)))+P2(D*P2(P2(P2(u*m)+P2(I*Y))+P2(V*h))))+P2(a*P2(P2(P2(p*m)+P2(s*Y))+P2(Q*h))))),m=P2(P2(P2(P2(P2(j*v)+P2(P*d))+P2(H*B))+P2(P2(P2(d*U)-P2(v*A2))-P2(B*a2)))+P2(P2(P2(R*P2(P2(P2(k*v)+P2(T*d))+P2(w*B)))+P2(D*P2(P2(P2(u*v)+P2(I*d))+P2(V*B))))+P2(a*P2(P2(P2(p*v)+P2(s*d))+P2(Q*B))))),Y=P2(P2(P2(P2(P2(j*c)+P2(P*l))+P2(H*N))+P2(P2(P2(l*U)-P2(c*A2))-P2(N*a2)))+P2(P2(P2(R*P2(P2(P2(k*c)+P2(T*l))+P2(w*N)))+P2(D*P2(P2(P2(u*c)+P2(I*l))+P2(V*N))))+P2(a*P2(P2(P2(p*c)+P2(s*l))+P2(Q*N))))),(h=P2(P2(P2(G*S)+P2(P2(C*m)+P2(F*Y)))-q))<K&&(X2[e+44>>2]=0,U2[e+40>>2]=P2(P2(C*t)+P2(F*r2))+P2(G*M),U2[e+36>>2]=P2(P2(C*n)+P2(F*i2))+P2(G*f2),U2[e+32>>2]=P2(P2(_*C)+P2(Z*F))+P2(o*G),X2[e+28>>2]=0,m=P2(m-P2(C*h)),Y=P2(Y-P2(F*h)),N=P2(S-P2(G*h)),U2[e+24>>2]=P2(P2(P2(m*t)+P2(Y*r2))+P2(N*M))+O,U2[e+20>>2]=P2(P2(P2(m*n)+P2(Y*i2))+P2(N*f2))+L,U2[e+16>>2]=P2(P2(o*N)+P2(P2(_*m)+P2(Z*Y)))+z,N2[X2[X2[r>>2]+16>>2]](r,e+32|0,e+16|0,h)),!((0|(e2=e2+1|0))<(0|($=X2[A+20>>2]))))break;J2[A+8|0]&&X2[X2[A+12>>2]+844>>2]&&(A=X2[r+4>>2],X2[A+844>>2]&&((0|(x=X2[A+836>>2]))!=(0|(y=X2[X2[r+8>>2]+8>>2]))?R2(A,X2[X2[r+12>>2]+8>>2]+4|0,y+4|0):R2(A,x+4|0,X2[X2[r+12>>2]+8>>2]+4|0)));}K2=e- -64|0;},$1,A4,e,A,function(A,e,r,f,i,a,n,x,y,b){A|=0,e|=0,r|=0,f|=0,i|=0,a|=0,n|=0,x|=0,y|=0,b|=0;var V,p,M,S,t,o=P2(0),c=P2(0),k=P2(0),u=P2(0),s=P2(0),l=P2(0),B=P2(0),v=P2(0),d=0,Z=P2(0),_=0,g=P2(0),E=P2(0),Q=0,w=P2(0),G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=0,R=P2(0),D=P2(0),T=P2(0),W=0,I=0;P2(0),P2(0),P2(0),X2[12+(K2=t=K2-19056|0)>>2]=0,U2[t>>2]=U2[a+48>>2]-U2[i+48>>2],U2[8+t>>2]=U2[(A=a+56|0)>>2]-U2[(e=i+56|0)>>2],U2[4+t>>2]=U2[(b=a+52|0)>>2]-U2[(d=i+52|0)>>2],X2[18916+t>>2]=f,X2[18912+t>>2]=r,c=U2[a+20>>2],u=U2[a+36>>2],s=U2[(_=i+20|0)>>2],k=U2[(Q=i+36|0)>>2],B=U2[(N=i+24|0)>>2],l=U2[a+24>>2],o=U2[i+40>>2],v=U2[a+40>>2],Z=U2[a+32>>2],E=U2[a>>2],C=U2[a+16>>2],h=U2[a+4>>2],w=U2[i+32>>2],G=U2[i>>2],F=U2[i+16>>2],Y=U2[i+4>>2],m=U2[i+8>>2],g=U2[a+8>>2],X2[18964+t>>2]=0,X2[18948+t>>2]=0,X2[18932+t>>2]=0,R=P2(P2(P2(m*g)+P2(B*l))+P2(o*v)),U2[18960+t>>2]=R,D=P2(P2(P2(Y*g)+P2(s*l))+P2(k*v)),U2[18956+t>>2]=D,l=P2(P2(P2(G*g)+P2(F*l))+P2(w*v)),U2[18952+t>>2]=l,v=P2(P2(P2(m*h)+P2(B*c))+P2(o*u)),U2[18944+t>>2]=v,g=P2(P2(P2(Y*h)+P2(s*c))+P2(k*u)),U2[18940+t>>2]=g,c=P2(P2(P2(G*h)+P2(F*c))+P2(w*u)),U2[18936+t>>2]=c,u=P2(P2(P2(E*m)+P2(C*B))+P2(Z*o)),U2[18928+t>>2]=u,s=P2(P2(P2(E*Y)+P2(C*s))+P2(Z*k)),U2[18924+t>>2]=s,k=P2(P2(P2(E*G)+P2(C*F))+P2(Z*w)),U2[18920+t>>2]=k,B=U2[_>>2],Z=U2[Q>>2],E=U2[N>>2],C=U2[b>>2],h=U2[d>>2],w=U2[A>>2],G=U2[e>>2],F=U2[i>>2],Y=U2[i+16>>2],m=U2[i+32>>2],T=U2[i+4>>2],V=U2[i+8>>2],p=U2[a+48>>2],M=U2[i+48>>2],X2[19036+t>>2]=0,X2[19028+t>>2]=0,X2[19012+t>>2]=0,U2[19008+t>>2]=R,U2[19004+t>>2]=v,U2[19e3+t>>2]=u,X2[18996+t>>2]=0,U2[18992+t>>2]=D,U2[18988+t>>2]=g,U2[18984+t>>2]=s,X2[18980+t>>2]=0,U2[18976+t>>2]=l,U2[18972+t>>2]=c,c=P2(p-M),u=P2(C-h),l=o,o=P2(w-G),U2[19024+t>>2]=P2(P2(V*c)+P2(E*u))+P2(l*o),U2[19020+t>>2]=P2(P2(c*T)+P2(u*B))+P2(o*Z),U2[19016+t>>2]=P2(P2(c*F)+P2(u*Y))+P2(o*m),X2[19032+t>>2]=70,U2[18968+t>>2]=k,X2[(A=18664+t|0)>>2]=0,X2[A+4>>2]=0,X2[18656+t>>2]=0,X2[18660+t>>2]=0,X2[18892+t>>2]=0,X2[18896+t>>2]=0,X2[18904+t>>2]=2,X2[18672+t>>2]=0,X2[28+t>>2]=0,o=U2[8+t>>2],U2[24+t>>2]=-o,s=U2[4+t>>2],U2[20+t>>2]=-s,k=U2[t>>2],U2[16+t>>2]=-k;A:{e:{r:{f:{i:{if(1==(0|f4(18528+t|0,18912+t|0,16+t|0))){for(X2[(A=t+64|0)>>2]=0,X2[A+4>>2]=0,X2[72+t>>2]=0,X2[18508+t>>2]=0,X2[16+t>>2]=9,X2[18512+t>>2]=0,X2[18516+t>>2]=0,X2[56+t>>2]=0,b=14336,e=A=X2[60+t>>2]=0;;)if(X2[(d=(16+t|0)+b|0)+4148>>2]=A,d=d+4100|(X2[d+4144>>2]=0),A&&(X2[A+44>>2]=d),A=18452+(H2(0-e|0,56)+t|0)|0,X2[18520+t>>2]=d,e=e+1|0,!(b=b-56|0))break;if(X2[18524+t>>2]=256,d=X2[18900+t>>2],X[d+32>>2]<2)break i;if(!function A(e){var r=0,f=0,i=0,a=0,n=P2(0),b=P2(0),t=P2(0),o=P2(0),c=P2(0),k=0,u=P2(0),s=P2(0),l=P2(0),B=P2(0);a:{n:{b:{t:{o:{switch(r=X2[e+372>>2],X2[r+32>>2]-1|0){case 3:break b;case 2:break t;case 1:break o;case 0:break;default:break n;}if(X2[r+32>>2]=2,X2[r+20>>2]=0,i=X2[e+364>>2]-1|0,X2[e+364>>2]=i,k=r,r=X2[348+((i<<2)+e|0)>>2],X2[k+4>>2]=r,K(e,P2(1),P2(0),P2(0),r),i=1,A(e))break a;if(r=X2[e+372>>2],i=X2[r+32>>2]-1|0,f=X2[(i<<2)+r>>2],X2[348+((X2[e+364>>2]<<2)+e|0)>>2]=f,X2[r+32>>2]=i,r=X2[e+372>>2],a=X2[r+32>>2],X2[r+32>>2]=a+(i=1),X2[(r=r+(a<<2)|0)>>2]=f,X2[r+16>>2]=0,K(e,P2(-1),P2(-0),P2(-0),f),A(e))break a;if(r=X2[e+372>>2],i=X2[r+32>>2]-1|0,f=X2[(i<<2)+r>>2],X2[348+((X2[e+364>>2]<<2)+e|0)>>2]=f,X2[r+32>>2]=i,r=X2[e+372>>2],a=X2[r+32>>2],X2[r+32>>2]=a+(i=1),X2[(r=r+(a<<2)|0)>>2]=f,X2[r+16>>2]=0,K(e,P2(0),P2(1),P2(0),f),A(e))break a;if(r=X2[e+372>>2],i=X2[r+32>>2]-1|0,f=X2[(i<<2)+r>>2],X2[348+((X2[e+364>>2]<<2)+e|0)>>2]=f,X2[r+32>>2]=i,r=X2[e+372>>2],a=X2[r+32>>2],X2[r+32>>2]=a+(i=1),X2[(r=r+(a<<2)|0)>>2]=f,X2[r+16>>2]=0,K(e,P2(-0),P2(-1),P2(-0),f),A(e))break a;if(r=X2[e+372>>2],i=X2[r+32>>2]-1|0,f=X2[(i<<2)+r>>2],X2[348+((X2[e+364>>2]<<2)+e|0)>>2]=f,X2[r+32>>2]=i,r=X2[e+372>>2],a=X2[r+32>>2],X2[r+32>>2]=a+(i=1),X2[(r=r+(a<<2)|0)>>2]=f,X2[r+16>>2]=0,K(e,P2(0),P2(0),P2(1),f),A(e))break a;if(r=X2[e+372>>2],i=X2[r+32>>2]-1|0,f=X2[(i<<2)+r>>2],X2[348+((X2[e+364>>2]<<2)+e|0)>>2]=f,X2[r+32>>2]=i,r=X2[e+372>>2],a=X2[r+32>>2],X2[r+32>>2]=a+(i=1),X2[(r=r+(a<<2)|0)>>2]=f,X2[r+16>>2]=0,K(e,P2(-0),P2(-0),P2(-1),f),A(e))break a;f=X2[e+364>>2],X2[e+364>>2]=f+1,r=X2[e+372>>2],i=X2[r+32>>2]-1|0,X2[r+32>>2]=i,X2[348+((f<<2)+e|0)>>2]=X2[r+(i<<2)>>2];break n;}if(i=1,f=X2[r+4>>2],a=X2[r>>2],s=P2(U2[f+16>>2]-U2[a+16>>2]),b=P2(s*P2(0)),l=P2(U2[f+20>>2]-U2[a+20>>2]),n=P2(b-l),t=P2(l*P2(0)),B=P2(U2[f+24>>2]-U2[a+24>>2]),u=P2(B*P2(0)),o=P2(t-u),c=P2(B-b),P2(P2(n*n)+P2(P2(o*o)+P2(c*c)))>P2(0)){if(X2[r+32>>2]=3,X2[r+24>>2]=0,f=X2[e+364>>2]-1|0,X2[e+364>>2]=f,k=r,r=X2[348+((f<<2)+e|0)>>2],K(e,o,c,n,X2[k+8>>2]=r),A(e))break a;if(r=X2[e+372>>2],i=X2[r+32>>2]-1|0,f=X2[(i<<2)+r>>2],X2[348+((X2[e+364>>2]<<2)+e|0)>>2]=f,X2[r+32>>2]=i,r=X2[e+372>>2],a=X2[r+32>>2],X2[r+32>>2]=a+(i=1),X2[(r=r+(a<<2)|0)>>2]=f,X2[r+16>>2]=0,K(e,P2(-o),P2(-c),P2(-n),f),A(e))break a;f=X2[e+364>>2],X2[e+364>>2]=f+1,r=X2[e+372>>2],i=X2[r+32>>2]-1|0,X2[r+32>>2]=i,X2[348+((f<<2)+e|0)>>2]=X2[r+(i<<2)>>2];}if(n=P2(s-t),o=P2(t-B),c=P2(u-b),P2(P2(n*n)+P2(P2(o*o)+P2(c*c)))>P2(0)){if(a=X2[e+364>>2]-1|0,X2[e+364>>2]=a,r=X2[e+372>>2],f=X2[r+32>>2],X2[r+32>>2]=f+(i=1),X2[16+(r=r+(f<<2)|0)>>2]=0,k=r,r=X2[348+((a<<2)+e|0)>>2],K(e,o,c,n,X2[k>>2]=r),A(e))break a;if(r=X2[e+372>>2],i=X2[r+32>>2]-1|0,f=X2[(i<<2)+r>>2],X2[348+((X2[e+364>>2]<<2)+e|0)>>2]=f,X2[r+32>>2]=i,r=X2[e+372>>2],a=X2[r+32>>2],X2[r+32>>2]=a+(i=1),X2[(r=r+(a<<2)|0)>>2]=f,X2[r+16>>2]=0,K(e,P2(-o),P2(-c),P2(-n),f),A(e))break a;f=X2[e+364>>2],X2[e+364>>2]=f+1,r=X2[e+372>>2],i=X2[r+32>>2]-1|0,X2[r+32>>2]=i,X2[348+((f<<2)+e|0)>>2]=X2[r+(i<<2)>>2];}if(i=1,b=P2(b-t),n=P2(l-u),t=P2(u-s),!(P2(P2(b*b)+P2(P2(n*n)+P2(t*t)))>P2(0)))break n;if(a=X2[e+364>>2]-1|0,X2[e+364>>2]=a,r=X2[e+372>>2],f=X2[r+32>>2],X2[r+32>>2]=f+1,X2[16+(r=r+(f<<2)|0)>>2]=0,k=r,r=X2[348+((a<<2)+e|0)>>2],K(e,n,t,b,X2[k>>2]=r),A(e))break a;if(r=X2[e+372>>2],i=X2[r+32>>2]-1|0,f=X2[(i<<2)+r>>2],X2[348+((X2[e+364>>2]<<2)+e|0)>>2]=f,X2[r+32>>2]=i,r=X2[e+372>>2],a=X2[r+32>>2],X2[r+32>>2]=a+(i=1),X2[(r=r+(a<<2)|0)>>2]=f,X2[r+16>>2]=0,K(e,P2(-n),P2(-t),P2(-b),f),A(e))break a;f=X2[e+364>>2],X2[e+364>>2]=f+1,r=X2[e+372>>2],i=X2[r+32>>2]-1|0,X2[r+32>>2]=i,X2[348+((f<<2)+e|0)>>2]=X2[r+(i<<2)>>2];break n;}if(i=1,f=X2[r+4>>2],a=X2[r>>2],b=U2[a+16>>2],t=P2(U2[f+16>>2]-b),k=X2[r+8>>2],n=U2[a+20>>2],u=P2(U2[k+20>>2]-n),n=P2(U2[f+20>>2]-n),o=P2(U2[k+16>>2]-b),b=P2(P2(t*u)-P2(n*o)),l=n,n=U2[a+24>>2],c=P2(U2[k+24>>2]-n),s=P2(U2[f+24>>2]-n),n=P2(P2(l*c)-P2(s*u)),t=P2(P2(s*o)-P2(t*c)),!(P2(P2(b*b)+P2(P2(n*n)+P2(t*t)))>P2(0)))break n;if(X2[(f=r+28|0)>>2]=0,X2[f+4>>2]=4,f=X2[e+364>>2]-1|0,X2[e+364>>2]=f,k=r,r=X2[348+((f<<2)+e|0)>>2],K(e,n,t,b,X2[k+12>>2]=r),A(e))break a;if(r=X2[e+372>>2],i=X2[r+32>>2]-1|0,f=X2[(i<<2)+r>>2],X2[348+((X2[e+364>>2]<<2)+e|0)>>2]=f,X2[r+32>>2]=i,r=X2[e+372>>2],a=X2[r+32>>2],X2[r+32>>2]=a+(i=1),X2[(r=r+(a<<2)|0)>>2]=f,X2[r+16>>2]=0,K(e,P2(-n),P2(-t),P2(-b),f),A(e))break a;f=X2[e+364>>2],X2[e+364>>2]=f+1,r=X2[e+372>>2],i=X2[r+32>>2]-1|0,X2[r+32>>2]=i,X2[348+((f<<2)+e|0)>>2]=X2[r+(i<<2)>>2];break n;}if(i=1,e=X2[r>>2],f=X2[r+12>>2],b=U2[f+16>>2],u=P2(U2[e+16>>2]-b),a=X2[r+4>>2],n=U2[f+20>>2],o=P2(U2[a+20>>2]-n),r=X2[r+8>>2],t=U2[f+24>>2],c=P2(U2[r+24>>2]-t),s=P2(U2[e+20>>2]-n),l=P2(U2[a+24>>2]-t),B=P2(U2[r+16>>2]-b),t=P2(U2[e+24>>2]-t),b=P2(U2[a+16>>2]-b),n=P2(U2[r+20>>2]-n),(b=P2(P2(P2(P2(u*o)*c)+P2(P2(P2(P2(P2(s*l)*B)+P2(P2(t*b)*n))-P2(P2(u*l)*n))-P2(P2(s*b)*c)))-P2(P2(t*o)*B)))>P2(0)|b<P2(0))break a;}i=0;}return i;}(18528+t|0))break i;if(A=X2[18512+t>>2]){for(b=X2[18516+t>>2],e=X2[18524+t>>2];;)if((_=X2[A+48>>2])&&(X2[_+44>>2]=X2[A+44>>2]),(_=X2[A+44>>2])&&(X2[_+48>>2]=X2[A+48>>2]),X2[18512+t>>2]==(0|A)&&(X2[18512+t>>2]=X2[A+48>>2]),X2[A+44>>2]=0,X2[A+48>>2]=X2[18520+t>>2],(_=X2[18520+t>>2])&&(X2[_+44>>2]=A),b=b-1|0,X2[18520+t>>2]=A,e=e+1|0,!(A=X2[18512+t>>2]))break;X2[18524+t>>2]=e,X2[18516+t>>2]=b;}if(X2[18508+t>>2]=0,X2[16+t>>2]=0,b=X2[d>>2],e=X2[d+12>>2],c=U2[e+16>>2],l=P2(U2[b+16>>2]-c),A=X2[d+4>>2],u=U2[e+20>>2],v=P2(U2[A+20>>2]-u),_=X2[d+8>>2],B=U2[e+24>>2],Z=P2(U2[_+24>>2]-B),E=P2(U2[b+20>>2]-u),C=P2(U2[A+24>>2]-B),h=P2(U2[_+16>>2]-c),B=P2(U2[b+24>>2]-B),c=P2(U2[A+16>>2]-c),u=P2(U2[_+20>>2]-u),P2(P2(P2(P2(l*v)*Z)+P2(P2(P2(P2(P2(E*C)*h)+P2(P2(B*c)*u))-P2(P2(l*C)*u))-P2(P2(E*c)*Z)))-P2(P2(B*v)*h))<P2(0)?(X2[d+4>>2]=b,X2[d>>2]=A,H=X2[d+16>>2],X2[d+16>>2]=X2[d+20>>2],X2[d+20>>2]=H,e=b):(e=A,A=b),e=a4(16+t|0,A,e,_,1),_=a4(16+t|0,X2[d+4>>2],X2[d>>2],X2[d+12>>2],1),N=a4(16+t|0,X2[d+8>>2],X2[d+4>>2],X2[d+12>>2],1),Q=a4(16+t|0,X2[d>>2],X2[d+8>>2],X2[d+12>>2],1),4!=X2[18516+t>>2])break i;if(A=X2[18512+t>>2],o=U2[A+16>>2],b=X2[A+48>>2]){for(o=P2(o*o);;)if(c=U2[b+16>>2],A=(d=(c=P2(c*c))<o)?b:A,o=d?c:o,!(b=X2[b+48>>2]))break;o=U2[A+16>>2];}for(d=X2[A+28>>2],W=X2[A+24>>2],I=X2[A+20>>2],u=U2[A+12>>2],s=U2[A+8>>2],k=U2[A+4>>2],c=U2[A>>2],X2[e+32>>2]=_,S2[e+52|0]=0,X2[_+32>>2]=e,S2[_+52|0]=0,X2[e+36>>2]=N,S2[e+53|0]=0,X2[N+32>>2]=e,S2[N+52|0]=1,X2[e+40>>2]=Q,S2[e+54|0]=0,X2[Q+32>>2]=e,S2[Q+52|0]=2,X2[_+36>>2]=Q,S2[_+53|0]=2,X2[Q+40>>2]=_,S2[Q+54|0]=1,X2[_+40>>2]=N,S2[_+54|0]=1,X2[N+36>>2]=_,S2[0|(e=N+53|0)]=2,S2[e+1|0]=1,X2[N+40>>2]=Q,X2[Q+36>>2]=N,S2[Q+53|0]=2,_=X2[16+t>>2]=0;;){a:{n:{if(!((e=X2[18508+t>>2])>>>0<=127)){X2[16+t>>2]=6;break a;}if(S2[A+55|0]=_=_+1|0,X2[19048+t>>2]=0,X2[19040+t>>2]=0,X2[19044+t>>2]=0,X2[18508+t>>2]=e+1,K(18528+t|0,U2[A>>2],U2[(b=A+4|0)>>2],U2[(Q=A+8|0)>>2],N=(e=(16+t|0)+(e<<5)|0)+60|0),!(P2(P2(P2(P2(U2[A>>2]*U2[e+76>>2])+P2(U2[b>>2]*U2[e+80>>2]))+P2(U2[Q>>2]*U2[e+84>>2]))-U2[A+16>>2])>P2(9999999747378752e-20))){X2[16+t>>2]=7;break a;}for(b=0,e=32;;){if(!(Q=function A(e,r,f,i,a,n){var b,t,o=0;if(J2[i+55|0]!=(0|r))if(t=X2[17336+(b=a<<2)>>2],P2(P2(P2(P2(U2[i>>2]*U2[f+16>>2])+P2(U2[i+4>>2]*U2[f+20>>2]))+P2(U2[i+8>>2]*U2[f+24>>2]))-U2[i+16>>2])<P2(-9999999747378752e-21)){if(e=a4(r=e,X2[(e=i+20|0)+(t<<2)>>2],X2[e+b>>2],f,0))return X2[e+32>>2]=i,S2[e+52|0]=a,S2[52+(i+a|0)|0]=0,X2[32+((a<<2)+i|0)>>2]=e,(r=X2[n>>2])?(X2[r+36>>2]=e,S2[r+53|0]=2,X2[e+40>>2]=r,S2[e+54|0]=1):X2[n+4>>2]=e,X2[n>>2]=e,X2[n+8>>2]=X2[n+8>>2]+1,1;}else A(e,S2[i+55|0]=r,f,X2[32+((t<<2)+i|0)>>2],J2[52+(i+t|0)|0],n)&&(a=r,r=X2[17348+b>>2],A(e,a,f,X2[32+((r<<2)+i|0)>>2],J2[52+(r+i|0)|0],n)&&((r=X2[i+48>>2])&&(X2[r+44>>2]=X2[i+44>>2]),(r=X2[i+44>>2])&&(X2[r+48>>2]=X2[i+48>>2]),X2[e+18496>>2]==(0|i)&&(X2[e+18496>>2]=X2[i+48>>2]),X2[i+44>>2]=0,X2[i+48>>2]=X2[e+18504>>2],X2[(r=e+18500|0)>>2]=X2[r>>2]-1,(r=X2[e+18504>>2])&&(X2[r+44>>2]=i),X2[e+18504>>2]=i,X2[(e=e+18508|0)>>2]=X2[e>>2]+(o=1)));return o;}(16+t|0,_,N,X2[A+e>>2],J2[52+(A+b|0)|0],19040+t|0)))break n;if(e=e+4|0,S=b>>>0<2,b=b+1|0,!S)break;}}if(Q&2<X[19048+t>>2]){if(e=X2[19040+t>>2],S2[e+53|0]=2,b=X2[19044+t>>2],X2[e+36>>2]=b,X2[b+40>>2]=e,S2[b+54|0]=1,(e=X2[A+48>>2])&&(X2[e+44>>2]=X2[A+44>>2]),(e=X2[A+44>>2])&&(X2[e+48>>2]=X2[A+48>>2]),X2[18512+t>>2]==(0|A)&&(X2[18512+t>>2]=X2[A+48>>2]),X2[A+44>>2]=0,X2[A+48>>2]=X2[18520+t>>2],X2[18516+t>>2]=X2[18516+t>>2]-1,(e=X2[18520+t>>2])&&(X2[e+44>>2]=A),X2[18520+t>>2]=A,X2[18524+t>>2]=X2[18524+t>>2]+1,A=X2[18512+t>>2],o=U2[A+16>>2],b=X2[A+48>>2]){for(o=P2(o*o);;)if(c=U2[b+16>>2],A=(e=(c=P2(c*c))<o)?b:A,o=e?c:o,!(b=X2[b+48>>2]))break;o=U2[A+16>>2];}if(d=X2[A+28>>2],W=X2[A+24>>2],I=X2[A+20>>2],u=U2[A+12>>2],s=U2[A+8>>2],k=U2[A+4>>2],c=U2[A>>2],255!=(0|_))continue;}else X2[16+t>>2]=4;}break;}if(U2[68+t>>2]=u,U2[t+64>>2]=s,U2[60+t>>2]=k,U2[72+t>>2]=o,U2[56+t>>2]=c,A=36+t|0,c=P2(c*o),B=P2(U2[W+16>>2]-c),e=d+20|0,u=P2(k*o),k=P2(U2[e>>2]-u),l=P2(U2[(b=W+20|0)>>2]-u),v=P2(U2[d+16>>2]-c),Z=P2(P2(B*k)-P2(l*v)),o=P2(s*o),s=P2(U2[d+24>>2]-o),g=P2(l*s),l=P2(U2[(_=W+24|0)>>2]-o),k=P2(g-P2(l*k)),g=P2(k*k),k=P2(P2(l*v)-P2(B*s)),k=P2(O2(P2(P2(Z*Z)+P2(g+P2(k*k))))),U2[A>>2]=k,X2[20+t>>2]=I,Q=40+t|0,B=P2(U2[d+16>>2]-c),l=P2(U2[(N=I+20|0)>>2]-u),v=P2(U2[e>>2]-u),Z=P2(U2[I+16>>2]-c),E=P2(P2(B*l)-P2(v*Z)),g=v,v=P2(U2[(e=I+24|0)>>2]-o),l=P2(P2(g*v)-P2(s*l)),s=P2(P2(s*Z)-P2(B*v)),s=P2(O2(P2(P2(E*E)+P2(P2(l*l)+P2(s*s))))),U2[Q>>2]=s,X2[52+t>>2]=3,X2[28+t>>2]=d,X2[24+t>>2]=W,g=P2((v=k)+s),k=P2(U2[I+16>>2]-c),B=P2(U2[b>>2]-u),u=P2(U2[N>>2]-u),c=P2(U2[W+16>>2]-c),l=P2(P2(k*B)-P2(u*c)),Z=u,u=P2(U2[_>>2]-o),o=P2(U2[e>>2]-o),B=P2(P2(Z*u)-P2(o*B)),o=P2(P2(o*c)-P2(k*u)),c=P2(O2(P2(P2(l*l)+P2(P2(B*B)+P2(o*o))))),o=P2(g+c),U2[A>>2]=v/o,U2[44+t>>2]=c/o,U2[Q>>2]=s/o,9!=X2[16+t>>2]){if(X2[52+t>>2])break f;c=P2(0),k=P2(0),s=P2(0);break r;}}if(X2[18532+t>>2]=f,X2[18528+t>>2]=r,E=U2[a+32>>2],C=U2[a>>2],h=U2[a+16>>2],w=U2[a+36>>2],G=U2[a+4>>2],F=U2[a+20>>2],o=U2[i+32>>2],c=U2[i>>2],u=U2[i+16>>2],s=U2[i+36>>2],k=U2[i+4>>2],B=U2[i+20>>2],l=U2[i+40>>2],Y=U2[a+40>>2],v=U2[i+8>>2],m=U2[a+8>>2],Z=U2[i+24>>2],g=U2[a+24>>2],X2[18580+t>>2]=0,X2[18564+t>>2]=0,X2[18548+t>>2]=0,X2[18652+t>>2]=0,X2[18644+t>>2]=0,X2[18628+t>>2]=0,X2[18612+t>>2]=0,X2[18596+t>>2]=0,R=P2(P2(P2(v*m)+P2(Z*g))+P2(l*Y)),U2[18576+t>>2]=R,D=P2(P2(P2(k*m)+P2(B*g))+P2(s*Y)),U2[18572+t>>2]=D,Y=P2(P2(P2(c*m)+P2(u*g))+P2(o*Y)),U2[18568+t>>2]=Y,m=P2(P2(P2(v*G)+P2(Z*F))+P2(l*w)),U2[18560+t>>2]=m,g=P2(P2(P2(k*G)+P2(B*F))+P2(s*w)),U2[18556+t>>2]=g,w=P2(P2(P2(c*G)+P2(u*F))+P2(o*w)),U2[18552+t>>2]=w,G=P2(P2(P2(C*v)+P2(h*Z))+P2(E*l)),U2[18544+t>>2]=G,F=P2(P2(P2(C*k)+P2(h*B))+P2(E*s)),U2[18540+t>>2]=F,U2[18624+t>>2]=R,U2[18620+t>>2]=m,U2[18616+t>>2]=G,U2[18608+t>>2]=D,U2[18604+t>>2]=g,U2[18600+t>>2]=F,U2[18592+t>>2]=Y,U2[18588+t>>2]=w,g=v,v=P2(U2[a+48>>2]-U2[i+48>>2]),w=Z,Z=P2(U2[a+52>>2]-U2[i+52>>2]),G=l,l=P2(U2[a+56>>2]-U2[i+56>>2]),U2[18640+t>>2]=P2(P2(g*v)+P2(w*Z))+P2(G*l),U2[18636+t>>2]=P2(P2(v*k)+P2(Z*B))+P2(l*s),U2[18632+t>>2]=P2(P2(v*c)+P2(Z*u))+P2(l*o),X2[18648+t>>2]=71,o=P2(P2(P2(C*c)+P2(h*u))+P2(E*o)),U2[18536+t>>2]=o,U2[18584+t>>2]=o,X2[(A=152+t|0)>>2]=0,X2[A+4>>2]=0,X2[144+t>>2]=0,X2[148+t>>2]=0,X2[380+t>>2]=0,X2[384+t>>2]=0,X2[392+t>>2]=2,!f4(16+t|(X2[160+t>>2]=0),18528+t|0,t)){if(b=X2[388+t>>2],X2[b+32>>2]){for(E=P2(0),Z=P2(e=A=0),v=P2(0),l=P2(0),B=P2(0),u=P2(0);;)if(o=U2[(f=A+b|0)+16>>2],r=X2[18648+t>>2],a=X2[18652+t>>2],b=X2[18528+t>>2]+(a>>1)|0,N2[0|(1&a?X2[r+X2[b>>2]>>2]:r)](18912+t|0,b,X2[f>>2]),r=X2[X2[388+t>>2]+A>>2],c=U2[r+8>>2],s=U2[r>>2],k=P2(-U2[r+4>>2]),r=X2[18648+t>>2],f=X2[18652+t>>2],a=X2[18532+t>>2]+(f>>1)|0,r=1&f?X2[r+X2[a>>2]>>2]:r,E=P2(E+P2(o*U2[18920+t>>2])),Z=P2(Z+P2(o*U2[18916+t>>2])),v=P2(v+P2(o*U2[18912+t>>2])),X2[19052+t>>2]=0,U2[19048+t>>2]=P2(P2(U2[18572+t>>2]*k)-P2(s*U2[18568+t>>2]))-P2(c*U2[18576+t>>2]),U2[19044+t>>2]=P2(P2(U2[18556+t>>2]*k)-P2(s*U2[18552+t>>2]))-P2(c*U2[18560+t>>2]),U2[19040+t>>2]=P2(P2(U2[18540+t>>2]*k)-P2(s*U2[18536+t>>2]))-P2(c*U2[18544+t>>2]),N2[0|r](18912+t|0,a,19040+t|0),c=U2[18912+t>>2],s=U2[18916+t>>2],k=U2[18920+t>>2],l=P2(l+P2(o*P2(P2(P2(P2(c*U2[18616+t>>2])+P2(s*U2[18620+t>>2]))+P2(k*U2[18624+t>>2]))+U2[18640+t>>2]))),B=P2(B+P2(o*P2(P2(P2(P2(c*U2[18600+t>>2])+P2(s*U2[18604+t>>2]))+P2(k*U2[18608+t>>2]))+U2[18636+t>>2]))),u=P2(u+P2(o*P2(P2(P2(P2(c*U2[18584+t>>2])+P2(s*U2[18588+t>>2]))+P2(k*U2[18592+t>>2]))+U2[18632+t>>2]))),A=A+4|0,b=X2[388+t>>2],!((e=e+1|0)>>>0<X[b+32>>2]))break;}else u=P2(0),B=P2(0),l=P2(0),v=P2(0),Z=P2(0),E=P2(0);s=P2(v-u),k=P2(Z-B),c=P2(E-l),o=(o=P2(O2(P2(P2(P2(s*s)+P2(k*k))+P2(c*c)))))>P2(9999999747378752e-20)?P2(P2(1)/o):P2(1),c=P2(c*o),C=P2(k*o),k=P2(s*o),w=U2[i+32>>2],G=U2[i+36>>2],F=U2[i+40>>2],Y=U2[i+56>>2],s=P2(P2(P2(P2(u*w)+P2(B*G))+P2(l*F))+Y),m=U2[i+16>>2],g=U2[i+20>>2],R=U2[i+24>>2],D=U2[i+52>>2],h=P2(P2(P2(P2(u*m)+P2(B*g))+P2(l*R))+D),T=U2[i>>2],V=U2[i+4>>2],o=l,l=U2[i+8>>2],p=U2[i+48>>2],o=P2(P2(P2(P2(u*T)+P2(B*V))+P2(o*l))+p),u=P2(P2(P2(P2(v*w)+P2(Z*G))+P2(E*F))+Y),B=P2(P2(P2(P2(v*m)+P2(Z*g))+P2(E*R))+D),l=P2(P2(P2(P2(v*T)+P2(Z*V))+P2(E*l))+p),A=0;break e;}A=0;break A;}X2[16+t>>2]=8,c=P2(0),u=P2(1),B=P2(0),(l=P2(O2(P2(P2(P2(k*k)+P2(s*s))+P2(o*o)))))>P2(0)&&(u=P2(P2(1)/l),B=P2(u*o),c=P2(u*s),u=P2(u*k)),X2[52+t>>2]=1,X2[36+t>>2]=1065353216,X2[68+t>>2]=0,X2[72+t>>2]=0,U2[64+t>>2]=B,U2[60+t>>2]=c,U2[56+t>>2]=u,X2[20+t>>2]=X2[d>>2];}for(A=36+t|0,s=P2(0),k=P2(e=0),c=P2(0);;)if(r=X2[19032+t>>2],f=X2[19036+t>>2],a=X2[18912+t>>2]+(f>>1)|0,N2[0|(1&f?X2[r+X2[a>>2]>>2]:r)](19040+t|0,a,X2[A-16>>2]),o=U2[A>>2],s=P2(s+P2(o*U2[19048+t>>2])),k=P2(k+P2(o*U2[19044+t>>2])),c=P2(c+P2(U2[19040+t>>2]*o)),A=A+4|0,!((e=e+1|0)>>>0<X[52+t>>2]))break;}v=U2[i+32>>2],Z=U2[i+36>>2],E=U2[i+40>>2],C=U2[i+56>>2],u=P2(P2(P2(P2(c*v)+P2(k*Z))+P2(s*E))+C),h=U2[i+16>>2],w=U2[i+20>>2],G=U2[i+24>>2],F=U2[i+52>>2],B=P2(P2(P2(P2(c*h)+P2(k*w))+P2(s*G))+F),Y=U2[i>>2],m=U2[i+4>>2],g=U2[i+8>>2],R=U2[i+48>>2],l=P2(P2(P2(P2(c*Y)+P2(k*m))+P2(s*g))+R),D=U2[56+t>>2],o=U2[72+t>>2],c=P2(c-P2(D*o)),T=P2(c*v),v=U2[60+t>>2],k=P2(k-P2(o*v)),T=P2(T+P2(k*Z)),Z=U2[t+64>>2],o=P2(s-P2(o*Z)),s=P2(P2(T+P2(o*E))+C),h=P2(P2(P2(P2(c*h)+P2(k*w))+P2(o*G))+F),o=P2(P2(P2(P2(c*Y)+P2(k*m))+P2(o*g))+R),k=P2(-D),c=P2(-Z),C=P2(-v),A=1;}X2[x+12>>2]=0,U2[x+8>>2]=u,U2[x+4>>2]=B,U2[x>>2]=l,X2[y+12>>2]=0,U2[y+8>>2]=s,U2[y+4>>2]=h,U2[y>>2]=o,X2[n+12>>2]=0,U2[n+8>>2]=c,U2[n+4>>2]=C,U2[n>>2]=k;}return K2=19056+t|0,0|A;},A,f,f,function(A,e,r,f){A|=0,e|=0,r|=0,f=P2(f);var i,a=X2[e+4>>2];X2[A+4>>2]=X2[e>>2],X2[A+8>>2]=a,i=X2[(e=e+8|0)+4>>2],X2[(a=A+12|0)>>2]=X2[e>>2],X2[4+a>>2]=i,e=X2[r+4>>2],X2[A+20>>2]=X2[r>>2],X2[A+24>>2]=e,a=X2[(r=r+8|0)+4>>2],X2[(e=A+28|0)>>2]=X2[r>>2],X2[e+4>>2]=a,S2[A+40|0]=1,U2[A+36>>2]=f;},A,function(A,e,r,f,i,a,n,b,t,x){A|=0,e|=0,r|=0,f|=0,i|=0,a|=0,n|=0,b|=0,t|=0,x|=0;var o,c,k,u,y,s,l,B=0,v=P2(0),d=0,Z=P2(0),_=P2(0),g=0,E=P2(0),Q=P2(0),w=P2(0),G=0,C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=0,R=P2(0),D=0,T=0,W=0,I=0,V=(P2(0),P2(0));for(P2(0),K2=A=K2-4240|0,u=X2[r+4>>2]-17>>>0<=1?X2[f+4>>2]-17>>>0<2:0;;)if(b4(),X2[(B=(A+1264|0)+d|0)+12>>2]=0,C=U2[d+25492>>2],v=P2(-C),Q=U2[d+25488>>2],w=U2[d+25496>>2],U2[B+8>>2]=P2(P2(U2[i+24>>2]*v)-P2(Q*U2[i+8>>2]))-P2(w*U2[i+40>>2]),U2[B+4>>2]=P2(P2(U2[i+20>>2]*v)-P2(Q*U2[i+4>>2]))-P2(w*U2[i+36>>2]),U2[B>>2]=P2(P2(U2[i+16>>2]*v)-P2(Q*U2[i>>2]))-P2(w*U2[i+32>>2]),R=U2[a+32>>2],h=U2[a>>2],F=U2[a+16>>2],Y=U2[a+36>>2],m=U2[a+4>>2],E=U2[a+20>>2],Z=U2[a+40>>2],_=U2[a+8>>2],v=U2[a+24>>2],X2[(B=(A+272|0)+d|0)+12>>2]=0,U2[B+8>>2]=P2(P2(Q*_)+P2(C*v))+P2(w*Z),U2[B+4>>2]=P2(P2(Q*m)+P2(C*E))+P2(w*Y),U2[B>>2]=P2(P2(Q*h)+P2(C*F))+P2(w*R),672==(0|(d=d+16|0)))break;if(B=42,!((0|(D=0|N2[X2[X2[r>>2]+84>>2]](r)))<1)){for(G=A+3256|0,d=0;;)if(N2[X2[X2[r>>2]+88>>2]](r,N,A+3248|0),Z=U2[A+3248>>2],_=U2[A+3252>>2],v=U2[G>>2],U2[G>>2]=P2(P2(Z*U2[i+32>>2])+P2(_*U2[i+36>>2]))+P2(v*U2[i+40>>2]),X2[A+3260>>2]=0,U2[A+3252>>2]=P2(P2(Z*U2[i+16>>2])+P2(_*U2[i+20>>2]))+P2(v*U2[i+24>>2]),U2[A+3248>>2]=P2(P2(Z*U2[i>>2])+P2(_*U2[i+4>>2]))+P2(v*U2[i+8>>2]),b4(),B=X2[G+4>>2],X2[(g=d+26168|0)>>2]=X2[G>>2],X2[g+4>>2]=B,B=X2[A+3252>>2],X2[(g=d+26160|0)>>2]=X2[A+3248>>2],X2[g+4>>2]=B,X2[(B=(A+1264|0)+d|0)+684>>2]=0,_=U2[A+3252>>2],v=P2(-_),E=U2[A+3248>>2],Z=U2[G>>2],U2[B+680>>2]=P2(P2(U2[i+24>>2]*v)-P2(E*U2[i+8>>2]))-P2(Z*U2[i+40>>2]),U2[B+676>>2]=P2(P2(U2[i+20>>2]*v)-P2(E*U2[i+4>>2]))-P2(Z*U2[i+36>>2]),U2[B+672>>2]=P2(P2(U2[i+16>>2]*v)-P2(E*U2[i>>2]))-P2(Z*U2[i+32>>2]),X2[(B=(A+272|0)+d|0)+684>>2]=0,U2[B+672>>2]=P2(P2(E*U2[a>>2])+P2(_*U2[a+16>>2]))+P2(Z*U2[a+32>>2]),U2[B+676>>2]=P2(P2(E*U2[a+4>>2])+P2(_*U2[a+20>>2]))+P2(Z*U2[a+36>>2]),U2[B+680>>2]=P2(P2(E*U2[a+8>>2])+P2(_*U2[a+24>>2]))+P2(Z*U2[a+40>>2]),d=d+16|0,(0|D)==(0|(N=N+1|0)))break;B=N+42|0;}if(s=r,l=A+1264|0,y=A+3248|0,1<=(0|(N=0|N2[X2[X2[f>>2]+84>>2]](f)))){for(c=B<<4,T=A+272|0,W=A+1264|0,I=25488,d=0;;)if(N2[X2[X2[f>>2]+88>>2]](f,d,A+3248|0),Z=U2[(o=A+3256|0)>>2],_=U2[A+3248>>2],v=U2[A+3252>>2],U2[o>>2]=P2(P2(_*U2[a+32>>2])+P2(v*U2[a+36>>2]))+P2(Z*U2[a+40>>2]),X2[A+3260>>2]=0,U2[A+3252>>2]=P2(P2(_*U2[a+16>>2])+P2(v*U2[a+20>>2]))+P2(Z*U2[a+24>>2]),U2[A+3248>>2]=P2(P2(_*U2[a>>2])+P2(v*U2[a+4>>2]))+P2(Z*U2[a+8>>2]),b4(),g=X2[4+o>>2],X2[(D=(G=c+I|0)+8|0)>>2]=X2[o>>2],X2[D+4>>2]=g,g=X2[A+3252>>2],X2[G>>2]=X2[A+3248>>2],X2[G+4>>2]=g,X2[(g=c+W|0)+12>>2]=0,_=U2[A+3252>>2],v=P2(-_),E=U2[A+3248>>2],Z=U2[o>>2],U2[g+8>>2]=P2(P2(U2[i+24>>2]*v)-P2(E*U2[i+8>>2]))-P2(Z*U2[i+40>>2]),U2[g+4>>2]=P2(P2(U2[i+20>>2]*v)-P2(E*U2[i+4>>2]))-P2(Z*U2[i+36>>2]),U2[g>>2]=P2(P2(U2[i+16>>2]*v)-P2(E*U2[i>>2]))-P2(Z*U2[i+32>>2]),X2[(g=c+T|0)+12>>2]=0,U2[g>>2]=P2(P2(E*U2[a>>2])+P2(_*U2[a+16>>2]))+P2(Z*U2[a+32>>2]),U2[g+4>>2]=P2(P2(E*U2[a+4>>2])+P2(_*U2[a+20>>2]))+P2(Z*U2[a+36>>2]),U2[g+8>>2]=P2(P2(E*U2[a+8>>2])+P2(_*U2[a+24>>2]))+P2(Z*U2[a+40>>2]),I=I+16|0,W=W+16|0,T=T+16|0,(0|N)==(0|(d=d+1|0)))break;B=d+B|0;}if(N2[X2[X2[r>>2]+76>>2]](s,l,y,B),N2[X2[X2[f>>2]+76>>2]](f,A+272|0,A+2256|0,B),(0|B)<1)m=P2(0xde0b6b000000000),h=P2(0),F=P2(0),Y=P2(0);else for(m=P2(0xde0b6b000000000),Y=P2(d=0),F=P2(0),h=P2(0);;)if(b4(),E=U2[d+25488>>2],Z=U2[d+25492>>2],_=u?P2(0):U2[d+25496>>2],.01<+P2(P2(P2(E*E)+P2(Z*Z))+P2(_*_))&&(k=U2[(g=(A+2256|0)+d|0)>>2],Q=U2[g+4>>2],w=U2[g+8>>2],C=U2[(g=(A+3248|0)+d|0)>>2],R=U2[g+4>>2],v=U2[g+8>>2],(v=P2(P2(P2(E*P2(P2(P2(P2(P2(k*U2[a>>2])+P2(Q*U2[a+4>>2]))+P2(w*U2[a+8>>2]))+U2[a+48>>2])-P2(P2(P2(P2(C*U2[i>>2])+P2(R*U2[i+4>>2]))+P2(v*U2[i+8>>2]))+U2[i+48>>2])))+P2(Z*P2(P2(P2(P2(P2(k*U2[a+16>>2])+P2(Q*U2[a+20>>2]))+P2(w*U2[a+24>>2]))+U2[a+52>>2])-P2(P2(P2(P2(C*U2[i+16>>2])+P2(R*U2[i+20>>2]))+P2(v*U2[i+24>>2]))+U2[i+52>>2]))))+P2(_*P2(u?0:P2(P2(P2(P2(k*U2[a+32>>2])+P2(Q*U2[a+36>>2]))+P2(w*U2[a+40>>2]))+U2[a+56>>2])-P2(P2(P2(P2(C*U2[i+32>>2])+P2(R*U2[i+36>>2]))+P2(v*U2[i+40>>2]))+U2[i+56>>2])))))<m&&(V=U2[d+25500>>2],h=E,F=Z,Y=_,m=v)),d=d+16|0,!(B=B-1|0))break;if(1<<(B=X2[r+4>>2])&11571&&B>>>0<=13||P2(N2[X2[X2[r>>2]+48>>2]](r)),1<<(B=X2[f+4>>2])&11571&&B>>>0<=13||P2(N2[X2[X2[f>>2]+48>>2]](f)),!(m<P2(d=0))){A:{e:switch(X2[r+4>>2]){case 8:v=P2(U2[r+36>>2]*U2[r+20>>2]);break A;case 0:case 1:case 13:case 11:case 10:v=U2[r+52>>2];break A;case 4:case 5:v=U2[r+52>>2];break A;default:break e;}v=P2(N2[X2[X2[r>>2]+48>>2]](r));}A:{e:{r:{f:{i:{a:{n:{b:{t:switch(0|(d=X2[f+4>>2])){case 4:case 5:break r;case 10:break f;case 11:break i;case 13:break a;case 1:break n;case 0:break b;case 8:break t;default:break e;}Z=P2(U2[f+36>>2]*U2[f+20>>2]),d=8;break A;}Z=U2[f+52>>2],d=0;break A;}Z=U2[f+52>>2],d=1;break A;}Z=U2[f+52>>2],d=13;break A;}Z=U2[f+52>>2],d=11;break A;}Z=U2[f+52>>2],d=10;break A;}Z=U2[f+52>>2];break A;}Z=P2(N2[X2[X2[f>>2]+48>>2]](f)),d=X2[f+4>>2];}X2[(B=g=A+204|0)>>2]=0,X2[B+4>>2]=0,X2[A+224>>2]=f,X2[A+220>>2]=r,X2[A+216>>2]=e,X2[A+212>>2]=0,X2[A+196>>2]=0,X2[A+200>>2]=1065353216,X2[A+192>>2]=14952,X2[A+232>>2]=d,X2[A+228>>2]=X2[r+4>>2],s=A,l=P2(N2[X2[X2[r>>2]+48>>2]](r)),U2[s+236>>2]=l,_=P2(N2[X2[X2[f>>2]+48>>2]](f)),X2[A+264>>2]=1,X2[A+268>>2]=1,X2[A+252>>2]=-1,S2[A+244|0]=0,U2[A+240>>2]=_,X2[A+116>>2]=0,e=X2[(r=i+8|0)+4>>2],X2[(f=A- -64|0)>>2]=X2[r>>2],X2[f+4>>2]=e,e=X2[(r=i+24|0)+4>>2],X2[(f=A+80|0)>>2]=X2[r>>2],X2[f+4>>2]=e,e=X2[(r=i+40|0)+4>>2],X2[(f=A+96|0)>>2]=X2[r>>2],X2[f+4>>2]=e,_=P2(m+P2(P2(v+Z)+P2(.5))),U2[A+112>>2]=P2(Y*_)+U2[i+56>>2],U2[A+108>>2]=P2(F*_)+U2[i+52>>2],e=X2[i+4>>2],X2[A+56>>2]=X2[i>>2],X2[A+60>>2]=e,e=X2[i+20>>2],X2[A+72>>2]=X2[i+16>>2],X2[A+76>>2]=e,e=X2[i+36>>2],X2[A+88>>2]=X2[i+32>>2],X2[A+92>>2]=e,U2[A+104>>2]=P2(h*_)+U2[i+48>>2],e=X2[(r=a+8|0)+4>>2],X2[(f=A+128|0)>>2]=X2[r>>2],X2[f+4>>2]=e,e=X2[a+20>>2],X2[(r=A+136|0)>>2]=X2[a+16>>2],X2[r+4>>2]=e,e=X2[(r=a+24|0)+4>>2],X2[(f=A+144|0)>>2]=X2[r>>2],X2[f+4>>2]=e,e=X2[a+36>>2],X2[(r=A+152|0)>>2]=X2[a+32>>2],X2[r+4>>2]=e,e=X2[(r=a+40|0)+4>>2],X2[(f=A+160|0)>>2]=X2[r>>2],X2[f+4>>2]=e,e=X2[a+52>>2],X2[(r=A+168|0)>>2]=X2[a+48>>2],X2[r+4>>2]=e,e=X2[(r=a+56|0)+4>>2],X2[(f=A+176|0)>>2]=X2[r>>2],X2[f+4>>2]=e,X2[A+184>>2]=1566444395,e=X2[a+4>>2],X2[A+120>>2]=X2[a>>2],X2[A+124>>2]=e,U2[A+200>>2]=-F,U2[B>>2]=-Y,X2[A+208>>2]=0,U2[A+196>>2]=-h,S2[A+48|0]=0,X2[A+8>>2]=17480,I1(A+192|0,A+56|0,A+8|0,x,0),(f=J2[A+48|0])&&(v=U2[A+44>>2],X2[b+12>>2]=0,v=P2(_-v),U2[b>>2]=U2[A+28>>2]-P2(h*v),U2[b+8>>2]=U2[(i=A+36|0)>>2]-P2(Y*v),U2[b+4>>2]=U2[A+32>>2]-P2(F*v),e=X2[A+32>>2],X2[t>>2]=X2[A+28>>2],X2[t+4>>2]=e,e=X2[i+4>>2],X2[(r=t+8|0)>>2]=X2[i>>2],X2[r+4>>2]=e,U2[n>>2]=h,U2[n+4>>2]=F,U2[n+8>>2]=Y,U2[n+12>>2]=V),d=0!=(0|f);}return K2=A+4240|0,0|d;},o4,function(A){n(o4(A|=0));},m1,Y1,function(A,e,r){A|=0,e|=0,r|=0;var f=0;if(!(f=8!=(0|e))&&8==(0|r))return X2[A+56>>2];if(!f&&1==(0|r))return X2[A+72>>2];if(1==(0|e)&&8==(0|r))return X2[A+76>>2];if(!(e|r))return X2[A+68>>2];if(!(19<(0|e))&&28==(0|r))return X2[A+84>>2];if(28==(0|e)&&!(19<(0|r)))return X2[A+80>>2];A:{if((0|e)<=19){if((0|r)<=19)return X2[A+28>>2];if(8<r-21>>>0)break A;return X2[A+32>>2];}if(!(19<(0|r)||8<e-21>>>0))return X2[A+36>>2];if(31==(0|e))return 31==(0|r)?X2[A+44>>2]:X2[A+40>>2];}return 31==(0|r)?X2[A+48>>2]:X2[A+52>>2];},function(A,e,r){A|=0,e|=0,r|=0;var f=0;if(!(f=8!=(0|e))&&8==(0|r))return X2[A+56>>2];if(!f&&1==(0|r))return X2[A+72>>2];if(1==(0|e)&&8==(0|r))return X2[A+76>>2];if(!(19<(0|e))&&28==(0|r))return X2[A+84>>2];if(28==(0|e)&&!(19<(0|r)))return X2[A+80>>2];A:{if((0|e)<=19){if((0|r)<=19)return X2[A+28>>2];if(8<r-21>>>0)break A;return X2[A+32>>2];}if(!(19<(0|r)||8<e-21>>>0))return X2[A+36>>2];if(31==(0|e))return 31==(0|r)?X2[A+44>>2]:X2[A+40>>2];}return 31==(0|r)?X2[A+48>>2]:X2[A+52>>2];},e,A,function(A,e,r,f){return A|=0,r|=0,f|=0,A=X2[(e|=0)>>2],A=0|N2[X2[X2[A>>2]+56>>2]](A,80),X2[A+8>>2]=16024,X2[A>>2]=15996,X2[A+60>>2]=0,X2[A+48>>2]=f,X2[A+44>>2]=r,e=X2[e>>2],X2[A+4>>2]=e,X2[A+56>>2]=e,e=0|N2[X2[X2[e>>2]+12>>2]](e,X2[r+8>>2],X2[f+8>>2]),X2[A+72>>2]=e,r=X2[A+56>>2],N2[X2[X2[r>>2]+20>>2]](r,e),(S2[A+76|0]=0)|A;},A,function(A,e,r,f){return A|=0,r|=0,f|=0,A=X2[(e|=0)>>2],A=0|N2[X2[X2[A>>2]+56>>2]](A,80),X2[A+8>>2]=16024,X2[A>>2]=15996,X2[A+60>>2]=0,X2[A+48>>2]=r,X2[A+44>>2]=f,e=X2[e>>2],X2[A+4>>2]=e,X2[A+56>>2]=e,e=0|N2[X2[X2[e>>2]+12>>2]](e,X2[f+8>>2],X2[r+8>>2]),X2[A+72>>2]=e,r=X2[A+56>>2],N2[X2[X2[r>>2]+20>>2]](r,e),S2[A+76|0]=1,0|A;},A,function(A,e,r,f){return A|=0,r|=0,f|=0,A=X2[(e|=0)>>2],A=0|N2[X2[X2[A>>2]+56>>2]](A,84),X2[A+52>>2]=0,X2[A+56>>2]=0,S2[A+24|0]=1,X2[A>>2]=16500,X2[A+20>>2]=0,S2[A+44|0]=1,X2[A+12>>2]=0,X2[A+16>>2]=0,X2[A+40>>2]=0,S2[A+64|0]=1,X2[A+32>>2]=0,X2[A+36>>2]=0,X2[A+60>>2]=0,S2[A+68|0]=0,S2[A+76|0]=0,X2[A+4>>2]=X2[e>>2],X2[A+72>>2]=X2[e+4>>2],X2[A+80>>2]=X2[X2[r+4>>2]+76>>2],H1(A,r,f),0|A;},A,function(A,e,r,f){A|=0,r|=0,f|=0;var i,a,n=0;return A=X2[(e|=0)>>2],A=0|N2[X2[X2[A>>2]+56>>2]](A,116),X2[A+52>>2]=0,X2[A+56>>2]=0,S2[A+24|0]=1,X2[A>>2]=16500,X2[A+20>>2]=0,S2[A+44|0]=1,X2[A+12>>2]=0,X2[A+16>>2]=0,X2[A+40>>2]=0,S2[A+64|0]=1,X2[A+32>>2]=0,X2[A+36>>2]=0,X2[A+60>>2]=0,S2[A+68|0]=0,S2[A+76|0]=0,X2[A+4>>2]=X2[e>>2],X2[A+72>>2]=X2[e+4>>2],X2[A+80>>2]=X2[X2[r+4>>2]+76>>2],H1(A,r,f),S2[A+104|0]=1,X2[A>>2]=16708,X2[A+100>>2]=0,X2[A+92>>2]=0,X2[A+96>>2]=0,a=X2[6258],e=0,(i=L2(83))&&(X2[(e=i+19&-16)-4>>2]=i),S2[e+20|0]=1,X2[e>>2]=16644,X2[e+16>>2]=0,S2[e+40|0]=1,X2[e+8>>2]=0,X2[e+12>>2]=0,X2[e+36>>2]=0,S2[e+60|0]=1,X2[e+28>>2]=0,X2[e+32>>2]=0,X2[e+56>>2]=0,X2[e+48>>2]=0,X2[e+52>>2]=0,X2[6258]=a+2,(i=L2(43))&&(X2[(n=i+19&-16)-4>>2]=i),(i=X2[e+16>>2])&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[e+16>>2]=n,S2[e+20|0]=1,X2[e+12>>2]=2,O1(e),X2[A+84>>2]=e,X2[A+108>>2]=X2[X2[r+4>>2]+76>>2],X2[A+112>>2]=X2[X2[f+4>>2]+76>>2],0|A;},A,function(A,e,r,f){return A|=0,r|=0,f|=0,A=X2[(e|=0)>>2],A=0|N2[X2[X2[A>>2]+56>>2]](A,84),X2[A+52>>2]=0,X2[A+56>>2]=0,S2[A+24|0]=1,X2[A>>2]=16500,X2[A+20>>2]=0,S2[A+44|0]=1,X2[A+12>>2]=0,X2[A+16>>2]=0,X2[A+40>>2]=0,S2[A+64|0]=1,X2[A+32>>2]=0,X2[A+36>>2]=0,X2[A+60>>2]=0,S2[A+68|0]=1,S2[A+76|0]=0,X2[A+4>>2]=X2[e>>2],X2[A+72>>2]=X2[e+4>>2],X2[A+80>>2]=X2[X2[f+4>>2]+76>>2],H1(A,r,f),0|A;},A,function(A,e,r,f){return A|=0,A=X2[(e|=0)>>2],A=0|N2[X2[X2[A>>2]+56>>2]](A,8),X2[A>>2]=16868,X2[A+4>>2]=X2[e>>2],0|A;},A,function(A,e,r,f){return A|=0,r|=0,f|=0,A=X2[(e|=0)>>2],A=0|N2[X2[X2[A>>2]+56>>2]](A,16),X2[A>>2]=16928,S2[A+8|0]=0,e=X2[e>>2],X2[A+4>>2]=e,e=(X2[A+12>>2]=0)|N2[X2[X2[e>>2]+12>>2]](e,X2[r+8>>2],X2[f+8>>2]),S2[A+8|0]=1,X2[A+12>>2]=e,0|A;},A,function(A,e,r,f){A|=0,r|=0,f|=0;var i,a=X2[(e|=0)>>2];return a=0|N2[X2[X2[a>>2]+56>>2]](a,20),S2[8+a|0]=0,X2[a>>2]=17064,i=X2[e>>2],X2[4+a>>2]=i,S2[16+a|0]=J2[A+4|0],A=X2[e+4>>2],(X2[12+a>>2]=A)||(A=0|N2[X2[X2[i>>2]+12>>2]](i,X2[r+8>>2],X2[f+8>>2]),S2[8+a|0]=1,X2[12+a>>2]=A),0|a;},A,function(A,e,r,f){return A|=0,r|=0,f|=0,A=X2[(e|=0)>>2],A=0|N2[X2[X2[A>>2]+56>>2]](A,16),X2[A>>2]=17196,S2[A+8|0]=0,e=X2[e>>2],X2[A+4>>2]=e,(X2[A+12>>2]=0)|N2[X2[X2[e>>2]+24>>2]](e,X2[r+8>>2],X2[f+8>>2])&&(e=X2[A+4>>2],e=0|N2[X2[X2[e>>2]+12>>2]](e,X2[r+8>>2],X2[f+8>>2]),S2[A+8|0]=1,X2[A+12>>2]=e),0|A;},A,function(A,e,r,f){A|=0,r|=0,f|=0;var i,a,n=X2[(e|=0)>>2];return n=0|N2[X2[X2[n>>2]+56>>2]](n,28),i=X2[A+12>>2],a=X2[A+8>>2],X2[n>>2]=17268,S2[8+n|0]=0,X2[20+n>>2]=a,X2[24+n>>2]=i,i=J2[A+4|0],S2[16+n|0]=i,A=X2[e>>2],X2[12+n>>2]=0,X2[4+n>>2]=A,0|N2[X2[X2[A>>2]+24>>2]](A,X2[(e=i?f:r)+8>>2],X2[(r=i?r:f)+8>>2])&&(A=X2[4+n>>2],A=0|N2[X2[X2[A>>2]+12>>2]](A,X2[e+8>>2],X2[r+8>>2]),S2[8+n|0]=1,X2[12+n>>2]=A),0|n;},function(A){var e;return X2[(A|=0)>>2]=18764,(e=X2[A+20>>2])&&J2[A+24|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+20>>2]=0,S2[A+24|0]=1,X2[(e=A+12|0)>>2]=0,(X2[4+e>>2]=0)|A;},function(A){var e;X2[(A|=0)>>2]=18764,(e=X2[A+20>>2])&&J2[A+24|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),n(A);},function(A,e,r,f,i){var a,n;return A|=0,e|=0,r|=0,i|=0,X2[12+(K2=n=K2-16|0)>>2]=f|=0,X2[8+n>>2]=A,f=X2[X2[r+4>>2]+4>>2],a=X2[X2[e+4>>2]+4>>2],A=(A=1==(0|i)?X2[76+((H2(a,144)+A|0)+(f<<2)|0)>>2]:X2[5260+((H2(a,144)+A|0)+(f<<2)|0)>>2],0|N2[X2[X2[A>>2]+8>>2]](A,8+n|0,e,r)),K2=16+n|0,0|A;},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n=0,b=0,t=P2(0),o=P2(0),c=0;P2(0),K2=a=K2-16|0,X2[6621]=X2[6621]+1,n=2&X2[A+4>>2]?(n=X2[e+192>>2],t=P2(N2[X2[X2[n>>2]+20>>2]](n,P2(.019999999552965164))),U2[12+a>>2]=t,n=X2[r+192>>2],o=P2(N2[X2[X2[n>>2]+20>>2]](n,P2(.019999999552965164))),t<(U2[8+a>>2]=o)?12+a|0:8+a|0):14940,i=U2[n>>2],t=U2[r+184>>2],o=U2[e+184>>2],n=X2[A+72>>2];A:{if(b=X2[n+12>>2])X2[n+12>>2]=X2[b>>2],X2[n+8>>2]=X2[n+8>>2]-1;else {if(4&J2[A+4|(b=0)])break A;X2[6258]=X2[6258]+1,(n=L2(887))&&(X2[(b=n+19&-16)-4>>2]=n);}if(X2[b+120>>2]=0,X2[b+124>>2]=0,X2[b>>2]=1025,X2[b+328>>2]=0,X2[b+332>>2]=0,X2[b+536>>2]=0,X2[b+540>>2]=0,X2[(n=b+128|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+136|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+144|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+152|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+160|0)>>2]=0,X2[n+4>>2]=0,X2[b+168>>2]=0,X2[(n=b+336|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+344|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+352|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+360|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+368|0)>>2]=0,X2[n+4>>2]=0,X2[b+376>>2]=0,X2[(n=b+544|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+552|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+560|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+568|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+576|0)>>2]=0,X2[n+4>>2]=0,X2[b+584>>2]=0,X2[b+792>>2]=0,X2[(n=b+784|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+776|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+768|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+760|0)>>2]=0,X2[n+4>>2]=0,X2[(n=b+752|0)>>2]=0,X2[n+4>>2]=0,X2[b+744>>2]=0,X2[b+748>>2]=0,X2[b+836>>2]=e,X2[b+840>>2]=r,X2[b+844>>2]=0,U2[b+848>>2]=i,U2[b+852>>2]=o<t?o:t,n=X2[A+12>>2],X2[b+864>>2]=n,X2[A+16>>2]==(0|n)&&!((0|(f=n?n<<1:1))<=(0|n))){if(f&&(X2[6258]=X2[6258]+1,(e=L2(19+(f<<2)|0))&&(X2[(c=e+19&-16)-4>>2]=e)),1<=(0|n))for(e=0,r=n;;)if(X2[e+c>>2]=X2[X2[A+20>>2]+e>>2],e=e+4|0,!(r=r-1|0))break;(e=X2[A+20>>2])&&J2[A+24|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]),n=X2[A+12>>2]),X2[A+20>>2]=c,X2[A+16>>2]=f,S2[A+24|0]=1;}X2[A+12>>2]=n+1,X2[X2[A+20>>2]+(n<<2)>>2]=b;}return K2=16+a|0,0|b;},function(A,e){var r,f,i,a,n,b,t,o;A|=0,e|=0,X2[6621]=X2[6621]-1,N2[X2[X2[A>>2]+20>>2]](A,e),f=X2[(r=A+20|0)>>2],a=X2[e+864>>2],b=X2[(i=f+(n=a<<2)|0)>>2],t=i,o=f,i=X2[(f=A+12|0)>>2]-1|0,X2[t>>2]=X2[o+(t=i<<2)>>2],X2[X2[r>>2]+t>>2]=b,X2[f>>2]=i,X2[X2[X2[r>>2]+n>>2]+864>>2]=a,A=X2[A+72>>2],e>>>0<(r=X2[A+16>>2])>>>0||r+H2(X2[A>>2],X2[A+4>>2])>>>0<=e>>>0?(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])):(X2[e>>2]=X2[A+12>>2],X2[A+12>>2]=e,X2[A+8>>2]=X2[A+8>>2]+1);},function(A,e){X2[(e|=0)+844>>2]=0;},function(A,e,r){A|=0,r|=0;A:{e:{r:switch(X2[(e|=0)+220>>2]-2|0){case 0:case 3:break r;default:break e;}switch(X2[r+220>>2]-2|(A=0)){case 0:case 3:break A;default:break e;}}if(!X2[e+280>>2]||0|N2[X2[X2[e>>2]+12>>2]](e,r)){if(A=1,!X2[r+280>>2])break A;if(0|N2[X2[X2[r>>2]+12>>2]](r,e))break A;}A=0;}return 0|A;},function(A,e,r){if(A|=0,r|=0,!(4&(e=X2[(e|=A=0)+204>>2])||4&(r=X2[r+204>>2]))){if(!(3&e))return 1;A=!(3&r);}return 0|A;},function(A,e,r,f){var i;e|=0,r|=0,f|=0,X2[8+(K2=i=K2-16|0)>>2]=A|=0,X2[4+i>>2]=r,X2[i>>2]=18848,N2[X2[X2[e>>2]+48>>2]](e,i,f),K2=16+i|0;},function(A){return X2[(A|=0)+12>>2];},function(A,e){return X2[X2[(A|=0)+20>>2]+((e|=0)<<2)>>2];},function(A){return X2[(A|=0)+12>>2]?X2[A+20>>2]:0;},c4,c4,function(A,e){var r;return e|=0,A=X2[(A|=0)+68>>2],(r=X2[A+12>>2])?(X2[A+12>>2]=X2[r>>2],X2[A+8>>2]=X2[A+8>>2]-1,0|r):(A=0,X2[6258]=X2[6258]+1,(e=L2(e+19|0))&&(X2[(A=e+19&-16)-4>>2]=e),0|A);},function(A,e){var r;A|=0,(e|=0)&&(A=X2[A+68>>2],e>>>0<(r=X2[A+16>>2])>>>0||H2(X2[A>>2],X2[A+4>>2])+r>>>0<=e>>>0?(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])):(X2[e>>2]=X2[A+12>>2],X2[A+12>>2]=e,X2[A+8>>2]=X2[A+8>>2]+1));},e,A,function(A,e){var r=0,r=e|=0;return e=X2[(A|=0)+8>>2],N2[X2[e+64>>2]](r,e,X2[A+4>>2]),0;},function(A){var e;return X2[(A|=0)>>2]=18960,(e=X2[A+60>>2])&&J2[A- -64|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+60>>2]=0,S2[A- -64|0]=1,X2[(e=A+52|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+40>>2])&&J2[A+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+40>>2]=0,S2[A+44|0]=1,X2[(e=A+32|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+16>>2]=0,S2[A+20|0]=1,X2[(e=A+8|0)>>2]=0,(X2[4+e>>2]=0)|A;},function(A){var e;X2[(A|=0)>>2]=18960,(e=X2[A+60>>2])&&J2[A- -64|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+60>>2]=0,S2[A- -64|0]=1,X2[(e=A+52|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+40>>2])&&J2[A+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+40>>2]=0,S2[A+44|0]=1,X2[(e=A+32|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+16>>2]=0,S2[A+20|0]=1,X2[(e=A+8|0)>>2]=0,X2[4+e>>2]=0,X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b,t,o,c,k=0,u=0,s=0,l=0,B=0;X2[6625]=X2[6625]+1;A:{e:{if(f=X2[A+24>>2]){if(0|N2[X2[X2[f>>2]+8>>2]](f,e,r))break e;break A;}if(!(X2[r+8>>2]&X2[e+4>>2]))break A;if(!(X2[e+8>>2]&X2[r+4>>2]))break A;}if(f=X2[e+12>>2]>X2[r+12>>2],u=X2[(i=f?e:r)+12>>2],s=X2[(a=f?r:e)+12>>2],e=H2((e=((e=u<<16|s)<<15^-1)+e|0)>>>10^e,9),f=X2[A+12>>2],-1!=(0|(e=X2[X2[A+40>>2]+((B=(b=(e=((e^=e>>>6)<<11^-1)+e|0)>>>16^e)&f-1)<<2)>>2])))for(r=X2[A+16>>2];;){if(k=(l=e<<4)+r|0,(0|u)==X2[X2[4+(r+l|0)>>2]+12>>2]&&(0|s)==X2[X2[k>>2]+12>>2])break A;if(-1==(0|(e=X2[X2[A+60>>2]+(e<<2)>>2])))break;}if((0|(e=f))==(0|(r=s=X2[A+8>>2]))&&(r=f,!((0|(u=e?e<<1:1))<=(0|e)))){if(r=0,u&&(X2[6258]=X2[6258]+1,(e=L2(19+(u<<4)|0))&&(X2[(r=e+19&-16)-4>>2]=e)),1<=(0|f))for(e=12,k=f;;)if(n=X2[A+16>>2]+e|0,X2[(l=e+r|0)-12>>2]=X2[n-12>>2],c=X2[4+(t=n-8|0)>>2],X2[(o=l-8|0)>>2]=X2[t>>2],X2[4+o>>2]=c,X2[l>>2]=X2[n>>2],e=e+16|0,!(k=k-1|0))break;(e=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+16>>2]=r,X2[A+12>>2]=u,S2[A+20|0]=1,r=X2[A+8>>2],e=u;}X2[A+8>>2]=r+1,r=X2[A+16>>2],(k=X2[A+68>>2])&&(N2[X2[X2[k>>2]+8>>2]](k,a,i),e=X2[A+12>>2]),k=r+(s<<4)|0,(0|f)<(0|e)&&(k4(A),B=X2[A+12>>2]-1&b),f=X2[i+12>>2],u=X2[a+12>>2],X2[(e=r+(s<<4)|0)+8>>2]=0,X2[e+12>>2]=0,X2[(r=e)+4>>2]=(e=(0|u)<(0|f))?i:a,X2[k>>2]=e?a:i,e=X2[A+60>>2]+(s<<2)|0,A=X2[A+40>>2]+(B<<2)|0,X2[e>>2]=X2[A>>2],X2[A>>2]=s;}return 0|k;},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a=0,n=0,b=0,t=0,o=0,c=0,k=0;X2[6624]=X2[6624]+1,a=X2[e+12>>2]>X2[r+12>>2],n=X2[(i=a?e:r)+12>>2],b=X2[(o=a?r:e)+12>>2],e=H2((e=((e=n<<16|b)<<15^-1)+e|0)>>>10^e,9),t=X2[A+12>>2]-1&((e=((e^=e>>>6)<<11^-1)+e|0)>>>16^e),e=X2[X2[A+40>>2]+(t<<2)>>2];A:if(-1!=(0|e)){for(a=X2[A+16>>2];;){if((0|n)==X2[X2[(r=a+(e<<4)|0)+4>>2]+12>>2]&&(0|b)==X2[X2[r>>2]+12>>2])break;if(-1==(0|(e=X2[X2[A+60>>2]+(e<<2)>>2])))break A;}N2[X2[X2[A>>2]+32>>2]](A,r,f),c=X2[12+(a+(e<<4)|0)>>2],n=X2[A+60>>2];e:{if(b=X2[A+40>>2]+(t<<2)|0,(0|(e=X2[b>>2]))!=(0|(a=r-X2[A+16>>2]>>4))){for(;;)if((0|a)==(0|(e=X2[(t=n+((r=e)<<2)|0)>>2])))break;if(-1!=(0|r)){X2[t>>2]=X2[n+(a<<2)>>2];break e;}}X2[b>>2]=X2[n+(a<<2)>>2];}if(n=X2[A+8>>2]-1|0,(e=X2[A+68>>2])&&N2[X2[X2[e>>2]+12>>2]](e,o,i,f),(0|a)==(0|n))return X2[A+8>>2]=X2[A+8>>2]-1,0|c;i=X2[A+60>>2];e:{if(o=X2[A+16>>2],e=X2[X2[(f=o+(n<<4)|0)+4>>2]+12>>2]<<16|X2[X2[f>>2]+12>>2],e=H2((e=(e<<15^-1)+e|0)>>>10^e,9),b=X2[A+12>>2]-1&((e=((e^=e>>>6)<<11^-1)+e|0)>>>16^e),t=X2[A+40>>2]+(b<<2)|0,(0|n)!=(0|(e=X2[t>>2]))){for(;;)if((0|n)==(0|(e=X2[(k=i+((r=e)<<2)|0)>>2])))break;if(-1!=(0|r)){X2[k>>2]=X2[i+(n<<2)>>2];break e;}}X2[t>>2]=X2[i+(n<<2)>>2];}r=X2[f+4>>2],X2[(e=o+(a<<4)|0)>>2]=X2[f>>2],X2[e+4>>2]=r,f=X2[(r=f+8|0)+4>>2],X2[(e=e+8|0)>>2]=X2[r>>2],X2[e+4>>2]=f,e=X2[A+40>>2]+(b<<2)|0,X2[X2[A+60>>2]+(a<<2)>>2]=X2[e>>2],X2[e>>2]=a,X2[A+8>>2]=X2[A+8>>2]-1;}return 0|c;},function(A,e,r){var f;A|=0,r|=0,X2[12+(K2=f=K2-16|0)>>2]=e|=0,X2[8+f>>2]=19192,N2[X2[X2[A>>2]+48>>2]](A,8+f|0,r),K2=16+f|0;},K1,K1,g0,function(A,e,r){A|=0,e|=0,(r|=0)&&(A=X2[e+8>>2])&&(N2[X2[X2[A>>2]>>2]](A),N2[X2[X2[r>>2]+60>>2]](r,X2[e+8>>2]),X2[e+8>>2]=0);},function(A){return X2[(A|=0)+8>>2];},function(A,e,r){var f;A|=0,e|=0,X2[12+(K2=f=K2-16|0)>>2]=r|=0,X2[8+f>>2]=A,X2[4+f>>2]=e,X2[f>>2]=19048,N2[X2[X2[A>>2]+48>>2]](A,f,r),K2=16+f|0;},function(A,e){X2[(A|=0)+24>>2]=e|=0;},function(A,e,r){e|=0,r|=0;var f,i=0;if(1<=X2[(A|=0)+8>>2])for(;;)if(f=X2[A+16>>2]+(i<<4)|0,0|N2[X2[X2[e>>2]+8>>2]](e,f)?(N2[X2[X2[A>>2]+12>>2]](A,X2[f>>2],X2[4+f>>2],r),X2[6623]=X2[6623]-1):i=i+1|0,!(X2[A+8>>2]>(0|i)))break;},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a=0;X2[6622]=X2[6622]+1,a=X2[e+12>>2]>X2[r+12>>2],f=X2[(a?e:r)+12>>2],i=X2[(a?r:e)+12>>2],e=H2((e=((e=i|f<<16)<<15^-1)+e|0)>>>10^e,9),e=X2[A+12>>2]-1&((e=((e^=e>>>6)<<11^-1)+e|0)>>>16^e);A:{if(!((0|e)>=X2[A+32>>2])&&-1!=(0|(e=X2[X2[A+40>>2]+(e<<2)>>2])))for(r=X2[A+16>>2];;){if(X2[X2[4+(a=r+(e<<4)|0)>>2]+12>>2]==(0|f)&&X2[X2[a>>2]+12>>2]==(0|i))break A;if(-1==(0|(e=X2[X2[A+60>>2]+(e<<2)>>2])))break;}a=0;}return 0|a;},V0,function(A,e){X2[(A|=0)+68>>2]=e|=0;},function(A,e){A|=0,e|=0;var r,f,i,a,n=0,b=0,t=0,o=0,c=0,k=0,u=0,s=0;if(X2[20+(K2=a=K2-32|0)>>2]=0,X2[12+a>>2]=0,((X2[16+a>>2]=0)|(b=X2[A+8>>2]))<(S2[24+a|0]=1))b=0;else {for(b=0;;){if(f=X2[A+16>>2],(0|t)==(0|n))if((0|(u=n?n<<1:1))<=(0|n))t=n;else {if(c=0,u&&(X2[6258]=X2[6258]+1,(b=L2(19+(u<<4)|0))&&(X2[(c=b+19&-16)-4>>2]=b)),1<=(0|n))for(t=12;;)if(o=X2[20+a>>2]+t|0,X2[(b=t+c|0)-12>>2]=X2[o-12>>2],i=X2[4+(r=o-8|0)>>2],X2[(k=b-8|0)>>2]=X2[r>>2],X2[k+4>>2]=i,X2[b>>2]=X2[o>>2],t=t+16|0,!(n=n-1|0))break;(b=X2[20+a>>2])&&J2[24+a|0]&&(X2[6259]=X2[6259]+1,q2(X2[b-4>>2])),X2[20+a>>2]=c,S2[24+a|0]=1,X2[16+a>>2]=u,t=X2[12+a>>2],o=k=b=c;}if(u=X2[(n=(s<<4)+f|0)+4>>2],X2[(t=(t<<4)+o|0)>>2]=X2[n>>2],X2[t+4>>2]=u,X2[t+8>>2]=X2[n+8>>2],X2[t+12>>2]=X2[n+12>>2],n=X2[12+a>>2],X2[12+a>>2]=t=n+1|0,!((0|(s=s+1|0))<X2[A+8>>2]))break;n=X2[16+a>>2];}if(!((0|n)<0))for(o=n+1|0;;)if(N2[X2[X2[A>>2]+12>>2]](A,X2[k>>2],X2[k+4>>2],e),k=k+16|0,!(o=o-1|0))break;}if(1<=X2[A+52>>2])for(o=X2[A+60>>2],n=0;;)if(X2[o>>2]=-1,o=o+4|0,!((0|(n=n+1|0))<X2[A+52>>2]))break;A:{if(2<=(0|t))u4(8+a|0,0,t-1|0);else if((0|t)<1)break A;for(;;)if(N2[X2[X2[A>>2]+8>>2]](A,X2[b>>2],X2[b+4>>2]),b=b+16|0,!(t=t-1|0))break;}c&&(X2[6259]=X2[6259]+1,q2(X2[c-4>>2])),K2=32+a|0;},A,function(A,e){var r;return (0|(r=X2[(A|=0)+4>>2]))!=X2[(e|=0)+4>>2]&&(0|r)!=X2[e>>2]||(r=X2[A+8>>2],N2[X2[X2[r>>2]+32>>2]](r,e,X2[A+12>>2])),0;},A,function(A,e){return (0|(A=X2[(A|=0)+4>>2]))==X2[(e|=0)>>2]|(0|A)==X2[e+4>>2];},s4,function(A){n(s4(A|=0));},function(A,e,r,f,i,a,n,b){var t,o;return A|=0,e|=0,r|=0,f|=0,i|=0,a|=0,n|=0,b|=0,K2=b=K2-48|0,f=0,o=X2[6258],X2[6258]=o+1,(t=L2(83))&&(X2[(f=t+19&-16)-4>>2]=t),X2[f+8>>2]=n,X2[f+4>>2]=a,X2[f>>2]=i,i=X2[e+4>>2],X2[f+16>>2]=X2[e>>2],X2[f+20>>2]=i,t=X2[(n=i=e+8|0)+4>>2],X2[(a=f+24|0)>>2]=X2[n>>2],X2[a+4>>2]=t,a=X2[r+4>>2],X2[f+32>>2]=X2[r>>2],X2[f+36>>2]=a,t=X2[(a=r+8|0)+4>>2],X2[(n=f+40|0)>>2]=X2[a>>2],X2[n+4>>2]=t,X2[f+52>>2]=0,X2[f+56>>2]=0,t=X2[i+4>>2],X2[(n=b+24|0)>>2]=X2[i>>2],X2[n+4>>2]=t,n=X2[a+4>>2],X2[(i=b+40|0)>>2]=X2[a>>2],X2[i+4>>2]=n,i=X2[e>>2],e=X2[e+4>>2],a=X2[r+4>>2],r=X2[r>>2],X2[f+60>>2]=X2[A+104>>2],X2[b+32>>2]=r,X2[b+36>>2]=a,r=X2[A+148>>2]+1|0,X2[f+12>>2]=r,X2[A+148>>2]=r,X2[b+16>>2]=i,X2[b+20>>2]=e,i=A+4|0,(e=X2[A+8>>2])?X2[A+8>>2]=0:(X2[6258]=o+2,e=0,(r=L2(63))&&(X2[(e=r+19&-16)-4>>2]=r),X2[e>>2]=0,X2[e+4>>2]=0,X2[e+40>>2]=0,X2[(r=e+32|0)>>2]=0,X2[r+4>>2]=0,X2[(r=e+24|0)>>2]=0,X2[r+4>>2]=0,X2[(r=e+16|0)>>2]=0,X2[r+4>>2]=0,X2[(r=e+8|0)>>2]=0,X2[r+4>>2]=0),X2[e+36>>2]=f,r=X2[b+20>>2],X2[e>>2]=X2[b+16>>2],X2[e+4>>2]=r,X2[e+40>>2]=0,n=X2[(a=b+24|0)+4>>2],X2[(r=e+8|0)>>2]=X2[a>>2],X2[r+4>>2]=n,n=X2[(a=b+32|0)+4>>2],X2[(r=e+16|0)>>2]=X2[a>>2],X2[r+4>>2]=n,n=X2[(a=b+40|0)+4>>2],X2[(r=e+24|0)>>2]=X2[a>>2],X2[r+4>>2]=n,X2[e+32>>2]=0,i1(i,X2[A+4>>2],e),X2[f+52>>2]=0,X2[f+48>>2]=e,e=84+((X2[A+104>>2]<<2)+A|0)|0,X2[f+56>>2]=X2[e>>2],X2[(r=A+16|0)>>2]=X2[r>>2]+1,(r=X2[e>>2])&&(X2[r+52>>2]=f),X2[e>>2]=f,J2[A+153|0]||(X2[b+8>>2]=f,X2[b>>2]=19536,X2[b+4>>2]=A,l4(X2[A+4>>2],b+16|0,b),l4(X2[A+44>>2],b+16|0,b)),K2=b+48|0,0|f;},function(A,e,r){A|=0,r|=0;var f,i,a=0;f1(a=2==X2[(e|=0)+60>>2]?A+44|0:A+4|0,i=X2[e+48>>2]),(f=X2[a+4>>2])&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[a+4>>2]=i,X2[a+12>>2]=X2[a+12>>2]-1,(a=X2[e+52>>2])?X2[(a+56|0)>>2]=X2[(a=e+56|0)>>2]:X2[84+((X2[e+60>>2]<<2)+A|0)>>2]=X2[(a=e+56|0)>>2],(a=X2[a>>2])&&(X2[a+52>>2]=X2[e+52>>2]),a=X2[A+96>>2],N2[X2[X2[a>>2]+16>>2]](a,e,r),X2[6259]=X2[6259]+1,q2(X2[e-4>>2]),S2[A+154|0]=1;},function(A,e,r,f,i){A|=0,e|=0,r|=0,f|=0,i|=0;var a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h=0,F=0,Y=(P2(0),0),m=(P2(0),P2(0),0),N=P2(0);if(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=C=K2-48|0,N=U2[r>>2],U2[44+C>>2]=N,t=U2[r+4>>2],U2[40+C>>2]=t,o=U2[r+8>>2],U2[36+C>>2]=o,c=U2[f>>2],U2[32+C>>2]=c,k=U2[f+4>>2],U2[28+C>>2]=k,u=U2[f+8>>2],U2[24+C>>2]=u,s=U2[f+12>>2],l=U2[r+12>>2],2==X2[e+60>>2])f1(A+44|0,h=X2[e+48>>2]),(i=X2[A+48>>2])&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+48>>2]=h,X2[(i=A+56|0)>>2]=X2[i>>2]-1,Y=A+4|0,(i=X2[A+8>>2])?X2[A+8>>2]=0:(X2[6258]=X2[6258]+1,i=0,(h=L2(63))&&(X2[(i=h+19&-16)-4>>2]=h,N=U2[44+C>>2]),X2[i>>2]=0,X2[i+4>>2]=0,X2[i+40>>2]=0,X2[(h=i+32|0)>>2]=0,X2[h+4>>2]=0,X2[(h=i+24|0)>>2]=0,X2[h+4>>2]=0,X2[(h=i+16|0)>>2]=0,X2[h+4>>2]=0,X2[(h=i+8|0)>>2]=0,X2[h+4>>2]=0),U2[i>>2]=N,X2[i+36>>2]=e,U2[i+12>>2]=l,X2[i+40>>2]=0,U2[i+28>>2]=s,U2[i+4>>2]=U2[40+C>>2],U2[i+8>>2]=U2[36+C>>2],U2[i+16>>2]=U2[32+C>>2],U2[i+20>>2]=U2[28+C>>2],U2[i+24>>2]=U2[24+C>>2],X2[i+32>>2]=0,i1(Y,X2[A+4>>2],i),X2[e+48>>2]=i,X2[(i=A+16|0)>>2]=X2[i>>2]+1,h=1;else if(X2[A+128>>2]=X2[A+128>>2]+1,F=X2[e+48>>2],(v=U2[F>>2])<=c&&N<=(d=U2[F+16>>2])&&(Z=U2[F+4>>2])<=k&&t<=(_=U2[F+20>>2])&&(n=U2[F+8>>2])<=u&&o<=(b=U2[F+24>>2])){if(g=U2[e+16>>2],w=U2[e+32>>2],B=U2[A+100>>2],E=U2[e+24>>2],G=U2[e+40>>2],Q=U2[e+20>>2],a=U2[e+36>>2],!(v<=N&&Z<=t&&n<=o&&c<=d&&k<=_&&(h=0,u<=b))){n=P2(k+P2(.05000000074505806)),U2[28+C>>2]=n,b=P2(t+P2(-.05000000074505806)),U2[40+C>>2]=b,a=P2(P2(P2(a-Q)*P2(.5))*B),i=(a=P2(t-Q)<P2(0)?P2(-a):a)>P2(0),U2[(i?28+C|0:40+C|0)>>2]=(i?n:b)+a,n=P2(o+P2(-.05000000074505806)),U2[36+C>>2]=n,b=P2(u+P2(.05000000074505806)),U2[24+C>>2]=b,a=P2(B*P2(P2(G-E)*P2(.5))),i=(a=P2(o-E)<P2(0)?P2(-a):a)>P2(0),U2[(i?24+C|0:36+C|0)>>2]=(i?b:n)+a,n=P2(c+P2(.05000000074505806)),U2[32+C>>2]=n,b=P2(N+P2(-.05000000074505806)),U2[44+C>>2]=b,a=P2(P2(P2(w-g)*P2(.5))*B),i=(a=P2(N-g)<P2(0)?P2(-a):a)>P2(0),U2[(i?32+C|0:44+C|0)>>2]=(i?n:b)+a;A:if(i=f1(Y=A+4|0,F)){if(0<=(0|(m=X2[A+12>>2]))){if(m)for(;;){if(!(h=X2[i+32>>2]))break A;if(i=h,!(m=m-1|0))break;}}else i=X2[Y>>2];}else i=0;U2[F>>2]=U2[44+C>>2],U2[F+4>>2]=U2[40+C>>2],U2[F+12>>2]=l,U2[F+8>>2]=U2[36+C>>2],U2[F+16>>2]=U2[32+C>>2],U2[F+20>>2]=U2[28+C>>2],U2[F+24>>2]=U2[24+C>>2],U2[F+28>>2]=s,i1(Y,i,F),X2[A+132>>2]=X2[A+132>>2]+1,h=1;}}else {A:if(i=f1(Y=A+4|0,F)){if(0<=(0|(m=X2[A+12>>2]))){if(m)for(;;){if(!(h=X2[i+32>>2]))break A;if(i=h,!(m=m-1|0))break;}}else i=X2[Y>>2];}else i=0;U2[F+16>>2]=c,U2[F+12>>2]=l,U2[F+8>>2]=o,U2[F+4>>2]=t,U2[F>>2]=N,U2[F+28>>2]=s,U2[F+24>>2]=u,U2[F+20>>2]=k,i1(Y,i,F),X2[A+132>>2]=X2[A+132>>2]+1,h=1;}(i=X2[e+52>>2])?X2[(F=i+56|0)>>2]=X2[(i=e+56|0)>>2]:X2[84+((X2[e+60>>2]<<2)+A|0)>>2]=X2[(i=e+56|0)>>2],(i=X2[i>>2])&&(X2[i+52>>2]=X2[e+52>>2]),i=X2[r+4>>2],X2[e+16>>2]=X2[r>>2],X2[e+20>>2]=i,r=X2[(i=r+8|0)+4>>2],X2[(Y=e+24|0)>>2]=X2[i>>2],X2[Y+4>>2]=r,r=X2[(i=f+8|0)+4>>2],X2[(Y=e+40|0)>>2]=X2[i>>2],X2[Y+4>>2]=r,r=X2[f+4>>2],X2[e+32>>2]=X2[f>>2],X2[e+36>>2]=r,X2[e+52>>2]=0,r=X2[A+104>>2],X2[e+56>>2]=X2[(f=84+((r<<2)+A|0)|0)>>2],X2[e+60>>2]=r,(r=X2[f>>2])&&(X2[r+52>>2]=e),X2[f>>2]=e,h&&(S2[A+154|0]=1,J2[A+153|0]||(X2[8+C>>2]=19536,B4(r=(X2[12+C>>2]=A)+44|0,X2[r>>2],X2[e+48>>2],8+C|0),B4(A+4|0,X2[A+4>>2],X2[e+48>>2],8+C|0))),K2=48+C|0;},function(A,e,r,f){var i;A|=0,f|=0,A=X2[(e|=0)+20>>2],X2[(r|=0)>>2]=X2[e+16>>2],X2[r+4>>2]=A,A=r+8|0,i=X2[(r=e+24|0)+4>>2],X2[A>>2]=X2[r>>2],X2[A+4>>2]=i,i=X2[(r=e+40|0)+4>>2],X2[(A=f+8|0)>>2]=X2[r>>2],X2[A+4>>2]=i,A=X2[e+36>>2],X2[f>>2]=X2[e+32>>2],X2[f+4>>2]=A;},function(A,e,r,f,i,a){var n,b,t;A|=0,e|=0,r|=0,f|=0,i|=0,a|=0,X2[(K2=r=K2-16|0)+8>>2]=19680,X2[r+12>>2]=f,t=X2[A+168>>2],v4(X2[A+4>>2],e,n=f+4|0,b=f+20|0,U2[f+32>>2],i,a,t,r+8|0),v4(X2[A+44>>2],e,n,b,U2[f+32>>2],i,a,t,r+8|0),K2=r+16|0;},function(A,e,r,f){var i,a,n;A|=0,e|=0,r|=0,X2[44+(K2=n=K2-48|0)>>2]=f|=0,X2[40+n>>2]=19608,a=X2[4+(i=e+8|0)>>2],X2[(f=16+n|0)>>2]=X2[i>>2],X2[f+4>>2]=a,a=X2[4+(i=r+8|0)>>2],X2[(f=32+n|0)>>2]=X2[i>>2],X2[f+4>>2]=a,f=X2[e+4>>2],X2[8+n>>2]=X2[e>>2],X2[12+n>>2]=f,e=X2[r+4>>2],X2[24+n>>2]=X2[r>>2],X2[28+n>>2]=e,l4(X2[A+4>>2],8+n|0,40+n|0),l4(X2[A+44>>2],8+n|0,40+n|0),K2=48+n|0;},function(A,e){A|=0,e|=0;var r,f=0,i=0,a=0,n=0,b=0,t=0,o=0,c=0,k=0,u=0,s=P2(0),l=0;if(K2=r=K2-32|0,r1(b=A+4|0,1+((0|H2(X2[A+112>>2],X2[A+16>>2]))/100|0)|0),X2[A+124>>2]&&(r1(A+44|0,f=1+((0|H2(X2[A+108>>2],X2[A+56>>2]))/100|0)|0),f=X2[A+124>>2]-f|0,X2[A+124>>2]=0<(0|f)?f:0),f=(X2[A+104>>2]+1|0)%2|0,X2[A+104>>2]=f,f=X2[84+((f<<2)+A|0)>>2]){for(c=A+44|0,t=16+r|0;;)if(o=X2[f+56>>2],n=(i=X2[f+52>>2])?i+56|0:84+((X2[f+60>>2]<<2)+A|0)|0,X2[n>>2]=o,(i=X2[f+56>>2])&&(X2[i+52>>2]=X2[f+52>>2]),X2[f+52>>2]=0,X2[f+56>>2]=X2[A+92>>2],(i=X2[A+92>>2])&&(X2[i+52>>2]=f),X2[A+92>>2]=f,f1(b,i=X2[f+48>>2]),(n=X2[A+8>>2])&&(X2[6259]=X2[6259]+1,q2(X2[n-4>>2])),X2[A+8>>2]=i,X2[A+16>>2]=X2[A+16>>2]-1,k=X2[(a=f+24|0)+4>>2],X2[(i=n=8+r|0)>>2]=X2[a>>2],X2[i+4>>2]=k,i=X2[f+36>>2],X2[t>>2]=X2[f+32>>2],X2[t+4>>2]=i,k=X2[(a=f+40|0)+4>>2],X2[(i=t+8|0)>>2]=X2[a>>2],X2[i+4>>2]=k,i=X2[f+20>>2],X2[r>>2]=X2[f+16>>2],X2[4+r>>2]=i,(i=X2[A+48>>2])?X2[A+48>>2]=0:(i=0,X2[6258]=X2[6258]+1,(a=L2(63))&&(X2[(i=a+19&-16)-4>>2]=a),X2[i>>2]=0,X2[i+4>>2]=0,X2[i+40>>2]=0,X2[(a=i+32|0)>>2]=0,X2[a+4>>2]=0,X2[(a=i+24|0)>>2]=0,X2[a+4>>2]=0,X2[(a=i+16|0)>>2]=0,X2[a+4>>2]=0,X2[(a=i+8|0)>>2]=0,X2[a+4>>2]=0),X2[i+36>>2]=f,a=X2[4+r>>2],X2[i>>2]=X2[r>>2],X2[i+4>>2]=a,X2[i+40>>2]=0,k=X2[n+4>>2],X2[(a=i+8|0)>>2]=X2[n>>2],X2[a+4>>2]=k,a=X2[t+4>>2],X2[(n=i+16|0)>>2]=X2[t>>2],X2[n+4>>2]=a,k=X2[(a=24+r|0)+4>>2],X2[(n=i+24|0)>>2]=X2[a>>2],X2[n+4>>2]=k,X2[i+32>>2]=0,i1(c,X2[A+44>>2],i),X2[f+60>>2]=2,X2[f+48>>2]=i,i=X2[A+56>>2]+1|0,X2[A+56>>2]=i,!(f=o))break;S2[A+154|0]=1,X2[A+124>>2]=i;}X2[r>>2]=19536,X2[4+r>>2]=A,J2[A+153|0]&&(B4(b,X2[A+4>>2],X2[A+44>>2],r),J2[A+153|0]&&B4(b,f=X2[b>>2],f,r));A:if(J2[A+154|0]&&(f=X2[A+96>>2],n=0|N2[X2[X2[f>>2]+28>>2]](f),!((0|(o=X2[n+4>>2]))<1))){e:{if(f=X2[A+120>>2],1<=(0|(i=(0|o)<(0|(f=(0|(i=(0|H2(X2[A+116>>2],o))/100|0))<(0|f)?f:i))?o:f))){for(f=0;;)if(b=X2[n+12>>2]+((X2[A+144>>2]+f|0)%(0|o)<<4)|0,a=X2[b>>2],t=X2[a+48>>2],c=X2[b+4>>2],b=X2[c+48>>2],U2[t>>2]<=U2[b+16>>2]&&U2[t+16>>2]>=U2[b>>2]&&U2[t+4>>2]<=U2[b+20>>2]&&U2[t+20>>2]>=U2[b+4>>2]&&U2[t+8>>2]<=U2[b+24>>2]&&U2[t+24>>2]>=U2[b+8>>2]||(o=X2[A+96>>2],N2[X2[X2[o>>2]+12>>2]](o,a,c,e),f=f-1|0,i=i-1|0,o=X2[n+4>>2]),!((0|(f=f+1|0))<(0|i)))break;if((0|o)<=0)break e;}X2[A+144>>2]=(X2[A+144>>2]+i|0)%(0|o);break A;}X2[A+144>>2]=0;}if(S2[A+154|0]=0,X2[A+120>>2]=1,X2[A+140>>2]=X2[A+140>>2]+1,f=X2[A+132>>2],A=X2[(n=A)+128>>2],s=P2(0),A&&(s=P2(P2(f>>>0)/P2(A>>>0))),U2[n+136>>2]=s,X2[n+132>>2]=f>>>1,X2[n+128>>2]=A>>>1,A=X2[n+96>>2],0|N2[X2[X2[A>>2]+56>>2]](A)){if(A=X2[n+96>>2],a=0|N2[X2[X2[A>>2]+28>>2]](A),2<=(0|(A=X2[a+4>>2]))&&(u4(a,0,A-1|0),A=X2[a+4>>2]),1<=(0|A)){for(b=t=o=i=0;;)if(k=X2[a+12>>2]+i|0,f=X2[(u=k+4|0)>>2],c=t,t=X2[k>>2],((0|f)!=(0|b)||(0|c)!=(0|t))&&(b=X2[t+48>>2],c=X2[f+48>>2],U2[b>>2]<=U2[c+16>>2]&&U2[b+16>>2]>=U2[c>>2]&&U2[b+4>>2]<=U2[c+20>>2]&&U2[b+20>>2]>=U2[c+4>>2]&&U2[b+8>>2]<=U2[c+24>>2]&&U2[b+24>>2]>=U2[c+8>>2])||(A=X2[n+96>>2],N2[X2[X2[A>>2]+32>>2]](A,k,e),X2[u>>2]=0,o=o+1|(X2[k>>2]=0),A=X2[a+4>>2]),i=i+16|0,b=f,!((0|(l=l+1|0))<(0|A)))break;if(2<=(0|A)&&(u4(a,0,A-1|0),A=X2[a+4>>2]),t=A-o|0,(0|o)<=-1){if((0|t)>X2[a+8>>2]){if(e=0,t&&(X2[6258]=X2[6258]+1,(f=L2(19+(t<<4)|0))&&(X2[(e=f+19&-16)-4>>2]=f)),1<=(0|A))for(f=12,i=A;;)if(n=X2[a+12>>2]+f|0,X2[(b=e+f|0)-12>>2]=X2[n-12>>2],u=X2[(k=n-8|0)+4>>2],X2[(c=b-8|0)>>2]=X2[k>>2],X2[c+4>>2]=u,X2[b>>2]=X2[n>>2],f=f+16|0,!(i=i-1|0))break;(f=X2[a+12>>2])&&J2[a+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[a+12>>2]=e,S2[a+16|0]=1,X2[a+8>>2]=t;}for(f=A<<4;;)if(A=X2[a+12>>2]+f|0,X2[A>>2]=0,X2[A+4>>2]=0,X2[(A=A+8|0)>>2]=0,f=f+16|(X2[A+4>>2]=0),!((A=o)>>>0<=(o=A+1|0)>>>0))break;}A=t;}X2[a+4>>2]=A;}K2=32+r|0;},d4,d4,function(A,e,r){A|=0,e|=0,r|=0;var f=P2(0),i=P2(0),a=P2(0),n=P2(0),b=P2(0),t=P2(0),o=P2(0),c=P2(0),k=X2[A+44>>2];(A=X2[A+4>>2])?(o=U2[A>>2],k?(f=U2[A+24>>2],i=(i=U2[k+24>>2])<f?f:i,f=U2[A+20>>2],a=(a=U2[k+20>>2])<f?f:a,n=(f=U2[A+8>>2])<(n=U2[k+8>>2])?f:n,b=(f=U2[A+4>>2])<(b=U2[k+4>>2])?f:b,f=U2[A+16>>2],t=(t=U2[k+16>>2])<f?f:t,o=o<(f=U2[k>>2])?o:f):(c=U2[A+28>>2],i=U2[A+24>>2],a=U2[A+20>>2],t=U2[A+16>>2],f=U2[A+12>>2],n=U2[A+8>>2],b=U2[A+4>>2])):k&&(c=U2[k+28>>2],i=U2[k+24>>2],a=U2[k+20>>2],t=U2[k+16>>2],f=U2[k+12>>2],n=U2[k+8>>2],b=U2[k+4>>2],o=U2[k>>2]),U2[e+12>>2]=f,U2[e+8>>2]=n,U2[e+4>>2]=b,U2[e>>2]=o,U2[r+12>>2]=c,U2[r+8>>2]=i,U2[r+4>>2]=a,U2[r>>2]=t;},function(A,e){e|=0,X2[(A|=0)+16>>2]==(0-X2[A+56>>2]|0)&&(e1(A+4|0),e1(A+44|0),S2[A+153|0]=0,S2[A+154|0]=1,X2[A+124>>2]=0,X2[A+104>>2]=0,X2[A+116>>2]=10,X2[A+120>>2]=1,X2[A+108>>2]=1,X2[A+112>>2]=0,X2[(e=A+84|0)>>2]=0,X2[e+4>>2]=0,X2[A+92>>2]=0,X2[A+128>>2]=0,X2[A+132>>2]=0,X2[(e=A+136|0)>>2]=0,X2[e+4>>2]=0,X2[(A=A+144|0)>>2]=0,X2[A+4>>2]=0);},Z4,A,function(A,e,r){var f;A|=0,(0|(e|=0))!=(0|(r|=0))&&(f=X2[X2[A+4>>2]+96>>2],N2[X2[X2[f>>2]+8>>2]](f,X2[e+36>>2],X2[r+36>>2]),A=X2[A+4>>2],X2[A+120>>2]=X2[A+120>>2]+1);},function(A,e){N2[X2[X2[(A|=0)>>2]+8>>2]](A,e|=0,X2[X2[A+8>>2]+48>>2]);},A,_4,A,_4,function(A){var e;return X2[(A|=0)>>2]=19804,(e=X2[A+556>>2])&&J2[A+560|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+556>>2]=0,X2[A>>2]=10112,S2[A+560|0]=1,X2[(e=A+548|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+296>>2])&&J2[A+300|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+296>>2]=0,S2[A+300|0]=1,X2[(e=A+288|0)>>2]=0,(X2[4+e>>2]=0)|A;},function(A){var e;X2[(A|=0)>>2]=19804,(e=X2[A+556>>2])&&J2[A+560|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+556>>2]=0,X2[A>>2]=10112,S2[A+560|0]=1,X2[(e=A+548|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+296>>2])&&J2[A+300|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+296>>2]=0,S2[A+300|0]=1,X2[(e=A+288|0)>>2]=0,X2[4+e>>2]=0,X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A){return 496;},function(A,e,r){return _0(A|=0,e|=0,r|=0),U2[e+264>>2]=U2[A+324>>2],U2[e+268>>2]=U2[A+328>>2],U2[e+272>>2]=U2[A+332>>2],U2[e+276>>2]=U2[A+336>>2],U2[e+280>>2]=U2[A+340>>2],U2[e+284>>2]=U2[A+344>>2],U2[e+288>>2]=U2[A+348>>2],U2[e+292>>2]=U2[A+352>>2],U2[e+296>>2]=U2[A+356>>2],U2[e+300>>2]=U2[A+360>>2],U2[e+304>>2]=U2[A+364>>2],U2[e+308>>2]=U2[A+368>>2],U2[e+312>>2]=U2[A+372>>2],U2[e+316>>2]=U2[A+376>>2],U2[e+320>>2]=U2[A+380>>2],U2[e+324>>2]=U2[A+384>>2],U2[e+328>>2]=U2[A+388>>2],U2[e+332>>2]=U2[A+392>>2],U2[e+336>>2]=U2[A+396>>2],U2[e+340>>2]=U2[A+400>>2],U2[e+456>>2]=U2[A+404>>2],U2[e+344>>2]=U2[A+604>>2],U2[e+348>>2]=U2[A+608>>2],U2[e+352>>2]=U2[A+612>>2],U2[e+356>>2]=U2[A+616>>2],U2[e+360>>2]=U2[A+408>>2],U2[e+364>>2]=U2[A+412>>2],U2[e+368>>2]=U2[A+416>>2],U2[e+372>>2]=U2[A+420>>2],U2[e+376>>2]=U2[A+424>>2],U2[e+380>>2]=U2[A+428>>2],U2[e+384>>2]=U2[A+432>>2],U2[e+388>>2]=U2[A+436>>2],U2[e+392>>2]=U2[A+440>>2],U2[e+396>>2]=U2[A+444>>2],U2[e+400>>2]=U2[A+448>>2],U2[e+404>>2]=U2[A+452>>2],U2[e+408>>2]=U2[A+456>>2],U2[e+412>>2]=U2[A+460>>2],U2[e+416>>2]=U2[A+464>>2],U2[e+420>>2]=U2[A+468>>2],U2[e+424>>2]=U2[A+472>>2],U2[e+428>>2]=U2[A+476>>2],U2[e+432>>2]=U2[A+480>>2],U2[e+436>>2]=U2[A+484>>2],U2[e+440>>2]=U2[A+488>>2],U2[e+444>>2]=U2[A+492>>2],U2[e+448>>2]=U2[A+496>>2],U2[e+452>>2]=U2[A+500>>2],r=X2[A+508>>2],X2[e+460>>2]=X2[A+504>>2],X2[e+464>>2]=r,r=X2[A+520>>2],X2[e+468>>2]=X2[A+516>>2],X2[e+472>>2]=r,r=X2[A+528>>2],X2[e+476>>2]=X2[A+524>>2],X2[e+480>>2]=r,r=X2[A+536>>2],X2[e+484>>2]=X2[A+532>>2],X2[e+488>>2]=r,X2[e+492>>2]=J2[A+512|0],19844;},function(A,e){var r,f=0,i=0,i=e|=0,a=0|N2[X2[X2[(A|=0)>>2]+16>>2]](A),n=X2[X2[e>>2]+16>>2],f=0|N2[n](0|i,0|a,1);r=e,i=0|N2[X2[X2[A>>2]+20>>2]](A,X2[8+(a=f)>>2],e),f=A,n=X2[X2[e>>2]+20>>2],N2[n](0|r,0|a,0|i,1497645650,0|f);},h4,function(A){A=h4(A|=0),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},f,function(A,e,r,f,i,a,n,b,t,o){return P2(N2[X2[X2[(A|=0)>>2]+44>>2]](A,e|=0,r|=0,f|=0,i|=0,a|=0,n|=0,b|=0,t|=0)),P2(N2[X2[X2[A>>2]+48>>2]](A,e,r,f,i,a,n,b,t)),P2(N2[X2[X2[A>>2]+36>>2]](A,e,r,b)),P2(P2(0));},f,function(A){X2[(A|=0)+232>>2]=0;},U1,function(A,x,y,e){A|=0,x|=0,y|=0,e|=0;var r,f,i,a,n,b,t,V,p,M,S,X,J,U,H,P,j,z,O,K,L,q,$,A2,e2,r2,f2,i2,a2,n2,b2,t2,o2,c2,k2,u2,s2,l2,B2,v2,d2,Z2,_2,g2,E2,Q2,w2,G2,C2,o,c=P2(0),k=0,u=P2(0),s=P2(0),l=P2(0),B=P2(0),v=P2(0),d=0,Z=P2(0),_=P2(0),g=0,E=P2(0),Q=P2(0),w=P2(0),G=P2(0),C=P2(0),h=0,F=P2(0),Y=P2(0),m=P2(0),N=0,R=0,D=P2(0),T=P2(0),h2=0,W=P2(0),I=0,F2=0,Y2=P2(0),m2=P2(0),N2=P2(0),R2=(P2(0),P2(0),P2(0)),D2=P2(0),T2=P2(0),W2=P2(0),I2=0,x2=0,y2=(P2(0),P2(0),P2(0),P2(0)),V2=P2(0),p2=P2(0),M2=P2(0);if(K2=o=K2+-64|0,1<=(0|y))for(;;){if(P=X2[(x2<<2)+x>>2],r=X2[P+840>>2],M=F4(A,f=X2[P+836>>2],U2[e+12>>2]),p=F4(A,r,U2[e+12>>2]),O=H2(M,244),R=X2[A+16>>2],c=U2[(g=O+R|0)+128>>2],s=P2(c*c),c=U2[g+132>>2],s=P2(s+P2(c*c)),c=U2[g+136>>2],!(P2(s+P2(c*c))<P2(14210854715202004e-30)&&(k=R+H2(p,244)|0,c=U2[k+128>>2],s=P2(c*c),c=U2[k+132>>2],s=P2(s+P2(c*c)),c=U2[k+136>>2],P2(s+P2(c*c))<P2(14210854715202004e-30))||(0|(d=X2[P+844>>2]))<1))for(A2=(k=R+(K=H2(p,244))|0)+232|0,e2=k+200|0,r2=k+228|0,f2=k+196|0,i2=k+224|0,a2=k+192|0,n2=k+216|0,b2=k+184|0,t2=k+212|0,o2=k+180|0,c2=k+208|0,k2=k+176|0,u2=k+240|0,s2=g+232|0,l2=g+200|0,B2=g+228|0,v2=g+196|0,d2=g+224|0,Z2=g+192|0,_2=g+216|0,g2=g+184|0,E2=g+212|0,Q2=g+180|0,w2=g+208|0,G2=g+176|0,C2=g+240|0,I2=0;;){if(i=H2(I2,208)+P|0,U2[(j=84+i|0)>>2]<=U2[P+852>>2]){if(H=4+i|0,(0|(d=R=X2[A+28>>2]))==X2[A+32>>2]&&!((0|(h2=(d=R)?d<<1:1))<=(0|d))){if(g=0,h2&&(X2[6258]=X2[6258]+1,(k=L2(H2(h2,152)+19|0))&&(X2[(g=k+19&-16)-4>>2]=k)),1<=(0|R))for(d=0,k=R;;)if($2(d+g|0,X2[A+36>>2]+d|0,152),d=d+152|0,!(k=k-1|0))break;(k=X2[A+36>>2])&&J2[A+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[k-4>>2])),X2[A+36>>2]=g,S2[A+40|0]=1,X2[A+32>>2]=h2,d=X2[A+28>>2];}X2[A+28>>2]=d+1,k=X2[A+36>>2]+H2(R,152)|0,X2[k+132>>2]=H,X2[k+148>>2]=p,X2[k+144>>2]=M,X2[60+o>>2]=0,X=P2(U2[60+i>>2]-U2[f+60>>2]),U2[56+o>>2]=X,J=P2(U2[56+i>>2]-U2[f+56>>2]),U2[52+o>>2]=J,Z=P2(U2[52+i>>2]-U2[f+52>>2]),U2[48+o>>2]=Z,B=U2[36+i>>2],s=U2[40+i>>2],l=U2[44+i>>2],u=U2[r+52>>2],W=U2[r+56>>2],c=U2[r+60>>2],X2[44+o>>2]=0,D=P2(l-c),U2[40+o>>2]=D,G=P2(s-W),U2[36+o>>2]=G,T=P2(B-u),U2[32+o>>2]=T,V2=P2(0),p2=P2(0),M2=P2(0),R2=P2(0),X2[C2>>2]&&(u=P2(U2[Z2>>2]+U2[d2>>2]),W=P2(U2[v2>>2]+U2[B2>>2]),R2=P2(P2(U2[g2>>2]+U2[_2>>2])+P2(P2(J*u)-P2(Z*W))),c=P2(U2[l2>>2]+U2[s2>>2]),M2=P2(P2(U2[Q2>>2]+U2[E2>>2])+P2(P2(Z*c)-P2(X*u))),p2=P2(P2(U2[G2>>2]+U2[w2>>2])+P2(P2(X*W)-P2(J*c)))),D2=P2(0),T2=P2(0),X2[u2>>2]&&(u=P2(U2[a2>>2]+U2[i2>>2]),W=P2(U2[f2>>2]+U2[r2>>2]),T2=P2(P2(U2[b2>>2]+U2[n2>>2])+P2(P2(G*u)-P2(T*W))),c=P2(U2[e2>>2]+U2[A2>>2]),D2=P2(P2(U2[o2>>2]+U2[t2>>2])+P2(P2(T*c)-P2(D*u))),V2=P2(P2(U2[k2>>2]+U2[c2>>2])+P2(P2(D*W)-P2(G*c)))),L=U2[(S=72+i|0)>>2],q=U2[(V=68+i|0)>>2],$=U2[(U=76+i|0)>>2],l=U2[e+12>>2],d=X2[A+16>>2],b=X2[240+(a=d+K|0)>>2],t=X2[240+(n=d+O|0)>>2],y2=U2[e+36>>2],W2=U2[e+40>>2],W=U2[e+28>>2],6&(d=X2[(z=132+i|0)>>2])?(W2=2&d?U2[156+i>>2]:W2,4&d&&(y2=U2[160+i>>2])):8&d&&(c=P2(l*U2[156+i>>2]),u=P2(z2(P2(c+U2[160+i>>2]),P2(1.1920928955078125e-7))),y2=P2(c/u),W2=P2(P2(1)/u)),C=P2(P2(L*Z)-P2(J*q)),m=P2(P2(X*q)-P2($*Z)),Q=P2(P2(J*$)-P2(X*L)),_=P2(0),w=P2(0),Y2=P2(0),m2=P2(0),t&&(m2=P2(P2(P2(P2(Q*U2[t+356>>2])+P2(m*U2[t+360>>2]))+P2(C*U2[t+364>>2]))*U2[t+612>>2]),Y2=P2(P2(P2(P2(Q*U2[t+340>>2])+P2(m*U2[t+344>>2]))+P2(C*U2[t+348>>2]))*U2[t+608>>2]),w=P2(P2(P2(P2(Q*U2[t+324>>2])+P2(m*U2[t+328>>2]))+P2(C*U2[t+332>>2]))*U2[t+604>>2])),U2[k+64>>2]=w,X2[k+76>>2]=0,U2[(h=k+72|0)>>2]=m2,U2[(N=k+68|0)>>2]=Y2,u=U2[S>>2],c=U2[V>>2],E=P2(P2(u*T)-P2(G*c)),s=P2(D*c),c=U2[U>>2],s=P2(s-P2(c*T)),B=P2(P2(G*c)-P2(D*u)),N2=P2(0),v=P2(0),b&&(c=P2(-s),v=P2(P2(P2(P2(U2[b+360>>2]*c)-P2(B*U2[b+356>>2]))-P2(E*U2[b+364>>2]))*U2[b+612>>2]),_=P2(P2(P2(P2(U2[b+328>>2]*c)-P2(B*U2[b+324>>2]))-P2(E*U2[b+332>>2]))*U2[b+604>>2]),N2=P2(P2(P2(P2(U2[b+344>>2]*c)-P2(B*U2[b+340>>2]))-P2(E*U2[b+348>>2]))*U2[b+608>>2])),U2[k+80>>2]=_,X2[k+92>>2]=0,U2[(I=k+88|0)>>2]=v,U2[(F2=k+84|0)>>2]=N2,d=k,u=W,Y=P2(P2(1)/l),l=F=P2(Y*W2),c=P2(t?U2[t+404>>2]+P2(P2(P2(P2(P2(Y2*X)-P2(m2*J))*U2[V>>2])+P2(P2(P2(m2*Z)-P2(X*w))*U2[S>>2]))+P2(P2(P2(J*w)-P2(Y2*Z))*U2[U>>2])):0),v=P2(b?U2[b+404>>2]+P2(P2(P2(P2(P2(v*G)-P2(N2*D))*U2[V>>2])+P2(P2(P2(_*D)-P2(v*T))*U2[S>>2]))+P2(P2(P2(N2*T)-P2(_*G))*U2[U>>2])):0),U2[d+108>>2]=u/P2(l+P2(c+v)),t?(d=X2[4+V>>2],X2[k+16>>2]=X2[V>>2],X2[k+20>>2]=d,h2=X2[(d=8+V|0)+4>>2],g=X2[d>>2],U2[k>>2]=Q,X2[k+12>>2]=0,U2[k+8>>2]=C,U2[k+4>>2]=m,X2[(d=k+24|0)>>2]=g,X2[d+4>>2]=h2):(X2[k>>2]=0,X2[k+4>>2]=0,X2[(d=k+24|0)>>2]=0,X2[d+4>>2]=0,X2[(d=k+16|0)>>2]=0,X2[d+4>>2]=0,X2[(d=k+8|0)>>2]=0,X2[d+4>>2]=0),b?(u=U2[S>>2],c=U2[U>>2],U2[k+48>>2]=-U2[V>>2],U2[k+32>>2]=-B,X2[k+60>>2]=0,U2[k+56>>2]=-c,U2[k+52>>2]=-u,X2[k+44>>2]=0,U2[k+40>>2]=-E,U2[k+36>>2]=-s):(X2[k+32>>2]=0,X2[k+36>>2]=0,X2[(d=k+56|0)>>2]=0,X2[d+4>>2]=0,X2[(d=k+48|0)>>2]=0,X2[d+4>>2]=0,X2[(d=k+40|0)>>2]=0,X2[d+4>>2]=0),m=U2[e+64>>2],Q=U2[j>>2],_=P2(0),Y2=P2(0),m2=P2(0),N2=P2(0),t&&(l=U2[t+388>>2],u=U2[t+392>>2],N2=P2(P2(P2(J*l)-P2(u*Z))+U2[t+380>>2]),c=U2[t+396>>2],m2=P2(P2(P2(c*Z)-P2(X*l))+U2[t+376>>2]),Y2=P2(P2(P2(u*X)-P2(c*J))+U2[t+372>>2])),v=P2(0),Z=P2(0),b&&(l=U2[b+388>>2],u=U2[b+392>>2],Z=P2(P2(P2(G*l)-P2(u*T))+U2[b+380>>2]),c=U2[b+396>>2],v=P2(P2(P2(c*T)-P2(D*l))+U2[b+376>>2]),_=P2(P2(P2(u*D)-P2(c*G))+U2[b+372>>2])),j=240+a|0,h2=240+n|0,l=U2[U>>2],u=U2[V>>2],c=U2[S>>2],U2[k+104>>2]=U2[88+i>>2],c=P2(P2(P2(u*P2(Y2-_))+P2(c*P2(m2-v)))+P2(l*P2(N2-Z))),C=U2[e+96>>2]>P2(j2(c))?P2(0):P2(U2[100+i>>2]*P2(-c)),4&(d=X2[e+72>>2])?(B=P2(U2[136+i>>2]*U2[e+68>>2]),U2[k+100>>2]=B,t&&X2[h2>>2]&&(s=U2[t+416>>2],l=U2[k+24>>2],u=U2[t+412>>2],c=U2[k+20>>2],U2[64+n>>2]=P2(U2[112+n>>2]*P2(B*P2(P2(U2[k+16>>2]*U2[128+n>>2])*U2[t+408>>2])))+U2[64+n>>2],U2[(g=68+n|0)>>2]=P2(P2(B*P2(u*P2(c*U2[132+n>>2])))*U2[116+n>>2])+U2[g>>2],U2[(g=72+n|0)>>2]=P2(P2(B*P2(s*P2(l*U2[136+n>>2])))*U2[120+n>>2])+U2[g>>2],l=U2[h>>2],u=U2[N>>2],U2[80+n>>2]=P2(P2(B*U2[96+n>>2])*U2[k- -64>>2])+U2[80+n>>2],c=U2[104+n>>2],U2[(g=84+n|0)>>2]=P2(u*P2(B*U2[100+n>>2]))+U2[g>>2],U2[(g=88+n|0)>>2]=P2(l*P2(B*c))+U2[g>>2]),b&&X2[j>>2]&&(w=U2[b+416>>2],E=U2[k+56>>2],B=U2[b+412>>2],s=U2[k+52>>2],l=U2[I>>2],u=U2[F2>>2],c=U2[k+80>>2],v=P2(-U2[k+100>>2]),U2[64+a>>2]=U2[64+a>>2]-P2(U2[112+a>>2]*P2(P2(P2(U2[128+a>>2]*U2[k+48>>2])*U2[b+408>>2])*v)),U2[(g=68+a|0)>>2]=U2[g>>2]-P2(P2(P2(B*P2(s*U2[132+a>>2]))*v)*U2[116+a>>2]),U2[(g=72+a|0)>>2]=U2[g>>2]-P2(P2(P2(w*P2(E*U2[136+a>>2]))*v)*U2[120+a>>2]),U2[80+a>>2]=U2[80+a>>2]-P2(c*P2(U2[96+a>>2]*v)),c=U2[104+a>>2],U2[(g=84+a|0)>>2]=U2[g>>2]-P2(u*P2(U2[100+a>>2]*v)),U2[(g=88+a|0)>>2]=U2[g>>2]-P2(l*P2(c*v)))):X2[k+100>>2]=0,X2[k+96>>2]=0,D=P2(0),G=P2(0),_=P2(0),Y2=P2(0),m2=P2(0),Z=P2(0),N2=P2(0),v=P2(0),W2=P2(0),s=P2(0),g=k+108|0,l=C<=P2(0)?P2(0):C,c=X2[h2>>2]?(m2=U2[224+n>>2],Y2=U2[228+n>>2],D=U2[216+n>>2],G=U2[212+n>>2],_=U2[232+n>>2],U2[208+n>>2]):P2(0),G=P2(P2(P2(P2(P2(c+U2[176+n>>2])*U2[k+16>>2])+P2(P2(G+U2[180+n>>2])*U2[k+20>>2]))+P2(P2(D+U2[184+n>>2])*U2[k+24>>2]))+P2(P2(P2(P2(m2+U2[192+n>>2])*U2[k>>2])+P2(P2(Y2+U2[196+n>>2])*U2[k+4>>2]))+P2(P2(_+U2[200+n>>2])*U2[k+8>>2]))),c=X2[j>>2]?(s=U2[224+a>>2],v=U2[232+a>>2],W2=U2[228+a>>2],N2=U2[216+a>>2],Z=U2[212+a>>2],U2[208+a>>2]):P2(0),_=P2(l-P2(G+P2(P2(P2(P2(P2(c+U2[176+a>>2])*U2[k+48>>2])+P2(P2(Z+U2[180+a>>2])*U2[k+52>>2]))+P2(P2(N2+U2[184+a>>2])*U2[k+56>>2]))+P2(P2(P2(P2(s+U2[192+a>>2])*U2[k+32>>2])+P2(P2(W2+U2[196+a>>2])*U2[k+36>>2]))+P2(P2(v+U2[200+a>>2])*U2[k+40>>2]))))),u=U2[e+56>>2],X2[k+120>>2]=0,X2[k+124>>2]=1343554297,l=U2[g>>2],U2[k+116>>2]=F*l,X2[k+140>>2]=X2[A+68>>2],h=k,c=(s=P2(Q+m))>P2(0)?(_=P2(_-P2(Y*s)),P2(0)):P2(Y*P2(y2*P2(-s))),c=P2(c*l),g=!X2[e+52>>2]|u<s,U2[h+128>>2]=g?P2(0):c,s=c,c=P2(_*l),U2[k+112>>2]=g?P2(s+c):c,g=k+140|0,U2[(h2=92+i|0)>>2]>P2(0)&&(Y4(A,V,M,p,R,U2[96+i>>2]),B=U2[U>>2],G=P2(j2(B))>P2(.7071067690849304)?(u=U2[S>>2],c=P2(P2(B*B)+P2(u*u)),l=P2(P2(1)/P2(O2(c))),T=P2(c*l),c=U2[V>>2],Z=P2(l*P2(-B)),D=P2(c*Z),_=P2(0),v=P2(u*l),P2(v*P2(-c))):(l=U2[V>>2],u=U2[S>>2],c=P2(P2(l*l)+P2(u*u)),s=P2(P2(1)/P2(O2(c))),D=P2(c*s),Z=P2(l*s),T=P2(Z*P2(-B)),v=P2(0),_=P2(s*P2(-u)),P2(B*_)),c=P2(P2(1)/P2(O2(P2(P2(P2(_*_)+P2(Z*Z))+P2(v*v))))),v=P2(v*c),U2[24+o>>2]=v,Z=P2(Z*c),U2[20+o>>2]=Z,_=P2(_*c),U2[16+o>>2]=_,c=P2(P2(1)/P2(O2(P2(P2(D*D)+P2(P2(T*T)+P2(G*G)))))),D=P2(D*c),U2[8+o>>2]=D,G=P2(G*c),U2[4+o>>2]=G,T=P2(T*c),U2[o>>2]=T,(d=2&X2[f+180>>2])&&(X2[28+o>>2]=0,m=U2[f+4>>2],Q=U2[f+20>>2],w=U2[f+36>>2],Y=P2(P2(P2(P2(_*m)+P2(Z*Q))+P2(v*w))*U2[f+164>>2]),E=U2[f+8>>2],B=U2[f+24>>2],s=U2[f+40>>2],C=P2(P2(P2(P2(_*E)+P2(Z*B))+P2(v*s))*U2[f+168>>2]),l=U2[f+12>>2],u=U2[f+28>>2],c=U2[f+44>>2],F=P2(P2(P2(P2(_*l)+P2(Z*u))+P2(v*c))*U2[f+172>>2]),v=P2(P2(P2(w*Y)+P2(s*C))+P2(c*F)),U2[24+o>>2]=v,Z=P2(P2(P2(Q*Y)+P2(B*C))+P2(u*F)),U2[20+o>>2]=Z,_=P2(P2(P2(m*Y)+P2(E*C))+P2(l*F)),U2[16+o>>2]=_),(k=2&X2[r+180>>2])&&(X2[28+o>>2]=0,m=U2[r+4>>2],Q=U2[r+20>>2],w=U2[r+36>>2],Y=P2(P2(P2(P2(m*_)+P2(Q*Z))+P2(w*v))*U2[r+164>>2]),E=U2[r+8>>2],B=U2[r+24>>2],s=U2[r+40>>2],C=P2(P2(P2(P2(_*E)+P2(Z*B))+P2(v*s))*U2[r+168>>2]),l=U2[r+12>>2],u=U2[r+28>>2],c=U2[r+44>>2],F=P2(P2(P2(P2(_*l)+P2(Z*u))+P2(v*c))*U2[r+172>>2]),v=P2(P2(P2(w*Y)+P2(s*C))+P2(c*F)),U2[24+o>>2]=v,Z=P2(P2(P2(Q*Y)+P2(B*C))+P2(u*F)),U2[20+o>>2]=Z,_=P2(P2(P2(m*Y)+P2(E*C))+P2(l*F)),U2[16+o>>2]=_),d&&(X2[12+o>>2]=0,m=U2[f+4>>2],Q=U2[f+20>>2],w=U2[f+36>>2],Y=P2(P2(P2(P2(T*m)+P2(G*Q))+P2(D*w))*U2[f+164>>2]),E=U2[f+8>>2],B=U2[f+24>>2],s=U2[f+40>>2],C=P2(P2(P2(P2(T*E)+P2(G*B))+P2(D*s))*U2[f+168>>2]),l=U2[f+12>>2],u=U2[f+28>>2],c=U2[f+44>>2],F=P2(P2(P2(P2(T*l)+P2(G*u))+P2(D*c))*U2[f+172>>2]),D=P2(P2(P2(w*Y)+P2(s*C))+P2(c*F)),U2[8+o>>2]=D,G=P2(P2(P2(Q*Y)+P2(B*C))+P2(u*F)),U2[4+o>>2]=G,T=P2(P2(P2(m*Y)+P2(E*C))+P2(l*F)),U2[o>>2]=T),k&&(X2[12+o>>2]=0,m=U2[r+4>>2],Q=U2[r+20>>2],w=U2[r+36>>2],Y=P2(P2(P2(P2(m*T)+P2(Q*G))+P2(w*D))*U2[r+164>>2]),E=U2[r+8>>2],B=U2[r+24>>2],s=U2[r+40>>2],C=P2(P2(P2(P2(T*E)+P2(G*B))+P2(D*s))*U2[r+168>>2]),l=U2[r+12>>2],u=U2[r+28>>2],c=U2[r+44>>2],F=P2(P2(P2(P2(T*l)+P2(G*u))+P2(D*c))*U2[r+172>>2]),D=P2(P2(P2(w*Y)+P2(s*C))+P2(c*F)),U2[8+o>>2]=D,G=P2(P2(P2(Q*Y)+P2(B*C))+P2(u*F)),U2[4+o>>2]=G,T=P2(P2(P2(m*Y)+P2(E*C))+P2(l*F)),U2[o>>2]=T),.001<+P2(O2(P2(P2(P2(_*_)+P2(Z*Z))+P2(v*v))))&&Y4(A,16+o|0,M,p,R,U2[h2>>2]),.001<+P2(O2(P2(P2(P2(T*T)+P2(G*G))+P2(D*D))))&&Y4(A,o,M,p,R,U2[h2>>2]),d=X2[e+72>>2]),1&S2[0|z]&&32&d?(m4(A,172+i|0,M,p,R,H,48+o|0,32+o|0,W,e,U2[148+i>>2],U2[(k=164+i|0)>>2]),16&J2[e+72|0]&&m4(A,188+i|0,M,p,R,H,48+o|0,32+o|0,W,e,U2[152+i>>2],U2[k>>2])):(X2[(k=184+i|0)>>2]=0,l=P2(p2-V2),u=P2(M2-D2),c=P2(R2-T2),E=P2(P2(P2(l*q)+P2(u*L))+P2(c*$)),N=180+i|0,Q=U2[U>>2],B=P2(c-P2(E*Q)),U2[N>>2]=B,I=176+i|0,w=U2[S>>2],s=P2(u-P2(E*w)),U2[I>>2]=s,h=172+i|0,c=l,l=U2[V>>2],u=P2(c-P2(E*l)),U2[h>>2]=u,!(64&J2[e+72|0])&&(c=P2(P2(P2(u*u)+P2(s*s))+P2(B*B)))>P2(1.1920928955078125e-7)?(c=P2(P2(1)/P2(O2(c))),_=P2(s*c),U2[I>>2]=_,v=P2(u*c),U2[h>>2]=v,Z=P2(B*c),U2[N>>2]=Z,1&S2[f+180|0]&&(l=U2[f+172>>2],Y=U2[f+44>>2],C=U2[f+12>>2],F=U2[f+28>>2],u=U2[f+164>>2],m=U2[f+36>>2],Q=U2[f+4>>2],s=U2[f+20>>2],c=U2[f+168>>2],w=U2[f+40>>2],E=U2[f+8>>2],B=U2[f+24>>2],X2[k>>2]=0,G=s,s=P2(u*P2(P2(P2(v*Q)+P2(_*s))+P2(Z*m))),u=P2(c*P2(P2(P2(v*E)+P2(_*B))+P2(Z*w))),c=P2(l*P2(P2(P2(v*C)+P2(_*F))+P2(Z*Y))),_=P2(P2(P2(G*s)+P2(B*u))+P2(F*c)),U2[I>>2]=_,v=P2(P2(P2(Q*s)+P2(E*u))+P2(C*c)),U2[h>>2]=v,Z=P2(P2(P2(m*s)+P2(w*u))+P2(Y*c)),U2[N>>2]=Z),1&S2[r+180|0]&&(l=U2[r+172>>2],Y=U2[r+44>>2],C=U2[r+12>>2],F=U2[r+28>>2],u=U2[r+164>>2],m=U2[r+36>>2],Q=U2[r+4>>2],s=U2[r+20>>2],c=U2[r+168>>2],w=U2[r+40>>2],E=U2[r+8>>2],B=U2[r+24>>2],X2[k>>2]=0,G=s,s=P2(u*P2(P2(P2(Q*v)+P2(s*_))+P2(m*Z))),u=P2(c*P2(P2(P2(v*E)+P2(_*B))+P2(Z*w))),c=P2(l*P2(P2(P2(v*C)+P2(_*F))+P2(Z*Y))),U2[I>>2]=P2(P2(G*s)+P2(B*u))+P2(F*c),U2[h>>2]=P2(P2(Q*s)+P2(E*u))+P2(C*c),U2[N>>2]=P2(P2(m*s)+P2(w*u))+P2(Y*c)),m4(A,h,M,p,R,H,48+o|0,32+o|0,W,e,P2(0),P2(0)),16&J2[e+72|0]&&(d=196+i|(X2[(h2=200+i|0)>>2]=0),B=U2[S>>2],s=U2[h>>2],c=U2[I>>2],l=U2[V>>2],E=P2(P2(B*s)-P2(c*l)),u=U2[U>>2],F=P2(c*u),c=U2[N>>2],B=P2(F-P2(c*B)),u=P2(P2(c*l)-P2(u*s)),c=P2(P2(1)/P2(O2(P2(P2(P2(B*B)+P2(u*u))+P2(E*E))))),v=P2(E*c),U2[d>>2]=v,k=192+i|0,Z=P2(u*c),U2[k>>2]=Z,F2=188+i|0,_=P2(B*c),U2[F2>>2]=_,1&S2[f+180|0]&&(l=U2[f+172>>2],Y=U2[f+44>>2],C=U2[f+12>>2],F=U2[f+28>>2],u=U2[f+164>>2],m=U2[f+36>>2],Q=U2[f+4>>2],s=U2[f+20>>2],c=U2[f+168>>2],w=U2[f+40>>2],E=U2[f+8>>2],B=U2[f+24>>2],X2[h2>>2]=0,G=s,s=P2(u*P2(P2(P2(_*Q)+P2(Z*s))+P2(v*m))),u=P2(c*P2(P2(P2(_*E)+P2(Z*B))+P2(v*w))),c=P2(l*P2(P2(P2(_*C)+P2(Z*F))+P2(v*Y))),Z=P2(P2(P2(G*s)+P2(B*u))+P2(F*c)),U2[k>>2]=Z,_=P2(P2(P2(Q*s)+P2(E*u))+P2(C*c)),U2[F2>>2]=_,v=P2(P2(P2(m*s)+P2(w*u))+P2(Y*c)),U2[d>>2]=v),1&S2[r+180|0]&&(l=U2[r+172>>2],Y=U2[r+44>>2],C=U2[r+12>>2],F=U2[r+28>>2],u=U2[r+164>>2],m=U2[r+36>>2],Q=U2[r+4>>2],s=U2[r+20>>2],c=U2[r+168>>2],w=U2[r+40>>2],E=U2[r+8>>2],B=U2[r+24>>2],X2[h2>>2]=0,G=s,s=P2(u*P2(P2(P2(Q*_)+P2(s*Z))+P2(m*v))),u=P2(c*P2(P2(P2(_*E)+P2(Z*B))+P2(v*w))),c=P2(l*P2(P2(P2(_*C)+P2(Z*F))+P2(v*Y))),U2[k>>2]=P2(P2(G*s)+P2(B*u))+P2(F*c),U2[F2>>2]=P2(P2(Q*s)+P2(E*u))+P2(C*c),U2[d>>2]=P2(P2(m*s)+P2(w*u))+P2(Y*c)),m4(A,F2,M,p,R,H,48+o|0,32+o|0,W,e,P2(0),P2(0)))):(F2=188+i|0,T=P2(j2(Q))>P2(.7071067690849304)?(X2[h>>2]=0,c=P2(P2(w*w)+P2(Q*Q)),u=P2(P2(1)/P2(O2(c))),v=P2(u*P2(-Q)),U2[I>>2]=v,Z=P2(w*u),U2[N>>2]=Z,D=P2(c*u),G=P2(l*v),_=P2(0),P2(Z*P2(-l))):(X2[N>>2]=0,c=P2(P2(l*l)+P2(w*w)),u=P2(P2(1)/P2(O2(c))),v=P2(l*u),U2[I>>2]=v,_=P2(u*P2(-w)),U2[h>>2]=_,G=P2(c*u),D=P2(v*P2(-Q)),Z=P2(0),P2(Q*_)),U2[F2>>2]=D,U2[(h2=196+i|0)>>2]=G,U2[(d=192+i|0)>>2]=T,1&S2[f+180|0]&&(l=U2[f+172>>2],Y=U2[f+44>>2],C=U2[f+12>>2],F=U2[f+28>>2],u=U2[f+164>>2],m=U2[f+36>>2],Q=U2[f+4>>2],s=U2[f+20>>2],c=U2[f+168>>2],w=U2[f+40>>2],E=U2[f+8>>2],B=U2[f+24>>2],X2[k>>2]=0,G=s,s=P2(u*P2(P2(P2(Q*_)+P2(s*v))+P2(m*Z))),u=P2(c*P2(P2(P2(_*E)+P2(v*B))+P2(Z*w))),c=P2(l*P2(P2(P2(_*C)+P2(v*F))+P2(Z*Y))),v=P2(P2(P2(G*s)+P2(B*u))+P2(F*c)),U2[I>>2]=v,_=P2(P2(P2(Q*s)+P2(E*u))+P2(C*c)),U2[h>>2]=_,Z=P2(P2(P2(m*s)+P2(w*u))+P2(Y*c)),U2[N>>2]=Z),1&S2[r+180|0]&&(l=U2[r+172>>2],Y=U2[r+44>>2],C=U2[r+12>>2],F=U2[r+28>>2],u=U2[r+164>>2],m=U2[r+36>>2],Q=U2[r+4>>2],s=U2[r+20>>2],c=U2[r+168>>2],w=U2[r+40>>2],E=U2[r+8>>2],B=U2[r+24>>2],X2[k>>2]=0,G=s,s=P2(u*P2(P2(P2(Q*_)+P2(s*v))+P2(m*Z))),u=P2(c*P2(P2(P2(_*E)+P2(v*B))+P2(Z*w))),c=P2(l*P2(P2(P2(_*C)+P2(v*F))+P2(Z*Y))),U2[I>>2]=P2(P2(G*s)+P2(B*u))+P2(F*c),U2[h>>2]=P2(P2(Q*s)+P2(E*u))+P2(C*c),U2[N>>2]=P2(P2(m*s)+P2(w*u))+P2(Y*c)),m4(A,h,M,p,R,H,48+o|0,32+o|0,W,e,P2(0),P2(0)),16&(k=X2[e+72>>2])&&(1&S2[f+180|0]&&(l=U2[f+172>>2],R2=U2[f+44>>2],D2=U2[f+12>>2],T2=U2[f+28>>2],u=U2[f+164>>2],Y=U2[f+36>>2],s=U2[f+4>>2],C=U2[f+20>>2],c=U2[f+168>>2],F=U2[f+40>>2],m=U2[f+8>>2],Q=U2[f+24>>2],X2[200+i>>2]=0,G=s,w=U2[F2>>2],E=U2[d>>2],B=U2[h2>>2],s=P2(u*P2(P2(P2(s*w)+P2(C*E))+P2(Y*B))),u=P2(c*P2(P2(P2(w*m)+P2(E*Q))+P2(B*F))),c=P2(l*P2(P2(P2(w*D2)+P2(E*T2))+P2(B*R2))),U2[F2>>2]=P2(P2(G*s)+P2(m*u))+P2(D2*c),U2[d>>2]=P2(P2(C*s)+P2(Q*u))+P2(T2*c),U2[h2>>2]=P2(P2(Y*s)+P2(F*u))+P2(R2*c)),1&S2[r+180|0]&&(l=U2[r+172>>2],R2=U2[r+44>>2],D2=U2[r+12>>2],T2=U2[r+28>>2],u=U2[r+164>>2],Y=U2[r+36>>2],s=U2[r+4>>2],C=U2[r+20>>2],c=U2[r+168>>2],F=U2[r+40>>2],m=U2[r+8>>2],Q=U2[r+24>>2],X2[200+i>>2]=0,G=s,w=U2[F2>>2],E=U2[d>>2],B=U2[h2>>2],s=P2(u*P2(P2(P2(s*w)+P2(C*E))+P2(Y*B))),u=P2(c*P2(P2(P2(w*m)+P2(E*Q))+P2(B*F))),c=P2(l*P2(P2(P2(w*D2)+P2(E*T2))+P2(B*R2))),U2[F2>>2]=P2(P2(G*s)+P2(m*u))+P2(D2*c),U2[d>>2]=P2(P2(C*s)+P2(Q*u))+P2(T2*c),U2[h2>>2]=P2(P2(Y*s)+P2(F*u))+P2(R2*c)),m4(A,F2,M,p,R,H,48+o|0,32+o|0,W,e,P2(0),P2(0)),k=X2[e+72>>2]),80==(80&k)&&(X2[z>>2]=1|X2[z>>2]))),h2=X2[A+76>>2],d=X2[g>>2],4&(R=X2[e+72>>2])?(k=X2[A+16>>2],F2=X2[(h=k+K|0)+240>>2],g=X2[(N=k+O|0)+240>>2],I=h2+H2(d,152)|0,B=P2(U2[140+i>>2]*U2[e+68>>2]),U2[I+100>>2]=B,g&&(l=U2[g+416>>2],u=U2[I+24>>2],W=U2[g+412>>2],c=U2[I+20>>2],s=U2[g+404>>2],U2[N+64>>2]=P2(P2(B*P2(P2(s*U2[I+16>>2])*U2[g+408>>2]))*U2[N+112>>2])+U2[N+64>>2],U2[(k=N+68|0)>>2]=P2(P2(B*P2(W*P2(s*c)))*U2[N+116>>2])+U2[k>>2],U2[(k=N+72|0)>>2]=P2(P2(B*P2(l*P2(s*u)))*U2[N+120>>2])+U2[k>>2],u=U2[I+72>>2],W=U2[I+68>>2],U2[N+80>>2]=P2(P2(B*U2[N+96>>2])*U2[I+64>>2])+U2[N+80>>2],c=U2[N+104>>2],U2[(k=N+84|0)>>2]=P2(W*P2(B*U2[N+100>>2]))+U2[k>>2],U2[(k=N+88|0)>>2]=P2(u*P2(B*c))+U2[k>>2]),F2&&(E=U2[I+88>>2],B=U2[I+84>>2],s=U2[I+80>>2],l=U2[F2+416>>2],u=U2[I+56>>2],W=U2[F2+412>>2],c=U2[I+52>>2],w=U2[F2+404>>2],Q=U2[I+100>>2],U2[h+64>>2]=U2[h+64>>2]+P2(P2(P2(P2(w*U2[I+48>>2])*U2[F2+408>>2])*Q)*U2[h+112>>2]),U2[(k=h+68|0)>>2]=U2[k>>2]+P2(P2(Q*P2(W*P2(w*c)))*U2[h+116>>2]),U2[(k=h+72|0)>>2]=U2[k>>2]+P2(P2(Q*P2(l*P2(w*u)))*U2[h+120>>2]),U2[h+80>>2]=U2[h+80>>2]+P2(s*P2(Q*U2[h+96>>2])),c=U2[h+104>>2],U2[(k=h+84|0)>>2]=U2[k>>2]+P2(B*P2(Q*U2[h+100>>2])),U2[(k=h+88|0)>>2]=U2[k>>2]+P2(E*P2(c*Q))),16&R&&(R=h2+H2(d+1|0,152)|0,l=P2(U2[144+i>>2]*U2[e+68>>2]),U2[R+100>>2]=l,g&&(W=U2[R+24>>2],c=U2[R+20>>2],u=U2[g+404>>2],U2[N+64>>2]=P2(P2(l*P2(u*U2[R+16>>2]))*U2[N+112>>2])+U2[N+64>>2],U2[(k=N+68|0)>>2]=P2(P2(l*P2(u*c))*U2[N+116>>2])+U2[k>>2],U2[(k=N+72|0)>>2]=P2(P2(l*P2(u*W))*U2[N+120>>2])+U2[k>>2],u=U2[R+72>>2],W=U2[R+68>>2],U2[N+80>>2]=P2(P2(l*U2[N+96>>2])*U2[R+64>>2])+U2[N+80>>2],c=U2[N+104>>2],U2[(k=N+84|0)>>2]=P2(W*P2(l*U2[N+100>>2]))+U2[k>>2],U2[(k=N+88|0)>>2]=P2(u*P2(l*c))+U2[k>>2]),F2&&(s=U2[R+88>>2],l=U2[R+84>>2],u=U2[R+56>>2],W=U2[R+52>>2],c=U2[R+48>>2],B=U2[F2+404>>2],E=U2[R+100>>2],U2[h+80>>2]=U2[h+80>>2]+P2(U2[R+80>>2]*P2(U2[h+96>>2]*E)),U2[h+64>>2]=U2[h+64>>2]+P2(P2(E*P2(B*c))*U2[h+112>>2]),U2[(k=h+68|0)>>2]=U2[k>>2]+P2(P2(E*P2(B*W))*U2[h+116>>2]),U2[(k=h+72|0)>>2]=U2[k>>2]+P2(P2(E*P2(B*u))*U2[h+120>>2]),c=U2[h+104>>2],U2[(k=h+84|0)>>2]=U2[k>>2]+P2(l*P2(E*U2[h+100>>2])),U2[(k=h+88|0)>>2]=U2[k>>2]+P2(s*P2(c*E))))):(k=h2+H2(d,152)|0,X2[k+100>>2]=0,16&R&&(X2[k+252>>2]=0)),d=X2[P+844>>2];}if(!((0|(I2=I2+1|0))<(0|d)))break;}if((0|(x2=x2+1|0))==(0|y))break;}K2=o+64|0;},function(A,e,r,f,i,a,n,b,t){A|=0,e|=0,r|=0,f|=0,i|=0,a|=0,b|=0;var o,c=P2(0);P2(0);A:if(X2[b+52>>2]&&!(X2[b+20>>2]<1||(0|(e=X2[A+28>>2]))<1))for(r=0;;){if(c=P2(0),1<=(0|e))for(f=0;;)if(o=c,a=X2[A+16>>2],i=X2[A+36>>2]+H2(X2[X2[A+116>>2]+f>>2],152)|0,c=P2(N2[X2[A+220>>2]](a+H2(X2[i+144>>2],244)|0,H2(X2[i+148>>2],244)+a|0,i)),c=P2(o+P2(c*c)),f=f+4|0,!(e=e-1|0))break;if(U2[b+92>>2]>=c)break A;if(((e=X2[b+20>>2])-1|0)<=(0|r))break A;if((0|e)<=(0|(r=r+1|0)))break A;e=X2[A+28>>2];}},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n=0,b=0,t=0,o=P2(0),c=P2(0),k=0,u=P2(0),s=P2(0),l=P2(0),B=P2(0),v=0,d=0,Z=0,_=K2-80|0;if(K2=_,4&(n=X2[f+72>>2])&&!((0|(r=X2[A+28>>2]))<1))if(b=X2[A+76>>2],e=X2[A+36>>2],16&n){for(e=e+140|0;;)if(n=X2[e-8>>2],U2[n+132>>2]=U2[e-40>>2],t=b+H2(X2[e>>2],152)|0,U2[n+136>>2]=U2[t+100>>2],U2[n+140>>2]=U2[t+252>>2],e=e+152|0,!(r=r-1|0))break;}else for(e=e+140|0;;)if(n=X2[e-8>>2],U2[n+132>>2]=U2[e-40>>2],U2[n+136>>2]=U2[100+(b+H2(X2[e>>2],152)|0)>>2],e=e+152|0,!(r=r-1|0))break;if(1<=(0|(n=X2[A+48>>2])))for(e=X2[A+56>>2]+100|0;;)if(b=X2[e+32>>2],(r=X2[b+44>>2])&&(t=X2[b+28>>2],u=U2[t+416>>2],s=U2[e-76>>2],l=U2[t+412>>2],B=U2[e-80>>2],o=U2[e>>2],c=P2(P2(1)/U2[f+12>>2]),U2[r>>2]=U2[r>>2]+P2(P2(P2(U2[e-84>>2]*o)*U2[t+408>>2])*c),U2[r+4>>2]=P2(P2(l*P2(o*B))*c)+U2[r+4>>2],U2[r+8>>2]=P2(P2(u*P2(o*s))*c)+U2[r+8>>2],v=X2[b+32>>2],u=U2[v+416>>2],s=U2[e-44>>2],l=U2[v+412>>2],B=U2[e-48>>2],o=U2[e>>2],c=P2(P2(1)/U2[f+12>>2]),U2[r+32>>2]=U2[r+32>>2]+P2(P2(P2(U2[e-52>>2]*o)*U2[v+408>>2])*c),U2[(d=r+36|0)>>2]=P2(P2(l*P2(o*B))*c)+U2[d>>2],U2[(d=r+40|0)>>2]=P2(P2(u*P2(o*s))*c)+U2[d>>2],u=U2[t+612>>2],s=U2[e-92>>2],l=U2[t+608>>2],B=U2[e-96>>2],o=U2[e>>2],c=P2(P2(1)/U2[f+12>>2]),U2[r+16>>2]=U2[r+16>>2]+P2(P2(P2(U2[e-100>>2]*U2[t+604>>2])*o)*c),U2[(t=r+20|0)>>2]=P2(P2(o*P2(B*l))*c)+U2[t>>2],U2[(t=r+24|0)>>2]=P2(P2(o*P2(s*u))*c)+U2[t>>2],u=U2[v+612>>2],s=U2[e-60>>2],l=U2[v+608>>2],B=U2[e+-64>>2],o=U2[e>>2],c=P2(P2(1)/U2[f+12>>2]),U2[r+48>>2]=U2[r+48>>2]+P2(P2(P2(U2[e-68>>2]*U2[v+604>>2])*o)*c),U2[(t=r+52|0)>>2]=P2(P2(o*P2(B*l))*c)+U2[t>>2],U2[(r=r+56|0)>>2]=P2(P2(o*P2(s*u))*c)+U2[r>>2]),o=U2[e>>2],U2[b+36>>2]=o,U2[b+16>>2]<=P2(j2(o))&&(S2[b+20|0]=0),e=e+152|0,!(n=n-1|0))break;if(1<=(0|(n=X2[A+8>>2])))for(t=X2[A+16>>2],v=_+64|0,d=48+_|0,i=32+_|0,r=144;;)if((b=X2[(e=r+t|0)+96>>2])&&(X2[f+52>>2]?(o=U2[f+60>>2],c=U2[f+12>>2],U2[(b=e+32|0)>>2]=U2[e-80>>2]+U2[b>>2],U2[(b=e+36|0)>>2]=U2[e-76>>2]+U2[b>>2],U2[(b=e+40|0)>>2]=U2[e-72>>2]+U2[b>>2],U2[(b=e+48|0)>>2]=U2[e+-64>>2]+U2[b>>2],U2[(b=e+52|0)>>2]=U2[e-60>>2]+U2[b>>2],U2[(b=e+56|0)>>2]=U2[e-56>>2]+U2[b>>2],U2[e>>2]==P2(0)&&U2[e+4>>2]==P2(0)&&U2[e+8>>2]==P2(0)&&U2[e+16>>2]==P2(0)&&U2[e+20>>2]==P2(0)&&U2[e+24>>2]==P2(0)||(X2[12+_>>2]=0,U2[8+_>>2]=U2[e+24>>2]*o,U2[4+_>>2]=U2[e+20>>2]*o,U2[_>>2]=U2[e+16>>2]*o,N4(b=e-144|0,U2[e>>2],U2[e+4>>2],U2[e+8>>2],_,c,16+_|0),k=X2[(t=24+_|0)+4>>2],X2[(n=b+8|0)>>2]=X2[t>>2],X2[n+4>>2]=k,n=X2[20+_>>2],X2[b>>2]=X2[16+_>>2],X2[b+4>>2]=n,k=X2[(t=8+i|0)+4>>2],X2[(n=(b=e-128|0)+8|0)>>2]=X2[t>>2],X2[n+4>>2]=k,n=X2[4+i>>2],X2[b>>2]=X2[i>>2],X2[b+4>>2]=n,k=X2[(t=d+8|0)+4>>2],X2[(n=(b=e-112|0)+8|0)>>2]=X2[t>>2],X2[n+4>>2]=k,n=X2[d+4>>2],X2[b>>2]=X2[d>>2],X2[b+4>>2]=n,t=X2[(n=v+8|0)+4>>2],X2[(b=(e=e-96|0)+8|0)>>2]=X2[n>>2],X2[b+4>>2]=t,b=X2[v+4>>2],X2[e>>2]=X2[v>>2],X2[e+4>>2]=b,t=X2[A+16>>2]),o=U2[(e=r+t|0)+40>>2],c=U2[e+36>>2],u=U2[e+32>>2],b=X2[e+96>>2]):(u=P2(U2[e-80>>2]+U2[(n=e+32|0)>>2]),U2[n>>2]=u,c=P2(U2[e-76>>2]+U2[(n=e+36|0)>>2]),U2[n>>2]=c,o=P2(U2[e-72>>2]+U2[(n=e+40|0)>>2]),U2[n>>2]=o,U2[(n=e+48|0)>>2]=U2[e+-64>>2]+U2[n>>2],U2[(n=e+52|0)>>2]=U2[e-60>>2]+U2[n>>2],U2[(n=e+56|0)>>2]=U2[e-56>>2]+U2[n>>2]),s=U2[(e=r+t|0)- -64>>2],l=U2[e+68>>2],B=U2[e+72>>2],X2[b+384>>2]=0,U2[b+380>>2]=o+B,U2[b+376>>2]=c+l,U2[b+372>>2]=u+s,X2[b+304>>2]=X2[b+304>>2]+1,e=X2[A+16>>2]+r|0,o=U2[e+48>>2],c=U2[e+80>>2],u=U2[e+52>>2],s=U2[e+84>>2],l=U2[e+56>>2],B=U2[e+88>>2],e=X2[e+96>>2],X2[e+400>>2]=0,U2[e+396>>2]=l+B,U2[e+392>>2]=u+s,U2[e+388>>2]=o+c,X2[e+304>>2]=X2[e+304>>2]+1,X2[f+52>>2]&&(b=X2[A+16>>2]+r|0,e=X2[b+96>>2],X2[e+304>>2]=X2[e+304>>2]+1,a=X2[(k=(n=b-144|0)+8|0)+4>>2],X2[(t=e+12|0)>>2]=X2[k>>2],X2[t+4>>2]=a,t=X2[n+4>>2],X2[e+4>>2]=X2[n>>2],X2[e+8>>2]=t,a=X2[(k=(n=b-128|0)+8|0)+4>>2],X2[(t=e+28|0)>>2]=X2[k>>2],X2[t+4>>2]=a,k=X2[n+4>>2],X2[(t=e+20|0)>>2]=X2[n>>2],X2[t+4>>2]=k,k=X2[(n=b-112|0)+4>>2],X2[(t=e+36|0)>>2]=X2[n>>2],X2[t+4>>2]=k,k=X2[(n=n+8|0)+4>>2],X2[(t=e+44|0)>>2]=X2[n>>2],X2[t+4>>2]=k,k=X2[(t=(b=b-96|0)+8|0)+4>>2],X2[(n=e+60|0)>>2]=X2[t>>2],X2[n+4>>2]=k,n=X2[b+4>>2],X2[(e=e+52|0)>>2]=X2[b>>2],X2[e+4>>2]=n),t=X2[A+16>>2],X2[X2[96+(t+r|0)>>2]+212>>2]=-1,n=X2[A+8>>2]),r=r+244|0,!((0|(Z=Z+1|0))<(0|n)))break;return -1<X2[A+28>>2]||-1<X2[A+32>>2]||((e=X2[A+36>>2])&&J2[A+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+32>>2]=0,X2[A+36>>2]=0,S2[A+40|0]=1),X2[A+28>>2]=0,-1<X2[A+48>>2]||-1<X2[A+52>>2]||((e=X2[A+56>>2])&&J2[A+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+52>>2]=0,X2[A+56>>2]=0,S2[A+60|0]=1),X2[A+48>>2]=0,-1<X2[A+68>>2]||-1<X2[A+72>>2]||((e=X2[A+76>>2])&&J2[A+80|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+72>>2]=0,X2[A+76>>2]=0,S2[A+80|0]=1),X2[A+68>>2]=0,-1<X2[A+88>>2]||-1<X2[A+92>>2]||((e=X2[A+96>>2])&&J2[A+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+92>>2]=0,X2[A+96>>2]=0,S2[A+100|0]=1),X2[A+88>>2]=0,-1<X2[A+8>>2]||-1<X2[A+12>>2]||((e=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+12>>2]=0,X2[A+16>>2]=0,S2[A+20|0]=1),X2[A+8>>2]=0,K2=80+_|0,P2(P2(0));},function(A,e,r,f,i,a,n,b,t,o){A|=0,e|=0,r|=0,f|=0,i|=0,a|=0,n|=0,b|=0,t|=0,o|=0;var c,k,u,s=P2(0),l=P2(0),B=0,v=0,d=P2(0),Z=0,_=0;if(1&S2[t+72|0]){if(c=X2[A+68>>2],k=X2[A+28>>2],1<=(0|(v=X2[A+48>>2]))){if(i=H2(X2[A+232>>2],1664525)+1013904223|0,1!=(0|v)&&(f=X2[A+136>>2],r=X2[f+4>>2],a=(i=H2(i,1664525)+1013904223|0)^i>>>16,X2[f+4>>2]=X2[(a=f+((1&((a=(a=(a^=a>>>8)^a>>>4)^a>>>2)>>>1^a))<<2)|0)>>2],X2[a>>2]=r,2!=(0|v)&&(r=X2[f+8>>2],a=(i=H2(i,1664525)+1013904223|0)^i>>>16,X2[f+8>>2]=X2[(a=f+((((a=(a^=a>>>8)^a>>>4)>>>2^a)>>>0)%3<<2)|0)>>2],X2[a>>2]=r,3!=(0|v)&&(r=X2[f+12>>2],a=(i=H2(i,1664525)+1013904223|0)^i>>>16,X2[f+12>>2]=X2[(a=f+((3&((a=(a^=a>>>8)^a>>>4)>>>2^a))<<2)|0)>>2],X2[a>>2]=r,4!=(0|v)))))for(o=f+16|0,r=4;;)if(r=(a=r)+1|0,Z=X2[o>>2],u=o,B=i=H2(i,1664525)+1013904223|0,65535<a>>>0||(B=_=i>>>16^i,255<a>>>0||(B=_^=_>>>8,15<a>>>0||(B=_^_>>>4))),X2[u>>2]=X2[(a=((B>>>0)%(r>>>0)<<2)+f|0)>>2],X2[a>>2]=Z,o=o+4|0,(0|r)==(0|v))break;X2[A+232>>2]=i;}if(!(X2[t+20>>2]<=(0|e))){if(1<=(0|k)){if(i=H2(X2[A+232>>2],1664525)+1013904223|0,1!=(0|k)&&(f=X2[A+116>>2],r=X2[f+4>>2],a=(i=H2(i,1664525)+1013904223|0)^i>>>16,X2[f+4>>2]=X2[(a=f+((1&((a=(a=(a^=a>>>8)^a>>>4)^a>>>2)>>>1^a))<<2)|0)>>2],X2[a>>2]=r,2!=(0|k)&&(r=X2[f+8>>2],a=(i=H2(i,1664525)+1013904223|0)^i>>>16,X2[f+8>>2]=X2[(a=f+((((a=(a^=a>>>8)^a>>>4)>>>2^a)>>>0)%3<<2)|0)>>2],X2[a>>2]=r,3!=(0|k)&&(r=X2[f+12>>2],a=(i=H2(i,1664525)+1013904223|0)^i>>>16,X2[f+12>>2]=X2[(a=f+((3&((a=(a^=a>>>8)^a>>>4)>>>2^a))<<2)|0)>>2],X2[a>>2]=r,4!=(0|k)))))for(o=f+16|0,r=4;;)if(r=(a=r)+1|0,_=X2[o>>2],v=o,B=i=H2(i,1664525)+1013904223|0,65535<a>>>0||(B=Z=i>>>16^i,255<a>>>0||(B=Z^=Z>>>8,15<a>>>0||(B=Z^Z>>>4))),X2[v>>2]=X2[(a=((B>>>0)%(r>>>0)<<2)+f|0)>>2],X2[a>>2]=_,o=o+4|0,(0|r)==(0|k))break;X2[A+232>>2]=i;}if(!((0|c)<1)){if(i=H2(X2[A+232>>2],1664525)+1013904223|0,1!=(0|c)&&(f=X2[A+156>>2],r=X2[f+4>>2],a=(i=H2(i,1664525)+1013904223|0)^i>>>16,X2[f+4>>2]=X2[(a=f+((1&((a=(a=(a^=a>>>8)^a>>>4)^a>>>2)>>>1^a))<<2)|0)>>2],X2[a>>2]=r,2!=(0|c)&&(r=X2[f+8>>2],a=(i=H2(i,1664525)+1013904223|0)^i>>>16,X2[f+8>>2]=X2[(a=f+((((a=(a^=a>>>8)^a>>>4)>>>2^a)>>>0)%3<<2)|0)>>2],X2[a>>2]=r,3!=(0|c)&&(r=X2[f+12>>2],a=(i=H2(i,1664525)+1013904223|0)^i>>>16,X2[f+12>>2]=X2[(a=f+((3&((a=(a^=a>>>8)^a>>>4)>>>2^a))<<2)|0)>>2],X2[a>>2]=r,4!=(0|c)))))for(o=f+16|0,r=4;;)if(r=(a=r)+1|0,Z=X2[o>>2],_=o,B=i=H2(i,1664525)+1013904223|0,65535<a>>>0||(B=v=i>>>16^i,255<a>>>0||(B=v^=v>>>8,15<a>>>0||(B=v^v>>>4))),X2[_>>2]=X2[(a=((B>>>0)%(r>>>0)<<2)+f|0)>>2],X2[a>>2]=Z,o=o+4|0,(0|r)==(0|c))break;X2[A+232>>2]=i;}}}if(1<=(0|(a=X2[A+48>>2])))for(r=i=0;;)if(f=X2[A+56>>2]+H2(X2[X2[A+136>>2]+i>>2],152)|0,X2[f+136>>2]>(0|e)&&(l=s,a=X2[A+16>>2],s=P2(N2[X2[A+212>>2]](a+H2(X2[f+144>>2],244)|0,a+H2(X2[f+148>>2],244)|0,f)),s=P2(l+P2(s*s)),a=X2[A+48>>2]),i=i+4|0,!((0|(r=r+1|0))<(0|a)))break;if(!(X2[t+20>>2]<=(0|e))){if(1<=(0|b))for(;;)if(e=X2[n>>2],J2[e+20|0]&&(e=F4(A,X2[e+28>>2],U2[t+12>>2]),r=F4(A,X2[X2[n>>2]+32>>2],U2[t+12>>2]),f=X2[n>>2],i=H2(e,244),e=X2[A+16>>2],N2[X2[X2[f>>2]+24>>2]](f,i+e|0,e+H2(r,244)|0,U2[t+12>>2])),n=n+4|0,!(b=b-1|0))break;if(i=X2[A+28>>2],512&(e=X2[t+72>>2])){if(!((0|i)<1))for(f=(16&e?2:1)<<2,n=0,r=4;;)if(l=s,a=X2[A+16>>2],e=X2[A+36>>2]+H2(X2[X2[A+116>>2]+n>>2],152)|0,s=P2(N2[X2[A+216>>2]](a+H2(X2[e+144>>2],244)|0,a+H2(X2[e+148>>2],244)|0,e)),s=P2(l+P2(s*s)),(a=!((l=U2[e+100>>2])>P2(0)))||(e=X2[A+76>>2]+H2(X2[(X2[A+156>>2]+r|0)-4>>2],152)|0,d=U2[e+104>>2],U2[e+124>>2]=l*d,U2[e+120>>2]=l*P2(-d),d=s,b=X2[A+16>>2],s=P2(N2[X2[A+212>>2]](b+H2(X2[e+144>>2],244)|0,b+H2(X2[e+148>>2],244)|0,e)),s=P2(d+P2(s*s))),16&J2[t+72|0]&&(a||(e=X2[A+76>>2]+H2(X2[X2[A+156>>2]+r>>2],152)|0,d=U2[e+104>>2],U2[e+124>>2]=l*d,U2[e+120>>2]=l*P2(-d),l=s,a=X2[A+16>>2],s=P2(N2[X2[A+212>>2]](a+H2(X2[e+144>>2],244)|0,a+H2(X2[e+148>>2],244)|0,e)),s=P2(l+P2(s*s)))),n=n+4|0,r=r+f|0,!(i=i-1|0))break;}else {if(1<=(0|i))for(o=0;;)if(l=s,r=X2[A+16>>2],e=X2[A+36>>2]+H2(X2[X2[A+116>>2]+o>>2],152)|0,s=P2(N2[X2[A+216>>2]](r+H2(X2[e+144>>2],244)|0,r+H2(X2[e+148>>2],244)|0,e)),s=P2(l+P2(s*s)),o=o+4|0,!(i=i-1|0))break;if(!((0|(n=X2[A+68>>2]))<1))for(o=0;;)if(e=X2[A+76>>2]+H2(X2[X2[A+156>>2]+o>>2],152)|0,(l=U2[100+(X2[A+36>>2]+H2(X2[e+140>>2],152)|0)>>2])>P2(0)&&(d=U2[e+104>>2],U2[e+124>>2]=l*d,U2[e+120>>2]=l*P2(-d),l=s,r=X2[A+16>>2],s=P2(N2[X2[A+212>>2]](r+H2(X2[e+144>>2],244)|0,r+H2(X2[e+148>>2],244)|0,e)),s=P2(l+P2(s*s))),o=o+4|0,!(n=n-1|0))break;}if(!((0|(n=X2[A+88>>2]))<1))for(o=148;;)if(e=X2[A+96>>2]+o|0,(l=U2[100+(X2[A+36>>2]+H2(X2[e-8>>2],152)|0)>>2])>P2(0)&&(d=l,l=U2[e-44>>2],d=P2(d*l),U2[e-24>>2]=l=l<d?l:d,U2[e-28>>2]=-l,l=s,r=X2[A+16>>2],s=P2(N2[X2[A+212>>2]](r+H2(X2[e-4>>2],244)|0,r+H2(X2[e>>2],244)|0,e-148|0)),s=P2(l+P2(s*s))),o=o+152|0,!(n=n-1|0))break;}return P2(s);},function(A,e,r,x,y,V,f,p,i){A|=0,e|=0,r|=0,x|=0,y|=0,V|=0,f|=0,p|=0,i|=0;var M,S,X,J,U,H,P,j,z,O,K,L,q,$,A2,e2,r2,f2,i2,a,n=0,b=P2(0),t=0,o=P2(0),c=P2(0),k=0,u=P2(0),s=P2(0),l=P2(0),B=0,v=P2(0),d=P2(0),Z=P2(0),_=P2(0),g=0,E=0,Q=P2(0),w=P2(0),G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=P2(0),R=P2(0),D=P2(0),T=P2(0),W=P2(0),a2=0,I=P2(0),n2=P2(0),b2=P2(0),t2=P2(0),o2=P2(0),c2=P2(0),k2=P2(0),u2=P2(0),s2=0,l2=0,B2=0;if(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=a=K2-256|0,X2[A+188>>2]=-1,(0|(i=X2[p+72>>2]))!=X2[A+224>>2]&&(X2[A+224>>2]=i,X2[A+220>>2]=72,X2[A+216>>2]=73,X2[A+212>>2]=74),1<=((X2[A+184>>2]=0)|r))for(i=e,t=r;;)if(X2[X2[i>>2]+212>>2]=-1,i=i+4|0,!(t=t-1|0))break;if((0|(i=X2[A+12>>2]))<=(0|r)){if((i=r+1|0)&&(X2[6258]=X2[6258]+1,(t=L2(H2(i,244)+19|0))&&(X2[(B2=t+19&-16)-4>>2]=t)),1<=(0|(k=X2[A+8>>2])))for(g=64;;)if(s2=X2[A+16>>2]+g|0,t=X2[(E=s2+-64|0)+4>>2],X2[(n=(a2=g+B2|0)+-64|0)>>2]=X2[E>>2],X2[n+4>>2]=t,t=X2[(B=E+8|0)+4>>2],X2[(n=n+8|0)>>2]=X2[B>>2],X2[n+4>>2]=t,t=X2[(B=(E=s2-48|0)+8|0)+4>>2],X2[(n=(l2=a2-48|0)+8|0)>>2]=X2[B>>2],X2[n+4>>2]=t,t=X2[E+4>>2],X2[l2>>2]=X2[E>>2],X2[l2+4>>2]=t,t=X2[(B=(E=s2-32|0)+8|0)+4>>2],X2[(n=(l2=a2-32|0)+8|0)>>2]=X2[B>>2],X2[n+4>>2]=t,t=X2[E+4>>2],X2[l2>>2]=X2[E>>2],X2[l2+4>>2]=t,t=X2[(E=s2-16|0)+4>>2],X2[(n=a2-16|0)>>2]=X2[E>>2],X2[n+4>>2]=t,t=X2[(B=E+8|0)+4>>2],X2[(n=n+8|0)>>2]=X2[B>>2],X2[n+4>>2]=t,$2(a2,s2,180),g=g+244|0,!(k=k-1|0))break;(t=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[t-4>>2])),X2[A+16>>2]=B2,X2[A+12>>2]=i,S2[A+20|0]=1;}if(v2(8+a|0,0,244),(0|(t=X2[A+8>>2]))<=-1)for((0|i)<=-1&&((i=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+12>>2]=0,X2[A+16>>2]=0,S2[A+20|0]=1),g=H2(t,244),l2=72+a|0,s2=56+a|0,B=40+a|0,k=24+a|0;;)if(i=X2[12+a>>2],a2=X2[A+16>>2]+g|0,X2[a2>>2]=X2[8+a>>2],X2[a2+4>>2]=i,i=X2[(n=16+a|0)+4>>2],X2[(E=a2+8|0)>>2]=X2[n>>2],X2[E+4>>2]=i,i=X2[k+4>>2],X2[(n=a2+16|0)>>2]=X2[k>>2],X2[n+4>>2]=i,i=X2[(n=k+8|0)+4>>2],X2[(E=a2+24|0)>>2]=X2[n>>2],X2[E+4>>2]=i,i=X2[B+4>>2],X2[(n=a2+32|0)>>2]=X2[B>>2],X2[n+4>>2]=i,i=X2[(n=B+8|0)+4>>2],X2[(E=a2+40|0)>>2]=X2[n>>2],X2[E+4>>2]=i,i=X2[s2+4>>2],X2[(n=a2+48|0)>>2]=X2[s2>>2],X2[n+4>>2]=i,i=X2[(n=s2+8|0)+4>>2],X2[(E=a2+56|0)>>2]=X2[n>>2],X2[E+4>>2]=i,$2(a2- -64|0,l2,180),g=g+244|0,!((i=t)>>>0<=(t=i+1|0)>>>0))break;if(1<=((X2[A+8>>2]=0)|r))for(;;)if(B=F4(A,X2[e>>2],U2[p+12>>2]),(n=X2[e>>2])&&2&X2[n+252>>2]&&U2[n+404>>2]!=P2(0)&&(k=X2[A+16>>2],2&(g=X2[n+564>>2])&&(I=U2[n+388>>2],o2=U2[n+4>>2],u=(b=U2[n+456>>2])!=P2(0)?P2(P2(1)/b):P2(0),n2=U2[n+20>>2],o=P2(u*n2),c2=U2[n+8>>2],l=(b=U2[n+460>>2])!=P2(0)?P2(P2(1)/b):P2(0),Q=U2[n+24>>2],c=P2(l*Q),D=U2[n+12>>2],v=(b=U2[n+464>>2])!=P2(0)?P2(P2(1)/b):P2(0),d=U2[n+28>>2],b=P2(v*d),F=U2[n+392>>2],m=U2[n+36>>2],Z=U2[n+40>>2],s=U2[n+44>>2],W=U2[n+396>>2],w=P2(P2(P2(I*P2(P2(P2(o2*o)+P2(c2*c))+P2(D*b)))+P2(P2(P2(P2(n2*o)+P2(Q*c))+P2(d*b))*F))+P2(P2(P2(P2(o*m)+P2(c*Z))+P2(b*s))*W)),o=P2(u*o2),c=P2(l*c2),b=P2(v*D),c=P2(P2(P2(P2(P2(P2(o2*o)+P2(c2*c))+P2(D*b))*I)+P2(F*P2(P2(P2(o*n2)+P2(c*Q))+P2(b*d))))+P2(P2(P2(P2(o*m)+P2(c*Z))+P2(b*s))*W)),Y=P2(P2(I*w)-P2(F*c)),u=P2(u*m),o=P2(l*Z),b=P2(v*s),b=P2(P2(W*P2(P2(P2(m*u)+P2(Z*o))+P2(s*b)))+P2(P2(I*P2(P2(P2(o2*u)+P2(c2*o))+P2(D*b)))+P2(F*P2(P2(P2(n2*u)+P2(Q*o))+P2(d*b))))),s=P2(P2(F*b)-P2(W*w)),l=P2(P2(W*c)-P2(I*b)),b=P2(P2(Y*Y)+P2(P2(s*s)+P2(l*l))),_=U2[p+84>>2],b>P2(_*_)&&(b=P2(P2(P2(1)/P2(O2(b)))*_),Y=P2(Y*b),s=P2(s*b),l=P2(l*b)),w=U2[n+364>>2],_=U2[n+332>>2],u=U2[n+348>>2],o=U2[n+360>>2],c=U2[n+328>>2],b=U2[n+344>>2],t=k+H2(B,244)|0,v=U2[p+12>>2],U2[t+224>>2]=U2[t+224>>2]-P2(P2(P2(P2(s*U2[n+324>>2])+P2(l*U2[n+340>>2]))+P2(Y*U2[n+356>>2]))*v),U2[(i=t+228|0)>>2]=U2[i>>2]-P2(v*P2(P2(P2(s*c)+P2(l*b))+P2(Y*o))),U2[(i=t+232|0)>>2]=U2[i>>2]-P2(v*P2(P2(P2(s*_)+P2(l*u))+P2(Y*w))),g=X2[n+564>>2]),4&g&&(k2=U2[n+36>>2],l=(b=U2[n+456>>2])!=P2(0)?P2(P2(1)/b):P2(0),o=P2(k2*l),T=U2[n+40>>2],v=(b=U2[n+460>>2])!=P2(0)?P2(P2(1)/b):P2(0),c=P2(T*v),Y=U2[n+44>>2],s=(b=U2[n+464>>2])!=P2(0)?P2(P2(1)/b):P2(0),b=P2(Y*s),u2=U2[p+12>>2],I=P2(u2*P2(0)),G=U2[n+396>>2],b2=P2(P2(P2(k2*o)+P2(T*c))+P2(Y*b)),C=U2[n+388>>2],F=U2[n+4>>2],Q=U2[n+8>>2],D=U2[n+12>>2],W=P2(P2(P2(F*o)+P2(Q*c))+P2(D*b)),w=P2(C*W),h=U2[n+392>>2],d=U2[n+20>>2],m=U2[n+24>>2],Z=U2[n+28>>2],o2=P2(P2(P2(d*o)+P2(m*c))+P2(Z*b)),_=P2(h*o2),N=P2(P2(G*b2)+P2(w+_)),o=P2(l*d),c=P2(v*m),b=P2(s*Z),n2=P2(P2(P2(F*o)+P2(Q*c))+P2(D*b)),u=P2(C*n2),t2=P2(P2(P2(d*o)+P2(m*c))+P2(Z*b)),c2=P2(P2(P2(o*k2)+P2(c*T))+P2(b*Y)),o=P2(G*c2),R=P2(P2(u+P2(h*t2))+o),l=P2(l*F),v=P2(v*Q),b=P2(s*D),F=P2(P2(P2(F*l)+P2(Q*v))+P2(D*b)),Z=P2(P2(P2(l*d)+P2(v*m))+P2(b*Z)),c=P2(h*Z),s=P2(P2(P2(l*k2)+P2(v*T))+P2(b*Y)),b=P2(G*s),T=P2(P2(P2(C*F)+c)+b),Y=P2(P2(N+P2(P2(P2(C*R)-P2(h*T))*u2))-P2(I+N)),l=P2(W+P2(P2(R+P2(P2(u-P2(h*F))+P2(W*P2(0))))*u2)),Q=P2(c2+P2(P2(T+P2(P2(b+P2(c2*P2(0)))-P2(C*b2)))*u2)),D=P2(Z+P2(P2(P2(P2(P2(Z*P2(0))-P2(G*t2))+_)+N)*u2)),d=P2(t2+P2(P2(P2(P2(G*Z)+P2(t2*P2(0)))-P2(C*o2))*u2)),m=P2(s+P2(P2(P2(P2(P2(s*P2(0))-o)+P2(h*b2))-R)*u2)),o=P2(P2(Q*D)-P2(d*m)),v=P2(F+P2(P2(P2(P2(F*P2(0))-P2(G*n2))+P2(h*W))*u2)),Z=P2(b2+P2(P2(P2(P2(C*c2)-P2(h*s))+P2(b2*P2(0)))*u2)),s=P2(o2+P2(P2(P2(P2(P2(C*t2)-c)+P2(o2*P2(0)))-T)*u2)),c=P2(P2(d*Z)-P2(s*Q)),_=P2(n2+P2(P2(P2(P2(P2(G*F)+P2(n2*P2(0)))-w)-N)*u2)),b=P2(P2(s*m)-P2(Z*D)),u=P2(P2(l*o)+P2(P2(v*c)+P2(_*b))),u=P2(j2(u))>P2(1.1920928955078125e-7)?P2(P2(1)/u):u,t=k+H2(B,244)|0,w=P2(Y*o),o=P2(P2(T+P2(P2(P2(h*N)-P2(G*R))*u2))-P2(I+T)),F=P2(c*o),c=P2(P2(R+P2(P2(P2(G*T)-P2(C*N))*u2))-P2(I+R)),U2[t+224>>2]=P2(P2(C-P2(P2(w+P2(F+P2(c*b)))*u))-C)+U2[t+224>>2],U2[(i=t+228|0)>>2]=P2(P2(h-P2(P2(P2(l*P2(P2(Q*o)-P2(m*c)))+P2(P2(v*P2(P2(Z*c)-P2(Q*Y)))+P2(_*P2(P2(m*Y)-P2(Z*o)))))*u))-h)+U2[i>>2],U2[(i=t+232|0)>>2]=P2(P2(G-P2(P2(P2(l*P2(P2(D*c)-P2(d*o)))+P2(P2(v*P2(P2(d*Y)-P2(s*c)))+P2(_*P2(P2(s*o)-P2(D*Y)))))*u))-G)+U2[i>>2],g=X2[n+564>>2]),8&g&&(w=U2[n+456>>2],_=U2[n+464>>2],u=U2[n+460>>2],T=U2[n+396>>2],Y=U2[n+392>>2],I=U2[n+388>>2],G=U2[p+12>>2],Q4(n+4|0,8+a|0),C=U2[16+a>>2],h=U2[20+a>>2],N=U2[12+a>>2],s=P2(P2(Y*C)+P2(P2(I*h)-P2(T*N))),R=U2[8+a>>2],o=P2(P2(P2(I*R)+P2(Y*N))+P2(T*C)),c=P2(P2(I*N)+P2(P2(T*h)-P2(Y*R))),b=P2(P2(T*R)+P2(P2(Y*h)-P2(I*C))),b2=P2(P2(P2(N*s)+P2(P2(C*o)+P2(h*c)))-P2(R*b)),l=P2(b2*P2(0)),t2=P2(P2(P2(C*b)+P2(P2(R*o)+P2(h*s)))-P2(N*c)),v=P2(t2*P2(0)),W=u!=P2(0)?P2(P2(1)/u):P2(0),k2=P2(P2(P2(R*c)+P2(P2(N*o)+P2(h*b)))-P2(C*s)),o2=P2(l+P2(v+P2(W*k2))),n2=w!=P2(0)?P2(P2(1)/w):P2(0),D=P2(P2(G*P2(P2(P2(v-P2(n2*k2))+P2(0))+o2))+P2(0)),u=_!=P2(0)?P2(P2(1)/_):P2(0),b=P2(k2*P2(0)),Q=P2(P2(b2*u)+P2(v+b)),d=P2(l+P2(P2(n2*t2)+b)),F=P2(G*P2(P2(b2*d)-P2(t2*Q))),o=P2(b2*P2(-0)),m=P2(n2+P2(G*P2(b+P2(P2(n2*P2(0))+o)))),c=P2(k2*P2(-0)),c2=P2(P2(G*P2(P2(P2(c+P2(W*t2))+P2(0))-d))+P2(0)),Z=P2(P2(G*P2(P2(b+P2(P2(0)-P2(W*b2)))+Q))+P2(0)),s=P2(P2(G*P2(P2(P2(l+P2(0))-P2(u*t2))+d))+P2(0)),b=P2(t2*P2(-0)),w=P2(W+P2(G*P2(b+P2(P2(W*P2(0))+l)))),l=P2(P2(G*P2(P2(P2(u*k2)+P2(o+P2(0)))-o2))+P2(0)),o=P2(P2(Z*s)-P2(w*l)),v=P2(u+P2(G*P2(P2(u*P2(0))+P2(c+v)))),c=P2(P2(w*v)-P2(c2*s)),_=P2(P2(G*P2(P2(b+P2(P2(n2*b2)+P2(0)))-Q))+P2(0)),b=P2(P2(c2*l)-P2(v*Z)),u=P2(P2(D*o)+P2(P2(m*c)+P2(_*b))),u=P2(j2(u))>P2(1.1920928955078125e-7)?P2(P2(1)/u):u,t=k+H2(B,244)|0,Q=P2(G*P2(P2(k2*Q)-P2(b2*o2))),d=P2(G*P2(P2(t2*o2)-P2(k2*d))),w=P2(b2-P2(P2(P2(D*P2(P2(Z*F)-P2(w*Q)))+P2(P2(m*P2(P2(w*d)-P2(c2*F)))+P2(_*P2(P2(c2*Q)-P2(Z*d)))))*u)),_=P2(k2-P2(P2(P2(D*P2(P2(s*Q)-P2(l*F)))+P2(P2(m*P2(P2(v*F)-P2(s*d)))+P2(_*P2(P2(l*d)-P2(v*Q)))))*u)),b=P2(t2-P2(P2(P2(d*o)+P2(P2(Q*c)+P2(F*b)))*u)),u=P2(P2(P2(h*w)+P2(R*_))-P2(N*b)),o=P2(P2(P2(h*b)+P2(N*w))-P2(C*_)),c=P2(P2(P2(b*P2(-R))-P2(N*_))-P2(C*w)),b=P2(P2(P2(C*b)+P2(h*_))-P2(R*w)),U2[t+224>>2]=P2(P2(P2(N*u)+P2(P2(P2(h*o)-P2(R*c))-P2(C*b)))-I)+U2[t+224>>2],U2[(i=t+228|0)>>2]=P2(P2(P2(C*o)+P2(P2(P2(h*b)-P2(N*c))-P2(R*u)))-Y)+U2[i>>2],U2[(i=t+232|0)>>2]=P2(P2(P2(R*b)+P2(P2(P2(h*u)-P2(C*c))-P2(N*o)))-T)+U2[i>>2])),e=e+4|0,!(r=r-1|0))break;if(1<=(0|f))for(i=V,t=f;;)if(e=X2[i>>2],N2[X2[X2[e>>2]+8>>2]](e),i=i+4|(X2[e+36>>2]=0),!(t=t-1|0))break;if(!((0|f)<=(0|(e=X2[A+168>>2]))||X2[A+172>>2]>=(0|f))){if(t=0,f&&(X2[6258]=X2[6258]+1,(r=L2(19+(f<<3)|0))&&(X2[(t=r+19&-16)-4>>2]=r)),1<=(0|e))for(i=0;;)if(k=X2[A+176>>2]+i|0,r=X2[k+4>>2],X2[(B=i+t|0)>>2]=X2[k>>2],X2[B+4>>2]=r,i=i+8|0,!(e=e-1|0))break;(e=X2[A+176>>2])&&J2[A+180|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+176>>2]=t,X2[A+172>>2]=f,S2[A+180|0]=1;}if((0|(X2[A+168>>2]=f))<1)g=0;else for(t=V,k=f,g=r=0;;)if(i=X2[A+176>>2],e=X2[t>>2],(B=X2[e+44>>2])&&(X2[B>>2]=0,X2[B+4>>2]=0,X2[(e=B+56|0)>>2]=0,X2[e+4>>2]=0,X2[(e=B+48|0)>>2]=0,X2[e+4>>2]=0,X2[(e=B+40|0)>>2]=0,X2[e+4>>2]=0,X2[(e=B+32|0)>>2]=0,X2[e+4>>2]=0,X2[(e=B+24|0)>>2]=0,X2[e+4>>2]=0,X2[(e=B+16|0)>>2]=0,X2[e+4>>2]=0,X2[(e=B+8|0)>>2]=0,X2[e+4>>2]=0,e=X2[t>>2]),i=r+i|0,t=t+4|0,r=r+8|0,g=(e=J2[e+20|0]?(N2[X2[X2[e>>2]+16>>2]](e,i),X2[i>>2]):(X2[i>>2]=0,X2[i+4>>2]=0))+g|0,!(k=k-1|0))break;if(!((0|g)<=(0|(e=X2[A+48>>2]))||X2[A+52>>2]>=(0|g))){if(t=0,g&&(X2[6258]=X2[6258]+1,(r=L2(H2(g,152)+19|0))&&(X2[(t=r+19&-16)-4>>2]=r)),1<=(0|e))for(i=0;;)if($2(i+t|0,X2[A+56>>2]+i|0,152),i=i+152|0,!(e=e-1|0))break;(e=X2[A+56>>2])&&J2[A+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+56>>2]=t,X2[A+52>>2]=g,S2[A+60|0]=1;}if(X2[A+48>>2]=g,1<=(0|f))for(e=X2[A+176>>2],t=B2=0;;){if($=t,X2[(K=(q=B2<<3)+e|0)>>2]){if(O=X2[(L=(B2<<2)+V|0)>>2],M=X2[O+32>>2],r=X2[A+56>>2],g=F4(A,S=X2[O+28>>2],U2[p+12>>2]),B=F4(A,M,U2[p+12>>2]),e=X2[O+24>>2],i=X2[p+20>>2],(0|(k=0<(0|e)?e:i))>X2[A+184>>2]&&(X2[A+184>>2]=k),n=r+H2(t,152)|0,t=X2[A+16>>2],1<=X2[K>>2]){for(i=n+148|0,r=0;;)if(v2(i-148|0,0,152),X2[(e=i-28|0)>>2]=-8388609,X2[e+4>>2]=2139095039,X2[i>>2]=B,X2[i-4>>2]=g,X2[(e=i-52|0)>>2]=0,X2[e+4>>2]=0,X2[i-12>>2]=k,i=i+152|0,!((0|(r=r+1|0))<X2[K>>2]))break;i=X2[p+20>>2];}if(X=t+H2(g,244)|0,X2[(e=X)+144>>2]=0,X2[e+148>>2]=0,X2[(e=e+152|0)>>2]=0,X2[e+4>>2]=0,X2[(e=160+X|0)>>2]=0,X2[e+4>>2]=0,X2[(e=168+X|0)>>2]=0,X2[e+4>>2]=0,X2[64+X>>2]=0,X2[68+X>>2]=0,X2[(e=88+X|0)>>2]=0,X2[e+4>>2]=0,X2[(e=80+X|0)>>2]=0,X2[e+4>>2]=0,X2[(e=72+X|0)>>2]=0,X2[e+4>>2]=0,r=t+H2(B,244)|0,X2[(e=r)+144>>2]=0,X2[e+148>>2]=0,X2[(e=e+152|0)>>2]=0,X2[e+4>>2]=0,X2[(e=r+160|0)>>2]=0,X2[e+4>>2]=0,X2[(e=r+168|0)>>2]=0,X2[e+4>>2]=0,X2[r+64>>2]=0,X2[r+68>>2]=0,X2[(e=r+72|0)>>2]=0,X2[e+4>>2]=0,X2[(e=r+80|0)>>2]=0,X2[e+4>>2]=0,X2[(e=r+88|0)>>2]=0,X2[e+4>>2]=0,U2[n+116>>2]=U2[p+40>>2],X2[36+a>>2]=n+112,X2[32+a>>2]=38,X2[28+a>>2]=n+32,X2[52+a>>2]=i,X2[48+a>>2]=n+124,X2[44+a>>2]=n+120,X2[40+a>>2]=n+116,U2[56+a>>2]=U2[p+4>>2],X2[24+a>>2]=n+48,X2[20+a>>2]=n,X2[16+a>>2]=n+16,U2[12+a>>2]=U2[p+32>>2],U2[8+a>>2]=P2(1)/U2[p+12>>2],e=X2[L>>2],N2[X2[X2[e>>2]+20>>2]](e,8+a|0),1<=X2[K>>2])for(i=n+68|0,A2=r+232|0,e2=r+228|0,r2=r+224|0,f2=r+216|0,i2=r+212|0,a2=r+208|0,s2=r+240|0,l2=232+X|0,E=228+X|0,n=224+X|0,g=216+X|0,B=212+X|0,k=208+X|0,t=240+X|0,r=0;;)if((b=U2[X2[L>>2]+16>>2])<=U2[(e=i+56|0)>>2]&&(U2[e>>2]=b),(b=P2(-b))>=U2[(e=i+52|0)>>2]&&(U2[e>>2]=b),X2[i- -64>>2]=O,e=X2[O+28>>2],d=U2[e+328>>2],m=U2[e+332>>2],Z=U2[e+608>>2],s=U2[e+348>>2],l=U2[e+340>>2],v=U2[e+344>>2],w=U2[e+612>>2],_=U2[e+364>>2],u=U2[e+356>>2],o=U2[e+360>>2],c=U2[e+604>>2],b=U2[e+324>>2],X2[i+8>>2]=0,J=U2[i-68>>2],U=U2[i+-64>>2],H=U2[i-60>>2],U2[i+4>>2]=w*P2(P2(P2(u*J)+P2(o*U))+P2(_*H)),U2[i>>2]=Z*P2(P2(P2(J*l)+P2(U*v))+P2(H*s)),U2[i-4>>2]=c*P2(P2(P2(b*J)+P2(d*U))+P2(m*H)),e=X2[O+32>>2],d=U2[e+328>>2],m=U2[e+332>>2],Z=U2[e+608>>2],s=U2[e+348>>2],l=U2[e+340>>2],v=U2[e+344>>2],w=U2[e+612>>2],_=U2[e+364>>2],u=U2[e+356>>2],o=U2[e+360>>2],c=U2[e+604>>2],b=U2[e+324>>2],X2[i+24>>2]=0,P=U2[i-36>>2],j=U2[i-32>>2],z=U2[i-28>>2],U2[i+20>>2]=w*P2(P2(P2(u*P)+P2(o*j))+P2(_*z)),U2[i+16>>2]=Z*P2(P2(P2(P*l)+P2(j*v))+P2(z*s)),U2[i+12>>2]=c*P2(P2(P2(b*P)+P2(d*j))+P2(m*z)),u2=P2(0),G=U2[i-52>>2],b=U2[S+404>>2],C=U2[i-48>>2],h=U2[i-44>>2],o=P2(P2(P2(P2(G*P2(G*b))+P2(C*P2(b*C)))+P2(h*P2(b*h)))+P2(P2(P2(J*P2(P2(P2(J*U2[S+324>>2])+P2(U*U2[S+328>>2]))+P2(H*U2[S+332>>2])))+P2(U*P2(P2(P2(J*U2[S+340>>2])+P2(U*U2[S+344>>2]))+P2(H*U2[S+348>>2]))))+P2(H*P2(P2(P2(J*U2[S+356>>2])+P2(U*U2[S+360>>2]))+P2(H*U2[S+364>>2]))))),N=U2[i-20>>2],b=U2[M+404>>2],R=U2[i-16>>2],b2=U2[i-12>>2],b=P2(P2(o+P2(P2(P2(N*P2(N*b))+P2(R*P2(b*R)))+P2(b2*P2(b*b2))))+P2(P2(P2(P*P2(P2(P2(P*U2[M+324>>2])+P2(j*U2[M+328>>2]))+P2(z*U2[M+332>>2])))+P2(j*P2(P2(P2(P*U2[M+340>>2])+P2(j*U2[M+344>>2]))+P2(z*U2[M+348>>2]))))+P2(z*P2(P2(P2(P*U2[M+356>>2])+P2(j*U2[M+360>>2]))+P2(z*U2[M+364>>2]))))),t2=P2(j2(b))>P2(1.1920928955078125e-7)?P2(P2(1)/b):P2(0),U2[i+40>>2]=t2,k2=P2(0),T=P2(0),Y=P2(0),I=P2(0),F=P2(0),W=P2(0),X2[t>>2]&&(F=U2[E>>2],I=U2[n>>2],T=U2[B>>2],Y=U2[k>>2],k2=U2[g>>2],W=U2[l2>>2]),o2=P2(0),n2=P2(0),c2=P2(0),Q=P2(0),D=P2(0),X2[s2>>2]&&(Q=U2[e2>>2],c2=U2[r2>>2],o2=U2[i2>>2],n2=U2[a2>>2],u2=U2[f2>>2],D=U2[A2>>2]),d=U2[S+380>>2],m=U2[S+372>>2],Z=U2[S+376>>2],s=U2[S+396>>2],l=U2[S+388>>2],v=U2[S+392>>2],w=U2[M+380>>2],_=U2[M+372>>2],u=U2[M+376>>2],o=U2[M+396>>2],c=U2[M+388>>2],b=U2[M+392>>2],X2[i+32>>2]=0,U2[(e=i+44|0)>>2]=P2(t2*U2[e>>2])+P2(t2*P2(P2(0)-P2(U2[56+a>>2]*P2(P2(P2(P2(P2(G*P2(Y+m))+P2(C*P2(T+Z)))+P2(h*P2(k2+d)))+P2(P2(P2(J*P2(I+l))+P2(U*P2(F+v)))+P2(H*P2(W+s))))+P2(P2(P2(P2(N*P2(n2+_))+P2(R*P2(o2+u)))+P2(b2*P2(u2+w)))+P2(P2(P2(P*P2(c2+c))+P2(j*P2(Q+b)))+P2(z*P2(D+o)))))))),i=i+152|0,!((0|(r=r+1|0))<X2[K>>2]))break;e=X2[A+176>>2],r=X2[q+e>>2];}else r=0;if(t=$+r|0,(0|(B2=B2+1|0))==(0|f))break;}if(N2[X2[X2[A>>2]+28>>2]](A,x,y,p),f=X2[A+68>>2],t=X2[A+28>>2],k=X2[A+128>>2],!((0|(V=X2[A+48>>2]))<=(0|k)||(0|V)<=X2[A+132>>2])){r=0,V&&(X2[6258]=X2[6258]+1,(e=L2(19+(V<<2)|0))&&(X2[(r=e+19&-16)-4>>2]=e)),x=X2[A+136>>2];A:{if(1<=(0|k)){for(i=r,e=x;;)if(X2[i>>2]=X2[e>>2],i=i+4|0,e=e+4|0,!(k=k-1|0))break;}else if(!x)break A;J2[A+140|0]&&(X2[6259]=X2[6259]+1,q2(X2[x-4>>2]));}X2[A+136>>2]=r,X2[A+132>>2]=V,S2[A+140|0]=1;}if(X2[A+128>>2]=V,16&J2[p+72|0]){if(!((0|(y=t<<1))<=(0|(k=X2[A+108>>2]))||(0|y)<=X2[A+112>>2])){r=0,t&&(X2[6258]=X2[6258]+1,(e=L2(19+(t<<3)|0))&&(X2[(r=e+19&-16)-4>>2]=e)),x=X2[A+116>>2];A:{if(1<=(0|k)){for(i=r,e=x;;)if(X2[i>>2]=X2[e>>2],i=i+4|0,e=e+4|0,!(k=k-1|0))break;}else if(!x)break A;J2[A+120|0]&&(X2[6259]=X2[6259]+1,q2(X2[x-4>>2]));}X2[A+116>>2]=r,X2[A+112>>2]=y,S2[A+120|0]=1;}X2[A+108>>2]=y;}else {if(!((0|t)<=(0|(k=X2[A+108>>2]))||(0|t)<=X2[A+112>>2])){r=0,t&&(X2[6258]=X2[6258]+1,(e=L2(19+(t<<2)|0))&&(X2[(r=e+19&-16)-4>>2]=e)),x=X2[A+116>>2];A:{if(1<=(0|k)){for(i=r,e=x;;)if(X2[i>>2]=X2[e>>2],i=i+4|0,e=e+4|0,!(k=k-1|0))break;}else if(!x)break A;J2[A+120|0]&&(X2[6259]=X2[6259]+1,q2(X2[x-4>>2]));}X2[A+116>>2]=r,X2[A+112>>2]=t,S2[A+120|0]=1;}X2[A+108>>2]=t;}if(!((0|f)<=(0|(k=X2[A+148>>2]))||(0|f)<=X2[A+152>>2])){r=0,f&&(X2[6258]=X2[6258]+1,(e=L2(19+(f<<2)|0))&&(X2[(r=e+19&-16)-4>>2]=e)),x=X2[A+156>>2];A:{if(1<=(0|k)){for(i=r,e=x;;)if(X2[i>>2]=X2[e>>2],i=i+4|0,e=e+4|0,!(k=k-1|0))break;}else if(!x)break A;J2[A+160|0]&&(X2[6259]=X2[6259]+1,q2(X2[x-4>>2]));}X2[A+156>>2]=r,X2[A+152>>2]=f,S2[A+160|0]=1;}if(X2[A+148>>2]=f,1<=(0|V))for(i=X2[A+136>>2],e=0;;)if(X2[i>>2]=e,i=i+4|0,(0|V)==(0|(e=e+1|0)))break;if(1<=(0|t))for(i=X2[A+116>>2],e=0;;)if(X2[i>>2]=e,i=i+4|0,(0|t)==(0|(e=e+1|0)))break;if(1<=(0|f))for(i=X2[A+156>>2],e=0;;)if(X2[i>>2]=e,i=i+4|0,(0|f)==(0|(e=e+1|0)))break;return K2=256+a|0,P2(P2(0));},function(A,e,r,f,i,a,n,b,t){A|=0,e|=0,r|=0,f|=0,i|=0,a|=0,n|=0,b|=0,t|=0;var o,c,k,u,s=0;P2(0),N2[X2[X2[A>>2]+32>>2]](A,e,r,f,i,a,n,b,t),s=X2[A+184>>2],o=(0|(o=X2[b+20>>2]))<(0|s)?s:o;A:if(!((0|o)<1))for(u=o-1|0,s=1;;){if(k=P2(N2[X2[X2[A>>2]+40>>2]](A,c=s-1|0,e,r,f,i,a,n,b,t)),U2[A+228>>2]=k,(0|u)<=(0|c))break A;if(U2[b+92>>2]>=k)break A;if(c=(0|s)<(0|o),s=s+1|0,!c)break;}return P2(P2(0));},A,D4,u0,function(A,e,r,f){var i,a,n,b,t,o;A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),X2[(i=604+(K2=o=K2-688|0)|0)>>2]=1065353216,X2[4+i>>2]=0,a=X2[e+20>>2],X2[(i=656+o|0)>>2]=X2[e+16>>2],X2[4+i>>2]=a,a=X2[e+36>>2],X2[(i=672+o|0)>>2]=X2[e+32>>2],X2[4+i>>2]=a,n=X2[4+(a=e+8|0)>>2],X2[(i=648+o|0)>>2]=X2[a>>2],X2[4+i>>2]=n,n=X2[4+(a=e+24|0)>>2],X2[(i=664+o|0)>>2]=X2[a>>2],X2[4+i>>2]=n,n=X2[4+(a=e+40|0)>>2],X2[(i=680+o|0)>>2]=X2[a>>2],X2[4+i>>2]=n,X2[636+o>>2]=0,X2[596+o>>2]=1065353216,X2[600+o>>2]=1065353216,X2[588+o>>2]=0,X2[592+o>>2]=0,X2[580+o>>2]=1,X2[584+o>>2]=0,X2[576+o>>2]=16056,i=X2[e+4>>2],X2[640+o>>2]=X2[e>>2],X2[644+o>>2]=i,U2[628+o>>2]=U2[A+204>>2],S2[548+o|0]=0,X2[524+o>>2]=953267991,X2[208+o>>2]=17368,X2[204+o>>2]=0,X2[184+o>>2]=20032,X2[196+o>>2]=X2[A+4>>2],X2[200+o>>2]=576+o,X2[192+o>>2]=208+o,X2[188+o>>2]=216+o,X2[8+o>>2]=15320,X2[172+o>>2]=1065353216,X2[176+o>>2]=0,U2[180+o>>2]=U2[A+208>>2],D4(184+o|0,A+8|0,A+72|0,e=A+136|0,e,8+o|0)&&(a=U2[140+o>>2],n=U2[144+o>>2],i=U2[148+o>>2],(e=P2(P2(P2(a*a)+P2(n*n))+P2(i*i)))>P2(9999999747378752e-20)&&(b=U2[172+o>>2])<U2[A+200>>2]&&(t=i,i=P2(P2(1)/P2(O2(e))),U2[148+o>>2]=t*i,U2[144+o>>2]=n*i,U2[140+o>>2]=a*i,P2(N2[X2[X2[A>>2]+12>>2]](A,140+o|0,156+o|0,b,r,f)))),X2[576+o>>2]=10364,(A=X2[636+o>>2])&&(N2[X2[X2[A>>2]>>2]](A),(A=X2[636+o>>2])&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2]))),K2=688+o|0;},W4,function(A){var e,r,f=0,i=0,a=0;if(X2[(A|=0)>>2]=20204,1<=(0|(f=X2[A+8>>2])))for(;;)if(r=X2[X2[A+16>>2]+i>>2],(e=X2[r+188>>2])&&(f=X2[A+68>>2],f=0|N2[X2[X2[f>>2]+36>>2]](f),N2[X2[X2[f>>2]+40>>2]](f,e,X2[A+24>>2]),f=X2[A+68>>2],N2[X2[X2[f>>2]+12>>2]](f,e,X2[A+24>>2]),X2[r+188>>2]=0,f=X2[A+8>>2]),i=i+4|0,!((0|(a=a+1|0))<(0|f)))break;(f=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),n(A);},function(A){A|=0;var e,r,f,i=P2(0),a=P2(0),n=0,b=P2(0),t=P2(0),o=P2(0),c=P2(0),k=(P2(0),0),u=0;if(K2=f=K2+-64|0,1<=(0|(n=X2[A+8>>2])))for(;;){e=X2[X2[A+16>>2]+k>>2];A:{e:if(!J2[A+76|0])switch(X2[e+220>>2]-2|0){case 0:case 3:break A;default:break e;}n=X2[e+192>>2],N2[X2[X2[n>>2]+8>>2]](n,e+4|0,48+f|0,32+f|0),a=P2(U2[48+f>>2]+P2(-.019999999552965164)),U2[48+f>>2]=a,b=P2(U2[52+f>>2]+P2(-.019999999552965164)),U2[52+f>>2]=b,t=P2(U2[56+f>>2]+P2(-.019999999552965164)),U2[56+f>>2]=t,i=P2(U2[32+f>>2]+P2(.019999999552965164)),U2[32+f>>2]=i,o=P2(U2[36+f>>2]+P2(.019999999552965164)),U2[36+f>>2]=o,c=P2(U2[40+f>>2]+P2(.019999999552965164)),U2[40+f>>2]=c,!J2[A+44|0]||2!=X2[e+252>>2]||3&J2[e+204|0]||(n=X2[e+192>>2],N2[X2[X2[n>>2]+8>>2]](n,e+68|0,16+f|0,f),b=P2(U2[16+f>>2]+P2(-.019999999552965164)),U2[16+f>>2]=b,t=P2(U2[20+f>>2]+P2(-.019999999552965164)),U2[20+f>>2]=t,i=P2(U2[24+f>>2]+P2(-.019999999552965164)),U2[24+f>>2]=i,o=P2(U2[f>>2]+P2(.019999999552965164)),U2[f>>2]=o,c=P2(U2[4+f>>2]+P2(.019999999552965164)),U2[4+f>>2]=c,r=P2(U2[8+f>>2]+P2(.019999999552965164)),U2[8+f>>2]=r,b<(a=U2[48+f>>2])&&(a=U2[48+f>>2]=b),t<(b=U2[52+f>>2])&&(b=U2[52+f>>2]=t),i<(t=U2[56+f>>2])&&(t=U2[56+f>>2]=i),(i=U2[28+f>>2])<U2[60+f>>2]&&(U2[60+f>>2]=i),(i=U2[32+f>>2])<o&&(i=U2[32+f>>2]=o),(o=U2[36+f>>2])<c&&(o=U2[36+f>>2]=c),(c=U2[40+f>>2])<r&&(c=U2[40+f>>2]=r),(r=U2[12+f>>2])>U2[44+f>>2]&&(U2[44+f>>2]=r)),n=X2[A+68>>2],1&S2[e+204|0]||(a=P2(i-a),i=P2(a*a),a=P2(o-b),i=P2(i+P2(a*a)),a=P2(c-t),P2(i+P2(a*a))<P2(999999995904))?N2[X2[X2[n>>2]+16>>2]](n,X2[e+188>>2],48+f|0,32+f|0,X2[A+24>>2]):(4!=(-2&X2[e+220>>2])&&(X2[e+220>>2]=5),J2[26516]||(e=X2[A+72>>2])&&(S2[26516]=1,N2[X2[X2[e>>2]+44>>2]](e,21024),e=X2[A+72>>2],N2[X2[X2[e>>2]+44>>2]](e,21073),e=X2[A+72>>2],N2[X2[X2[e>>2]+44>>2]](e,21141),e=X2[A+72>>2],N2[X2[X2[e>>2]+44>>2]](e,21206))),n=X2[A+8>>2];}if(k=k+4|0,!((0|(u=u+1|0))<(0|n)))break;}K2=f+64|0;},function(A){var e=X2[(A|=0)+68>>2];N2[X2[X2[e>>2]+32>>2]](e,X2[A+24>>2]);},function(A,e){X2[(A|=0)+72>>2]=e|=0;},c4,I4,function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var x,i,y,V,a,n=0,b=0,t=0,o=P2(0),c=P2(0),k=P2(0),u=P2(0),s=0,l=P2(0),B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=P2(0),g=P2(0),E=P2(0),Q=P2(0),w=P2(0),G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=0,m=P2(0),N=P2(0),R=P2(0),D=0,T=0,W=0,I=0;P2(0),K2=a=K2-144|0,0|N2[X2[X2[A>>2]+20>>2]](A)&&(n=0|N2[X2[X2[A>>2]+20>>2]](A),32768&N2[X2[X2[n>>2]+56>>2]](n)&&(n=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[n>>2]+64>>2]](n,e,P2(.10000000149011612))));A:{e:{r:{f:{i:{a:{n:{b:{t:{o:switch(0|(n=X2[r+4>>2])){case 0:break t;case 31:break o;case 28:break r;case 13:break f;case 11:break i;case 10:break a;case 9:break n;case 8:break b;default:break e;}if((0|(n=X2[r+24>>2]))<1)break A;for(b=n+1|0,t=H2(n,80)-80|0;;)if(n=X2[r+32>>2]+t|0,s=X2[n- -64>>2],o=U2[n+56>>2],c=U2[n+48>>2],k=U2[n+52>>2],l=U2[n+32>>2],d=U2[n>>2],Z=U2[n+16>>2],_=U2[n+36>>2],E=U2[n+4>>2],w=U2[n+20>>2],u=U2[n+40>>2],B=U2[n+8>>2],v=U2[n+24>>2],X2[60+a>>2]=0,X2[44+a>>2]=0,X2[28+a>>2]=0,X2[12+a>>2]=0,G=U2[e+32>>2],g=U2[e+36>>2],Q=U2[e+40>>2],U2[40+a>>2]=P2(P2(B*G)+P2(v*g))+P2(u*Q),U2[36+a>>2]=P2(P2(E*G)+P2(w*g))+P2(_*Q),U2[32+a>>2]=P2(P2(d*G)+P2(Z*g))+P2(l*Q),C=U2[e+16>>2],h=U2[e+20>>2],F=U2[e+24>>2],U2[24+a>>2]=P2(P2(B*C)+P2(v*h))+P2(u*F),U2[20+a>>2]=P2(P2(E*C)+P2(w*h))+P2(_*F),U2[16+a>>2]=P2(P2(d*C)+P2(Z*h))+P2(l*F),m=B,B=U2[e>>2],N=v,v=U2[e+4>>2],R=u,u=U2[e+8>>2],U2[8+a>>2]=P2(P2(m*B)+P2(N*v))+P2(R*u),U2[4+a>>2]=P2(P2(E*B)+P2(w*v))+P2(_*u),U2[a>>2]=P2(P2(d*B)+P2(Z*v))+P2(l*u),U2[56+a>>2]=P2(P2(P2(c*G)+P2(k*g))+P2(o*Q))+U2[e+56>>2],U2[52+a>>2]=P2(P2(P2(c*C)+P2(k*h))+P2(o*F))+U2[e+52>>2],U2[48+a>>2]=P2(P2(P2(c*B)+P2(k*v))+P2(o*u))+U2[e+48>>2],N2[X2[X2[A>>2]+28>>2]](A,a,s,f),t=t-80|0,!(1<(0|(b=b-1|0))))break;break A;}s=X2[(t=r+44|0)+4>>2],X2[(n=b=8+a|0)>>2]=X2[t>>2],X2[n+4>>2]=s,t=X2[(n=r+36|0)+4>>2],X2[a>>2]=X2[n>>2],X2[4+a>>2]=t,o=P2(N2[X2[X2[r>>2]+48>>2]](r)),c=P2(N2[X2[X2[r>>2]+48>>2]](r)),k=P2(P2(N2[X2[X2[r>>2]+48>>2]](r))+U2[b>>2]),U2[b>>2]=k,o=P2(o+U2[a>>2]),U2[a>>2]=o,c=P2(c+U2[4+a>>2]),U2[4+a>>2]=c,A=0|N2[X2[X2[A>>2]+20>>2]](A),X2[140+a>>2]=0,U2[136+a>>2]=-k,U2[132+a>>2]=-c,U2[128+a>>2]=-o,N2[X2[X2[A>>2]+80>>2]](A,128+a|0,a,e,f);break A;}o=P2(N2[X2[X2[r>>2]+48>>2]](r)),A=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[A>>2]+24>>2]](A,o,e,f);break A;}if((0|(n=X2[r+100>>2]))<1)break A;for(Y=n+1|0,b=(n<<4)-8|0,t=(n<<2)-4|0;;)if(n=X2[r+108>>2]+b|0,o=U2[n>>2],c=U2[n-8>>2],k=U2[n-4>>2],n=0|N2[X2[X2[A>>2]+20>>2]](A),G=U2[X2[r+128>>2]+t>>2],X2[60+a>>2]=0,X2[44+a>>2]=0,X2[28+a>>2]=0,X2[12+a>>2]=0,l=U2[e+40>>2],d=U2[e+32>>2],_=P2(d*P2(0)),Z=U2[e+36>>2],E=P2(Z*P2(0)),U2[40+a>>2]=l+P2(_+E),u=P2(_+Z),_=P2(l*P2(0)),U2[36+a>>2]=u+_,U2[32+a>>2]=P2(d+E)+_,_=U2[e+24>>2],E=U2[e+16>>2],u=P2(E*P2(0)),w=U2[e+20>>2],B=P2(w*P2(0)),U2[24+a>>2]=_+P2(u+B),v=P2(u+w),u=P2(_*P2(0)),U2[20+a>>2]=v+u,U2[16+a>>2]=P2(E+B)+u,u=U2[e+8>>2],B=U2[e>>2],g=P2(B*P2(0)),v=U2[e+4>>2],Q=P2(v*P2(0)),U2[8+a>>2]=u+P2(g+Q),m=P2(g+v),g=P2(u*P2(0)),U2[4+a>>2]=m+g,U2[a>>2]=P2(B+Q)+g,U2[56+a>>2]=P2(P2(P2(c*d)+P2(k*Z))+P2(o*l))+U2[e+56>>2],U2[52+a>>2]=P2(P2(P2(c*E)+P2(k*w))+P2(o*_))+U2[e+52>>2],U2[48+a>>2]=P2(P2(P2(c*B)+P2(k*v))+P2(o*u))+U2[e+48>>2],N2[X2[X2[n>>2]+24>>2]](n,G,a,f),b=b-16|0,t=t-4|0,!(1<(0|(Y=Y-1|0))))break;break A;}b=X2[r+60>>2],o=U2[(b<<2)+(r=r+36|0)>>2],c=U2[r+((b+2|0)%3<<2)>>2],A=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[A>>2]+84>>2]](A,c,o,b,e,f);break A;}b=X2[r+76>>2],o=U2[r+68>>2],c=U2[r- -64>>2],A=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[A>>2]+92>>2]](A,c,o,b,e,f);break A;}b=X2[r+60>>2],o=P2(N2[X2[X2[r>>2]+92>>2]](r)),Y=X2[(s=r+44|0)+4>>2],X2[(n=8+a|0)>>2]=X2[s>>2],X2[n+4>>2]=Y,s=X2[(t=r+36|0)+4>>2],X2[a>>2]=X2[t>>2],X2[4+a>>2]=s,c=P2(N2[X2[X2[r>>2]+48>>2]](r)),k=P2(N2[X2[X2[r>>2]+48>>2]](r)),y=n,V=P2(P2(N2[X2[X2[r>>2]+48>>2]](r))+U2[n>>2]),U2[y>>2]=V,U2[a>>2]=c+U2[a>>2],U2[4+a>>2]=k+U2[4+a>>2],c=U2[(b<<2)+a>>2],A=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[A>>2]+88>>2]](A,o,c,b,e,f);break A;}o=U2[r+72>>2],A=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[A>>2]+96>>2]](A,r+56|0,o,e,f);break A;}if(!(6<(0|n)))if(s=X2[r+60>>2]){if(!(X2[s+28>>2]<1))for(;;){k=P2(0);e:if(b=(W=H2(T,36))+X2[s+36>>2]|0,D=X2[b+4>>2]){if(o=P2(0),c=P2(0),!((0|D)<1))for(t=X2[b+12>>2],b=X2[(t+(D<<2)|0)-4>>2],Y=1,I=0;;){if(t=(x=(n=X2[t+I>>2])<<4)+X2[s+16>>2]|0,_=U2[t>>2],E=U2[t+4>>2],w=U2[t+8>>2],t=0|N2[X2[X2[A>>2]+20>>2]](A),X2[12+a>>2]=0,i=X2[s+16>>2],l=U2[(b=i+(b<<4)|0)>>2],u=U2[e+32>>2],d=U2[b+4>>2],B=U2[e+36>>2],Z=U2[b+8>>2],v=U2[e+40>>2],G=U2[e+56>>2],U2[8+a>>2]=P2(P2(P2(l*u)+P2(d*B))+P2(Z*v))+G,g=U2[e+16>>2],Q=U2[e+20>>2],C=U2[e+24>>2],h=U2[e+52>>2],U2[4+a>>2]=P2(P2(P2(l*g)+P2(d*Q))+P2(Z*C))+h,F=U2[e>>2],m=U2[e+4>>2],N=U2[e+8>>2],R=U2[e+48>>2],U2[a>>2]=P2(P2(P2(l*F)+P2(d*m))+P2(Z*N))+R,X2[140+a>>2]=0,l=U2[(b=x+i|0)>>2],d=U2[b+4>>2],Z=U2[b+8>>2],U2[136+a>>2]=G+P2(P2(P2(u*l)+P2(B*d))+P2(v*Z)),U2[132+a>>2]=h+P2(P2(P2(g*l)+P2(Q*d))+P2(C*Z)),U2[128+a>>2]=R+P2(P2(P2(F*l)+P2(m*d))+P2(N*Z)),N2[X2[X2[t>>2]+16>>2]](t,a,128+a|0,f),c=P2(c+w),o=P2(o+E),k=P2(k+_),b=X2[s+36>>2]+W|0,X2[b+4>>2]<=(0|Y))break e;I=I+4|0,Y=Y+1|0,t=X2[b+12>>2],b=n;}}else o=P2(0),c=P2(0);if(b=0|N2[X2[X2[A>>2]+20>>2]](A),16384&N2[X2[X2[b>>2]+56>>2]](b)&&(X2[8+a>>2]=0,X2[12+a>>2]=0,X2[a>>2]=1065353216,X2[4+a>>2]=1065353216,b=X2[s+36>>2]+W|0,d=U2[b+28>>2],Z=U2[b+20>>2],_=U2[b+24>>2],b=0|N2[X2[X2[A>>2]+20>>2]](A),X2[140+a>>2]=0,l=P2(P2(1)/P2(0|D)),k=P2(l*k),E=U2[e+32>>2],o=P2(l*o),w=U2[e+36>>2],c=P2(l*c),l=U2[e+40>>2],u=U2[e+56>>2],U2[136+a>>2]=P2(P2(P2(k*E)+P2(o*w))+P2(c*l))+u,B=U2[e+16>>2],v=U2[e+20>>2],G=U2[e+24>>2],g=U2[e+52>>2],U2[132+a>>2]=P2(P2(P2(k*B)+P2(o*v))+P2(c*G))+g,Q=U2[e>>2],C=U2[e+4>>2],h=U2[e+8>>2],F=U2[e+48>>2],U2[128+a>>2]=P2(P2(P2(k*Q)+P2(o*C))+P2(c*h))+F,X2[124+a>>2]=0,k=P2(k+Z),o=P2(o+_),c=P2(c+d),U2[120+a>>2]=u+P2(P2(P2(E*k)+P2(w*o))+P2(l*c)),U2[116+a>>2]=g+P2(P2(P2(k*B)+P2(o*v))+P2(c*G)),U2[112+a>>2]=F+P2(P2(P2(k*Q)+P2(o*C))+P2(c*h)),N2[X2[X2[b>>2]+16>>2]](b,128+a|0,112+a|0,a)),!((0|(T=T+1|0))<X2[s+28>>2]))break;}}else if(!((0|N2[X2[X2[r>>2]+100>>2]](r))<1))for(;;)if(N2[X2[X2[r>>2]+104>>2]](r,b,a,128+a|0),X2[124+a>>2]=0,o=U2[a>>2],l=U2[e+32>>2],c=U2[4+a>>2],d=U2[e+36>>2],k=U2[8+a>>2],Z=U2[e+40>>2],_=U2[e+56>>2],U2[120+a>>2]=P2(P2(P2(o*l)+P2(c*d))+P2(k*Z))+_,E=U2[e+16>>2],w=U2[e+20>>2],u=U2[e+24>>2],B=U2[e+52>>2],U2[116+a>>2]=P2(P2(P2(o*E)+P2(c*w))+P2(k*u))+B,v=U2[e>>2],G=U2[e+4>>2],g=U2[e+8>>2],Q=U2[e+48>>2],U2[112+a>>2]=P2(P2(P2(o*v)+P2(c*G))+P2(k*g))+Q,X2[108+a>>2]=0,o=U2[128+a>>2],c=U2[132+a>>2],k=U2[136+a>>2],U2[104+a>>2]=_+P2(P2(P2(l*o)+P2(d*c))+P2(Z*k)),U2[100+a>>2]=B+P2(P2(P2(E*o)+P2(w*c))+P2(u*k)),U2[96+a>>2]=Q+P2(P2(P2(v*o)+P2(G*c))+P2(g*k)),n=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[n>>2]+16>>2]](n,112+a|0,96+a|0,f),b=b+1|0,!((0|N2[X2[X2[r>>2]+100>>2]](r))>(0|b)))break;(b=X2[r+4>>2])-21>>>0<=8&&(X2[136+a>>2]=1566444395,X2[140+a>>2]=0,X2[128+a>>2]=1566444395,X2[132+a>>2]=1566444395,X2[120+a>>2]=-581039253,X2[124+a>>2]=0,X2[112+a>>2]=-581039253,X2[116+a>>2]=-581039253,b=0|N2[X2[X2[A>>2]+20>>2]](A),s=X2[(t=f+8|0)+4>>2],X2[(n=20+a|0)>>2]=X2[t>>2],X2[n+4>>2]=s,s=X2[(t=e+8|0)+4>>2],X2[(n=36+a|0)>>2]=X2[t>>2],X2[n+4>>2]=s,t=X2[e+20>>2],X2[(n=44+a|0)>>2]=X2[e+16>>2],X2[n+4>>2]=t,s=X2[(t=e+24|0)+4>>2],X2[(n=52+a|0)>>2]=X2[t>>2],X2[n+4>>2]=s,t=X2[e+36>>2],X2[(n=60+a|0)>>2]=X2[e+32>>2],X2[n+4>>2]=t,s=X2[(t=e+40|0)+4>>2],X2[(n=68+a|0)>>2]=X2[t>>2],X2[n+4>>2]=s,X2[8+a>>2]=b,X2[4+a>>2]=20960,X2[a>>2]=20936,b=X2[f+4>>2],X2[12+a>>2]=X2[f>>2],X2[16+a>>2]=b,b=X2[e+4>>2],X2[28+a>>2]=X2[e>>2],X2[32+a>>2]=b,t=X2[(n=e+56|0)+4>>2],X2[(b=84+a|0)>>2]=X2[n>>2],X2[b+4>>2]=t,n=X2[e+52>>2],X2[(b=76+a|0)>>2]=X2[e+48>>2],X2[b+4>>2]=n,N2[X2[X2[r>>2]+64>>2]](r,a,112+a|0,128+a|0),b=X2[r+4>>2]),3==(0|b)&&(X2[136+a>>2]=1566444395,X2[140+a>>2]=0,X2[128+a>>2]=1566444395,X2[132+a>>2]=1566444395,X2[120+a>>2]=-581039253,X2[124+a>>2]=0,X2[112+a>>2]=-581039253,X2[116+a>>2]=-581039253,A=0|N2[X2[X2[A>>2]+20>>2]](A),t=X2[(n=f+8|0)+4>>2],X2[(b=20+a|0)>>2]=X2[n>>2],X2[b+4>>2]=t,t=X2[(n=e+8|0)+4>>2],X2[(b=36+a|0)>>2]=X2[n>>2],X2[b+4>>2]=t,n=X2[e+20>>2],X2[(b=44+a|0)>>2]=X2[e+16>>2],X2[b+4>>2]=n,t=X2[(n=e+24|0)+4>>2],X2[(b=52+a|0)>>2]=X2[n>>2],X2[b+4>>2]=t,n=X2[e+36>>2],X2[(b=60+a|0)>>2]=X2[e+32>>2],X2[b+4>>2]=n,t=X2[(n=e+40|0)+4>>2],X2[(b=68+a|0)>>2]=X2[n>>2],X2[b+4>>2]=t,X2[8+a>>2]=A,X2[4+a>>2]=20960,X2[a>>2]=20936,A=X2[f+4>>2],X2[12+a>>2]=X2[f>>2],X2[16+a>>2]=A,A=X2[e+4>>2],X2[28+a>>2]=X2[e>>2],X2[32+a>>2]=A,b=X2[(f=e+56|0)+4>>2],X2[(A=84+a|0)>>2]=X2[f>>2],X2[A+4>>2]=b,f=X2[e+52>>2],X2[(A=76+a|0)>>2]=X2[e+48>>2],X2[A+4>>2]=f,A=X2[r+100>>2],N2[X2[X2[A>>2]+8>>2]](A,4|a,112+a|0,128+a|0));}K2=144+a|0;},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b,t,o,c,k,u=0;P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),X2[(a=104+(K2=k=K2-256|0)|0)>>2]=0,X2[4+a>>2]=0,X2[(a=112+k|0)>>2]=0,X2[4+a>>2]=0,X2[(a=124+k|0)>>2]=0,X2[4+a>>2]=0,X2[120+k>>2]=1065353216,X2[(a=132+k|0)>>2]=0,X2[4+a>>2]=0,X2[(a=140+k|0)>>2]=1065353216,X2[4+a>>2]=0,n=X2[4+(c=e+8|0)>>2],t=X2[c>>2],X2[(u=b=76+k|0)>>2]=t,X2[4+u>>2]=n,u=X2[4+(a=r+8|0)>>2],X2[(i=92+k|0)>>2]=X2[a>>2],X2[4+i>>2]=u,X2[32+k>>2]=20272,X2[248+k>>2]=f,X2[100+k>>2]=1065353216,o=X2[e+4>>2],u=X2[e>>2],X2[68+k>>2]=u,X2[72+k>>2]=o,f=X2[r+4>>2],X2[84+k>>2]=X2[r>>2],X2[88+k>>2]=f,X2[244+k>>2]=A,X2[(f=156+k|0)>>2]=t,X2[f+4>>2]=n,X2[(f=148+k|0)>>2]=u,X2[f+4>>2]=o,X2[(f=168+k|0)>>2]=0,X2[f+4>>2]=0,X2[(f=176+k|0)>>2]=0,X2[f+4>>2]=0,X2[184+k>>2]=1065353216,X2[(f=188+k|0)>>2]=0,X2[f+4>>2]=0,X2[(f=196+k|0)>>2]=0,X2[f+4>>2]=0,X2[(f=204+k|0)>>2]=1065353216,X2[f+4>>2]=0,f=X2[r+4>>2],X2[(u=212+k|0)>>2]=X2[r>>2],X2[4+u>>2]=f,f=X2[4+a>>2],X2[(u=220+k|0)>>2]=X2[a>>2],X2[4+u>>2]=f,X2[164+k>>2]=1065353216,t=P2(U2[r>>2]-U2[e>>2]),n=P2(U2[r+4>>2]-U2[e+4>>2]),o=P2(U2[a>>2]-U2[c>>2]),u=P2(P2(1)/P2(O2(P2(P2(P2(t*t)+P2(n*n))+P2(o*o))))),c=(a=P2(o*u))==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/a),U2[44+k>>2]=c,o=(n=P2(n*u))==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/n),U2[40+k>>2]=o,X2[60+k>>2]=c<P2(0),X2[56+k>>2]=o<P2(0),o=P2(t*u),U2[64+k>>2]=P2(P2(o*P2(U2[84+k>>2]-U2[68+k>>2]))+P2(n*P2(U2[88+k>>2]-U2[72+k>>2])))+P2(a*P2(U2[i>>2]-U2[b>>2])),o=o==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/o),U2[36+k>>2]=o,X2[52+k>>2]=o<P2(0),f=X2[A+68>>2],X2[(A=24+k|0)>>2]=0,X2[A+4>>2]=0,X2[16+k>>2]=0,X2[20+k>>2]=0,X2[(A=8+k|0)>>2]=0,X2[A+4>>2]=0,X2[k>>2]=0,X2[4+k>>2]=0,N2[X2[X2[f>>2]+24>>2]](f,e,r,32+k|0,16+k|0,k),K2=256+k|0;},x4,y4,function(A){var e,r,f,i;N2[X2[X2[(A|=0)>>2]+8>>2]](A),N2[X2[X2[A>>2]+12>>2]](A),(e=X2[A+24>>2])&&(f=X2[A+68>>2],r=e,f=0|N2[X2[X2[f>>2]+36>>2]](f),i=X2[A+24>>2],e=X2[X2[e>>2]+32>>2],N2[e](0|r,0|f,0|(A+28|0),0|i));},function(A,e){A|=0,N2[X2[X2[(e|=0)>>2]+32>>2]](e),V4(A,e),N2[X2[X2[e>>2]+36>>2]](e);},e,A,function(A,e){var r,f,i,a;return A|=0,e|=0,P2(0),K2=a=K2-32|0,r=X2[A+216>>2],(f=U2[r+4>>2])!=P2(0)&&(e=X2[e>>2],0|N2[X2[X2[r>>2]+8>>2]](r,X2[e+188>>2])&&(r=X2[A+216>>2],i=X2[e+192>>2],X2[24+a>>2]=-1,X2[28+a>>2]=-1,X2[20+a>>2]=e+4,X2[16+a>>2]=e,X2[12+a>>2]=i,p4(A+68|(X2[8+a>>2]=0),A+132|0,8+a|0,r))),K2=32+a|0,f!=P2(0)|0;},A,function(A,e,r,f){A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h=0,F=P2(0);K2=C=K2-32|0,t=U2[e+20>>2],B=U2[e+36>>2],v=U2[e+24>>2],w=U2[e+40>>2],o=U2[e+4>>2],d=U2[e+32>>2],k=U2[e+8>>2],u=U2[e>>2],Z=U2[e+16>>2],X2[28+C>>2]=0,a=P2(t-o),n=P2(w-k),i=P2(v-k),s=P2(B-o),c=P2(P2(a*n)-P2(i*s)),E=i,i=P2(d-u),b=P2(Z-u),n=P2(P2(E*i)-P2(b*n)),a=P2(P2(b*s)-P2(a*i)),i=P2(P2(k*a)+P2(P2(u*c)+P2(o*n))),l=U2[A+4>>2],b=U2[A+8>>2],_=U2[A+12>>2],s=P2(P2(P2(P2(c*l)+P2(n*b))+P2(a*_))-i),Q=U2[A+20>>2],g=U2[A+24>>2],G=U2[A+28>>2],i=P2(P2(P2(P2(c*Q)+P2(n*g))+P2(a*G))-i),P2(s*i)>=P2(0)||1&(e=X2[A+36>>2])&&s<=P2(0)||(i=P2(s/P2(s-i)))<U2[A+40>>2]&&(E=b,b=P2(P2(1)-i),g=P2(P2(g*i)+P2(E*b)),t=P2(t-g),l=P2(P2(Q*i)+P2(l*b)),u=P2(u-l),o=P2(o-g),Z=P2(Z-l),b=P2(P2(G*i)+P2(_*b)),v=P2(v-b),k=P2(k-b),Q=P2(P2(a*a)+P2(P2(c*c)+P2(n*n))),_=P2(Q*P2(-9999999747378752e-20)),P2(P2(a*P2(P2(t*u)-P2(o*Z)))+P2(P2(c*P2(P2(o*v)-P2(k*t)))+P2(n*P2(P2(k*Z)-P2(v*u)))))>=_&&(B=P2(B-g),d=P2(d-l),l=P2(a*P2(P2(B*Z)-P2(t*d))),E=t,t=P2(w-b),_<=P2(l+P2(P2(c*P2(P2(E*t)-P2(v*B)))+P2(n*P2(P2(v*d)-P2(t*Z)))))&&_<=P2(P2(a*P2(P2(o*d)-P2(B*u)))+P2(P2(c*P2(P2(B*k)-P2(t*o)))+P2(n*P2(P2(t*u)-P2(k*d)))))&&(b=a,a=P2(P2(1)/P2(O2(Q))),o=P2(b*a),U2[24+C>>2]=o,n=P2(n*a),U2[20+C>>2]=n,c=P2(c*a),U2[16+C>>2]=c,F=s<=P2(0)&&!(2&e)?(X2[12+C>>2]=0,U2[8+C>>2]=-o,U2[4+C>>2]=-n,U2[C>>2]=-c,P2(N2[X2[X2[(h=A)>>2]+12>>2]](A,C,i,r,f))):P2(N2[X2[X2[(h=A)>>2]+12>>2]](A,16+C|0,i,r,f)),U2[h+40>>2]=F))),K2=32+C|0;},function(A,e,r,f,i){var a,n,b,t,o,c,k,u,s,l;return A|=0,e|=0,r=P2(r),f|=0,i|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),X2[36+(K2=l=K2-48|0)>>2]=i,X2[32+l>>2]=f,X2[40+l>>2]=X2[A+52>>2],i=U2[A- -64>>2],f=U2[A+60>>2],b=U2[A+80>>2],t=U2[A+72>>2],o=U2[A+76>>2],c=U2[A+96>>2],k=U2[A+88>>2],u=U2[A+92>>2],s=U2[A+56>>2],a=U2[e+8>>2],n=U2[e>>2],e=U2[e+4>>2],X2[20+l>>2]=0,U2[16+l>>2]=P2(P2(n*k)+P2(e*u))+P2(a*c),U2[12+l>>2]=P2(P2(n*t)+P2(e*o))+P2(a*b),U2[8+l>>2]=P2(P2(s*n)+P2(f*e))+P2(i*a),U2[24+l>>2]=r,X2[l>>2]=X2[A+48>>2],X2[4+l>>2]=32+l,A=X2[A+44>>2],r=P2(N2[X2[X2[A>>2]+12>>2]](A,l,1)),K2=48+l|0,P2(r);},A,function(A,e){var r,f,i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h,F,Y;A|=0,e|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=Y=K2-128|0,k=X2[e+36>>2],e=X2[X2[A+8>>2]+32>>2]+H2(k,80)|0,G=X2[e+64>>2],u=U2[e+32>>2],s=U2[e>>2],l=U2[e+16>>2],B=U2[e+56>>2],v=U2[e+52>>2],d=U2[e+48>>2],Z=U2[e+36>>2],_=U2[e+20>>2],g=U2[e+4>>2],E=U2[e+40>>2],Q=U2[e+24>>2],w=U2[e+8>>2],e=X2[A+12>>2],C=U2[e+52>>2],h=U2[e+56>>2],r=U2[e+24>>2],f=U2[e+20>>2],i=U2[e+40>>2],a=U2[e+36>>2],F=U2[e+48>>2],n=U2[e+8>>2],b=U2[e>>2],t=U2[e+4>>2],o=U2[e+16>>2],c=U2[e+32>>2],X2[124+Y>>2]=0,X2[108+Y>>2]=0,X2[92+Y>>2]=0,U2[104+Y>>2]=P2(P2(w*c)+P2(Q*a))+P2(E*i),U2[100+Y>>2]=P2(P2(g*c)+P2(_*a))+P2(Z*i),U2[88+Y>>2]=P2(P2(w*o)+P2(Q*f))+P2(E*r),U2[84+Y>>2]=P2(P2(g*o)+P2(_*f))+P2(Z*r),U2[120+Y>>2]=h+P2(P2(P2(c*d)+P2(a*v))+P2(i*B)),U2[116+Y>>2]=C+P2(P2(P2(o*d)+P2(f*v))+P2(r*B)),X2[76+Y>>2]=0,U2[72+Y>>2]=P2(P2(b*w)+P2(t*Q))+P2(n*E),U2[68+Y>>2]=P2(P2(b*g)+P2(t*_))+P2(n*Z),U2[64+Y>>2]=P2(P2(s*b)+P2(l*t))+P2(u*n),U2[112+Y>>2]=F+P2(P2(P2(b*d)+P2(t*v))+P2(n*B)),U2[96+Y>>2]=P2(P2(s*c)+P2(l*a))+P2(u*i),U2[80+Y>>2]=P2(P2(s*o)+P2(l*f))+P2(u*r),X2[60+Y>>2]=k,X2[56+Y>>2]=-1,X2[44+Y>>2]=G,X2[40+Y>>2]=0,X2[48+Y>>2]=X2[A+4>>2],X2[52+Y>>2]=Y+64,X2[12+Y>>2]=1065353216,X2[16+Y>>2]=0,X2[24+Y>>2]=0,X2[36+Y>>2]=k,X2[28+Y>>2]=G,X2[8+Y>>2]=20364,e=X2[A+24>>2],X2[32+Y>>2]=e,U2[12+Y>>2]=U2[e+4>>2],X2[24+Y>>2]=X2[e+16>>2],p4(X2[A+16>>2],X2[A+20>>2],40+Y|0,8+Y|0),K2=128+Y|0;},A,function(A,e){return A=X2[(A|=0)+24>>2],0|N2[X2[X2[A>>2]+8>>2]](A,e|=0);},function(A,e,r){var f,i,a;return A|=0,e|=0,r|=0,P2(0),K2=a=K2-16|0,f=X2[A+28>>2],X2[4+a>>2]=f,X2[a>>2]=f,(i=X2[e+4>>2])?(X2[i+4>>2]=f,X2[i>>2]=f):X2[e+4>>2]=a,f=X2[A+24>>2],i=P2(N2[X2[X2[f>>2]+12>>2]](f,e,r)),U2[A+4>>2]=U2[X2[A+24>>2]+4>>2],K2=16+a|0,P2(i);},e,A,function(A,e,r,f){var i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G;A|=0,e|=0,r|=0,f|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),X2[(K2=r=K2-96|0)+92>>2]=0,i=U2[e>>2],o=U2[A+60>>2],n=U2[e+4>>2],B=U2[A- -64>>2],b=U2[e+8>>2],v=U2[A+68>>2],d=U2[A+84>>2],u=P2(P2(P2(P2(i*o)+P2(n*B))+P2(b*v))+d),U2[r+88>>2]=u,t=U2[A+44>>2],Z=U2[A+48>>2],_=U2[A+52>>2],g=U2[A+80>>2],a=P2(P2(P2(P2(i*t)+P2(n*Z))+P2(b*_))+g),U2[r+84>>2]=a,c=i,i=U2[A+28>>2],k=n,n=U2[A+32>>2],E=b,b=U2[A+36>>2],s=U2[A+76>>2],G=P2(P2(P2(P2(c*i)+P2(k*n))+P2(E*b))+s),U2[r+80>>2]=G,X2[r+76>>2]=0,X2[r+60>>2]=0,l=U2[e+16>>2],c=U2[e+20>>2],k=U2[e+24>>2],Q=P2(s+P2(P2(P2(i*l)+P2(n*c))+P2(b*k))),U2[r+64>>2]=Q,w=P2(g+P2(P2(P2(t*l)+P2(Z*c))+P2(_*k))),U2[r+68>>2]=w,l=P2(d+P2(P2(P2(o*l)+P2(B*c))+P2(v*k))),U2[r+72>>2]=l,c=i,i=U2[e+32>>2],k=n,n=U2[e+36>>2],E=b,b=U2[e+40>>2],s=P2(s+P2(P2(P2(c*i)+P2(k*n))+P2(E*b))),U2[r+48>>2]=s,t=P2(g+P2(P2(P2(t*i)+P2(Z*n))+P2(_*b))),U2[r+52>>2]=t,i=P2(d+P2(P2(P2(o*i)+P2(B*n))+P2(v*b))),U2[r+56>>2]=i,X2[r+44>>2]=0,n=P2(P2(P2(u+l)+i)*P2(.3333333432674408)),U2[r+40>>2]=n,B=P2(P2(P2(a+w)+t)*P2(.3333333432674408)),U2[r+36>>2]=B,b=P2(P2(P2(G+Q)+s)*P2(.3333333432674408)),U2[r+32>>2]=b,e=X2[A+8>>2],16384&N2[X2[X2[e>>2]+56>>2]](e)&&(o=U2[r+80>>2],X2[r+24>>2]=0,X2[r+28>>2]=0,X2[r+16>>2]=1065353216,X2[r+20>>2]=1065353216,e=X2[A+8>>2],X2[r+12>>2]=0,v=P2(Q-o),d=P2(t-a),t=P2(w-a),o=P2(s-o),a=P2(P2(v*d)-P2(t*o)),k=P2((c=a)*a),a=P2(i-u),i=P2(l-u),u=P2(P2(t*a)-P2(i*d)),a=P2(P2(i*o)-P2(v*a)),i=P2(P2(1)/P2(O2(P2(k+P2(P2(u*u)+P2(a*a)))))),U2[r+8>>2]=P2(c*i)+n,U2[r+4>>2]=P2(a*i)+B,U2[r>>2]=b+P2(u*i),N2[X2[X2[e>>2]+16>>2]](e,r+32|0,r,r+16|0)),f=X2[A+8>>2],N2[X2[X2[f>>2]+16>>2]](f,r+80|0,r- -64|0,e=A+12|0),f=X2[A+8>>2],N2[X2[X2[f>>2]+16>>2]](f,r- -64|0,r+48|0,e),A=X2[A+8>>2],N2[X2[X2[A>>2]+16>>2]](A,r+48|0,r+80|0,e),K2=r+96|0;},N1,function(A){return (A|=0)-4|0;},function(A){n((A|=0)-4|0);},function(A,e,r,f){N2[X2[X2[(A=(A|=0)-4|0)>>2]+8>>2]](A,e|=0,r|=0,f|=0);},A,S4,A,S4,A,function(A,e){var r,f,i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C;A|=0,e|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=C=K2-128|0,k=X2[e+36>>2],e=X2[X2[A+24>>2]+32>>2]+H2(k,80)|0,E=X2[e+64>>2],u=U2[e+32>>2],s=U2[e>>2],l=U2[e+16>>2],B=U2[e+56>>2],v=U2[e+52>>2],d=U2[e+48>>2],Z=U2[e+36>>2],_=U2[e+20>>2],g=U2[e+4>>2],r=U2[e+40>>2],f=U2[e+24>>2],i=U2[e+8>>2],X2[124+C>>2]=0,X2[108+C>>2]=0,X2[92+C>>2]=0,e=X2[A+28>>2],a=U2[e+32>>2],n=U2[e+36>>2],b=U2[e+40>>2],U2[104+C>>2]=P2(P2(i*a)+P2(f*n))+P2(r*b),U2[100+C>>2]=P2(P2(g*a)+P2(_*n))+P2(Z*b),t=U2[e+16>>2],o=U2[e+20>>2],c=U2[e+24>>2],U2[88+C>>2]=P2(P2(i*t)+P2(f*o))+P2(r*c),U2[84+C>>2]=P2(P2(g*t)+P2(_*o))+P2(Z*c),U2[120+C>>2]=P2(P2(P2(d*a)+P2(v*n))+P2(B*b))+U2[e+56>>2],U2[116+C>>2]=P2(P2(P2(d*t)+P2(v*o))+P2(B*c))+U2[e+52>>2],X2[76+C>>2]=0,Q=i,i=U2[e>>2],w=f,f=U2[e+4>>2],G=r,r=U2[e+8>>2],U2[72+C>>2]=P2(P2(Q*i)+P2(w*f))+P2(G*r),U2[68+C>>2]=P2(P2(g*i)+P2(_*f))+P2(Z*r),U2[64+C>>2]=P2(P2(s*i)+P2(l*f))+P2(u*r),U2[112+C>>2]=P2(P2(P2(d*i)+P2(v*f))+P2(B*r))+U2[e+48>>2],U2[96+C>>2]=P2(P2(s*a)+P2(l*n))+P2(u*b),U2[80+C>>2]=P2(P2(s*t)+P2(l*o))+P2(u*c),X2[36+C>>2]=1065353216,X2[40+C>>2]=1,X2[44+C>>2]=-1,X2[56+C>>2]=k,X2[48+C>>2]=E,X2[32+C>>2]=21328,e=X2[A+32>>2],X2[52+C>>2]=e,U2[36+C>>2]=U2[e+4>>2],X2[28+C>>2]=k,X2[24+C>>2]=-1,X2[12+C>>2]=E,e=X2[A+4>>2],X2[8+C>>2]=e,X2[16+C>>2]=X2[e+8>>2],X2[20+C>>2]=C+64,M4(X2[A+8>>2],X2[A+12>>2],X2[A+16>>2],8+C|0,32+C|0,U2[A+20>>2]),K2=128+C|0;},e,A,function(A,e){return A=X2[(A|=0)+20>>2],0|N2[X2[X2[A>>2]+8>>2]](A,e|=0);},function(A,e,r){var f,i;return A|=0,e|=0,r|=0,P2(0),X2[(K2=i=K2-16|0)>>2]=-1,X2[4+i>>2]=X2[A+24>>2],X2[8+i>>2]=X2[A+16>>2],X2[e+4>>2]||(X2[e+4>>2]=i),f=X2[A+20>>2],f=P2(N2[X2[X2[f>>2]+12>>2]](f,e,r)),U2[A+4>>2]=U2[X2[A+20>>2]+4>>2],K2=16+i|0,P2(f);},A,function(A,e){var r,f,i,a,n,b;return A|=0,e|=0,P2(0),P2(0),K2=b=K2-32|0,r=X2[A+184>>2],(f=U2[r+4>>2])!=P2(0)&&(e=X2[e>>2],0|N2[X2[X2[r>>2]+8>>2]](r,X2[e+188>>2])&&(i=U2[A+188>>2],r=X2[A+184>>2],a=X2[A+192>>2],n=X2[e+192>>2],X2[24+b>>2]=-1,X2[28+b>>2]=-1,X2[20+b>>2]=e+4,X2[16+b>>2]=e,X2[12+b>>2]=n,M4(a,A+36|(X2[8+b>>2]=0),A+100|0,8+b|0,r,i))),K2=32+b|0,f!=P2(0)|0;},function(A){var e;return X2[(A|=0)>>2]=22256,(e=X2[A+56>>2])&&J2[A+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+56>>2]=0,S2[A+60|0]=1,X2[(e=A+48|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+36>>2])&&J2[A+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+36>>2]=0,S2[A+40|0]=1,X2[(e=A+28|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+16>>2]=0,S2[A+20|0]=1,X2[(e=A+8|0)>>2]=0,(X2[4+e>>2]=0)|A;},function(A){var e;X2[(A|=0)>>2]=22256,(e=X2[A+56>>2])&&J2[A+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+56>>2]=0,S2[A+60|0]=1,X2[(e=A+48|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+36>>2])&&J2[A+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+36>>2]=0,S2[A+40|0]=1,X2[(e=A+28|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),n(A);},function(A,e,r){A|=0,r|=0;var f=0,i=0,a=0,n=0,b=0,t=0,o=0;if(1<=(0|(n=X2[(e|=0)+8>>2])))for(r=X2[e+16>>2];;)if(f=X2[r>>2],3&J2[f+204|0]||(a=(X2[f+208>>2]=a)+1|0),X2[f+268>>2]=1065353216,X2[f+212>>2]=-1,r=r+4|0,!(n=n-1|0))break;if((0|(f=X2[A+8>>2]))<(0|a)){if(X2[A+12>>2]<(0|a)){if(n=0,a&&(X2[6258]=X2[6258]+1,(r=L2(19+(a<<3)|0))&&(X2[(n=r+19&-16)-4>>2]=r)),1<=(0|f))for(r=f;;)if(o=X2[A+16>>2]+i|0,b=X2[o+4>>2],X2[(t=i+n|0)>>2]=X2[o>>2],X2[t+4>>2]=b,i=i+8|0,!(r=r-1|0))break;(r=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+16>>2]=n,X2[A+12>>2]=a,S2[A+20|0]=1;}for(i=f<<3,r=a-f|0;;)if(f=X2[A+16>>2]+i|0,X2[f>>2]=0,i=i+8|(X2[f+4>>2]=0),!(r=r-1|0))break;}if(1<=(0|(X2[A+8>>2]=a)))for(i=X2[A+16>>2],r=0;;)if(X2[i>>2]=r,X2[i+4>>2]=1,i=i+8|0,(0|a)==(0|(r=r+1|0)))break;if(e=X2[e+68>>2],e=0|N2[X2[X2[e>>2]+36>>2]](e),(t=0|N2[X2[X2[e>>2]+36>>2]](e))&&(o=0|N2[X2[X2[e>>2]+20>>2]](e),!((0|t)<1)))for(r=0;;){if((e=X2[X2[(f=(r<<4)+o|0)>>2]>>2])&&(f=X2[X2[f+4>>2]>>2])&&!(7&X2[e+204>>2]||7&J2[f+204|0])){if(a=X2[f+208>>2],f=X2[A+16>>2],n=X2[e+208>>2],(0|(e=X2[(i=f+(n<<3)|0)>>2]))!=(0|n)&&(X2[i>>2]=X2[(e=f+(e<<3)|0)>>2],n=X2[e>>2],(0|(i=X2[(e=f+(n<<3)|0)>>2]))!=(0|n)))for(;;)if(X2[(b=e)>>2]=X2[(e=f+(i<<3)|0)>>2],n=X2[e>>2],(0|(i=X2[(e=f+(n<<3)|0)>>2]))==(0|n))break;if((0|(i=X2[(e=f+(a<<3)|0)>>2]))!=(0|a)&&(X2[(b=e)>>2]=X2[(e=f+(i<<3)|0)>>2],a=X2[e>>2],(0|(i=X2[(e=f+(a<<3)|0)>>2]))!=(0|a)))for(;;)if(X2[(b=e)>>2]=X2[(e=f+(i<<3)|0)>>2],a=X2[e>>2],(0|(i=X2[(e=f+(a<<3)|0)>>2]))==(0|a))break;(0|a)!=(0|n)&&(X2[(e=f+(n<<3)|0)>>2]=a,X2[(f=f+(a<<3)|0)+4>>2]=X2[f+4>>2]+X2[e+4>>2]);}if((0|t)==(0|(r=r+1|0)))break;}},function(A,e){A|=0;var r,f,i,a,n,b=0,t=0,o=0,c=0;if(1<=(0|(n=X2[(e|=0)+8>>2])))for(a=X2[e+16>>2];;){if(r=X2[(t<<2)+a>>2],3&J2[r+204|0])X2[r+208>>2]=-1,X2[r+212>>2]=-2;else {if(f=X2[A+16>>2],(0|(e=c))!=(0|(b=X2[(i=f+(e<<3)|0)>>2]))&&(X2[i>>2]=X2[(e=(b<<3)+f|0)>>2],(0|(e=X2[e>>2]))!=(0|(b=X2[(o=(e<<3)+f|0)>>2]))))for(;;)if(X2[o>>2]=X2[(e=(b<<3)+f|0)>>2],(0|(e=X2[e>>2]))==(0|(b=X2[(o=(e<<3)+f|0)>>2])))break;X2[r+208>>2]=e,X2[r+212>>2]=-1,X2[4+i>>2]=t,c=c+1|0;}if((0|n)==(0|(t=t+1|0)))break;}},H4,u0,Z4,function(A,e,r,f,i){P2(i);},M1,P0,J4,j4,function(A){A=j4(A|=0),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A){A|=0;var e,r,f,i,a=0,n=0;if(I4(A),0|N2[X2[X2[A>>2]+20>>2]](A)&&(a=0|N2[X2[X2[A>>2]+20>>2]](A),6144&N2[X2[X2[a>>2]+56>>2]](a)&&!((0|(a=0|N2[X2[X2[A>>2]+104>>2]](A)))<1)))for(a=a+1|0;;)if(i=0|N2[X2[X2[(f=A)>>2]+108>>2]](A,a-2|0),r=X2[X2[A>>2]+172>>2],N2[r](0|f,0|i),!(1<(0|(a=a-1|0))))break;if(0|N2[X2[X2[A>>2]+20>>2]](A)&&(a=0|N2[X2[X2[A>>2]+20>>2]](A),16387&N2[X2[X2[a>>2]+56>>2]](a)&&0|N2[X2[X2[A>>2]+20>>2]](A)&&(a=0|N2[X2[X2[A>>2]+20>>2]](A),0|N2[X2[X2[a>>2]+56>>2]](a)&&!(X2[A+296>>2]<1))))for(a=0;;)if(e=X2[X2[A+304>>2]+a>>2],N2[X2[X2[e>>2]+12>>2]](e,X2[A+72>>2]),a=a+4|0,!((0|(n=n+1|0))<X2[A+296>>2]))break;0|N2[X2[X2[A>>2]+20>>2]](A)&&(A=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[A>>2]+104>>2]](A));},function(A,e,r,f){x4(A|=0,e|=0,r|=0,f|=0);},function(A,e){A|=0,(e|=0)&&2&X2[e+252>>2]?N2[X2[X2[A>>2]+92>>2]](A,e):y4(A,e);},function(A,e){A|=0;var r,f,i=0,a=0,n=0,b=0,t=0,o=0,c=0,k=0;if(N2[X2[X2[(e|=0)>>2]+32>>2]](e),n=0|N2[X2[X2[e>>2]+16>>2]](e,104,1),i=v2(X2[n+8>>2],0,104),U2[i+88>>2]=U2[A+264>>2],U2[i+92>>2]=U2[A+268>>2],U2[i+96>>2]=U2[A+272>>2],U2[i+100>>2]=U2[A+276>>2],r=X2[(a=A+124|0)+4>>2],X2[i+28>>2]=X2[a>>2],X2[i+32>>2]=r,r=X2[(a=A+104|0)+4>>2],X2[i+12>>2]=X2[a>>2],X2[i+16>>2]=r,r=X2[(a=A+116|0)+4>>2],X2[i+20>>2]=X2[a>>2],X2[i+24>>2]=r,r=X2[(a=A+96|0)+4>>2],X2[i+4>>2]=X2[a>>2],X2[i+8>>2]=r,U2[i>>2]=U2[A+92>>2],U2[i+36>>2]=U2[A+132>>2],U2[i+40>>2]=U2[A+148>>2],U2[i+44>>2]=U2[A+152>>2],U2[i+48>>2]=U2[A+156>>2],U2[i+52>>2]=U2[A+160>>2],U2[i+56>>2]=U2[A+176>>2],U2[i+60>>2]=U2[A+180>>2],X2[i+64>>2]=X2[A+112>>2],X2[i+68>>2]=X2[A+164>>2],X2[i+72>>2]=X2[A+168>>2],X2[i+76>>2]=X2[A+172>>2],a=X2[A+144>>2],X2[i+84>>2]=0,X2[i+80>>2]=a,N2[X2[X2[e>>2]+20>>2]](e,n,22857,1145853764,i),V4(A,e),1<=(0|(i=X2[A+8>>2])))for(a=0;;)if(n=X2[X2[A+16>>2]+b>>2],2&J2[n+252|0]&&(o=e,c=0|N2[X2[X2[n>>2]+16>>2]](n),t=X2[X2[e>>2]+16>>2],i=0|N2[t](0|o,0|c,0|(k=1)),r=0|N2[X2[X2[n>>2]+20>>2]](n,X2[i+8>>2],e),N2[X2[X2[e>>2]+20>>2]](e,i,r,1497645650,n),i=X2[A+8>>2]),b=b+4|0,!((0|(a=a+1|0))<(0|i)))break;if(1<=X2[A+228>>2])for(i=b=0;;)if(n=X2[X2[A+236>>2]+b>>2],k=e,c=0|N2[X2[X2[n>>2]+36>>2]](n),t=X2[X2[e>>2]+16>>2],a=0|N2[t](0|k,0|c,0|(o=1)),o=e,c=a,k=0|N2[X2[X2[n>>2]+40>>2]](n,X2[a+8>>2],e),f=n,t=X2[X2[e>>2]+20>>2],N2[t](0|o,0|c,0|k,1397641027,0|f),b=b+4|0,!((0|(i=i+1|0))<X2[A+228>>2]))break;N2[X2[X2[e>>2]+36>>2]](e);},function(A,e,r,f){A|=0,e=P2(e),r|=0,f=P2(f);var i,a=0,n=0;if(P2(0),r?(U2[A+284>>2]=f,e=P2(U2[A+280>>2]+e),f<=(U2[A+280>>2]=e)&&(n=A,e=P2((i=e)/f),a=P2(j2(e))<P2(2147483648)?~~e:-2147483648,U2[n+280>>2]=i-P2(P2(0|a)*f))):(X2[A+284>>2]=0,U2[A+280>>2]=J2[A+316|0]?P2(0):e,r=a=!(P2(j2(f=e))<P2(1.1920928955078125e-7))),0|N2[X2[X2[A>>2]+20>>2]](A)&&(n=0|N2[X2[X2[A>>2]+20>>2]](A),i=N2[X2[X2[n>>2]+56>>2]](n)>>>4&1,S2[26508]=i),a){if(N2[X2[X2[A>>2]+168>>2]](A,P2(f*P2(0|(r=(0|r)<(0|a)?r:a)))),N2[X2[X2[A>>2]+176>>2]](A),!((0|r)<1))for(;;)if(N2[X2[X2[A>>2]+160>>2]](A,f),N2[X2[X2[A>>2]+80>>2]](A),!(r=r-1|0))break;}else N2[X2[X2[A>>2]+80>>2]](A);return N2[X2[X2[A>>2]+120>>2]](A),0|a;},function(A,e,r){e|=0,r|=0;var f,i=0,a=0,n=0,b=0,a=X2[(A|=0)+228>>2];if((0|a)==X2[A+232>>2]&&!((0|(f=a?a<<1:1))<=(0|a))){if(f&&(X2[6258]=X2[6258]+1,(i=L2(19+(f<<2)|0))&&(X2[(n=i+19&-16)-4>>2]=i)),1<=(0|a))for(i=a;;)if(X2[b+n>>2]=X2[X2[A+236>>2]+b>>2],b=b+4|0,!(i=i-1|0))break;(i=X2[A+236>>2])&&J2[A+240|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2]),a=X2[A+228>>2]),X2[A+236>>2]=n,X2[A+232>>2]=f,S2[A+240|0]=1;}X2[A+228>>2]=a+1,X2[X2[A+236>>2]+(a<<2)>>2]=e,r&&(G4(X2[e+28>>2],e),G4(X2[e+32>>2],e));},function(A,e){e|=0;var r,f=0,i=0,a=0,f=X2[(A|=0)+228>>2];A:if(!((0|f)<1)){for(i=r=X2[A+236>>2];;){if(X2[i>>2]==(0|e))break;if(i=i+4|0,(0|f)==(0|(a=a+1|0)))break A;}(0|f)<=(0|a)||(X2[(a=i)>>2]=X2[(f=(i=f-1|0)<<2)+r>>2],X2[A+228>>2]=i,X2[f+X2[A+236>>2]>>2]=e);}C4(X2[e+28>>2],e),C4(X2[e+32>>2],e);},function(A,e){e|=0;var r,f=0,i=0,a=0,n=0,i=X2[(A|=0)+296>>2];if((0|i)==X2[A+300>>2]&&!((0|(r=i?i<<1:1))<=(0|i))){if(r&&(X2[6258]=X2[6258]+1,(f=L2(19+(r<<2)|0))&&(X2[(a=f+19&-16)-4>>2]=f)),1<=(0|i))for(f=i;;)if(X2[n+a>>2]=X2[X2[A+304>>2]+n>>2],n=n+4|0,!(f=f-1|0))break;(f=X2[A+304>>2])&&J2[A+308|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2]),i=X2[A+296>>2]),X2[A+304>>2]=a,X2[A+300>>2]=r,S2[A+308|0]=1;}X2[A+296>>2]=i+1,X2[X2[A+304>>2]+(i<<2)>>2]=e;},function(A,e){A|=0,e|=0;var r,f=0,i=0,a=0;A:if(!((0|(f=X2[A+296>>2]))<1)){for(i=r=X2[A+304>>2];;){if(X2[i>>2]==(0|e))break;if(i=i+4|0,(0|f)==(0|(a=a+1|0)))break A;}(0|f)<=(0|a)||(X2[(a=i)>>2]=X2[(f=(i=f-1|0)<<2)+r>>2],X2[A+296>>2]=i,X2[f+X2[A+304>>2]>>2]=e);}},function(A,e){A|=0,e|=0;var r,f,i,a,n,b,t=0,o=0,c=(P2(0),0),k=0,t=(P2(0),P2(0),P2(0),X2[e+4>>2]);if(X2[A+264>>2]=X2[e>>2],X2[A+268>>2]=t,i=X2[(o=f=e+8|0)+4>>2],X2[(t=A+272|0)>>2]=X2[o>>2],X2[t+4>>2]=i,1<=(0|(o=X2[A+248>>2])))for(;;){A:{e:switch(t=X2[X2[A+256>>2]+c>>2],X2[t+220>>2]-2|0){case 0:case 3:break A;default:break e;}1&S2[t+564|0]||((r=U2[t+404>>2])!=P2(0)&&(a=U2[e>>2],n=U2[e+4>>2],b=U2[e+8>>2],X2[t+436>>2]=0,r=P2(P2(1)/r),U2[t+432>>2]=b*r,U2[t+428>>2]=r*n,U2[t+424>>2]=r*a),o=X2[e+4>>2],X2[t+440>>2]=X2[e>>2],X2[t+444>>2]=o,o=X2[4+f>>2],X2[(t=t+448|0)>>2]=X2[f>>2],X2[t+4>>2]=o,o=X2[A+248>>2]);}if(c=c+4|0,!((0|(k=k+1|0))<(0|o)))break;}},function(A,e){var r=X2[(e|=0)+268>>2];X2[(A|=0)>>2]=X2[e+264>>2],X2[A+4>>2]=r,r=X2[(e=e+272|0)+4>>2],X2[(A=A+8|0)>>2]=X2[e>>2],X2[A+4>>2]=r;},function(A){A|=0;var e,r=0,f=0,i=P2(0),a=0,n=0;if(P2(0),P2(0),P2(0),K2=e=K2+-64|0,J2[A+290|0]){if(!((0|(f=X2[A+8>>2]))<1))for(;;)if((r=X2[X2[A+16>>2]+a>>2])&&2&X2[r+252>>2]&&(!X2[r+540>>2]||3&J2[r+204|0]||(N4(f=r+68|0,U2[r+132>>2],U2[r+136>>2],U2[r+140>>2],r+148|0,i=J2[A+316|0]&&(i=U2[A+284>>2])!=P2(0)?P2(U2[A+280>>2]-i):P2(U2[A+280>>2]*U2[r+268>>2]),e),r=X2[r+540>>2],N2[X2[X2[r>>2]+12>>2]](r,e),f=X2[A+8>>2])),a=a+4|0,!((0|(n=n+1|0))<(0|f)))break;}else if(!((0|(f=X2[A+248>>2]))<1))for(;;){A:{e:switch(r=X2[X2[A+256>>2]+n>>2],X2[r+220>>2]-2|0){case 0:case 3:break A;default:break e;}!X2[r+540>>2]||3&J2[r+204|0]||(N4(f=r+68|0,U2[r+132>>2],U2[r+136>>2],U2[r+140>>2],r+148|0,i=J2[A+316|0]&&(i=U2[A+284>>2])!=P2(0)?P2(U2[A+280>>2]-i):P2(U2[A+280>>2]*U2[r+268>>2]),e),r=X2[r+540>>2],N2[X2[X2[r>>2]+12>>2]](r,e),f=X2[A+248>>2]);}if(n=n+4|0,!((0|(a=a+1|0))<(0|f)))break;}K2=e+64|0;},function(A,e){A|=0,e|=0;var r,f,i,a,n,b,t=0,o=0,c=0,k=(P2(0),0),u=0,s=0;if(P2(0),P2(0),P2(0),P2(0),(k=3&(b=X2[e+204>>2]))||1&S2[e+564|0]||((f=U2[e+404>>2])!=P2(0)&&(i=U2[A+268>>2],a=U2[A+272>>2],r=U2[A+264>>2],X2[e+436>>2]=0,n=r,r=P2(P2(1)/f),U2[e+424>>2]=n*r,U2[e+432>>2]=r*a,U2[e+428>>2]=r*i),o=X2[(t=A+264|0)+4>>2],X2[e+440>>2]=X2[t>>2],X2[e+444>>2]=o,o=X2[(t=t+8|0)+4>>2],X2[(c=e+448|0)>>2]=X2[t>>2],X2[c+4>>2]=o),X2[e+192>>2]){if(1&b)4!=(-2&X2[e+220>>2])&&(X2[e+220>>2]=2);else {if((0|(t=X2[A+248>>2]))==X2[A+252>>2]&&!((0|(c=t?t<<1:1))<=(0|t))){if(c&&(X2[6258]=X2[6258]+1,(o=L2(19+(c<<2)|0))&&(X2[(u=o+19&-16)-4>>2]=o)),1<=(0|t))for(o=t;;)if(X2[s+u>>2]=X2[X2[A+256>>2]+s>>2],s=s+4|0,!(o=o-1|0))break;(o=X2[A+256>>2])&&J2[A+260|0]&&(X2[6259]=X2[6259]+1,q2(X2[o-4>>2]),k=3&X2[e+204>>2],t=X2[A+248>>2]),X2[A+256>>2]=u,X2[A+252>>2]=c,S2[A+260|0]=1;}X2[A+248>>2]=t+1,X2[X2[A+256>>2]+(t<<2)>>2]=e;}N2[X2[X2[A>>2]+36>>2]](A,e,k?2:1,k?-3:-1);}},function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a,n,b,t,o,c=0,k=0,u=0,s=(P2(0),0),l=0;if(P2(0),P2(0),P2(0),P2(0),3&(o=X2[e+204>>2])||1&S2[e+564|0]||((a=U2[e+404>>2])!=P2(0)&&(n=U2[A+268>>2],b=U2[A+272>>2],i=U2[A+264>>2],X2[e+436>>2]=0,t=i,i=P2(P2(1)/a),U2[e+424>>2]=t*i,U2[e+432>>2]=i*b,U2[e+428>>2]=i*n),k=X2[(c=A+264|0)+4>>2],X2[e+440>>2]=X2[c>>2],X2[e+444>>2]=k,k=X2[(c=c+8|0)+4>>2],X2[(u=e+448|0)>>2]=X2[c>>2],X2[u+4>>2]=k),X2[e+192>>2]){if(1&o)4!=(-2&X2[e+220>>2])&&(X2[e+220>>2]=2);else {if((0|(c=X2[A+248>>2]))==X2[A+252>>2]&&!((0|(u=c?c<<1:1))<=(0|c))){if(u&&(X2[6258]=X2[6258]+1,(k=L2(19+(u<<2)|0))&&(X2[(s=k+19&-16)-4>>2]=k)),1<=(0|c))for(k=c;;)if(X2[l+s>>2]=X2[X2[A+256>>2]+l>>2],l=l+4|0,!(k=k-1|0))break;(k=X2[A+256>>2])&&J2[A+260|0]&&(X2[6259]=X2[6259]+1,q2(X2[k-4>>2]),c=X2[A+248>>2]),X2[A+256>>2]=s,X2[A+252>>2]=u,S2[A+260|0]=1;}X2[A+248>>2]=c+1,X2[X2[A+256>>2]+(c<<2)>>2]=e;}N2[X2[X2[A>>2]+36>>2]](A,e,r,f);}},function(A,e){e|=0;var r,f=0,i=0,a=0,f=X2[(A|=0)+248>>2];A:if(!((0|f)<1)){for(i=r=X2[A+256>>2];;){if(X2[i>>2]==(0|e))break;if(i=i+4|0,(0|f)==(0|(a=a+1|0)))break A;}(0|f)<=(0|a)||(X2[(a=i)>>2]=X2[(f=(i=f-1|0)<<2)+r>>2],X2[A+248>>2]=i,X2[f+X2[A+256>>2]>>2]=e);}y4(A,e);},function(A,e){var r;e|=0,J2[(A|=0)+289|0]&&(r=X2[A+216>>2])&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+216>>2]=e,S2[A+289|0]=0,X2[X2[A+212>>2]+8>>2]=e;},function(A){return X2[(A|=0)+216>>2];},function(A){return X2[(A|=0)+228>>2];},z4,z4,X1,function(A){var e,r,f=0,i=0;if(1<=X2[(A|=0)+248>>2])for(;;)if(r=X2[X2[A+256>>2]+f>>2],X2[(e=r)+472>>2]=0,X2[e+476>>2]=0,X2[(e=e+496|0)>>2]=0,X2[4+e>>2]=0,X2[(e=r+488|0)>>2]=0,X2[4+e>>2]=0,X2[(r=r+480|0)>>2]=0,f=f+4|(X2[4+r>>2]=0),!((0|(i=i+1|0))<X2[A+248>>2]))break;},R1,O4,R1,O4,function(A,e){A|=0,e=P2(e);var r,f,i,a,n,b,t=P2(0),o=P2(0),c=P2(0),k=P2(0),u=0,s=P2(0),l=P2(0),B=P2(0),v=(P2(0),0),d=(P2(0),0);if(1<=(0|(u=X2[A+248>>2])))for(;;)if(r=X2[X2[A+256>>2]+v>>2],3&J2[r+204|0]||(k=U2[(u=r+372|0)>>2],i=U2[r+504>>2],o=k0(P2(P2(1)-i),e),s=P2(k*o),U2[u>>2]=s,k=P2(o*U2[(a=r+376|0)>>2]),U2[a>>2]=k,o=P2(o*U2[(n=r+380|0)>>2]),U2[n>>2]=o,t=U2[r+388>>2],b=U2[r+508>>2],c=k0(P2(P2(1)-b),e),l=P2(t*c),U2[r+388>>2]=l,B=P2(c*U2[(f=r+392|0)>>2]),U2[f>>2]=B,c=P2(c*U2[(f=r+396|0)>>2]),U2[f>>2]=c,f=r+388|0,J2[r+512|0]&&(U2[r+524>>2]>P2(P2(P2(l*l)+P2(B*B))+P2(c*c))&&U2[r+520>>2]>P2(P2(P2(s*s)+P2(k*k))+P2(o*o))&&(t=U2[r+516>>2],c=P2(c*t),U2[r+396>>2]=c,B=P2(B*t),U2[r+392>>2]=B,l=P2(l*t),U2[r+388>>2]=l,o=P2(o*t),U2[n>>2]=o,k=P2(k*t),U2[a>>2]=k,s=P2(s*t),U2[r+372>>2]=s),(t=P2(O2(P2(P2(P2(s*s)+P2(k*k))+P2(o*o)))))<i&&(t>P2(.004999999888241291)?(t=P2(P2(1)/t),o=P2(o-P2(P2(o*t)*P2(.004999999888241291))),U2[n>>2]=o,k=P2(k-P2(P2(k*t)*P2(.004999999888241291))),U2[a>>2]=k,s=P2(s-P2(P2(s*t)*P2(.004999999888241291))),U2[r+372>>2]=s):(X2[u>>2]=0,X2[u+4>>2]=0,X2[(u=u+8|0)>>2]=0,X2[u+4>>2]=0,o=P2(0),k=P2(0),s=P2(0))),(t=P2(O2(P2(P2(P2(l*l)+P2(B*B))+P2(c*c)))))<b&&(t>P2(.004999999888241291)?(i=c,c=P2(P2(1)/t),U2[r+396>>2]=i-P2(P2(i*c)*P2(.004999999888241291)),U2[r+392>>2]=B-P2(P2(B*c)*P2(.004999999888241291)),U2[r+388>>2]=l-P2(P2(l*c)*P2(.004999999888241291))):(X2[f>>2]=0,X2[4+f>>2]=0,X2[(u=8+f|0)>>2]=0,X2[u+4>>2]=0))),N4(r+4|0,s,k,o,f,e,r+68|0),u=X2[A+248>>2]),v=v+4|0,!((0|(d=d+1|0))<(0|u)))break;},function(A,e){A|=0,e=P2(e);var r,f,i,a,n,b,t,o,c,k,u,s,l=0,B=0,v=0,d=P2(0),Z=0,_=0,g=P2(0),E=0,Q=0,w=P2(0);if(K2=s=K2-304|0,1<=(0|(E=X2[A+248>>2])))for(v=X2[A+256>>2],i=56+s|0,a=40+s|0,n=24+s|0,Q=104+s|0,b=168+s|0,t=152+s|0,Z=288+s|0;;){B=X2[v>>2],X2[B+268>>2]=1065353216;A:{e:switch(X2[B+220>>2]-2|0){case 0:case 3:break A;default:break e;}3&J2[B+204|0]||(N4(_=B+4|0,U2[B+372>>2],U2[(c=B+376|0)>>2],U2[(k=B+380|0)>>2],u=B+388|0,e,240+s|0),J2[A+44|0]&&(d=U2[B+276>>2],(d=P2(d*d))!=P2(0)&&(g=P2(U2[288+s>>2]-U2[(l=B+52|0)>>2]),w=P2(g*g),g=P2(U2[292+s>>2]-U2[B+56>>2]),w=P2(w+P2(g*g)),g=P2(U2[296+s>>2]-U2[B+60>>2]),d<P2(w+P2(g*g))&&!(19<X2[X2[B+192>>2]+4>>2])&&(X2[6799]=X2[6799]+1,r=X2[A+68>>2],r=0|N2[X2[X2[r>>2]+36>>2]](r),f=X2[l+4>>2],X2[t>>2]=X2[l>>2],X2[4+t>>2]=f,o=X2[(l=l+8|0)+4>>2],X2[(f=8+t|0)>>2]=X2[l>>2],X2[4+f>>2]=o,l=X2[Z+4>>2],X2[b>>2]=X2[Z>>2],X2[4+b>>2]=l,o=X2[(l=Z+8|0)+4>>2],X2[(f=8+b|0)>>2]=X2[l>>2],X2[4+f>>2]=o,X2[140+s>>2]=1065353216,X2[136+s>>2]=22792,X2[216+s>>2]=0,X2[232+s>>2]=X2[A+24>>2],X2[228+s>>2]=r,X2[220+s>>2]=B,X2[Q>>2]=0,X2[Q+4>>2]=0,X2[(r=Q+8|0)>>2]=0,X2[4+r>>2]=0,X2[Q+16>>2]=0,X2[84+s>>2]=0,X2[88+s>>2]=0,X2[100+s>>2]=1065353216,X2[92+s>>2]=1065353216,X2[96+s>>2]=1065353216,X2[76+s>>2]=8,X2[80+s>>2]=0,X2[72+s>>2]=14616,X2[128+s>>2]=0,d=U2[B+272>>2],U2[108+s>>2]=d,U2[124+s>>2]=d,U2[224+s>>2]=U2[A+56>>2],r=X2[B+188>>2],X2[144+s>>2]=X2[r+4>>2],X2[148+s>>2]=X2[r+8>>2],f=X2[l+4>>2],X2[(r=8+i|0)>>2]=X2[l>>2],X2[4+r>>2]=f,l=X2[Z+4>>2],X2[i>>2]=X2[Z>>2],X2[4+i>>2]=l,f=X2[4+(r=_+8|0)>>2],X2[(l=16+s|0)>>2]=X2[r>>2],X2[l+4>>2]=f,r=X2[(l=B+20|0)+4>>2],X2[n>>2]=X2[l>>2],X2[4+n>>2]=r,f=X2[4+(r=B+28|0)>>2],X2[(l=8+n|0)>>2]=X2[r>>2],X2[l+4>>2]=f,r=X2[(l=B+36|0)+4>>2],X2[a>>2]=X2[l>>2],X2[4+a>>2]=r,f=X2[4+(r=B+44|0)>>2],X2[(l=8+a|0)>>2]=X2[r>>2],X2[l+4>>2]=f,l=X2[_+4>>2],X2[8+s>>2]=X2[_>>2],X2[12+s>>2]=l,X4(A,72+s|0,_,8+s|0,136+s|0,P2(0)),(d=U2[140+s>>2])<P2(1))))?(U2[B+268>>2]=d,N4(_,U2[B+372>>2],U2[c>>2],U2[k>>2],u,P2(d*e),240+s|0),w4(B,240+s|(X2[B+268>>2]=0))):w4(B,240+s|0));}if(v=v+4|0,!(E=E-1|0))break;}if(J2[A+291|0]&&!((0|(v=X2[A+324>>2]))<1))for(_=0;;){if(Z=X2[X2[A+332>>2]+(_<<2)>>2],1<=(0|(E=X2[Z+844>>2]))){for(l=X2[Z+840>>2],l=X2[l+252>>2]<<30>>31&l,B=X2[Z+836>>2],B=X2[B+252>>2]<<30>>31&B,v=Z+68|0,Q=0;;)if((e=P2(U2[B+232>>2]*U2[l+232>>2]))>P2(0)&&(d=U2[v+68>>2])!=P2(0)&&(X2[148+s>>2]=0,g=P2(e*P2(d*P2(-U2[v>>2]))),U2[136+s>>2]=g,w=P2(e*P2(d*P2(-U2[v+4>>2]))),U2[140+s>>2]=w,e=P2(e*P2(d*P2(-U2[v+8>>2]))),U2[144+s>>2]=e,X2[252+s>>2]=0,U2[248+s>>2]=U2[v-8>>2]-U2[B+60>>2],U2[244+s>>2]=U2[v-12>>2]-U2[B+56>>2],U2[240+s>>2]=U2[v-16>>2]-U2[B+52>>2],X2[20+s>>2]=0,U2[16+s>>2]=U2[v-24>>2]-U2[l+60>>2],U2[12+s>>2]=U2[v-28>>2]-U2[l+56>>2],U2[8+s>>2]=U2[v-32>>2]-U2[l+52>>2],K4(B,136+s|0,240+s|0),X2[84+s>>2]=0,U2[80+s>>2]=-e,U2[76+s>>2]=-w,U2[72+s>>2]=-g,K4(l,72+s|0,8+s|0),E=X2[Z+844>>2]),v=v+208|0,!((0|(Q=Q+1|0))<(0|E)))break;v=X2[A+324>>2];}if(!((0|(_=_+1|0))<(0|v)))break;}K2=304+s|0;},function(A){var e=0,r=0,f=0,i=0,a=0,n=0,b=0,t=0,e=X2[(A|=0)+220>>2];if(N2[X2[X2[e>>2]+8>>2]](e,A,X2[A+24>>2]),1<=(0|(b=X2[A+324>>2])))for(t=X2[A+332>>2];;){if(e=X2[t+(n<<2)>>2],(r=X2[e+836>>2])&&(e=X2[e+840>>2])&&!(3&X2[r+204>>2]||3&J2[e+204|0])){if(e=X2[e+208>>2],i=X2[X2[A+220>>2]+16>>2],a=X2[r+208>>2],(0|(r=X2[(f=i+(a<<3)|0)>>2]))!=(0|a)&&(X2[f>>2]=X2[(r=i+(r<<3)|0)>>2],a=X2[r>>2],(0|(r=X2[(f=i+(a<<3)|0)>>2]))!=(0|a)))for(;;)if(X2[f>>2]=X2[(r=i+(r<<3)|0)>>2],a=X2[r>>2],(0|(r=X2[(f=i+(a<<3)|0)>>2]))==(0|a))break;if((0|(f=X2[(r=i+(e<<3)|0)>>2]))!=(0|e)&&(X2[r>>2]=X2[(e=i+(f<<3)|0)>>2],e=X2[e>>2],(0|(r=X2[(f=i+(e<<3)|0)>>2]))!=(0|e)))for(;;)if(X2[f>>2]=X2[(e=i+(r<<3)|0)>>2],e=X2[e>>2],(0|(r=X2[(f=i+(e<<3)|0)>>2]))==(0|e))break;(0|e)!=(0|a)&&(X2[(r=i+(a<<3)|0)>>2]=e,X2[(e=i+(e<<3)|0)+4>>2]=X2[e+4>>2]+X2[r+4>>2]);}if((0|b)==(0|(n=n+1|0)))break;}if(1<=(0|(b=X2[A+228>>2])))for(t=X2[A+236>>2],n=0;;){if(e=X2[t+(n<<2)>>2],J2[e+20|0]&&(r=X2[e+28>>2],!(3&J2[r+204|0]||(e=X2[e+32>>2],3&J2[e+204|0])))){if(e=X2[e+208>>2],i=X2[X2[A+220>>2]+16>>2],a=X2[r+208>>2],(0|(r=X2[(f=i+(a<<3)|0)>>2]))!=(0|a)&&(X2[f>>2]=X2[(r=i+(r<<3)|0)>>2],a=X2[r>>2],(0|(r=X2[(f=i+(a<<3)|0)>>2]))!=(0|a)))for(;;)if(X2[f>>2]=X2[(r=i+(r<<3)|0)>>2],a=X2[r>>2],(0|(r=X2[(f=i+(a<<3)|0)>>2]))==(0|a))break;if((0|(f=X2[(r=i+(e<<3)|0)>>2]))!=(0|e)&&(X2[r>>2]=X2[(e=i+(f<<3)|0)>>2],e=X2[e>>2],(0|(r=X2[(f=i+(e<<3)|0)>>2]))!=(0|e)))for(;;)if(X2[f>>2]=X2[(e=i+(r<<3)|0)>>2],e=X2[e>>2],(0|(r=X2[(f=i+(e<<3)|0)>>2]))==(0|e))break;(0|e)!=(0|a)&&(X2[(r=i+(a<<3)|0)>>2]=e,X2[(e=i+(e<<3)|0)+4>>2]=X2[e+4>>2]+X2[r+4>>2]);}if((0|b)==(0|(n=n+1|0)))break;}e=X2[A+220>>2],N2[X2[X2[e>>2]+12>>2]](e,A);},function(A,e){e|=0;var r,f,i,a,n,b,t,o,c,k=0,u=0,s=0,l=0,B=0,v=0,d=0,Z=0,_=0,g=0,E=0,Q=0,w=0;if(K2=c=K2-16|0,(0|(s=X2[(A|=0)+196>>2]))<(0|(B=X2[A+228>>2]))){if((0|B)>X2[A+200>>2]){if(B&&(X2[6258]=X2[6258]+1,(k=L2(19+(B<<2)|0))&&(X2[(l=k+19&-16)-4>>2]=k)),1<=(0|s))for(k=s;;)if(X2[u+l>>2]=X2[X2[A+204>>2]+u>>2],u=u+4|0,!(k=k-1|0))break;(k=X2[A+204>>2])&&J2[A+208|0]&&(X2[6259]=X2[6259]+1,q2(X2[k-4>>2])),X2[A+204>>2]=l,X2[A+200>>2]=B,S2[A+208|0]=1;}for(u=s<<2,k=B-s|0;;)if(u=u+4|(X2[X2[A+204>>2]+u>>2]=0),!(k=k-1|0))break;}if(X2[A+196>>2]=B,1<=(0|N2[X2[X2[A>>2]+104>>2]](A)))for(k=u=0;;)if(X2[X2[A+204>>2]+u>>2]=X2[X2[A+236>>2]+u>>2],u=u+4|0,k=k+1|0,!((0|N2[X2[X2[A>>2]+104>>2]](A))>(0|k)))break;if(2<=(0|(k=X2[A+196>>2]))&&!function A(e,r,f){var i=0,a=0,n=0,b=0,t=0,o=0,c=0,k=0,u=0,s=0;for(;;){for(u=r,a=X2[e+12>>2],k=X2[a+((r+f|0)/2<<2)>>2],i=f;;){if(c=X2[X2[k+28>>2]+208>>2],t=(0|c)<0){for(n=r-1|0,b=((r<<2)+a|0)-4|0,s=X2[X2[k+32>>2]+208>>2];;)if(n=n+1|0,o=X2[(b=b+4|0)>>2],!((0|(r=(0|(r=X2[X2[o+28>>2]+208>>2]))<=-1?X2[X2[o+32>>2]+208>>2]:r))<(0|s)))break;}else for(n=r-1|0,b=((r<<2)+a|0)-4|0;;)if(n=n+1|0,o=X2[(b=b+4|0)>>2],!((0|(r=(0|(r=X2[X2[o+28>>2]+208>>2]))<=-1?X2[X2[o+32>>2]+208>>2]:r))<(0|c)))break;for(t?(r=i+1|0,t=(i<<2)+a|0,c=X2[X2[k+32>>2]+208>>2]):(r=i+1|0,t=(i<<2)+a|0);;)if(a=X2[t>>2],(0|(i=X2[X2[a+28>>2]+208>>2]))<=-1&&(i=X2[X2[a+32>>2]+208>>2]),t=t-4|0,r=r-1|0,!((0|c)<(0|i)))break;if(!((0|(r=(0|r)<(0|n)?(i=r,n):(X2[b>>2]=a,X2[X2[e+12>>2]+(r<<2)>>2]=o,i=r-1|0,n+1|0)))<=(0|i)))break;a=X2[e+12>>2];}if((0|u)<(0|i)&&A(e,u,i),!((0|r)<(0|f)))break;}}(A+192|0,0,k-1|0),(k=0)|N2[X2[X2[A>>2]+104>>2]](A)&&(k=X2[A+204>>2]),u=X2[A+196>>2],n=s=X2[A+212>>2],b=0|N2[X2[X2[A>>2]+20>>2]](A),X2[n+20>>2]=b,X2[s+16>>2]=u,X2[s+12>>2]=k,X2[s+4>>2]=e,(0|(k=X2[s+32>>2]))<=-1)for(X2[s+36>>2]<=-1&&((u=X2[s+40>>2])&&J2[s+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[u-4>>2])),X2[s+36>>2]=0,X2[s+40>>2]=0,S2[s+44|0]=1),l=k<<2;;)if(l=l+4|(X2[X2[s+40>>2]+l>>2]=0),!((u=k)>>>0<=(k=k+1|0)>>>0))break;if(((X2[s+32>>2]=0)|(k=X2[s+52>>2]))<=-1)for(X2[s+56>>2]<=-1&&((u=X2[s+60>>2])&&J2[s- -64|0]&&(X2[6259]=X2[6259]+1,q2(X2[u-4>>2])),X2[s+56>>2]=0,X2[s+60>>2]=0,S2[s- -64|0]=1),l=k<<2;;)if(l=l+4|(X2[X2[s+60>>2]+l>>2]=0),!((u=k)>>>0<=(k=k+1|0)>>>0))break;if(((X2[s+52>>2]=0)|(k=X2[s+72>>2]))<=-1)for(X2[s+76>>2]<=-1&&((u=X2[s+80>>2])&&J2[s+84|0]&&(X2[6259]=X2[6259]+1,q2(X2[u-4>>2])),X2[s+76>>2]=0,X2[s+80>>2]=0,S2[s+84|0]=1),l=k<<2;;)if(l=l+4|(X2[X2[s+80>>2]+l>>2]=0),!((u=k)>>>0<=(k=k+1|0)>>>0))break;if(X2[s+72>>2]=0,k=X2[A+216>>2],u=X2[A+24>>2],b=k,t=X2[A+8>>2],o=0|N2[X2[X2[u>>2]+36>>2]](u),n=X2[X2[k>>2]+8>>2],N2[n](0|b,0|t,0|o),i=X2[A+212>>2],Z=X2[A+24>>2],r=X2[A+220>>2],(0|(u=X2[r+28>>2]))<=-1)for(X2[r+32>>2]<=-1&&((k=X2[r+36>>2])&&J2[r+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[k-4>>2])),X2[r+32>>2]=0,X2[r+36>>2]=0,S2[r+40|0]=1),l=u<<2;;)if(l=l+4|(X2[X2[r+36>>2]+l>>2]=0),!((k=u)>>>0<=(u=k+1|0)>>>0))break;if(!(((X2[r+28>>2]=0)|(d=X2[r+8>>2]))<=0)){for(_=r+4|0,s=X2[r+16>>2],B=0;;){if((0|(k=X2[(l=s+((u=B)<<3)|0)>>2]))!=(0|u)&&(X2[l>>2]=X2[(k=s+(k<<3)|0)>>2],(0|(u=X2[k>>2]))!=(0|(v=X2[(k=s+(u<<3)|0)>>2]))))for(;;)if(X2[(u=k)>>2]=X2[(k=s+(v<<3)|0)>>2],(0|(u=X2[k>>2]))==(0|(v=X2[(k=s+(u<<3)|0)>>2])))break;if(X2[l>>2]=u,(0|d)==(0|(B=B+1|0)))break;}if(2<=(0|d)&&(!function A(e,r,f){for(var i,a,n,b=0,t=0,o=0,c=0,k=0,u=0,s=0;;){for(k=X2[e+12>>2],a=X2[k+((f+(i=r)|0)/2<<3)>>2],o=r,c=f;;){for(t=((o<<3)+k|0)-8|0;o=o+1|0,X2[(t=t+8|0)>>2]<(0|a););for(r=o-1|0,b=8+(c<<3)|0;c=c-1|0,u=b+k|0,b=s=b-8|0,X2[u-8>>2]>(0|a););if((0|r)<=(0|(b=c+1|0))&&(n=X2[t>>2],u=X2[t+4>>2],r=X2[4+(b=k+s|0)>>2],X2[t>>2]=X2[b>>2],X2[t+4>>2]=r,r=X2[e+12>>2]+s|0,X2[r>>2]=n,X2[r+4>>2]=u,b=c,r=o),!((0|r)<=(0|b)))break;k=X2[e+12>>2],o=r,c=b;}if((0|i)<(0|b)&&A(e,i,b),!((0|r)<(0|f)))break;}}(_,0,d-1|0),d=X2[r+8>>2]),!((0|d)<1))for(w=(Q=X2[r+16>>2])+4|0,a=Q+8|0,u=0;;){B=(l=(0|(k=(s=u)+1|0))<(0|d)?d:k)-1|0,k=(v=s<<3)+a|0,_=X2[v+Q>>2];A:{for(;;){if((0|u)==(0|B)){u=l;break A;}if(u=u+1|0,g=X2[k>>2],k=k+8|0,(0|_)!=(0|g))break;}B=u-1|0;}A:if(!((0|B)<(0|s))){for(g=s-1|0,l=X2[A+16>>2],E=1,k=v=v+w|0;;)if(f=X2[l+(X2[k>>2]<<2)>>2],(0|_)==X2[f+208>>2]&&(E&=4!=(0|(f=X2[f+220>>2]))&1!=(0|f)),k=k+8|0,(0|(g=g+1|0))==(0|B))break;if(!E)for(k=B-s|0;;){if(s=X2[l+(X2[v>>2]<<2)>>2],(0|_)==X2[s+208>>2]&&2==X2[s+220>>2]&&(X2[s+220>>2]=3,X2[s+224>>2]=0),!k)break A;v=v+8|0,k=k-1|0;}for(k=B-s|0;;){if(s=X2[l+(X2[v>>2]<<2)>>2],(0|_)==X2[s+208>>2]&&4!=(-2&X2[s+220>>2])&&(X2[s+220>>2]=2),!k)break A;v=v+8|0,k=k-1|0;}}if(!((0|u)<(0|d)))break;}}if(1<=(0|(v=0|N2[X2[X2[Z>>2]+36>>2]](Z))))for(l=0;;){_=0|N2[X2[X2[Z>>2]+40>>2]](Z,l),k=X2[_+840>>2],u=X2[_+836>>2];A:{if(2==X2[u+220>>2]||!u){if(!k)break A;if(2==X2[k+220>>2])break A;}if(2&(s=X2[u+204>>2])&&(4&s||2==X2[u+220>>2]||3&J2[k+204|0]||(4!=(-2&X2[k+220>>2])&&(X2[k+220>>2]=1),X2[k+224>>2]=0)),2&(B=X2[k+204>>2])&&(4&B|3&s||2!=X2[k+220>>2]&&(4!=(-2&X2[u+220>>2])&&(X2[u+220>>2]=1),X2[u+224>>2]=0)),J2[r+64|0]&&0|N2[X2[X2[Z>>2]+28>>2]](Z,u,k)){if((0|(s=X2[r+28>>2]))==X2[r+32>>2]&&!((0|(d=s?s<<1:1))<=(0|s))){if(B=0,d&&(X2[6258]=X2[6258]+1,(k=L2(19+(d<<2)|0))&&(X2[(B=k+19&-16)-4>>2]=k)),1<=(0|s))for(u=0,k=s;;)if(X2[u+B>>2]=X2[X2[r+36>>2]+u>>2],u=u+4|0,!(k=k-1|0))break;(k=X2[r+36>>2])&&J2[r+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[k-4>>2]),s=X2[r+28>>2]),X2[r+36>>2]=B,S2[r+40|0]=1,X2[r+32>>2]=d;}X2[r+28>>2]=s+1,X2[X2[r+36>>2]+(s<<2)>>2]=_;}}if((0|v)==(0|(l=l+1|0)))break;}if(J2[r+64|0]){if(_=X2[r+8>>2],2<=(0|(E=X2[r+28>>2]))&&!function A(e,r,f){for(var i,a,n,b=0,t=0,o=0,c=0,k=0,u=0,s=0;;){for(a=r,t=X2[e+12>>2],i=X2[t+((r+f|0)/2<<2)>>2],b=f;;){if(k=(0|(s=X2[X2[i+836>>2]+208>>2]))<0)for(o=r-1|0,c=((r<<2)+t|0)-4|0,n=X2[X2[i+840>>2]+208>>2];o=o+1|0,u=X2[(c=c+4|0)>>2],(0|(r=(0|(r=X2[X2[u+836>>2]+208>>2]))<=-1?X2[X2[u+840>>2]+208>>2]:r))<(0|n););else for(o=r-1|0,c=((r<<2)+t|0)-4|0;o=o+1|0,u=X2[(c=c+4|0)>>2],(0|(r=(0|(r=X2[X2[u+836>>2]+208>>2]))<=-1?X2[X2[u+840>>2]+208>>2]:r))<(0|s););for(k?(r=b+1|0,k=(b<<2)+t|0,s=X2[X2[i+840>>2]+208>>2]):(r=b+1|0,k=(b<<2)+t|0);t=X2[k>>2],k=k-4|0,r=r-1|0,(0|s)<(0|(b=(0|(b=X2[X2[t+836>>2]+208>>2]))<=-1?X2[X2[t+840>>2]+208>>2]:b)););if(!((0|(r=(0|r)<(0|o)?(b=r,o):(X2[c>>2]=t,X2[X2[e+12>>2]+(r<<2)>>2]=u,b=r-1|0,o+1|0)))<=(0|b)))break;t=X2[e+12>>2];}if((0|a)<(0|b)&&A(e,a,b),!((0|r)<(0|f)))break;}}(r+24|0,0,E-1|0),!((0|_)<1))for(Z=B=0,d=1;;){l=X2[r+16>>2],Q=X2[l+(B<<3)>>2],w=1;A:if(!((0|_)<=(0|B)))for(k=X2[r+52>>2],u=X2[r+48>>2];;){if(g=X2[X2[A+16>>2]+(X2[4+((B<<3)+l|0)>>2]<<2)>>2],(0|k)!=(0|u))s=k,k=u;else if((0|(s=k?k<<1:1))<=(0|k))s=k;else {if(v=0,s&&(X2[6258]=X2[6258]+1,(u=L2(19+(s<<2)|0))&&(X2[(v=u+19&-16)-4>>2]=u)),1<=(0|k))for(u=0,l=k;;)if(X2[u+v>>2]=X2[X2[r+56>>2]+u>>2],u=u+4|0,!(l=l-1|0))break;(u=X2[r+56>>2])&&J2[r+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[u-4>>2]),k=X2[r+48>>2]),X2[r+56>>2]=v,S2[r+60|0]=1,X2[r+52>>2]=s;}if(X2[r+48>>2]=u=k+1|0,X2[X2[r+56>>2]+(k<<2)>>2]=g,w&=2==(0|(k=X2[g+220>>2]))|5==(0|k),(0|_)==(0|(B=B+1|0))){B=_;break A;}if(k=s,l=X2[r+16>>2],(0|Q)!=X2[l+(B<<3)>>2])break;}if(!(((k=g=0)|E)<=(0|Z))&&(l=X2[r+36>>2],k=X2[(s=l+(v=Z<<2)|0)>>2],(0|(u=X2[X2[k+836>>2]+208>>2]))<=-1&&(u=X2[X2[k+840>>2]+208>>2]),((k=0)|u)==(0|Q))){for(g=(k=(0|(k=Z+1|0))<(0|E)?E:k)-1|0,u=4+(l+v|0)|0,d=Z;;){if((0|d)==(0|g))d=k;else if(v=X2[u>>2],d=d+1|0,u=u+4|0,(0|(l=(0|(l=X2[X2[v+836>>2]+208>>2]))<=-1?X2[X2[v+840>>2]+208>>2]:l))==(0|Q))continue;break;}g=d-Z|0,k=s;}if(w||N2[X2[X2[i>>2]+8>>2]](i,X2[r+56>>2],X2[r+48>>2],k,g,Q),(0|(u=X2[r+48>>2]))<=-1)for(X2[r+52>>2]<=-1&&((k=X2[r+56>>2])&&J2[r+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[k-4>>2])),S2[r+60|0]=1,X2[r+52>>2]=0,X2[r+56>>2]=0),l=u<<2;;)if(l=l+4|(X2[X2[r+56>>2]+l>>2]=0),!((k=u)>>>0<=(u=k+1|0)>>>0))break;if(Z=g?d:Z,!(((X2[r+48>>2]=0)|B)<(0|_)))break;}}else k=0|N2[X2[X2[Z>>2]+44>>2]](Z),u=0|N2[X2[X2[Z>>2]+36>>2]](Z),N2[X2[X2[i>>2]+8>>2]](i,X2[A+16>>2],X2[A+8>>2],k,u,-1);P4(X2[A+212>>2]),k=X2[A+216>>2],N2[X2[X2[k>>2]+16>>2]](k,e,X2[A+72>>2]),K2=16+c|0;},function(A,e){A|=0,e=P2(e),P2(0);var r,f,i,a,n,b=0,t=(P2(0),0),o=0,c=0;if(1<=(0|(t=X2[A+248>>2])))for(n=J2[26508];;){A:if(r=X2[X2[A+256>>2]+o>>2]){e:{r:{f:switch((b=X2[r+220>>2])-2|0){case 0:case 2:break r;default:break f;}if(f=U2[r+372>>2],i=P2(f*f),f=U2[r+376>>2],i=P2(i+P2(f*f)),f=U2[r+380>>2],i=P2(i+P2(f*f)),f=U2[r+532>>2],i<P2(f*f)&&(f=U2[r+388>>2],i=P2(f*f),f=U2[r+392>>2],i=P2(i+P2(f*f)),f=U2[r+396>>2],i=P2(i+P2(f*f)),f=U2[r+536>>2],i<P2(f*f))){U2[r+224>>2]=U2[r+224>>2]+e;break e;}if(X2[r+224>>2]=0,4==(-2&b))break e;X2[r+220>>2]=b=0;break e;}if(4==(0|b))break A;}a=-2&b;e:{r:if(!n){f:{if(2!=(0|a)){if(!(U2[r+224>>2]>P2(2)))break r;if(3&J2[r+204|0]){if(4==(0|a))break A;break e;}if(1!=(0|b))break f;X2[r+220>>2]=3;break A;}if(3&J2[r+204|0])break e;}if(2!=(0|b))break A;X2[r+388>>2]=0,X2[r+392>>2]=0,X2[r+372>>2]=0,X2[r+376>>2]=0,X2[(b=r+396|0)>>2]=0,X2[b+4>>2]=0,X2[(b=r+380|0)>>2]=0,X2[b+4>>2]=0,X2[r+304>>2]=X2[r+304>>2]+2,t=X2[A+248>>2];break A;}if(4==(0|a))break A;X2[r+220>>2]=1;break A;}X2[r+220>>2]=2;}if(o=o+4|0,!((0|(c=c+1|0))<(0|t)))break;}},function(A,e){A|=0,e=P2(e);var r,f,i,a=0,n=0;if((a=X2[A+84>>2])&&N2[0|a](A,e),N2[X2[X2[A>>2]+140>>2]](A,e),X2[A+32>>2]=a=0,U2[A+28>>2]=e,f=A+48|0,i=0|N2[X2[X2[A>>2]+20>>2]](A),X2[f>>2]=i,N2[X2[X2[A>>2]+164>>2]](A,e),N2[X2[X2[A>>2]+44>>2]](A),N2[X2[X2[A>>2]+148>>2]](A),U2[A+104>>2]=e,N2[X2[X2[A>>2]+152>>2]](A,A+92|0),N2[X2[X2[A>>2]+144>>2]](A,e),1<=X2[A+296>>2])for(;;)if(r=X2[X2[A+304>>2]+a>>2],N2[X2[X2[r>>2]+8>>2]](r,A,e),a=a+4|0,!((0|(n=n+1|0))<X2[A+296>>2]))break;N2[X2[X2[A>>2]+156>>2]](A,e),(a=X2[A+80>>2])&&N2[0|a](A,e);},function(A,e){A|=0,e=P2(e);var r,f,i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,x,G,C,h,F,y,V,p,M,S,X,J,U,Y,m=0,N=0,R=0,D=(P2(0),0),T=(P2(0),0),W=(P2(0),P2(0),0),I=(P2(0),P2(0),0);if(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=Y=K2-512|0,1<=X2[A+324>>2])for(;;)if(T=X2[A+24>>2],N2[X2[X2[T>>2]+16>>2]](T,X2[X2[A+332>>2]+W>>2]),W=W+4|0,!((0|(N=N+1|0))<X2[A+324>>2]))break;if((T=X2[A+332>>2])&&J2[A+336|0]&&(X2[6259]=X2[6259]+1,q2(X2[T-4>>2])),X2[A+332>>2]=0,X2[A+324>>2]=0,X2[A+328>>2]=0,(S2[A+336|0]=1)<=(0|(x=X2[A+248>>2])))for(U=X2[A+256>>2],t=124+Y|0,l=92+Y|0,B=72+Y|0,T=392+Y|0,v=264+Y|0,d=248+Y|0,Z=232+Y|0,k=312+Y|0,_=376+Y|0,g=360+Y|0,c=496+Y|0,W=0;;){r=X2[(W<<2)+U>>2],X2[r+268>>2]=1065353216;A:{e:switch(X2[r+220>>2]-2|0){case 0:case 3:break A;default:break e;}if(!(3&J2[r+204|0])&&(N4(a=r+4|0,U2[r+372>>2],U2[r+376>>2],U2[r+380>>2],r+388|0,e,448+Y|0),J2[A+44|0]&&(f=U2[r+276>>2],(n=P2(f*f))!=P2(0)&&(u=U2[496+Y>>2],f=P2(u-U2[(o=r+52|0)>>2]),i=P2(f*f),s=U2[500+Y>>2],f=P2(s-U2[r+56>>2]),b=P2(i+P2(f*f)),i=U2[504+Y>>2],f=P2(i-U2[r+60>>2]),n<P2(b+P2(f*f))&&!(19<X2[X2[r+192>>2]+4>>2])&&(X2[6799]=X2[6799]+1,m=X2[A+68>>2],D=0|N2[X2[X2[m>>2]+36>>2]](m),m=X2[4+o>>2],X2[g>>2]=X2[o>>2],X2[4+g>>2]=m,m=X2[(N=E=8+o|0)+4>>2],X2[(R=8+g|0)>>2]=X2[N>>2],X2[R+4>>2]=m,m=X2[4+c>>2],X2[_>>2]=X2[c>>2],X2[4+_>>2]=m,m=X2[(R=8+c|0)+4>>2],X2[(N=8+_|0)>>2]=X2[R>>2],X2[N+4>>2]=m,X2[348+Y>>2]=1065353216,X2[344+Y>>2]=22792,X2[424+Y>>2]=0,X2[440+Y>>2]=X2[A+24>>2],X2[436+Y>>2]=D,X2[428+Y>>2]=r,X2[k>>2]=0,X2[4+k>>2]=0,X2[(m=8+k|0)>>2]=0,X2[m+4>>2]=0,X2[16+k>>2]=0,X2[292+Y>>2]=0,X2[296+Y>>2]=0,X2[308+Y>>2]=1065353216,X2[300+Y>>2]=1065353216,X2[304+Y>>2]=1065353216,X2[284+Y>>2]=8,X2[288+Y>>2]=0,X2[280+Y>>2]=14616,X2[336+Y>>2]=0,f=U2[r+272>>2],U2[316+Y>>2]=f,U2[332+Y>>2]=f,U2[432+Y>>2]=U2[A+56>>2],m=X2[r+188>>2],X2[352+Y>>2]=X2[m+4>>2],X2[356+Y>>2]=X2[m+8>>2],m=X2[R+4>>2],X2[(N=8+v|0)>>2]=X2[R>>2],X2[N+4>>2]=m,m=X2[4+c>>2],X2[v>>2]=X2[c>>2],X2[4+v>>2]=m,m=X2[(N=8+a|0)+4>>2],X2[(R=224+Y|0)>>2]=X2[N>>2],X2[R+4>>2]=m,m=X2[(N=r+20|0)+4>>2],X2[Z>>2]=X2[N>>2],X2[4+Z>>2]=m,m=X2[(N=r+28|0)+4>>2],X2[(R=8+Z|0)>>2]=X2[N>>2],X2[R+4>>2]=m,m=X2[(N=r+36|0)+4>>2],X2[d>>2]=X2[N>>2],X2[4+d>>2]=m,m=X2[(N=r+44|0)+4>>2],X2[(R=8+d|0)>>2]=X2[N>>2],X2[R+4>>2]=m,m=X2[4+a>>2],X2[216+Y>>2]=X2[a>>2],X2[220+Y>>2]=m,X4(A,280+Y|0,a,216+Y|0,344+Y|0,P2(0)),(f=U2[348+Y>>2])<P2(1)))))){if(G=P2(f*P2(s-U2[r+56>>2])),b=P2(f*P2(u-U2[r+52>>2])),C=P2(f*P2(i-U2[r+60>>2])),n=P2(P2(P2(G*P2(-U2[396+Y>>2]))-P2(b*U2[392+Y>>2]))-P2(C*U2[400+Y>>2])),m=X2[A+24>>2],a=0|N2[X2[X2[m>>2]+12>>2]](m,r,X2[424+Y>>2]),(0|(N=X2[A+324>>2]))==X2[A+328>>2]&&!((0|(D=N?N<<1:1))<=(0|N))){if(R=0,D&&(X2[6258]=X2[6258]+1,(m=L2(19+(D<<2)|0))&&(X2[(R=m+19&-16)-4>>2]=m)),1<=(0|N))for(I=0,m=N;;)if(X2[R+I>>2]=X2[X2[A+332>>2]+I>>2],I=I+4|0,!(m=m-1|0))break;(m=X2[A+332>>2])&&J2[A+336|0]&&(X2[6259]=X2[6259]+1,q2(X2[m-4>>2]),N=X2[A+324>>2]),X2[A+332>>2]=R,S2[A+336|0]=1,X2[A+328>>2]=D;}X2[X2[A+332>>2]+(N<<2)>>2]=a,X2[A+324>>2]=N+1,m=X2[424+Y>>2],h=U2[m+20>>2],F=U2[m+36>>2],y=U2[m+40>>2],V=U2[m+8>>2],p=U2[m+24>>2],Q=U2[m+60>>2],u=U2[m+56>>2],w=U2[m+52>>2],M=U2[m+44>>2],S=U2[m+12>>2],X=U2[m+28>>2],J=U2[m+4>>2],s=U2[r+60>>2],i=U2[r+52>>2],f=U2[r+56>>2],X2[(m=16+Y|0)>>2]=0,X2[m+4>>2]=0,X2[l>>2]=0,X2[4+l>>2]=0,X2[(m=8+l|0)>>2]=0,X2[m+4>>2]=0,X2[t>>2]=0,X2[4+t>>2]=0,X2[(m=8+t|0)>>2]=0,X2[m+4>>2]=0,X2[(m=16+t|0)>>2]=0,X2[m+4>>2]=0,X2[(m=24+t|0)>>2]=0,X2[m+4>>2]=0,X2[(m=32+t|0)>>2]=0,X2[m+4>>2]=0,X2[(m=40+t|0)>>2]=0,X2[m+4>>2]=0,X2[48+t>>2]=0,m=X2[T+4>>2],X2[B>>2]=X2[T>>2],X2[4+B>>2]=m,m=X2[(N=T+8|0)+4>>2],X2[(R=8+B|0)>>2]=X2[N>>2],X2[R+4>>2]=m,X2[8+Y>>2]=0,X2[12+Y>>2]=0,X2[36+Y>>2]=0,U2[88+Y>>2]=n,b=P2(b+i),n=P2(G+f),i=P2(C+s),f=P2(-u),U2[32+Y>>2]=P2(P2(P2(S*b)+P2(X*n))+P2(M*i))+P2(P2(P2(X*f)-P2(S*w))-P2(M*Q)),U2[28+Y>>2]=P2(P2(P2(b*V)+P2(n*p))+P2(i*y))+P2(P2(P2(p*f)-P2(V*w))-P2(y*Q)),U2[24+Y>>2]=P2(P2(P2(b*J)+P2(n*h))+P2(i*F))+P2(P2(P2(h*f)-P2(J*w))-P2(F*Q)),D=H2(D1(a,8+Y|0),208)+a|0,X2[D+100>>2]=0,U2[D+88>>2]=m2(P2(z2(P2(U2[r+228>>2]*U2[X2[424+Y>>2]+228>>2]),P2(-10))),P2(10)),m=X2[4+E>>2],X2[(N=D+60|0)>>2]=X2[E>>2],X2[N+4>>2]=m,R=X2[4+o>>2],N=X2[o>>2],X2[D+48>>2]=0,U2[D+44>>2]=i,U2[D+40>>2]=n,X2[(m=D+52|0)>>2]=N,X2[m+4>>2]=R,U2[D+36>>2]=b;}}if((0|x)==(0|(W=W+1|0)))break;}K2=512+Y|0;},function(A,e){A|=0,e=P2(e);var r,f,i,a,n,b,t,o,c,k,u,s=0,l=0,B=(P2(0),P2(0),0),v=0;if(K2=u=K2-32|0,1<=(0|(l=X2[A+8>>2])))for(a=P2(P2(1)/e),s=l;;)if((r=X2[X2[A+16>>2]+B>>2])&&2&X2[r+252>>2]&&2!=X2[r+220>>2]&&(s=(n=2&J2[r+204|0])?l:s,n&&e!=P2(0)&&((s=X2[r+540>>2])&&N2[X2[X2[s>>2]+8>>2]](s,r+4|0),X2[r+384>>2]=0,U2[(s=r+380|0)>>2]=a*P2(U2[(l=r+60|0)>>2]-U2[(n=r+124|0)>>2]),U2[r+376>>2]=a*P2(U2[r+56>>2]-U2[r+120>>2]),U2[(f=r+372|0)>>2]=a*P2(U2[(b=r+52|0)>>2]-U2[(t=r+116|0)>>2]),E4(r+68|0,r+4|0,16+u|0,12+u|0),X2[r+400>>2]=0,k=U2[12+u>>2],U2[(i=r+396|0)>>2]=a*P2(k*U2[24+u>>2]),U2[r+392>>2]=a*P2(k*U2[20+u>>2]),U2[(o=r+388|0)>>2]=a*P2(k*U2[16+u>>2]),k=X2[s+4>>2],X2[(c=r+140|0)>>2]=X2[s>>2],X2[4+c>>2]=k,s=X2[4+f>>2],X2[r+132>>2]=X2[f>>2],X2[r+136>>2]=s,s=X2[4+o>>2],X2[r+148>>2]=X2[o>>2],X2[r+152>>2]=s,f=X2[4+i>>2],X2[(s=r+156|0)>>2]=X2[i>>2],X2[s+4>>2]=f,s=X2[r+8>>2],X2[r+68>>2]=X2[r+4>>2],X2[r+72>>2]=s,i=X2[4+(f=r+12|0)>>2],X2[(s=r+76|0)>>2]=X2[f>>2],X2[s+4>>2]=i,i=X2[4+(f=r+20|0)>>2],X2[(s=r+84|0)>>2]=X2[f>>2],X2[s+4>>2]=i,i=X2[4+(f=r+28|0)>>2],X2[(s=r+92|0)>>2]=X2[f>>2],X2[s+4>>2]=i,i=X2[4+(f=r+44|0)>>2],X2[(s=r+108|0)>>2]=X2[f>>2],X2[s+4>>2]=i,s=r+100|0,f=X2[4+(r=r+36|0)>>2],X2[s>>2]=X2[r>>2],X2[s+4>>2]=f,s=X2[l+4>>2],X2[n>>2]=X2[l>>2],X2[4+n>>2]=s,s=X2[4+b>>2],X2[t>>2]=X2[b>>2],X2[4+t>>2]=s,s=l=X2[A+8>>2])),B=B+4|0,!((0|(v=v+1|0))<(0|s)))break;K2=32+u|0;},function(A,e){A|=0,e|=0;var r,f,i=0,a=0,n=0,b=P2(0),t=P2(0),o=0,c=P2(0),k=P2(0),u=P2(0),s=P2(0),l=0,B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=0,g=0,E=P2(0),Q=(P2(0),P2(0)),w=P2(0),G=0,C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=P2(0),R=0,D=0,T=P2(0),W=P2(0),I=0,x=0,y=P2(0),V=P2(0),p=P2(0),M=0,S=P2(0),X=P2(0),J=P2(0),U=P2(0),H=0;K2=f=K2-176|0,i=0|N2[X2[X2[A>>2]+20>>2]](A),i=0|N2[X2[X2[i>>2]+56>>2]](i),n=0|N2[X2[X2[A>>2]+20>>2]](A),n=0|N2[X2[X2[n>>2]+56>>2]](n),r=U2[e+40>>2];A:if(!(r<=P2(0))){a=2048&i,l=4096&n;e:switch(X2[e+4>>2]-3|0){case 0:if(X2[(n=172+f|0)>>2]=0,X2[(i=o=164+f|0)>>2]=0,X2[i+4>>2]=0,X2[(i=156+f|0)>>2]=0,X2[i+4>>2]=0,X2[(i=124+f|0)>>2]=0,X2[i+4>>2]=0,X2[(i=136+f|0)>>2]=0,X2[i+4>>2]=0,X2[132+f>>2]=1065353216,X2[(i=144+f|0)>>2]=0,X2[i+4>>2]=0,X2[152+f>>2]=1065353216,X2[116+f>>2]=0,X2[120+f>>2]=0,X2[112+f>>2]=1065353216,i=X2[e+28>>2],k=U2[i+52>>2],u=U2[i+8>>2],s=U2[i+12>>2],B=U2[i+56>>2],v=U2[i+28>>2],d=U2[i+20>>2],Z=U2[i+24>>2],b=U2[i+60>>2],c=U2[i+44>>2],t=U2[i+36>>2],E=U2[i+40>>2],Q=U2[i+4>>2],G=168+f|(X2[n>>2]=0),S=b,b=U2[e+300>>2],X=P2(t*b),t=U2[e+304>>2],J=c,c=U2[e+308>>2],U2[G>>2]=S+P2(P2(X+P2(E*t))+P2(J*c)),U2[o>>2]=B+P2(P2(P2(b*d)+P2(t*Z))+P2(c*v)),U2[160+f>>2]=k+P2(P2(P2(b*Q)+P2(t*u))+P2(c*s)),i=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[i>>2]+64>>2]](i,112+f|0,r),i=X2[e+32>>2],k=U2[i+52>>2],u=U2[i+8>>2],s=U2[i+12>>2],B=U2[i+56>>2],v=U2[i+28>>2],d=U2[i+20>>2],Z=U2[i+24>>2],b=U2[i+60>>2],c=U2[i+44>>2],t=U2[i+36>>2],E=U2[i+40>>2],Q=U2[i+4>>2],X2[n>>2]=0,S=b,b=U2[e+316>>2],X=P2(t*b),t=U2[e+320>>2],J=c,c=U2[e+324>>2],U2[G>>2]=S+P2(P2(X+P2(E*t))+P2(J*c)),U2[o>>2]=B+P2(P2(P2(b*d)+P2(t*Z))+P2(c*v)),U2[160+f>>2]=k+P2(P2(P2(b*Q)+P2(t*u))+P2(c*s)),!a)break A;A=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[A>>2]+64>>2]](A,112+f|0,r);break A;case 1:if(i=X2[e+28>>2],y=U2[i+52>>2],b=U2[i+8>>2],t=U2[i+12>>2],Z=U2[e+584>>2],E=U2[e+552>>2],Q=U2[e+568>>2],V=U2[i+56>>2],p=U2[i+60>>2],Y=U2[e+608>>2],m=U2[e+600>>2],w=U2[e+604>>2],c=U2[i+28>>2],k=U2[i+20>>2],u=U2[i+24>>2],N=U2[e+588>>2],T=U2[e+556>>2],C=U2[e+572>>2],h=U2[e+592>>2],s=U2[i+44>>2],F=U2[e+560>>2],B=U2[i+36>>2],W=U2[e+576>>2],v=U2[i+40>>2],d=U2[i+4>>2],X2[172+f>>2]=0,X2[156+f>>2]=0,X2[140+f>>2]=0,U2[152+f>>2]=P2(P2(F*B)+P2(W*v))+P2(h*s),U2[148+f>>2]=P2(P2(T*B)+P2(C*v))+P2(N*s),U2[136+f>>2]=P2(P2(F*k)+P2(W*u))+P2(h*c),U2[132+f>>2]=P2(P2(T*k)+P2(C*u))+P2(N*c),U2[168+f>>2]=p+P2(P2(P2(B*m)+P2(v*w))+P2(s*Y)),U2[164+f>>2]=V+P2(P2(P2(k*m)+P2(u*w))+P2(c*Y)),X2[124+f>>2]=0,U2[144+f>>2]=P2(P2(E*B)+P2(Q*v))+P2(Z*s),U2[128+f>>2]=P2(P2(E*k)+P2(Q*u))+P2(Z*c),U2[120+f>>2]=P2(P2(d*F)+P2(b*W))+P2(t*h),U2[116+f>>2]=P2(P2(d*T)+P2(b*C))+P2(t*N),U2[112+f>>2]=P2(P2(E*d)+P2(Q*b))+P2(Z*t),U2[160+f>>2]=y+P2(P2(P2(d*m)+P2(b*w))+P2(t*Y)),a?(i=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[i>>2]+64>>2]](i,112+f|0,r),i=X2[e+32>>2],y=U2[i+52>>2],b=U2[i+8>>2],t=U2[i+12>>2],V=U2[i+56>>2],p=U2[i+60>>2],Z=U2[e+672>>2],E=U2[e+664>>2],Q=U2[e+668>>2],c=U2[i+28>>2],k=U2[i+20>>2],u=U2[i+24>>2],Y=U2[e+648>>2],m=U2[e+616>>2],w=U2[e+632>>2],N=U2[e+652>>2],T=U2[e+620>>2],C=U2[e+636>>2],h=U2[e+656>>2],s=U2[i+44>>2],F=U2[e+624>>2],B=U2[i+36>>2],W=U2[e+640>>2],v=U2[i+40>>2],d=U2[i+4>>2],X2[172+f>>2]=0,X2[156+f>>2]=0,X2[140+f>>2]=0,U2[152+f>>2]=P2(P2(F*B)+P2(W*v))+P2(h*s),U2[148+f>>2]=P2(P2(T*B)+P2(C*v))+P2(N*s),U2[144+f>>2]=P2(P2(m*B)+P2(w*v))+P2(Y*s),U2[136+f>>2]=P2(P2(F*k)+P2(W*u))+P2(h*c),U2[132+f>>2]=P2(P2(T*k)+P2(C*u))+P2(N*c),U2[168+f>>2]=p+P2(P2(P2(B*E)+P2(v*Q))+P2(s*Z)),U2[164+f>>2]=V+P2(P2(P2(k*E)+P2(u*Q))+P2(c*Z)),U2[160+f>>2]=y+P2(P2(P2(d*E)+P2(b*Q))+P2(t*Z)),X2[124+f>>2]=0,U2[128+f>>2]=P2(P2(m*k)+P2(w*u))+P2(Y*c),U2[120+f>>2]=P2(P2(d*F)+P2(b*W))+P2(t*h),U2[116+f>>2]=P2(P2(d*T)+P2(b*C))+P2(t*N),U2[112+f>>2]=P2(P2(m*d)+P2(w*b))+P2(Y*t),i=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[i>>2]+64>>2]](i,112+f|0,r)):(i=X2[e+32>>2],y=U2[i+52>>2],V=U2[i+56>>2],p=U2[i+60>>2],Z=U2[e+672>>2],E=U2[e+664>>2],Q=U2[e+668>>2],b=U2[i+8>>2],t=U2[i+12>>2],c=U2[i+28>>2],k=U2[i+20>>2],u=U2[i+24>>2],Y=U2[e+648>>2],m=U2[e+616>>2],w=U2[e+632>>2],N=U2[e+652>>2],T=U2[e+620>>2],C=U2[e+636>>2],h=U2[e+656>>2],s=U2[i+44>>2],F=U2[e+624>>2],B=U2[i+36>>2],W=U2[e+640>>2],v=U2[i+40>>2],d=U2[i+4>>2],X2[172+f>>2]=0,X2[156+f>>2]=0,X2[140+f>>2]=0,X2[124+f>>2]=0,U2[152+f>>2]=P2(P2(F*B)+P2(W*v))+P2(h*s),U2[148+f>>2]=P2(P2(T*B)+P2(C*v))+P2(N*s),U2[144+f>>2]=P2(P2(m*B)+P2(w*v))+P2(Y*s),U2[136+f>>2]=P2(P2(F*k)+P2(W*u))+P2(h*c),U2[132+f>>2]=P2(P2(T*k)+P2(C*u))+P2(N*c),U2[128+f>>2]=P2(P2(m*k)+P2(w*u))+P2(Y*c),U2[120+f>>2]=P2(P2(d*F)+P2(b*W))+P2(t*h),U2[116+f>>2]=P2(P2(d*T)+P2(b*C))+P2(t*N),U2[112+f>>2]=P2(P2(m*d)+P2(w*b))+P2(Y*t),U2[168+f>>2]=p+P2(P2(P2(B*E)+P2(v*Q))+P2(s*Z)),U2[164+f>>2]=V+P2(P2(P2(k*E)+P2(u*Q))+P2(c*Z)),U2[160+f>>2]=y+P2(P2(P2(d*E)+P2(b*Q))+P2(t*Z))),b=U2[e+688>>2],c=U2[e+692>>2],(t=b2(P2(b-c)))<P2(-3.1415927410125732)?t=P2(t+P2(6.2831854820251465)):t>P2(3.1415927410125732)&&(t=P2(t+P2(-6.2831854820251465))),(b=b2(P2(b+c)))<P2(-3.1415927410125732)?b=P2(b+P2(6.2831854820251465)):b>P2(3.1415927410125732)&&(b=P2(b+P2(-6.2831854820251465))),b==t)break A;if(!l)break A;U2[96+f>>2]=U2[120+f>>2],U2[100+f>>2]=U2[136+f>>2],X2[108+f>>2]=0,U2[104+f>>2]=U2[152+f>>2],U2[80+f>>2]=U2[112+f>>2],U2[84+f>>2]=U2[128+f>>2],X2[92+f>>2]=0,U2[88+f>>2]=U2[144+f>>2],A=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(e=72+f|0)>>2]=0,X2[e+4>>2]=0,X2[64+f>>2]=0,X2[68+f>>2]=0,e=c>P2(0),N2[X2[X2[A>>2]+68>>2]](A,160+f|0,96+f|0,80+f|0,r,r,e?t:P2(0),e?b:P2(6.2831854820251465),f+64|0,e,P2(10));break A;case 2:if(i=X2[e+28>>2],y=U2[i+52>>2],b=U2[i+8>>2],t=U2[i+12>>2],Z=U2[e+332>>2],E=U2[e+300>>2],Q=U2[e+316>>2],V=U2[i+56>>2],p=U2[i+60>>2],Y=U2[e+356>>2],m=U2[e+348>>2],w=U2[e+352>>2],c=U2[i+28>>2],k=U2[i+20>>2],u=U2[i+24>>2],N=U2[e+336>>2],T=U2[e+304>>2],C=U2[e+320>>2],h=U2[e+340>>2],s=U2[i+44>>2],F=U2[e+308>>2],B=U2[i+36>>2],W=U2[e+324>>2],v=U2[i+40>>2],d=U2[i+4>>2],X2[172+f>>2]=0,X2[156+f>>2]=0,X2[140+f>>2]=0,U2[152+f>>2]=P2(P2(F*B)+P2(W*v))+P2(h*s),U2[148+f>>2]=P2(P2(T*B)+P2(C*v))+P2(N*s),U2[136+f>>2]=P2(P2(F*k)+P2(W*u))+P2(h*c),U2[132+f>>2]=P2(P2(T*k)+P2(C*u))+P2(N*c),U2[168+f>>2]=p+P2(P2(P2(B*m)+P2(v*w))+P2(s*Y)),U2[164+f>>2]=V+P2(P2(P2(k*m)+P2(u*w))+P2(c*Y)),X2[124+f>>2]=0,U2[144+f>>2]=P2(P2(E*B)+P2(Q*v))+P2(Z*s),U2[128+f>>2]=P2(P2(E*k)+P2(Q*u))+P2(Z*c),U2[120+f>>2]=P2(P2(d*F)+P2(b*W))+P2(t*h),U2[116+f>>2]=P2(P2(d*T)+P2(b*C))+P2(t*N),U2[112+f>>2]=P2(P2(E*d)+P2(Q*b))+P2(Z*t),U2[160+f>>2]=y+P2(P2(P2(d*m)+P2(b*w))+P2(t*Y)),a?(i=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[i>>2]+64>>2]](i,112+f|0,r),i=X2[e+32>>2],y=U2[i+52>>2],b=U2[i+8>>2],t=U2[i+12>>2],V=U2[i+56>>2],p=U2[i+60>>2],Z=U2[e+420>>2],E=U2[e+412>>2],Q=U2[e+416>>2],c=U2[i+28>>2],k=U2[i+20>>2],u=U2[i+24>>2],Y=U2[e+396>>2],m=U2[e+364>>2],w=U2[e+380>>2],N=U2[e+400>>2],T=U2[e+368>>2],C=U2[e+384>>2],h=U2[e+404>>2],s=U2[i+44>>2],F=U2[e+372>>2],B=U2[i+36>>2],W=U2[e+388>>2],v=U2[i+40>>2],d=U2[i+4>>2],X2[172+f>>2]=0,X2[156+f>>2]=0,X2[140+f>>2]=0,U2[152+f>>2]=P2(P2(F*B)+P2(W*v))+P2(h*s),U2[148+f>>2]=P2(P2(T*B)+P2(C*v))+P2(N*s),U2[144+f>>2]=P2(P2(m*B)+P2(w*v))+P2(Y*s),U2[136+f>>2]=P2(P2(F*k)+P2(W*u))+P2(h*c),U2[132+f>>2]=P2(P2(T*k)+P2(C*u))+P2(N*c),U2[168+f>>2]=p+P2(P2(P2(B*E)+P2(v*Q))+P2(s*Z)),U2[164+f>>2]=V+P2(P2(P2(k*E)+P2(u*Q))+P2(c*Z)),U2[160+f>>2]=y+P2(P2(P2(d*E)+P2(b*Q))+P2(t*Z)),X2[124+f>>2]=0,U2[128+f>>2]=P2(P2(m*k)+P2(w*u))+P2(Y*c),U2[120+f>>2]=P2(P2(d*F)+P2(b*W))+P2(t*h),U2[116+f>>2]=P2(P2(d*T)+P2(b*C))+P2(t*N),U2[112+f>>2]=P2(P2(m*d)+P2(w*b))+P2(Y*t),i=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[i>>2]+64>>2]](i,112+f|0,r)):(i=X2[e+32>>2],y=U2[i+52>>2],V=U2[i+56>>2],p=U2[i+60>>2],Z=U2[e+420>>2],E=U2[e+412>>2],Q=U2[e+416>>2],b=U2[i+8>>2],t=U2[i+12>>2],c=U2[i+28>>2],k=U2[i+20>>2],u=U2[i+24>>2],Y=U2[e+396>>2],m=U2[e+364>>2],w=U2[e+380>>2],N=U2[e+400>>2],T=U2[e+368>>2],C=U2[e+384>>2],h=U2[e+404>>2],s=U2[i+44>>2],F=U2[e+372>>2],B=U2[i+36>>2],W=U2[e+388>>2],v=U2[i+40>>2],d=U2[i+4>>2],X2[172+f>>2]=0,X2[156+f>>2]=0,X2[140+f>>2]=0,X2[124+f>>2]=0,U2[152+f>>2]=P2(P2(F*B)+P2(W*v))+P2(h*s),U2[148+f>>2]=P2(P2(T*B)+P2(C*v))+P2(N*s),U2[144+f>>2]=P2(P2(m*B)+P2(w*v))+P2(Y*s),U2[136+f>>2]=P2(P2(F*k)+P2(W*u))+P2(h*c),U2[132+f>>2]=P2(P2(T*k)+P2(C*u))+P2(N*c),U2[128+f>>2]=P2(P2(m*k)+P2(w*u))+P2(Y*c),U2[120+f>>2]=P2(P2(d*F)+P2(b*W))+P2(t*h),U2[116+f>>2]=P2(P2(d*T)+P2(b*C))+P2(t*N),U2[112+f>>2]=P2(P2(m*d)+P2(w*b))+P2(Y*t),U2[168+f>>2]=p+P2(P2(P2(B*E)+P2(v*Q))+P2(s*Z)),U2[164+f>>2]=V+P2(P2(P2(k*E)+P2(u*Q))+P2(c*Z)),U2[160+f>>2]=y+P2(P2(P2(d*E)+P2(b*Q))+P2(t*Z))),!l)break A;for(X2[108+f>>2]=0,b=U2[e+444>>2],v=P2(P2(.0395662896335125)/P2(b*b)),b=U2[e+448>>2],b=c0(t=P2(P2(O2(P2(P2(1.0395662784576416)/P2(v+P2(P2(1)/P2(b*b))))))*P2(.5))),k=P2(o0(t)/P2(.9999999403953552)),t=P2(k*P2(.9807851910591125)),v=P2(b*P2(0)),c=P2(k*P2(0)),d=P2(c*P2(0)),u=P2(P2(v+d)-P2(t*r)),B=P2(t*P2(0)),k=P2(k*P2(.19509069621562958)),Z=P2(k*P2(0)),s=P2(P2(P2(b*r)+B)-Z),B=P2(P2(P2(r*P2(-c))-B)-Z),v=P2(P2(v+P2(k*r))-d),d=P2(P2(t*u)+P2(P2(P2(b*s)-P2(c*B))-P2(k*v))),Z=P2(P2(k*s)+P2(P2(P2(b*v)-P2(t*B))-P2(c*u))),b=P2(P2(c*v)+P2(P2(P2(b*u)-P2(k*B))-P2(t*s))),U2[104+f>>2]=P2(P2(P2(d*U2[144+f>>2])+P2(Z*U2[148+f>>2]))+P2(b*U2[152+f>>2]))+U2[168+f>>2],U2[100+f>>2]=P2(P2(P2(d*U2[128+f>>2])+P2(Z*U2[132+f>>2]))+P2(b*U2[136+f>>2]))+U2[164+f>>2],U2[96+f>>2]=P2(P2(P2(d*U2[112+f>>2])+P2(Z*U2[116+f>>2]))+P2(b*U2[120+f>>2]))+U2[160+f>>2],n=160+f|0,o=72+f|0,i=0;;)if(t=c0(c=P2(P2(P2(0|i)*P2(6.283185005187988))*P2(.03125))),b=U2[e+444>>2],u=o0(c),P2(j2(t))>P2(1.1920928955078125e-7)?(c=P2(u*u),k=P2(t*t),s=P2(c/k),v=P2(s/P2(b*b)),b=U2[e+448>>2],b=P2(O2(P2(P2(s+P2(1))/P2(v+P2(P2(1)/P2(b*b))))))):(c=P2(u*u),k=P2(t*t)),X2[92+f>>2]=0,v=t,t=P2(b*P2(.5)),k=P2(o0(t)/P2(O2(P2(c+P2(k+P2(0)))))),b=P2(v*k),t=c0(t),v=P2(t*P2(0)),c=P2(k*P2(0)),d=P2(c*P2(0)),s=P2(P2(v+d)-P2(b*r)),B=P2(b*P2(0)),k=P2(k*P2(-u)),Z=P2(k*P2(0)),u=P2(P2(P2(t*r)+B)-Z),B=P2(P2(P2(r*P2(-c))-B)-Z),v=P2(P2(v+P2(k*r))-d),d=P2(P2(b*s)+P2(P2(P2(t*u)-P2(c*B))-P2(k*v))),Z=P2(P2(k*u)+P2(P2(P2(t*v)-P2(b*B))-P2(c*s))),b=P2(P2(c*v)+P2(P2(P2(t*s)-P2(k*B))-P2(b*u))),U2[88+f>>2]=P2(P2(P2(d*U2[144+f>>2])+P2(Z*U2[148+f>>2]))+P2(b*U2[152+f>>2]))+U2[168+f>>2],U2[84+f>>2]=P2(P2(P2(d*U2[128+f>>2])+P2(Z*U2[132+f>>2]))+P2(b*U2[136+f>>2]))+U2[164+f>>2],U2[80+f>>2]=P2(P2(P2(d*U2[112+f>>2])+P2(Z*U2[116+f>>2]))+P2(b*U2[120+f>>2]))+U2[160+f>>2],a=0|N2[X2[X2[A>>2]+20>>2]](A),X2[o>>2]=0,X2[o+4>>2]=0,X2[64+f>>2]=0,X2[68+f>>2]=0,N2[X2[X2[a>>2]+16>>2]](a,96+f|0,80+f|0,f+64|0),3&i||(a=0|N2[X2[X2[A>>2]+20>>2]](A),X2[o>>2]=0,X2[o+4>>2]=0,X2[64+f>>2]=0,X2[68+f>>2]=0,N2[X2[X2[a>>2]+16>>2]](a,n,80+f|0,f+64|0)),I=X2[(G=88+f|0)+4>>2],X2[(a=104+f|0)>>2]=X2[G>>2],X2[a+4>>2]=I,a=X2[84+f>>2],X2[96+f>>2]=X2[80+f>>2],X2[100+f>>2]=a,32==(0|(i=i+1|0)))break;Q=U2[e+512>>2],Y=U2[e+452>>2],i=X2[e+32>>2],v=(s=(u=(B=(t=(k=(J=(b=(S=U2[i+404>>2]>P2(0)?(b=U2[i+36>>2],c=U2[e+412>>2],t=U2[i+40>>2],k=U2[e+416>>2],m=P2(P2(b*c)+P2(t*k)),u=U2[i+20>>2],s=U2[i+24>>2],B=U2[i+28>>2],w=U2[e+420>>2],N=P2(P2(P2(u*c)+P2(s*k))+P2(B*w)),v=U2[i+4>>2],d=U2[i+8>>2],Z=U2[i+12>>2],T=P2(P2(P2(v*c)+P2(d*k))+P2(Z*w)),C=U2[e+372>>2],h=U2[e+388>>2],F=U2[e+404>>2],E=U2[i+44>>2],W=P2(P2(P2(C*b)+P2(h*t))+P2(F*E)),y=U2[e+368>>2],V=U2[e+384>>2],p=U2[e+400>>2],c=P2(P2(P2(y*b)+P2(V*t))+P2(p*E)),U=U2[e+364>>2],X=U2[e+380>>2],U2[e+396>>2]):(i=X2[e+28>>2],b=U2[i+36>>2],c=U2[e+348>>2],t=U2[i+40>>2],k=U2[e+352>>2],m=P2(P2(b*c)+P2(t*k)),u=U2[i+20>>2],s=U2[i+24>>2],B=U2[i+28>>2],w=U2[e+356>>2],N=P2(P2(P2(u*c)+P2(s*k))+P2(B*w)),v=U2[i+4>>2],d=U2[i+8>>2],Z=U2[i+12>>2],T=P2(P2(P2(v*c)+P2(d*k))+P2(Z*w)),C=U2[e+308>>2],h=U2[e+324>>2],F=U2[e+340>>2],E=U2[i+44>>2],W=P2(P2(P2(C*b)+P2(h*t))+P2(F*E)),y=U2[e+304>>2],V=U2[e+320>>2],p=U2[e+336>>2],c=P2(P2(P2(y*b)+P2(V*t))+P2(p*E)),U=U2[e+300>>2],X=U2[e+316>>2],U2[e+332>>2]),P2(P2(P2(U*b)+P2(X*t))+P2(S*E))),P2(P2(P2(C*u)+P2(h*s))+P2(F*B))),P2(P2(P2(y*u)+P2(V*s))+P2(p*B))),P2(P2(P2(U*u)+P2(X*s))+P2(S*B))),P2(P2(P2(v*C)+P2(d*h))+P2(Z*F))),P2(P2(P2(v*y)+P2(d*V))+P2(Z*p))),P2(P2(P2(U*v)+P2(X*d))+P2(S*Z))),P2(E*w)),X2[156+f>>2]=0,U2[152+f>>2]=W,U2[148+f>>2]=c,U2[144+f>>2]=b,X2[140+f>>2]=0,U2[136+f>>2]=J,U2[132+f>>2]=k,U2[128+f>>2]=t,X2[124+f>>2]=0,U2[120+f>>2]=B,U2[116+f>>2]=u,U2[112+f>>2]=s,B=U2[i+52>>2],d=U2[i+56>>2],Z=U2[i+60>>2],X2[172+f>>2]=0,U2[168+f>>2]=Z+P2(m+v),U2[164+f>>2]=N+d,U2[160+f>>2]=B+T,o=X2[(i=n+8|0)+4>>2],X2[(e=88+f|0)>>2]=X2[i>>2],X2[e+4>>2]=o,e=X2[n+4>>2],X2[80+f>>2]=X2[n>>2],X2[84+f>>2]=e,X2[76+f>>2]=0,U2[72+f>>2]=b,U2[68+f>>2]=t,U2[64+f>>2]=s,X2[60+f>>2]=0,U2[56+f>>2]=c,U2[52+f>>2]=k,U2[48+f>>2]=u,A=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(e=40+f|0)>>2]=0,X2[e+4>>2]=0,X2[32+f>>2]=0,X2[36+f>>2]=0,N2[X2[X2[A>>2]+68>>2]](A,80+f|0,f+64|0,48+f|0,r,r,P2(P2(-Q)-Y),P2(Y-Q),32+f|0,1,P2(10));break A;case 3:case 6:if(o=X2[(n=e+1072|0)+4>>2],X2[(i=_=120+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,o=X2[(n=e+1088|0)+4>>2],X2[(i=136+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,o=X2[(n=e+1104|0)+4>>2],X2[(i=152+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,o=X2[(n=e+1120|0)+4>>2],X2[(i=168+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,n=X2[(i=G=e+1064|0)+4>>2],X2[112+f>>2]=X2[i>>2],X2[116+f>>2]=n,n=X2[(i=I=e+1080|0)+4>>2],X2[128+f>>2]=X2[i>>2],X2[132+f>>2]=n,n=X2[(i=x=e+1096|0)+4>>2],X2[144+f>>2]=X2[i>>2],X2[148+f>>2]=n,n=X2[(i=M=e+1112|0)+4>>2],X2[160+f>>2]=X2[i>>2],X2[164+f>>2]=n,i=160+f|0,n=144+f|0,o=128+f|0,a&&(a=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[a>>2]+64>>2]](a,112+f|0,r),R=X2[(g=e+1184|0)+4>>2],X2[(a=i+8|0)>>2]=X2[g>>2],X2[a+4>>2]=R,g=X2[(a=e+1176|0)+4>>2],X2[i>>2]=X2[a>>2],X2[i+4>>2]=g,g=X2[(a=e+1144|0)+4>>2],X2[o>>2]=X2[a>>2],X2[o+4>>2]=g,R=X2[(g=e+1152|0)+4>>2],X2[(a=o+8|0)>>2]=X2[g>>2],X2[a+4>>2]=R,g=X2[(a=e+1160|0)+4>>2],X2[n>>2]=X2[a>>2],X2[n+4>>2]=g,R=X2[(g=e+1168|0)+4>>2],X2[(a=n+8|0)>>2]=X2[g>>2],X2[a+4>>2]=R,g=X2[(a=e+1136|0)+4>>2],X2[_>>2]=X2[a>>2],X2[_+4>>2]=g,_=X2[(a=e+1128|0)+4>>2],X2[112+f>>2]=X2[a>>2],X2[116+f>>2]=_,a=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[a>>2]+64>>2]](a,112+f|0,r)),!l)break A;a=X2[I+4>>2],X2[o>>2]=X2[I>>2],X2[o+4>>2]=a,a=X2[x+4>>2],X2[n>>2]=X2[x>>2],X2[n+4>>2]=a,a=X2[M+4>>2],X2[i>>2]=X2[M>>2],X2[i+4>>2]=a,g=X2[(_=G+8|0)+4>>2],X2[(a=l=120+f|0)>>2]=X2[_>>2],X2[a+4>>2]=g,R=X2[(g=I+8|0)+4>>2],X2[(a=_=o+8|0)>>2]=X2[g>>2],X2[a+4>>2]=R,D=X2[(R=x+8|0)+4>>2],X2[(a=g=n+8|0)>>2]=X2[R>>2],X2[a+4>>2]=D,H=X2[(D=M+8|0)+4>>2],X2[(a=R=i+8|0)>>2]=X2[D>>2],X2[a+4>>2]=H,a=X2[G+4>>2],X2[112+f>>2]=X2[G>>2],X2[116+f>>2]=a,U2[96+f>>2]=U2[l>>2],U2[100+f>>2]=U2[136+f>>2],X2[108+f>>2]=0,U2[104+f>>2]=U2[152+f>>2],U2[80+f>>2]=U2[112+f>>2],U2[84+f>>2]=U2[128+f>>2],X2[92+f>>2]=0,U2[88+f>>2]=U2[144+f>>2],b=U2[e+932>>2],t=U2[e+936>>2],c=U2[e+996>>2],k=U2[e+1e3>>2],D=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(a=72+f|0)>>2]=0,X2[a+4>>2]=0,X2[64+f>>2]=0,X2[68+f>>2]=0,N2[X2[X2[D>>2]+72>>2]](D,a=e+1176|0,96+f|0,80+f|0,P2(r*P2(.8999999761581421)),b,t,c,k,f+64|0,P2(10),1),X2[92+f>>2]=0,k=U2[148+f>>2],U2[88+f>>2]=k,b=U2[132+f>>2],U2[84+f>>2]=b,t=U2[116+f>>2],U2[80+f>>2]=t,u=U2[e+1196>>2],s=U2[e+1200>>2],H=X2[(D=e+1136|0)+4>>2],X2[l>>2]=X2[D>>2],X2[l+4>>2]=H,D=X2[(l=e+1144|0)+4>>2],X2[o>>2]=X2[l>>2],X2[o+4>>2]=D,D=X2[(l=e+1152|0)+4>>2],X2[_>>2]=X2[l>>2],X2[_+4>>2]=D,_=X2[(l=e+1160|0)+4>>2],X2[n>>2]=X2[l>>2],X2[n+4>>2]=_,_=X2[(l=e+1168|0)+4>>2],X2[g>>2]=X2[l>>2],X2[g+4>>2]=_,l=X2[a+4>>2],X2[i>>2]=X2[a>>2],X2[i+4>>2]=l,_=X2[(l=e+1184|0)+4>>2],X2[R>>2]=X2[l>>2],X2[R+4>>2]=_,_=X2[(l=e+1128|0)+4>>2],X2[112+f>>2]=X2[l>>2],X2[116+f>>2]=_,c=o0(s),s=c0(s),U2[68+f>>2]=P2(b*s)-P2(c*t),B=o0(u),u=c0(u),U2[72+f>>2]=P2(P2(t*P2(s*B))+P2(b*P2(B*c)))+P2(k*u),U2[64+f>>2]=P2(P2(t*P2(u*s))+P2(b*P2(u*c)))-P2(B*k),X2[60+f>>2]=0,U2[56+f>>2]=-U2[144+f>>2],U2[52+f>>2]=-U2[128+f>>2],U2[48+f>>2]=-U2[112+f>>2],b=U2[e+868>>2],(t=U2[e+872>>2])<b?(l=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(_=40+f|0)>>2]=0,X2[_+4>>2]=0,X2[32+f>>2]=0,X2[36+f>>2]=0,N2[X2[X2[l>>2]+68>>2]](l,a,48+f|0,f+64|0,r,r,P2(-3.1415927410125732),P2(3.1415927410125732),32+f|0,0,P2(10))):b<t&&(l=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(_=40+f|0)>>2]=0,X2[_+4>>2]=0,X2[32+f>>2]=0,X2[36+f>>2]=0,N2[X2[X2[l>>2]+68>>2]](l,a,48+f|0,f+64|0,r,r,b,t,32+f|0,1,P2(10))),a=X2[I+4>>2],X2[o>>2]=X2[I>>2],X2[o+4>>2]=a,a=X2[x+4>>2],X2[n>>2]=X2[x>>2],X2[n+4>>2]=a,a=X2[M+4>>2],X2[i>>2]=X2[M>>2],X2[i+4>>2]=a,_=X2[(l=G+8|0)+4>>2],X2[(a=120+f|0)>>2]=X2[l>>2],X2[a+4>>2]=_,I=X2[(a=I+8|0)+4>>2],X2[(o=o+8|0)>>2]=X2[a>>2],X2[o+4>>2]=I,a=X2[(o=x+8|0)+4>>2],X2[(n=n+8|0)>>2]=X2[o>>2],X2[n+4>>2]=a,o=X2[(n=M+8|0)+4>>2],X2[(i=i+8|0)>>2]=X2[n>>2],X2[i+4>>2]=o,i=X2[G+4>>2],X2[112+f>>2]=X2[G>>2],X2[116+f>>2]=i,o=X2[(n=e+688|0)+4>>2],X2[(i=40+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,n=X2[(i=e+680|0)+4>>2],X2[32+f>>2]=X2[i>>2],X2[36+f>>2]=n,o=X2[(n=e+704|0)+4>>2],X2[(i=24+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,i=X2[(e=e+696|0)+4>>2],X2[16+f>>2]=X2[e>>2],X2[20+f>>2]=i,A=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(e=8+f|0)>>2]=0,X2[e+4>>2]=0,X2[f>>2]=0,X2[4+f>>2]=0,N2[X2[X2[A>>2]+80>>2]](A,32+f|0,16+f|0,112+f|0,f);break A;case 9:if(o=X2[(n=e+1244|0)+4>>2],X2[(i=_=120+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,o=X2[(n=e+1260|0)+4>>2],X2[(i=136+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,o=X2[(n=e+1276|0)+4>>2],X2[(i=152+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,o=X2[(n=e+1292|0)+4>>2],X2[(i=168+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,n=X2[(i=G=e+1236|0)+4>>2],X2[112+f>>2]=X2[i>>2],X2[116+f>>2]=n,n=X2[(i=I=e+1252|0)+4>>2],X2[128+f>>2]=X2[i>>2],X2[132+f>>2]=n,n=X2[(i=x=e+1268|0)+4>>2],X2[144+f>>2]=X2[i>>2],X2[148+f>>2]=n,n=X2[(i=M=e+1284|0)+4>>2],X2[160+f>>2]=X2[i>>2],X2[164+f>>2]=n,i=160+f|0,n=144+f|0,o=128+f|0,a&&(a=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[a>>2]+64>>2]](a,112+f|0,r),R=X2[(g=e+1356|0)+4>>2],X2[(a=i+8|0)>>2]=X2[g>>2],X2[a+4>>2]=R,g=X2[(a=e+1348|0)+4>>2],X2[i>>2]=X2[a>>2],X2[i+4>>2]=g,g=X2[(a=e+1316|0)+4>>2],X2[o>>2]=X2[a>>2],X2[o+4>>2]=g,R=X2[(g=e+1324|0)+4>>2],X2[(a=o+8|0)>>2]=X2[g>>2],X2[a+4>>2]=R,g=X2[(a=e+1332|0)+4>>2],X2[n>>2]=X2[a>>2],X2[n+4>>2]=g,R=X2[(g=e+1340|0)+4>>2],X2[(a=n+8|0)>>2]=X2[g>>2],X2[a+4>>2]=R,g=X2[(a=e+1308|0)+4>>2],X2[_>>2]=X2[a>>2],X2[_+4>>2]=g,_=X2[(a=e+1300|0)+4>>2],X2[112+f>>2]=X2[a>>2],X2[116+f>>2]=_,a=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[a>>2]+64>>2]](a,112+f|0,r)),!l)break A;a=X2[I+4>>2],X2[o>>2]=X2[I>>2],X2[o+4>>2]=a,a=X2[x+4>>2],X2[n>>2]=X2[x>>2],X2[n+4>>2]=a,a=X2[M+4>>2],X2[i>>2]=X2[M>>2],X2[i+4>>2]=a,g=X2[(_=G+8|0)+4>>2],X2[(a=l=120+f|0)>>2]=X2[_>>2],X2[a+4>>2]=g,R=X2[(g=I+8|0)+4>>2],X2[(a=_=o+8|0)>>2]=X2[g>>2],X2[a+4>>2]=R,D=X2[(R=x+8|0)+4>>2],X2[(a=g=n+8|0)>>2]=X2[R>>2],X2[a+4>>2]=D,H=X2[(D=M+8|0)+4>>2],X2[(a=R=i+8|0)>>2]=X2[D>>2],X2[a+4>>2]=H,a=X2[G+4>>2],X2[112+f>>2]=X2[G>>2],X2[116+f>>2]=a,U2[96+f>>2]=U2[l>>2],U2[100+f>>2]=U2[136+f>>2],X2[108+f>>2]=0,U2[104+f>>2]=U2[152+f>>2],U2[80+f>>2]=U2[112+f>>2],U2[84+f>>2]=U2[128+f>>2],X2[92+f>>2]=0,U2[88+f>>2]=U2[144+f>>2],b=U2[e+1060>>2],t=U2[e+1144>>2],c=U2[e+1148>>2],k=U2[e+1056>>2],D=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(a=72+f|0)>>2]=0,X2[a+4>>2]=0,X2[64+f>>2]=0,X2[68+f>>2]=0,N2[X2[X2[D>>2]+72>>2]](D,a=e+1348|0,96+f|0,80+f|0,P2(r*P2(.8999999761581421)),k,b,t,c,f+64|0,P2(10),1),X2[92+f>>2]=0,k=U2[148+f>>2],U2[88+f>>2]=k,b=U2[132+f>>2],U2[84+f>>2]=b,t=U2[116+f>>2],U2[80+f>>2]=t,u=U2[e+1368>>2],s=U2[e+1372>>2],H=X2[(D=e+1308|0)+4>>2],X2[l>>2]=X2[D>>2],X2[l+4>>2]=H,D=X2[(l=e+1316|0)+4>>2],X2[o>>2]=X2[l>>2],X2[o+4>>2]=D,D=X2[(l=e+1324|0)+4>>2],X2[_>>2]=X2[l>>2],X2[_+4>>2]=D,_=X2[(l=e+1332|0)+4>>2],X2[n>>2]=X2[l>>2],X2[n+4>>2]=_,_=X2[(l=e+1340|0)+4>>2],X2[g>>2]=X2[l>>2],X2[g+4>>2]=_,l=X2[a+4>>2],X2[i>>2]=X2[a>>2],X2[i+4>>2]=l,_=X2[(l=e+1356|0)+4>>2],X2[R>>2]=X2[l>>2],X2[R+4>>2]=_,_=X2[(l=e+1300|0)+4>>2],X2[112+f>>2]=X2[l>>2],X2[116+f>>2]=_,c=o0(s),s=c0(s),U2[68+f>>2]=P2(b*s)-P2(t*c),B=o0(u),u=c0(u),U2[72+f>>2]=P2(P2(t*P2(s*B))+P2(b*P2(B*c)))+P2(k*u),U2[64+f>>2]=P2(P2(t*P2(u*s))+P2(b*P2(u*c)))-P2(B*k),X2[60+f>>2]=0,U2[56+f>>2]=-U2[144+f>>2],U2[52+f>>2]=-U2[128+f>>2],U2[48+f>>2]=-U2[112+f>>2],b=U2[e+968>>2],(t=U2[e+972>>2])<b?(l=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(_=40+f|0)>>2]=0,X2[_+4>>2]=0,X2[32+f>>2]=0,X2[36+f>>2]=0,N2[X2[X2[l>>2]+68>>2]](l,a,48+f|0,f+64|0,r,r,P2(-3.1415927410125732),P2(3.1415927410125732),32+f|0,0,P2(10))):b<t&&(l=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(_=40+f|0)>>2]=0,X2[_+4>>2]=0,X2[32+f>>2]=0,X2[36+f>>2]=0,N2[X2[X2[l>>2]+68>>2]](l,a,48+f|0,f+64|0,r,r,b,t,32+f|0,1,P2(10))),a=X2[I+4>>2],X2[o>>2]=X2[I>>2],X2[o+4>>2]=a,a=X2[x+4>>2],X2[n>>2]=X2[x>>2],X2[n+4>>2]=a,a=X2[M+4>>2],X2[i>>2]=X2[M>>2],X2[i+4>>2]=a,_=X2[(l=G+8|0)+4>>2],X2[(a=120+f|0)>>2]=X2[l>>2],X2[a+4>>2]=_,I=X2[(a=I+8|0)+4>>2],X2[(o=o+8|0)>>2]=X2[a>>2],X2[o+4>>2]=I,a=X2[(o=x+8|0)+4>>2],X2[(n=n+8|0)>>2]=X2[o>>2],X2[n+4>>2]=a,o=X2[(n=M+8|0)+4>>2],X2[(i=i+8|0)>>2]=X2[n>>2],X2[i+4>>2]=o,i=X2[G+4>>2],X2[112+f>>2]=X2[G>>2],X2[116+f>>2]=i,o=X2[(n=e+688|0)+4>>2],X2[(i=40+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,n=X2[(i=e+680|0)+4>>2],X2[32+f>>2]=X2[i>>2],X2[36+f>>2]=n,o=X2[(n=e+704|0)+4>>2],X2[(i=24+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,i=X2[(e=e+696|0)+4>>2],X2[16+f>>2]=X2[e>>2],X2[20+f>>2]=i,A=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(e=8+f|0)>>2]=0,X2[e+4>>2]=0,X2[f>>2]=0,X2[4+f>>2]=0,N2[X2[X2[A>>2]+80>>2]](A,32+f|0,16+f|0,112+f|0,f);break A;case 4:break e;default:break A;}o=X2[(n=e+832|0)+4>>2],X2[(i=G=120+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,o=X2[(n=e+848|0)+4>>2],X2[(i=136+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,o=X2[(n=e+864|0)+4>>2],X2[(i=152+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,o=X2[(n=e+880|0)+4>>2],X2[(i=168+f|0)>>2]=X2[n>>2],X2[i+4>>2]=o,n=X2[(i=I=e+824|0)+4>>2],X2[112+f>>2]=X2[i>>2],X2[116+f>>2]=n,n=X2[(i=e+840|0)+4>>2],X2[128+f>>2]=X2[i>>2],X2[132+f>>2]=n,n=X2[(i=e+856|0)+4>>2],X2[144+f>>2]=X2[i>>2],X2[148+f>>2]=n,n=X2[(i=e+872|0)+4>>2],X2[160+f>>2]=X2[i>>2],X2[164+f>>2]=n,i=160+f|0,n=144+f|0,o=128+f|0,a?(a=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[a>>2]+64>>2]](a,112+f|0,r),M=X2[(x=e+944|0)+4>>2],X2[(a=i+8|0)>>2]=X2[x>>2],X2[a+4>>2]=M,x=X2[(a=e+936|0)+4>>2],X2[i>>2]=X2[a>>2],X2[i+4>>2]=x,a=X2[(i=e+904|0)+4>>2],X2[o>>2]=X2[i>>2],X2[o+4>>2]=a,i=o+8|0,a=X2[(o=e+912|0)+4>>2],X2[i>>2]=X2[o>>2],X2[i+4>>2]=a,o=X2[(i=e+920|0)+4>>2],X2[n>>2]=X2[i>>2],X2[n+4>>2]=o,i=n+8|0,o=X2[(n=e+928|0)+4>>2],X2[i>>2]=X2[n>>2],X2[i+4>>2]=o,n=X2[(i=e+896|0)+4>>2],X2[G>>2]=X2[i>>2],X2[G+4>>2]=n,n=X2[(i=e+888|0)+4>>2],X2[112+f>>2]=X2[i>>2],X2[116+f>>2]=n,i=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[i>>2]+64>>2]](i,112+f|0,r)):(x=X2[(a=e+896|0)+4>>2],X2[G>>2]=X2[a>>2],X2[G+4>>2]=x,G=X2[(a=e+904|0)+4>>2],X2[o>>2]=X2[a>>2],X2[o+4>>2]=G,G=X2[(a=e+912|0)+4>>2],X2[(o=o+8|0)>>2]=X2[a>>2],X2[o+4>>2]=G,a=X2[(o=e+920|0)+4>>2],X2[n>>2]=X2[o>>2],X2[n+4>>2]=a,a=X2[(o=e+928|0)+4>>2],X2[(n=n+8|0)>>2]=X2[o>>2],X2[n+4>>2]=a,o=X2[(n=e+936|0)+4>>2],X2[i>>2]=X2[n>>2],X2[i+4>>2]=o,o=X2[(n=e+944|0)+4>>2],X2[(i=i+8|0)>>2]=X2[n>>2],X2[i+4>>2]=o,n=X2[(i=e+888|0)+4>>2],X2[112+f>>2]=X2[i>>2],X2[116+f>>2]=n),l&&(i=J2[e+180|0]?I:e+888|0,k=U2[i+48>>2],E=U2[i+8>>2],b=U2[i>>2],u=U2[i+4>>2],s=U2[i+52>>2],Q=U2[i+24>>2],t=U2[i+16>>2],B=U2[i+20>>2],v=U2[i+56>>2],Z=U2[i+40>>2],c=U2[i+32>>2],d=U2[i+36>>2],X2[108+f>>2]=0,Y=P2(Z*P2(0)),m=P2(d*P2(0)),Z=U2[e+184>>2],U2[104+f>>2]=v+P2(Y+P2(m+P2(c*Z))),Q=P2(Q*P2(0)),w=P2(B*P2(0)),U2[100+f>>2]=s+P2(Q+P2(w+P2(t*Z))),E=P2(E*P2(0)),N=P2(u*P2(0)),U2[96+f>>2]=k+P2(E+P2(N+P2(b*Z))),X2[92+f>>2]=0,J=v,v=U2[e+188>>2],U2[88+f>>2]=J+P2(Y+P2(m+P2(c*v))),U2[84+f>>2]=s+P2(Q+P2(w+P2(t*v))),U2[80+f>>2]=k+P2(E+P2(N+P2(b*v))),i=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(n=72+f|0)>>2]=0,X2[n+4>>2]=0,X2[64+f>>2]=0,X2[68+f>>2]=0,N2[X2[X2[i>>2]+16>>2]](i,96+f|0,80+f|0,f+64|0),X2[76+f>>2]=0,U2[72+f>>2]=c,U2[68+f>>2]=t,U2[64+f>>2]=b,X2[60+f>>2]=0,U2[56+f>>2]=d,U2[52+f>>2]=B,U2[48+f>>2]=u,b=U2[e+196>>2],t=U2[e+192>>2],A=0|N2[X2[X2[A>>2]+20>>2]](A),X2[(i=40+f|0)>>2]=0,X2[i+4>>2]=0,X2[32+f>>2]=0,X2[36+f>>2]=0,N2[X2[X2[A>>2]+68>>2]](A,e+936|0,f+64|0,48+f|0,r,r,t,b,32+f|0,1,P2(10)));}K2=176+f|0;},function(A){var e,r,f=0,i=0;if(1<=(0|(r=X2[(A|=0)+248>>2])))for(A=X2[A+256>>2];;){A:{e:switch(f=X2[A>>2],X2[f+220>>2]-2|0){case 0:case 3:break A;default:break e;}3&J2[f+204|0]||(U2[f+472>>2]=P2(U2[f+424>>2]*U2[f+408>>2])+U2[f+472>>2],U2[(e=f+476|0)>>2]=P2(U2[f+428>>2]*U2[f+412>>2])+U2[e>>2],U2[(e=f+480|0)>>2]=P2(U2[f+432>>2]*U2[f+416>>2])+U2[e>>2]);}if(A=A+4|0,!((0|(i=i+1|0))<(0|r)))break;}},o1,function(A,e){A|=0,e=P2(e);var r,f=0,i=0;if(1<=X2[A+296>>2])for(;;)if(r=X2[X2[A+304>>2]+f>>2],N2[X2[X2[r>>2]+8>>2]](r,A,e),f=f+4|0,!((0|(i=i+1|0))<X2[A+296>>2]))break;},function(A){var e;return X2[(A|=0)>>2]=22660,(e=X2[A+80>>2])&&J2[A+84|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+80>>2]=0,S2[A+84|0]=1,X2[(e=A+72|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+60>>2])&&J2[A- -64|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+60>>2]=0,S2[A- -64|0]=1,X2[(e=A+52|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+40>>2])&&J2[A+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+40>>2]=0,S2[A+44|0]=1,X2[(e=A+32|0)>>2]=0,(X2[4+e>>2]=0)|A;},function(A){var e;X2[(A|=0)>>2]=22660,(e=X2[A+80>>2])&&J2[A+84|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+80>>2]=0,S2[A+84|0]=1,X2[(e=A+72|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+60>>2])&&J2[A- -64|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+60>>2]=0,S2[A- -64|0]=1,X2[(e=A+52|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+40>>2])&&J2[A+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),n(A);},function(A,e,r,f,i,a){A|=0,e|=0,r|=0,f|=0,i|=0;var n,b=0,t=0,o=0,c=0,k=0,u=0,s=0;A:{e:{r:{if(0<=(0|(a|=0))){if(1<=(0|(b=X2[A+16>>2])))break r;break e;}return a=X2[A+8>>2],void P2(N2[X2[X2[a>>2]+12>>2]](a,e,r,f,i,X2[A+12>>2],X2[A+16>>2],X2[A+4>>2],X2[A+20>>2],X2[A+24>>2]));}for(u=X2[A+12>>2];;){if(c=X2[u>>2],(0|a)==(0|(t=(0|(t=X2[X2[c+28>>2]+208>>2]))<=-1?X2[X2[c+32>>2]+208>>2]:t)))break e;if(u=u+4|0,(0|b)==(0|(o=o+1|0)))break;}u=0;break A;}if(!((0|b)<=(0|o)))for(t=b-o|0,b=X2[A+12>>2]+(o<<2)|0;;)if(c=X2[b>>2],b=b+4|0,s=((0|a)==(0|(o=(0|(o=X2[X2[c+28>>2]+208>>2]))<=-1?X2[X2[c+32>>2]+208>>2]:o)))+s|0,!(t=t-1|0))break;}if(a=X2[A+4>>2],2<=X2[a+80>>2]){if(1<=(0|r))for(t=X2[A+36>>2],o=X2[A+32>>2];;){if(n=(k<<2)+e|0,(0|t)!=(0|o))b=o;else if((0|(c=t?t<<1:1))<=(0|t))b=t;else {if(a=0,c&&(X2[6258]=X2[6258]+1,(b=L2(19+(c<<2)|0))&&(X2[(a=b+19&-16)-4>>2]=b)),1<=(0|t))for(b=0,o=t;;)if(X2[a+b>>2]=X2[X2[A+40>>2]+b>>2],b=b+4|0,!(o=o-1|0))break;(b=X2[A+40>>2])&&J2[A+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[b-4>>2]),t=X2[A+32>>2]),b=t,X2[A+40>>2]=a,S2[A+44|0]=1,t=X2[A+36>>2]=c;}if(X2[A+32>>2]=o=b+1|0,X2[X2[A+40>>2]+(b<<2)>>2]=X2[n>>2],(0|(k=k+1|0))==(0|r))break;}if(1<=(0|i))for(t=X2[A+56>>2],o=X2[A+52>>2],k=0;;){if(c=(k<<2)+f|0,(0|t)!=(0|o))b=o;else if((0|(e=t?t<<1:1))<=(0|t))b=t;else {if(a=0,e&&(X2[6258]=X2[6258]+1,(r=L2(19+(e<<2)|0))&&(X2[(a=r+19&-16)-4>>2]=r)),1<=(0|t))for(b=0,o=t;;)if(X2[a+b>>2]=X2[X2[A+60>>2]+b>>2],b=b+4|0,!(o=o-1|0))break;(r=X2[A+60>>2])&&J2[A+64|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2]),t=X2[A+52>>2]),b=t,X2[A+60>>2]=a,S2[A+64|0]=1,t=X2[A+56>>2]=e;}if(X2[A+52>>2]=o=b+1|0,X2[X2[A+60>>2]+(b<<2)>>2]=X2[c>>2],(0|(k=k+1|0))==(0|i))break;}if(s)for(t=X2[A+76>>2],o=X2[A+72>>2],k=0;;){if(f=(k<<2)+u|0,(0|t)!=(0|o))b=o;else if((0|(e=t?t<<1:1))<=(0|t))b=t;else {if(a=0,e&&(X2[6258]=X2[6258]+1,(r=L2(19+(e<<2)|0))&&(X2[(a=r+19&-16)-4>>2]=r)),1<=(0|t))for(b=0,o=t;;)if(X2[a+b>>2]=X2[X2[A+80>>2]+b>>2],b=b+4|0,!(o=o-1|0))break;(r=X2[A+80>>2])&&J2[A+84|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2]),t=X2[A+72>>2]),b=t,X2[A+80>>2]=a,S2[A+84|0]=1,t=X2[A+76>>2]=e;}if(X2[A+72>>2]=o=b+1|0,X2[X2[A+80>>2]+(b<<2)>>2]=X2[f>>2],(0|s)==(0|(k=k+1|0)))break;}else o=X2[A+72>>2];X2[X2[A+4>>2]+80>>2]<(X2[A+52>>2]+o|0)&&P4(A);}else t=X2[A+8>>2],P2(N2[X2[X2[t>>2]+12>>2]](t,e,r,f,i,u,s,a,X2[A+20>>2],X2[A+24>>2]));},A,function(A,e){var r,f,i=0;return (0|(r=X2[(e|=0)>>2]))!=(0|(f=X2[(A|=0)+84>>2]))&&X2[A+12>>2]&X2[e+4>>2]&&X2[e+8>>2]&X2[A+8>>2]&&(A=X2[A+96>>2],i=0|N2[X2[X2[A>>2]+28>>2]](A,f,r)),0|i;},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b,t,o,c,k,u,s,l=0,B=P2(0),B=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(1));return (0|(l=X2[e>>2]))==X2[A+84>>2]||4&J2[l+204|0]||P2(-U2[A+88>>2])<=P2(P2(P2(P2(U2[A+32>>2]-U2[A+16>>2])*U2[e+8>>2])+P2(P2(U2[A+36>>2]-U2[A+20>>2])*U2[e+12>>2]))+P2(P2(U2[A+40>>2]-U2[A+24>>2])*U2[e+16>>2]))||(X2[A+80>>2]=l,U2[A+4>>2]=U2[e+40>>2],r?(l=X2[(r=e+8|0)+4>>2],X2[A+48>>2]=X2[r>>2],X2[A+52>>2]=l,a=X2[(r=r+8|0)+4>>2],X2[(l=A+56|0)>>2]=X2[r>>2],X2[l+4>>2]=a):(a=U2[l+12>>2],n=U2[l+8>>2],b=U2[l+28>>2],t=U2[l+20>>2],o=U2[l+24>>2],c=U2[l+44>>2],k=U2[l+36>>2],u=U2[l+40>>2],s=U2[l+4>>2],B=U2[e+16>>2],f=U2[e+8>>2],i=U2[e+12>>2],X2[A+60>>2]=0,U2[A+56>>2]=P2(P2(f*k)+P2(i*u))+P2(B*c),U2[A+52>>2]=P2(P2(f*t)+P2(i*o))+P2(B*b),U2[A+48>>2]=P2(P2(s*f)+P2(n*i))+P2(a*B)),r=X2[e+28>>2],X2[A+64>>2]=X2[e+24>>2],X2[A+68>>2]=r,l=X2[(r=e+32|0)+4>>2],X2[(A=A+72|0)>>2]=X2[r>>2],X2[A+4>>2]=l,B=U2[e+40>>2]),P2(B);},function(A){return j4(A|=0),0|A;},function(A){j4(A|=0),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);},function(A,e){A|=0,e=P2(e);var r,f,i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,x,G,C,h,F,y,V,p,M,S,X,J,Y,m=0,N=0,R=0,D=(P2(0),0),T=(P2(0),0),W=(P2(0),P2(0),0),I=(P2(0),P2(0),0);if(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=Y=K2-496|0,1<=X2[A+324>>2])for(;;)if(T=X2[A+24>>2],N2[X2[X2[T>>2]+16>>2]](T,X2[X2[A+332>>2]+W>>2]),W=W+4|0,!((0|(N=N+1|0))<X2[A+324>>2]))break;if((T=X2[A+332>>2])&&J2[A+336|0]&&(X2[6259]=X2[6259]+1,q2(X2[T-4>>2])),X2[A+332>>2]=0,X2[A+324>>2]=0,X2[A+328>>2]=0,(S2[A+336|0]=1)<=(0|(x=X2[A+248>>2])))for(b=116+Y|0,s=84+Y|0,l=Y+64|0,T=384+Y|0,B=256+Y|0,v=240+Y|0,d=224+Y|0,c=304+Y|0,Z=368+Y|0,_=352+Y|0,o=480+Y|0,W=0;;){r=X2[X2[A+256>>2]+(W<<2)>>2],X2[r+268>>2]=1065353216;A:{e:switch(X2[r+220>>2]-2|0){case 0:case 3:break A;default:break e;}if(!(3&J2[r+204|0])&&(N4(D=r+4|0,U2[r+372>>2],U2[r+376>>2],U2[r+380>>2],r+388|0,e,432+Y|0),J2[A+44|0]&&(f=U2[r+276>>2],(a=P2(f*f))!=P2(0)&&(k=U2[480+Y>>2],f=P2(k-U2[(t=r+52|0)>>2]),i=P2(f*f),u=U2[484+Y>>2],f=P2(u-U2[r+56>>2]),n=P2(i+P2(f*f)),i=U2[488+Y>>2],f=P2(i-U2[r+60>>2]),a<P2(n+P2(f*f))&&!(19<X2[X2[r+192>>2]+4>>2])&&(m=X2[4+t>>2],X2[_>>2]=X2[t>>2],X2[4+_>>2]=m,m=X2[4+o>>2],X2[Z>>2]=X2[o>>2],X2[4+Z>>2]=m,m=X2[(N=g=8+t|0)+4>>2],X2[(R=8+_|0)>>2]=X2[N>>2],X2[R+4>>2]=m,m=X2[(R=8+o|0)+4>>2],X2[(N=8+Z|0)>>2]=X2[R>>2],X2[N+4>>2]=m,X2[340+Y>>2]=1065353216,X2[336+Y>>2]=23256,X2[416+Y>>2]=0,X2[420+Y>>2]=0,X2[428+Y>>2]=A,X2[424+Y>>2]=r,X2[c>>2]=0,X2[4+c>>2]=0,X2[(m=8+c|0)>>2]=0,X2[m+4>>2]=0,X2[16+c>>2]=0,X2[284+Y>>2]=0,X2[288+Y>>2]=0,X2[300+Y>>2]=1065353216,X2[292+Y>>2]=1065353216,X2[296+Y>>2]=1065353216,X2[276+Y>>2]=8,X2[280+Y>>2]=0,X2[272+Y>>2]=14616,X2[328+Y>>2]=0,f=U2[r+272>>2],U2[308+Y>>2]=f,U2[324+Y>>2]=f,m=X2[r+188>>2],X2[344+Y>>2]=X2[m+4>>2],X2[348+Y>>2]=X2[m+8>>2],m=X2[R+4>>2],X2[(N=8+B|0)>>2]=X2[R>>2],X2[N+4>>2]=m,m=X2[4+o>>2],X2[B>>2]=X2[o>>2],X2[4+B>>2]=m,m=X2[(N=D+8|0)+4>>2],X2[(R=216+Y|0)>>2]=X2[N>>2],X2[R+4>>2]=m,m=X2[(N=r+20|0)+4>>2],X2[d>>2]=X2[N>>2],X2[4+d>>2]=m,m=X2[(N=r+28|0)+4>>2],X2[(R=8+d|0)>>2]=X2[N>>2],X2[R+4>>2]=m,m=X2[(N=r+36|0)+4>>2],X2[v>>2]=X2[N>>2],X2[4+v>>2]=m,m=X2[(N=r+44|0)+4>>2],X2[(R=8+v|0)>>2]=X2[N>>2],X2[R+4>>2]=m,m=X2[D+4>>2],X2[208+Y>>2]=X2[D>>2],X2[212+Y>>2]=m,X4(A,272+Y|0,D,208+Y|0,336+Y|0,P2(0)),(f=U2[340+Y>>2])<P2(1)))))){if(G=P2(P2(u-U2[r+56>>2])*f),n=P2(P2(k-U2[r+52>>2])*f),C=P2(f*P2(i-U2[r+60>>2])),a=P2(P2(P2(G*P2(-U2[388+Y>>2]))-P2(U2[384+Y>>2]*n))-P2(C*U2[392+Y>>2])),m=X2[A+24>>2],E=0|N2[X2[X2[m>>2]+12>>2]](m,r,X2[416+Y>>2]),(0|(N=X2[A+324>>2]))==X2[A+328>>2]&&!((0|(D=N?N<<1:1))<=(0|N))){if(R=0,D&&(X2[6258]=X2[6258]+1,(m=L2(19+(D<<2)|0))&&(X2[(R=m+19&-16)-4>>2]=m)),1<=(0|N))for(I=0,m=N;;)if(X2[R+I>>2]=X2[X2[A+332>>2]+I>>2],I=I+4|0,!(m=m-1|0))break;(m=X2[A+332>>2])&&J2[A+336|0]&&(X2[6259]=X2[6259]+1,q2(X2[m-4>>2]),N=X2[A+324>>2]),X2[A+332>>2]=R,S2[A+336|0]=1,X2[A+328>>2]=D;}X2[X2[A+332>>2]+(N<<2)>>2]=E,X2[A+324>>2]=N+1,m=X2[416+Y>>2],h=U2[m+20>>2],F=U2[m+36>>2],y=U2[m+40>>2],V=U2[m+8>>2],p=U2[m+24>>2],Q=U2[m+60>>2],k=U2[m+56>>2],w=U2[m+52>>2],M=U2[m+44>>2],S=U2[m+12>>2],X=U2[m+28>>2],J=U2[m+4>>2],u=U2[r+60>>2],i=U2[r+52>>2],f=U2[r+56>>2],X2[(m=8+Y|0)>>2]=0,X2[m+4>>2]=0,X2[s>>2]=0,X2[4+s>>2]=0,X2[(m=8+s|0)>>2]=0,X2[m+4>>2]=0,X2[b>>2]=0,X2[4+b>>2]=0,X2[(m=8+b|0)>>2]=0,X2[m+4>>2]=0,X2[(m=16+b|0)>>2]=0,X2[m+4>>2]=0,X2[(m=24+b|0)>>2]=0,X2[m+4>>2]=0,X2[(m=32+b|0)>>2]=0,X2[m+4>>2]=0,X2[(m=40+b|0)>>2]=0,X2[m+4>>2]=0,X2[48+b>>2]=0,m=X2[T+4>>2],X2[l>>2]=X2[T>>2],X2[4+l>>2]=m,m=X2[(N=T+8|0)+4>>2],X2[(R=8+l|0)>>2]=X2[N>>2],X2[R+4>>2]=m,X2[Y>>2]=0,X2[4+Y>>2]=0,X2[28+Y>>2]=0,U2[80+Y>>2]=a,n=P2(n+i),a=P2(G+f),i=P2(C+u),f=P2(-k),U2[24+Y>>2]=P2(P2(P2(S*n)+P2(X*a))+P2(M*i))+P2(P2(P2(X*f)-P2(S*w))-P2(M*Q)),U2[20+Y>>2]=P2(P2(P2(n*V)+P2(a*p))+P2(i*y))+P2(P2(P2(p*f)-P2(V*w))-P2(y*Q)),U2[16+Y>>2]=P2(P2(P2(n*J)+P2(a*h))+P2(i*F))+P2(P2(P2(h*f)-P2(J*w))-P2(F*Q)),X2[200+Y>>2]=X2[r+192>>2],X2[204+Y>>2]=X2[420+Y>>2],D=H2(D1(E,Y),208)+E|0,X2[D+100>>2]=0,U2[D+88>>2]=m2(P2(z2(P2(U2[r+228>>2]*U2[X2[416+Y>>2]+228>>2]),P2(-10))),P2(10)),m=X2[4+g>>2],X2[(N=D+60|0)>>2]=X2[g>>2],X2[N+4>>2]=m,R=X2[4+t>>2],N=X2[t>>2],X2[D+48>>2]=0,U2[D+44>>2]=i,U2[D+40>>2]=a,X2[(m=D+52|0)>>2]=N,X2[m+4>>2]=R,U2[D+36>>2]=n;}}if((0|x)==(0|(W=W+1|0)))break;}K2=496+Y|0;},function(A){var e=0,r=0,f=0,i=0;if(1<=X2[(A|=0)+248>>2])for(;;){A:{e:switch(e=X2[X2[A+256>>2]+f>>2],X2[e+220>>2]-2|0){case 0:case 3:break A;default:break e;}2&(r=X2[e+204>>2])||(U2[e+504>>2]==P2(1)?(X2[e+472>>2]=0,X2[e+476>>2]=0,X2[(r=e+480|0)>>2]=0,X2[r+4>>2]=0):3&r||(U2[e+472>>2]=P2(U2[e+424>>2]*U2[e+408>>2])+U2[e+472>>2],U2[(r=e+476|0)>>2]=P2(U2[e+428>>2]*U2[e+412>>2])+U2[r>>2],U2[(r=e+480|0)>>2]=P2(U2[e+432>>2]*U2[e+416>>2])+U2[r>>2]),U2[e+508>>2]==P2(1)&&(X2[e+488>>2]=0,X2[e+492>>2]=0,X2[(e=e+496|0)>>2]=0,X2[e+4>>2]=0));}if(f=f+4|0,!((0|(i=i+1|0))<X2[A+248>>2]))break;}},e,A,function(A,e,r){return A|=0,X2[(r|=A=0)+8>>2]&X2[(e|=0)+4>>2]&&X2[e+8>>2]&X2[r+4>>2]&&(e=X2[e>>2],r=X2[r>>2],1&S2[r+204|0]&&1&S2[e+204|0]||2==X2[r+220>>2]&&2==X2[e+220>>2]||(A=1)),0|A;},A,function(A,e){var r,f,i=0;return (0|(r=X2[(e|=0)>>2]))!=(0|(f=X2[(A|=0)+88>>2]))&&X2[A+12>>2]&X2[e+4>>2]&&X2[e+8>>2]&X2[A+8>>2]&&(A=X2[X2[A+92>>2]+24>>2],i=0|N2[X2[X2[A>>2]+28>>2]](A,f,r)),0|i;},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b,t,o,c,k,u,s,l,B=0;return P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),U2[A+4>>2]=U2[e+40>>2],B=X2[e>>2],X2[A+80>>2]=B,X2[A+84>>2]=X2[X2[e+4>>2]+8>>2],r?(r=X2[e+12>>2],X2[A+48>>2]=X2[e+8>>2],X2[A+52>>2]=r,n=X2[(B=e+16|0)+4>>2],X2[(r=A+56|0)>>2]=X2[B>>2],X2[r+4>>2]=n):(n=U2[B+8>>2],b=U2[B+12>>2],t=U2[B+20>>2],o=U2[B+24>>2],c=U2[B+28>>2],k=U2[B+36>>2],u=U2[B+40>>2],f=U2[e+12>>2],s=U2[B+44>>2],i=U2[e+16>>2],l=U2[B+4>>2],a=U2[e+8>>2],X2[A+60>>2]=0,U2[A+56>>2]=P2(P2(a*k)+P2(f*u))+P2(i*s),U2[A+52>>2]=P2(P2(a*t)+P2(f*o))+P2(i*c),U2[A+48>>2]=P2(P2(l*a)+P2(n*f))+P2(b*i)),r=X2[e+28>>2],X2[A+64>>2]=X2[e+24>>2],X2[A+68>>2]=r,B=X2[(r=e+32|0)+4>>2],X2[(A=A+72|0)>>2]=X2[r>>2],X2[A+4>>2]=B,P2(U2[e+40>>2]);},L4,function(A){A|=0;var e,r,f,i,a,n,x,y,V,p,M,S,X,J,U,H,P,j,z,b,t=0,o=P2(0),c=P2(0),k=P2(0),u=P2(0),s=0,l=P2(0),B=0,v=P2(0),d=P2(0),Z=0,_=P2(0),g=P2(0),E=P2(0),Q=P2(0),w=P2(0),G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=P2(0),R=P2(0),D=(P2(0),P2(0)),T=P2(0),W=(P2(0),P2(0),P2(0)),I=(P2(0),0),O=0,K=0,L=0,q=0,$=0,A2=0,e2=0,r2=0,f2=0,i2=0,a2=0,n2=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0));K2=b=K2-176|0,J2[A+738|0]&&(X2[A+744>>2]=0,X2[A+36>>2]=0,J2[A+736|0]||(k=U2[A+664>>2],s=X2[A+32>>2],F=U2[s+4>>2],u=U2[A+668>>2],E=U2[s+8>>2],Y=U2[A+672>>2],w=U2[s+12>>2],D=P2(P2(P2(P2(k*F)+P2(u*E))+P2(Y*w))+U2[s+52>>2]),g=U2[A+600>>2],t=X2[A+28>>2],c=U2[A+604>>2],o=U2[A+608>>2],W=P2(P2(P2(P2(g*U2[t+4>>2])+P2(c*U2[t+8>>2]))+P2(o*U2[t+12>>2]))+U2[t+52>>2]),Q=P2(D-W),C=U2[s+20>>2],h=U2[s+24>>2],v=U2[s+28>>2],m=P2(P2(P2(P2(k*C)+P2(u*h))+P2(Y*v))+U2[s+56>>2]),N=P2(P2(P2(P2(g*U2[t+20>>2])+P2(c*U2[t+24>>2]))+P2(o*U2[t+28>>2]))+U2[t+56>>2]),d=P2(m-N),T=k,k=U2[s+36>>2],n2=u,u=U2[s+40>>2],R=P2(P2(P2(P2(T*k)+P2(n2*u))+P2(Y*U2[s+44>>2]))+U2[s+60>>2]),Y=P2(P2(P2(P2(g*U2[t+36>>2])+P2(c*U2[t+40>>2]))+P2(o*U2[t+44>>2]))+U2[t+60>>2]),c=P2(R-Y),o=(o=P2(P2(P2(Q*Q)+P2(d*d))+P2(c*c)))>P2(1.1920928955078125e-7)?(o=P2(P2(1)/P2(O2(o))),l=P2(c*o),_=P2(d*o),P2(Q*o)):P2(1),X2[140+b>>2]=0,U2[132+b>>2]=_,U2[128+b>>2]=o,U2[136+b>>2]=l,a2=160+b|0,t=144+b|0,P2(j2(l))>P2(.7071067690849304)?(c=P2(P2(l*l)+P2(_*_)),g=P2(P2(1)/P2(O2(c))),Q=P2(c*g),d=P2(g*P2(-l)),c=P2(o*d),l=P2(_*g),_=P2(l*P2(-o))):(c=P2(P2(o*o)+P2(_*_)),d=P2(P2(1)/P2(O2(c))),c=P2(c*d),G=P2(d*P2(-_)),_=P2(l*G),d=P2(o*d),Q=P2(d*P2(-l)),l=P2(0)),U2[168+b>>2]=c,U2[164+b>>2]=_,U2[152+b>>2]=l,U2[148+b>>2]=d,U2[160+b>>2]=Q,U2[144+b>>2]=G,X2[(I=108+b|0)>>2]=0,B=X2[A+28>>2],U2[(Z=100+b|0)>>2]=U2[B+24>>2],U2[(O=104+b|0)>>2]=U2[B+40>>2],U2[(K=116+b|0)>>2]=U2[B+28>>2],X2[92+b>>2]=0,U2[80+b>>2]=U2[B+4>>2],U2[84+b>>2]=U2[B+20>>2],U2[88+b>>2]=U2[B+36>>2],U2[96+b>>2]=U2[B+8>>2],U2[112+b>>2]=U2[B+12>>2],X2[(L=124+b|0)>>2]=0,U2[(q=120+b|0)>>2]=U2[B+44>>2],U2[($=68+b|0)>>2]=v,X2[(A2=60+b|0)>>2]=0,U2[(e2=56+b|0)>>2]=u,U2[(r2=52+b|0)>>2]=h,X2[(f2=76+b|0)>>2]=0,U2[(i2=72+b|0)>>2]=U2[s+44>>2],U2[64+b>>2]=w,U2[48+b>>2]=E,X2[44+b>>2]=0,U2[40+b>>2]=k,U2[36+b>>2]=C,U2[32+b>>2]=F,X2[28+b>>2]=0,U2[24+b>>2]=Y-U2[B+60>>2],U2[20+b>>2]=N-U2[B+56>>2],U2[16+b>>2]=W-U2[B+52>>2],X2[12+b>>2]=0,U2[8+b>>2]=R-U2[s+60>>2],U2[4+b>>2]=m-U2[s+56>>2],U2[b>>2]=D-U2[s+52>>2],U4(A+48|0,80+b|0,32+b|0,16+b|0,b,128+b|0,B+456|0,U2[B+404>>2],s+456|0,U2[s+404>>2]),X2[I>>2]=0,s=X2[A+28>>2],U2[Z>>2]=U2[s+24>>2],U2[O>>2]=U2[s+40>>2],U2[K>>2]=U2[s+28>>2],X2[92+b>>2]=0,U2[80+b>>2]=U2[s+4>>2],U2[84+b>>2]=U2[s+20>>2],U2[88+b>>2]=U2[s+36>>2],U2[96+b>>2]=U2[s+8>>2],U2[112+b>>2]=U2[s+12>>2],X2[L>>2]=0,U2[q>>2]=U2[s+44>>2],X2[A2>>2]=0,B=X2[A+32>>2],U2[r2>>2]=U2[B+24>>2],U2[e2>>2]=U2[B+40>>2],U2[$>>2]=U2[B+28>>2],X2[44+b>>2]=0,U2[32+b>>2]=U2[B+4>>2],U2[36+b>>2]=U2[B+20>>2],U2[40+b>>2]=U2[B+36>>2],U2[48+b>>2]=U2[B+8>>2],U2[64+b>>2]=U2[B+12>>2],X2[f2>>2]=0,U2[i2>>2]=U2[B+44>>2],X2[28+b>>2]=0,U2[24+b>>2]=Y-U2[s+60>>2],U2[20+b>>2]=N-U2[s+56>>2],U2[16+b>>2]=W-U2[s+52>>2],X2[12+b>>2]=0,U2[8+b>>2]=R-U2[B+60>>2],U2[4+b>>2]=m-U2[B+56>>2],U2[b>>2]=D-U2[B+52>>2],U4(A+132|0,80+b|0,32+b|0,16+b|0,b,t,s+456|0,U2[s+404>>2],B+456|0,U2[B+404>>2]),X2[I>>2]=0,t=Z,Z=X2[A+28>>2],U2[t>>2]=U2[Z+24>>2],U2[O>>2]=U2[Z+40>>2],U2[K>>2]=U2[Z+28>>2],X2[92+b>>2]=0,U2[80+b>>2]=U2[Z+4>>2],U2[84+b>>2]=U2[Z+20>>2],U2[88+b>>2]=U2[Z+36>>2],U2[96+b>>2]=U2[Z+8>>2],U2[112+b>>2]=U2[Z+12>>2],X2[L>>2]=0,U2[q>>2]=U2[Z+44>>2],X2[A2>>2]=0,t=X2[A+32>>2],U2[r2>>2]=U2[t+24>>2],U2[e2>>2]=U2[t+40>>2],U2[$>>2]=U2[t+28>>2],X2[44+b>>2]=0,U2[32+b>>2]=U2[t+4>>2],U2[36+b>>2]=U2[t+20>>2],U2[40+b>>2]=U2[t+36>>2],U2[48+b>>2]=U2[t+8>>2],U2[64+b>>2]=U2[t+12>>2],X2[f2>>2]=0,U2[i2>>2]=U2[t+44>>2],X2[28+b>>2]=0,U2[24+b>>2]=Y-U2[Z+60>>2],U2[20+b>>2]=N-U2[Z+56>>2],U2[16+b>>2]=W-U2[Z+52>>2],X2[12+b>>2]=0,U2[8+b>>2]=R-U2[t+60>>2],U2[4+b>>2]=m-U2[t+56>>2],U2[b>>2]=D-U2[t+52>>2],U4(A+216|0,80+b|0,32+b|0,16+b|0,b,a2,Z+456|0,U2[Z+404>>2],t+456|0,U2[t+404>>2])),i=U2[A+576>>2],n=U2[A+560>>2],a=U2[A+592>>2],o=P2(j2(a))>P2(.7071067690849304)?(o=P2(P2(i*i)+P2(a*a)),c=P2(P2(1)/P2(O2(o))),l=P2(o*c),g=P2(c*P2(-a)),_=P2(n*g),G=P2(0),Q=P2(i*c),P2(Q*P2(-n))):(o=P2(P2(n*n)+P2(i*i)),c=P2(P2(1)/P2(O2(o))),_=P2(o*c),g=P2(n*c),l=P2(g*P2(-a)),Q=P2(0),G=P2(c*P2(-i)),P2(a*G)),e=X2[A+32>>2],F=U2[(U=e+36|0)>>2],E=U2[(H=e+20|0)>>2],w=U2[(P=e+40|0)>>2],C=U2[(j=e+24|0)>>2],h=U2[(z=e+8|0)>>2],v=U2[(s=e+44|0)>>2],k=U2[(B=e+28|0)>>2],u=U2[(I=e+12|0)>>2],r=X2[A+28>>2],x=U2[(Z=r+44|0)>>2],y=U2[(O=r+36|0)>>2],V=U2[(K=r+40|0)>>2],p=U2[(L=r+12|0)>>2],M=U2[(q=r+8|0)>>2],S=U2[($=r+28|0)>>2],X=U2[(A2=r+20|0)>>2],J=U2[(e2=r+24|0)>>2],c=U2[e+4>>2],f=U2[r+4>>2],X2[A+344>>2]=0,X2[A+328>>2]=0,X2[(t=A+308|0)>>2]=0,X2[t+4>>2]=0,X2[A+300>>2]=0,X2[A+304>>2]=0,m=P2(P2(P2(G*f)+P2(g*M))+P2(Q*p)),d=P2(P2(P2(G*X)+P2(g*J))+P2(Q*S)),N=P2(P2(P2(G*y)+P2(g*V))+P2(Q*x)),R=P2(P2(P2(p*m)+P2(S*d))+P2(x*N)),U2[A+324>>2]=R,Y=P2(P2(P2(M*m)+P2(J*d))+P2(V*N)),U2[A+320>>2]=Y,g=P2(P2(P2(f*m)+P2(X*d))+P2(y*N)),U2[A+316>>2]=g,T=k,k=P2(-d),Q=P2(P2(P2(T*k)-P2(m*u))-P2(N*v)),U2[A+340>>2]=Q,d=P2(P2(P2(C*k)-P2(m*h))-P2(N*w)),U2[A+336>>2]=d,E=P2(P2(P2(E*k)-P2(m*c))-P2(N*F)),U2[A+332>>2]=E,k=U2[(r2=r+460|0)>>2],u=U2[(f2=r+464|0)>>2],c=U2[r+456>>2],X2[A+360>>2]=0,w=P2(R*u),U2[A+356>>2]=w,C=P2(Y*k),U2[A+352>>2]=C,h=P2(g*c),U2[A+348>>2]=h,v=U2[(i2=e+460|0)>>2],u=U2[(a2=e+464|0)>>2],c=U2[e+456>>2],X2[A+376>>2]=0,k=P2(Q*u),U2[A+372>>2]=k,u=P2(d*v),U2[A+368>>2]=u,c=P2(E*c),U2[A+364>>2]=c,U2[A+380>>2]=P2(P2(P2(g*h)+P2(Y*C))+P2(R*w))+P2(P2(P2(E*c)+P2(d*u))+P2(Q*k)),D=U2[O>>2],W=U2[A2>>2],m=U2[K>>2],N=U2[q>>2],R=U2[e2>>2],Y=U2[Z>>2],g=U2[L>>2],Q=U2[$>>2],d=U2[U>>2],F=U2[H>>2],E=U2[P>>2],w=U2[j>>2],C=U2[z>>2],h=U2[s>>2],v=U2[B>>2],k=U2[I>>2],u=U2[r+4>>2],c=U2[e+4>>2],X2[A+428>>2]=0,X2[A+412>>2]=0,X2[(t=A+392|0)>>2]=0,X2[t+4>>2]=0,X2[(t=A+384|0)>>2]=0,X2[t+4>>2]=0,T=v,G=P2(P2(P2(l*X)+P2(o*J))+P2(_*S)),v=P2(-G),n2=k,k=P2(P2(P2(l*f)+P2(o*M))+P2(_*p)),o=P2(P2(P2(l*y)+P2(o*V))+P2(_*x)),l=P2(P2(P2(T*v)-P2(n2*k))-P2(h*o)),U2[A+424>>2]=l,_=P2(P2(P2(w*v)-P2(k*C))-P2(o*E)),U2[A+420>>2]=_,d=P2(P2(P2(F*v)-P2(k*c))-P2(o*d)),U2[A+416>>2]=d,F=P2(P2(P2(k*g)+P2(G*Q))+P2(o*Y)),U2[A+408>>2]=F,E=P2(P2(P2(k*N)+P2(G*R))+P2(o*m)),U2[A+404>>2]=E,w=P2(P2(P2(k*u)+P2(G*W))+P2(o*D)),U2[A+400>>2]=w,u=U2[r2>>2],c=U2[f2>>2],o=U2[r+456>>2],X2[A+444>>2]=0,C=P2(F*c),U2[A+440>>2]=C,h=P2(E*u),U2[A+436>>2]=h,v=P2(w*o),U2[A+432>>2]=v,k=U2[i2>>2],c=U2[a2>>2],o=U2[e+456>>2],X2[A+460>>2]=0,u=P2(l*c),U2[A+456>>2]=u,c=P2(_*k),U2[A+452>>2]=c,o=P2(d*o),U2[A+448>>2]=o,U2[A+464>>2]=P2(P2(P2(w*v)+P2(E*h))+P2(F*C))+P2(P2(P2(d*o)+P2(_*c))+P2(l*u)),W=U2[O>>2],m=U2[A2>>2],N=U2[K>>2],R=U2[q>>2],Y=U2[e2>>2],g=U2[Z>>2],Q=U2[L>>2],d=U2[$>>2],F=U2[U>>2],E=U2[H>>2],w=U2[P>>2],C=U2[j>>2],h=U2[z>>2],v=U2[s>>2],k=U2[B>>2],u=U2[I>>2],c=U2[r+4>>2],o=U2[e+4>>2],X2[A+512>>2]=0,X2[A+496>>2]=0,X2[(t=A+476|0)>>2]=0,X2[t+4>>2]=0,X2[(t=A+468|0)>>2]=0,X2[t+4>>2]=0,T=k,G=P2(P2(P2(n*X)+P2(i*J))+P2(a*S)),k=P2(-G),f=P2(P2(P2(n*f)+P2(i*M))+P2(a*p)),T=P2(P2(T*k)-P2(u*f)),u=P2(P2(P2(n*y)+P2(i*V))+P2(a*x)),l=P2(T-P2(v*u)),U2[A+508>>2]=l,_=P2(P2(P2(C*k)-P2(f*h))-P2(u*w)),U2[A+504>>2]=_,D=P2(P2(P2(E*k)-P2(f*o))-P2(u*F)),U2[A+500>>2]=D,F=P2(P2(P2(f*Q)+P2(G*d))+P2(u*g)),U2[A+492>>2]=F,E=P2(P2(P2(f*R)+P2(G*Y))+P2(u*N)),U2[A+488>>2]=E,w=P2(P2(P2(f*c)+P2(G*m))+P2(u*W)),U2[A+484>>2]=w,u=U2[r2>>2],c=U2[f2>>2],o=U2[r+456>>2],X2[A+528>>2]=0,C=P2(F*c),U2[A+524>>2]=C,h=P2(E*u),U2[A+520>>2]=h,v=P2(w*o),U2[A+516>>2]=v,k=U2[i2>>2],c=U2[a2>>2],o=U2[e+456>>2],X2[A+724>>2]=0,X2[A+544>>2]=0,u=P2(l*c),U2[A+540>>2]=u,c=P2(_*k),U2[A+536>>2]=c,o=P2(D*o),U2[A+532>>2]=o,U2[A+548>>2]=P2(P2(P2(w*v)+P2(E*h))+P2(F*C))+P2(P2(P2(D*o)+P2(_*c))+P2(l*u)),o=q4(A,r+4|0,e+4|0),X2[(t=A+708|0)>>2]=0,X2[t+4>>2]=0,U2[A+728>>2]=o,S2[A+716|0]=0,(c=U2[A+692>>2])>=P2(0)&&((l=b2(P2(o-U2[A+688>>2])))<P2(-3.1415927410125732)?l=P2(l+P2(6.2831854820251465)):l>P2(3.1415927410125732)&&(l=P2(l+P2(-6.2831854820251465))),P2(-c)>l?(X2[A+712>>2]=1065353216,S2[A+716|0]=1,U2[A+708>>2]=-P2(c+l)):c<l&&(X2[A+712>>2]=-1082130432,S2[A+716|0]=1,U2[A+708>>2]=c-l)),u=U2[(Z=A)+560>>2],t=X2[A+28>>2],c=U2[A+576>>2],o=U2[A+592>>2],v=P2(P2(P2(u*U2[t+4>>2])+P2(c*U2[t+8>>2]))+P2(o*U2[t+12>>2])),k=P2(P2(P2(u*U2[t+20>>2])+P2(c*U2[t+24>>2]))+P2(o*U2[t+28>>2])),o=P2(P2(P2(u*U2[t+36>>2])+P2(c*U2[t+40>>2]))+P2(o*U2[t+44>>2])),A=X2[A+32>>2],U2[Z+720>>2]=P2(1)/P2(P2(P2(P2(v*P2(P2(P2(v*U2[t+324>>2])+P2(k*U2[t+340>>2]))+P2(o*U2[t+356>>2])))+P2(k*P2(P2(P2(v*U2[t+328>>2])+P2(k*U2[t+344>>2]))+P2(o*U2[t+360>>2]))))+P2(o*P2(P2(P2(v*U2[t+332>>2])+P2(k*U2[t+348>>2]))+P2(o*U2[t+364>>2]))))+P2(P2(P2(v*P2(P2(P2(v*U2[A+324>>2])+P2(k*U2[A+340>>2]))+P2(o*U2[A+356>>2])))+P2(k*P2(P2(P2(v*U2[A+328>>2])+P2(k*U2[A+344>>2]))+P2(o*U2[A+360>>2]))))+P2(o*P2(P2(P2(v*U2[A+332>>2])+P2(k*U2[A+348>>2]))+P2(o*U2[A+364>>2])))))),K2=176+b|0;},function(A,e){A|=0,e|=0;var r,f,i=P2(0);if(P2(0),J2[A+738|0])X2[e>>2]=0,X2[e+4>>2]=0;else {X2[e>>2]=5,X2[e+4>>2]=1,i=q4(A,X2[A+28>>2]+4|0,X2[A+32>>2]+4|0),X2[(f=A+708|0)>>2]=0,X2[4+f>>2]=0,U2[A+728>>2]=i,S2[A+716|0]=0;A:{e:{if((r=U2[A+692>>2])>=P2(0)){if((i=b2(P2(i-U2[A+688>>2])))<P2(-3.1415927410125732)?i=P2(i+P2(6.2831854820251465)):i>P2(3.1415927410125732)&&(i=P2(i+P2(-6.2831854820251465))),P2(-r)>i){X2[A+712>>2]=1065353216,S2[A+716|0]=1,U2[A+708>>2]=-P2(r+i);break e;}if(r<i){X2[A+712>>2]=-1082130432,S2[A+716|0]=1,U2[A+708>>2]=r-i;break e;}}if(!J2[A+737|0])break A;}X2[e>>2]=X2[e>>2]+1,X2[e+4>>2]=X2[e+4>>2]-1;}}},function(A,e){A|=0,e|=0;var x,r=P2(0),f=P2(0),i=P2(0),a=0,n=0,b=P2(0),t=P2(0),o=0,c=P2(0),k=0,u=P2(0),s=P2(0),l=P2(0),B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=P2(0),g=P2(0),E=0,Q=P2(0),w=0,G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=0,m=0,N=P2(0),R=P2(0),D=P2(0),T=P2(0),y=0,V=P2(0),p=P2(0),M=P2(0),S=P2(0),X=P2(0),J=P2(0),U=P2(0),H=0,P=P2(0),j=P2(0),z=P2(0),O=P2(0),K=P2(0),L=P2(0),q=P2(0),$=P2(0),A2=P2(0),e2=P2(0),r2=P2(0),f2=P2(0),i2=P2(0),o=X2[e+24>>2],W=X2[A+32>>2],I=X2[A+28>>2];A:if(J2[A+739|0]){if(i=U2[X2[A+32>>2]+404>>2],L=U2[X2[A+28>>2]+404>>2],r=(r=P2(i+L))>P2(0)?P2(i/r):P2(.5),f=P2(P2(1)-r),l=U2[W+36>>2],c=U2[A+664>>2],u=U2[W+40>>2],g=U2[A+668>>2],v=U2[W+44>>2],b=U2[A+672>>2],s=U2[W+60>>2],q=P2(P2(P2(P2(l*c)+P2(u*g))+P2(v*b))+s),p=G=P2(q-s),s=U2[A+560>>2],_=U2[I+36>>2],Z=U2[A+576>>2],d=U2[I+40>>2],t=U2[A+592>>2],h=U2[I+44>>2],P=P2(P2(P2(s*_)+P2(Z*d))+P2(t*h)),B=U2[A+624>>2],T=P2(B*l),l=U2[A+640>>2],T=P2(T+P2(l*u)),u=U2[A+656>>2],j=P2(T+P2(u*v)),v=P2(P2(P*r)+P2(j*f)),V=P2((T=v)*v),F=U2[I+4>>2],N=U2[I+8>>2],R=U2[I+12>>2],z=P2(P2(P2(F*s)+P2(N*Z))+P2(R*t)),Q=U2[W+4>>2],C=U2[W+8>>2],M=U2[W+12>>2],O=P2(P2(P2(Q*B)+P2(C*l))+P2(M*u)),v=P2(P2(z*r)+P2(O*f)),D=U2[I+20>>2],X=U2[I+24>>2],K=U2[I+28>>2],J=P2(P2(P2(s*D)+P2(Z*X))+P2(t*K)),S=U2[W+20>>2],t=l,l=U2[W+24>>2],s=u,u=U2[W+28>>2],U=P2(P2(P2(B*S)+P2(t*l))+P2(s*u)),t=P2(P2(J*r)+P2(U*f)),B=P2(P2(1)/P2(O2(P2(V+P2(P2(v*v)+P2(t*t)))))),s=P2(T*B),T=P2(G*s),Z=U2[W+52>>2],M=P2(Z+P2(P2(P2(Q*c)+P2(C*g))+P2(M*b))),G=P2(M-Z),Z=P2(v*B),l=P2(P2(P2(S*c)+P2(l*g))+P2(u*b)),c=U2[W+56>>2],S=P2(l+c),l=P2(S-c),g=P2(t*B),c=P2(T+P2(P2(G*Z)+P2(l*g))),u=P2(s*c),$=P2(p-u),b=U2[A+600>>2],t=U2[A+604>>2],B=U2[A+608>>2],v=U2[I+60>>2],A2=P2(P2(P2(P2(_*b)+P2(d*t))+P2(h*B))+v),Q=P2(A2-v),v=U2[I+52>>2],e2=P2(v+P2(P2(P2(F*b)+P2(N*t))+P2(R*B))),C=P2(e2-v),v=P2(P2(P2(D*b)+P2(X*t))+P2(K*B)),b=U2[I+56>>2],r2=P2(v+b),B=P2(r2-b),b=P2(P2(s*Q)+P2(P2(C*Z)+P2(B*g))),V=P2(s*b),u=P2(V-u),t=P2($-P2(f*u)),v=l,l=P2(g*c),f2=P2(v-l),i2=P2(g*b),p=P2(i2-l),l=P2(f2-P2(f*p)),c=P2(Z*c),T=P2(G-c),b=P2(Z*b),c=P2(b-c),v=P2(T-P2(f*c)),V=P2(Q-V),G=P2(V+P2(r*u)),u=P2(B-i2),Q=P2(u+P2(r*p)),b=P2(C-b),C=P2(b+P2(r*c)),n=L<P2(1.1920928955078125e-7)|i<P2(1.1920928955078125e-7),i=P2(P2(r*$)+P2(f*V)),B=P2(P2(r*T)+P2(f*b)),c=P2(P2(r*f2)+P2(f*u)),(b=P2(P2(i*i)+P2(P2(B*B)+P2(c*c))))>P2(1.1920928955078125e-7)?(u=i,i=P2(P2(1)/P2(O2(b))),b=P2(u*i),c=P2(c*i),i=P2(B*i)):(b=U2[A+556>>2],B=U2[A+572>>2],u=U2[A+588>>2],i=P2(P2(P2(F*b)+P2(N*B))+P2(R*u)),c=P2(P2(P2(b*D)+P2(B*X))+P2(u*K)),b=P2(P2(P2(b*_)+P2(B*d))+P2(u*h))),a=X2[e+12>>2],U2[a+8>>2]=P2(C*c)-P2(Q*i),U2[a+4>>2]=P2(G*i)-P2(C*b),U2[a>>2]=P2(Q*b)-P2(G*c),a=X2[e+20>>2],U2[a+8>>2]=-P2(P2(v*c)-P2(l*i)),U2[a+4>>2]=-P2(P2(t*i)-P2(v*b)),U2[a>>2]=-P2(P2(l*b)-P2(t*c)),d=P2(P2(s*i)-P2(Z*b)),h=P2(P2(g*b)-P2(s*c)),u=P2(P2(v*d)-P2(l*h)),B=P2(P2(Z*c)-P2(g*i)),_=P2(P2(t*h)-P2(v*B)),N=P2(P2(l*B)-P2(t*d)),R=P2(P2(C*d)-P2(Q*h)),D=P2(P2(G*h)-P2(C*B)),F=P2(P2(Q*B)-P2(G*d)),n&&J2[A+716|0]&&(R=P2(r*R),D=P2(r*D),F=P2(r*F),u=P2(f*u),_=P2(f*_),N=P2(f*N)),a=(k=o<<2)+X2[e+12>>2]|0,U2[a+8>>2]=R,U2[a+4>>2]=D,U2[a>>2]=F,a=X2[e+20>>2],U2[a+k>>2]=-N,U2[a+((E=o+1|0)<<2)>>2]=-_,U2[a+((w=o+2|0)<<2)>>2]=-u,u=P2(P2(v*g)-P2(l*Z)),v=P2(P2(t*Z)-P2(v*s)),l=P2(P2(l*s)-P2(t*g)),_=P2(P2(C*g)-P2(Q*Z)),t=P2(P2(G*Z)-P2(C*s)),G=P2(P2(Q*s)-P2(G*g)),n&&(_=P2(r*_),G=P2(r*G),u=P2(f*u),v=P2(f*v),l=P2(f*l),t=P2(r*t)),a=(k=(n=o<<1)<<2)+X2[e+12>>2]|0,U2[a+8>>2]=_,U2[a+4>>2]=t,U2[a>>2]=G,a=X2[e+20>>2],U2[k+a>>2]=-l,U2[((Y=1|n)<<2)+a>>2]=-v,U2[((m=n+2|0)<<2)+a>>2]=-u,l=U2[(8&J2[A+748|0]?A+756|0:e+4|0)>>2],J2[A+736|0]?(r=P2(-B),f=P2(-d),_=P2(-h),v=P2(-b),G=P2(-c),t=P2(-i),w=X2[e+28>>2]):(u=U2[e>>2],a=X2[e+8>>2],U2[a+8>>2]=b,U2[a+4>>2]=c,U2[a>>2]=i,k=(a=o<<2)+X2[e+8>>2]|0,U2[k+8>>2]=B,U2[k+4>>2]=d,U2[k>>2]=h,n=(k=n<<2)+X2[e+8>>2]|0,U2[n+8>>2]=s,U2[n+4>>2]=g,U2[n>>2]=Z,n=X2[e+16>>2],v=P2(-b),U2[n+8>>2]=v,G=P2(-c),U2[n+4>>2]=G,t=P2(-i),U2[n>>2]=t,_=P2(-h),U2[a+n>>2]=_,r=P2(-B),U2[n+(w<<2)>>2]=r,f=P2(-d),U2[n+(E<<2)>>2]=f,U2[n+k>>2]=-Z,U2[n+(m<<2)>>2]=-s,U2[n+(Y<<2)>>2]=-g,w=X2[e+28>>2],u=P2(l*u),Q=P2(M-e2),C=P2(S-r2),F=P2(q-A2),U2[w>>2]=u*P2(P2(P2(Q*i)+P2(C*c))+P2(F*b)),U2[a+w>>2]=u*P2(P2(P2(Q*h)+P2(C*d))+P2(F*B)),U2[k+w>>2]=u*P2(P2(P2(Q*Z)+P2(C*g))+P2(F*s)),a=X2[e+20>>2]),k=X2[e+12>>2],n=H2(o,12),U2[k+n>>2]=i,U2[(E=n+4|0)+k>>2]=c,U2[(Y=n+8|0)+k>>2]=b,U2[(o<<=4)+k>>2]=h,U2[(m=8|o)+k>>2]=B,U2[(y=4|o)+k>>2]=d,U2[a+n>>2]=t,U2[a+Y>>2]=v,U2[a+E>>2]=G,U2[a+o>>2]=_,U2[a+m>>2]=r,U2[a+y>>2]=f,r=P2(l*U2[e>>2]),f=P2(P2(J*j)-P2(P*U)),u=P2(f*i),i=P2(P2(P*O)-P2(z*j)),u=P2(u+P2(i*c)),c=P2(P2(z*U)-P2(J*O)),U2[n+w>>2]=r*P2(u+P2(c*b)),U2[o+w>>2]=r*P2(P2(P2(f*h)+P2(i*d))+P2(c*B)),m=J2[A+716|0])Y=0!=J2[A+737|0],n=(c=P2(U2[A+708>>2]*U2[A+732>>2]))>P2(0)?1:2;else {if(!J2[A+737|0])break A;c=P2(0),Y=1,n=0;}if(E=H2(X2[e+24>>2],5),U2[(o=E<<2)+k>>2]=Z,U2[(y=o+4|0)+k>>2]=g,U2[(H=k)+(k=o+8|0)>>2]=s,U2[a+o>>2]=-Z,U2[a+k>>2]=-s,U2[a+y>>2]=-g,f=U2[A+688>>2],i=U2[A+692>>2],(r=b2(P2(f-i)))<P2(-3.1415927410125732)?r=P2(r+P2(6.2831854820251465)):r>P2(3.1415927410125732)&&(r=P2(r+P2(-6.2831854820251465))),(f=b2(P2(f+i)))<P2(-3.1415927410125732)?f=P2(f+P2(6.2831854820251465)):f>P2(3.1415927410125732)&&(f=P2(f+P2(-6.2831854820251465))),X2[(o=(E<<2)+w|0)>>2]=0,l=2&(a=X2[A+748>>2])?U2[A+764>>2]:l,w=((k=r!=f)|!m)&Y){4&a&&(U2[X2[e+32>>2]+(E<<2)>>2]=U2[A+752>>2]),_=U2[A+680>>2];e:if(f<=r)i=P2(f<r?1:0);else {if(b=U2[A+728>>2],(t=P2(_/P2(l*U2[e>>2])))<P2(0)){if(r<=b&&b<P2(r-t)){i=P2(P2(r-b)/t);break e;}if(i=P2(0),b<r)break e;}else {if(i=P2(0),!(t>P2(0)))break e;if(b<=f&&b>P2(f-t)){i=P2(P2(f-b)/t);break e;}if(f<b)break e;}i=P2(1);}U2[o>>2]=P2(P2(i*_)*U2[A+732>>2])+U2[o>>2],U2[(w=E<<2)+X2[e+36>>2]>>2]=-U2[A+684>>2],U2[w+X2[e+40>>2]>>2]=U2[A+684>>2];}if(m)return U2[o>>2]=U2[o>>2]+P2(c*P2(l*U2[e>>2])),1&a&&(U2[X2[e+32>>2]+(E<<2)>>2]=U2[A+760>>2]),r=k?(a=X2[e+36>>2]+(E<<2)|0,1==(0|n)?(X2[a>>2]=0,P2(34028234663852886e22)):(X2[a>>2]=-8388609,P2(0))):(X2[X2[e+36>>2]+(E<<2)>>2]=-8388609,P2(34028234663852886e22)),U2[X2[e+40>>2]+(E<<2)>>2]=r,(f=U2[A+704>>2])>P2(0)&&(r=P2(P2(P2(P2(U2[I+388>>2]*Z)+P2(U2[I+392>>2]*g))+P2(U2[I+396>>2]*s))-P2(P2(P2(Z*U2[W+388>>2])+P2(g*U2[W+392>>2]))+P2(s*U2[W+396>>2]))),1==(0|n)?r<P2(0)&&(r=P2(r*P2(-f)))>U2[o>>2]&&(U2[o>>2]=r):r>P2(0)&&(r=P2(r*P2(-f)))<U2[o>>2]&&(U2[o>>2]=r)),void(U2[o>>2]=U2[A+700>>2]*U2[o>>2]);}else {if(r=U2[A+624>>2],Q=U2[W+36>>2],f=U2[A+640>>2],C=U2[W+40>>2],P=P2(P2(r*Q)+P2(f*C)),i=U2[A+656>>2],F=U2[W+44>>2],j=P2(i*F),N=U2[W+20>>2],R=U2[W+24>>2],z=P2(P2(r*N)+P2(f*R)),D=U2[W+28>>2],O=P2(i*D),X=U2[W+12>>2],K=P2(X*i),J=U2[W+4>>2],U=U2[W+8>>2],L=P2(P2(J*r)+P2(U*f)),t=U2[A+560>>2],r=U2[I+36>>2],d=U2[A+576>>2],f=U2[I+40>>2],q=P2(P2(t*r)+P2(d*f)),b=U2[A+592>>2],i=U2[I+44>>2],M=P2(b*i),h=U2[A+556>>2],B=U2[A+572>>2],S=P2(P2(h*r)+P2(B*f)),l=U2[A+588>>2],$=P2(l*i),u=U2[A+584>>2],A2=P2(u*i),v=U2[A+552>>2],G=U2[A+568>>2],e2=P2(P2(v*r)+P2(G*f)),c=U2[I+20>>2],s=U2[I+24>>2],r2=P2(P2(t*c)+P2(d*s)),Z=U2[I+28>>2],V=P2(b*Z),g=U2[I+12>>2],f2=P2(g*b),b=U2[I+4>>2],_=U2[I+8>>2],i2=P2(P2(b*t)+P2(_*d)),t=U2[A+664>>2],d=U2[A+668>>2],p=P2(P2(Q*t)+P2(C*d)),Q=U2[A+672>>2],C=P2(P2(p+P2(F*Q))+U2[W+60>>2]),N=P2(P2(P2(P2(N*t)+P2(R*d))+P2(D*Q))+U2[W+56>>2]),d=P2(U2[W+52>>2]+P2(P2(P2(J*t)+P2(U*d))+P2(X*Q))),Q=U2[A+600>>2],p=f,f=U2[A+604>>2],T=i,i=U2[A+608>>2],t=U2[I+60>>2],R=P2(P2(P2(P2(r*Q)+P2(p*f))+P2(T*i))+t),r=U2[I+56>>2],D=P2(P2(P2(P2(c*Q)+P2(s*f))+P2(Z*i))+r),F=U2[I+52>>2],f=P2(F+P2(P2(P2(b*Q)+P2(_*f))+P2(g*i))),k=o<<1,(Y=J2[A+736|0])||(n=X2[e+8>>2],X2[n>>2]=1065353216,X2[(a=4+(o<<2)|0)+n>>2]=1065353216,X2[(k=8+(o<<3)|0)+n>>2]=1065353216,n=X2[e+16>>2],X2[n>>2]=-1082130432,X2[a+n>>2]=-1082130432,X2[n+k>>2]=-1082130432,t=U2[I+60>>2],r=U2[I+56>>2],F=U2[I+52>>2],k=o<<1),a=X2[e+12>>2],X2[a+12>>2]=0,i=P2(R-t),U2[a+4>>2]=i,X2[a>>2]=0,r=P2(D-r),U2[a+8>>2]=-r,U2[(n=(E=o<<2)+a|0)>>2]=-i,i=P2(f-F),U2[n+8>>2]=i,X2[n+12>>2]=0,X2[n+4>>2]=0,U2[(n=(w=k<<2)+a|0)>>2]=r,U2[n+4>>2]=-i,X2[n+8>>2]=0,X2[n+12>>2]=0,r=U2[W+52>>2],i=U2[W+60>>2],t=U2[W+56>>2],k=X2[e+20>>2],X2[k+12>>2]=0,X2[k>>2]=0,t=P2(N-t),U2[k+8>>2]=t,i=P2(C-i),U2[k+4>>2]=-i,U2[(n=k+E|0)>>2]=i,r=P2(d-r),U2[n+8>>2]=-r,X2[n+12>>2]=0,X2[n+4>>2]=0,U2[(n=k+w|0)>>2]=-t,U2[n+4>>2]=r,X2[n+8>>2]=0,X2[n+12>>2]=0,m=X2[A+748>>2],t=U2[(8&m?A+756|0:e+4|0)>>2],r=P2(t*U2[e>>2]),w=X2[e+28>>2],Y||(U2[w>>2]=r*P2(d-f),U2[E+w>>2]=r*P2(N-D),U2[w+(o<<3)>>2]=r*P2(C-R)),n=H2(o,12),f=P2(P2(P2(v*b)+P2(G*_))+P2(u*g)),U2[n+a>>2]=f,Y=n+4|0,i=P2(P2(P2(v*c)+P2(G*s))+P2(u*Z)),U2[Y+a>>2]=i,y=n+8|0,d=P2(e2+A2),U2[y+a>>2]=d,x=4|(E=o<<4),c=P2(P2(P2(h*c)+P2(B*s))+P2(l*Z)),U2[x+a>>2]=c,s=P2(P2(P2(b*h)+P2(_*B))+P2(g*l)),U2[a+E>>2]=s,H=8|E,_=P2(S+$),U2[H+a>>2]=_,U2[k+Y>>2]=-i,U2[n+k>>2]=-f,U2[k+y>>2]=-d,U2[k+x>>2]=-c,U2[k+E>>2]=-s,U2[k+H>>2]=-_,l=d,Z=P2(i2+f2),d=P2(z+O),g=P2(r2+V),h=P2(L+K),B=P2(P2(Z*d)-P2(g*h)),u=f,f=P2(P+j),b=P2(q+M),d=P2(P2(g*f)-P2(b*d)),f=P2(P2(b*h)-P2(Z*f)),U2[n+w>>2]=P2(P2(l*B)+P2(P2(u*d)+P2(i*f)))*r,U2[E+w>>2]=P2(P2(_*B)+P2(P2(s*d)+P2(c*f)))*r,y=J2[A+716|0])Y=(c=P2(U2[A+708>>2]*U2[A+732>>2]))>P2(0)?1:2,n=0!=J2[A+737|0];else {if(!J2[A+737|0])break A;c=P2(Y=0),n=1;}if(E=H2(o,5),U2[(o=E<<2)+a>>2]=Z,U2[(x=o+4|0)+a>>2]=g,U2[(H=a)+(a=o+8|0)>>2]=b,U2[k+x>>2]=-g,U2[o+k>>2]=-Z,U2[a+k>>2]=-b,f=U2[A+688>>2],i=U2[A+692>>2],(r=b2(P2(f-i)))<P2(-3.1415927410125732)?r=P2(r+P2(6.2831854820251465)):r>P2(3.1415927410125732)&&(r=P2(r+P2(-6.2831854820251465))),(f=b2(P2(f+i)))<P2(-3.1415927410125732)?f=P2(f+P2(6.2831854820251465)):f>P2(3.1415927410125732)&&(f=P2(f+P2(-6.2831854820251465))),X2[(o=w+(E<<2)|0)>>2]=0,k=n,t=2&m?U2[A+764>>2]:t,a=k&((n=r!=f)|!y)){4&m&&(U2[X2[e+32>>2]+(E<<2)>>2]=U2[A+752>>2]),d=U2[A+680>>2];e:if(f<=r)i=P2(f<r?1:0);else {if(s=U2[A+728>>2],(_=P2(d/P2(t*U2[e>>2])))<P2(0)){if(r<=s&&s<P2(r-_)){i=P2(P2(r-s)/_);break e;}if(i=P2(0),s<r)break e;}else {if(i=P2(0),!(_>P2(0)))break e;if(s<=f&&s>P2(f-_)){i=P2(P2(f-s)/_);break e;}if(f<s)break e;}i=P2(1);}U2[o>>2]=P2(P2(i*d)*U2[A+732>>2])+U2[o>>2],U2[(a=E<<2)+X2[e+36>>2]>>2]=-U2[A+684>>2],U2[a+X2[e+40>>2]>>2]=U2[A+684>>2];}y&&(U2[o>>2]=U2[o>>2]+P2(c*P2(t*U2[e>>2])),1&m&&(U2[X2[e+32>>2]+(E<<2)>>2]=U2[A+760>>2]),r=n?(n=X2[e+36>>2]+(E<<2)|0,1==(0|Y)?(X2[n>>2]=0,P2(34028234663852886e22)):(X2[n>>2]=-8388609,P2(0))):(X2[X2[e+36>>2]+(E<<2)>>2]=-8388609,P2(34028234663852886e22)),U2[X2[e+40>>2]+(E<<2)>>2]=r,(f=U2[A+704>>2])>P2(0)&&(r=P2(P2(P2(P2(Z*U2[I+388>>2])+P2(g*U2[I+392>>2]))+P2(b*U2[I+396>>2]))-P2(P2(P2(Z*U2[W+388>>2])+P2(g*U2[W+392>>2]))+P2(b*U2[W+396>>2]))),1==(0|Y)?r<P2(0)&&(r=P2(r*P2(-f)))>U2[o>>2]&&(U2[o>>2]=r):r>P2(0)&&(r=P2(r*P2(-f)))<U2[o>>2]&&(U2[o>>2]=r)),U2[o>>2]=U2[A+700>>2]*U2[o>>2]);}},function(A,e,r,f){A|=0,e|=0,r=P2(r);A:{e:switch((f|=0)+1|0){case 0:case 6:break e;default:break A;}e:switch(e-1|0){case 1:return U2[A+764>>2]=r,void(X2[A+748>>2]=2|X2[A+748>>2]);case 3:return U2[A+760>>2]=r,void(X2[A+748>>2]=1|X2[A+748>>2]);case 2:return U2[A+752>>2]=r,void(X2[A+748>>2]=4|X2[A+748>>2]);case 0:break e;default:break A;}U2[A+756>>2]=r,X2[A+748>>2]=8|X2[A+748>>2];}},function(A,e,r){A|=0,e|=0,r|=0;var f=P2(0);A:{e:switch(r+1|0){case 0:case 6:break e;default:break A;}e:switch(e-1|0){case 1:return P2(U2[A+764>>2]);case 3:return P2(U2[A+760>>2]);case 2:return P2(U2[A+752>>2]);case 0:break e;default:break A;}f=U2[A+756>>2];}return P2(f);},function(A){return 220;},function(A,e,r){A|=0,e|=0,r|=0;var f,i,a=P2(0);return P2(0),P2(0),J4(A,e,r),U2[e+52>>2]=U2[A+552>>2],U2[e+56>>2]=U2[A+556>>2],U2[e+60>>2]=U2[A+560>>2],U2[e+64>>2]=U2[A+564>>2],U2[e+68>>2]=U2[A+568>>2],U2[e+72>>2]=U2[A+572>>2],U2[e+76>>2]=U2[A+576>>2],U2[e+80>>2]=U2[A+580>>2],U2[e+84>>2]=U2[A+584>>2],U2[e+88>>2]=U2[A+588>>2],U2[e+92>>2]=U2[A+592>>2],U2[e+96>>2]=U2[A+596>>2],U2[e+100>>2]=U2[A+600>>2],U2[e+104>>2]=U2[A+604>>2],U2[e+108>>2]=U2[A+608>>2],U2[e+112>>2]=U2[A+612>>2],U2[e+116>>2]=U2[A+616>>2],U2[e+120>>2]=U2[A+620>>2],U2[e+124>>2]=U2[A+624>>2],U2[e+128>>2]=U2[A+628>>2],U2[e+132>>2]=U2[A+632>>2],U2[e+136>>2]=U2[A+636>>2],U2[e+140>>2]=U2[A+640>>2],U2[e+144>>2]=U2[A+644>>2],U2[e+148>>2]=U2[A+648>>2],U2[e+152>>2]=U2[A+652>>2],U2[e+156>>2]=U2[A+656>>2],U2[e+160>>2]=U2[A+660>>2],U2[e+164>>2]=U2[A+664>>2],U2[e+168>>2]=U2[A+668>>2],U2[e+172>>2]=U2[A+672>>2],U2[e+176>>2]=U2[A+676>>2],X2[e+184>>2]=J2[A+736|0],r=X2[A+684>>2],X2[e+192>>2]=X2[A+680>>2],X2[e+196>>2]=r,X2[e+188>>2]=J2[A+737|0],X2[e+180>>2]=J2[A+740|0],f=U2[A+688>>2],i=U2[A+692>>2],(a=b2(P2(f-i)))<P2(-3.1415927410125732)?a=P2(a+P2(6.2831854820251465)):a>P2(3.1415927410125732)&&(a=P2(a+P2(-6.2831854820251465))),U2[e+200>>2]=a,(a=b2(P2(f+i)))<P2(-3.1415927410125732)?a=P2(a+P2(6.2831854820251465)):a>P2(3.1415927410125732)&&(a=P2(a+P2(-6.2831854820251465))),U2[e+204>>2]=a,U2[e+208>>2]=U2[A+696>>2],r=X2[(A=A+700|0)+4>>2],X2[e+212>>2]=X2[A>>2],X2[e+216>>2]=r,23492;},function(A){return X2[(A|=0)+748>>2];},L4,function(A){A|=0,P2(0),P2(0),P2(0),P2(0),P2(0);var e,r,f,i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h,F=0,Y=0;for(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),K2=h=K2-144|0,X2[A+36>>2]=0,X2[(e=136+h|0)>>2]=0,X2[4+e>>2]=0,X2[128+h>>2]=0,F=A+48|(X2[132+h>>2]=0);;)if(X2[(o=(128+h|0)+Y|0)>>2]=1065353216,X2[92+h>>2]=0,X2[108+h>>2]=0,e=X2[A+28>>2],n=U2[e+4>>2],U2[80+h>>2]=n,b=U2[e+20>>2],U2[84+h>>2]=b,r=U2[e+36>>2],U2[88+h>>2]=r,c=U2[e+8>>2],U2[96+h>>2]=c,k=U2[e+24>>2],U2[100+h>>2]=k,f=U2[e+40>>2],U2[104+h>>2]=f,u=U2[e+12>>2],U2[112+h>>2]=u,s=U2[e+28>>2],U2[116+h>>2]=s,X2[124+h>>2]=0,a=U2[e+44>>2],U2[120+h>>2]=a,X2[44+h>>2]=0,X2[60+h>>2]=0,i=X2[A+32>>2],l=U2[i+4>>2],U2[32+h>>2]=l,B=U2[i+20>>2],U2[36+h>>2]=B,v=U2[i+36>>2],U2[40+h>>2]=v,d=U2[i+8>>2],U2[48+h>>2]=d,Z=U2[i+24>>2],U2[52+h>>2]=Z,_=U2[i+40>>2],U2[56+h>>2]=_,g=U2[i+12>>2],U2[64+h>>2]=g,E=U2[i+28>>2],U2[68+h>>2]=E,X2[76+h>>2]=0,Q=U2[i+44>>2],U2[72+h>>2]=Q,X2[28+h>>2]=0,t=r,r=U2[A+300>>2],G=f,f=U2[A+304>>2],C=a,a=U2[A+308>>2],w=U2[e+60>>2],U2[24+h>>2]=P2(P2(P2(P2(t*r)+P2(G*f))+P2(C*a))+w)-w,t=P2(P2(P2(r*b)+P2(f*k))+P2(a*s)),b=U2[e+56>>2],U2[20+h>>2]=P2(t+b)-b,f=P2(P2(P2(r*n)+P2(f*c))+P2(a*u)),r=U2[e+52>>2],U2[16+h>>2]=P2(f+r)-r,X2[12+h>>2]=0,r=U2[A+316>>2],f=U2[A+320>>2],a=U2[A+324>>2],n=U2[i+60>>2],U2[8+h>>2]=P2(P2(P2(P2(v*r)+P2(_*f))+P2(Q*a))+n)-n,n=U2[i+56>>2],U2[4+h>>2]=P2(P2(P2(P2(r*B)+P2(f*Z))+P2(a*E))+n)-n,f=P2(P2(P2(r*l)+P2(f*d))+P2(a*g)),r=U2[i+52>>2],U2[h>>2]=P2(f+r)-r,U4(F,80+h|0,32+h|0,16+h|0,h,128+h|0,e+456|0,U2[e+404>>2],i+456|0,U2[i+404>>2]),F=F+84|(X2[o>>2]=0),12==(0|(Y=Y+4|0)))break;K2=144+h|0;},function(A,e){A=J2[(A|=0)+344|0]?0:3,X2[(e|=0)+4>>2]=A,X2[e>>2]=A;},function(A,e){A|=0,e|=0;var r,f,i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E=0,Q=0,w=(P2(0),P2(0)),E=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),X2[e+8>>2]);X2[E>>2]=1065353216,u=X2[e+24>>2],X2[(a=4+(n=u<<2)|0)+E>>2]=1065353216,X2[E+(Z=8+(s=u<<3)|0)>>2]=1065353216,Q=X2[A+28>>2],o=U2[Q+8>>2],b=U2[Q+12>>2],c=U2[Q+20>>2],t=U2[Q+24>>2],l=U2[Q+28>>2],k=U2[Q+36>>2],w=U2[A+304>>2],B=U2[Q+40>>2],f=U2[A+308>>2],v=U2[Q+44>>2],d=U2[Q+4>>2],i=U2[A+300>>2],E=X2[e+12>>2],X2[E>>2]=0,X2[E+12>>2]=0,k=P2(P2(P2(i*k)+P2(w*B))+P2(f*v)),U2[E+4>>2]=k,c=P2(P2(P2(i*c)+P2(w*t))+P2(f*l)),U2[E+8>>2]=-c,U2[(r=E+n|0)>>2]=-k,o=P2(P2(P2(d*i)+P2(o*w))+P2(b*f)),U2[8+r>>2]=o,X2[12+r>>2]=0,X2[4+r>>2]=0,U2[(r=E+s|0)>>2]=c,U2[4+r>>2]=-o,E=X2[A+32>>2],X2[8+r>>2]=0,X2[12+r>>2]=0,r=X2[e+16>>2],X2[r>>2]=-1082130432,X2[r+a>>2]=-1082130432,X2[r+Z>>2]=-1082130432,l=U2[E+8>>2],B=U2[E+12>>2],t=U2[E+36>>2],v=U2[E+40>>2],d=U2[E+44>>2],b=U2[E+20>>2],w=U2[A+320>>2],Z=U2[E+24>>2],f=U2[A+324>>2],_=U2[E+28>>2],g=U2[E+4>>2],i=U2[A+316>>2],r=X2[e+20>>2],X2[r>>2]=0,X2[r+12>>2]=0,b=P2(P2(P2(i*b)+P2(w*Z))+P2(f*_)),U2[r+8>>2]=b,t=P2(P2(P2(i*t)+P2(w*v))+P2(f*d)),U2[r+4>>2]=-t,U2[(a=r+n|0)>>2]=t,w=P2(P2(P2(g*i)+P2(l*w))+P2(B*f)),U2[8+a>>2]=-w,X2[12+a>>2]=0,X2[4+a>>2]=0,U2[4+(r=r+s|0)>>2]=w,U2[r>>2]=-b,X2[8+r>>2]=0,X2[12+r>>2]=0,r=X2[e+28>>2],a=X2[A+332>>2],f=P2(U2[(1&a?A+336|0:e+4|0)>>2]*U2[e>>2]),U2[r>>2]=f*P2(P2(P2(w+U2[E+52>>2])-o)-U2[Q+52>>2]),U2[r+n>>2]=f*P2(P2(P2(b+U2[E+56>>2])-c)-U2[Q+56>>2]),U2[r+s>>2]=f*P2(P2(P2(t+U2[E+60>>2])-k)-U2[Q+60>>2]),E=u<<1,2&a&&(Q=X2[e+32>>2],U2[Q>>2]=U2[A+340>>2],U2[Q+n>>2]=U2[A+340>>2],U2[Q+(E<<2)>>2]=U2[A+340>>2]),(f=U2[A+356>>2])>P2(0)&&(Q=X2[e+36>>2],i=P2(-f),U2[Q>>2]=i,r=X2[e+40>>2],U2[r>>2]=f,(w=U2[A+356>>2])>P2(0)&&(U2[(n=u<<2)+Q>>2]=i,U2[r+n>>2]=f,w=U2[A+356>>2]),w>P2(0)&&(U2[(E<<=2)+Q>>2]=i,U2[E+r>>2]=f)),U2[e+48>>2]=U2[A+352>>2];},function(A,e,r,f){A|=0,e|=0,r=P2(r),f|=0;A:if(-1==(0|f)){e:switch(e-1|0){case 0:case 1:return U2[A+336>>2]=r,void(X2[A+332>>2]=1|X2[A+332>>2]);case 2:case 3:break e;default:break A;}U2[A+340>>2]=r,X2[A+332>>2]=2|X2[A+332>>2];}},function(A,e,r){A|=0,e|=0,r|=0;var f=P2(0),f=P2(34028234663852886e22);A:if(-1==(0|r)){e:switch(e-1|0){case 0:case 1:return P2(U2[A+336>>2]);case 2:case 3:break e;default:break A;}f=U2[A+340>>2];}return P2(f);},_1,function(A,e,r){return J4(A|=0,e|=0,r|=0),U2[e+52>>2]=U2[A+300>>2],U2[e+56>>2]=U2[A+304>>2],U2[e+60>>2]=U2[A+308>>2],U2[e+64>>2]=U2[A+312>>2],U2[e+68>>2]=U2[A+316>>2],U2[e+72>>2]=U2[A+320>>2],U2[e+76>>2]=U2[A+324>>2],U2[e+80>>2]=U2[A+328>>2],23608;},function(A){return X2[(A|=0)+332>>2];},L4,Z4,function(A,e){e|=0;var r=0,f=0;$4(A|=0,X2[A+28>>2]+4|0,X2[A+32>>2]+4|0),X2[e>>2]=0,X2[e+4>>2]=0;A:switch(X2[A+956>>(f=2)]){default:f=1;case 4:r=X2[e>>2]=f;break;case 0:break A;}J2[A+792|0]&&(X2[e>>2]=r=r+1|0),J2[A+798|0]&&(X2[e>>2]=r=r+1|0),f=e;A:{e:{r:switch(X2[A+960>>2]){case 4:r=r+2|0;break e;case 0:break A;default:break r;}r=r+1|0;}X2[f>>2]=r;}J2[A+793|0]&&(X2[e>>2]=r=r+1|0),J2[A+799|0]&&(X2[e>>2]=r=r+1|0),f=e;A:{e:{r:switch(X2[A+964>>2]){case 4:r=r+2|0;break e;case 0:break A;default:break r;}r=r+1|0;}X2[f>>2]=r;}J2[A+794|0]&&(X2[e>>2]=r=r+1|0),J2[A+800|0]&&(X2[e>>2]=r+1),A6(A,0);A:switch(X2[A+1052>>(r=2)]){default:r=1;case 4:X2[e>>2]=X2[e>>2]+r;break;case 0:break A;}J2[A+996|0]&&(X2[e>>2]=X2[e>>2]+1),J2[A+1016|0]&&(X2[e>>2]=X2[e>>2]+1),A6(A,1);A:switch(X2[A+1140>>(r=2)]){default:r=1;case 4:X2[e>>2]=X2[e>>2]+r;break;case 0:break A;}J2[A+1084|0]&&(X2[e>>2]=X2[e>>2]+1),J2[A+1104|0]&&(X2[e>>2]=X2[e>>2]+1),A6(A,r=2);A:switch(X2[A+1228>>2]){default:r=1;case 4:X2[e>>2]=X2[e>>2]+r;break;case 0:break A;}J2[A+1172|0]&&(X2[e>>2]=X2[e>>2]+1),J2[A+1192|0]&&(X2[e>>2]=X2[e>>2]+1);},function(A,e){var r,f,i,a,n,b,t,o,c=0,k=0,u=0,s=0,l=0,B=0,v=0,d=0,Z=0,_=0;for(K2=o=K2-112|0,s=X2[(A|=0)+32>>2],r=X2[A+28>>2],u=4<(u=X2[A+1232>>2]-1|0)>>>0?(c=1,2):(k=X2[(u<<=2)+23772>>2],c=X2[u+23752>>2],X2[u+23732>>2]),f=s+388|0,i=r+388|0,a=s+372|0,n=r+372|0,b=s+4|0,t=r+4|0,r=(e|=0)+4|0,B=H2(k,88)+A|0,s=X2[B+1052>>2]||J2[B+996|0]||J2[1016+(H2(k,88)+A|0)|0]?(_=X2[(v=(l=(k<<4)+A|0)+1388|0)+4>>2],X2[(s=32+o|0)>>2]=X2[v>>2],X2[s+4>>2]=_,l=X2[(s=l+1380|0)+4>>2],X2[24+o>>2]=X2[s>>2],X2[28+o>>2]=l,1&(s=X2[A+1456>>2]>>12+(k<<2))||(U2[984+(H2(k,88)+A|0)>>2]=U2[X2[e+32>>2]>>2]),2&s||(U2[980+(H2(k,88)+A|0)>>2]=U2[r>>2]),4&s||(U2[992+(H2(k,88)+A|0)>>2]=U2[X2[e+32>>2]>>2]),8&s||(U2[988+(H2(k,88)+A|0)>>2]=U2[r>>2]),e6(A,B+968|0,t,b,n,a,i,f,e,0,24+o|0,1,0)):0,B=H2(c,88)+A|0,(X2[B+1052>>2]||J2[B+996|0]||J2[1016+(H2(c,88)+A|0)|0])&&(_=X2[(v=(l=(c<<4)+A|0)+1388|0)+4>>2],X2[(k=32+o|0)>>2]=X2[v>>2],X2[k+4>>2]=_,l=X2[(k=l+1380|0)+4>>2],X2[24+o>>2]=X2[k>>2],X2[28+o>>2]=l,1&(k=X2[A+1456>>2]>>12+(c<<2))||(U2[984+(H2(c,88)+A|0)>>2]=U2[X2[e+32>>2]>>2]),2&k||(U2[980+(H2(c,88)+A|0)>>2]=U2[r>>2]),4&k||(U2[992+(H2(c,88)+A|0)>>2]=U2[X2[e+32>>2]>>2]),8&k||(U2[988+(H2(c,88)+A|0)>>2]=U2[r>>2]),s=e6(A,B+968|0,t,b,n,a,i,f,e,s,24+o|0,1,0)+s|0),k=H2(u,88)+A|0,(X2[k+1052>>2]||J2[k+996|0]||J2[1016+(H2(u,88)+A|0)|0])&&(v=X2[(l=(B=(u<<4)+A|0)+1388|0)+4>>2],X2[(c=32+o|0)>>2]=X2[l>>2],X2[c+4>>2]=v,B=X2[(c=B+1380|0)+4>>2],X2[24+o>>2]=X2[c>>2],X2[28+o>>2]=B,1&(c=X2[A+1456>>2]>>12+(u<<2))||(U2[984+(H2(u,88)+A|0)>>2]=U2[X2[e+32>>2]>>2]),2&c||(U2[980+(H2(u,88)+A|0)>>2]=U2[r>>2]),4&c||(U2[992+(H2(u,88)+A|0)>>2]=U2[X2[e+32>>2]>>2]),8&c||(U2[988+(H2(u,88)+A|0)>>2]=U2[r>>2]),s=e6(A,k+968|0,t,b,n,a,i,f,e,s,24+o|0,1,0)+s|0),X2[44+o>>2]=1063675494,X2[48+o>>2]=0,X2[36+o>>2]=1045220557,B=X2[40+o>>2]=0;;){if(k=J2[(u=A+B|0)+792|0],(l=X2[(c=A+Z|0)+956>>2])||(v=255&k,k=1,v||J2[u+798|(k=0)])){X2[108+o>>2]=l,S2[52+o|0]=k,U2[32+o>>2]=U2[c+712>>2],U2[104+o>>2]=U2[c+940>>2],U2[96+o>>2]=U2[c+908>>2],U2[100+o>>2]=U2[c+924>>2],S2[64+o|0]=J2[u+795|0],U2[68+o>>2]=U2[c+804>>2],S2[72+o|0]=J2[u+798|0],U2[76+o>>2]=U2[c+820>>2],S2[80+o|0]=J2[u+836|0],U2[84+o>>2]=U2[c+840>>2],S2[88+o|0]=J2[u+856|0],U2[92+o>>2]=U2[c+860>>2],U2[28+o>>2]=U2[c+696>>2],U2[24+o>>2]=U2[c+680>>2],U2[60+o>>2]=U2[c+892>>2],U2[56+o>>2]=U2[c+876>>2],X2[20+o>>2]=0,U2[8+o>>2]=U2[c+1236>>2],U2[12+o>>2]=U2[c+1252>>2],U2[16+o>>2]=U2[c+1268>>2],v=c+744|0,1&(k=X2[A+1456>>2]>>Z)||(v=X2[e+32>>2]),U2[(l=u=o)+40>>2]=U2[v>>2],U2[u+36>>2]=U2[(2&k?c+728|0:r)>>2],U2[48+o>>2]=U2[(4&k?c+776|0:X2[e+32>>2])>>2],U2[44+o>>2]=U2[(8&k?c+760|0:r)>>2],l=((B+2&255)>>>0)%3|0;A:{e:{r:{f:switch(u=H2(((B+(c=k=1)&255)>>>0)%3|0,88)+A|0,X2[u+1052>>2]-1|0){case 0:case 1:break A;case 3:break r;case 2:break f;default:break e;}c=(d=+U2[u+1040>>2])<-.001|.001<d;break A;}if(+U2[u+1040>>2]<-.001)break A;c=.001<+U2[u+1044>>2];break A;}c=0;}A:{e:{r:{f:switch(u=H2(l,88)+A|0,X2[u+1052>>2]-1|0){case 0:case 1:break e;case 3:break r;case 2:break f;default:break A;}if((d=+U2[u+1040>>2])<-.001)break e;if(.001<d)break e;break A;}if(!(+U2[u+1040>>2]<-.001)&&!(.001<+U2[u+1044>>2]))break A;}k=0;}s=e6(A,24+o|0,t,b,n,a,i,f,e,s,8+o|0,0,c?k:1)+s|0;}if(B=B+1|0,12==(0|(Z=Z+4|0)))break;}K2=112+o|0;},function(A,e,r,f){var i;A|=0,e|=0,r=P2(r);A:{if((f|=0)>>>0<=2){e:switch(e-1|0){case 1:return U2[728+((e=f<<2)+A|0)>>2]=r,void(X2[A+1456>>2]=X2[A+1456>>2]|2<<e);case 3:return U2[744+((e=f<<2)+A|0)>>2]=r,void(X2[A+1456>>2]=X2[A+1456>>2]|1<<e);case 0:return U2[760+((e=f<<2)+A|0)>>2]=r,void(X2[A+1456>>2]=X2[A+1456>>2]|8<<e);case 2:break e;default:break A;}return U2[776+((e=f<<2)+A|0)>>2]=r,void(X2[A+1456>>2]=X2[A+1456>>2]|4<<e);}if(!(2<(i=f-3|0)>>>0)){e:switch(e-1|0){case 1:return U2[980+(H2(i,88)+A|0)>>2]=r,void(X2[A+1456>>2]=X2[A+1456>>2]|2<<(f<<2));case 3:return U2[984+(H2(i,88)+A|0)>>2]=r,void(X2[A+1456>>2]=X2[A+1456>>2]|1<<(f<<2));case 0:return U2[988+(H2(i,88)+A|0)>>2]=r,void(X2[A+1456>>2]=X2[A+1456>>2]|8<<(f<<2));case 2:break e;default:break A;}U2[992+(H2(i,88)+A|0)>>2]=r,X2[A+1456>>2]=X2[A+1456>>2]|4<<(f<<2);}}},function(A,e,r){A|=0,e|=0,r|=0;var f=P2(0);A:{if(r>>>0<=2){e:switch(e-1|0){case 1:return P2(U2[728+((r<<2)+A|0)>>2]);case 3:return P2(U2[744+((r<<2)+A|0)>>2]);case 0:return P2(U2[760+((r<<2)+A|0)>>2]);case 2:break e;default:break A;}return P2(U2[776+((r<<2)+A|0)>>2]);}if(!(2<(r=r-3|0)>>>0)){e:switch(e-1|0){case 1:return P2(U2[980+(H2(r,88)+A|0)>>2]);case 3:return P2(U2[984+(H2(r,88)+A|0)>>2]);case 0:return P2(U2[988+(H2(r,88)+A|0)>>2]);case 2:break e;default:break A;}f=U2[992+(H2(r,88)+A|0)>>2];}}return P2(f);},function(A){return 644;},function(A,e,r){var f;return A|=0,e|=0,r|=0,P2(0),J4(A,e,r),U2[e+52>>2]=U2[A+48>>2],U2[e+56>>2]=U2[A+52>>2],U2[e+60>>2]=U2[A+56>>2],U2[e+64>>2]=U2[A+60>>2],U2[e+68>>2]=U2[A- -64>>2],U2[e+72>>2]=U2[A+68>>2],U2[e+76>>2]=U2[A+72>>2],U2[e+80>>2]=U2[A+76>>2],U2[e+84>>2]=U2[A+80>>2],U2[e+88>>2]=U2[A+84>>2],U2[e+92>>2]=U2[A+88>>2],U2[e+96>>2]=U2[A+92>>2],U2[e+100>>2]=U2[A+96>>2],U2[e+104>>2]=U2[A+100>>2],U2[e+108>>2]=U2[A+104>>2],U2[e+112>>2]=U2[A+108>>2],U2[e+116>>2]=U2[A+112>>2],U2[e+120>>2]=U2[A+116>>2],U2[e+124>>2]=U2[A+120>>2],U2[e+128>>2]=U2[A+124>>2],U2[e+132>>2]=U2[A+128>>2],U2[e+136>>2]=U2[A+132>>2],U2[e+140>>2]=U2[A+136>>2],U2[e+144>>2]=U2[A+140>>2],U2[e+148>>2]=U2[A+144>>2],U2[e+152>>2]=U2[A+148>>2],U2[e+156>>2]=U2[A+152>>2],U2[e+160>>2]=U2[A+156>>2],U2[e+164>>2]=U2[A+160>>2],U2[e+168>>2]=U2[A+164>>2],U2[e+172>>2]=U2[A+168>>2],U2[e+176>>2]=U2[A+172>>2],U2[e+428>>2]=U2[A+968>>2],U2[e+412>>2]=U2[A+972>>2],U2[e+444>>2]=U2[A+976>>2],U2[e+460>>2]=U2[A+980>>2],U2[e+476>>2]=U2[A+984>>2],U2[e+492>>2]=U2[A+988>>2],U2[e+508>>2]=U2[A+992>>2],U2[e+524>>2]=U2[A+1e3>>2],U2[e+540>>2]=U2[A+1004>>2],U2[e+556>>2]=U2[A+1012>>2],U2[e+572>>2]=U2[A+1020>>2],U2[e+588>>2]=U2[A+1028>>2],U2[e+604>>2]=U2[A+1036>>2],U2[e+432>>2]=U2[A+1056>>2],U2[e+416>>2]=U2[A+1060>>2],U2[e+448>>2]=U2[A+1064>>2],U2[e+464>>2]=U2[A+1068>>2],U2[e+480>>2]=U2[A+1072>>2],U2[e+496>>2]=U2[A+1076>>2],U2[e+512>>2]=U2[A+1080>>2],U2[e+528>>2]=U2[A+1088>>2],U2[e+544>>2]=U2[A+1092>>2],U2[e+560>>2]=U2[A+1100>>2],U2[e+576>>2]=U2[A+1108>>2],U2[e+592>>2]=U2[A+1116>>2],U2[e+608>>2]=U2[A+1124>>2],U2[e+436>>2]=U2[A+1144>>2],U2[e+420>>2]=U2[A+1148>>2],U2[e+452>>2]=U2[A+1152>>2],U2[e+468>>2]=U2[A+1156>>2],U2[e+484>>2]=U2[A+1160>>2],U2[e+500>>2]=U2[A+1164>>2],U2[e+516>>2]=U2[A+1168>>2],U2[e+532>>2]=U2[A+1176>>2],U2[e+548>>2]=U2[A+1180>>2],U2[e+564>>2]=U2[A+1188>>2],U2[e+580>>2]=U2[A+1196>>2],U2[e+596>>2]=U2[A+1204>>2],f=U2[A+1212>>2],X2[e+440>>2]=0,U2[e+612>>2]=f,X2[e+616>>2]=0,X2[e+600>>2]=0,X2[e+584>>2]=0,X2[e+568>>2]=0,X2[e+552>>2]=0,X2[e+536>>2]=0,X2[e+520>>2]=0,X2[e+504>>2]=0,X2[e+488>>2]=0,X2[e+472>>2]=0,X2[e+456>>2]=0,X2[e+424>>2]=0,S2[e+620|0]=J2[A+996|0],S2[e+624|0]=J2[A+1008|0],S2[e+628|0]=J2[A+1016|0],S2[e+632|0]=J2[A+1024|0],S2[e+636|0]=J2[A+1032|0],S2[e+621|0]=J2[A+1084|0],S2[e+625|0]=J2[A+1096|0],S2[e+629|0]=J2[A+1104|0],S2[e+633|0]=J2[A+1112|0],S2[e+637|0]=J2[A+1120|0],S2[e+622|0]=J2[A+1172|0],S2[e+626|0]=J2[A+1184|0],S2[e+630|0]=J2[A+1192|0],S2[e+634|0]=J2[A+1200|0],r=J2[A+1208|0],S2[e+639|0]=0,S2[e+635|0]=0,S2[e+631|0]=0,S2[e+627|0]=0,S2[e+623|0]=0,S2[e+638|0]=r,U2[e+196>>2]=U2[A+680>>2],U2[e+200>>2]=U2[A+684>>2],U2[e+204>>2]=U2[A+688>>2],U2[e+208>>2]=U2[A+692>>2],U2[e+180>>2]=U2[A+696>>2],U2[e+184>>2]=U2[A+700>>2],U2[e+188>>2]=U2[A+704>>2],U2[e+192>>2]=U2[A+708>>2],U2[e+212>>2]=U2[A+712>>2],U2[e+216>>2]=U2[A+716>>2],U2[e+220>>2]=U2[A+720>>2],U2[e+224>>2]=U2[A+724>>2],U2[e+228>>2]=U2[A+728>>2],U2[e+232>>2]=U2[A+732>>2],U2[e+236>>2]=U2[A+736>>2],U2[e+240>>2]=U2[A+740>>2],U2[e+244>>2]=U2[A+744>>2],U2[e+248>>2]=U2[A+748>>2],U2[e+252>>2]=U2[A+752>>2],U2[e+256>>2]=U2[A+756>>2],U2[e+260>>2]=U2[A+760>>2],U2[e+264>>2]=U2[A+764>>2],U2[e+268>>2]=U2[A+768>>2],U2[e+272>>2]=U2[A+772>>2],U2[e+276>>2]=U2[A+776>>2],U2[e+280>>2]=U2[A+780>>2],U2[e+284>>2]=U2[A+784>>2],U2[e+288>>2]=U2[A+788>>2],U2[e+292>>2]=U2[A+876>>2],U2[e+296>>2]=U2[A+880>>2],U2[e+300>>2]=U2[A+884>>2],U2[e+304>>2]=U2[A+888>>2],U2[e+308>>2]=U2[A+892>>2],U2[e+312>>2]=U2[A+896>>2],U2[e+316>>2]=U2[A+900>>2],U2[e+320>>2]=U2[A+904>>2],U2[e+324>>2]=U2[A+804>>2],U2[e+328>>2]=U2[A+808>>2],U2[e+332>>2]=U2[A+812>>2],U2[e+336>>2]=U2[A+816>>2],U2[e+340>>2]=U2[A+820>>2],U2[e+344>>2]=U2[A+824>>2],U2[e+348>>2]=U2[A+828>>2],U2[e+352>>2]=U2[A+832>>2],U2[e+356>>2]=U2[A+840>>2],U2[e+360>>2]=U2[A+844>>2],U2[e+364>>2]=U2[A+848>>2],U2[e+368>>2]=U2[A+852>>2],U2[e+372>>2]=U2[A+860>>2],U2[e+376>>2]=U2[A+864>>2],U2[e+380>>2]=U2[A+868>>2],U2[e+384>>2]=U2[A+872>>2],S2[e+388|0]=J2[A+792|0],S2[e+392|0]=J2[A+795|0],S2[e+396|0]=J2[A+798|0],S2[e+400|0]=J2[A+836|0],S2[e+404|0]=J2[A+856|0],S2[e+389|0]=J2[A+793|0],S2[e+393|0]=J2[A+796|0],S2[e+397|0]=J2[A+799|0],S2[e+401|0]=J2[A+837|0],S2[e+405|0]=J2[A+857|0],S2[e+390|0]=J2[A+794|0],S2[e+394|0]=J2[A+797|0],S2[e+398|0]=J2[A+800|0],S2[e+402|0]=J2[A+838|0],r=J2[A+858|0],S2[e+407|0]=0,S2[e+403|0]=0,S2[e+399|0]=0,S2[e+395|0]=0,S2[e+391|0]=0,S2[e+406|0]=r,A=X2[A+1232>>2],X2[e+408>>2]=0,X2[e+640>>2]=A,23892;},H4,L4,e,z0,function(A,e){A|=0,e|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var r,f=U2[A+52>>2],i=U2[A+56>>2],a=U2[A+60>>2],n=U2[A+124>>2],b=U2[A+120>>2],t=U2[A+116>>2],o=U2[A+8>>2],c=U2[A+12>>2],k=U2[A+28>>2],u=U2[A+20>>2],s=U2[A+24>>2],l=U2[A+72>>2],B=U2[A+76>>2],v=U2[A+92>>2],d=U2[A+84>>2],Z=U2[A+88>>2],_=U2[A+44>>2],g=U2[A+108>>2],E=U2[A+36>>2],Q=U2[A+100>>2],w=U2[A+40>>2],G=U2[A+104>>2],C=U2[A+4>>2],A=U2[A+68>>2];X2[e+60>>2]=0,X2[e+44>>2]=0,X2[e+28>>2]=0,X2[e+12>>2]=0,U2[e+40>>2]=P2(P2(Q*E)+P2(G*w))+P2(g*_),U2[e+36>>2]=P2(P2(d*E)+P2(Z*w))+P2(v*_),U2[e+32>>2]=P2(P2(A*E)+P2(l*w))+P2(B*_),U2[e+24>>2]=P2(P2(Q*u)+P2(G*s))+P2(g*k),U2[e+20>>2]=P2(P2(d*u)+P2(Z*s))+P2(v*k),U2[e+16>>2]=P2(P2(A*u)+P2(l*s))+P2(B*k),U2[e+8>>2]=P2(P2(Q*C)+P2(G*o))+P2(g*c),U2[e+4>>2]=P2(P2(d*C)+P2(Z*o))+P2(v*c),U2[e>>2]=P2(P2(A*C)+P2(l*o))+P2(B*c),r=E,E=d,d=P2(-b),E=P2(P2(P2(E*d)-P2(A*t))-P2(Q*n)),l=P2(P2(P2(Z*d)-P2(l*t))-P2(G*n)),B=P2(P2(P2(v*d)-P2(B*t))-P2(g*n)),U2[e+56>>2]=a+P2(P2(P2(r*E)+P2(w*l))+P2(_*B)),U2[e+52>>2]=i+P2(P2(P2(E*u)+P2(l*s))+P2(B*k)),U2[e+48>>2]=f+P2(P2(P2(C*E)+P2(l*o))+P2(B*c));},function(A,e){A|=0,e|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var r=U2[e+52>>2],f=U2[e+56>>2],i=U2[A+116>>2],a=U2[A+120>>2],n=U2[A+124>>2],b=U2[e+20>>2],t=U2[e+24>>2],o=U2[A+84>>2],c=U2[A+100>>2],k=U2[A+72>>2],u=U2[A+88>>2],s=U2[A+104>>2],l=U2[A+76>>2],B=U2[e+36>>2],v=U2[A+92>>2],d=U2[e+40>>2],Z=U2[A+108>>2],_=U2[e+48>>2],g=U2[e+8>>2],E=U2[e>>2],Q=U2[e+4>>2],w=U2[e+16>>2],G=U2[A+68>>2],e=U2[e+32>>2];X2[A- -64>>2]=0,X2[A+48>>2]=0,X2[A+32>>2]=0,X2[A+16>>2]=0,U2[A+44>>2]=P2(P2(l*e)+P2(v*B))+P2(Z*d),U2[A+40>>2]=P2(P2(k*e)+P2(u*B))+P2(s*d),U2[A+36>>2]=P2(P2(G*e)+P2(o*B))+P2(c*d),U2[A+28>>2]=P2(P2(l*w)+P2(v*b))+P2(Z*t),U2[A+24>>2]=P2(P2(k*w)+P2(u*b))+P2(s*t),U2[A+20>>2]=P2(P2(G*w)+P2(o*b))+P2(c*t),U2[A+12>>2]=P2(P2(E*l)+P2(Q*v))+P2(g*Z),U2[A+8>>2]=P2(P2(E*k)+P2(Q*u))+P2(g*s),U2[A+4>>2]=P2(P2(G*E)+P2(o*Q))+P2(c*g),U2[A+60>>2]=f+P2(P2(P2(e*i)+P2(B*a))+P2(d*n)),U2[A+56>>2]=r+P2(P2(P2(w*i)+P2(b*a))+P2(t*n)),U2[A+52>>2]=_+P2(P2(P2(E*i)+P2(Q*a))+P2(g*n));},A,function(A,e){var r,f,i=X2[(A|=0)+12>>2];X2[(e|=0)>>2]=X2[A+8>>2],X2[e+4>>2]=i,f=X2[4+(r=A+16|0)>>2],X2[(i=e+8|0)>>2]=X2[r>>2],X2[4+i>>2]=f,f=X2[4+(r=A+32|0)>>2],X2[(i=e+24|0)>>2]=X2[r>>2],X2[4+i>>2]=f,r=X2[4+(i=A+24|0)>>2],X2[e+16>>2]=X2[i>>2],X2[e+20>>2]=r,r=X2[4+(i=A+40|0)>>2],X2[e+32>>2]=X2[i>>2],X2[e+36>>2]=r,f=X2[4+(r=A+48|0)>>2],X2[(i=e+40|0)>>2]=X2[r>>2],X2[4+i>>2]=f,f=X2[4+(r=A- -64|0)>>2],X2[(i=e+56|0)>>2]=X2[r>>2],X2[4+i>>2]=f,i=X2[(A=A+56|0)+4>>2],X2[e+48>>2]=X2[A>>2],X2[e+52>>2]=i;},function(A,e){var r,f,i=X2[(e|=0)+4>>2];X2[(A|=0)+8>>2]=X2[e>>2],X2[A+12>>2]=i,f=X2[4+(r=e+8|0)>>2],X2[(i=A+16|0)>>2]=X2[r>>2],X2[4+i>>2]=f,f=X2[4+(r=e+24|0)>>2],X2[(i=A+32|0)>>2]=X2[r>>2],X2[4+i>>2]=f,r=X2[e+20>>2],X2[(i=A+24|0)>>2]=X2[e+16>>2],X2[4+i>>2]=r,r=X2[e+36>>2],X2[(i=A+40|0)>>2]=X2[e+32>>2],X2[4+i>>2]=r,f=X2[4+(r=e+40|0)>>2],X2[(i=A+48|0)>>2]=X2[r>>2],X2[4+i>>2]=f,f=X2[4+(r=e+56|0)>>2],X2[(i=A- -64|0)>>2]=X2[r>>2],X2[4+i>>2]=f,r=X2[e+52>>2],X2[(i=A+56|0)>>2]=X2[e+48>>2],X2[4+i>>2]=r,v(X2[A+4>>2]);}],{RayCallback_hasHit:function(A){return 0!=X2[(A|=0)+8>>2]|0;},ccClosestRayCallback_static:function(){return J2[25040]||(X2[6262]=1065353216,X2[6263]=0,S2[25132]=1,X2[6261]=9752,X2[6264]=-1,X2[6265]=0,X2[6282]=0,h(68),S2[25040]=1),25044;},ccClosestRayCallback_setFlags:s0,ccClosestRayCallback_reset:function(A,e,r,f,i){r|=0,f|=0,i|=0;var a,n=X2[(e|=0)+4>>2];X2[(A|=0)+20>>2]=X2[e>>2],X2[A+24>>2]=n,a=X2[(e=e+8|0)+4>>2],X2[(n=A+28|0)>>2]=X2[e>>2],X2[4+n>>2]=a,e=X2[r+4>>2],X2[A+36>>2]=X2[r>>2],X2[A+40>>2]=e,n=X2[(r=r+8|0)+4>>2],X2[(e=A+44|0)>>2]=X2[r>>2],X2[e+4>>2]=n,S2[A+88|0]=i,X2[A+12>>2]=f,X2[A+4>>2]=1065353216,X2[A+8>>2]=0;},ccClosestRayCallback_getHitNormalWorld:function(A){return (A|=0)+52|0;},ccClosestRayCallback_getHitPointWorld:function(A){return (A|=0)+68|0;},ccClosestRayCallback_getCollisionShapePtr:function(A){return X2[(A|=0)+84>>2];},ccAllRayCallback_static:function(){return J2[25136]||(S2[25176]=1,X2[6286]=1065353216,X2[6287]=0,S2[25228]=1,X2[6291]=0,X2[6292]=0,S2[25248]=1,X2[6304]=0,X2[6305]=0,S2[25268]=1,X2[6309]=0,X2[6310]=0,X2[6314]=0,X2[6315]=0,S2[25288]=1,X2[6285]=9956,X2[6289]=0,X2[6293]=0,X2[6306]=0,X2[6311]=0,X2[6316]=0,X2[6321]=0,S2[25292]=1,X2[6319]=0,X2[6320]=0,X2[6288]=-1,h(69),S2[25136]=1),25140;},ccAllRayCallback_setFlags:s0,ccAllRayCallback_reset:function(A,e,r,f,i){r|=0,f|=0,i|=0;var a,n,b=0;if(K2=n=K2-16|0,b=X2[(e|=0)+4>>2],X2[(A|=0)+40>>2]=X2[e>>2],X2[A+44>>2]=b,a=X2[(e=e+8|0)+4>>2],X2[(b=A+48|0)>>2]=X2[e>>2],X2[b+4>>2]=a,e=X2[r+4>>2],X2[A+56>>2]=X2[r>>2],X2[A+60>>2]=e,b=X2[(r=r+8|0)+4>>2],X2[(e=A- -64|0)>>2]=X2[r>>2],X2[e+4>>2]=b,S2[A+152|0]=i,X2[A+12>>2]=f,X2[A+4>>2]=1065353216,((X2[A+8>>2]=0)|(r=X2[A+136>>2]))<=-1&&(e=X2[A+144>>2],X2[A+140>>2]<=-1&&(e&&J2[A+148|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),S2[A+148|0]=1,X2[A+140>>2]=0,e=X2[A+144>>2]=0),v2((f=e)+(e=r<<2)|0,0,0-e|0)),((X2[A+136>>2]=0)|(r=X2[A+116>>2]))<=-1&&(e=X2[A+124>>2],X2[A+120>>2]<=-1&&(e&&J2[A+128|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),S2[A+128|0]=1,X2[A+120>>2]=0,e=X2[A+124>>2]=0),v2((f=e)+(e=r<<2)|0,0,0-e|0)),((X2[A+116>>2]=0)|(r=X2[A+24>>2]))<=-1)for(X2[A+28>>2]<=-1&&((e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+28>>2]=0,X2[A+32>>2]=0,S2[A+36|0]=1),e=r<<2;;)if(e=e+4|(X2[X2[A+32>>2]+e>>2]=0),!((f=r)>>>0<=(r=r+1|0)>>>0))break;if(((X2[A+24>>2]=0)|(r=X2[A+96>>2]))<=-1)for(X2[A+100>>2]<=-1&&((e=X2[A+104>>2])&&J2[A+108|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+100>>2]=0,X2[A+104>>2]=0,S2[A+108|0]=1),e=r<<4;;)if(b=X2[4+n>>2],f=X2[A+104>>2]+e|0,X2[f>>2]=X2[n>>2],X2[f+4>>2]=b,b=X2[(i=8+n|0)+4>>2],X2[(f=f+8|0)>>2]=X2[i>>2],X2[f+4>>2]=b,e=e+16|0,!((f=r)>>>0<=(r=r+1|0)>>>0))break;if(((X2[A+96>>2]=0)|(r=X2[A+76>>2]))<=-1)for(X2[A+80>>2]<=-1&&((e=X2[A+84>>2])&&J2[A+88|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+80>>2]=0,X2[A+84>>2]=0,S2[A+88|0]=1),e=r<<4;;)if(b=X2[4+n>>2],f=X2[A+84>>2]+e|0,X2[f>>2]=X2[n>>2],X2[f+4>>2]=b,b=X2[(i=8+n|0)+4>>2],X2[(f=f+8|0)>>2]=X2[i>>2],X2[f+4>>2]=b,e=e+16|0,!((f=r)>>>0<=(r=r+1|0)>>>0))break;X2[A+76>>2]=0,K2=16+n|0;},ccAllRayCallback_getHitPointWorld:v0,ccAllRayCallback_getHitNormalWorld:function(A){return (A|=0)+72|0;},ccAllRayCallback_getCollisionShapePtrs:function(A){return (A|=0)+132|0;},ManifoldPoint_get_m_positionWorldOnA:d0,ManifoldPoint_get_m_positionWorldOnB:function(A){return (A|=0)+32|0;},ManifoldPoint_get_m_normalWorldOnB:function(A){return (A|=0)- -64|0;},ManifoldPoint_get_m_localPointA:e,ManifoldPoint_get_m_localPointB:function(A){return (A|=0)+16|0;},ManifoldPoint_getDistance:function(A){return A|=0,P2(0),A=U2[A+80>>2],P2(j2(A))<P2(2147483648)?0|~~A:-2147483648;},ManifoldPoint_getShape0:function(A){return X2[(A|=0)+200>>2];},ManifoldPoint_getShape1:Z0,ManifoldPoint_get_m_index0:function(A){return X2[(A|=0)+108>>2];},ManifoldPoint_get_m_index1:function(A){return X2[(A|=0)+112>>2];},PersistentManifold_getBody0:function(A){return X2[(A|=0)+836>>2];},PersistentManifold_getBody1:function(A){return X2[(A|=0)+840>>2];},PersistentManifold_getNumContacts:function(A){return X2[(A|=0)+844>>2];},PersistentManifold_getContactPoint:function(A,e){return A|=0,4+(H2(e|=0,208)+A|0)|0;},__cxa_pure_virtual:f2,_ZdlPv:n,_ZTVN10__cxxabiv120__si_class_type_infoE:6e3,_ZTVN10__cxxabiv117__class_type_infoE:5960,CollisionObject_new:function(){var A,e=0;return X2[6258]=X2[6258]+1,(A=L2(343))&&(X2[(e=A+19&-16)-4>>2]=A),X2[e+132>>2]=0,X2[e+136>>2]=0,X2[e>>2]=10112,X2[e+188>>2]=0,X2[e+192>>2]=0,X2[e+180>>2]=0,X2[e+184>>2]=1566444395,X2[e+172>>2]=1065353216,X2[e+176>>2]=0,X2[e+164>>2]=1065353216,X2[e+168>>2]=1065353216,S2[e+300|0]=1,X2[e+276>>2]=0,X2[e+280>>2]=0,X2[e+268>>2]=1065353216,X2[e+272>>2]=0,X2[e+260>>2]=-1,X2[e+264>>2]=-1,X2[e+252>>2]=1,X2[e+256>>2]=0,X2[e+244>>2]=1036831949,X2[e+248>>2]=1176256512,X2[e+236>>2]=0,X2[e+240>>2]=0,X2[e+228>>2]=1056964608,X2[e+232>>2]=0,X2[e+220>>2]=1,X2[e+224>>2]=0,X2[e+212>>2]=-1,X2[e+216>>2]=-1,X2[e+204>>2]=1,X2[e+208>>2]=-1,X2[(A=e+140|0)>>2]=0,X2[4+A>>2]=0,X2[(A=e+148|0)>>2]=0,X2[4+A>>2]=0,X2[(A=e+156|0)>>2]=0,X2[4+A>>2]=0,X2[(A=e+196|0)>>2]=0,X2[4+A>>2]=0,X2[e+304>>2]=0,X2[e+296>>2]=0,X2[e+288>>2]=0,X2[e+292>>2]=0,X2[e+4>>2]=1065353216,X2[e+8>>2]=0,X2[e+12>>2]=0,X2[(A=e+16|0)>>2]=0,X2[4+A>>2]=0,X2[e+24>>2]=1065353216,X2[e+28>>2]=0,X2[e+32>>2]=0,X2[(A=e+36|0)>>2]=0,X2[4+A>>2]=0,X2[e+44>>2]=1065353216,X2[e+48>>2]=0,X2[e+52>>2]=0,X2[(A=e+56|0)>>2]=0,X2[4+A>>2]=0,X2[(A=e- -64|0)>>2]=0,X2[4+A>>2]=1065353216,X2[e+72>>2]=0,X2[e+76>>2]=0,X2[(A=e+80|0)>>2]=0,X2[4+A>>2]=0,X2[e+88>>2]=1065353216,X2[e+92>>2]=0,X2[e+96>>2]=0,X2[(A=e+100|0)>>2]=0,X2[4+A>>2]=0,X2[e+112>>2]=0,X2[e+116>>2]=0,X2[e+108>>2]=1065353216,X2[(A=e+120|0)>>2]=0,X2[4+A>>2]=0,(X2[e+128>>2]=0)|e;},CollisionObject_isStaticObject:function(A){return 1&X2[(A|=0)+204>>2];},CollisionObject_isKinematicObject:function(A){return (2&J2[(A|=0)+204|0])>>>1|0;},CollisionObject_isStaticOrKinematicObject:function(A){return 0!=(3&J2[(A|=0)+204|0])|0;},CollisionObject_setContactProcessingThreshold:function(A,e){U2[(A|=0)+184>>2]=0|(e|=0);},CollisionObject_forceActivationState:function(A,e){X2[(A|=0)+220>>2]=e|=0;},CollisionObject_activate:function(A,e){e|=0,3&J2[(A|=0)+204|0]&&!e||(4!=(-2&X2[A+220>>2])&&(X2[A+220>>2]=1),X2[A+224>>2]=0);},CollisionObject_isActive:function(A){return 2!=(0|(A=X2[(A|=0)+220>>2]))&5!=(0|A);},CollisionObject_setMaterial:function(A,e,r,f,i){A|=0,e=P2(e),r=P2(r),f=P2(f),i=P2(i),U2[A+232>>2]=e,U2[A+236>>2]=f,U2[A+228>>2]=r,U2[A+240>>2]=i,X2[A+304>>2]=X2[A+304>>2]+4;},CollisionObject_getCollisionFlags:Z0,CollisionObject_setCollisionFlags:function(A,e){X2[(A|=0)+204>>2]=e|=0;},CollisionObject_getWorldTransform:g0,CollisionObject_setCollisionShape:E0,CollisionObject_getCollisionShape:function(A){return X2[(A|=0)+192>>2];},CollisionObject_getCcdMotionThreshold:function(A){return P2(U2[(A|=0)+276>>2]);},CollisionObject_setCcdMotionThreshold:function(A,e){A|=0,e=P2(e),U2[A+276>>2]=e;},CollisionObject_getCcdSweptSphereRadius:function(A){return P2(U2[(A|=0)+272>>2]);},CollisionObject_setCcdSweptSphereRadius:function(A,e){A|=0,e=P2(e),U2[A+272>>2]=e;},CollisionObject_getUserIndex:function(A){return X2[(A|=0)+264>>2];},CollisionObject_setUserIndex:function(A,e){X2[(A|=0)+264>>2]=e|=0;},CollisionObject_getActivationState:function(A){return X2[(A|=0)+220>>2];},CollisionObject_setIgnoreCollisionCheck:function(A,e,r){e|=0;var f=0,i=0,a=0,n=0,f=X2[(A|=0)+288>>2];A:if(r|=0){if(X2[A+292>>2]==(0|f)&&!((0|(a=f?f<<1:1))<=(0|f))){if(a&&(X2[6258]=X2[6258]+1,(r=L2(19+(a<<2)|0))&&(X2[(n=r+19&-16)-4>>2]=r)),1<=(0|f))for(r=0,i=f;;)if(X2[r+n>>2]=X2[X2[A+296>>2]+r>>2],r=r+4|0,!(i=i-1|0))break;(r=X2[A+296>>2])&&J2[A+300|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2]),f=X2[A+288>>2]),X2[A+296>>2]=n,X2[A+292>>2]=a,S2[A+300|0]=1;}X2[A+288>>2]=i=f+1|0,X2[X2[A+296>>2]+(f<<2)>>2]=e;}else if((0|f)<1)i=f;else {r=n=X2[A+296>>2];e:{for(;;){if(X2[r>>2]==(0|e))break e;if(r=r+4|0,(0|(i=i+1|0))==(0|f))break;}i=f;break A;}(0|f)<=(0|i)?i=f:(X2[(a=r)>>2]=X2[(r=(i=f-1|0)<<2)+n>>2],X2[A+288>>2]=i,X2[r+X2[A+296>>2]>>2]=e);}X2[A+280>>2]=0<(0|i);},CollisionShape_setMaterial:s0,CollisionShape_getMaterial:Y1,CollisionShape_setUserPointer:function(A,e){X2[(A|=0)+8>>2]=e|=0;},CollisionShape_getUserPointer:m1,CollisionShape_getLocalScaling:function(A){return 0|N2[X2[X2[(A|=0)>>2]+28>>2]](A);},CollisionShape_setLocalScaling:function(A,e){N2[X2[X2[(A|=0)>>2]+24>>2]](A,e|=0);},CollisionShape_calculateLocalInertia:function(A,e,r){A|=0,e=P2(e),N2[X2[X2[A>>2]+32>>2]](A,e,r|=0);},CollisionShape_isCompound:function(A){return 31==X2[(A|=0)+4>>2]|0;},CollisionShape_getAabb:N1,CollisionShape_getLocalBoundingSphere:function(A){var e,r;return A|=0,P2(0),P2(0),X2[(e=44+(K2=r=K2-96|0)|0)>>2]=0,X2[4+e>>2]=0,X2[(e=56+r|0)>>2]=0,X2[4+e>>2]=0,X2[52+r>>2]=1065353216,X2[(e=r+64|0)>>2]=0,X2[4+e>>2]=0,X2[(e=76+r|0)>>2]=0,X2[4+e>>2]=0,X2[72+r>>2]=1065353216,X2[(e=84+r|0)>>2]=0,X2[4+e>>2]=0,X2[92+r>>2]=0,X2[36+r>>2]=0,X2[40+r>>2]=0,X2[32+r>>2]=1065353216,N2[X2[X2[A>>2]+8>>2]](A,32+r|0,16+r|0,r),K2=96+r|0,e=P2(U2[r>>2]-U2[16+r>>2]),A=P2(e*e),e=P2(U2[4+r>>2]-U2[20+r>>2]),A=P2(A+P2(e*e)),e=P2(U2[8+r>>2]-U2[24+r>>2]),P2(P2(P2(O2(P2(A+P2(e*e))))*P2(.5)));},CollisionShape_setMargin:function(A,e){A|=0,e=P2(e),N2[X2[X2[A>>2]+44>>2]](A,e);},BoxShape_new:function(A){A|=0;var e,r,f,i,a,n,b=0;return P2(0),P2(0),P2(0),P2(0),P2(0),X2[6258]=X2[6258]+1,(f=L2(83))&&(X2[(b=f+19&-16)-4>>2]=f),X2[b+52>>2]=1025758986,X2[b+28>>2]=1065353216,X2[b+32>>2]=0,X2[b+20>>2]=1065353216,X2[b+24>>2]=1065353216,X2[b+12>>2]=0,X2[b+16>>2]=0,X2[b+4>>2]=0,X2[b+8>>2]=0,r=U2[A+8>>2],e=U2[A+4>>2],i=U2[A>>2],X2[b+48>>2]=0,i=P2(i+P2(-.03999999910593033)),U2[b+36>>2]=i,a=P2(e+P2(-.03999999910593033)),U2[b+40>>2]=a,n=P2(r+P2(-.03999999910593033)),U2[b+44>>2]=n,X2[b+60>>2]=0,X2[b>>2]=10588,r=U2[A>>2],e=U2[A+4>>2],(e=P2(U2[((U2[A+8>>2]>((f=r<e)?r:e)?!f:2)<<2)+A>>2]*P2(.10000000149011612)))<P2(.03999999910593033)&&(r=U2[b+52>>2],U2[b+52>>2]=e,e=U2[b+52>>2],X2[b+48>>2]=0,U2[b+44>>2]=P2(r+n)-e,U2[b+40>>2]=P2(r+a)-e,U2[b+36>>2]=P2(r+i)-e),0|b;},BoxShape_setUnscaledHalfExtents:function(A,e){A|=0,e|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var r=P2(N2[X2[X2[A>>2]+48>>2]](A)),f=P2(N2[X2[X2[A>>2]+48>>2]](A)),i=P2(N2[X2[X2[A>>2]+48>>2]](A)),a=U2[e>>2],n=U2[e+4>>2],b=U2[e+8>>2];X2[A+48>>2]=0,U2[A+44>>2]=P2(b*U2[A+28>>2])-i,U2[A+40>>2]=P2(n*U2[A+24>>2])-f,U2[A+36>>2]=P2(a*U2[A+20>>2])-r,r=U2[e>>2],f=U2[e+4>>2],r=P2(U2[((U2[e+8>>2]>((b=r<f)?r:f)?!b:2)<<2)+e>>2]*P2(.10000000149011612)),P2(N2[X2[X2[A>>2]+48>>2]](A))>r&&N2[X2[X2[A>>2]+44>>2]](A,r);},SphereShape_new:function(A){A=P2(A);var e,r=0;return X2[6258]=X2[6258]+1,(e=L2(79))&&(X2[(r=e+19&-16)-4>>2]=e),X2[r+32>>2]=0,X2[r+36>>2]=0,X2[r+12>>2]=0,X2[r+16>>2]=0,X2[r+4>>2]=8,X2[r+8>>2]=0,X2[r+28>>2]=1065353216,X2[r+20>>2]=1065353216,X2[r+24>>2]=1065353216,X2[r>>2]=14616,X2[r+56>>2]=0,U2[r+52>>2]=A,U2[r+36>>2]=A,X2[(e=r+40|0)>>2]=0,X2[4+e>>2]=0,(X2[r+48>>2]=0)|r;},SphereShape_setUnscaledRadius:function(A,e){A|=0,e=P2(e),U2[A+52>>2]=e,U2[A+36>>2]=e;},CapsuleShape_new:function(A,e){A=P2(A),e=P2(e);var r,f=0;return X2[6258]=X2[6258]+1,(r=L2(83))&&(X2[(f=r+19&-16)-4>>2]=r),X2[f+28>>2]=1065353216,X2[f+32>>2]=0,X2[f+20>>2]=1065353216,X2[f+24>>2]=1065353216,X2[f+12>>2]=0,X2[f+16>>2]=0,X2[f+4>>2]=10,X2[f+8>>2]=0,U2[f+52>>2]=A,X2[f>>2]=10948,X2[f+60>>2]=1,X2[f+48>>2]=0,U2[f+44>>2]=A,U2[f+36>>2]=A,U2[f+40>>2]=e*P2(.5),0|f;},CapsuleShape_updateProp:function(A,e,r,f){A|=0,e=P2(e),r=P2(r),f|=0;var i,a=P2(0),n=P2(0);X2[A+20>>2]=1065353216,X2[A+24>>2]=1065353216,X2[A+60>>2]=f,X2[(i=A+28|0)>>2]=1065353216,n=e,a=r;A:{e:switch((X2[4+i>>2]=0)|f){case 0:n=r,a=e;break A;case 1:break A;default:break e;}a=e,e=r;}U2[A+36>>2]=n,X2[A+48>>2]=0,U2[A+44>>2]=e,U2[A+40>>2]=a,U2[A+52>>2]=U2[(A+36|0)+((f+2|0)%3<<2)>>2];},ConvexInternalShape_getImplicitShapeDimensions:function(A){return (A|=0)+36|0;},CylinderShape_new:function(A){A|=0;var e,r,f,i,a,n,b=0;return P2(0),P2(0),P2(0),P2(0),P2(0),X2[6258]=X2[6258]+1,(f=L2(83))&&(X2[(b=f+19&-16)-4>>2]=f),X2[b+52>>2]=1025758986,X2[b+28>>2]=1065353216,X2[b+32>>2]=0,X2[b+20>>2]=1065353216,X2[b+24>>2]=1065353216,X2[b+12>>2]=0,X2[b+16>>2]=0,X2[b+4>>2]=35,X2[b+8>>2]=0,r=U2[A+8>>2],e=U2[A+4>>2],i=U2[A>>2],X2[b+48>>2]=0,i=P2(i+P2(-.03999999910593033)),U2[b+36>>2]=i,a=P2(e+P2(-.03999999910593033)),U2[b+40>>2]=a,n=P2(r+P2(-.03999999910593033)),U2[b+44>>2]=n,X2[b+60>>2]=1,X2[b>>2]=11112,r=U2[A>>2],e=U2[A+4>>2],(e=P2(U2[((U2[A+8>>2]>((f=r<e)?r:e)?!f:2)<<2)+A>>2]*P2(.10000000149011612)))<P2(.03999999910593033)&&(r=U2[b+52>>2],U2[b+52>>2]=e,e=U2[b+52>>2],X2[b+48>>2]=0,U2[b+44>>2]=P2(r+n)-e,U2[b+40>>2]=P2(r+a)-e,U2[b+36>>2]=P2(r+i)-e),X2[b+4>>2]=13,0|b;},CylinderShape_updateProp:function(A,e,r,f){A|=0,e=P2(e),r=P2(r),f|=0;var i,a=P2(0),n=P2(0);X2[A+20>>2]=1065353216,X2[A+24>>2]=1065353216,X2[A+60>>2]=f,X2[(i=A+28|0)>>2]=1065353216,n=e,a=r;A:{e:switch((X2[4+i>>2]=0)|f){case 0:n=r,a=e;break A;case 1:break A;default:break e;}a=e,e=r;}U2[A+36>>2]=n,X2[A+48>>2]=0,U2[(f=A+44|0)>>2]=e,U2[(i=A+40|0)>>2]=a,e=P2(N2[X2[X2[A>>2]+48>>2]](A)),r=P2(N2[X2[X2[A>>2]+48>>2]](A)),a=P2(N2[X2[X2[A>>2]+48>>2]](A)),U2[A+36>>2]=U2[A+36>>2]-e,U2[i>>2]=U2[i>>2]-r,U2[f>>2]=U2[f>>2]-a;},ConeShape_new:function(A,e){A=P2(A),e=P2(e);var r,f=0;return X2[6258]=X2[6258]+1,(r=L2(103))&&(X2[(f=r+19&-16)-4>>2]=r),X2[f+52>>2]=1025758986,X2[f+28>>2]=1065353216,X2[f+32>>2]=0,X2[f+20>>2]=1065353216,X2[f+24>>2]=1065353216,X2[f+12>>2]=0,X2[f+16>>2]=0,X2[f+4>>2]=11,X2[f+8>>2]=0,U2[f+68>>2]=e,U2[f+64>>2]=A,X2[f>>2]=11276,X2[f+80>>2]=2,X2[f+72>>2]=0,X2[f+76>>2]=1,U2[f+44>>2]=A,U2[f+40>>2]=e,U2[f+36>>2]=A,U2[f+60>>2]=A/P2(O2(P2(P2(A*A)+P2(e*e)))),0|f;},ConeShape_setRadius:function(A,e){A|=0,e=P2(e),U2[A+64>>2]=e;},ConeShape_setHeight:function(A,e){A|=0,e=P2(e),U2[A+68>>2]=e;},ConeShape_setConeUpIndex:function(A,e){A|=0;var r,f=0,i=0;A:{e:switch(0|(e|=0)){default:f=X2[A+76>>2],i=X2[A+72>>2],e=X2[A+80>>2];break A;case 0:X2[A+72>>2]=1,X2[A+76>>2]=0,i=1,e=X2[A+80>>2]=2;break A;case 1:X2[A+72>>2]=0,f=X2[A+76>>2]=1,e=X2[A+80>>2]=2;break A;case 2:break e;}X2[A+72>>2]=0,f=X2[A+76>>2]=2,e=X2[A+80>>2]=1;}U2[(r=A+36|0)+(i<<2)>>2]=U2[A+64>>2],U2[(f<<2)+r>>2]=U2[A+68>>2],U2[(e<<2)+r>>2]=U2[A+64>>2];},StaticPlaneShape_new:function(A,e){A|=0,e=P2(e);var r,f,i,a=0;return P2(0),P2(0),P2(0),P2(0),X2[6258]=X2[6258]+1,(r=L2(111))&&(X2[(a=r+19&-16)-4>>2]=r),X2[a+20>>2]=0,X2[a+12>>2]=0,X2[a+16>>2]=0,X2[a+4>>2]=35,X2[a+8>>2]=0,X2[a>>2]=11456,r=U2[A+8>>2],f=U2[A>>2],i=U2[A+4>>2],A=U2[A+12>>2],X2[a+84>>2]=1065353216,X2[a+88>>2]=0,X2[a+76>>2]=1065353216,X2[a+80>>2]=1065353216,U2[a+72>>2]=e,U2[a+68>>2]=A,X2[a+4>>2]=28,e=P2(P2(1)/P2(O2(P2(P2(P2(f*f)+P2(i*i))+P2(r*r))))),U2[a+64>>2]=r*e,U2[a+60>>2]=i*e,U2[a+56>>2]=f*e,0|a;},StaticPlaneShape_setPlaneConstant:function(A,e){A|=0,e=P2(e),U2[A+72>>2]=e;},StaticPlaneShape_getPlaneNormal:function(A){return (A|=0)+56|0;},ccCompoundShape_new:function(){var A,e,r=0,f=0,i=X2[6258];return (e=L2(119))&&(X2[(r=e+19&-16)-4>>2]=e),X2[(e=r+32|0)>>2]=0,X2[4+e>>2]=0,X2[r+8>>2]=0,X2[r+12>>2]=0,X2[r>>2]=11628,X2[r+96>>2]=0,X2[r+88>>2]=1065353216,X2[r+92>>2]=1065353216,X2[r+80>>2]=0,X2[r+84>>2]=1065353216,X2[r+72>>2]=0,X2[r+76>>2]=1,X2[r+64>>2]=-581039253,X2[r+68>>2]=0,X2[r+56>>2]=-581039253,X2[r+60>>2]=-581039253,X2[r+48>>2]=1566444395,X2[r+52>>2]=0,X2[r+40>>2]=1566444395,X2[r+44>>2]=1566444395,X2[r+24>>2]=0,X2[r+28>>2]=0,X2[r+4>>2]=31,X2[(A=r+16|0)>>2]=0,X2[4+A>>2]=0,X2[6258]=i+2,S2[r+36|0]=1,X2[e>>2]=0,(e=L2(59))&&(X2[(f=e+19&-16)-4>>2]=e),X2[f+32>>2]=0,S2[f+36|0]=1,X2[f+24>>2]=0,X2[f+28>>2]=0,X2[f+16>>2]=0,X2[f+8>>2]=-1,X2[f+12>>2]=0,X2[f>>2]=0,X2[f+4>>2]=0,X2[r+72>>2]=f,X2[r>>2]=14744,0|r;},CompoundShape_getNumChildShapes:k1,CompoundShape_addChildShape:function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b,t,o,c,k,u,s,l,B=0,v=0,d=0,Z=(P2(0),0),_=0,g=(P2(0),K2-128|0);if(K2=g,X2[A+76>>2]=X2[A+76>>2]+1,B=X2[(v=e+24|0)>>2],v=X2[v+4>>2],Z=X2[(d=e+8|0)>>2],d=X2[d+4>>2],k=X2[(t=e+40|0)>>2],t=X2[4+t>>2],u=X2[e+16>>2],c=X2[e+20>>2],f=X2[e>>2],i=X2[e+4>>2],s=X2[e+32>>2],a=X2[e+36>>2],l=X2[4+(o=e+56|0)>>2],X2[(b=120+g|0)>>2]=X2[o>>2],X2[4+b>>2]=l,X2[(b=104+g|0)>>2]=k,X2[4+b>>2]=t,X2[(t=72+g|0)>>2]=Z,X2[4+t>>2]=d,X2[(d=88+g|0)>>2]=B,X2[d+4>>2]=v,v=X2[e+52>>2],X2[112+g>>2]=X2[e+48>>2],X2[116+g>>2]=v,X2[96+g>>2]=s,X2[100+g>>2]=a,X2[64+g>>2]=f,X2[68+g>>2]=i,X2[80+g>>2]=u,X2[84+g>>2]=c,s=X2[r+4>>2],l=P2(N2[X2[X2[r>>2]+48>>2]](r)),N2[X2[X2[r>>2]+8>>2]](r,e,48+g|0,32+g|0),(n=U2[48+g>>2])<U2[A+40>>2]&&(U2[A+40>>2]=n),(n=U2[32+g>>2])>U2[A+56>>2]&&(U2[A+56>>2]=n),(n=U2[52+g>>2])<U2[A+44>>2]&&(U2[A+44>>2]=n),(n=U2[36+g>>2])>U2[A+60>>2]&&(U2[A+60>>2]=n),(n=U2[56+g>>2])<U2[A+48>>2]&&(U2[A+48>>2]=n),(n=U2[40+g>>2])>U2[A- -64>>2]&&(U2[A+64>>2]=n),(v=X2[A+72>>2])?(d=X2[(B=40+g|0)+4>>2],X2[(e=24+g|0)>>2]=X2[B>>2],X2[e+4>>2]=d,d=X2[(B=56+g|0)+4>>2],X2[(e=8+g|0)>>2]=X2[B>>2],X2[e+4>>2]=d,e=X2[52+g>>2],X2[g>>2]=X2[48+g>>2],X2[4+g>>2]=e,e=X2[36+g>>2],X2[16+g>>2]=X2[32+g>>2],X2[20+g>>2]=e,d=X2[A+24>>2],(e=X2[v+4>>2])?X2[v+4>>2]=0:(X2[6258]=X2[6258]+1,e=0,(B=L2(63))&&(X2[(e=B+19&-16)-4>>2]=B),X2[e>>2]=0,X2[e+4>>2]=0,X2[e+40>>2]=0,X2[(B=e+32|0)>>2]=0,X2[B+4>>2]=0,X2[(B=e+24|0)>>2]=0,X2[B+4>>2]=0,X2[(B=e+16|0)>>2]=0,X2[B+4>>2]=0,X2[(B=e+8|0)>>2]=0,X2[B+4>>2]=0),X2[e+36>>2]=d,B=X2[4+g>>2],X2[e>>2]=X2[g>>2],X2[e+4>>2]=B,X2[e+40>>2]=0,Z=X2[(d=8+g|0)+4>>2],X2[(B=e+8|0)>>2]=X2[d>>2],X2[B+4>>2]=Z,Z=X2[(d=16+g|0)+4>>2],X2[(B=e+16|0)>>2]=X2[d>>2],X2[B+4>>2]=Z,Z=X2[(d=24+g|0)+4>>2],X2[(B=e+24|0)>>2]=X2[d>>2],X2[B+4>>2]=Z,X2[e+32>>2]=0,i1(v,X2[v>>2],e),X2[v+12>>2]=X2[v+12>>2]+1):e=0,t=112+g|0,k=96+g|0,u=80+g|0,(0|(v=X2[A+24>>2]))==X2[A+28>>2]&&!((0|(c=v?v<<1:1))<=(0|v))){if(c&&(X2[6258]=X2[6258]+1,(B=L2(H2(c,80)+19|0))&&(X2[(_=B+19&-16)-4>>2]=B)),1<=(0|v))for(Z=64;;)if(d=X2[A+32>>2]+Z|0,b=X2[4+(f=d+-64|0)>>2],X2[(i=(B=Z+_|0)+-64|0)>>2]=X2[f>>2],X2[4+i>>2]=b,a=X2[4+(f=8+f|0)>>2],X2[(i=8+i|0)>>2]=X2[f>>2],X2[4+i>>2]=a,o=X2[4+(b=8+(i=d-48|0)|0)>>2],X2[(a=8+(f=B-48|0)|0)>>2]=X2[b>>2],X2[4+a>>2]=o,a=X2[4+i>>2],X2[f>>2]=X2[i>>2],X2[4+f>>2]=a,o=X2[4+(b=8+(i=d-32|0)|0)>>2],X2[(a=8+(f=B-32|0)|0)>>2]=X2[b>>2],X2[4+a>>2]=o,a=X2[4+i>>2],X2[f>>2]=X2[i>>2],X2[4+f>>2]=a,o=X2[4+(b=8+(i=d-16|0)|0)>>2],X2[(a=8+(f=B-16|0)|0)>>2]=X2[b>>2],X2[4+a>>2]=o,a=X2[4+i>>2],X2[f>>2]=X2[i>>2],X2[4+f>>2]=a,f=X2[d+4>>2],X2[B>>2]=X2[d>>2],X2[B+4>>2]=f,f=X2[(d=d+8|0)+4>>2],X2[(B=B+8|0)>>2]=X2[d>>2],X2[B+4>>2]=f,Z=Z+80|0,!(v=v-1|0))break;(v=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[v-4>>2])),X2[A+32>>2]=_,X2[A+28>>2]=c,S2[A+36|0]=1,v=X2[A+24>>2];}d=X2[4+u>>2],v=X2[A+32>>2]+H2(v,80)|0,X2[(B=v)+16>>2]=X2[u>>2],X2[B+20>>2]=d,B=X2[68+g>>2],X2[v>>2]=X2[64+g>>2],X2[v+4>>2]=B,B=X2[4+k>>2],X2[v+32>>2]=X2[k>>2],X2[v+36>>2]=B,B=X2[4+t>>2],X2[v+48>>2]=X2[t>>2],X2[v+52>>2]=B,X2[v+64>>2]=r,d=X2[(B=72+g|0)+4>>2],X2[(r=v+8|0)>>2]=X2[B>>2],X2[r+4>>2]=d,d=X2[(B=8+u|0)+4>>2],X2[(r=v+24|0)>>2]=X2[B>>2],X2[r+4>>2]=d,d=X2[(B=8+k|0)+4>>2],X2[(r=v+40|0)>>2]=X2[B>>2],X2[r+4>>2]=d,d=X2[(B=8+t|0)+4>>2],X2[(r=v+56|0)>>2]=X2[B>>2],X2[r+4>>2]=d,X2[v+76>>2]=e,U2[v+72>>2]=l,X2[v+68>>2]=s,X2[A+24>>2]=X2[A+24>>2]+1,K2=128+g|0;},CompoundShape_removeChildShape:R1,CompoundShape_removeChildShapeByIndex:function(A,e){b1(A|=0,e|=0);},CompoundShape_getChildShape:function(A,e){return X2[64+(X2[(A|=0)+32>>2]+H2(e|=0,80)|0)>>2];},CompoundShape_updateChildTransform:function(A,e,r,f){e|=0,r|=0,f|=0;var i,a=0,n=0,b=0,t=0,o=0;K2=i=K2+-64|0,a=(n=X2[(A|=0)+24>>2])+1|0,n=H2(n,80)+76|0;A:{for(;;){if((0|(a=a-1|0))<1)break A;if(o=(b=X2[A+32>>2])+n|0,n=t=n-80|0,X2[o-92>>2]==(0|e))break;}if(a=n=(e=b+t|0)-76|0,b=X2[r+4>>2],X2[a>>2]=X2[r>>2],X2[a+4>>2]=b,b=X2[(a=r+8|0)+4>>2],X2[(n=n+8|0)>>2]=X2[a>>2],X2[n+4>>2]=b,o=X2[(b=r+24|0)+4>>2],X2[(a=(n=e-60|0)+8|0)>>2]=X2[b>>2],X2[a+4>>2]=o,a=X2[r+20>>2],X2[n>>2]=X2[r+16>>2],X2[n+4>>2]=a,o=X2[(b=r+40|0)+4>>2],X2[(a=(n=e-44|0)+8|0)>>2]=X2[b>>2],X2[a+4>>2]=o,a=X2[r+36>>2],X2[n>>2]=X2[r+32>>2],X2[n+4>>2]=a,b=X2[(a=r+56|0)+4>>2],X2[(n=(e=e-28|0)+8|0)>>2]=X2[a>>2],X2[n+4>>2]=b,n=X2[r+52>>2],X2[e>>2]=X2[r+48>>2],X2[e+4>>2]=n,X2[A+72>>2]){e=X2[(X2[A+32>>2]+t|0)-12>>2],N2[X2[X2[e>>2]+8>>2]](e,r,48+i|0,32+i|0),n=X2[(r=56+i|0)+4>>2],X2[(e=8+i|0)>>2]=X2[r>>2],X2[e+4>>2]=n,n=X2[(r=40+i|0)+4>>2],X2[(e=24+i|0)>>2]=X2[r>>2],X2[e+4>>2]=n,e=X2[52+i>>2],X2[i>>2]=X2[48+i>>2],X2[4+i>>2]=e,e=X2[36+i>>2],X2[16+i>>2]=X2[32+i>>2],X2[20+i>>2]=e;e:if(n=f1(b=X2[A+72>>2],r=X2[X2[A+32>>2]+t>>2])){if(0<=(0|(a=X2[b+8>>2]))){if(a)for(;;){if(!(e=X2[n+32>>2]))break e;if(n=e,!(a=a-1|0))break;}}else n=X2[b>>2];}else n=0;e=X2[4+i>>2],X2[r>>2]=X2[i>>2],X2[r+4>>2]=e,t=X2[(a=24+i|0)+4>>2],X2[(e=r+24|0)>>2]=X2[a>>2],X2[e+4>>2]=t,t=X2[(a=16+i|0)+4>>2],X2[(e=r+16|0)>>2]=X2[a>>2],X2[e+4>>2]=t,t=X2[(a=8+i|0)+4>>2],X2[(e=r+8|0)>>2]=X2[a>>2],X2[e+4>>2]=t,i1(b,n,r);}f&&N2[X2[X2[A>>2]+68>>2]](A);}K2=i+64|0;},TriangleMesh_new:function(){var A,e=0,r=0,f=0,i=0,i=X2[6258];return (r=L2(191))&&(X2[(e=r+19&-16)-4>>2]=r),S2[e+36|0]=1,X2[e+12>>2]=1065353216,X2[e+16>>2]=0,X2[e+4>>2]=1065353216,X2[e+8>>2]=1065353216,X2[e+32>>2]=0,X2[e+48>>2]=0,X2[e+24>>2]=0,X2[e+28>>2]=0,S2[e+100|0]=1,X2[e>>2]=12152,X2[e+96>>2]=0,S2[e+120|0]=1,X2[e+88>>2]=0,X2[e+92>>2]=0,X2[e+116>>2]=0,S2[e+140|0]=1,X2[e+108>>2]=0,X2[e+112>>2]=0,X2[e+136>>2]=0,S2[e+160|0]=1,X2[e+128>>2]=0,X2[e+132>>2]=0,X2[e+168>>2]=0,X2[e+156>>2]=0,X2[e+148>>2]=0,X2[e+152>>2]=0,$[e+164>>1]=257,X2[6258]=i+2,(r=L2(51))&&(X2[(f=r+19&-16)-4>>2]=r),r=0,(i=X2[e+32>>2])&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2]),r=X2[e+24>>2]),X2[e+32>>2]=f,S2[e+36|0]=1,X2[e+28>>2]=1,X2[(r=(r<<5)+f|0)+24>>2]=2,X2[r+28>>2]=0,X2[r+16>>2]=0,X2[r+20>>2]=16,X2[r+8>>2]=12,X2[r+12>>2]=0,X2[r>>2]=0,X2[r+4>>2]=0,X2[e+24>>2]=X2[e+24>>2]+1,r=X2[e+32>>2],X2[r+4>>2]=0,f=J2[e+164|0],X2[r+24>>2]=f?2:3,A=X2[(f?128:148)+e>>2],i=12,X2[r+8>>2]=f?12:6,X2[r>>2]=(0|A)/3,f=J2[e+165|0]?(i=16,X2[e+88>>2]):X2[e+108>>2]/3|0,X2[r+20>>2]=i,X2[r+16>>2]=0,X2[r+12>>2]=f,0|e;},TriangleMesh_addTriangle:function(A,e,r,f,i){e|=0,r|=0,f|=0,i|=0;var a=X2[(A|=0)+32>>2];X2[a>>2]=X2[a>>2]+1,u1(A,s1(A,e,i)),u1(A,s1(A,r,i)),u1(A,s1(A,f,i));},BvhTriangleMeshShape_new:function(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b=0;return K2=n=K2-48|0,X2[6258]=X2[6258]+1,(f=L2(103))&&(X2[(b=f+19&-16)-4>>2]=f),X2[b+12>>2]=0,X2[b+16>>2]=0,X2[b+4>>2]=21,X2[b+8>>2]=0,X2[b>>2]=12252,X2[b+56>>2]=A,(X2[b+20>>2]=0)|N2[X2[X2[A>>2]+40>>2]](A)?N2[X2[X2[A>>2]+48>>2]](A,b+24|0,b+40|0):(X2[44+n>>2]=0,X2[36+n>>2]=0,X2[40+n>>2]=0,X2[32+n>>2]=1065353216,N2[X2[X2[b>>2]+68>>2]](16+n|0,b,32+n|0),U2[b+40>>2]=U2[16+n>>2]+U2[b+20>>2],X2[32+n>>2]=-1082130432,N2[X2[X2[b>>2]+68>>2]](n,b,32+n|0),a=X2[4+(f=8+n|0)>>2],X2[(A=24+n|0)>>2]=X2[f>>2],X2[A+4>>2]=a,i=X2[4+n>>2],X2[16+n>>2]=X2[n>>2],X2[20+n>>2]=i,U2[b+24>>2]=U2[16+n>>2]-U2[b+20>>2],X2[(i=40+n|0)>>2]=0,X2[4+i>>2]=0,X2[32+n>>2]=0,X2[36+n>>2]=0,X2[36+n>>2]=1065353216,N2[X2[X2[b>>2]+68>>2]](16+n|0,b,32+n|0),U2[b+44>>2]=U2[20+n>>2]+U2[b+20>>2],X2[36+n>>2]=-1082130432,N2[X2[X2[b>>2]+68>>2]](n,b,32+n|0),a=X2[4+f>>2],X2[A>>2]=X2[f>>2],X2[A+4>>2]=a,a=X2[4+n>>2],X2[16+n>>2]=X2[n>>2],X2[20+n>>2]=a,U2[b+28>>2]=U2[20+n>>2]-U2[b+20>>2],X2[i>>2]=0,X2[4+i>>2]=0,X2[i>>2]=1065353216,X2[32+n>>2]=0,X2[36+n>>2]=0,N2[X2[X2[b>>2]+68>>2]](16+n|0,b,32+n|0),X2[i>>2]=-1082130432,U2[b+48>>2]=U2[A>>2]+U2[b+20>>2],N2[X2[X2[b>>2]+68>>2]](n,b,32+n|0),i=X2[4+f>>2],X2[A>>2]=X2[f>>2],X2[A+4>>2]=i,f=X2[4+n>>2],X2[16+n>>2]=X2[n>>2],X2[20+n>>2]=f,U2[b+32>>2]=U2[A>>2]-U2[b+20>>2]),S2[b+69|(A=0)]=0,S2[b+68|0]=e,X2[b+60>>2]=0,X2[b+64>>2]=0,X2[b>>2]=13056,X2[b+4>>2]=21,r&&(X2[6258]=X2[6258]+1,(r=L2(191))&&(X2[(A=r+19&-16)-4>>2]=r),S2[A+80|0]=1,S2[A+60|0]=0,X2[A+52>>2]=287,X2[A+76>>2]=0,S2[A+100|0]=1,X2[A+68>>2]=0,X2[A+72>>2]=0,X2[A+96>>2]=0,S2[A+120|0]=1,X2[A+88>>2]=0,X2[A+92>>2]=0,X2[A+116>>2]=0,S2[A+140|0]=1,X2[A+108>>2]=0,X2[A+112>>2]=0,X2[A+136>>2]=0,S2[A+164|0]=1,X2[A+144>>2]=0,X2[A+128>>2]=0,X2[A+132>>2]=0,X2[A+160>>2]=0,X2[A+152>>2]=0,X2[A+156>>2]=0,X2[A+168>>2]=0,X2[A+28>>2]=2139095039,X2[A+32>>2]=0,X2[A+20>>2]=2139095039,X2[A+24>>2]=2139095039,X2[A+12>>2]=-8388609,X2[A+16>>2]=0,X2[A+4>>2]=-8388609,X2[A+8>>2]=-8388609,X2[A>>2]=12728,g1(X2[b+60>>2]=A,X2[b+56>>2],e,b+24|0,b+40|0),S2[b+69|0]=1),K2=48+n|0,0|b;},BvhTriangleMeshShape_getOptimizedBvh:function(A){return X2[(A|=0)+60>>2];},BvhTriangleMeshShape_setOptimizedBvh:function(A,e,r,f,i){var a,n;A|=0,e|=0,r=P2(r),f=P2(f),i=P2(i),P2(0),K2=n=K2-16|0,S2[A+69|0]=0,X2[A+60>>2]=e,X2[12+n>>2]=0,U2[8+n>>2]=i,U2[n>>2]=r,U2[4+n>>2]=f,e=0|N2[X2[X2[A>>2]+28>>2]](A),r=P2(U2[e>>2]-r),a=P2(r*r),r=P2(U2[e+4>>2]-f),f=P2(a+P2(r*r)),r=P2(U2[e+8>>2]-i),P2(f+P2(r*r))>P2(1.1920928955078125e-7)&&l1(A,n),K2=16+n|0;},ScaledBvhTriangleMeshShape_new:function(A,e,r,f){A|=0,e=P2(e),r=P2(r),f=P2(f);var i,a=0;return X2[6258]=X2[6258]+1,(i=L2(63))&&(X2[(a=i+19&-16)-4>>2]=i),X2[a+20>>2]=0,X2[a+12>>2]=0,X2[a+16>>2]=0,X2[a+4>>2]=22,X2[a+8>>2]=0,X2[a+40>>2]=A,X2[a+36>>2]=0,U2[a+32>>2]=f,U2[a+28>>2]=r,U2[a+24>>2]=e,X2[a>>2]=13688,0|a;},ConvexTriangleMeshShape_new:function(A){A|=0;var e,r,f=0;return P2(0),K2=r=K2-96|0,X2[6258]=X2[6258]+1,(e=L2(123))&&(X2[(f=e+19&-16)-4>>2]=e),X2[f+88>>2]=-1082130432,X2[f+92>>2]=0,X2[f+80>>2]=-1082130432,X2[f+84>>2]=-1082130432,X2[f+72>>2]=1065353216,X2[f+76>>2]=0,X2[f+64>>2]=1065353216,X2[f+68>>2]=1065353216,X2[f+60>>2]=0,X2[f+52>>2]=1025758986,X2[f+28>>2]=1065353216,X2[f+32>>2]=0,X2[f+20>>2]=1065353216,X2[f+24>>2]=1065353216,X2[f+12>>2]=0,X2[f+16>>2]=0,X2[f+4>>2]=3,X2[f+8>>2]=0,X2[f+100>>2]=A,X2[f>>2]=13920,S2[f+96|0]=1,J2[25296]||(X2[6329]=0,X2[6330]=0,X2[6328]=1065353216,X2[6331]=0,X2[6332]=0,X2[6334]=0,X2[6335]=0,X2[6333]=1065353216,X2[6336]=0,X2[6337]=0,X2[6341]=0,X2[6342]=0,X2[6340]=-1082130432,X2[6338]=1065353216,X2[6339]=0,X2[6343]=0,X2[6344]=0,X2[6346]=0,X2[6347]=0,X2[6345]=-1082130432,X2[6348]=0,X2[6349]=0,X2[6350]=-1082130432,X2[6351]=0,S2[25296]=1),A=v2(r,0,96),N2[X2[X2[f>>2]+76>>2]](f,25312,A,6),e=U2[f+52>>2],U2[f+64>>2]=U2[A+48>>2]-e,U2[f+80>>2]=e+U2[A>>2],U2[f+84>>2]=e+U2[A+20>>2],U2[f+88>>2]=e+U2[A+40>>2],U2[f+68>>2]=U2[A+68>>2]-e,U2[f+72>>2]=U2[A+88>>2]-e,K2=A+96|0,0|f;},EmptyShape_static:function(){return J2[25412]||(X2[6357]=0,X2[6358]=0,X2[6355]=27,X2[6356]=0,X2[6354]=14168,S2[25412]=1,X2[6359]=0),25416;},SimplexShape_new:function(A){var e;return A|=0,X2[6258]=X2[6258]+1,A=0,(e=L2(187))&&(X2[(A=e+19&-16)-4>>2]=e),S2[A+96|0]=0,X2[A+92>>2]=0,X2[A+84>>2]=-1082130432,X2[A+88>>2]=-1082130432,X2[A+76>>2]=0,X2[A+80>>2]=-1082130432,X2[A+68>>2]=1065353216,X2[A+72>>2]=1065353216,X2[A+60>>2]=0,X2[A+64>>2]=1065353216,X2[A+52>>2]=1025758986,X2[A+32>>2]=0,X2[A+24>>2]=1065353216,X2[A+28>>2]=1065353216,X2[A+16>>2]=0,X2[A+20>>2]=1065353216,X2[A+8>>2]=0,X2[A+12>>2]=0,X2[A+100>>2]=0,X2[A>>2]=14280,X2[A+4>>2]=2,0|A;},SimplexShape_addVertex:function(A,e){var r,f,i,a;A|=0,e|=0,P2(0),K2=a=K2-96|0,r=X2[A+100>>2],X2[A+100>>2]=r+1,i=X2[e+4>>2],X2[(f=104+(r=(r<<4)+A|0)|0)>>2]=X2[e>>2],X2[4+f>>2]=i,f=X2[(e=e+8|0)+4>>2],X2[(r=112+r|0)>>2]=X2[e>>2],X2[4+r>>2]=f,S2[A+96|0]=1,J2[25296]||(X2[6329]=0,X2[6330]=0,X2[6328]=1065353216,X2[6331]=0,X2[6332]=0,X2[6334]=0,X2[6335]=0,X2[6333]=1065353216,X2[6336]=0,X2[6337]=0,X2[6341]=0,X2[6342]=0,X2[6340]=-1082130432,X2[6338]=1065353216,X2[6339]=0,X2[6343]=0,X2[6344]=0,X2[6346]=0,X2[6347]=0,X2[6345]=-1082130432,X2[6348]=0,X2[6349]=0,X2[6350]=-1082130432,X2[6351]=0,S2[25296]=1),e=v2(a,0,96),N2[X2[X2[A>>2]+76>>2]](A,25312,e,6),i=U2[A+52>>2],U2[A+64>>2]=U2[e+48>>2]-i,U2[A+80>>2]=i+U2[e>>2],U2[A+84>>2]=i+U2[e+20>>2],U2[A+88>>2]=i+U2[e+40>>2],U2[A+68>>2]=U2[e+68>>2]-i,U2[A+72>>2]=U2[e+88>>2]-i,K2=e+96|0;},TerrainShape_new:function(A,e,r,f,i,a){A|=0,e|=0,r|=0,f=P2(f),i=P2(i),a=P2(a);var n,b=0;return P2(0),X2[6258]=X2[6258]+1,(n=L2(151))&&(X2[(b=n+19&-16)-4>>2]=n),X2[b+20>>2]=0,X2[b+12>>2]=0,X2[b+16>>2]=0,X2[b+4>>2]=24,X2[b+8>>2]=0,X2[b+104>>2]=0,X2[b+100>>2]=r,U2[b+96>>2]=f,U2[b+84>>2]=a,U2[b+80>>2]=i,X2[b+76>>2]=e,X2[b+72>>2]=A,X2[b>>2]=14476,X2[b+124>>2]=1065353216,X2[b+128>>2]=0,X2[b+116>>2]=1065353216,X2[b+120>>2]=1065353216,X2[b+112>>2]=1,S2[0|(r=b+107|0)]=0,S2[r+1|0]=0,S2[r+2|0]=0,S2[r+3|0]=0,f=P2(e-1|0),U2[b+92>>2]=f,n=P2(A-1|0),U2[b+88>>2]=n,X2[b+68>>2]=0,U2[b+64>>2]=f*P2(.5),U2[b+60>>2]=P2(i+a)*P2(.5),U2[b+56>>2]=n*P2(.5),X2[b+52>>2]=0,U2[b+48>>2]=f,U2[b+44>>2]=a,U2[b+40>>2]=n,X2[b+32>>2]=0,X2[b+36>>2]=0,U2[b+28>>2]=i,(X2[b+24>>2]=0)|b;},DefaultCollisionConfiguration_static:function(){var A;return K2=A=K2-32|0,J2[27200]||(X2[24+A>>2]=0,X2[28+A>>2]=1,X2[16+A>>2]=4096,X2[20+A>>2]=4096,X2[8+A>>2]=0,t4(8+A|(X2[12+A>>2]=0)),h(75),S2[27200]=1),K2=32+A|0,27204;},_Znwm:R,Dispatcher_getNumManifolds:function(A){return 0|N2[X2[X2[(A|=0)>>2]+36>>2]](A);},Dispatcher_getManifoldByIndexInternal:function(A,e){return 0|N2[X2[X2[(A|=0)>>2]+40>>2]](A,e|=0);},CollisionDispatcher_new:function(){var A,e,r,f,i,a=0,n=0,b=0,t=0;for(K2=i=K2-32|0,A=R(10448),J2[27200]||(X2[24+i>>2]=0,X2[28+i>>2]=1,X2[16+i>>2]=4096,X2[20+i>>2]=4096,X2[8+i>>2]=0,t4(8+i|(X2[12+i>>2]=0)),h(75),S2[27200]=1),S2[A+24|0]=1,X2[A+4>>2]=2,X2[A>>2]=18764,X2[A+20>>2]=0,X2[A+10444>>2]=27204,X2[A+60>>2]=0,X2[A+28>>2]=15188,X2[A+12>>2]=0,X2[A+16>>2]=0,X2[A+64>>2]=76,r=A,f=0|N2[X2[X2[6801]+12>>2]](27204),X2[r+68>>2]=f,r=A,f=0|N2[X2[X2[6801]+8>>2]](27204),X2[r+72>>2]=f,t=A+5260|0;;){for(a=0,n=t;;)if(e=X2[A+10444>>2],r=n-5184|0,f=0|N2[X2[X2[e>>2]+16>>2]](e,b,a),X2[r>>2]=f,e=X2[A+10444>>2],r=n,f=0|N2[X2[X2[e>>2]+20>>2]](e,b,a),X2[r>>2]=f,n=n+4|0,36==(0|(a=a+1|0)))break;if(t=t+144|0,36==(0|(b=b+1|0)))break;}return K2=32+i|0,0|A;},DbvtBroadphase_new:function(){var A,e,r,f=0,i=0,a=0,n=0,b=0,t=0,o=0;K2=r=K2-32|0,A=R(176),S2[A+40|0]=1,X2[A>>2]=19460,X2[A+36>>2]=0,X2[A+28>>2]=0,X2[A+32>>2]=0,S2[A+80|0]=1,X2[A+20>>2]=0,X2[A+12>>2]=-1,X2[A+16>>2]=0,X2[A+4>>2]=0,X2[A+8>>2]=0,X2[A+76>>2]=0,X2[A+68>>2]=0,X2[A+72>>2]=0,S2[A+172|0]=1,X2[A+60>>2]=0,X2[A+52>>2]=-1,X2[A+56>>2]=0,X2[A+44>>2]=0,X2[A+48>>2]=0,X2[A+168>>2]=0,X2[A+160>>2]=0,X2[A+164>>2]=0,S2[A+153|0]=0,S2[A+154|0]=1,S2[A+152|0]=1,X2[A+124>>2]=0,X2[A+100>>2]=0,X2[A+104>>2]=0,X2[A+136>>2]=0,X2[A+128>>2]=0,X2[A+132>>2]=0,X2[A+116>>2]=10,X2[A+120>>2]=1,X2[A+108>>2]=1,X2[A+112>>2]=0,n=X2[6258],(f=L2(91))&&(X2[(i=f+19&-16)-4>>2]=f),S2[i+20|0]=1,X2[i>>2]=18960,X2[i+16>>2]=0,S2[i+44|0]=1,X2[i+24>>2]=0,X2[i+8>>2]=0,X2[i+12>>2]=0,X2[i+40>>2]=0,S2[i+64|0]=1,X2[i+32>>2]=0,X2[i+36>>2]=0,X2[i+60>>2]=0,X2[i+68>>2]=0,X2[i+52>>2]=0,X2[i+56>>2]=0,X2[6258]=n+2,(f=L2(51))&&(X2[(a=f+19&-16)-4>>2]=f),(f=X2[i+16>>2])&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[i+16>>2]=a,S2[i+20|0]=1,X2[i+12>>2]=2,k4(i),X2[A+148>>2]=0,X2[A+96>>2]=i,X2[A+140>>2]=0,X2[A+144>>2]=0,X2[(a=A+84|0)>>2]=0,X2[a+4>>2]=0,X2[A+92>>2]=0,a=X2[A+160>>2],X2[20+r>>2]=0,S2[24+r|0]=1,X2[12+r>>2]=0;A:{if(2<=((X2[16+r>>2]=0)|a)){for(i=a-1|0,a=36;;)if(f=X2[A+168>>2]+a|0,(b=X2[(n=f-4|0)>>2])&&J2[0|f]&&(X2[6259]=X2[6259]+1,q2(X2[b-4>>2])),X2[n>>2]=0,S2[0|f]=1,X2[(f=f-12|0)>>2]=0,a=a+20|(X2[f+4>>2]=0),!(i=i-1|0))break;}else if(1!=(0|a)){for(X2[A+164>>2]<=(i=0)&&(X2[6258]=X2[6258]+1,(f=L2(39))&&(X2[(i=f+19&-16)-4>>2]=f),(f=X2[A+168>>2])&&J2[A+172|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+168>>2]=i,S2[A+172|0]=1,X2[A+164>>2]=1),i=H2(a,20),a=a-1|0;;){if(f=X2[A+168>>2]+i|(b=0),X2[f+4>>2]=0,X2[f+8>>2]=0,X2[f+12>>2]=0,S2[f+16|0]=1,(0|(n=X2[4+(e=8+r|0)>>2]))<=0)X2[f+4>>2]=n;else {if(X2[6258]=X2[6258]+1,(t=L2(19+(n<<2)|0))&&(X2[(b=t+19&-16)-4>>2]=t),(t=X2[f+12>>2])&&(X2[6259]=X2[6259]+1,q2(X2[t-4>>2])),X2[f+12>>2]=b,S2[f+16|0]=1,X2[f+8>>2]=n,1!=((X2[b>>2]=t=0)|n))for(o=n-1|0,b=4;;)if(b=b+4|(X2[X2[f+12>>2]+b>>2]=0),!(o=o-1|0))break;for(X2[f+4>>2]=n,f=X2[f+12>>2];;)if(X2[f+t>>2]=X2[X2[12+e>>2]+t>>2],t=t+4|0,!(n=n-1|0))break;}if(i=i+20|0,!((f=a)>>>0<=(a=f+1|0)>>>0))break;}if(X2[A+160>>2]=1,!(a=X2[20+r>>2]))break A;if(!J2[24+r|0])break A;X2[6259]=X2[6259]+1,q2(X2[a-4>>2]);break A;}X2[A+160>>2]=1;}return K2=32+r|0,0|A;},SequentialImpulseConstraintSolver_new:function(){var A,e=0;return X2[6258]=X2[6258]+1,(A=L2(255))&&(X2[(e=A+19&-16)-4>>2]=A),S2[e+20|0]=1,X2[e>>2]=19888,X2[e+16>>2]=0,S2[e+40|0]=1,X2[e+8>>2]=0,X2[e+12>>2]=0,X2[e+36>>2]=0,S2[e+60|0]=1,X2[e+28>>2]=0,X2[e+32>>2]=0,X2[e+56>>2]=0,S2[e+80|0]=1,X2[e+48>>2]=0,X2[e+52>>2]=0,X2[e+76>>2]=0,S2[e+100|0]=1,X2[e+68>>2]=0,X2[e+72>>2]=0,X2[e+96>>2]=0,S2[e+120|0]=1,X2[e+88>>2]=0,X2[e+92>>2]=0,X2[e+116>>2]=0,S2[e+140|0]=1,X2[e+108>>2]=0,X2[e+112>>2]=0,X2[e+136>>2]=0,X2[e+128>>2]=0,X2[e+132>>2]=0,S2[e+160|0]=1,X2[e+156>>2]=0,X2[e+148>>2]=0,X2[e+152>>2]=0,S2[e+180|0]=1,X2[e+176>>2]=0,X2[e+168>>2]=0,X2[e+172>>2]=0,S2[e+208|0]=1,X2[e+232>>2]=0,X2[e+204>>2]=0,X2[e+196>>2]=0,X2[e+200>>2]=0,X2[e+224>>2]=0,X2[e+212>>2]=74,X2[e+216>>2]=73,X2[e+220>>2]=72,0|e;},CollisionWorld_get_m_useContinuous:function(A){return J2[(A|=0)+16|0];},CollisionWorld_set_m_useContinuous:function(A,e){S2[(A|=0)+16|0]=e|=0;},CollisionWorld_rayTest:function(A,e,r,f){N2[X2[X2[(A|=0)>>2]+32>>2]](A,e|=0,r|=0,f|=0);},CollisionWorld_getDispatchInfo:function(A){return (A|=0)+28|0;},CollisionWorld_addCollisionObject:function(A,e,r,f){N2[X2[X2[(A|=0)>>2]+36>>2]](A,e|=0,r|=0,f|=0);},CollisionWorld_removeCollisionObject:function(A,e){N2[X2[X2[(A|=0)>>2]+40>>2]](A,e|=0);},CollisionWorld_convexSweepTest:function(A,e,r,f,i,a){X4(A|=0,e|=0,r|=0,f|=0,i|=0,a=P2(a));},_ZTVN10__cxxabiv121__vmi_class_type_infoE:6092,DynamicsWorld_addAction:R1,DynamicsWorld_removeAction:O4,DynamicsWorld_getSolverInfo:v0,ccDiscreteDynamicsWorld_new:function(A,e,r){A|=0,e|=0,r|=0;var f,i,a=0,n=0;return K2=i=K2-32|0,X2[6258]=X2[6258]+1,(f=L2(367))&&(X2[(a=f+19&-16)-4>>2]=f),J2[27200]||(X2[24+i>>2]=0,X2[28+i>>2]=1,X2[16+i>>2]=4096,X2[20+i>>2]=4096,X2[8+i>>2]=0,t4(8+i|(X2[12+i>>2]=0)),h(75),S2[27200]=1),X2[a+16>>2]=0,S2[a+20|0]=1,X2[a+116>>2]=1101004800,X2[a+108>>2]=0,X2[(f=a)+100>>2]=1050253722,X2[f+104>>2]=1015580809,X2[f+92>>2]=1058642330,X2[f+96>>2]=1065353216,X2[f+88>>2]=0,X2[f+80>>2]=0,X2[f+84>>2]=0,S2[f+76|0]=1,X2[f+72>>2]=0,X2[f+68>>2]=e,X2[f+64>>2]=0,S2[f+60|0]=0,X2[f+56>>2]=1025758986,S2[f+54|0]=1,$[f+52>>1]=256,X2[f+48>>2]=0,S2[f+44|0]=1,X2[f+36>>2]=1,X2[f+40>>2]=1065353216,X2[f+28>>2]=0,X2[f+32>>2]=0,X2[f+24>>2]=A,X2[f+8>>2]=0,X2[f+12>>2]=0,X2[f+132>>2]=0,X2[f+136>>2]=1045220557,X2[f+124>>2]=1045220557,X2[f+128>>2]=1045220557,X2[f+112>>2]=10,X2[f+140>>2]=0,X2[f+144>>2]=1,X2[f+172>>2]=128,X2[f+148>>2]=-1121724662,X2[f+152>>2]=1036831949,X2[f+156>>2]=0,X2[f+160>>2]=1062836634,X2[f+176>>2]=1120403456,X2[f+180>>2]=1900671690,X2[f+184>>2]=0,X2[f+188>>2]=1045220557,X2[f+164>>2]=260,X2[f+168>>2]=2,X2[f+120>>2]=1065353216,X2[f>>2]=22464,S2[f+208|0]=1,X2[f+212>>2]=0,X2[f+204>>2]=0,X2[f+216>>2]=r,X2[f+196>>2]=0,X2[f+200>>2]=0,S2[f+240|0]=1,S2[f+260|0]=1,X2[f+236>>2]=0,X2[f+228>>2]=0,X2[f+232>>2]=0,X2[f+256>>2]=0,X2[f+248>>2]=0,X2[f+252>>2]=0,X2[f+264>>2]=0,X2[f+268>>2]=-1054867456,$[f+290>>1]=0,X2[(e=f+280|0)>>2]=0,X2[e+4>>2]=0,X2[f+272>>2]=0,X2[f+276>>2]=0,S2[f+308|0]=1,S2[f+336|0]=1,X2[f+304>>2]=0,S2[f+316|0]=1,X2[f+296>>2]=0,X2[f+300>>2]=0,X2[f+312>>2]=0,X2[f+332>>2]=0,X2[f+340>>2]=0,X2[f+324>>2]=0,X2[f+328>>2]=0,e=r?0:(X2[6258]=X2[6258]+1,r=0,(e=L2(255))&&(X2[(r=e+19&-16)-4>>2]=e),S2[r+20|0]=1,X2[r>>2]=19888,X2[r+16>>2]=0,S2[r+40|0]=1,X2[r+8>>2]=0,X2[r+12>>2]=0,X2[r+36>>2]=0,S2[r+60|0]=1,X2[r+28>>2]=0,X2[r+32>>2]=0,X2[r+56>>2]=0,S2[r+80|0]=1,X2[r+48>>2]=0,X2[r+52>>2]=0,X2[r+76>>2]=0,S2[r+100|0]=1,X2[r+68>>2]=0,X2[r+72>>2]=0,X2[r+96>>2]=0,S2[r+120|0]=1,X2[r+88>>2]=0,X2[r+92>>2]=0,X2[r+116>>2]=0,X2[r+168>>2]=0,X2[r+172>>2]=0,X2[r+148>>2]=0,X2[r+152>>2]=0,X2[r+128>>2]=0,X2[r+132>>2]=0,X2[r+108>>2]=0,X2[r+112>>2]=0,X2[r+196>>2]=0,X2[r+200>>2]=0,S2[r+140|0]=1,X2[r+136>>2]=0,S2[r+160|0]=1,X2[r+156>>2]=0,S2[r+180|0]=1,X2[r+176>>2]=0,S2[r+208|0]=1,X2[r+232>>2]=0,X2[r+204>>2]=0,X2[r+224>>2]=0,X2[r+212>>2]=74,X2[r+216>>2]=73,X2[r+220>>2]=72,X2[a+216>>2]=r,1),S2[f+289|0]=e,e=X2[6258],(r=L2(87))&&(X2[(n=r+19&-16)-4>>2]=r),S2[n+20|0]=1,X2[n>>2]=22256,X2[n+16>>2]=0,S2[n+40|0]=1,X2[n+8>>2]=0,X2[n+12>>2]=0,X2[n+36>>2]=0,S2[n+60|0]=1,X2[n+28>>2]=0,X2[n+32>>2]=0,X2[n+56>>2]=0,S2[n+64|0]=1,X2[n+48>>2]=0,X2[n+52>>2]=0,S2[a+288|0]=1,X2[a+220>>2]=n,X2[6258]=e+2,r=0,(e=L2(107))&&(X2[(r=e+19&-16)-4>>2]=e),X2[r>>2]=22660,X2[r+52>>2]=0,X2[r+56>>2]=0,X2[r+72>>2]=0,X2[r+76>>2]=0,X2[r+12>>2]=0,X2[r+16>>2]=0,X2[r+32>>2]=0,X2[r+36>>2]=0,S2[r+44|0]=1,X2[r+24>>2]=A,X2[r+20>>2]=0,X2[r+4>>2]=0,X2[r+40>>2]=0,S2[r+64|0]=1,X2[r+60>>2]=0,S2[r+84|0]=1,X2[r+80>>2]=0,X2[a+344>>2]=23144,X2[a>>2]=22948,X2[r+8>>2]=X2[a+216>>2],X2[a+212>>2]=r,X2[a+56>>2]=1008981770,A=X2[a+68>>2],A=0|N2[X2[X2[A>>2]+36>>2]](A),N2[X2[X2[A>>2]+44>>2]](A,a+344|0),K2=32+i|0,0|a;},DynamicsWorld_setGravity:function(A,e){N2[X2[X2[(A|=0)>>2]+72>>2]](A,e|=0);},DynamicsWorld_addRigidBody:function(A,e,r,f){N2[X2[X2[(A|=0)>>2]+88>>2]](A,e|=0,r|=0,f|=0);},DynamicsWorld_removeRigidBody:function(A,e){N2[X2[X2[(A|=0)>>2]+92>>2]](A,e|=0);},DynamicsWorld_addConstraint:function(A,e,r){N2[X2[X2[(A|=0)>>2]+56>>2]](A,e|=0,r|=0);},DynamicsWorld_removeConstraint:function(A,e){N2[X2[X2[(A|=0)>>2]+60>>2]](A,e|=0);},DynamicsWorld_stepSimulation:function(A,e,r,f){A|=0,e=P2(e),r|=0,f=P2(f),N2[X2[X2[A>>2]+52>>2]](A,e,r,f);},ccDiscreteDynamicsWorld_setAllowSleep:function(A,e){S2[26508]=1^(e|=0);},TypedConstraint_getFixedBody:function(){var A,e;return K2=e=K2-144|0,J2[26517]||(X2[6669]=0,X2[6670]=0,X2[6667]=0,X2[6668]=0,X2[6665]=0,X2[6666]=0,X2[6663]=0,X2[6664]=0,X2[6677]=0,X2[6678]=0,X2[6675]=0,X2[6676]=1566444395,X2[6673]=1065353216,X2[6674]=0,X2[6671]=1065353216,X2[6672]=1065353216,X2[6679]=0,X2[6680]=0,S2[26820]=1,X2[6699]=0,X2[6700]=0,X2[6697]=1065353216,X2[6698]=0,X2[6695]=-1,X2[6696]=-1,X2[6693]=1,X2[6694]=0,X2[6691]=1036831949,X2[6692]=1176256512,X2[6689]=0,X2[6690]=0,X2[6687]=1056964608,X2[6688]=0,X2[6685]=1,X2[6686]=0,X2[6683]=-1,X2[6684]=-1,X2[6681]=1,X2[6682]=-1,X2[6702]=0,X2[6703]=0,X2[6631]=1065353216,X2[6632]=0,X2[6633]=0,X2[6634]=0,X2[6635]=0,X2[6636]=1065353216,X2[6637]=0,X2[6638]=0,X2[6639]=0,X2[6640]=0,X2[6641]=1065353216,X2[6642]=0,X2[6643]=0,X2[6644]=0,X2[6645]=0,X2[6646]=0,X2[6647]=1065353216,X2[6648]=0,X2[6649]=0,X2[6650]=0,X2[6651]=0,X2[6652]=1065353216,X2[6653]=0,X2[6654]=0,X2[6655]=0,X2[6656]=0,X2[6706]=0,X2[6704]=0,X2[6658]=0,X2[6659]=0,X2[6657]=1065353216,X2[6660]=0,X2[6661]=0,S2[27080]=1,X2[6630]=19804,X2[6767]=0,X2[6768]=0,X2[6662]=0,X2[6769]=0,X2[(A=80+e|0)>>2]=0,X2[4+A>>2]=0,X2[(A=88+e|0)>>2]=0,X2[4+A>>2]=0,X2[96+e>>2]=0,X2[(A=12+e|0)>>2]=0,X2[4+A>>2]=0,X2[(A=20+e|0)>>2]=0,X2[4+A>>2]=0,X2[28+e>>2]=1065353216,X2[(A=32+e|0)>>2]=0,X2[4+A>>2]=0,X2[(A=40+e|0)>>2]=0,X2[4+A>>2]=0,X2[48+e>>2]=1065353216,X2[72+e>>2]=0,X2[76+e>>2]=0,X2[e>>2]=0,X2[4+e>>2]=0,X2[136+e>>2]=1008981770,X2[140+e>>2]=1008981770,X2[128+e>>2]=1000593162,X2[132+e>>2]=1008981770,S2[124+e|0]=0,X2[116+e>>2]=1061997773,X2[120+e>>2]=1065353216,X2[108+e>>2]=0,X2[112+e>>2]=0,X2[100+e>>2]=1056964608,X2[104+e>>2]=0,X2[8+e>>2]=1065353216,X2[68+e>>2]=0,X2[(A=60+e|0)>>2]=0,X2[4+A>>2]=0,X2[(A=52+e|0)>>2]=0,X2[4+A>>2]=0,g4(26520,e),h(77),S2[26517]=1),X2[6744]=0,X2[6745]=0,X2[6746]=0,X2[6747]=0,X2[6681]=1|X2[6681],U2[6738]=U2[6742]*P2(0),U2[6737]=U2[6741]*P2(0),U2[6736]=U2[6740]*P2(0),U2[6787]=U2[6734]*P2(0),U2[6786]=U2[6733]*P2(0),U2[6785]=U2[6732]*P2(0),X2[6731]=0,X2[6739]=0,X2[6788]=0,K2=144+e|0,26520;},HingeConstraint_new:function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a=0;return X2[6258]=X2[6258]+1,(i=L2(787))&&(X2[(a=i+19&-16)-4>>2]=i),X2[a+44>>2]=0,X2[a+36>>2]=0,X2[a+40>>2]=1028443341,X2[a+32>>2]=e,X2[a+28>>2]=A,X2[a+24>>2]=-1,$[a+20>>1]=1,X2[a+12>>2]=-1,X2[a+16>>2]=2139095039,X2[a+4>>2]=4,X2[a+8>>2]=-1,X2[a>>2]=23432,i=X2[(e=r+8|0)+4>>2],X2[(A=a+560|0)>>2]=X2[e>>2],X2[A+4>>2]=i,A=X2[r+4>>2],X2[a+552>>2]=X2[r>>2],X2[a+556>>2]=A,i=X2[(e=r+24|0)+4>>2],X2[(A=a+576|0)>>2]=X2[e>>2],X2[A+4>>2]=i,A=X2[r+20>>2],X2[a+568>>2]=X2[r+16>>2],X2[a+572>>2]=A,i=X2[(e=r+40|0)+4>>2],X2[(A=a+592|0)>>2]=X2[e>>2],X2[A+4>>2]=i,A=X2[r+36>>2],X2[a+584>>2]=X2[r+32>>2],X2[a+588>>2]=A,i=X2[(e=r+56|0)+4>>2],X2[(A=a+608|0)>>2]=X2[e>>2],X2[A+4>>2]=i,A=X2[r+52>>2],X2[a+600>>2]=X2[r+48>>2],X2[a+604>>2]=A,r=X2[(e=f+8|0)+4>>2],X2[(A=a+624|0)>>2]=X2[e>>2],X2[A+4>>2]=r,A=X2[f+4>>2],X2[a+616>>2]=X2[f>>2],X2[a+620>>2]=A,r=X2[(e=f+24|0)+4>>2],X2[(A=a+640|0)>>2]=X2[e>>2],X2[A+4>>2]=r,A=X2[f+20>>2],X2[a+632>>2]=X2[f+16>>2],X2[a+636>>2]=A,r=X2[(e=f+40|0)+4>>2],X2[(A=a+656|0)>>2]=X2[e>>2],X2[A+4>>2]=r,A=X2[f+36>>2],X2[a+648>>2]=X2[f+32>>2],X2[a+652>>2]=A,r=X2[(e=f+56|0)+4>>2],X2[(A=a+672|0)>>2]=X2[e>>2],X2[A+4>>2]=r,A=X2[f+52>>2],X2[a+664>>2]=X2[f+48>>2],X2[a+668>>2]=A,X2[a+704>>2]=1065353216,X2[a+696>>2]=1063675494,X2[a+700>>2]=1050253722,X2[a+688>>2]=0,X2[a+692>>2]=-1082130432,S2[a+716|0]=0,X2[a+708>>2]=0,X2[a+712>>2]=0,S2[a+740|0]=0,X2[a+736>>2]=16777216,X2[a+764>>2]=0,X2[(A=a+756|0)>>2]=0,X2[A+4>>2]=0,X2[a+748>>2]=0,X2[a+752>>2]=0,X2[a+732>>2]=1065353216,0|a;},HingeConstraint_setFrames:function(A,e,r){r|=0;var f,i,a=X2[(e|=0)+4>>2];X2[(A|=0)+552>>2]=X2[e>>2],X2[A+556>>2]=a,i=X2[4+(f=e+8|0)>>2],X2[(a=A+560|0)>>2]=X2[f>>2],X2[4+a>>2]=i,i=X2[4+(f=e+24|0)>>2],X2[(a=A+576|0)>>2]=X2[f>>2],X2[4+a>>2]=i,f=X2[e+20>>2],X2[(a=A+568|0)>>2]=X2[e+16>>2],X2[4+a>>2]=f,i=X2[4+(f=e+40|0)>>2],X2[(a=A+592|0)>>2]=X2[f>>2],X2[4+a>>2]=i,f=X2[e+36>>2],X2[(a=A+584|0)>>2]=X2[e+32>>2],X2[4+a>>2]=f,i=X2[4+(f=e+56|0)>>2],X2[(a=A+608|0)>>2]=X2[f>>2],X2[4+a>>2]=i,f=X2[e+52>>2],X2[(a=A+600|0)>>2]=X2[e+48>>2],X2[4+a>>2]=f,f=X2[4+(a=r+8|0)>>2],X2[(e=A+624|0)>>2]=X2[a>>2],X2[e+4>>2]=f,e=X2[r+4>>2],X2[A+616>>2]=X2[r>>2],X2[A+620>>2]=e,a=X2[r+20>>2],X2[(e=A+632|0)>>2]=X2[r+16>>2],X2[e+4>>2]=a,f=X2[4+(a=r+24|0)>>2],X2[(e=A+640|0)>>2]=X2[a>>2],X2[e+4>>2]=f,a=X2[r+36>>2],X2[(e=A+648|0)>>2]=X2[r+32>>2],X2[e+4>>2]=a,f=X2[4+(a=r+40|0)>>2],X2[(e=A+656|0)>>2]=X2[a>>2],X2[e+4>>2]=f,f=X2[4+(a=r+56|0)>>2],X2[(e=A+672|0)>>2]=X2[a>>2],X2[e+4>>2]=f,a=X2[r+52>>2],X2[(e=A+664|0)>>2]=X2[r+48>>2],X2[e+4>>2]=a,N2[X2[X2[A>>2]+8>>2]](A);},P2PConstraint_new:function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a=0;return X2[6258]=X2[6258]+1,(i=L2(379))&&(X2[(a=i+19&-16)-4>>2]=i),X2[a+44>>2]=0,X2[a+36>>2]=0,X2[a+40>>2]=1028443341,X2[a+32>>2]=e,X2[a+28>>2]=A,X2[a+24>>2]=-1,$[a+20>>1]=1,X2[a+12>>2]=-1,X2[a+16>>2]=2139095039,X2[a+4>>2]=3,X2[a+8>>2]=-1,X2[a>>2]=23548,A=X2[r+4>>2],X2[a+300>>2]=X2[r>>2],X2[a+304>>2]=A,r=X2[(e=r+8|0)+4>>2],X2[(A=a+308|0)>>2]=X2[e>>2],X2[A+4>>2]=r,A=X2[f+4>>2],X2[a+316>>2]=X2[f>>2],X2[a+320>>2]=A,r=X2[(e=f+8|0)+4>>2],X2[(A=a+324|0)>>2]=X2[e>>2],X2[A+4>>2]=r,X2[a+332>>2]=0,S2[a+344|0]=0,X2[a+348>>2]=1050253722,X2[a+352>>2]=1065353216,(X2[a+356>>2]=0)|a;},P2PConstraint_setPivotA:function(A,e){var r=X2[(e|=0)+4>>2];X2[(A|=0)+300>>2]=X2[e>>2],X2[A+304>>2]=r,r=X2[(e=e+8|0)+4>>2],X2[(A=A+308|0)>>2]=X2[e>>2],X2[A+4>>2]=r;},P2PConstraint_setPivotB:function(A,e){var r=X2[(e|=0)+4>>2];X2[(A|=0)+316>>2]=X2[e>>2],X2[A+320>>2]=r,r=X2[(e=e+8|0)+4>>2],X2[(A=A+324|0)>>2]=X2[e>>2],X2[A+4>>2]=r;},FixedConstraint_new:function(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i,a=0;return X2[6258]=X2[6258]+1,(i=L2(1479))&&(X2[(a=i+19&-16)-4>>2]=i),X2[a+44>>2]=0,X2[a+36>>2]=0,X2[a+40>>2]=1028443341,X2[a+32>>2]=e,X2[a+28>>2]=A,X2[a+24>>2]=-1,$[a+20>>1]=1,X2[a+12>>2]=-1,X2[a+16>>2]=2139095039,X2[a+4>>2]=12,X2[a+8>>2]=-1,X2[a>>2]=23676,i=X2[(e=r+8|0)+4>>2],X2[(A=a+56|0)>>2]=X2[e>>2],X2[A+4>>2]=i,A=X2[r+4>>2],X2[a+48>>2]=X2[r>>2],X2[a+52>>2]=A,i=X2[(e=r+24|0)+4>>2],X2[(A=a+72|0)>>2]=X2[e>>2],X2[A+4>>2]=i,A=X2[r+20>>2],X2[a+64>>2]=X2[r+16>>2],X2[a+68>>2]=A,i=X2[(e=r+40|0)+4>>2],X2[(A=a+88|0)>>2]=X2[e>>2],X2[A+4>>2]=i,A=X2[r+36>>2],X2[a+80>>2]=X2[r+32>>2],X2[a+84>>2]=A,i=X2[(e=r+56|0)+4>>2],X2[(A=a+104|0)>>2]=X2[e>>2],X2[A+4>>2]=i,A=X2[r+52>>2],X2[a+96>>2]=X2[r+48>>2],X2[a+100>>2]=A,r=X2[(e=f+8|0)+4>>2],X2[(A=a+120|0)>>2]=X2[e>>2],X2[A+4>>2]=r,A=X2[f+4>>2],X2[a+112>>2]=X2[f>>2],X2[a+116>>2]=A,r=X2[(e=f+24|0)+4>>2],X2[(A=a+136|0)>>2]=X2[e>>2],X2[A+4>>2]=r,A=X2[f+20>>2],X2[a+128>>2]=X2[f+16>>2],X2[a+132>>2]=A,r=X2[(e=f+40|0)+4>>2],X2[(A=a+152|0)>>2]=X2[e>>2],X2[A+4>>2]=r,A=X2[f+36>>2],X2[a+144>>2]=X2[f+32>>2],X2[a+148>>2]=A,r=X2[(e=f+56|0)+4>>2],X2[(A=a+168|0)>>2]=X2[e>>2],X2[A+4>>2]=r,A=X2[f+52>>2],X2[a+160>>2]=X2[f+48>>2],X2[a+164>>2]=A,X2[(A=a+720|0)>>2]=0,X2[A+4>>2]=0,X2[(A=a+712|0)>>2]=0,X2[A+4>>2]=0,X2[(A=e=a+704|0)>>2]=0,X2[A+4>>2]=0,X2[(A=r=a+696|0)>>2]=0,X2[A+4>>2]=0,X2[(A=f=a+688|0)>>2]=0,X2[A+4>>2]=0,X2[a+680>>2]=0,X2[a+684>>2]=0,X2[a+736>>2]=1045220557,X2[a+728>>2]=1045220557,X2[a+732>>2]=1045220557,X2[a+756>>2]=0,X2[(A=a+748|0)>>2]=0,X2[A+4>>2]=0,X2[a+740>>2]=0,X2[a+744>>2]=0,X2[a+768>>2]=1063675494,X2[a+760>>2]=1063675494,X2[a+764>>2]=1063675494,X2[a+812>>2]=0,X2[(A=a+804|0)>>2]=0,X2[A+4>>2]=0,X2[a+828>>2]=0,X2[(A=a+820|0)>>2]=0,X2[A+4>>2]=0,S2[a+838|0]=0,S2[0|(A=a+836|0)]=0,S2[A+1|0]=0,X2[a+848>>2]=0,X2[(A=a+840|0)>>2]=0,X2[A+4>>2]=0,S2[a+858|0]=0,S2[0|(A=a+856|0)]=0,S2[A+1|0]=0,X2[a+868>>2]=0,X2[(A=a+860|0)>>2]=0,X2[A+4>>2]=0,X2[a+884>>2]=0,X2[(A=a+876|0)>>2]=0,X2[A+4>>2]=0,X2[a+900>>2]=0,X2[(A=a+892|0)>>2]=0,X2[A+4>>2]=0,S2[0|(A=a+793|0)]=0,S2[A+1|0]=0,S2[A+2|0]=0,S2[A+3|0]=0,S2[A+4|0]=0,S2[A+5|0]=0,S2[A+6|0]=0,S2[A+7|0]=0,X2[(A=a+788|0)>>2]=0,X2[A+4>>2]=0,X2[(A=a+780|0)>>2]=0,X2[A+4>>2]=0,X2[a+772>>2]=0,X2[a+776>>2]=0,X2[a+964>>2]=0,X2[(A=a+956|0)>>2]=0,X2[A+4>>2]=0,X2[(A=a+948|0)>>2]=0,X2[A+4>>2]=0,X2[(A=a+940|0)>>2]=0,X2[A+4>>2]=0,X2[(A=a+932|0)>>2]=0,X2[A+4>>2]=0,X2[(A=a+924|0)>>2]=0,X2[A+4>>2]=0,X2[(A=a+916|0)>>2]=0,X2[A+4>>2]=0,X2[a+908>>2]=0,X2[a+912>>2]=0,S2[a+1032|0]=0,X2[a+1028>>2]=0,S2[a+1024|0]=0,X2[a+1020>>2]=0,S2[a+1016|0]=0,X2[a+1012>>2]=0,S2[a+1008|0]=0,X2[a+1e3>>2]=0,X2[a+1004>>2]=1036831949,S2[a+996|0]=0,X2[a+992>>2]=0,X2[a+984>>2]=0,X2[a+988>>2]=1063675494,X2[a+976>>2]=0,X2[a+980>>2]=1045220557,X2[a+968>>2]=1065353216,X2[a+972>>2]=-1082130432,X2[a+1052>>2]=0,X2[(A=a+1044|0)>>2]=0,X2[A+4>>2]=0,X2[a+1036>>2]=0,X2[a+1040>>2]=0,S2[a+1120|0]=0,X2[a+1116>>2]=0,S2[a+1112|0]=0,X2[a+1108>>2]=0,S2[a+1104|0]=0,X2[a+1100>>2]=0,S2[a+1096|0]=0,X2[a+1088>>2]=0,X2[a+1092>>2]=1036831949,S2[a+1084|0]=0,X2[a+1080>>2]=0,X2[a+1072>>2]=0,X2[a+1076>>2]=1063675494,X2[a+1064>>2]=0,X2[a+1068>>2]=1045220557,X2[a+1056>>2]=1065353216,X2[a+1060>>2]=-1082130432,X2[a+1140>>2]=0,X2[(A=a+1132|0)>>2]=0,X2[A+4>>2]=0,X2[a+1124>>2]=0,X2[a+1128>>2]=0,X2[a+1456>>2]=0,S2[a+1208|0]=0,X2[a+1204>>2]=0,S2[a+1200|0]=0,X2[a+1196>>2]=0,S2[a+1192|0]=0,X2[a+1188>>2]=0,S2[a+1184|0]=0,X2[a+1176>>2]=0,X2[a+1180>>2]=1036831949,S2[a+1172|0]=0,X2[a+1168>>2]=0,X2[a+1160>>2]=0,X2[a+1164>>2]=1063675494,X2[a+1152>>2]=0,X2[a+1156>>2]=1045220557,X2[a+1144>>2]=1065353216,X2[a+1148>>2]=-1082130432,X2[(A=a+1228|0)>>2]=0,X2[A+4>>2]=0,X2[(A=a+1220|0)>>2]=0,X2[A+4>>2]=0,X2[a+1212>>2]=0,X2[a+1216>>2]=0,$4(a,X2[a+28>>2]+4|0,X2[a+32>>2]+4|0),X2[a>>2]=23836,X2[a+1144>>2]=0,X2[a+1148>>2]=0,X2[a+1056>>2]=0,X2[a+1060>>2]=0,X2[a+968>>2]=0,X2[a+972>>2]=0,X2[a+680>>2]=0,X2[a+684>>2]=0,X2[f>>2]=0,X2[f+4>>2]=0,X2[r>>2]=0,X2[r+4>>2]=0,X2[e>>2]=0,(X2[e+4>>2]=0)|a;},FixedConstraint_setFrames:function(A,e,r){r|=0;var f,i,a=X2[(e|=0)+4>>2];X2[(A|=0)+48>>2]=X2[e>>2],X2[A+52>>2]=a,i=X2[4+(f=e+8|0)>>2],X2[(a=A+56|0)>>2]=X2[f>>2],X2[4+a>>2]=i,i=X2[4+(f=e+24|0)>>2],X2[(a=A+72|0)>>2]=X2[f>>2],X2[4+a>>2]=i,f=X2[e+20>>2],X2[(a=A- -64|0)>>2]=X2[e+16>>2],X2[4+a>>2]=f,i=X2[4+(f=e+40|0)>>2],X2[(a=A+88|0)>>2]=X2[f>>2],X2[4+a>>2]=i,f=X2[e+36>>2],X2[(a=A+80|0)>>2]=X2[e+32>>2],X2[4+a>>2]=f,i=X2[4+(f=e+56|0)>>2],X2[(a=A+104|0)>>2]=X2[f>>2],X2[4+a>>2]=i,f=X2[e+52>>2],X2[(a=A+96|0)>>2]=X2[e+48>>2],X2[4+a>>2]=f,f=X2[4+(a=r+8|0)>>2],X2[(e=A+120|0)>>2]=X2[a>>2],X2[e+4>>2]=f,e=X2[r+4>>2],X2[A+112>>2]=X2[r>>2],X2[A+116>>2]=e,a=X2[r+20>>2],X2[(e=A+128|0)>>2]=X2[r+16>>2],X2[e+4>>2]=a,f=X2[4+(a=r+24|0)>>2],X2[(e=A+136|0)>>2]=X2[a>>2],X2[e+4>>2]=f,a=X2[r+36>>2],X2[(e=A+144|0)>>2]=X2[r+32>>2],X2[e+4>>2]=a,f=X2[4+(a=r+40|0)>>2],X2[(e=A+152|0)>>2]=X2[a>>2],X2[e+4>>2]=f,f=X2[4+(a=r+56|0)>>2],X2[(e=A+168|0)>>2]=X2[a>>2],X2[e+4>>2]=f,a=X2[r+52>>2],X2[(e=A+160|0)>>2]=X2[r+48>>2],X2[e+4>>2]=a,N2[X2[X2[A>>2]+8>>2]](A),$4(A,X2[A+28>>2]+4|0,X2[A+32>>2]+4|0);},TypedConstraint_setMaxImpulseThreshold:function(A,e){A|=0,e=P2(e),U2[A+16>>2]=e;},_malloc:function(A){return 0|L2(A|=0);},_free:function(A){q2(A|=0);},_read_f32:f6,_write_f32:function(A,e){A|=0,e=P2(e),U2[A>>2]=e;},Vec3_new:function(A,e,r){A=P2(A),e=P2(e),r=P2(r);var f,i=0;return X2[6258]=X2[6258]+1,(f=L2(35))&&(X2[(i=f+19&-16)-4>>2]=f),X2[i+12>>2]=0,U2[i+8>>2]=r,U2[i+4>>2]=e,U2[i>>2]=A,0|i;},Vec3_set:function(A,e,r,f){A|=0,e=P2(e),r=P2(r),f=P2(f),X2[A+12>>2]=0,U2[A+8>>2]=f,U2[A+4>>2]=r,U2[A>>2]=e;},Vec3_x:f6,Vec3_y:i6,Vec3_z:a6,Quat_new:function(A,e,r,f){A=P2(A),e=P2(e),r=P2(r),f=P2(f);var i=R(16);return U2[i+12>>2]=f,U2[i+8>>2]=r,U2[i+4>>2]=e,U2[i>>2]=A,0|i;},Quat_set:n6,Quat_x:f6,Quat_y:i6,Quat_z:a6,Quat_w:function(A){return P2(U2[(A|=0)+12>>2]);},Transform_new:function(){var A,e=R(64);return X2[(A=e)+4>>2]=0,X2[A+8>>2]=0,X2[A>>2]=1065353216,X2[A+24>>2]=0,X2[A+28>>2]=0,X2[A+20>>2]=1065353216,X2[A+44>>2]=0,X2[A+48>>2]=0,X2[A+40>>2]=1065353216,X2[(A=A+12|0)>>2]=0,X2[4+A>>2]=0,X2[(A=e+32|0)>>2]=0,X2[4+A>>2]=0,X2[(A=e+52|0)>>2]=0,X2[4+A>>2]=0,(X2[e+60>>2]=0)|e;},Transform_setIdentity:function(A){var e;X2[(A|=0)+4>>2]=0,X2[A+8>>2]=0,X2[A>>2]=1065353216,X2[(e=A+12|0)>>2]=0,X2[4+e>>2]=0,X2[(e=A+24|0)>>2]=0,X2[4+e>>2]=0,X2[A+20>>2]=1065353216,X2[(e=A+32|0)>>2]=0,X2[4+e>>2]=0,X2[(e=A+44|0)>>2]=0,X2[4+e>>2]=0,X2[A+40>>2]=1065353216,X2[(e=A+52|0)>>2]=0,X2[4+e>>2]=0,X2[A+60>>2]=0;},Transform_setOrigin:function(A,e){var r=X2[(e|=0)+4>>2];X2[(A|=0)+48>>2]=X2[e>>2],X2[A+52>>2]=r,r=X2[(e=e+8|0)+4>>2],X2[(A=A+56|0)>>2]=X2[e>>2],X2[A+4>>2]=r;},Transform_setRotation:function(A,e){A|=0,e|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var r,f,i,a,n,b,t,o=U2[e+12>>2],c=U2[e+8>>2],k=U2[e>>2],e=U2[e+4>>2];X2[A+44>>2]=0,X2[A+28>>2]=0,X2[A+12>>2]=0,r=P2(P2(2)/P2(P2(P2(P2(k*k)+P2(e*e))+P2(c*c))+P2(o*o))),i=P2(c*r),f=P2(e*i),n=P2(k*r),b=P2(o*n),U2[A+36>>2]=f+b,t=P2(k*i),r=P2(e*r),a=P2(o*r),U2[A+32>>2]=t-a,U2[A+24>>2]=f-b,f=P2(k*r),o=P2(o*i),U2[A+16>>2]=f+o,U2[A+8>>2]=t+a,U2[A+4>>2]=f-o,k=P2(k*n),o=P2(e*r),U2[A+40>>2]=P2(1)-P2(k+o),a=k,k=P2(c*i),U2[A+20>>2]=P2(1)-P2(a+k),U2[A>>2]=P2(1)-P2(o+k);},Transform_getOrigin:d0,Transform_getRotation:function(A,e){return Q4(A|=0,e|=0),0|e;},Vec3_array_at:function(A,e){return X2[(A|=0)+12>>2]+((e|=0)<<4)|0;},int_array_size:function(A){return X2[(A|=0)+4>>2];},int_array_at:function(A,e){return X2[X2[(A|=0)+12>>2]+((e|=0)<<2)>>2];},ccMaterial_new:function(){var A=R(16);return X2[A+8>>2]=1036831949,X2[A+12>>2]=1036831949,X2[A>>2]=1036831949,X2[A+4>>2]=1058642330,0|A;},ccMaterial_set:n6,MotionState_getWorldTransform:E0,MotionState_setWorldTransform:function(A,e){N2[X2[X2[(A|=0)>>2]+12>>2]](A,e|=0);},DefaultMotionState_new:function(A){A|=0;var e,r,f,i,a,n,b=0,t=0;return X2[6258]=X2[6258]+1,(t=L2(219))&&(X2[(b=t+19&-16)-4>>2]=t),1&S2[27292]||(1&S2[27296]||(X2[6826]=0,X2[6827]=0,X2[6825]=1065353216,X2[6828]=0,X2[6829]=0,X2[6831]=0,X2[6832]=0,X2[6830]=1065353216,X2[6833]=0,X2[6834]=0,X2[6835]=1065353216,X2[6836]=0,X2[6824]=1),X2[6849]=0,X2[6850]=0,X2[6851]=0,X2[6852]=0,X2[6823]=1,t=X2[6828],X2[6839]=X2[6827],X2[6840]=t,t=X2[6826],X2[6837]=X2[6825],X2[6838]=t,t=X2[6830],X2[6841]=X2[6829],X2[6842]=t,t=X2[6832],X2[6843]=X2[6831],X2[6844]=t,t=X2[6834],X2[6845]=X2[6833],X2[6846]=t,t=X2[6836],X2[6847]=X2[6835],X2[6848]=t),X2[b>>2]=23956,a=X2[(t=A+8|0)+4>>2],X2[(r=b+12|0)>>2]=X2[t>>2],X2[4+r>>2]=a,r=X2[A+4>>2],X2[b+4>>2]=X2[A>>2],X2[b+8>>2]=r,e=X2[4+(r=A+24|0)>>2],X2[(i=b+28|0)>>2]=X2[r>>2],X2[4+i>>2]=e,i=X2[A+20>>2],X2[b+20>>2]=X2[A+16>>2],X2[b+24>>2]=i,i=X2[A+36>>2],X2[b+36>>2]=X2[A+32>>2],X2[b+40>>2]=i,f=X2[4+(i=A+40|0)>>2],X2[(a=b+44|0)>>2]=X2[i>>2],X2[4+a>>2]=f,n=X2[4+(a=A+56|0)>>2],X2[(e=b+60|0)>>2]=X2[a>>2],X2[4+e>>2]=n,e=X2[A+52>>2],X2[b+52>>2]=X2[A+48>>2],X2[b+56>>2]=e,e=X2[6838],X2[b+68>>2]=X2[6837],X2[b+72>>2]=e,f=X2[6840],X2[(e=b+76|0)>>2]=X2[6839],X2[4+e>>2]=f,f=X2[6844],X2[(e=b+92|0)>>2]=X2[6843],X2[4+e>>2]=f,e=X2[6842],X2[b+84>>2]=X2[6841],X2[b+88>>2]=e,f=X2[6848],X2[(e=b+108|0)>>2]=X2[6847],X2[4+e>>2]=f,e=X2[6846],X2[b+100>>2]=X2[6845],X2[b+104>>2]=e,f=X2[6852],X2[(e=b+124|0)>>2]=X2[6851],X2[4+e>>2]=f,e=X2[6850],X2[b+116>>2]=X2[6849],X2[b+120>>2]=e,f=X2[t+4>>2],X2[(e=b+140|0)>>2]=X2[t>>2],X2[4+e>>2]=f,t=X2[A+4>>2],X2[b+132>>2]=X2[A>>2],X2[b+136>>2]=t,e=X2[4+r>>2],X2[(t=b+156|0)>>2]=X2[r>>2],X2[t+4>>2]=e,t=X2[A+20>>2],X2[b+148>>2]=X2[A+16>>2],X2[b+152>>2]=t,r=X2[4+i>>2],X2[(t=b+172|0)>>2]=X2[i>>2],X2[t+4>>2]=r,t=X2[A+36>>2],X2[b+164>>2]=X2[A+32>>2],X2[b+168>>2]=t,r=X2[4+a>>2],X2[(t=b+188|0)>>2]=X2[a>>2],X2[t+4>>2]=r,t=X2[A+52>>2],X2[b+180>>2]=X2[A+48>>2],X2[b+184>>2]=t,(X2[b+196>>2]=0)|b;},ccMotionState_new:function(A,e){A|=0,e|=0;var r,f,i=R(72);return X2[i+4>>2]=A,X2[i>>2]=24040,f=X2[4+(r=e+8|0)>>2],X2[(A=i+16|0)>>2]=X2[r>>2],X2[A+4>>2]=f,A=X2[e+4>>2],X2[i+8>>2]=X2[e>>2],X2[i+12>>2]=A,f=X2[4+(r=e+24|0)>>2],X2[(A=i+32|0)>>2]=X2[r>>2],X2[A+4>>2]=f,A=X2[e+20>>2],X2[i+24>>2]=X2[e+16>>2],X2[i+28>>2]=A,A=X2[e+36>>2],X2[i+40>>2]=X2[e+32>>2],X2[i+44>>2]=A,f=X2[4+(r=e+40|0)>>2],X2[(A=i+48|0)>>2]=X2[r>>2],X2[A+4>>2]=f,A=X2[e+52>>2],X2[i+56>>2]=X2[e+48>>2],X2[i+60>>2]=A,r=X2[(e=e+56|0)+4>>2],X2[(A=i- -64|0)>>2]=X2[e>>2],X2[A+4>>2]=r,0|i;},RigidBodyConstructionInfo_static:function(A,e,r,f){A=P2(A),e|=0,r|=0,f|=0;var i=R(144);return X2[i+72>>2]=r,X2[i+4>>2]=e,U2[i>>2]=A,e=X2[f+4>>2],X2[i+76>>2]=X2[f>>2],X2[i+80>>2]=e,e=X2[(r=f+8|0)+4>>2],X2[(f=i+84|0)>>2]=X2[r>>2],X2[f+4>>2]=e,X2[i+136>>2]=1008981770,X2[i+140>>2]=1008981770,X2[i+128>>2]=1000593162,X2[i+132>>2]=1008981770,S2[i+124|0]=0,X2[i+116>>2]=1061997773,X2[i+120>>2]=1065353216,X2[i+108>>2]=0,X2[i+112>>2]=0,X2[i+100>>2]=1056964608,X2[i+104>>2]=0,X2[i+92>>2]=0,X2[i+96>>2]=0,X2[i+8>>2]=1065353216,X2[(e=i+20|0)>>2]=0,X2[e+4>>2]=0,X2[i+12>>2]=0,X2[i+16>>2]=0,X2[i+28>>2]=1065353216,X2[i+32>>2]=0,X2[i+36>>2]=0,X2[(e=i+40|0)>>2]=0,X2[e+4>>2]=0,X2[i+48>>2]=1065353216,X2[i+52>>2]=0,X2[i+56>>2]=0,X2[(e=i+60|0)>>2]=0,X2[e+4>>2]=0,(X2[i+68>>2]=0)|i;},RigidBody_new:function(A,e){A=P2(A),e|=0;var r,f,i,a=0;return P2(0),K2=i=K2-144|0,J2[25412]||(X2[6357]=0,X2[6358]=0,X2[6355]=27,X2[6356]=0,X2[6354]=14168,S2[25412]=1,X2[6359]=0),X2[(r=88+i|0)>>2]=0,X2[4+r>>2]=0,f=A==P2(0)?P2(0):P2(1.6666666269302368),U2[84+i>>2]=f,U2[80+i>>2]=f,X2[(r=12+i|0)>>2]=0,X2[4+r>>2]=0,X2[(r=20+i|0)>>2]=0,X2[4+r>>2]=0,X2[136+i>>2]=1008981770,X2[140+i>>2]=1008981770,X2[128+i>>2]=1000593162,X2[132+i>>2]=1008981770,S2[124+i|0]=0,X2[120+i>>2]=1065353216,X2[112+i>>2]=0,X2[116+i>>2]=1061997773,X2[104+i>>2]=0,X2[108+i>>2]=0,X2[96+i>>2]=0,X2[100+i>>2]=1056964608,U2[76+i>>2]=f,X2[72+i>>2]=25416,X2[4+i>>2]=e,U2[i>>2]=A,X2[8+i>>2]=1065353216,X2[(e=32+i|0)>>2]=0,X2[e+4>>2]=0,X2[28+i>>2]=1065353216,X2[(e=40+i|0)>>2]=0,X2[e+4>>2]=0,X2[48+i>>2]=1065353216,X2[(e=52+i|0)>>2]=0,X2[e+4>>2]=0,X2[(e=60+i|0)>>2]=0,X2[e+4>>2]=0,X2[68+i>>2]=0,X2[6258]=X2[6258]+1,(e=L2(695))&&(X2[(a=e+19&-16)-4>>2]=e),X2[a+132>>2]=0,X2[a+136>>2]=0,X2[a+188>>2]=0,X2[a+192>>2]=0,X2[a+180>>2]=0,X2[a+184>>2]=1566444395,X2[a+172>>2]=1065353216,X2[a+176>>2]=0,X2[a+164>>2]=1065353216,X2[a+168>>2]=1065353216,S2[a+300|0]=1,X2[a+276>>2]=0,X2[a+280>>2]=0,X2[a+268>>2]=1065353216,X2[a+272>>2]=0,X2[a+260>>2]=-1,X2[a+264>>2]=-1,X2[a+252>>2]=1,X2[a+256>>2]=0,X2[a+244>>2]=1036831949,X2[a+248>>2]=1176256512,X2[a+236>>2]=0,X2[a+240>>2]=0,X2[a+228>>2]=1056964608,X2[a+232>>2]=0,X2[a+220>>2]=1,X2[a+224>>2]=0,X2[a+212>>2]=-1,X2[a+216>>2]=-1,X2[a+204>>2]=1,X2[a+208>>2]=-1,X2[(e=a+156|0)>>2]=0,X2[e+4>>2]=0,X2[(e=a+148|0)>>2]=0,X2[e+4>>2]=0,X2[(e=a+140|0)>>2]=0,X2[e+4>>2]=0,X2[(e=a+196|0)>>2]=0,X2[e+4>>2]=0,X2[a+304>>2]=0,X2[a+296>>2]=0,X2[a+288>>2]=0,X2[a+292>>2]=0,X2[a+4>>2]=1065353216,X2[a+8>>2]=0,X2[a+12>>2]=0,X2[(e=a+16|0)>>2]=0,X2[e+4>>2]=0,X2[a+24>>2]=1065353216,X2[a+28>>2]=0,X2[a+32>>2]=0,X2[(e=a+36|0)>>2]=0,X2[e+4>>2]=0,X2[a+44>>2]=1065353216,X2[a+48>>2]=0,X2[a+52>>2]=0,X2[(e=a+56|0)>>2]=0,X2[e+4>>2]=0,X2[(e=a- -64|0)>>2]=0,X2[e+4>>2]=1065353216,X2[a+72>>2]=0,X2[a+76>>2]=0,X2[(e=a+80|0)>>2]=0,X2[e+4>>2]=0,X2[a+88>>2]=1065353216,X2[a+92>>2]=0,X2[a+96>>2]=0,X2[(e=a+100|0)>>2]=0,X2[e+4>>2]=0,X2[a+112>>2]=0,X2[a+116>>2]=0,X2[a+108>>2]=1065353216,X2[(e=a+120|0)>>2]=0,X2[e+4>>2]=0,X2[a+128>>2]=0,S2[a+560|0]=1,X2[a>>2]=19804,X2[a+556>>2]=0,X2[a+548>>2]=0,X2[a+552>>2]=0,g4(a,i),K2=144+i|0,0|a;},RigidBody_setCenterOfMassTransform:function(A,e){w4(A|=0,e|=0);},RigidBody_setSleepingThresholds:function(A,e,r){A|=0,e=P2(e),r=P2(r),U2[A+536>>2]=r,U2[A+532>>2]=e;},RigidBody_getLinearSleepingThreshold:function(A){return P2(U2[(A|=0)+532>>2]);},RigidBody_getAngularSleepingThreshold:function(A){return P2(U2[(A|=0)+536>>2]);},RigidBody_setDamping:function(A,e,r){var f;A|=0,e=P2(e),r=P2(r),U2[8+(f=K2-16|0)>>2]=r,U2[12+f>>2]=e,X2[4+f>>2]=0,X2[f>>2]=1065353216,U2[A+504>>2]=U2[(e<P2(0)?4+f|0:e>P2(1)?f:12+f|0)>>2],X2[4+f>>2]=0,X2[f>>2]=1065353216,U2[A+508>>2]=U2[(r<P2(0)?4+f|0:r>P2(1)?f:8+f|0)>>2];},RigidBody_setMass:function(A,e){A|=0,e=P2(e),P2(0);var r,f,i,a=P2(0);P2(0),X2[8+(K2=i=K2-16|0)>>2]=1070945621,X2[12+i>>2]=0,X2[i>>2]=1070945621,X2[4+i>>2]=1070945621,r=X2[A+192>>2],31==X2[r+4>>2]&&X2[r+24>>2]<1||N2[X2[X2[r>>2]+32>>2]](r,e,i),r=X2[A+204>>2],e==P2(0)?X2[A+204>>2]=1|r:(X2[A+204>>2]=-2&r,a=P2(P2(1)/e)),U2[A+404>>2]=a,X2[A+436>>2]=0,X2[A+468>>2]=0,U2[A+424>>2]=U2[A+440>>2]*e,r=U2[8+i>>2],U2[A+464>>2]=r!=P2(0)?P2(P2(1)/r):P2(0),r=U2[4+i>>2],U2[A+460>>2]=r!=P2(0)?P2(P2(1)/r):P2(0),r=U2[i>>2],U2[A+456>>2]=r!=P2(0)?P2(P2(1)/r):P2(0),U2[A+432>>2]=U2[A+448>>2]*e,U2[A+428>>2]=U2[A+444>>2]*e,e=U2[A+412>>2],r=U2[A+416>>2],f=U2[A+408>>2],X2[A+632>>2]=0,U2[A+628>>2]=a*r,U2[A+624>>2]=a*e,U2[A+620>>2]=f*a,K2=16+i|0;},RigidBody_setMassProps:function(A,e,r){A|=0,e=P2(e),r|=0;var f=P2(0),i=(P2(0),P2(0),X2[A+204>>2]);e==P2(0)?X2[A+204>>2]=1|i:(X2[A+204>>2]=-2&i,f=P2(P2(1)/e)),U2[A+404>>2]=f,X2[A+436>>2]=0,U2[A+424>>2]=U2[A+440>>2]*e,U2[A+432>>2]=U2[A+448>>2]*e,U2[A+428>>2]=U2[A+444>>2]*e,e=U2[r+8>>2],i=U2[r+4>>2],r=U2[r>>2],U2[A+620>>2]=U2[A+408>>2]*f,U2[A+624>>2]=f*U2[A+412>>2],U2[A+628>>2]=f*U2[A+416>>2],X2[A+632>>2]=0,X2[A+468>>2]=0,U2[A+456>>2]=r!=P2(0)?P2(P2(1)/r):P2(0),U2[A+460>>2]=i!=P2(0)?P2(P2(1)/i):P2(0),U2[A+464>>2]=e!=P2(0)?P2(P2(1)/e):P2(0);},RigidBody_setLinearFactor:function(A,e){A|=0,e|=0,P2(0);var r,f=X2[e+4>>2];X2[A+408>>2]=X2[e>>2],X2[A+412>>2]=f,r=X2[(e=e+8|0)+4>>2],X2[(f=A+416|0)>>2]=X2[e>>2],X2[4+f>>2]=r,X2[A+632>>2]=0,e=U2[A+404>>2],U2[A+624>>2]=e*U2[A+412>>2],U2[A+620>>2]=e*U2[A+408>>2],U2[A+628>>2]=e*U2[f>>2];},RigidBody_setAngularFactor:function(A,e){var r;e|=0,X2[(A|=0)+304>>2]=X2[A+304>>2]+1,r=X2[e+4>>2],X2[A+604>>2]=X2[e>>2],X2[A+608>>2]=r,r=X2[(e=e+8|0)+4>>2],X2[(A=A+612|0)>>2]=X2[e>>2],X2[A+4>>2]=r;},RigidBody_getLinearVelocity:function(A){return (A|=0)+372|0;},RigidBody_getAngularVelocity:function(A){return (A|=0)+388|0;},RigidBody_setLinearVelocity:function(A,e){var r;e|=0,X2[(A|=0)+304>>2]=X2[A+304>>2]+1,r=X2[e+4>>2],X2[A+372>>2]=X2[e>>2],X2[A+376>>2]=r,r=X2[(e=e+8|0)+4>>2],X2[(A=A+380|0)>>2]=X2[e>>2],X2[A+4>>2]=r;},RigidBody_setAngularVelocity:function(A,e){var r;e|=0,X2[(A|=0)+304>>2]=X2[A+304>>2]+1,r=X2[e+4>>2],X2[A+388>>2]=X2[e>>2],X2[A+392>>2]=r,r=X2[(e=e+8|0)+4>>2],X2[(A=A+396|0)>>2]=X2[e>>2],X2[A+4>>2]=r;},RigidBody_getGravity:function(A){return (A|=0)+440|0;},RigidBody_setGravity:function(A,e){var r,f,i,a;A|=0,e|=0,P2(0),P2(0),P2(0),P2(0),(a=U2[A+404>>2])!=P2(0)&&(r=U2[e>>2],f=U2[e+4>>2],i=U2[e+8>>2],X2[A+436>>2]=0,a=P2(P2(1)/a),U2[A+432>>2]=i*a,U2[A+428>>2]=a*f,U2[A+424>>2]=a*r),i=X2[e+4>>2],X2[A+440>>2]=X2[e>>2],X2[A+444>>2]=i,i=X2[(e=e+8|0)+4>>2],X2[(A=A+448|0)>>2]=X2[e>>2],X2[A+4>>2]=i;},RigidBody_applyTorque:function(A,e){A|=0,e|=0,P2(0),P2(0);var r=U2[e+8>>2],f=U2[e+4>>2];U2[A+488>>2]=P2(U2[e>>2]*U2[A+604>>2])+U2[A+488>>2],U2[(e=A+492|0)>>2]=P2(f*U2[A+608>>2])+U2[e>>2],U2[(e=A+496|0)>>2]=P2(r*U2[A+612>>2])+U2[e>>2];},RigidBody_applyForce:function(A,e,r){A|=0,e|=0,r|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var f,i,a,n,b=U2[e+8>>2],t=U2[e+4>>2],o=U2[A+408>>2];U2[A+472>>2]=P2(U2[e>>2]*o)+U2[A+472>>2],i=t,t=U2[A+412>>2],U2[(n=A+476|0)>>2]=P2(i*t)+U2[n>>2],f=U2[A+416>>2],U2[(n=A+480|0)>>2]=P2(b*f)+U2[n>>2],n=U2[e>>2],b=U2[r>>2],a=U2[r+4>>2],f=P2(f*U2[e+8>>2]),t=P2(t*U2[e+4>>2]),r=U2[r+8>>2],U2[A+488>>2]=P2(P2(P2(a*f)-P2(t*r))*U2[A+604>>2])+U2[A+488>>2],i=U2[A+612>>2],e=A+492|0,o=P2(o*n),U2[e>>2]=P2(P2(P2(r*o)-P2(f*b))*U2[A+608>>2])+U2[e>>2],U2[(A=A+496|0)>>2]=P2(i*P2(P2(t*b)-P2(o*a)))+U2[A>>2];},RigidBody_applyCentralForce:function(A,e){A|=0,e|=0,P2(0),P2(0);var r=U2[e+8>>2],f=U2[e+4>>2];U2[A+472>>2]=P2(U2[e>>2]*U2[A+408>>2])+U2[A+472>>2],U2[(e=A+476|0)>>2]=P2(f*U2[A+412>>2])+U2[e>>2],U2[(e=A+480|0)>>2]=P2(r*U2[A+416>>2])+U2[e>>2];},RigidBody_applyTorqueImpulse:function(A,e){A|=0,e|=0,P2(0),P2(0),P2(0);var r=U2[e>>2],f=U2[e+4>>2],i=U2[e+8>>2];U2[A+388>>2]=P2(P2(P2(P2(U2[A+324>>2]*r)+P2(U2[A+328>>2]*f))+P2(U2[A+332>>2]*i))*U2[A+604>>2])+U2[A+388>>2],U2[(e=A+392|0)>>2]=P2(P2(P2(P2(r*U2[A+340>>2])+P2(f*U2[A+344>>2]))+P2(i*U2[A+348>>2]))*U2[A+608>>2])+U2[e>>2],U2[(e=A+396|0)>>2]=P2(P2(P2(P2(r*U2[A+356>>2])+P2(f*U2[A+360>>2]))+P2(i*U2[A+364>>2]))*U2[A+612>>2])+U2[e>>2];},RigidBody_applyImpulse:function(A,e,r){K4(A|=0,e|=0,r|=0);},RigidBody_applyCentralImpulse:function(A,e){A|=0,e|=0,P2(0),P2(0),P2(0);var r=U2[e+8>>2],f=U2[e+4>>2],i=U2[A+404>>2];U2[A+372>>2]=P2(P2(U2[e>>2]*U2[A+408>>2])*i)+U2[A+372>>2],U2[(e=A+376|0)>>2]=P2(i*P2(f*U2[A+412>>2]))+U2[e>>2],U2[(e=A+380|0)>>2]=P2(i*P2(r*U2[A+416>>2]))+U2[e>>2];},RigidBody_updateInertiaTensor:function(A){var e,r,f,i,a,n,b,t,o,c,k,u,s,l,B;A|=0,P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),X2[A+368>>2]=0,X2[A+352>>2]=0,X2[A+336>>2]=0,r=U2[A+36>>2],t=U2[A+456>>2],f=P2(r*t),i=U2[A+40>>2],o=U2[A+460>>2],a=P2(i*o),n=U2[A+44>>2],l=U2[A+464>>2],e=P2(n*l),U2[A+364>>2]=P2(P2(r*f)+P2(i*a))+P2(n*e),c=U2[A+20>>2],k=U2[A+24>>2],u=U2[A+28>>2],U2[A+360>>2]=P2(P2(c*f)+P2(k*a))+P2(u*e),s=U2[A+4>>2],b=P2(s*f),f=U2[A+8>>2],b=P2(b+P2(f*a)),a=U2[A+12>>2],U2[A+356>>2]=b+P2(a*e),e=P2(t*c),b=P2(o*k),B=P2(l*u),U2[A+348>>2]=P2(P2(r*e)+P2(i*b))+P2(n*B),U2[A+344>>2]=P2(P2(c*e)+P2(k*b))+P2(u*B),U2[A+340>>2]=P2(P2(s*e)+P2(f*b))+P2(a*B),e=r,r=P2(s*t),t=i,i=P2(f*o),o=n,n=P2(a*l),U2[A+332>>2]=P2(P2(e*r)+P2(t*i))+P2(o*n),U2[A+328>>2]=P2(P2(r*c)+P2(i*k))+P2(n*u),U2[A+324>>2]=P2(P2(s*r)+P2(f*i))+P2(a*n);},RigidBody_getTotalForce:function(A){return (A|=0)+472|0;},RigidBody_getTotalTorque:function(A){return (A|=0)+488|0;},RigidBody_getFlags:function(A){return X2[(A|=0)+564>>2];},RigidBody_setFlags:function(A,e){X2[(A|=0)+564>>2]=e|=0;},RigidBody_clearForces:function(A){var e;X2[(A|=0)+472>>2]=0,X2[A+476>>2]=0,X2[(e=A+496|0)>>2]=0,X2[4+e>>2]=0,X2[(e=A+488|0)>>2]=0,X2[4+e>>2]=0,X2[(A=A+480|0)>>2]=0,X2[A+4>>2]=0;},RigidBody_wantsSleeping:function(A){var e,r=0;return 4==(0|(e=X2[(A|=0)+220>>2]))||J2[26508]||(r=1,2==(-2&e)||U2[A+224>>2]>P2(2)||(r=0)),0|r;},RigidBody_clearState:function(A){var e;X2[(A|=0)+372>>2]=0,X2[A+376>>2]=0,X2[A+472>>2]=0,X2[A+476>>2]=0,X2[(e=A+396|0)>>2]=0,X2[4+e>>2]=0,X2[(e=A+388|0)>>2]=0,X2[4+e>>2]=0,X2[(e=A+380|0)>>2]=0,X2[4+e>>2]=0,X2[(e=A+480|0)>>2]=0,X2[4+e>>2]=0,X2[(e=A+488|0)>>2]=0,X2[4+e>>2]=0,X2[(A=A+496|0)>>2]=0,X2[A+4>>2]=0;},RigidBody_getMotionState:function(A){return X2[(A|=0)+540>>2];},_safe_delete:function(A,e){A|=0;A:{e:{r:switch(0|(e|=0)){case 0:if(A)return X2[6259]=X2[6259]+1,void q2(X2[A-4>>2]);break e;case 1:case 2:if(A)return void n(A);break e;case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:if(A)break A;break e;case 12:break r;default:break e;}A&&N2[X2[X2[A>>2]+4>>2]](A);}return;}N2[X2[X2[A>>2]+4>>2]](A);},_ZSt17__throw_bad_allocv:G,_ZSt15get_new_handlerv:function(){var A;return X2[12+(A=K2-16|0)>>2]=24992,X2[8+A>>2]=2,X2[X2[12+A>>2]>>2];},_ZnwmRKSt9nothrow_t:function(A,e){var r;return e|=0,X2[12+(K2=r=K2-16|0)>>2]=A|=0,X2[8+r>>2]=e,X2[4+r>>2]=0,e=R(X2[12+(A=r)>>2]),X2[4+A>>2]=e,K2=16+r|0,X2[4+r>>2];},_Znam:D,_ZnamRKSt9nothrow_t:function(A,e){var r;return e|=0,X2[12+(K2=r=K2-16|0)>>2]=A|=0,X2[8+r>>2]=e,X2[4+r>>2]=0,e=D(X2[12+(A=r)>>2]),X2[4+A>>2]=e,K2=16+r|0,X2[4+r>>2];},_ZdlPvRKSt9nothrow_t:T,_ZdlPvm:T,_ZdaPv:W,_ZdaPvRKSt9nothrow_t:I,_ZdaPvm:I,_ZnwmSt11align_val_t:x,_ZnwmSt11align_val_tRKSt9nothrow_t:function(A,e,r){var f;return e|=0,r|=0,X2[12+(K2=f=K2-16|0)>>2]=A|=0,X2[8+f>>2]=e,X2[4+f>>2]=r,X2[f>>2]=0,e=x(X2[12+(A=f)>>2],X2[8+f>>2]),X2[A>>2]=e,K2=16+f|0,X2[f>>2];},_ZnamSt11align_val_t:y,_ZnamSt11align_val_tRKSt9nothrow_t:function(A,e,r){var f;return e|=0,r|=0,X2[12+(K2=f=K2-16|0)>>2]=A|=0,X2[8+f>>2]=e,X2[4+f>>2]=r,X2[f>>2]=0,e=y(X2[12+(A=f)>>2],X2[8+f>>2]),X2[A>>2]=e,K2=16+f|0,X2[f>>2];},_ZdlPvSt11align_val_t:V,_ZdlPvSt11align_val_tRKSt9nothrow_t:function(A,e,r){var f;e|=0,r|=0,X2[12+(K2=f=K2-16|0)>>2]=A|=0,X2[8+f>>2]=e,X2[4+f>>2]=r,V(X2[12+f>>2],X2[8+f>>2]),K2=16+f|0;},_ZdlPvmSt11align_val_t:function(A,e,r){var f;e|=0,r|=0,X2[12+(K2=f=K2-16|0)>>2]=A|=0,X2[8+f>>2]=e,X2[4+f>>2]=r,V(X2[12+f>>2],X2[4+f>>2]),K2=16+f|0;},_ZdaPvSt11align_val_t:p,_ZdaPvSt11align_val_tRKSt9nothrow_t:function(A,e,r){var f;e|=0,r|=0,X2[12+(K2=f=K2-16|0)>>2]=A|=0,X2[8+f>>2]=e,X2[4+f>>2]=r,p(X2[12+f>>2],X2[8+f>>2]),K2=16+f|0;},_ZdaPvmSt11align_val_t:function(A,e,r){var f;e|=0,r|=0,X2[12+(K2=f=K2-16|0)>>2]=A|=0,X2[8+f>>2]=e,X2[4+f>>2]=r,p(X2[12+f>>2],X2[4+f>>2]),K2=16+f|0;},_ZSt7nothrow:1088,_ZSt14set_unexpectedPFvvE:function(A){var e;return X2[12+(K2=e=K2-16|0)>>2]=A|=0,X2[12+e>>2]||(X2[12+e>>2]=1),A=e2(24100,X2[12+e>>2]),K2=16+e|0,0|A;},__cxa_unexpected_handler:24100,_ZSt13set_terminatePFvvE:function(A){var e;return X2[12+(K2=e=K2-16|0)>>2]=A|=0,X2[12+e>>2]||(X2[12+e>>2]=2),A=e2(24096,X2[12+e>>2]),K2=16+e|0,0|A;},__cxa_terminate_handler:24096,_ZSt14get_unexpectedv:function(){var A;return X2[12+(A=K2-16|0)>>2]=24100,X2[8+A>>2]=2,X2[X2[12+A>>2]>>2];},_ZSt10unexpectedv:function(){var A,e;X2[12+(e=K2-16|0)>>2]=24100,X2[8+e>>2]=2,X2[12+(K2=A=K2-16|0)>>2]=X2[X2[12+e>>2]>>2],N2[X2[12+A>>2]](),k2(1089),U();},_ZSt13get_terminatev:function(){var A;return X2[12+(A=K2-16|0)>>2]=24096,X2[8+A>>2]=2,X2[X2[12+A>>2]>>2];},_ZSt9terminatev:r2,_ZSt15set_new_handlerPFvvE:function(A){var e;return X2[12+(K2=e=K2-16|0)>>2]=A|=0,A=e2(24992,X2[12+e>>2]),K2=16+e|0,0|A;},__cxa_new_handler:24992,__cxa_deleted_virtual:function(){k2(1200),U();},_ZNSt9exceptionD2Ev:u2,_ZNSt9exceptionD0Ev:s2,_ZNSt9exceptionD1Ev:u2,_ZNKSt9exception4whatEv:l2,_ZNSt13bad_exceptionD2Ev:r,_ZNSt13bad_exceptionD0Ev:d2,_ZNSt13bad_exceptionD1Ev:r,_ZNKSt13bad_exception4whatEv:Z2,_ZNSt9bad_allocC2Ev:_2,_ZTVSt9bad_alloc:3628,_ZTVSt9exception:3708,_ZNSt9bad_allocD2Ev:r,_ZNSt9bad_allocD0Ev:d2,_ZNSt9bad_allocD1Ev:r,_ZNKSt9bad_alloc4whatEv:g2,_ZNSt20bad_array_new_lengthC2Ev:E2,_ZTVSt20bad_array_new_length:3664,_ZNSt20bad_array_new_lengthD2Ev:Q2,_ZNSt20bad_array_new_lengthD0Ev:w2,_ZNSt20bad_array_new_lengthD1Ev:Q2,_ZNKSt20bad_array_new_length4whatEv:G2,_ZTISt9bad_alloc:3820,_ZTISt20bad_array_new_length:3860,_ZTISt9exception:3744,_ZTSSt9exception:3728,_ZTVSt13bad_exception:3752,_ZTISt13bad_exception:3792,_ZTSSt13bad_exception:3772,_ZTSSt9bad_alloc:3804,_ZTSSt20bad_array_new_length:3832,_ZNSt9bad_allocC1Ev:_2,_ZNSt20bad_array_new_lengthC1Ev:E2,_ZNSt9type_infoD2Ev:u2,_ZNSt9type_infoD0Ev:s2,_ZNSt9type_infoD1Ev:u2,_ZNSt8bad_castC2Ev:C2,_ZTVSt8bad_cast:3872,_ZNSt8bad_castD2Ev:r,_ZNSt8bad_castD0Ev:d2,_ZNSt8bad_castD1Ev:r,_ZNKSt8bad_cast4whatEv:h2,_ZNSt10bad_typeidC2Ev:F2,_ZTVSt10bad_typeid:3908,_ZNSt10bad_typeidD2Ev:r,_ZNSt10bad_typeidD0Ev:d2,_ZNSt10bad_typeidD1Ev:r,_ZNKSt10bad_typeid4whatEv:Y2,_ZTISt8bad_cast:3996,_ZTISt10bad_typeid:4024,_ZTVSt9type_info:3944,_ZTISt9type_info:3976,_ZTSSt9type_info:3960,_ZTSSt8bad_cast:3984,_ZTSSt10bad_typeid:4008,_ZNSt8bad_castC1Ev:C2,_ZNSt10bad_typeidC1Ev:F2,_ZTIN10__cxxabiv117__class_type_infoE:4120,_ZTIN10__cxxabiv116__shim_type_infoE:4072,__dynamic_cast:t,_ZTIN10__cxxabiv117__pbase_type_infoE:4168,_ZTIDn:4516,_ZTIN10__cxxabiv119__pointer_type_infoE:4216,_ZTIv:4464,_ZTIN10__cxxabiv120__function_type_infoE:4268,_ZTIN10__cxxabiv129__pointer_to_member_type_infoE:4328,_ZTSN10__cxxabiv116__shim_type_infoE:4036,_ZTSN10__cxxabiv117__class_type_infoE:4084,_ZTSN10__cxxabiv117__pbase_type_infoE:4132,_ZTSN10__cxxabiv119__pointer_type_infoE:4180,_ZTSN10__cxxabiv120__function_type_infoE:4228,_ZTSN10__cxxabiv129__pointer_to_member_type_infoE:4280,_ZTVN10__cxxabiv116__shim_type_infoE:4352,_ZTVN10__cxxabiv123__fundamental_type_infoE:4380,_ZTIN10__cxxabiv123__fundamental_type_infoE:4448,_ZTSN10__cxxabiv123__fundamental_type_infoE:4408,_ZTSv:4460,_ZTSPv:4472,_ZTIPv:4476,_ZTVN10__cxxabiv119__pointer_type_infoE:6212,_ZTSPKv:4492,_ZTIPKv:4496,_ZTSDn:4512,_ZTSPDn:4524,_ZTIPDn:4528,_ZTSPKDn:4544,_ZTIPKDn:4552,_ZTSb:4568,_ZTIb:4572,_ZTSPb:4580,_ZTIPb:4584,_ZTSPKb:4600,_ZTIPKb:4604,_ZTSw:4620,_ZTIw:4624,_ZTSPw:4632,_ZTIPw:4636,_ZTSPKw:4652,_ZTIPKw:4656,_ZTSc:4672,_ZTIc:4676,_ZTSPc:4684,_ZTIPc:4688,_ZTSPKc:4704,_ZTIPKc:4708,_ZTSh:4724,_ZTIh:4728,_ZTSPh:4736,_ZTIPh:4740,_ZTSPKh:4756,_ZTIPKh:4760,_ZTSa:4776,_ZTIa:4780,_ZTSPa:4788,_ZTIPa:4792,_ZTSPKa:4808,_ZTIPKa:4812,_ZTSs:4828,_ZTIs:4832,_ZTSPs:4840,_ZTIPs:4844,_ZTSPKs:4860,_ZTIPKs:4864,_ZTSt:4880,_ZTIt:4884,_ZTSPt:4892,_ZTIPt:4896,_ZTSPKt:4912,_ZTIPKt:4916,_ZTSi:4932,_ZTIi:4936,_ZTSPi:4944,_ZTIPi:4948,_ZTSPKi:4964,_ZTIPKi:4968,_ZTSj:4984,_ZTIj:4988,_ZTSPj:4996,_ZTIPj:5e3,_ZTSPKj:5016,_ZTIPKj:5020,_ZTSl:5036,_ZTIl:5040,_ZTSPl:5048,_ZTIPl:5052,_ZTSPKl:5068,_ZTIPKl:5072,_ZTSm:5088,_ZTIm:5092,_ZTSPm:5100,_ZTIPm:5104,_ZTSPKm:5120,_ZTIPKm:5124,_ZTSx:5140,_ZTIx:5144,_ZTSPx:5152,_ZTIPx:5156,_ZTSPKx:5172,_ZTIPKx:5176,_ZTSy:5192,_ZTIy:5196,_ZTSPy:5204,_ZTIPy:5208,_ZTSPKy:5224,_ZTIPKy:5228,_ZTSn:5244,_ZTIn:5248,_ZTSPn:5256,_ZTIPn:5260,_ZTSPKn:5276,_ZTIPKn:5280,_ZTSo:5296,_ZTIo:5300,_ZTSPo:5308,_ZTIPo:5312,_ZTSPKo:5328,_ZTIPKo:5332,_ZTSDh:5348,_ZTIDh:5352,_ZTSPDh:5360,_ZTIPDh:5364,_ZTSPKDh:5380,_ZTIPKDh:5388,_ZTSf:5404,_ZTIf:5408,_ZTSPf:5416,_ZTIPf:5420,_ZTSPKf:5436,_ZTIPKf:5440,_ZTSd:5456,_ZTId:5460,_ZTSPd:5468,_ZTIPd:5472,_ZTSPKd:5488,_ZTIPKd:5492,_ZTSe:5508,_ZTIe:5512,_ZTSPe:5520,_ZTIPe:5524,_ZTSPKe:5540,_ZTIPKe:5544,_ZTSg:5560,_ZTIg:5564,_ZTSPg:5572,_ZTIPg:5576,_ZTSPKg:5592,_ZTIPKg:5596,_ZTSDu:5612,_ZTIDu:5616,_ZTSPDu:5624,_ZTIPDu:5628,_ZTSPKDu:5644,_ZTIPKDu:5652,_ZTSDs:5668,_ZTIDs:5672,_ZTSPDs:5680,_ZTIPDs:5684,_ZTSPKDs:5700,_ZTIPKDs:5708,_ZTSDi:5724,_ZTIDi:5728,_ZTSPDi:5736,_ZTIPDi:5740,_ZTSPKDi:5756,_ZTIPKDi:5764,_ZTVN10__cxxabiv117__array_type_infoE:5780,_ZTIN10__cxxabiv117__array_type_infoE:5844,_ZTSN10__cxxabiv117__array_type_infoE:5808,_ZTVN10__cxxabiv120__function_type_infoE:5856,_ZTVN10__cxxabiv116__enum_type_infoE:5884,_ZTIN10__cxxabiv116__enum_type_infoE:5948,_ZTSN10__cxxabiv116__enum_type_infoE:5912,_ZTIN10__cxxabiv120__si_class_type_infoE:6080,_ZTSN10__cxxabiv120__si_class_type_infoE:6040,_ZTIN10__cxxabiv121__vmi_class_type_infoE:6172,_ZTSN10__cxxabiv121__vmi_class_type_infoE:6132,_ZTVN10__cxxabiv117__pbase_type_infoE:6184,_ZTVN10__cxxabiv129__pointer_to_member_type_infoE:6240};function L2(A){var e,r=0,f=0,i=0,a=0,n=0,b=0,t=0,o=0,c=0,k=0,u=0;K2=e=K2-16|0;A:{e:{r:{f:{i:{a:{n:{b:{t:{o:{c:{if(A>>>0<=236){if(3&(r=(n=X2[6056])>>>(f=(b=A>>>0<11?16:A+19&-16)>>>3|0)|0)){A=(a=X2[(r=(i=1^(f|1&r))<<3)+24272>>2])+8|0,(0|(f=X2[a+8>>2]))==(0|(r=r+24264|0))?(u=s(i)&n,X2[24224>>2]=u):(X2[r+8>>2]=f,X2[f+12>>2]=r),X2[a+4>>2]=3|(r=i<<3),X2[(r=r+a|0)+4>>2]=1|X2[r+4>>2];break A;}if(b>>>0<=(c=X2[6058])>>>0)break c;if(r){f=A=(r=(0-(A=(0-(A=2<<f)|A)&r<<f)&A)-1|0)>>>12&16,i=X2[(A=(f=((f=(f|=A=(r=r>>>A|0)>>>5&8)|(A=(r=r>>>A|0)>>>2&4)|(A=(r=r>>>A|0)>>>1&2))|(A=(r=r>>>A|0)>>>1&1))+(r>>>A|0)|0)<<3)+24272>>2],(0|(r=X2[i+8>>2]))==(0|(A=A+24264|0))?(n=s(f)&n,X2[6056]=n):(X2[A+8>>2]=r,X2[r+12>>2]=A),A=i+8|0,X2[i+4>>2]=3|b,X2[(r=f<<3)+i>>2]=a=r-b|0,X2[(i=i+b|0)+4>>2]=1|a,c&&(f=24264+((r=c>>>3|0)<<3)|0,b=X2[6061],r=(r=1<<r)&n?X2[f+8>>2]:(X2[6056]=r|n,f),X2[r+12>>2]=b,X2[f+8>>2]=b,X2[b+12>>2]=f,X2[b+8>>2]=r),X2[6061]=i,X2[6058]=a;break A;}if(!(t=X2[6057]))break c;for(f=A=(r=(0-t&t)-1|0)>>>12&16,r=X2[24528+(((f=(f|=A=(r=r>>>A|0)>>>5&8)|(A=(r=r>>>A|0)>>>2&4)|(A=(r=r>>>A|0)>>>1&2))|(A=(r=r>>>A|0)>>>1&1))+(r>>>A|0)<<2)>>2],i=(-8&X2[r+4>>2])-b|0,f=r;;){if(!(A=(A=X2[f+16>>2])||X2[f+20>>2]))break;i=(a=(f=(-8&X2[A+4>>2])-b|0)>>>0<i>>>0)?f:i,r=a?A:r,f=A;}if(k=X2[r+24>>2],(0|(a=X2[r+12>>2]))!=(0|r)){A=X2[r+8>>2],X2[a+8>>2]=A,X2[A+12>>2]=a;break e;}if(!(A=X2[(f=r+20|0)>>2])){if(!(A=X2[r+16>>2]))break o;f=r+16|0;}for(;;)if(o=f,!((A=X2[(f=(a=A)+20|0)>>2])||(f=a+16|0,A=X2[a+16>>2])))break;X2[o>>2]=0;break e;}if(b=-1,!(4294967231<A>>>0)&&(b=-16&(A=A+19|0),t=X2[6057])){f=0-b|0,(A=A>>>8|(o=0))&&(o=31,16777215<b>>>0||(o=28+((A=((A=(A<<=r=A+1048320>>>16&8)<<(n=A+520192>>>16&4))<<(i=A+245760>>>16&2)>>>15|0)-(i|r|n)|0)<<1|b>>>A+21&1)|0));k:{u:{if(i=X2[24528+(o<<2)>>2])for(r=b<<(31==(0|o)?0:25-(o>>>1|0)|0),A=0;;){if(!(f>>>0<=(n=(-8&X2[i+4>>2])-b|0)>>>0||(a=i,f=n))){f=0,A=i;break u;}if(n=X2[i+20>>2],i=X2[16+((r>>>29&4)+i|0)>>2],A=!n||(0|n)==(0|i)?A:n,r<<=0!=(0|i),!i)break;}else A=0;if(!(A|a)){if(!(A=(0-(A=2<<o)|A)&t))break c;i=A=(r=(A&0-A)-1|0)>>>12&16,A=X2[24528+(((i=(i|=A=(r=r>>>A|0)>>>5&8)|(A=(r=r>>>A|0)>>>2&4)|(A=(r=r>>>A|0)>>>1&2))|(A=(r=r>>>A|0)>>>1&1))+(r>>>A|0)<<2)>>2];}if(!A)break k;}for(;;)if(f=(i=(r=(-8&X2[A+4>>2])-b|0)>>>0<f>>>0)?r:f,a=i?A:a,!(A=(r=X2[A+16>>2])||X2[A+20>>2]))break;}if(a&&!(X2[6058]-b>>>0<=f>>>0)){if(o=X2[a+24>>2],(0|a)!=(0|(r=X2[a+12>>2]))){A=X2[a+8>>2],X2[r+8>>2]=A,X2[A+12>>2]=r;break r;}if(!(A=X2[(i=a+20|0)>>2])){if(!(A=X2[a+16>>2]))break t;i=a+16|0;}for(;;)if(n=i,!((A=X2[(i=(r=A)+20|0)>>2])||(i=r+16|0,A=X2[r+16>>2])))break;X2[n>>2]=0;break r;}}}if(b>>>0<=(f=X2[6058])>>>0){i=X2[6061],16<=(r=f-b|0)>>>0?(X2[(A=i+b|0)+4>>2]=1|r,X2[6058]=r,X2[6061]=A,X2[f+i>>2]=r,X2[i+4>>2]=3|b):(X2[i+4>>2]=3|f,X2[(A=f+i|0)+4>>2]=1|X2[A+4>>2],X2[6061]=0,X2[6058]=0),A=i+8|0;break A;}if(b>>>0<(t=X2[6059])>>>0){f=X2[6062],X2[(r=f+b|0)+4>>2]=1|(A=t-b|0),X2[6059]=A,X2[6062]=r,X2[f+4>>2]=3|b,A=f+8|0;break A;}if((f=(a=(r=o=b+71|(A=0))+(f=X2[6174]?X2[6176]:(X2[6177]=-1,X2[6178]=-1,X2[6175]=65536,X2[6176]=65536,X2[6174]=12+e&-16^1431655768,X2[6179]=0,X2[6167]=0,65536))|0)&(i=0-f|0))>>>0<=b>>>0){X2[6180]=48;break A;}if((r=X2[6166])&&!((n=(A=X2[6164])+f|0)>>>0<=r>>>0&&A>>>0<n>>>0)){A=0,X2[6180]=48;break A;}if(4&J2[24668])break a;c:{k:{if(n=X2[6062])for(A=24672;;){if(n>>>0<(r=X2[A>>2])+X2[A+4>>2]>>>0&&r>>>0<=n>>>0)break k;if(!(A=X2[A+8>>2]))break;}if(-1==(0|(r=C(0))))break n;if(n=f,(n=(A=(i=X2[6175])-1|0)&r?(f-r|0)+(A+r&0-i)|0:n)>>>0<=b>>>0)break n;if(2147483646<n>>>0)break n;if(i=X2[6166]){if((a=(A=X2[6164])+n|0)>>>0<=A>>>0)break n;if(i>>>0<a>>>0)break n;}if((0|r)!=(0|(A=C(n))))break c;break i;}if(2147483646<(n=i&a-t)>>>0)break n;if((0|(r=C(n)))==(X2[A>>2]+X2[A+4>>2]|0))break b;A=r;}if(r=A,!(b+72>>>0<=n>>>0||2147483646<n>>>0||-1==(0|r))){if(2147483646<(A=(A=X2[6176])+(o-n|0)&0-A)>>>0)break i;if(-1!=(0|C(A))){n=A+n|0;break i;}C(0-n|0);break n;}if(-1!=(0|r))break i;break n;}a=0;break e;}r=0;break r;}if(-1!=(0|r))break i;}X2[6167]=4|X2[6167];}if(2147483646<f>>>0)break f;if(r=C(f),(A=C(0))>>>0<=r>>>0)break f;if(-1==(0|r))break f;if(-1==(0|A))break f;if((n=A-r|0)>>>0<=b+56>>>0)break f;}A=X2[6164]+n|0,(X2[6164]=A)>>>0>X[6165]&&(X2[6165]=A);i:{a:{n:{if(t=X2[6062]){for(A=24672;;){if(((f=X2[A>>2])+(a=X2[A+4>>2])|0)==(0|r))break n;if(!(A=X2[A+8>>2]))break;}break a;}for((A=X2[6060])>>>0<=r>>>0&&A||(X2[6060]=r),A=0,X2[6169]=n,X2[6168]=r,X2[6064]=-1,X2[6065]=X2[6174],X2[6171]=0;;)if(X2[A+24272>>2]=f=A+24264|0,X2[A+24276>>2]=f,256==(0|(A=A+8|0)))break;X2[(i=(A=r+8&15?-8-r&15:0)+r|0)+4>>2]=1|(A=(f=n-56|0)-A|0),X2[6063]=X2[6178],X2[6059]=A,X2[6062]=i,X2[4+(r+f|0)>>2]=56;break i;}if(!(8&J2[A+12|0])&&!(r>>>0<=t>>>0||t>>>0<f>>>0)){f=X2[6059]+n|0,X2[(i=(r=t+8&15?-8-t&15:0)+t|0)+4>>2]=1|(r=f-r|0),X2[A+4>>2]=a+n,X2[6063]=X2[6178],X2[6059]=r,X2[6062]=i,X2[4+(f+t|0)>>2]=56;break i;}}r>>>0<(a=X2[6060])>>>0&&(X2[6060]=r,a=0),f=r+n|0,A=24672;a:{n:{b:{t:{o:{c:{for(;;){if((0|f)==X2[A>>2])break;if(!(A=X2[A+8>>2]))break c;}if(!(8&J2[A+12|0]))break o;}for(A=24672;;){if((f=X2[A>>2])>>>0<=t>>>0&&t>>>0<(a=f+X2[A+4>>2]|0)>>>0)break t;A=X2[A+8>>2];}}if(X2[A>>2]=r,X2[A+4>>2]=X2[A+4>>2]+n,X2[(k=(r+8&15?-8-r&15:0)+r|0)+4>>2]=3|b,A=((r=f+(f+8&15?-8-f&15:0)|0)-k|0)-b|0,o=b+k|0,(0|r)==(0|t)){X2[6062]=o,A=X2[6059]+A|0,X2[6059]=A,X2[o+4>>2]=1|A;break n;}if(X2[6061]==(0|r)){X2[6061]=o,A=X2[6058]+A|0,X2[6058]=A,X2[o+4>>2]=1|A,X2[A+o>>2]=A;break n;}if(1==(3&(f=X2[r+4>>2]))){t=-8&f;o:if(f>>>0<=255)a=X2[r+8>>2],f=f>>>3|0,(0|(i=X2[r+12>>2]))==(0|a)?(u=X2[6056]&s(f),X2[24224>>2]=u):(X2[i+8>>2]=a,X2[a+12>>2]=i);else {if(c=X2[r+24>>2],(0|(n=X2[r+12>>2]))!=(0|r))f=X2[r+8>>2],X2[n+8>>2]=f,X2[f+12>>2]=n;else if((b=X2[(i=r+20|0)>>2])||(b=X2[(i=r+16|0)>>2])){for(;;)if(f=i,!((b=X2[(i=(n=b)+20|0)>>2])||(i=n+16|0,b=X2[n+16>>2])))break;X2[f>>2]=0;}else n=0;if(c){i=X2[r+28>>2];c:{if(X2[(f=24528+(i<<2)|0)>>2]==(0|r)){if(X2[f>>2]=n)break c;u=X2[6057]&s(i),X2[24228>>2]=u;break o;}if(!(X2[c+(X2[c+16>>2]==(0|r)?16:20)>>2]=n))break o;}X2[n+24>>2]=c,(f=X2[r+16>>2])&&(X2[n+16>>2]=f,X2[f+24>>2]=n),(f=X2[r+20>>2])&&(X2[n+20>>2]=f,X2[f+24>>2]=n);}}r=r+t|0,A=A+t|0;}if(X2[r+4>>2]=-2&X2[r+4>>2],X2[A+o>>2]=A,X2[o+4>>2]=1|A,A>>>0<=255){r=24264+((A=A>>>3|0)<<3)|0,A=(f=X2[6056])&(A=1<<A)?X2[r+8>>2]:(X2[6056]=A|f,r),X2[A+12>>2]=o,X2[r+8>>2]=o,X2[o+12>>2]=r,X2[o+8>>2]=A;break n;}if((i=A>>>8|(r=0))&&(r=31,16777215<A>>>0||(r=i,r=28+((r=((r=(r<<=i=i+1048320>>>16&8)<<(b=r+520192>>>16&4))<<(a=r+245760>>>16&2)>>>15|0)-(a|i|b)|0)<<1|A>>>r+21&1)|0)),X2[(n=f=o)+28>>2]=r,X2[f+16>>2]=0,b=24528+(r<<2)|(X2[f+20>>2]=0),!((a=X2[6057])&(i=1<<r))){X2[b>>2]=f,X2[6057]=i|a,X2[f+24>>2]=b,X2[f+8>>2]=f,X2[f+12>>2]=f;break n;}for(i=A<<(31==(0|r)?0:25-(r>>>1|0)|0),r=X2[b>>2];;){if((-8&X2[(a=r)+4>>2])==(0|A))break b;if(r=i>>>29|0,i<<=1,!(r=X2[(b=16+(a+(4&r)|0)|0)>>2]))break;}X2[b>>2]=f,X2[f+24>>2]=a,X2[f+12>>2]=f,X2[f+8>>2]=f;break n;}for(X2[(i=(f=r+8&15?-8-r&15:0)+r|0)+4>>2]=1|(f=(A=n-56|0)-f|0),X2[4+(A+r|0)>>2]=56,X2[(o=(A=(a+(a-55&15?55-a&15:0)|0)-63|0)>>>0<t+16>>>0?t:A)+4>>2]=35,X2[6063]=X2[6178],X2[6059]=f,X2[6062]=i,A=X2[6171],X2[(f=o+16|0)>>2]=X2[6170],X2[f+4>>2]=A,A=X2[6169],X2[o+8>>2]=X2[6168],X2[o+12>>2]=A,X2[6170]=o+8,X2[6169]=n,X2[6168]=r,A=o+36|(X2[6171]=0);;)if(X2[A>>2]=7,!((A=A+4|0)>>>0<a>>>0))break;if((0|t)==(0|o))break i;if(X2[o+4>>2]=-2&X2[o+4>>2],X2[o>>2]=n=o-t|0,X2[t+4>>2]=1|n,n>>>0<=255){r=24264+((A=n>>>3|0)<<3)|0,A=(f=X2[6056])&(A=1<<A)?X2[r+8>>2]:(X2[6056]=A|f,r),X2[A+12>>2]=t,X2[r+8>>2]=t,X2[t+12>>2]=r,X2[t+8>>2]=A;break i;}if(X2[t+16>>2]=0,(r=n>>>8|(A=X2[t+20>>2]=0))&&(A=31,16777215<n>>>0||(A=r,A=28+((A=((A=(A<<=r=r+1048320>>>16&8)<<(a=A+520192>>>16&4))<<(i=A+245760>>>16&2)>>>15|0)-(i|r|a)|0)<<1|n>>>A+21&1)|0)),i=24528+((X2[(f=t+28|0)>>2]=A)<<2)|0,!((f=X2[6057])&(r=1<<A))){X2[i>>2]=t,X2[6057]=r|f,X2[t+24>>2]=i,X2[t+8>>2]=t,X2[t+12>>2]=t;break i;}for(A=n<<(31==(0|A)?0:25-(A>>>1|0)|0),r=X2[i>>2];;){if((0|n)==(-8&X2[(f=r)+4>>2]))break a;if(r=A>>>29|0,A<<=1,!(r=X2[(i=16+(f+(4&r)|0)|0)>>2]))break;}X2[i>>2]=t,X2[t+24>>2]=f,X2[t+12>>2]=t,X2[t+8>>2]=t;break i;}A=X2[a+8>>2],X2[a+8>>2]=f,X2[A+12>>2]=f,X2[f+24>>2]=0,X2[f+8>>2]=A,X2[f+12>>2]=a;}A=k+8|0;break A;}A=X2[f+8>>2],X2[f+8>>2]=t,X2[A+12>>2]=t,X2[t+24>>2]=0,X2[t+8>>2]=A,X2[t+12>>2]=f;}if(!((A=X2[6059])>>>0<=b>>>0)){f=X2[6062],X2[(r=f+b|0)+4>>2]=1|(A=A-b|0),X2[6059]=A,X2[6062]=r,X2[f+4>>2]=3|b,A=f+8|0;break A;}}A=0,X2[6180]=48;break A;}r:if(o){i=X2[a+28>>2];f:{if(X2[(A=24528+(i<<2)|0)>>2]==(0|a)){if(X2[A>>2]=r)break f;t=s(i)&t,X2[6057]=t;break r;}if(!(X2[o+(X2[o+16>>2]==(0|a)?16:20)>>2]=r))break r;}X2[r+24>>2]=o,(A=X2[a+16>>2])&&(X2[r+16>>2]=A,X2[A+24>>2]=r),(A=X2[a+20>>2])&&(X2[r+20>>2]=A,X2[A+24>>2]=r);}r:if(f>>>0<=15)X2[a+4>>2]=3|(A=f+b|0),X2[(A=A+a|0)+4>>2]=1|X2[A+4>>2];else if(X2[(i=a+b|0)+4>>2]=1|f,X2[a+4>>2]=3|b,(X2[f+i>>2]=f)>>>0<=255)r=24264+((A=f>>>3|0)<<3)|0,A=(f=X2[6056])&(A=1<<A)?X2[r+8>>2]:(X2[6056]=A|f,r),X2[A+12>>2]=i,X2[r+8>>2]=i,X2[i+12>>2]=r,X2[i+8>>2]=A;else if(r=i,(i=f>>>8|(A=0))&&(A=31,16777215<f>>>0||(A=i,A=28+((A=((A=(A<<=i=i+1048320>>>16&8)<<(n=A+520192>>>16&4))<<(b=A+245760>>>16&2)>>>15|0)-(b|i|n)|0)<<1|f>>>A+21&1)|0)),X2[(o=r)+28>>2]=A,X2[r+16>>2]=0,b=24528+(A<<2)|(X2[r+20>>2]=0),(i=1<<A)&t){A=f<<(31==(0|A)?0:25-(A>>>1|0)|0),b=X2[b>>2];f:{for(;;){if((-8&X2[(i=b)+4>>2])==(0|f))break f;if(b=A>>>29|0,A<<=1,!(b=X2[(n=16+(i+(4&b)|0)|0)>>2]))break;}X2[n>>2]=r,X2[r+24>>2]=i,X2[r+12>>2]=r,X2[r+8>>2]=r;break r;}A=X2[i+8>>2],X2[i+8>>2]=r,X2[A+12>>2]=r,X2[r+24>>2]=0,X2[r+8>>2]=A,X2[r+12>>2]=i;}else X2[b>>2]=r,X2[6057]=i|t,X2[r+24>>2]=b,X2[r+8>>2]=r,X2[r+12>>2]=r;A=a+8|0;break A;}e:if(k){f=X2[r+28>>2];r:{if(X2[(A=24528+(f<<2)|0)>>2]==(0|r)){if(X2[A>>2]=a)break r;u=s(f)&t,X2[24228>>2]=u;break e;}if(!(X2[k+(X2[k+16>>2]==(0|r)?16:20)>>2]=a))break e;}X2[a+24>>2]=k,(A=X2[r+16>>2])&&(X2[a+16>>2]=A,X2[A+24>>2]=a),(A=X2[r+20>>2])&&(X2[a+20>>2]=A,X2[A+24>>2]=a);}i>>>0<=15?(X2[r+4>>2]=3|(A=i+b|0),X2[(A=A+r|0)+4>>2]=1|X2[A+4>>2]):(X2[(a=r+b|0)+4>>2]=1|i,X2[r+4>>2]=3|b,X2[i+a>>2]=i,c&&(f=24264+((A=c>>>3|0)<<3)|0,b=X2[6061],A=(A=1<<A)&n?X2[f+8>>2]:(X2[6056]=A|n,f),X2[A+12>>2]=b,X2[f+8>>2]=b,X2[b+12>>2]=f,X2[b+8>>2]=A),X2[6061]=a,X2[6058]=i),A=r+8|0;}return K2=16+e|0,A;}function q2(A){var e,r=0,f=0,i=0,a=0,n=0,b=0,t=0;A:if(A){e=(f=A-8|0)+(a=-8&(A=X2[A-4>>2]))|0;e:if(!(1&A)){if(!(3&A))break A;if((f=f-(A=X2[f>>2])|0)>>>0<X[6060])break A;if(a=A+a|0,X2[6061]!=(0|f)){if(A>>>0<=255)i=A>>>3|0,A=X2[f+8>>2],(0|(r=X2[f+12>>2]))==(0|A)?(t=X2[6056]&s(i),X2[24224>>2]=t):(X2[r+8>>2]=A,X2[A+12>>2]=r);else {if(b=X2[f+24>>2],(0|f)!=(0|(A=X2[f+12>>2])))r=X2[f+8>>2],X2[A+8>>2]=r,X2[r+12>>2]=A;else if((i=X2[(r=f+20|0)>>2])||(i=X2[(r=f+16|0)>>2])){for(;;)if(n=r,!((i=X2[(r=(A=i)+20|0)>>2])||(r=A+16|0,i=X2[A+16>>2])))break;X2[n>>2]=0;}else A=0;if(b){r=X2[f+28>>2];r:{if(X2[(i=24528+(r<<2)|0)>>2]==(0|f)){if(X2[i>>2]=A)break r;t=X2[6057]&s(r),X2[24228>>2]=t;break e;}if(!(X2[b+(X2[b+16>>2]==(0|f)?16:20)>>2]=A))break e;}X2[A+24>>2]=b,(r=X2[f+16>>2])&&(X2[A+16>>2]=r,X2[r+24>>2]=A),(r=X2[f+20>>2])&&(X2[A+20>>2]=r,X2[r+24>>2]=A);}}}else if(3==(3&(A=X2[4+e>>2]))){X2[4+e>>2]=-2&A,X2[6058]=a,X2[f+a>>2]=a,X2[f+4>>2]=1|a;break A;}}if(!(e>>>0<=f>>>0)&&1&(A=X2[4+e>>2])){e:{if(!(2&A)){if(X2[6062]==(0|e)){if(X2[6062]=f,A=X2[6059]+a|0,X2[6059]=A,X2[f+4>>2]=1|A,X2[6061]!=(0|f))break A;X2[6058]=0,X2[6061]=0;break A;}if(X2[6061]==(0|e)){X2[6061]=f,A=X2[6058]+a|0,X2[6058]=A,X2[f+4>>2]=1|A,X2[A+f>>2]=A;break A;}a=(-8&A)+a|0;r:if(A>>>0<=255)A=A>>>3|0,(0|(i=X2[8+e>>2]))==(0|(r=X2[12+e>>2]))?(t=X2[6056]&s(A),X2[24224>>2]=t):(X2[r+8>>2]=i,X2[i+12>>2]=r);else {if(b=X2[24+e>>2],(0|e)!=(0|(A=X2[12+e>>2])))r=X2[8+e>>2],X2[A+8>>2]=r,X2[r+12>>2]=A;else if((i=X2[(r=20+e|0)>>2])||(i=X2[(r=16+e|0)>>2])){for(;;)if(n=r,!((i=X2[(r=(A=i)+20|0)>>2])||(r=A+16|0,i=X2[A+16>>2])))break;X2[n>>2]=0;}else A=0;if(b){r=X2[28+e>>2];f:{if(X2[(i=24528+(r<<2)|0)>>2]==(0|e)){if(X2[i>>2]=A)break f;t=X2[6057]&s(r),X2[24228>>2]=t;break r;}if(!(X2[b+(X2[b+16>>2]==(0|e)?16:20)>>2]=A))break r;}X2[A+24>>2]=b,(r=X2[16+e>>2])&&(X2[A+16>>2]=r,X2[r+24>>2]=A),(r=X2[20+e>>2])&&(X2[A+20>>2]=r,X2[r+24>>2]=A);}}if(X2[f+a>>2]=a,X2[f+4>>2]=1|a,X2[6061]!=(0|f))break e;X2[6058]=a;break A;}X2[4+e>>2]=-2&A,X2[f+a>>2]=a,X2[f+4>>2]=1|a;}if(a>>>0<=255)A=24264+((r=a>>>3|0)<<3)|0,r=(i=X2[6056])&(r=1<<r)?X2[A+8>>2]:(X2[6056]=r|i,A),X2[r+12>>2]=f,X2[A+8>>2]=f,X2[f+12>>2]=A,X2[f+8>>2]=r;else {X2[f+16>>2]=0,(r=a>>>8|(A=X2[f+20>>2]=0))&&(A=31,16777215<a>>>0||(A=28+((A=((e=(r<<=n=r+1048320>>>16&8)<<(A=r+520192>>>16&4))<<(r=245760+e>>>16&2)>>>15|0)-(r|A|n)|0)<<1|a>>>A+21&1)|0)),i=24528+((X2[(i=f+28|0)>>2]=A)<<2)|0;e:if((r=X2[6057])&(n=1<<A)){r=a<<(31==(0|A)?0:25-(A>>>1|0)|0),A=X2[i>>2];r:{for(;;){if((-8&X2[(i=A)+4>>2])==(0|a))break r;if(A=r>>>29|0,r<<=1,!(A=X2[(n=16+(i+(4&A)|0)|0)>>2]))break;}X2[n>>2]=f,X2[f+24>>2]=i,X2[f+12>>2]=f,X2[f+8>>2]=f;break e;}A=X2[i+8>>2],X2[i+8>>2]=f,X2[A+12>>2]=f,X2[f+24>>2]=0,X2[f+8>>2]=A,X2[f+12>>2]=i;}else X2[i>>2]=f,X2[6057]=r|n,X2[f+24>>2]=i,X2[f+8>>2]=f,X2[f+12>>2]=f;if(A=X2[6064]-1|0,!(X2[6064]=A)){for(f=24680;;)if(f=(A=X2[f>>2])+8|0,!A)break;X2[6064]=-1;}}}}}function w(A,e){var r=0,f=0,i=0,a=0,n=0,b=0,t=A+e|0;A:{e:if(!(1&(r=X2[A+4>>2]))){if(!(3&r))break A;if(e=(r=X2[A>>2])+e|0,(0|(A=A-r|0))!=X2[6061]){if(r>>>0<=255)i=r>>>3|0,r=X2[A+8>>2],(0|(f=X2[A+12>>2]))==(0|r)?(b=X2[6056]&s(i),X2[24224>>2]=b):(X2[f+8>>2]=r,X2[r+12>>2]=f);else {if(n=X2[A+24>>2],(0|(r=X2[A+12>>2]))!=(0|A))f=X2[A+8>>2],X2[r+8>>2]=f,X2[f+12>>2]=r;else if((i=X2[(f=A+20|0)>>2])||(i=X2[(f=A+16|0)>>2])){for(;;)if(a=f,!((i=X2[(f=(r=i)+20|0)>>2])||(f=r+16|0,i=X2[r+16>>2])))break;X2[a>>2]=0;}else r=0;if(n){f=X2[A+28>>2];r:{if(X2[(i=24528+(f<<2)|0)>>2]==(0|A)){if(X2[i>>2]=r)break r;b=X2[6057]&s(f),X2[24228>>2]=b;break e;}if(!(X2[n+(X2[n+16>>2]==(0|A)?16:20)>>2]=r))break e;}X2[r+24>>2]=n,(f=X2[A+16>>2])&&(X2[r+16>>2]=f,X2[f+24>>2]=r),(f=X2[A+20>>2])&&(X2[r+20>>2]=f,X2[f+24>>2]=r);}}}else if(3==(3&(r=X2[4+t>>2])))return X2[4+t>>2]=-2&r,X2[6058]=e,X2[t>>2]=e,void(X2[A+4>>2]=1|e);}e:{if(!(2&(r=X2[4+t>>2]))){if(X2[6062]==(0|t)){if(X2[6062]=A,e=X2[6059]+e|0,X2[6059]=e,X2[A+4>>2]=1|e,X2[6061]!=(0|A))break A;return X2[6058]=0,void(X2[6061]=0);}if(X2[6061]==(0|t))return X2[6061]=A,e=X2[6058]+e|0,X2[6058]=e,X2[A+4>>2]=1|e,void(X2[A+e>>2]=e);e=(-8&r)+e|0;r:if(r>>>0<=255)i=r>>>3|0,r=X2[8+t>>2],(0|(f=X2[12+t>>2]))==(0|r)?(b=X2[6056]&s(i),X2[24224>>2]=b):(X2[f+8>>2]=r,X2[r+12>>2]=f);else {if(n=X2[24+t>>2],(0|t)!=(0|(r=X2[12+t>>2])))f=X2[8+t>>2],X2[r+8>>2]=f,X2[f+12>>2]=r;else if((i=X2[(f=20+t|0)>>2])||(i=X2[(f=16+t|0)>>2])){for(;;)if(a=f,!((i=X2[(f=(r=i)+20|0)>>2])||(f=r+16|0,i=X2[r+16>>2])))break;X2[a>>2]=0;}else r=0;if(n){f=X2[28+t>>2];f:{if(X2[(i=24528+(f<<2)|0)>>2]==(0|t)){if(X2[i>>2]=r)break f;b=X2[6057]&s(f),X2[24228>>2]=b;break r;}if(!(X2[n+(X2[n+16>>2]==(0|t)?16:20)>>2]=r))break r;}X2[r+24>>2]=n,(f=X2[16+t>>2])&&(X2[r+16>>2]=f,X2[f+24>>2]=r),(f=X2[20+t>>2])&&(X2[r+20>>2]=f,X2[f+24>>2]=r);}}if(X2[A+e>>2]=e,X2[A+4>>2]=1|e,X2[6061]!=(0|A))break e;return void(X2[6058]=e);}X2[4+t>>2]=-2&r,X2[A+e>>2]=e,X2[A+4>>2]=1|e;}if(e>>>0<=255)return e=24264+((r=e>>>3|0)<<3)|0,r=(f=X2[6056])&(r=1<<r)?X2[e+8>>2]:(X2[6056]=r|f,e),X2[r+12>>2]=A,X2[e+8>>2]=A,X2[A+12>>2]=e,void(X2[A+8>>2]=r);if(X2[A+16>>2]=0,(f=e>>>8|(r=X2[A+20>>2]=0))&&(r=31,16777215<e>>>0||(r=28+((r=((t=(f<<=a=f+1048320>>>16&8)<<(r=f+520192>>>16&4))<<(f=245760+t>>>16&2)>>>15|0)-(f|r|a)|0)<<1|e>>>r+21&1)|0)),i=24528+((X2[(i=A+28|0)>>2]=r)<<2)|0,!((f=X2[6057])&(a=1<<r)))return X2[i>>2]=A,X2[6057]=f|a,X2[A+24>>2]=i,X2[A+8>>2]=A,void(X2[A+12>>2]=A);f=e<<(31==(0|r)?0:25-(r>>>1|0)|0),r=X2[i>>2];e:{for(;;){if((-8&X2[(i=r)+4>>2])==(0|e))break e;if(r=f>>>29|0,f<<=1,!(r=X2[(a=16+(i+(4&r)|0)|0)>>2]))break;}return X2[a>>2]=A,X2[A+24>>2]=i,X2[A+12>>2]=A,void(X2[A+8>>2]=A);}e=X2[i+8>>2],X2[i+8>>2]=A,X2[e+12>>2]=A,X2[A+24>>2]=0,X2[A+8>>2]=e,X2[A+12>>2]=i;}}function G(){U();}function C(A){return A?65535&A||(0|A)<=-1?void U():-1==(0|(A=o6(A>>>16|0)))?(X2[6180]=48,-1):A<<16:t6()<<16;}function h(A){var e,r=0,f=0;if(r=(r=X2[6181])||(X2[6181]=24732),32==(0|(f=X2[6182]))){if((e=L2(260))&&3&J2[e-4|0]&&v2(e,0,260),!e)return;f=0,X2[6181]=e,X2[e>>2]=r,X2[6182]=0,r=e;}X2[6182]=f+1,X2[(r=(f<<2)+r|0)+132>>2]=0,X2[r+4>>2]=A;}function v2(A,e,r){var f,i,a,n;if(r&&(S2[0|A]=e,S2[(f=A+r|0)-1|0]=e,!(r>>>0<3||(S2[A+2|0]=e,S2[A+1|0]=e,S2[f-3|0]=e,S2[f-2|0]=e,r>>>0<7||(S2[A+3|0]=e,S2[f-4|0]=e,r>>>0<9||(a=(f=0-A&3)+A|0,e=H2(255&e,16843009),X2[a>>2]=e,X2[(f=(r=r-f&-4)+a|0)-4>>2]=e,r>>>0<9||(X2[8+a>>2]=e,X2[4+a>>2]=e,X2[f-8>>2]=e,X2[f-12>>2]=e,r>>>0<25||(X2[24+a>>2]=e,X2[20+a>>2]=e,X2[16+a>>2]=e,X2[12+a>>2]=e,X2[f-16>>2]=e,X2[f-20>>2]=e,X2[f-24>>2]=e,X2[f-28>>2]=e,(r=r-(i=4&a|24)|0)>>>0<32))))))))for(n=f=e,e=a+i|0;;)if(X2[e>>2]=n,X2[e+4>>2]=f,X2[(i=e+24|0)>>2]=n,X2[4+i>>2]=f,X2[(i=e+16|0)>>2]=n,X2[4+i>>2]=f,X2[(i=e+8|0)>>2]=n,X2[4+i>>2]=f,e=e+32|0,!(31<(r=r-32|0)>>>0))break;return A;}function $2(A,e,r){var f=0,i=0,a=0,n=0,b=0,t=0,o=0;A:if(r&&3&e)for(;;){if(S2[0|A]=J2[0|e],f=r-1|0,A=A+1|0,e=e+1|0,1==(0|r))break A;if(r=f,!(3&e))break;}else f=r;if(r=3&A){A:if(!(f>>>0<32||2<(r=r-1|0)>>>0)){e:switch(r-1|0){default:for(S2[A+1|0]=J2[e+1|0],i=X2[e>>2],S2[0|A]=i,S2[A+2|0]=J2[e+2|0],b=f-3|0,t=A+3|0,o=f-20&-16,r=0;;)if(a=X2[(n=e+r|0)+4>>2],X2[(A=r+t|0)>>2]=a<<8|i>>>24,i=X2[n+8>>2],X2[A+4>>2]=i<<8|a>>>24,a=X2[n+12>>2],X2[A+8>>2]=a<<8|i>>>24,i=X2[n+16>>2],X2[A+12>>2]=i<<8|a>>>24,r=r+16|0,!(16<(b=b-16|0)>>>0))break;A=r+t|0,e=3+(e+r|0)|0,f=(f-o|0)-19|0;break A;case 0:for(i=X2[e>>2],S2[0|A]=i,S2[A+1|0]=J2[e+1|0],b=f-2|0,t=A+2|0,o=f-20&-16,r=0;;)if(a=X2[(n=e+r|0)+4>>2],X2[(A=r+t|0)>>2]=a<<16|i>>>16,i=X2[n+8>>2],X2[A+4>>2]=i<<16|a>>>16,a=X2[n+12>>2],X2[A+8>>2]=a<<16|i>>>16,i=X2[n+16>>2],X2[A+12>>2]=i<<16|a>>>16,r=r+16|0,!(17<(b=b-16|0)>>>0))break;A=r+t|0,e=2+(e+r|0)|0,f=(f-o|0)-18|0;break A;case 1:break e;}for(i=X2[e>>2],S2[0|A]=i,b=f-1|0,t=A+1|0,o=f-20&-16,r=0;;)if(a=X2[(n=e+r|0)+4>>2],X2[(A=r+t|0)>>2]=a<<24|i>>>8,i=X2[n+8>>2],X2[A+4>>2]=i<<24|a>>>8,a=X2[n+12>>2],X2[A+8>>2]=a<<24|i>>>8,i=X2[n+16>>2],X2[A+12>>2]=i<<24|a>>>8,r=r+16|0,!(18<(b=b-16|0)>>>0))break;A=r+t|0,e=1+(e+r|0)|0,f=(f-o|0)-17|0;}16&f&&(r=J2[0|e]|J2[e+1|0]<<8,S2[0|A]=r,S2[A+1|0]=r>>>8,S2[A+2|0]=J2[e+2|0],S2[A+3|0]=J2[e+3|0],S2[A+4|0]=J2[e+4|0],S2[A+5|0]=J2[e+5|0],S2[A+6|0]=J2[e+6|0],S2[A+7|0]=J2[e+7|0],S2[A+8|0]=J2[e+8|0],S2[A+9|0]=J2[e+9|0],S2[A+10|0]=J2[e+10|0],S2[A+11|0]=J2[e+11|0],S2[A+12|0]=J2[e+12|0],S2[A+13|0]=J2[e+13|0],S2[A+14|0]=J2[e+14|0],S2[A+15|0]=J2[e+15|0],e=e+16|0,A=A+16|0),8&f&&(S2[0|A]=J2[0|e],S2[A+1|0]=J2[e+1|0],S2[A+2|0]=J2[e+2|0],S2[A+3|0]=J2[e+3|0],S2[A+4|0]=J2[e+4|0],S2[A+5|0]=J2[e+5|0],S2[A+6|0]=J2[e+6|0],S2[A+7|0]=J2[e+7|0],e=e+8|0,A=A+8|0),4&f&&(S2[0|A]=J2[0|e],S2[A+1|0]=J2[e+1|0],S2[A+2|0]=J2[e+2|0],S2[A+3|0]=J2[e+3|0],e=e+4|0,A=A+4|0),2&f&&(S2[0|A]=J2[0|e],S2[A+1|0]=J2[e+1|0],e=e+2|0,A=A+2|0),1&f&&(S2[0|A]=J2[0|e]);}else {if(f>>>0<16)r=f;else for(r=f-16|0;;)if(X2[A>>2]=X2[e>>2],X2[A+4>>2]=X2[e+4>>2],X2[A+8>>2]=X2[e+8>>2],X2[A+12>>2]=X2[e+12>>2],A=A+16|0,e=e+16|0,!(15<(f=f-16|0)>>>0))break;if(8&r&&(f=X2[e+4>>2],X2[A>>2]=X2[e>>2],X2[A+4>>2]=f,e=e+8|0,A=A+8|0),4&r&&(X2[A>>2]=X2[e>>2],e=e+4|0,A=A+4|0),2&r&&(S2[0|A]=J2[0|e],S2[A+1|0]=J2[e+1|0],e=e+2|0,A=A+2|0),1&r)return void(S2[0|A]=J2[0|e]);}}function q(A){var e,r=0,f=(P2(0),0);A:{e:{if(m(A),1065353216<=(e=2147483647&(f=S[2]))>>>0){if(1065353216!=(0|e))break e;return P2(1.5707963267948966*+A+752316384526264e-51);}if(e>>>0<=1056964607){if(e-8388608>>>0<956301312)break A;return e=P2(A*A),P2(P2(P2(P2(e*P2(P2(e*P2(P2(e*P2(-.008656363002955914))+P2(-.04274342209100723)))+P2(.16666586697101593)))/P2(P2(e*P2(-.7066296339035034))+P2(1)))*A)+A);}return A=P2(P2(P2(1)-P2(j2(A)))*P2(.5)),r=O2(+A),r+=r*+P2(P2(A*P2(P2(A*P2(P2(A*P2(-.008656363002955914))+P2(-.04274342209100723)))+P2(.16666586697101593)))/P2(P2(A*P2(-.7066296339035034))+P2(1))),A=P2(1.5707963267948966-(r+r)),(0|f)<0?P2(-A):A;}A=P2(P2(0)/P2(A-A));}return A;}function F(A){var e,r,f,i=0,a=(P2(0),0),n=0;P2(0),P2(0);m(A);A:{if(1283457024<=(i=2147483647&(n=S[2]))>>>0){if(A!=A)break A;return P2((0|n)<0?-1.570796251296997:1.570796251296997);}e:{if(i>>>0<=1054867455){if(a=-1,964689920<=i>>>0)break e;break A;}A=P2(j2(A)),i>>>0<=1066926079?a=i>>>0<=1060110335?(A=P2(P2(P2(A+A)+P2(-1))/P2(A+P2(2))),0):(A=P2(P2(A+P2(-1))/P2(A+P2(1))),1):a=i>>>0<=1075576831?(A=P2(P2(A+P2(-1.5))/P2(P2(A*P2(1.5))+P2(1))),2):(A=P2(P2(-1)/A),3);}if(i=a,r=P2(A*A),e=P2(r*r),f=P2(e*P2(P2(e*P2(-.106480173766613))+P2(-.19999158382415771))),e=P2(r*P2(P2(e*P2(P2(e*P2(.06168760731816292))+P2(.14253635704517365)))+P2(.333333283662796))),(0|i)<=-1)return P2(A-P2(A*P2(f+e)));A=P2(U2[1024+(i<<=2)>>2]-P2(P2(P2(A*P2(f+e))-U2[1040+i>>2])-A)),A=(0|n)<0?P2(-A):A;}return A;}function B2(A,e){var r,f,i,a=0,n=0,b=P2(0);if(!(e==e&A==A))return P2(A+e);if(m(e),1065353216==(0|(a=S[2])))return F(A);i=a>>>30&2,m(A),r=i|(n=S[2])>>>31;A:{e:{r:{f:{if(!(f=2147483647&n)){i:switch(r-2|0){case 0:break f;case 1:break i;default:break r;}return P2(-3.1415927410125732);}if(2139095040!=(0|(a&=2147483647))){if(!a)break A;if(!(f>>>0<=218103808+a>>>0&&2139095040!=(0|f)))break A;if(A=b=218103808+f>>>0<a>>>0&&(b=P2(0),i)?b:F(P2(j2(P2(A/e)))),r>>>0<=2){i:switch(r-1|0){case 0:return P2(-A);case 1:break i;default:break r;}return P2(P2(3.1415927410125732)-P2(A+P2(8.742277657347586e-8)));}return P2(P2(A+P2(8.742277657347586e-8))+P2(-3.1415927410125732));}if(2139095040==(0|f))break e;return U2[1072+(r<<2)>>2];}A=P2(3.1415927410125732);}return A;}return U2[1056+(r<<2)>>2];}return P2((0|n)<0?-1.5707963705062866:1.5707963705062866);}function R(A){var e;for(X2[12+(K2=e=K2-16|0)>>2]=A|=0,X2[12+e>>2]||(X2[12+e>>2]=1);;){if(A=L2(X2[12+e>>2]),(X2[8+e>>2]=A)||(X2[(A=K2-16|0)+12>>2]=24992,X2[A+8>>2]=2,X2[4+e>>2]=X2[X2[A+12>>2]>>2],!X2[4+e>>2]))break;N2[X2[4+e>>2]]();}return K2=16+e|0,X2[8+e>>2];}function D(A){var e;return X2[12+(K2=e=K2-16|0)>>2]=A|=0,A=R(X2[12+e>>2]),K2=16+e|0,0|A;}function n(A){var e;X2[12+(K2=e=K2-16|0)>>2]=A|=0,q2(X2[12+e>>2]),K2=16+e|0;}function T(A,e){e|=0;var r;X2[12+(K2=r=K2-16|0)>>2]=A|=0,X2[8+r>>2]=e,n(X2[12+r>>2]),K2=16+r|0;}function W(A){var e;X2[12+(K2=e=K2-16|0)>>2]=A|=0,n(X2[12+e>>2]),K2=16+e|0;}function I(A,e){e|=0;var r;X2[12+(K2=r=K2-16|0)>>2]=A|=0,X2[8+r>>2]=e,W(X2[12+r>>2]),K2=16+r|0;}function x(A,e){e|=0;var r,f,i,a,n=0,b=0,t=0;for(X2[12+(K2=a=K2-16|0)>>2]=A|=0,X2[8+a>>2]=e,X2[12+a>>2]||(X2[12+a>>2]=1),X[8+a>>2]<4&&(X2[8+a>>2]=4);;){i=4+a|0,n=X2[12+a>>2];A:{if(16==(0|(A=X2[8+a>>2])))A=L2(n);else {if(e=28,3&A)break A;for(b=A>>>2|0,t=0;;){if(!b)break;b&=b-1,t=t+1|0;}if(1!=(0|t))break A;if(e=48,-64-A>>>0<n>>>0)break A;if((e=16<(A=16<A>>>0?A:16)>>>0?A:16)-1&e){for(b=32;;)if(b=(A=b)<<1,!(A>>>0<e>>>0))break;}else A=e;-64-A>>>0<=n>>>0?(X2[6180]=48,e=0):(n=L2((12|(b=n>>>(e=0)<11?16:n+19&-16))+A|0))&&(e=n-8|0,n&A-1?(t=(-8&(f=X2[(r=n-4|0)>>2]))-(n=(A=15<(n=((A+n|0)-1&0-A)-8|0)-e>>>0?n:A+n|0)-e|0)|0,3&f?(X2[A+4>>2]=t|1&X2[A+4>>2]|2,X2[(t=A+t|0)+4>>2]=1|X2[t+4>>2],X2[r>>2]=n|1&X2[r>>2]|2,X2[A+4>>2]=1|X2[A+4>>2],w(e,n)):(X2[A+4>>2]=t,X2[A>>2]=n+X2[e>>2])):A=e,3&(e=X2[A+4>>2])&&((n=-8&e)>>>0<=b+16>>>0||(X2[A+4>>2]=b|1&e|2,X2[(e=A+b|0)+4>>2]=3|(b=n-b|0),X2[(n=A+n|0)+4>>2]=1|X2[n+4>>2],w(e,b))),e=A+8|0),A=e;}e=48,A&&(X2[i>>2]=A,e=0);}if(e){if(X2[(A=K2-16|0)+12>>2]=24992,X2[A+8>>2]=2,X2[a>>2]=X2[X2[A+12>>2]>>2],X2[a>>2]){N2[X2[a>>2]]();continue;}X2[4+a>>2]=0;}break;}return K2=16+a|0,X2[4+a>>2];}function y(A,e){e|=0;var r;return X2[12+(K2=r=K2-16|0)>>2]=A|=0,X2[8+r>>2]=e,A=x(X2[12+r>>2],X2[8+r>>2]),K2=16+r|0,0|A;}function V(A,e){e|=0;var r;X2[12+(K2=r=K2-16|0)>>2]=A|=0,X2[8+r>>2]=e,q2(X2[12+r>>2]),K2=16+r|0;}function p(A,e){e|=0;var r;X2[12+(K2=r=K2-16|0)>>2]=A|=0,X2[8+r>>2]=e,V(X2[12+r>>2],X2[8+r>>2]),K2=16+r|0;}function e2(A,e){var r;return X2[12+(r=K2-16|0)>>2]=A,X2[8+r>>2]=e,X2[4+r>>2]=4,X2[r>>2]=X2[X2[12+r>>2]>>2],X2[X2[12+r>>2]>>2]=X2[8+r>>2],X2[r>>2];}function r2(){var A,e;X2[12+(e=K2-16|0)>>2]=24096,X2[8+e>>2]=2,X2[12+(K2=A=K2-16|0)>>2]=X2[X2[12+e>>2]>>2],N2[X2[12+A>>2]](),k2(1130),U();}function f2(){k2(1170),U();}function i2(A,e,r){var f,i=0;return K2=f=K2-16|0,(0|r)<=(i=-1)?X2[6180]=28:(A=0|Z(0|A,0|e,0|r,12+f|0))?X2[6180]=A:i=X2[12+f>>2],K2=16+f|0,i;}function a2(A){var e=X2[A+60>>2];if(X2[A+60>>2]=e-1|e,8&(e=X2[A>>2]))return X2[A>>2]=32|e,1;X2[A+4>>2]=0,X2[A+8>>2]=0,e=X2[A+40>>2],X2[A+24>>2]=e,X2[A+20>>2]=e,X2[A+16>>2]=e+X2[A+44>>2];}function J(A,e,r){var f,i=0,a=0,n=0,b=0;A:{if(!(i=X2[r+16>>2])){if(a2(r))break A;i=X2[r+16>>2];}if(i-(n=X2[r+20>>2])>>>0<e>>>0)return void N2[X2[r+32>>2]](r,A,e);e:if(!(X2[r+64>>2]<0)){for(i=A;;){if((0|e)==(0|a))break e;if(a=a+1|0,f=e+i|0,i=b=i-1|0,10==J2[f-1|0])break;}if(i=A,N2[X2[r+32>>2]](r,i,A=1+(e-a|0)|0)>>>0<A>>>0)break A;A=1+(e+b|0)|0,n=X2[r+20>>2],e=a-1|0;}$2(n,A,e),X2[r+20>>2]=X2[r+20>>2]+e;}}function n2(A,e){if(!A)return 0;if(A){A:if(e>>>0<=127)S2[0|A]=e,A=1;else {e:{if(!X2[6251]){if(57216!=(-128&e))break e;S2[0|A]=e,A=1;break A;}if(e>>>0<=2047){S2[A+1|0]=63&e|128,S2[0|A]=e>>>6|192,A=2;break A;}if(!(57344!=(-8192&e)&&55296<=e>>>0)){S2[A+2|0]=63&e|128,S2[0|A]=e>>>12|224,S2[A+1|0]=e>>>6&63|128,A=3;break A;}if(e-65536>>>0<=1048575){S2[A+3|0]=63&e|128,S2[0|A]=e>>>18|240,S2[A+2|0]=e>>>6&63|128,S2[A+1|0]=e>>>12&63|128,A=4;break A;}}X2[6180]=25,A=-1;}}else A=1;return A;}function t2(A,e,r){var f,i,a=0;if(X2[204+(K2=i=K2-208|0)>>2]=r,X2[(f=192+i|0)>>2]=0,X2[4+f>>2]=0,X2[(f=184+i|0)>>2]=0,X2[4+f>>2]=0,X2[(f=176+i|0)>>2]=0,X2[4+f>>2]=0,X2[168+i>>2]=0,X2[172+i>>2]=0,X2[160+i>>2]=0,X2[164+i>>2]=0,X2[200+i>>2]=r,0<=(0|o2(0,e,200+i|0,80+i|0,160+i|0))){f=X2[A>>2],X2[A+60>>2]<=0&&(X2[A>>2]=-33&f);A:{e:{if(X2[A+44>>2]){if(X2[A+16>>2])break e;}else X2[A+44>>2]=80,X2[A+24>>2]=0,X2[A+16>>2]=0,X2[A+20>>2]=0,a=X2[A+40>>2],X2[A+40>>2]=i;if(a2(A))break A;}o2(A,e,200+i|0,80+i|0,160+i|0);}a&&(N2[X2[A+32>>2]](A,0,0),X2[A+44>>2]=0,X2[A+40>>2]=a,X2[A+24>>2]=0,X2[A+16>>2]=0,X2[A+20>>2]=0),X2[A>>2]=X2[A>>2]|32&f;}K2=208+i|0;}function o2(A,e,r,f,i){var a,n=0,b=0,t=0,o=0,c=0,k=0,u=0,s=0,l=0,B=0,v=0,d=0,Z=0,_=0,g=0,E=0,Q=0,w=0,G=0,C=0,h=0,F=0,Y=0,m=0,N=0,R=0,x=336+(K2=a=K2-880|0)|8,y=55+a|0,V=-338-a|0,D=336+a|9,p=656+a|0,T=336+a|0,W=-336-a|0,I=56+a|0;A:{e:{r:for(;;){f:if(o=e,!((2147483647-E|0)<(0|n))){E=n+E|0;i:{a:{n:{if(n=J2[0|o])for(;;){b:{t:if(n&=255){if(37!=(0|n))break b;for(n=b=e;;){if(37!=J2[n+1|0]){e=n;break t;}if(b=b+1|0,t=J2[n+2|0],n=e=n+2|0,37!=(0|t))break;}}else b=e;if((0|(Q=2147483647-E|0))<(0|(n=b-o|0)))break f;if(!A||32&J2[0|A]||J(o,n,A),n)continue r;t=-1,9<(k=(c=S2[n=e+1|0])-48|0)>>>0||(n=(b=36==J2[e+2|0])?e+3|0:n,h=b?1:h,c=S2[(b?3:1)+e|0],t=b?k:-1);t:if(31<(e=c-32|(b=0))>>>0)e=n;else if(75913&(u=1<<e))for(;;){if(b|=u,31<(k=(c=S2[e=n+1|0])-32|0)>>>0)break t;if(n=e,!(75913&(u=1<<k)))break;}else e=n;t:if(42==(0|c)){if(9<(n=S2[e+1|0]-48|0)>>>0||36!=J2[e+2|0]){if(h)break n;if(k=e+1|0,!A){B=h=0;break t;}e=X2[r>>2],X2[r>>2]=e+4,h=0,B=X2[e>>2];}else X2[(n<<2)+i>>2]=10,k=e+3|0,B=X2[((S2[e+(h=1)|0]<<3)+f|0)-384>>2];-1<(0|B)||(B=0-B|0,b|=8192);}else if(9<(u=c-48|(B=0))>>>0)k=e;else {for(n=0;;)if(B=-1,c=S2[e+1|0],e=k=e+1|0,n=B=n>>>0<=214748364?(2147483647-(n=H2(n,10))|0)<(0|u)?-1:n+u|0:B,!((u=c-48|0)>>>0<10))break;if((0|B)<0)break f;}if(c=-1,46!=J2[(n=0)|k])e=k,_=0;else if(42==(0|(c=S2[k+1|0]))){if(9<(e=S2[k+2|0]-48|0)>>>0||36!=J2[k+3|0]){if(h)break n;e=k+2|0,c=0,A&&(k=X2[r>>2],X2[r>>2]=k+4,c=X2[k>>2]);}else X2[(e<<2)+i>>2]=10,e=k+4|0,c=X2[((S2[k+2|0]<<3)+f|0)-384>>2];_=(-1^c)>>>31|0;}else if(e=k+1|0,9<(l=c-48|0)>>>0)_=1,c=0;else for(k=0,u=e;;)if(c=-1,k>>>0<=214748364&&(c=(2147483647-(e=H2(k,10))|0)<(0|l)?-1:e+l|0),s=S2[u+(_=1)|0],u=e=u+1|0,k=c,!((l=s-48|0)>>>0<10))break;for(;;){if(u=n,57<(n=S2[0|e]-65|0)>>>0)break n;if(e=e+1|0,!((n=J2[2928+(n+H2(u,58)|0)|0])-1>>>0<8))break;}if(!n)break n;t:{o:{c:{if(27==(0|n)){if((0|t)<=-1)break c;break n;}if((0|t)<0)break o;X2[(t<<2)+i>>2]=n,t=X2[(n=(t<<3)+f|0)+4>>2],X2[56+a>>2]=X2[n>>2],X2[60+a>>2]=t;}if(n=0,A)break t;continue r;}if(!A){E=0;break A;}c2(56+a|0,n,r);}t=-65537&b,v=8192&b?t:b;t:{o:{c:if(n=S2[e-1|0],!(55<(n=(k=u&&3==(15&n)?-33&n:n)-65|0)>>>0)){k:{u:{s:{l:{B:{v:{d:{Z:{_:{g:{E:{Q:switch(n-1|0){case 51:s=0,u=X2[56+a>>2],n=X2[60+a>>2],l=2902;break E;case 44:if(7<(b=255&u)>>>(n=0))continue r;w:switch(b-1|0){default:case 0:X2[X2[56+a>>2]>>2]=E;continue r;case 1:b=X2[56+a>>2],X2[b>>2]=E,X2[b+4>>2]=E>>31;continue r;case 2:$[X2[56+a>>2]>>1]=E;continue r;case 3:S2[X2[56+a>>2]]=E;continue r;case 5:X2[X2[56+a>>2]>>2]=E;continue r;case 4:continue r;case 6:break w;}b=X2[56+a>>2],X2[b>>2]=E,X2[b+4>>2]=E>>31;continue r;case 46:c=8<c>>>0?c:8,v|=8,k=120;case 22:case 54:if(s=0,l=2902,!((n=b=X2[60+a>>2])|(u=X2[56+a>>2]))){o=I;break g;}for(t=32&k,o=I;;)if(S2[0|(o=o-1|0)]=t|J2[3536+(15&u)|0],!((u=(15&(b=n))<<28|u>>>4)|(n=n>>>4|0)))break;if(!(8&v))break g;if(!(X2[56+a>>2]|X2[60+a>>2]))break g;l=2902+(k>>4)|0,s=2;break g;case 45:if(o=I,(n=b=X2[60+a>>2])|(u=X2[56+a>>2]))for(;;)if(S2[0|(o=o-1|0)]=7&u|48,!((u=(7&(b=n))<<29|u>>>3)|(n=n>>>3|0)))break;if(s=0,l=2902,!(8&v))break g;c=(0|(n=I-o|0))<(0|c)?c:n+1|0;break g;case 0:case 2:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 18:case 19:case 20:case 21:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 32:case 38:case 40:case 41:case 42:case 47:case 48:case 50:case 52:case 53:break c;case 1:break l;case 17:break B;case 49:break d;case 43:break Z;case 33:break _;case 34:case 39:break Q;default:break k;}n=b=X2[60+a>>2],u=X2[56+a>>2],(0|n)<-1||(0|n)<=-1?(n=0-((0!=(0|u))+n|0)|0,X2[56+a>>2]=u=0-u|0,X2[60+a>>2]=n,s=1,l=2902):l=2048&v?(s=1,2903):(s=1&v)?2904:2902;}if(n>>>0<1)b=u,o=I;else for(o=I;;)if(N=o=o-1|0,R=u-P(b=b6(u,n,10),t=k=H,10,0)|48,S2[0|N]=R,k=9<n>>>0,u=b,n=t,!k)break;if(n=b)for(;;)if(S2[0|(o=o-1|0)]=n-H2(b=(n>>>0)/10|0,10)|48,t=9<n>>>0,n=b,!t)break;}if((0|c)<0&&_)break f;if(v=_?-65537&v:v,n=X2[56+a>>2],b=X2[60+a>>2],!(c||n|b)){n=o=I,c=0;break i;}c=(0|(n=!(n|b)+(I-o|0)|0))<(0|c)?c:n;break o;}S2[55+a|0]=X2[56+a>>2],s=0,l=2902,c=1,o=y,n=I,v=t;break i;}o=X2[6180],n=0,X2[6257]||(X2[6257]=25004);Z:{_:{for(;;){if((0|o)==J2[n+1248|0])break;if((b=77)==(0|(n=n+1|0)))break _;}if(!(b=n)){o=1328;break Z;}}for(n=1328;;)if(k=J2[0|n],n=o=n+1|0,!(k||(n=o,b=b-1|0)))break;}break v;}o=(n=X2[56+a>>2])||2912;}k=l=o,v=(s=0)!=(0|(b=_=(0|c)<0?2147483647:c));v:{d:{Z:{_:if(b){if(3&k)for(;;){if(!J2[0|k]){n=b;break Z;}if(v=1!=(0|b),n=b-1|0,k=k+1|0,1==(0|b))break _;if(b=n,!(3&k))break;}else n=b;}else n=b;if(!v)break d;}Z:if(J2[0|k]&&!(n>>>0<4)){for(b=3&(u=n-4|0),u=4+((-4&u)+k|0)|0;;){if((-1^(v=X2[k>>2]))&v-16843009&-2139062144)break Z;if(k=k+4|0,!(3<(n=n-4|0)>>>0))break;}n=b,k=u;}if(n)for(;;){if(!J2[0|k])break v;if(k=k+1|0,!(n=n-1|0))break;}}k=0;}if(n=(b=k?k-o|0:_)+l|0,l=2902,(0|c)<=-1)break t;v=t,c=b;break i;}if(b=o=X2[56+a>>2],c)break s;n=0;break u;}X2[12+a>>2]=0,X2[8+a>>2]=X2[56+a>>2],X2[56+a>>2]=8+a,c=-1,b=8+a|0;}n=0,o=b;s:{for(;;){if(!(t=X2[b>>2]))break s;if((k=(0|(t=n2(4+a|0,t)))<0)||c-n>>>0<t>>>0)break;if(b=b+4|0,!((n=n+t|0)>>>0<c>>>0))break s;}if(k)break e;}if((0|n)<0)break f;}k=73728&v;u:if(!(k||(0|B)<=(0|n))){if(v2(a+64|0,32,(b=(l=B-n|0)>>>0<256)?l:256),t=32&(u=X2[A>>2]),b){if(t)break u;}else {for(b=!t,t=l;;)if(1&b&&(J(a+64|0,256,A),u=X2[A>>2]),b=!(c=32&u),!(255<(t=t-256|0)>>>0))break;if(c)break u;l&=255;}J(a+64|0,l,A);}u:if(n)for(b=0;;){if(!(t=X2[o>>2]))break u;if(n>>>0<(b=(t=n2(4+a|0,t))+b|0)>>>0)break u;if(32&J2[0|A]||J(4+a|0,t,A),o=o+4|0,!(b>>>0<n>>>0))break;}u:if(8192==(0|k)&&!((0|B)<=(0|n))){if(v2(a+64|0,32,(b=(c=B-n|0)>>>0<256)?c:256),t=32&(o=X2[A>>2]),b){if(t)break u;}else {for(b=!t,t=c;;)if(1&b&&(J(a+64|0,256,A),o=X2[A>>2]),b=!(k=32&o),!(255<(t=t-256|0)>>>0))break;if(k)break u;c&=255;}J(a+64|0,c,A);}n=(0|n)<(0|B)?B:n;continue r;}if(_&&(0|c)<=-1)break f;Z=M[56+a>>3],X2[364+a>>2]=0,L(+Z),n=0|S[1],g=(0|n)<-1||(0|n)<=-1?(Z=-Z,Q=1,3552):2048&v?(Q=1,3555):(Q=1&v)?3558:3553;k:if((G=j2(Z))!=j&G==G){if(Z=function A(e,r){var f,i,a;if(L(+e),i=0|S[1],a=0|S[0],2047!=(0|(f=i>>>20&2047))){if(!f)return 0==e?X2[r>>2]=0:(e=A(0x10000000000000000*e,r),X2[r>>2]=X2[r>>2]+-64),e;X2[r>>2]=f-1022,z(0,0|a),z(1,-2146435073&i|1071644672),e=+O();}return e;}(Z,364+a|0),0!=(Z+=Z)&&(X2[364+a>>2]=X2[364+a>>2]-1),97==(0|(C=32|k))){if(b=g+9|0,n=g,s=(g=32&k)?b:n,!(11<c>>>0)&&12!=(0|c)){for(n=c-12|0,G=16;;)if(G*=16,!((b=n)>>>0<=(n=n+1|0)>>>0))break;Z=45==J2[0|s]?-(G+(-Z-G)):Z+G-G;}t=T,n=(u=X2[364+a>>2])>>31;u:{if(n^=n+u){for(b=0;;)if(S2[335+(b+a|0)|0]=n-H2(o=(n>>>0)/10|0,10)|48,b=b-1|0,t=9<n>>>0,n=o,!t)break;if(t=336+(b+a|0)|0,b)break u;}S2[0|(t=t-1|0)]=48;}for(l=2|Q,S2[0|(_=t-2|0)]=k+15,S2[t-1|0]=(0|u)<0?45:43,o=8&v,b=336+a|0;;)if(t=n=b,k=g,b=j2(Z)<2147483648?~~Z:-2147483648,S2[0|t]=k|J2[b+3536|0],Z=16*(Z-(0|b)),1==((b=n+1|0)-(336+a|0)|0)&&(o||0<(0|c)||0!=Z)&&(S2[n+1|0]=46,b=n+2|0),0==Z)break;if(n=-1,!((2147483645-(o=(g=T-_|0)+l|0)|0)<(0|c))){u=b-(336+a|0)|0,o=(c=c&&(b+V|0)<(0|c)?c+2|0:u)+o|0,v&=73728;u:if(!(v||(0|B)<=(0|o))){if(v2(a+64|0,32,(n=(k=B-o|0)>>>0<256)?k:256),b=32&(t=X2[A>>2]),n){if(b)break u;}else {for(n=!b,b=k;;)if(1&n&&(J(a+64|0,256,A),t=X2[A>>2]),n=!(d=32&t),!(255<(b=b-256|0)>>>0))break;if(d)break u;k&=255;}J(a+64|0,k,A);}32&J2[0|A]||J(s,l,A);u:if(65536==(0|v)&&!((0|B)<=(0|o))){if(v2(a+64|0,48,(n=(l=B-o|0)>>>0<256)?l:256),b=32&(t=X2[A>>2]),n){if(b)break u;}else {for(n=!b,b=l;;)if(1&n&&(J(a+64|0,256,A),t=X2[A>>2]),n=!(k=32&t),!(255<(b=b-256|0)>>>0))break;if(k)break u;l&=255;}J(a+64|0,l,A);}32&J2[0|A]||J(336+a|0,u,A),c=c-u|0;u:if(!((0|c)<1)){if(v2(a+64|0,48,(b=c>>>0<256)?c:256),n=32&(t=X2[A>>2]),b){if(n)break u;}else {for(n=!n,b=c;;)if(1&n&&(J(a+64|0,256,A),t=X2[A>>2]),n=!(k=32&t),!(255<(b=b-256|0)>>>0))break;if(k)break u;c&=255;}J(a+64|0,c,A);}32&J2[0|A]||J(_,g,A);u:if(8192==(0|v)&&!((0|B)<=(0|o))){if(v2(a+64|0,32,(n=(c=B-o|0)>>>0<256)?c:256),b=32&(t=X2[A>>2]),n){if(b)break u;}else {for(n=!b,b=c;;)if(1&n&&(J(a+64|0,256,A),t=X2[A>>2]),n=!(k=32&t),!(255<(b=b-256|0)>>>0))break;if(k)break u;c&=255;}J(a+64|0,c,A);}n=(0|o)<(0|B)?B:o;}}else {for(n=(0|c)<0,0==Z?o=X2[364+a>>2]:(o=X2[364+a>>2]-28|0,X2[364+a>>2]=o,Z*=268435456),s=n?6:c,t=_=(0|o)<0?368+a|0:p;;)if(t=(b=t)+4|0,0==(Z=1e9*(Z-((X2[b>>2]=n=Z<4294967296&0<=Z?~~Z>>>0:0)>>>0))))break;if((0|o)<1)n=t,b=_;else for(b=_;;){if(c=(0|o)<29?o:29,!((n=t-4|0)>>>0<b>>>0)){for(o=c,u=0;;)if(m=u,u=X2[(l=n)>>2],n=31&o,w=32<=(63&o)>>>0?(d=u<<n,0):(d=(1<<n)-1&u>>>32-n,u<<n),n=d,N=l,R=(d=u=m+w|0)-P(u=b6(u,u>>>0<w>>>0?n+1|0:n,1e9),H,1e9,0)|0,X2[N>>2]=R,!(b>>>0<=(n=l-4|0)>>>0))break;u&&(X2[(b=b-4|0)>>2]=u);}for(;;)if(!(b>>>0<(n=t)>>>0)||X2[(t=n-4|0)>>2])break;if(o=X2[364+a>>2]-c|0,t=n,!(0<(0|(X2[364+a>>2]=o))))break;}if((0|o)<=-1)for(u=1+((s+25>>>0)/9|0)|0;;){if(c=(0|o)<-9?9:0-o|0,n>>>0<=b>>>0)b=X2[b>>2]?b:b+4|0;else {for(l=1e9>>>c|0,d=-1<<c^-1,o=0,t=b;;)if(w=o,o=X2[t>>2],X2[t>>2]=w+(o>>>c|0),o=H2(l,o&d),!((t=t+4|0)>>>0<n>>>0))break;b=X2[b>>2]?b:b+4|0,o&&(X2[n>>2]=o,n=n+4|0);}if(o=c+X2[364+a>>2]|0,n=(0|u)<n-(t=102==(0|C)?_:b)>>2?t+(u<<2)|0:n,!((0|(X2[364+a>>2]=o))<0))break;}if(!(n>>>(t=0)<=b>>>0||(t=H2(_-b>>2,9),(c=X2[b>>2])>>>0<10)))for(o=10;;)if(t=t+1|0,!((o=H2(o,10))>>>0<=c>>>0))break;if((0|(o=(s-(u=102==(0|C)?0:t)|0)-(l=(C=103==(0|C))&0!=(0|s))|0))<(H2(n-_>>2,9)-9|0)){if(c=(Y=_+((w=(0|(d=o+9216|0))/9|0)<<2)|0)-4092|0,o=10,((m=d)-(d=H2(w,9))|0)<=7)for(u=9215+(((s-l|0)-u|0)-d|0)|0;;)if(o=H2(o,10),!((0|(u=u+1|0))<7))break;if(w=c+4|0,(u=(l=X2[c>>2])-H2(o,d=(l>>>0)/(o>>>0)|0)|0)||(0|w)!=(0|n)){u:{if(!(1&d)){if(Z=9007199254740992,c>>>0<=b>>>0)break u;if(1e9!=(0|o))break u;if(!(1&S2[c-4|0]))break u;}Z=9007199254740994;}if(G=u>>>0<(d=o>>>1|0)>>>0?.5:(0|n)==(0|w)&&(0|d)==(0|u)?1:1.5,Q&&45==J2[0|g]&&(G=-G,Z=-Z),X2[c>>2]=u=l-u|0,Z+G!=Z){if(1e9<=(X2[c>>2]=o=o+u|0)>>>0){for(t=Y-4096|0;;)if(t>>>(X2[t+4>>2]=0)<b>>>0&&(X2[(b=b-4|0)>>2]=0),o=X2[t>>2]+1|0,X2[t>>2]=o,t=t-4|0,!(999999999<o>>>0))break;c=t+4|0;}if(t=H2(_-b>>2,9),!((u=X2[b>>2])>>>0<10))for(o=10;;)if(t=t+1|0,!((o=H2(o,10))>>>0<=u>>>0))break;}}n=(o=c+4|0)>>>0<n>>>0?o:n;}u:{for(;;){if((u=n)>>>(c=0)<=b>>>0)break u;if(X2[(n=u-4|0)>>2])break;}c=1;}if(C){if(s=((o=(0|t)<(0|(n=s||1))&-5<(0|t))?-1^t:-1)+n|0,k=(o?-1:-2)+k|0,!(l=8&v)){if(n=9,c&&(l=X2[u-4>>2])&&!((l>>>(n=0))%10|0))for(o=10;;)if(n=n+1|0,(l>>>0)%((o=H2(o,10))>>>0)|0)break;o=H2(u-_>>2,9)-9|0,s=102==(32|k)?((l=0)|s)<(0|(n=0<(0|(n=o-n|0))?n:0))?s:n:((l=0)|s)<(0|(n=0<(0|(n=(t+o|0)-n|0))?n:0))?s:n;}}else l=8&v;if(n=-1,!((0|((w=s|l)?2147483645:2147483646))<(0|s))){if(C=1+((0!=(0|w))+s|0)|0,Y=102!=(32|k)){if(o=T,n=t>>31,n^=n+t)for(;;)if(S2[0|(o=o-1|0)]=n-H2(d=(n>>>0)/10|0,10)|48,F=9<n>>>0,n=d,!F)break;if((T-o|0)<=1){for(n=o-1|0;;)if(S2[0|n]=48,o=T-n|0,n=d=n-1|0,!((0|o)<2))break;o=d+1|0;}if(S2[0|(F=o-2|0)]=k,n=-1,S2[o-1|0]=(0|t)<0?45:43,(2147483647-C|0)<(0|(t=T-F|0)))break k;}else {if((2147483647-C|0)<(0|t))break k;t=0<(0|t)?t:0;}if(!((2147483647^Q)<(0|(o=t+C|0)))){d=o+Q|0,v&=73728;u:if(!(v||(0|B)<=(0|d))){if(v2(a+64|0,32,(n=(k=B-d|0)>>>0<256)?k:256),t=32&(o=X2[A>>2]),n){if(t)break u;}else {for(n=!t,t=k;;)if(1&n&&(J(a+64|0,256,A),o=X2[A>>2]),n=!(C=32&o),!(255<(t=t-256|0)>>>0))break;if(C)break u;k&=255;}J(a+64|0,k,A);}32&J2[0|A]||J(g,Q,A);u:if(65536==(0|v)&&!((0|B)<=(0|d))){if(v2(a+64|0,48,(n=(k=B-d|0)>>>0<256)?k:256),t=32&(o=X2[A>>2]),n){if(t)break u;}else {for(n=!t,t=k;;)if(1&n&&(J(a+64|0,256,A),o=X2[A>>2]),n=!(g=32&o),!(255<(t=t-256|0)>>>0))break;if(g)break u;k&=255;}J(a+64|0,k,A);}u:if(Y){s:if(!((0|s)<0)){for(k=c?u:b+4|0,c=b;;){o=D;l:{if(n=X2[c>>2]){for(t=0;;)if(S2[344+(t+a|0)|0]=n-H2(o=(n>>>0)/10|0,10)|48,t=t-1|0,u=9<n>>>0,n=o,!u)break;if(o=345+(t+a|0)|0,t)break l;}S2[0|(o=o-1|0)]=48;}if((0|b)!=(0|c)){if(!(o>>>0<=336+a>>>0))for(v2(336+a|0,48,o+W|0);;)if(!(336+a>>>0<(o=o-1|0)>>>0))break;}else 32&J2[0|A]||J(o,1,A),o=o+1|0,(0|s)<1&&!l||32&J2[0|A]||J(3587,1,A);if(n=D-o|0,32&J2[0|A]||J(o,(0|n)<(0|s)?n:s,A),c=c+4|0,!(-1<(0|(s=s-n|0))&&c>>>0<k>>>0))break;}if(!((0|s)<1)){if(v2(a+64|0,48,(b=s>>>0<256)?s:256),n=32&(t=X2[A>>2]),b){if(n)break s;}else {for(n=!n,b=s;;)if(1&n&&(J(a+64|0,256,A),t=X2[A>>2]),n=!(o=32&t),!(255<(b=b-256|0)>>>0))break;if(o)break s;s&=255;}J(a+64|0,s,A);}}32&J2[0|A]||J(F,T-F|0,A);}else {for(c=t=_>>>0<b>>>0?_:b;;){if(n=X2[c>>2]){for(b=0;;)if(S2[b+x|0]=n-H2(o=(n>>>0)/10|0,10)|48,b=b-1|0,k=9<n>>>0,n=o,!k)break;}else b=0;if(n=b+D|0,(0|t)!=(0|c)?n>>>0<=336+a>>>0||(v2(336+a|0,48,b+9|0),n=336+a|0):b||(S2[0|(n=n-1|0)]=48),32&J2[0|A]||J(n,D-n|0,A),!((c=c+4|0)>>>0<=_>>>0))break;}!w||32&J2[0|A]||J(3587,1,A);s:if((0|s)<1)n=s;else if(u>>>0<=c>>>0)n=s;else for(;;){n=D;l:{if(b=X2[c>>2]){for(;;)if(S2[0|(n=n-1|0)]=b-H2(o=(b>>>0)/10|0,10)|48,t=9<b>>>0,b=o,!t)break;if(n>>>0<=336+a>>>0)break l;}for(v2(336+a|0,48,n+W|0);;)if(!(336+a>>>0<(n=n-1|0)>>>0))break;}if(32&J2[0|A]||J(n,(0|s)<9?s:9,A),n=s-9|0,(0|s)<10)break s;if(s=n,!((c=c+4|0)>>>0<u>>>0))break;}if(!((0|n)<1)){if(v2(a+64|0,48,(t=n>>>0<256)?n:256),b=32&(o=X2[A>>2]),t){if(b)break u;}else {for(b=!b,t=n;;)if(1&b&&(J(a+64|0,256,A),o=X2[A>>2]),b=!(k=32&o),!(255<(t=t-256|0)>>>0))break;if(k)break u;n&=255;}J(a+64|0,n,A);}}u:if(8192==(0|v)&&!((0|B)<=(0|d))){if(v2(a+64|0,32,(n=(u=B-d|0)>>>0<256)?u:256),b=32&(t=X2[A>>2]),n){if(b)break u;}else {for(n=!b,b=u;;)if(1&n&&(J(a+64|0,256,A),t=X2[A>>2]),n=!(o=32&t),!(255<(b=b-256|0)>>>0))break;if(o)break u;u&=255;}J(a+64|0,u,A);}n=(0|d)<(0|B)?B:d;}}}}else {o=Q+3|0;u:if(!(8192&v||(0|B)<=(0|o))){if(v2(a+64|0,32,(n=(c=B-o|0)>>>0<256)?c:256),b=32&(t=X2[A>>2]),n){if(b)break u;}else {for(n=!b,b=c;;)if(1&n&&(J(a+64|0,256,A),t=X2[A>>2]),n=!(u=32&t),!(255<(b=b-256|0)>>>0))break;if(u)break u;c&=255;}J(a+64|0,c,A);}32&(n=X2[A>>2])||(J(g,Q,A),n=X2[A>>2]),32&n||(n=(32&k)>>>5|0,J(Z!=Z?n?3579:3583:n?3571:3575,3,A));u:if(8192==(73728&v)&&!((0|B)<=(0|o))){if(v2(a+64|0,32,(n=(c=B-o|0)>>>0<256)?c:256),b=32&(t=X2[A>>2]),n){if(b)break u;}else {for(n=!b,b=c;;)if(1&n&&(J(a+64|0,256,A),t=X2[A>>2]),n=!(k=32&t),!(255<(b=b-256|0)>>>0))break;if(k)break u;c&=255;}J(a+64|0,c,A);}n=(0|o)<(0|B)?B:o;}if(0<=(0|n))continue r;break f;}s=0,l=2902;}n=I;break i;}if(v=t,c=b,J2[0|n])break f;break i;}n=J2[e+1|0],e=e+1|0;}if(A)break A;if(!h){E=0;break A;}if(A=1,(e=X2[i+4>>2])&&(c2(f+8|0,e,r),(e=X2[i+8>>(A=2)])&&(c2(f+16|0,e,r),A=3,(e=X2[i+12>>2])&&(c2(f+24|0,e,r),A=4,(e=X2[i+16>>2])&&(c2(f+32|0,e,r),A=5,(e=X2[i+20>>2])&&(c2(f+40|0,e,r),A=6,(e=X2[i+24>>2])&&(c2(f+48|0,e,r),A=7,(e=X2[i+28>>2])&&(c2(f+56|0,e,r),A=8,e=X2[i+32>>2])))))))){if(c2(f- -64|0,e,r),A=X2[i+36>>2])break a;A=9;}for(n=A-1|0,e=(A<<2)+i|0;;){if(X2[e>>2])break n;if(e=e+4|0,!((n=n+(E=1)|0)>>>0<=8))break;}break A;}X2[6180]=28;break e;}c2(f+72|0,A,r),E=1;break A;}if(!((2147483647-s|0)<(0|(d=(0|c)<(0|(g=n-o|0))?g:c))||(0|Q)<(0|(n=(0|B)<(0|(_=s+d|0))?_:B)))){v&=73728;i:if(!(v||(0|B)<=(0|_))){if(v2(a+64|0,32,(b=(k=n-_|0)>>>0<256)?k:256),t=32&(u=X2[A>>2]),b){if(t)break i;}else {for(b=!t,t=k;;)if(1&b&&(J(a+64|0,256,A),u=X2[A>>2]),b=!(Q=32&u),!(255<(t=t-256|0)>>>0))break;if(Q)break i;k&=255;}J(a+64|0,k,A);}32&J2[0|A]||J(l,s,A);i:if(65536==(0|v)&&!((0|B)<=(0|_))){if(v2(a+64|0,48,(b=(s=n-_|0)>>>0<256)?s:256),t=32&(u=X2[A>>2]),b){if(t)break i;}else {for(b=!t,t=s;;)if(1&b&&(J(a+64|0,256,A),u=X2[A>>2]),b=!(k=32&u),!(255<(t=t-256|0)>>>0))break;if(k)break i;s&=255;}J(a+64|0,s,A);}i:if(!((0|c)<=(0|g))){if(v2(a+64|0,48,(b=(k=d-g|0)>>>0<256)?k:256),t=32&(u=X2[A>>2]),b){if(t)break i;}else {for(b=!t,t=k;;)if(1&b&&(J(a+64|0,256,A),u=X2[A>>2]),b=!(c=32&u),!(255<(t=t-256|0)>>>0))break;if(c)break i;k&=255;}J(a+64|0,k,A);}if(32&J2[0|A]||J(o,g,A),8192!=(0|v))continue;if((0|B)<=(0|_))continue;if(v2(a+64|0,32,(b=(B=n-_|0)>>>0<256)?B:256),t=32&(o=X2[A>>2]),b){if(t)continue;}else {for(b=!t,t=B;;)if(1&b&&(J(a+64|0,256,A),o=X2[A>>2]),b=!(k=32&o),!(255<(t=t-256|0)>>>0))break;if(k)continue;B&=255;}J(a+64|0,B,A);continue;}}break;}X2[6180]=61;}E=-1;}return K2=880+a|0,E;}function c2(A,e,r){var f,i,a=0,n=0,b=0;A:{e:{r:{if((e=e-9|0)>>>0<=17){f:switch(e-1|0){case 5:return e=X2[r>>2],X2[r>>2]=e+4,e=$[e>>1],X2[A>>2]=e,void(X2[A+4>>2]=e>>31);case 6:return e=X2[r>>2],X2[r>>2]=e+4,X2[A>>2]=A2[e>>1],void(X2[A+4>>2]=0);case 7:return e=X2[r>>2],X2[r>>2]=e+4,e=S2[0|e],X2[A>>2]=e,void(X2[A+4>>2]=e>>31);case 8:return e=X2[r>>2],X2[r>>2]=e+4,X2[A>>2]=J2[0|e],void(X2[A+4>>2]=0);case 16:for(A=3388;;)if((-1^(r=X2[(A=A+4|0)>>2]))&r-16843009&-2139062144)break;if(e=A-3392|0,255&r){for(;;)if(r=J2[A+1|0],A=e=A+1|0,!r)break;e=e-3392|0;}A=e,r=0,b=3392;i:{if(!(e=X2[6030])){if(e=0,a2(24104))break i;e=X2[6030];}if(e-(n=X2[6031])>>>0<A>>>0)e=0|N2[X2[6034]](24104,3392,A);else {a=A;a:if(!(X2[6042]<0)){for(f=A+3392|0,e=0;;){if(!((a=A)+e|0))break a;if(i=e+f|0,e=a=e-1|0,10==J2[i-1|0])break;}if((e=0|N2[X2[6034]](24104,3392,r=1+(A+a|0)|0))>>>0<r>>>0)break i;b=1+(a+f|0)|0,n=X2[6031],a^=-1;}$2(n,b,a),X2[6031]=a+X2[6031],e=r+a|0;}}U();case 2:case 9:case 11:case 12:case 15:break A;case 1:case 4:case 10:case 14:break e;case 0:case 3:case 13:break r;default:break f;}e=X2[r>>2],X2[r>>2]=e+4,X2[A>>2]=X2[e>>2];}return;}return e=X2[r>>2],X2[r>>2]=e+4,e=X2[e>>2],X2[A>>2]=e,void(X2[A+4>>2]=e>>31);}return e=X2[r>>2],X2[r>>2]=e+4,X2[A>>2]=X2[e>>2],void(X2[A+4>>2]=0);}e=X2[r>>2]+7&-8,X2[r>>2]=e+8,r=X2[e+4>>2],X2[A>>2]=X2[e>>2],X2[A+4>>2]=r;}function k2(A){var e;X2[12+(K2=e=K2-16|0)>>2]=A,X2[8+e>>2]=0,t2(X2[309],X2[12+e>>2],X2[8+e>>2]),t2(X2[309],3589,X2[(K2=A=K2-16|0)+12>>2]=0),K2=A+16|0,U();}function u2(A){var e;return X2[12+(e=K2-16|0)>>2]=A|=0,X2[12+e>>2];}function s2(A){var e;X2[12+(K2=e=K2-16|0)>>2]=A|=0,A=X2[12+e>>2],X2[12+(K2-16|0)>>2]=A,n(A),K2=16+e|0;}function l2(A){return X2[12+(K2-16|0)>>2]=A|=0,3591;}function r(A){var e;return X2[12+(K2=e=K2-16|0)>>2]=A|=0,A=X2[12+e>>2],X2[12+(K2-16|0)>>2]=A,K2=16+e|0,0|A;}function d2(A){var e;X2[12+(K2=e=K2-16|0)>>2]=A|=0,r(A=X2[12+e>>2]),n(A),K2=16+e|0;}function Z2(A){return X2[12+(K2-16|0)>>2]=A|=0,3606;}function _2(A){var e,r;return X2[12+(K2=r=K2-16|0)>>2]=A|=0,e=K2-16|0,A=X2[12+r>>2],X2[12+e>>2]=A,X2[X2[12+e>>2]>>2]=3716,X2[A>>2]=3636,K2=16+r|0,0|A;}function g2(A){return X2[12+(K2-16|0)>>2]=A|=0,3648;}function E2(A){var e;return X2[12+(K2=e=K2-16|0)>>2]=A|=0,_2(A=X2[12+e>>2]),X2[A>>2]=3672,K2=16+e|0,0|A;}function Q2(A){var e;return X2[12+(K2=e=K2-16|0)>>2]=A|=0,r(A=X2[12+e>>2]),K2=16+e|0,0|A;}function w2(A){var e;X2[12+(K2=e=K2-16|0)>>2]=A|=0,Q2(A=X2[12+e>>2]),n(A),K2=16+e|0;}function G2(A){return X2[12+(K2-16|0)>>2]=A|=0,3684;}function C2(A){var e,r;return X2[12+(K2=r=K2-16|0)>>2]=A|=0,e=K2-16|0,A=X2[12+r>>2],X2[12+e>>2]=A,X2[X2[12+e>>2]>>2]=3716,X2[A>>2]=3880,K2=16+r|0,0|A;}function h2(A){return X2[12+(K2-16|0)>>2]=A|=0,3892;}function F2(A){var e,r;return X2[12+(K2=r=K2-16|0)>>2]=A|=0,e=K2-16|0,A=X2[12+r>>2],X2[12+e>>2]=A,X2[X2[12+e>>2]>>2]=3716,X2[A>>2]=3916,K2=16+r|0,0|A;}function Y2(A){return X2[12+(K2-16|0)>>2]=A|=0,3928;}function D2(A,e){var r=0,f=0,f=J2[0|e],r=J2[0|A];A:if(r&&(0|f)==(0|r))for(A=A+1|0,e=e+1|0;;){if(f=J2[0|e],!(r=J2[0|A]))break A;if(A=A+1|0,e=e+1|0,(0|f)!=(0|r))break;}return r-f|0;}function T2(A){X2[12+(K2-16|0)>>2]=A|=0;}function W2(A){var e;return X2[12+(K2=e=K2-16|0)>>2]=A|=0,Q2(A=X2[12+e>>2]),K2=16+e|0,0|A;}function I2(A){var e;X2[12+(K2=e=K2-16|0)>>2]=A|=0,W2(A=X2[12+e>>2]),n(A),K2=16+e|0;}function x2(A,e,r){e|=0,r|=0;var f;return X2[12+(K2=f=K2-16|0)>>2]=A|=0,X2[8+f>>2]=e,X2[4+f>>2]=r,A=b(X2[12+f>>2],X2[8+f>>2],0),K2=16+f|0,1&A;}function b(A,e,r){var f;return X2[8+(K2=f=K2-16|0)>>2]=A,X2[4+f>>2]=e,S2[3+f|0]=r,1&S2[3+f|0]?(A=X2[8+(r=f)>>2]!=X2[4+f>>2]?(X2[(A=K2-16|0)+8>>2]=X2[8+f>>2],X2[A+12>>2]=X2[X2[A+8>>2]+4>>2],e=X2[A+12>>2],X2[(A=K2-16|0)+8>>2]=X2[4+f>>2],X2[A+12>>2]=X2[X2[A+8>>2]+4>>2],!D2(e,X2[A+12>>2])):1,S2[r+15|0]=A):(e=X2[4+f>>2],X2[(K2=A=K2-16|0)+4>>2]=X2[8+f>>2],X2[A>>2]=e,e=X2[X2[A>>2]+4>>2],X2[A+12>>2]=X2[X2[A+4>>2]+4>>2],X2[A+8>>2]=e,e=1,X2[A+12>>2]!=X2[A+8>>2]&&(e=!D2(X2[A+12>>2],X2[A+8>>2])),K2=A+16|0,S2[15+f|0]=1&e),K2=16+f|0,1&S2[15+f|0];}function y2(A,e,r){e|=0,r|=0;var f;return X2[12+(f=K2-16|0)>>2]=A|=0,X2[8+f>>2]=e,X2[4+f>>2]=r,0;}function t(A,e,r,f){e|=0,r|=0,f|=0;var i;if(X2[92+(K2=i=K2-96|0)>>2]=A|=0,X2[88+i>>2]=e,X2[84+i>>2]=r,X2[80+i>>2]=f,X2[76+i>>2]=X2[X2[92+i>>2]>>2],X2[72+i>>2]=X2[X2[76+i>>2]-8>>2],X2[68+i>>2]=X2[92+i>>2]+X2[72+i>>2],X2[64+i>>2]=X2[X2[76+i>>2]-4>>2],X2[60+i>>2]=0,X2[i>>2]=X2[84+i>>2],X2[4+i>>2]=X2[92+i>>2],X2[8+i>>2]=X2[88+i>>2],X2[12+i>>2]=X2[80+i>>2],X2[16+i>>2]=0,X2[20+i>>2]=0,X2[24+i>>2]=0,X2[28+i>>2]=0,X2[32+i>>2]=0,X2[36+i>>2]=0,X2[40+i>>2]=0,X2[44+i>>2]=0,X2[48+i>>2]=0,S2[52+i|0]=0,S2[53+i|0]=0,S2[54+i|0]=0,1&b(X2[64+i>>2],X2[84+i>>2],0))X2[48+i>>2]=1,A=X2[64+i>>2],N2[X2[X2[A>>2]+20>>2]](A,i,X2[68+i>>2],X2[68+i>>2],1,0),1==X2[24+i>>2]&&(X2[60+i>>2]=X2[68+i>>2]);else if(A=X2[64+i>>2],N2[X2[X2[A>>2]+24>>2]](A,i,X2[68+i>>2],1,0),!(1<(A=X2[36+i>>2])>>>0))if(1!=(0|A))1==X2[40+i>>2]&&1==X2[28+i>>2]&&1==X2[32+i>>2]&&(X2[60+i>>2]=X2[20+i>>2]);else A:{if(1!=X2[24+i>>2]){if(X2[40+i>>2])break A;if(1!=X2[28+i>>2])break A;if(1!=X2[32+i>>2])break A;}X2[60+i>>2]=X2[16+i>>2];}return K2=96+i|0,X2[60+i>>2];}function V2(A,e,r,f){var i;X2[12+(i=K2-16|0)>>2]=A,X2[8+i>>2]=e,X2[4+i>>2]=r,X2[i>>2]=f,X2[X2[8+i>>2]+16>>2]?X2[X2[8+i>>2]+16>>2]==X2[4+i>>2]?2==X2[X2[8+i>>2]+24>>2]&&(X2[X2[8+i>>2]+24>>2]=X2[i>>2]):(A=X2[8+i>>2],X2[A+36>>2]=X2[A+36>>2]+1,X2[X2[8+i>>2]+24>>2]=2,S2[X2[8+i>>2]+54|0]=1):(X2[X2[8+i>>2]+16>>2]=X2[4+i>>2],X2[X2[8+i>>2]+24>>2]=X2[i>>2],X2[X2[8+i>>2]+36>>2]=1);}function p2(A,e,r,f){var i,a;X2[28+(K2=a=K2-32|0)>>2]=A,X2[24+a>>2]=e,X2[20+a>>2]=r,X2[16+a>>2]=f,A=X2[28+a>>2],X2[12+a>>2]=0,X2[20+a>>2]&&(X2[12+a>>2]=X2[A+4>>2]>>8,1&X2[A+4>>2]&&(X2[8+a>>2]=X2[X2[20+a>>2]>>2],X2[12+a>>2]=X2[X2[8+a>>2]+X2[12+a>>2]>>2])),r=e=X2[A>>2],f=X2[24+a>>2],i=X2[20+a>>2]+X2[12+a>>2]|0,A=2&X2[A+4>>2]?X2[16+a>>2]:2,N2[X2[X2[e>>2]+28>>2]](r,f,i,A),K2=32+a|0;}function M2(A,e,r){e|=0,r|=0;var f,i,a;X2[24+(K2=a=K2-32|0)>>2]=A|=0,X2[20+a>>2]=e,X2[16+a>>2]=r,e=X2[24+a>>2],S2[15+a|0]=0!=(24&X2[e+8>>2]);A:{if(!(1&S2[15+a|0])){if(A=(A=X2[20+(r=a)>>2])?t(A,4072,4168,0):0,X2[r+8>>2]=A,!X2[8+a>>2]){S2[31+a|0]=0;break A;}S2[15+a|0]=0!=(24&X2[X2[8+a>>2]+8>>2]);}i=1&b(e,X2[20+(f=a)>>2],1&S2[15+a|0]),S2[31+f|0]=i;}return K2=32+a|0,1&S2[31+a|0];}function A0(A,e){var r,f;return X2[8+(K2=f=K2-16|0)>>2]=A,X2[4+f>>2]=e,A=X2[8+f>>2],e=(e=X2[4+(r=f)>>2])?t(e,4072,4328,0):0,X2[r>>2]=e,X2[f>>2]&&!(X2[X2[f>>2]+8>>2]&(-1^X2[A+8>>2]))&&1&b(X2[A+12>>2],X2[X2[f>>2]+12>>2],0)&&1&b(X2[A+16>>2],X2[X2[f>>2]+16>>2],0)?S2[15+f|0]=1:S2[15+f|0]=0,K2=16+f|0,1&S2[15+f|0];}function e0(A,e,r,f,i){var a;X2[28+(a=K2-32|0)>>2]=A,X2[24+a>>2]=e,X2[20+a>>2]=r,X2[16+a>>2]=f,X2[12+a>>2]=i,S2[X2[24+a>>2]+53|0]=1,X2[16+a>>2]==X2[X2[24+a>>2]+4>>2]&&(S2[X2[24+a>>2]+52|0]=1,X2[X2[24+a>>2]+16>>2]?X2[X2[24+a>>2]+16>>2]==X2[20+a>>2]?(2==X2[X2[24+a>>2]+24>>2]&&(X2[X2[24+a>>2]+24>>2]=X2[12+a>>2]),1==X2[X2[24+a>>2]+48>>2]&&1==X2[X2[24+a>>2]+24>>2]&&(S2[X2[24+a>>2]+54|0]=1)):(A=X2[24+a>>2],X2[A+36>>2]=X2[A+36>>2]+1,S2[X2[24+a>>2]+54|0]=1):(X2[X2[24+a>>2]+16>>2]=X2[20+a>>2],X2[X2[24+a>>2]+24>>2]=X2[12+a>>2],(X2[X2[24+a>>2]+36>>2]=1)==X2[X2[24+a>>2]+48>>2]&&1==X2[X2[24+a>>2]+24>>2]&&(S2[X2[24+a>>2]+54|0]=1)));}function r0(A,e,r,f){var i;X2[12+(i=K2-16|0)>>2]=A,X2[8+i>>2]=e,X2[4+i>>2]=r,X2[i>>2]=f,X2[4+i>>2]==X2[X2[8+i>>2]+4>>2]&&1!=X2[X2[8+i>>2]+28>>2]&&(X2[X2[8+i>>2]+28>>2]=X2[i>>2]);}function f0(A,e,r,f,i,a){var n;X2[28+(K2=n=K2-32|0)>>2]=A,X2[24+n>>2]=e,X2[20+n>>2]=r,X2[16+n>>2]=f,X2[12+n>>2]=i,S2[11+n|0]=a,A=X2[28+n>>2],X2[4+n>>2]=X2[A+4>>2]>>8,1&X2[A+4>>2]&&(X2[n>>2]=X2[X2[16+n>>2]>>2],X2[4+n>>2]=X2[X2[n>>2]+X2[4+n>>2]>>2]),r=e=X2[A>>2],f=X2[24+n>>2],i=X2[20+n>>2],a=X2[16+n>>2]+X2[4+n>>2]|0,A=2&X2[A+4>>2]?X2[12+n>>2]:2,N2[X2[X2[e>>2]+20>>2]](r,f,i,a,A,1&S2[11+n|0]),K2=32+n|0;}function i0(A,e,r,f,i){var a;X2[28+(K2=a=K2-32|0)>>2]=A,X2[24+a>>2]=e,X2[20+a>>2]=r,X2[16+a>>2]=f,S2[15+a|0]=i,A=X2[28+a>>2],X2[8+a>>2]=X2[A+4>>2]>>8,1&X2[A+4>>2]&&(X2[4+a>>2]=X2[X2[20+a>>2]>>2],X2[8+a>>2]=X2[X2[4+a>>2]+X2[8+a>>2]>>2]),r=e=X2[A>>2],f=X2[24+a>>2],i=X2[20+a>>2]+X2[8+a>>2]|0,A=2&X2[A+4>>2]?X2[16+a>>2]:2,N2[X2[X2[e>>2]+24>>2]](r,f,i,A,1&S2[15+a|0]),K2=32+a|0;}function a0(A){var e,r;return P2((e=A*A)*e*(r=e*A)*(2718311493989822e-21*e-.00019839334836096632)+(r*(.008333329385889463*e-.16666666641626524)+A));}function n0(A){var e;return P2(-.499999997251031*(A*=A)+1+.04166662332373906*(e=A*A)+A*e*(2439044879627741e-20*A-.001388676377460993));}function b0(A,e){return 1024<=(0|e)?(A*=898846567431158e293,e=(0|e)<2047?e-1023|0:(A*=898846567431158e293,((0|e)<3069?e:3069)-2046|0)):-1023<(0|e)||(A*=2004168360008973e-307,e=-1992<(0|e)?e+969|0:(A*=2004168360008973e-307,(-2960<(0|e)?e:-2960)+1938|0)),z(0,0),z(1,e+1023<<20),A*+O();}function t0(A,e){var r,f,i,a,n,b,t,o,c,k,u=0,s=0,l=0,B=0,v=0,d=0,Z=0,_=0,g=0,E=0,Q=0,w=0,G=0,C=0,h=0,F=0;if(K2=k=K2-16|0,m(A),(u=2147483647&(h=S[2]))>>>0<=1305022426)M[e>>3]=(E=+A)+-1.5707963109016418*(s=.6366197723675814*E+6755399441055744-6755399441055744)+-1.5893254773528196e-8*s,l=j2(s)<2147483648?~~s:-2147483648;else if(2139095040<=u>>>0)M[e>>3]=P2(A-A);else {if(v=u,M[8+k>>3]=(z(2,v-((u=(u>>>23|0)-150|0)<<23)|0),N()),G=8+k|0,K2=r=K2-560|0,Q=u+H2(i=0<(0|(v=(u-3|0)/24|0))?v:0,-24)|0,0<=(0|(f=X2[1568])))for(v=f+1|0,d=6288+((u=i)<<2)|0,B=320+r|0;;)if(M[B>>3]=(0|u)<0?0:+X2[d>>2],B=B+8|0,d=d+4|0,u=u+1|0,!(v=v-1|0))break;for(Z=Q-24|0,v=320+r|0;;){for(s=0,u=G,d=1,B=v;;)if(s+=M[u>>3]*M[B>>3],u=u+8|0,B=B-8|0,!(d=d-1|0))break;if(M[(l<<3)+r>>3]=s,v=v+8|0,u=(0|l)<(0|f),l=l+1|0,!u)break;}n=23-Z|0,a=24-Z|0,b=476+((f<<2)+r|0)|0,t=476+r|0,o=r-8|0,l=f;A:{for(;;){if(s=M[(u=l<<3)+r>>3],!(g=(0|l)<1))for(d=l+1|0,u=u+o|0,B=480+r|0;;)if(v=B,_=j2(E=5.960464477539063e-8*(C=s))<2147483648?~~E:-2147483648,_=j2(E=C+-16777216*(s=0|_))<2147483648?~~E:-2147483648,X2[v>>2]=_,B=B+4|0,s=M[u>>3]+s,u=u-8|0,!(1<(0|(d=d-1|0))))break;s=b0(s,Z),s=(s+=-8*Y(.125*s))-(0|(_=j2(s)<2147483648?~~s:-2147483648));e:{r:{f:{if(d=(0|Z)<1){if(Z)break f;w=X2[476+((l<<2)+r|0)>>2]>>23;}else _=(u=(B=X2[(v=476+((l<<2)+r|0)|0)>>2])>>a)+_|0,w=(X2[(w=v)>>2]=v=B-(u<<a)|0)>>n;if((0|w)<1)break e;break r;}if(w=2,!(.5<=s)){w=0;break e;}}if(g)g=0;else for(u=480+r|(g=0),v=l;;){B=X2[u>>2];r:{f:{if(c=u,g)F=16777215;else {if(!B)break f;g=1,F=16777216;}X2[c>>2]=F-B;break r;}g=0;}if(u=u+4|0,!(v=v-1|0))break;}d||1<(u=Z-1|0)>>>0||(X2[(u=476+((l<<2)+r|0)|0)>>2]=1!=(0|u)?8388607&X2[u>>2]:4194303&X2[u>>2]),_=_+1|0,2==(0|w)&&(s=1-s,w=2,g&&(s-=b0(1,Z)));}if(0!=s)break;if(!((0|l)<=(0|f))){for(u=(l<<2)+t|0,B=0,d=l;;)if(B=X2[u>>2]|B,u=u-4|0,!((0|f)<(0|(d=d-1|0))))break;if(B){for(u=476+((l<<2)+r|0)|0,Q=Z;;)if(l=l-1|0,Q=Q-24|0,v=X2[u>>2],u=u-4|0,v)break;break A;}}for(u=b,v=l;;)if(v=v+1|0,B=X2[u>>2],u=u-4|0,B)break;for(g=328+((l<<3)+r|0)|0;;){for(M[(u=328+((l<<3)+r|0)|0)>>3]=X2[6288+(i+(l=l+1|0)<<2)>>2],s=0,u=G,B=g,d=1;;)if(s+=M[u>>3]*M[B>>3],u=u+8|0,B=B-8|0,!(d=d-1|0))break;if(M[(l<<3)+r>>3]=s,g=g+8|0,!((0|l)<(0|v)))break;}l=v;}16777216<=(s=b0(s,0-Z|0))?(B=(480+r|0)+(l<<2)|0,u=j2(E=5.960464477539063e-8*(C=s))<2147483648?~~E:-2147483648,v=j2(s=C+-16777216*(0|u))<2147483648?~~s:-2147483648,X2[B>>2]=v,l=l+1|0):(u=j2(s)<2147483648?~~s:-2147483648,Q=Z),X2[(480+r|0)+(l<<2)>>2]=u;}if(!((0|l)<0)){for(d=l+1|0,s=b0(1,Q),u=(480+r|0)+(l<<2)|0,B=(l<<3)+r|0;;)if(M[B>>3]=s*+X2[u>>2],u=u-4|0,B=B-8|0,s*=5.960464477539063e-8,!(0<(0|(d=d-1|0))))break;if(!((0|l)<0))for(v=(l<<3)+r|0,u=l;;){for(Q=l-(Z=u)|0,B=u=s=0;;)if(s+=M[u+9056>>3]*M[u+v>>3],(0|f)<=(0|B)||(u=u+8|0,G=B>>>0<Q>>>0,B=B+1|0,!G))break;if(M[(160+r|0)+(Q<<3)>>3]=s,v=v-8|0,u=Z-1|0,!(0<(0|Z)))break;}}if((0|l)<0)s=0;else for(B=l+1|0,u=(160+r|0)+(l<<3)|0,s=0;;)if(s+=M[u>>3],u=u-8|0,!(0<(0|(B=B-1|0))))break;M[k>>3]=w?-s:s,K2=560+r|0,l=7&_,s=M[k>>3],(0|h)<=-1?(M[e>>3]=-s,l=0-l|0):M[e>>3]=s;}return K2=16+k|0,l;}function o0(A){var e,r,f=0,i=0;K2=r=K2-16|0,m(A);A:if((e=2147483647&(i=S[2]))>>>0<=1061752794)e>>>0<964689920||(A=a0(+A));else if(e>>>0<=1081824209)f=+A,A=e>>>0<=1075235811?(0|i)<=-1?P2(-n0(f+1.5707963267948966)):n0(f+-1.5707963267948966):a0(-(((0|i)<0?3.141592653589793:-3.141592653589793)+f));else if(e>>>0<=1088565717)f=+A,A=e>>>0<=1085271519?(0|i)<=-1?n0(f+4.71238898038469):P2(-n0(f+-4.71238898038469)):a0(((0|i)<0?6.283185307179586:-6.283185307179586)+f);else if(2139095040<=e>>>0)A=P2(A-A);else if((e=3&t0(A,8+r|0))>>>0<=2){e:switch(e-1|0){default:A=a0(M[8+r>>3]);break A;case 0:A=n0(M[8+r>>3]);break A;case 1:break e;}A=a0(-M[8+r>>3]);}else A=P2(-n0(M[8+r>>3]));return K2=16+r|0,A;}function c0(A){var e,r,f,i=P2(0),a=0;K2=f=K2-16|0,m(A);A:if((e=2147483647&(a=S[2]))>>>0<=1061752794)i=P2(1),e>>>0<964689920||(i=n0(+A));else if(e>>>0<=1081824209)r=+A,i=1075235812<=e>>>0?P2(-n0(((0|a)<0?3.141592653589793:-3.141592653589793)+r)):a0((0|a)<=-1?1.5707963267948966+r:1.5707963267948966-r);else if(e>>>0<=1088565717)i=1085271520<=e>>>0?n0(+A+((0|a)<0?6.283185307179586:-6.283185307179586)):a0((0|a)<=-1?-4.71238898038469-+A:+A-4.71238898038469);else if(i=P2(A-A),!(2139095040<=e>>>0))if((e=3&t0(A,8+f|0))>>>0<=2){e:switch(e-1|0){default:i=n0(M[8+f>>3]);break A;case 0:i=a0(-M[8+f>>3]);break A;case 1:break e;}i=P2(-n0(M[8+f>>3]));}else i=a0(M[8+f>>3]);return K2=16+f|0,A=i;}function k0(A,e){var r,f=0,i=0,a=0,n=0,b=0,t=0,o=P2(0);m(e),i=(t=(a=S[2])<<1)-1|0;A:{e:{r:{f:{m(A);i:{if((n=S[2])-8388608>>>0<=2130706431){if(4278190078<i>>>0)break i;break r;}if(i>>>0<4278190079)break f;}if(o=P2(1),1065353216==(0|n))break e;if(!t)break e;if(f=n<<1,!(t>>>0<4278190081&&f>>>0<=4278190080))return P2(A+e);if(2130706432==(0|f))break e;return P2(((-1^a)>>>31|0)==(f>>>0<2130706432|0)?0:e*e);}if(4278190079<=(n<<1)-1>>>0){if(o=P2(A*A),-1<(0|n)||23<(f=a>>>23&255)-127>>>0||(o=!((f=1<<150-f)&a)||a&f-1?o:P2(-o)),-1<(0|a))break e;return P2(P2(1)/o);}if((0|n)<=-1){if((f=a>>>23&255)>>>0<127)break A;f:{if(f>>>0<=150){if(a&(i=1<<150-f)-1)break A;if(f=65536,i&a)break f;}f=0;}n&=2147483647;}8388607<n>>>0||(n=(2147483647&(m(P2(A*P2(8388608))),S[2]))-192937984|0);}if(r=M[(i=(t=n-1060306944|0)>>>15&240)+9120>>3]*(z(2,n-(-8388608&t)|0),+N())-1,L(b=((M[1173]+M[1172]*r)*((b=r*r)*b)+(b*(M[1175]+M[1174]*r)+(M[i+9128>>3]+(t>>23)+r*M[1176])))*+e),i=0|S[1],!(1079967744==(0|(i&=2147450880))|i>>>0<1079967744)){if(127.99999995700433<b)return P2(P2(f?-15845632502852868e13:15845632502852868e13)*P2(15845632502852868e13));if(b<=-150)return P2(P2(f?-2524354896707238e-44:2524354896707238e-44)*P2(2524354896707238e-44));}r=(r=b-((b+=r=M[1209])-r))*r*(M[1211]+M[1210]*r)+(r*M[1212]+1),L(+b),t=f+(a=0|S[0])|0,f=X2[(i=9416+((31&a)<<3)|0)>>2],i=X2[i+4>>2]+(t<<=15)|0,z(0,0|f),z(1,0|(f>>>0<f>>>0?i+1|0:i)),o=P2(r*+O());}return o;}return A=P2(A-A),P2(A/A);}function b2(A){var e=0,r=0,f=0,i=0,a=0;if(m(A),255==(0|(r=(a=S[2])>>>23&255)))return A=P2(A*P2(6.2831854820251465)),P2(A/A);if(2173837238<(e=a<<1)>>>0){if(r)e=8388607&a|8388608;else {if((r=0)<=(0|(e=a<<9)))for(;;)if(r=r-1|0,!(-1<(0|(e<<=1))))break;e=a<<1-r;}if(i=-1<(0|(f=e-13176795|0)),129<(0|r)){for(;;){if(1&i&&!(e=f))return P2(A*P2(0));if(i=-1<(0|(f=(e<<=1)-13176795|0)),!(129<(0|(r=r-1|0))))break;}r=129;}if(i&&!(e=f))return P2(A*P2(0));if(8388607<e>>>0)i=e;else for(;;)if(r=r-1|0,f=e>>>0<4194304,e=i=e<<1,!f)break;return z(2,(e=1<=(0|r)?i-8388608|r<<23:i>>>1-r|0)|(f=-2147483648&a)),N();}return -2121130058==(0|e)?P2(A*P2(0)):A;}function u0(A){U();}function A(A){n(A|=0);}function s0(A,e){X2[(A|=0)+16>>2]=e|=0;}function l0(A){var e;return X2[(A|=0)>>2]=9956,(e=X2[A+144>>2])&&J2[A+148|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+144>>2]=0,X2[A>>2]=9980,S2[A+148|0]=1,X2[(e=A+136|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+124>>2])&&J2[A+128|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+124>>2]=0,S2[A+128|0]=1,X2[(e=A+116|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+104>>2])&&J2[A+108|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+104>>2]=0,S2[A+108|0]=1,X2[(e=A+96|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+84>>2])&&J2[A+88|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+84>>2]=0,S2[A+88|0]=1,X2[(e=A+76|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+32>>2]=0,X2[A>>2]=9776,S2[A+36|0]=1,X2[(e=A+24|0)>>2]=0,(X2[4+e>>2]=0)|A;}function B0(A,e,r){A|=0,e|=0,r|=0;var f=0,i=0,a=0,n=0,b=0,t=0,o=P2(0),c=P2(0),k=P2(0),u=P2(0),s=P2(0);if(X2[A+8>>2]=X2[e>>2],(0|(f=X2[A+24>>2]))==X2[A+28>>2]&&!((0|(a=f?f<<1:1))<=(0|f))){if(a&&(X2[6258]=X2[6258]+1,(i=L2(19+(a<<2)|0))&&(X2[(n=i+19&-16)-4>>2]=i)),1<=(0|f))for(i=f;;)if(X2[b+n>>2]=X2[X2[A+32>>2]+b>>2],b=b+4|0,!(i=i-1|0))break;(i=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2]),f=X2[A+24>>2]),X2[A+32>>2]=n,X2[A+28>>2]=a,S2[A+36|0]=1;}if(X2[A+24>>2]=f+1,X2[X2[A+32>>2]+(f<<2)>>2]=X2[e>>2],o=r?(s=U2[e+16>>2],k=U2[e+12>>2],c=U2[e+8>>2],U2[e+20>>2]):(u=U2[e+8>>2],r=X2[A+8>>2],c=U2[e+12>>2],o=U2[e+16>>2],s=P2(P2(P2(u*U2[r+36>>2])+P2(c*U2[r+40>>2]))+P2(o*U2[r+44>>2])),k=P2(P2(P2(u*U2[r+20>>2])+P2(c*U2[r+24>>2]))+P2(o*U2[r+28>>2])),c=P2(P2(P2(U2[r+4>>2]*u)+P2(U2[r+8>>2]*c))+P2(U2[r+12>>2]*o)),P2(0)),(0|(i=X2[A+76>>2]))==X2[A+80>>2]&&!((0|(t=i?i<<1:1))<=(0|i))){if(r=0,t&&(X2[6258]=X2[6258]+1,(f=L2(19+(t<<4)|0))&&(X2[(r=f+19&-16)-4>>2]=f)),1<=(0|i))for(b=0;;)if(a=X2[A+84>>2]+b|0,f=X2[a+4>>2],X2[(n=r+b|0)>>2]=X2[a>>2],X2[n+4>>2]=f,f=X2[(a=a+8|0)+4>>2],X2[(n=n+8|0)>>2]=X2[a>>2],X2[n+4>>2]=f,b=b+16|0,!(i=i-1|0))break;(f=X2[A+84>>2])&&J2[A+88|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+84>>2]=r,X2[A+80>>2]=t,S2[A+88|0]=1,i=X2[A+76>>2];}if(r=X2[A+84>>2]+(i<<4)|0,U2[r+12>>2]=o,U2[r+8>>2]=s,U2[r+4>>2]=k,U2[r>>2]=c,X2[A+76>>2]=X2[A+76>>2]+1,k=U2[e+24>>2],o=P2(P2(1)-k),u=P2(P2(o*U2[A+48>>2])+P2(k*U2[A- -64>>2])),c=P2(P2(o*U2[A+44>>2])+P2(k*U2[A+60>>2])),o=P2(P2(o*U2[A+40>>2])+P2(k*U2[A+56>>2])),(0|(i=X2[A+96>>2]))==X2[A+100>>2]&&!((0|(t=i?i<<1:1))<=(0|i))){if(r=0,t&&(X2[6258]=X2[6258]+1,(f=L2(19+(t<<4)|0))&&(X2[(r=f+19&-16)-4>>2]=f)),1<=(0|i))for(b=0;;)if(a=X2[A+104>>2]+b|0,f=X2[a+4>>2],X2[(n=r+b|0)>>2]=X2[a>>2],X2[n+4>>2]=f,f=X2[(a=a+8|0)+4>>2],X2[(n=n+8|0)>>2]=X2[a>>2],X2[n+4>>2]=f,b=b+16|0,!(i=i-1|0))break;(f=X2[A+104>>2])&&J2[A+108|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+104>>2]=r,X2[A+100>>2]=t,S2[A+108|0]=1,i=X2[A+96>>2];}if(r=X2[A+104>>2]+(i<<4)|0,U2[r+8>>2]=u,U2[r+4>>2]=c,U2[r>>2]=o,X2[A+96>>2]=X2[A+96>>2]+1,(0|(f=X2[A+116>>2]))==X2[A+120>>2]&&!((0|(t=f?f<<1:1))<=(0|f))){a=0,t&&(X2[6258]=X2[6258]+1,(r=L2(19+(t<<2)|0))&&(X2[(a=r+19&-16)-4>>2]=r)),r=X2[A+124>>2];A:{if(1<=(0|f)){for(b=a,i=r,n=f;;)if(U2[b>>2]=U2[i>>2],b=b+4|0,i=i+4|0,!(n=n-1|0))break;}else if(!r)break A;J2[A+128|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2]),f=X2[A+116>>2]);}X2[A+124>>2]=a,X2[A+120>>2]=t,S2[A+128|0]=1;}return U2[X2[A+124>>2]+(f<<2)>>2]=U2[e+24>>2],X2[A+116>>2]=f+1,P2(U2[A+4>>2]);}function v0(A){return (A|=0)+92|0;}function d0(A){return (A|=0)+48|0;}function e(A){return 0|(A|=0);}function Z0(A){return X2[(A|=0)+204>>2];}function _0(A,e,r){r|=0;var f,i;return U2[(e|=0)+16>>2]=U2[(A|=0)+4>>2],U2[e+20>>2]=U2[A+8>>2],U2[e+24>>2]=U2[A+12>>2],U2[e+28>>2]=U2[A+16>>2],U2[e+32>>2]=U2[A+20>>2],U2[e+36>>2]=U2[A+24>>2],U2[e+40>>2]=U2[A+28>>2],U2[e+44>>2]=U2[A+32>>2],U2[e+48>>2]=U2[A+36>>2],U2[e+52>>2]=U2[A+40>>2],U2[e+56>>2]=U2[A+44>>2],U2[e+60>>2]=U2[A+48>>2],U2[e+64>>2]=U2[A+52>>2],U2[e+68>>2]=U2[A+56>>2],U2[e+72>>2]=U2[A+60>>2],U2[e+76>>2]=U2[A- -64>>2],U2[e+80>>2]=U2[A+68>>2],U2[e+84>>2]=U2[A+72>>2],U2[e+88>>2]=U2[A+76>>2],U2[e+92>>2]=U2[A+80>>2],U2[e+96>>2]=U2[A+84>>2],U2[e+100>>2]=U2[A+88>>2],U2[e+104>>2]=U2[A+92>>2],U2[e+108>>2]=U2[A+96>>2],U2[e+112>>2]=U2[A+100>>2],U2[e+116>>2]=U2[A+104>>2],U2[e+120>>2]=U2[A+108>>2],U2[e+124>>2]=U2[A+112>>2],U2[e+128>>2]=U2[A+116>>2],U2[e+132>>2]=U2[A+120>>2],U2[e+136>>2]=U2[A+124>>2],U2[e+140>>2]=U2[A+128>>2],U2[e+144>>2]=U2[A+132>>2],U2[e+148>>2]=U2[A+136>>2],U2[e+152>>2]=U2[A+140>>2],U2[e+156>>2]=U2[A+144>>2],U2[e+160>>2]=U2[A+148>>2],U2[e+164>>2]=U2[A+152>>2],U2[e+168>>2]=U2[A+156>>2],U2[e+172>>2]=U2[A+160>>2],U2[e+176>>2]=U2[A+164>>2],U2[e+180>>2]=U2[A+168>>2],U2[e+184>>2]=U2[A+172>>2],U2[e+188>>2]=U2[A+176>>2],X2[e+232>>2]=X2[A+180>>2],U2[e+192>>2]=U2[A+184>>2],f=(X2[e>>2]=0)|N2[X2[X2[r>>2]+28>>2]](r,X2[A+192>>2]),i=X2[A+228>>2],X2[e+196>>2]=X2[A+224>>2],X2[e+200>>2]=i,i=X2[A+212>>2],X2[e+240>>2]=X2[A+208>>2],X2[e+244>>2]=i,X2[e+8>>2]=0,X2[e+4>>2]=f,X2[e+236>>2]=X2[A+204>>2],X2[e+248>>2]=X2[A+220>>2],U2[e+204>>2]=U2[A+236>>2],U2[e+208>>2]=U2[A+244>>2],U2[e+212>>2]=U2[A+248>>2],U2[e+216>>2]=U2[A+232>>2],X2[e+252>>2]=X2[A+252>>2],f=0|N2[X2[X2[r>>2]+40>>2]](r,A),i=0|N2[X2[X2[r>>2]+28>>2]](r,f),(X2[e+12>>2]=i)&&N2[X2[X2[r>>2]+48>>2]](r,f),U2[e+220>>2]=U2[A+268>>2],r=X2[A+280>>2],f=X2[A+276>>2],A=X2[A+272>>2],X2[e+260>>2]=0,X2[e+224>>2]=A,X2[e+228>>2]=f,X2[e+256>>2]=r,10148;}function g0(A){return (A|=0)+4|0;}function E0(A,e){N2[X2[X2[(A|=0)>>2]+8>>2]](A,e|=0);}function Q0(A){return 12;}function w0(A,e,r){A|=0,e|=0,r|=0;var f,i,a=P2(0),n=P2(0),b=P2(0),t=P2(0),o=P2(0),c=0,k=0,u=P2(0),s=0,l=P2(0),B=P2(0),v=0,d=(P2(0),P2(0)),Z=P2(0),_=P2(0);K2=i=K2-48|0;A:{e:switch(X2[e+4>>2]){case 8:X2[A>>2]=0,X2[A+4>>2]=0,X2[(A=A+8|0)>>2]=0,X2[A+4>>2]=0;break A;case 0:X2[A+12>>2]=0,a=U2[e+44>>2],U2[A+8>>2]=U2[r+8>>2]>=P2(0)?a:P2(-a),a=U2[e+40>>2],U2[A+4>>2]=U2[r+4>>2]>=P2(0)?a:P2(-a),a=U2[e+36>>2],U2[A>>2]=U2[r>>2]>=P2(0)?a:P2(-a);break A;case 1:X2[A+12>>2]=0,a=U2[r>>2],b=U2[r+4>>2],n=U2[r+8>>2],o=P2(P2(P2(a*U2[e+80>>2])+P2(b*U2[e+84>>2]))+P2(n*U2[e+88>>2])),t=P2(P2(P2(a*U2[e+96>>2])+P2(b*U2[e+100>>2]))+P2(n*U2[e+104>>2])),a=P2(P2(P2(a*U2[(r=e- -64|0)>>2])+P2(b*U2[e+68>>2]))+P2(n*U2[e+72>>2])),U2[A+8>>2]=U2[(e=((a<o?o<t?2:1:(a<t)<<1)<<4)+r|0)+8>>2],r=X2[e+4>>2],X2[A>>2]=X2[e>>2],X2[A+4>>2]=r;break A;case 13:v=X2[(s=e+44|0)+4>>2],X2[(c=40+i|0)>>2]=X2[s>>2],X2[c+4>>2]=v,s=X2[(c=e+36|0)+4>>2],X2[32+i>>2]=X2[c>>2],X2[36+i>>2]=s,X2[28+i>>2]=0,U2[16+i>>2]=U2[r>>2],n=U2[r+4>>2],U2[20+i>>2]=n,a=U2[r+8>>2],U2[24+i>>2]=a;r:{f:{i:switch((e=X2[e+60>>(c=2)])-(r=1)|0){case 1:break f;case 0:break i;default:break r;}r=0,k=1;break r;}r=0,k=2,c=1,a=n;}n=U2[(32+i|0)+(e<<2)>>2],o=U2[((e=r<<2)|32+i)>>2],t=U2[(e|16+i)>>2],(u=P2(O2(P2(P2(t*t)+P2(a*a)))))!=P2(0)?(b=P2(o/u),U2[(r<<2|i)>>2]=t*b,U2[(e=k<<2)+i>>2]=U2[e+(16+i|0)>>2]<P2(0)?P2(-n):n,b=P2(a*b)):(U2[(r<<2|i)>>2]=o,U2[(e=k<<2)+i>>2]=U2[e+(16+i|0)>>2]<P2(0)?P2(-n):n),a=U2[i>>2],U2[(c<<2)+i>>2]=b,X2[A+12>>2]=0,U2[A>>2]=a,e=X2[8+i>>2],X2[A+4>>2]=X2[4+i>>2],X2[A+8>>2]=e;break A;case 10:c=X2[e+60>>2],f=U2[36+((k=c<<2)+e|0)>>2],a=P2(1),b=U2[r>>2],n=U2[r+4>>2],o=U2[r+8>>2],(t=P2(P2(P2(b*b)+P2(n*n))+P2(o*o)))<P2(14210854715202004e-30)||(a=P2(P2(1)/P2(O2(t))),d=P2(o*a),Z=P2(n*a),a=P2(b*a)),X2[(e=40+i|0)>>2]=0,X2[e+4>>2]=0,X2[32+i>>2]=0,X2[36+i>>2]=0,U2[k+(32+i|0)>>2]=f,b=P2(-0xde0b6b000000000),n=P2(0),o=P2(0),t=U2[32+i>>2],u=U2[36+i>>2],l=U2[e>>2],(B=P2(P2(P2(a*t)+P2(Z*u))+P2(d*l)))>P2(-0xde0b6b000000000)&&(n=u,o=l,_=t,b=B),X2[e>>2]=0,X2[e+4>>2]=0,X2[32+i>>2]=0,X2[36+i>>2]=0,U2[(32+i|0)+(c<<2)>>2]=-f,t=U2[e>>2],u=U2[32+i>>2],l=U2[36+i>>2],X2[A+12>>2]=0,e=P2(P2(P2(a*u)+P2(Z*l))+P2(d*t))>b,U2[A+8>>2]=e?t:o,U2[A+4>>2]=e?l:n,U2[A>>2]=e?u:_;break A;case 5:if(b=U2[e+28>>2],n=U2[e+24>>2],o=U2[e+20>>2],c=X2[e+100>>2],(0|(v=X2[e+104>>2]))<1)k=-1;else for(t=P2(U2[r+8>>2]*b),u=P2(U2[r+4>>2]*n),l=P2(U2[r>>2]*o),r=0,k=-1,a=P2(-34028234663852886e22),e=c;;)if(a=(s=a<(B=P2(P2(P2(l*U2[e>>2])+P2(u*U2[e+4>>2]))+P2(t*U2[e+8>>2]))))?B:a,k=s?r:k,e=e+16|0,(0|v)==(0|(r=r+1|0)))break;X2[A+12>>2]=0,U2[A+8>>2]=b*U2[(e=c+(k<<4)|0)+8>>2],U2[A+4>>2]=n*U2[e+4>>2],U2[A>>2]=o*U2[e>>2];break A;case 4:if(b=U2[e+28>>2],n=U2[e+24>>2],o=U2[e+20>>2],c=X2[e+112>>2],(0|(v=X2[e+104>>2]))<1)k=-1;else for(t=P2(U2[r+8>>2]*b),u=P2(U2[r+4>>2]*n),l=P2(U2[r>>2]*o),r=0,k=-1,a=P2(-34028234663852886e22),e=c;;)if(a=(s=a<(B=P2(P2(P2(l*U2[e>>2])+P2(u*U2[e+4>>2]))+P2(t*U2[e+8>>2]))))?B:a,k=s?r:k,e=e+16|0,(0|v)==(0|(r=r+1|0)))break;X2[A+12>>2]=0,U2[A+8>>2]=b*U2[(e=c+(k<<4)|0)+8>>2],U2[A+4>>2]=n*U2[e+4>>2],U2[A>>2]=o*U2[e>>2];break A;default:break e;}N2[X2[X2[e>>2]+68>>2]](A,e,r);}K2=48+i|0;}function G0(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n;P2(0),P2(0),P2(0),P2(0),P2(0);N2[X2[X2[e>>2]+68>>2]](A,e,r),P2(N2[X2[X2[e>>2]+48>>2]](e))!=P2(0)&&(i=U2[r+4>>2],f=U2[r>>2],r=U2[r+8>>2],a=P2(N2[X2[X2[e>>2]+48>>2]](e)),n=f=(e=P2(P2(P2(f*f)+P2(i*i))+P2(r*r))<P2(14210854715202004e-30))?P2(-1):f,r=e?P2(-1):r,i=e?P2(-1):i,f=P2(P2(1)/P2(O2(P2(P2(r*r)+P2(P2(f*f)+P2(i*i)))))),U2[A>>2]=U2[A>>2]+P2(a*P2(n*f)),U2[A+4>>2]=U2[A+4>>2]+P2(a*P2(i*f)),U2[A+8>>2]=U2[A+8>>2]+P2(a*P2(r*f)));}function C0(A){var e,r,f,i=0,a=0;if(X2[(A|=0)>>2]=10316,(i=X2[A+56>>2])&&J2[A+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+56>>2]=0,S2[A+60|0]=1,X2[(i=A+48|0)>>2]=0,1<=((X2[i+4>>2]=0)|(a=X2[A+28>>2])))for(i=8;;)if(e=X2[A+36>>2]+i|0,(f=X2[(r=4+e|0)>>2])&&J2[8+e|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[r>>2]=0,S2[8+e|0]=1,X2[(e=e-4|0)>>2]=0,i=i+36|(X2[4+e>>2]=0),!(a=a-1|0))break;return (i=X2[A+36>>2])&&J2[A+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+36>>2]=0,X2[A+28>>2]=0,X2[A+32>>2]=0,S2[A+40|0]=1,(i=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+16>>2]=0,S2[A+20|0]=1,X2[(i=A+8|0)>>2]=0,(X2[i+4>>2]=0)|A;}function h0(A){for(var e=P2(0),r=P2(0),f=P2(0),i=0,a=0,n=0,b=0,t=X2[A+28>>2],b=1;;){A:{e:switch(0|a){case 0:e=P2(U2[A+88>>2]+U2[A+72>>2]),r=P2(U2[A+84>>2]+U2[A+68>>2]),f=P2(U2[A+80>>2]+U2[A+64>>2]);break A;case 1:e=P2(U2[A+72>>2]-U2[A+88>>2]),r=P2(U2[A+84>>2]+U2[A+68>>2]),f=P2(U2[A+80>>2]+U2[A+64>>2]);break A;case 2:e=P2(U2[A+88>>2]+U2[A+72>>2]),r=P2(U2[A+68>>2]-U2[A+84>>2]),f=P2(U2[A+80>>2]+U2[A+64>>2]);break A;case 3:e=P2(U2[A+72>>2]-U2[A+88>>2]),r=P2(U2[A+68>>2]-U2[A+84>>2]),f=P2(U2[A+80>>2]+U2[A+64>>2]);break A;case 4:e=P2(U2[A+88>>2]+U2[A+72>>2]),r=P2(U2[A+84>>2]+U2[A+68>>2]),f=P2(U2[A+64>>2]-U2[A+80>>2]);break A;case 5:e=P2(U2[A+72>>2]-U2[A+88>>2]),r=P2(U2[A+84>>2]+U2[A+68>>2]),f=P2(U2[A+64>>2]-U2[A+80>>2]);break A;case 6:e=P2(U2[A+88>>2]+U2[A+72>>2]),r=P2(U2[A+68>>2]-U2[A+84>>2]),f=P2(U2[A+64>>2]-U2[A+80>>2]);break A;case 7:break e;default:break A;}e=P2(U2[A+72>>2]-U2[A+88>>2]),r=P2(U2[A+68>>2]-U2[A+84>>2]),f=P2(U2[A+64>>2]-U2[A+80>>2]);}A:{if(1<=(0|t))for(i=X2[A+36>>2]+32|0,n=t;;){if(P2(U2[i>>2]+P2(P2(P2(f*U2[i-12>>2])+P2(r*U2[i-8>>2]))+P2(e*U2[i-4>>2])))>P2(0))break A;if(i=i+36|0,!(n=n-1|0))break;}if(b=a>>>0<7,8!=(0|(a=a+1|0)))continue;}break;}return 1&(-1^b);}function F0(A){var e,r,f,i,a,x,y,V,p,M,S,X,J,U,H,P,j,z,O,K,n=0,b=0,t=0,o=0,c=0,k=P2(0),u=0,s=0,l=P2(0),B=P2(0),v=0,d=P2(0),Z=P2(0),_=0,g=P2(0),E=0,Q=0,w=0,G=P2(0),C=0,h=0,F=P2(0),Y=0,m=0,N=0,R=P2(0),D=0,T=P2(0),W=0,I=0,L=(P2(0),0),q=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),0);P2(0);X2[A+64>>2]=0,X2[A+68>>2]=0,X2[(b=A+72|0)>>2]=0,X2[b+4>>2]=0;A:{if(!((0|(E=X2[A+28>>2]))<1)){for(;;){if(n=X2[A+36>>2],x=H2(W,36),1<=(0|(y=X2[4+(n+x|0)>>2]))){for(i=-65536|W,I=0;;){b=X2[12+(n+x|0)>>2],S=Q>>>0<=(E=(M=(r=(c=(0|(t=$[b+(I<<2)>>1]))<(0|(s=$[b+(((V=(0|y)==(0|(I=I+1|0)))?0:I)<<2)>>1])))?s:t)+(p=(h=c?t:s)<<16)|0)&u-1)>>>0,t=0;e:if(!S&&-1!=((t=0)|(n=X2[(E<<2)+w>>2]))){r:{for(;;){if(A2[(t=(b=n<<2)+v|0)+2>>1]==(65535&h)&&A2[t>>1]==(65535&r))break r;if(-1==(0|(n=X2[b+_>>2])))break;}t=0;break e;}t=b+o|0;}s=X2[A+16>>2],k=P2(U2[(b=s+(h<<4)|0)+8>>2]-U2[(s=s+(r<<4)|0)+8>>2]),B=P2(U2[b>>2]-U2[s>>2]),l=P2(U2[b+4>>2]-U2[s+4>>2]),d=P2(P2(1)/P2(O2(P2(P2(P2(B*B)+P2(l*l))+P2(k*k))))),k=P2(k*d),l=P2(l*d),B=P2(B*d);e:{if(!(Y=(0|(b=X2[A+48>>2]))<1))for(n=X2[A+56>>2],c=b;;){if(d=U2[n+8>>2],g=U2[n+4>>2],G=U2[n>>2],!(1e-6<+P2(j2(P2(G-B)))||1e-6<+P2(j2(P2(g-l)))||1e-6<+P2(j2(P2(d-k)))))break e;if(!(1e-6<+P2(j2(P2(B+G)))||1e-6<+P2(j2(P2(l+g)))||1e-6<+P2(j2(P2(k+d)))))break e;if(n=n+16|0,!(c=c-1|0))break;}if(X2[A+52>>2]==(0|b)&&!((0|(c=b?b<<1:1))<=(0|b))){if(s=0,c&&(X2[6258]=X2[6258]+1,(n=L2(19+(c<<4)|0))&&(X2[(s=n+19&-16)-4>>2]=n)),!Y)for(n=0;;)if(Y=X2[A+56>>2]+n|0,a=X2[Y+4>>2],X2[(e=n+s|0)>>2]=X2[Y>>2],X2[4+e>>2]=a,a=X2[(Y=Y+8|0)+4>>2],X2[(e=8+e|0)>>2]=X2[Y>>2],X2[4+e>>2]=a,n=n+16|0,!(b=b-1|0))break;(b=X2[A+56>>2])&&J2[A+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[b-4>>2])),X2[A+56>>2]=s,S2[A+60|0]=1,X2[A+52>>2]=c,b=X2[A+48>>2];}b=X2[A+56>>2]+(b<<4)|0,X2[b+12>>2]=0,U2[b+8>>2]=k,U2[b+4>>2]=l,U2[b>>2]=B,X2[A+48>>2]=X2[A+48>>2]+1;}e:{if(t)$[t+2>>1]=W;else {r:{if(!S&&-1!=(0|(n=X2[(E<<2)+w>>2])))for(;;){if(A2[(t=(b=n<<2)+v|0)+2>>1]==(65535&h)&&A2[t>>1]==(65535&r))break r;if(-1==(0|(n=X2[b+_>>2])))break;}if((0|u)!=(0|m))s=o,t=u,o=m;else {f:if((0|(t=u?u<<1:1))<=(0|u))s=o,t=u;else {if(s=0,t&&(X2[6258]=X2[6258]+1,(b=L2(19+(t<<2)|0))&&(X2[(s=b+19&-16)-4>>2]=b)),1<=(0|u)){for(n=s,c=o,b=u;;)if(h=A2[c>>1]|A2[c+2>>1]<<16,$[n>>1]=h,$[n+2>>1]=h>>>16,n=n+4|0,c=c+4|0,!(b=b-1|0))break;}else if(!o)break f;X2[6259]=X2[6259]+1,q2(X2[o-4>>2]);}o=u;}$[(o=(o<<2)+s|0)>>1]=i,$[o+2>>1]=i>>>16;f:if((0|C)!=(0|D))b=v;else if((0|(D=C?C<<1:1))<=(0|C))D=C,b=v;else {if(b=0,D&&(X2[6258]=X2[6258]+1,(o=L2(19+(D<<2)|0))&&(X2[(b=o+19&-16)-4>>2]=o)),1<=(0|C)){for(n=b,c=v,o=C;;)if(h=A2[c>>1]|A2[c+2>>1]<<16,$[n>>1]=h,$[n+2>>1]=h>>>16,n=n+4|0,c=c+4|0,!(o=o-1|0))break;}else if(!v)break f;X2[6259]=X2[6259]+1,q2(X2[v-4>>2]);}if($[(o=(C<<2)+b|0)>>1]=v=65535&r|p,$[o+2>>1]=v>>>16,C=C+1|0,(0|u)<(0|t)&&(E=t-1&M,(0|Q)<(0|t))){if((0|t)<=(0|L))v=w;else {v=0,t&&(X2[6258]=X2[6258]+1,(o=L2(19+(t<<2)|0))&&(X2[(v=o+19&-16)-4>>2]=o));f:{if(1<=(0|Q)){for(n=v,c=w,u=Q;;)if(X2[n>>2]=X2[c>>2],n=n+4|0,c=c+4|0,!(u=u-1|0))break;}else if(!w)break f;X2[6259]=X2[6259]+1,q2(X2[w-4>>2]);}L=t;}if(v2((Q<<2)+v|0,0,t-Q<<2),w=t<<2,(0|t)<=(0|N))o=_;else {if((0|t)<=(0|q))o=_;else {o=0,t&&(X2[6258]=X2[6258]+1,(u=L2(16+(3|w)|0))&&(X2[(o=u+19&-16)-4>>2]=u));f:{if(1<=(0|N)){for(n=o,c=_,u=N;;)if(X2[n>>2]=X2[c>>2],n=n+4|0,c=c+4|0,!(u=u-1|0))break;}else if(!_)break f;X2[6259]=X2[6259]+1,q2(X2[_-4>>2]);}q=t;}v2((N<<2)+o|0,0,t-N<<2);}if(1<=(0|t)&&(v2(v,255,w),v2(o,255,w)),1<=(0|Q))for(u=t-1|0,c=n=0;;)if(_=((u&(A2[(_=n+b|0)+2>>1]<<16)+$[_>>1])<<2)+v|0,X2[n+o>>2]=X2[_>>2],n=n+4|0,(0|Q)==(0|(c=(X2[_>>2]=c)+1|0)))break;w=v,Q=N=t,_=o;}X2[(m<<2)+_>>2]=X2[(o=(E<<2)+w|0)>>2],m=(X2[o>>2]=m)+1|0;break e;}$[(b=b+o|0)>>1]=i,$[b+2>>1]=i>>>16;}s=o,t=u,b=v;}if(V)break;n=X2[A+36>>2],o=s,u=t,v=b;}E=X2[A+28>>2],u=t,v=b,o=s;}if(!((0|(W=W+1|0))<(0|E)))break;}if(!((0|E)<1)){for(u=X2[A+16>>2],C=X2[A+36>>2],Q=0;;){if(t=C+H2(Q,36)|0,3<=(0|(b=X2[t+4>>2])))for(n=(t=X2[t+12>>2])+4|0,D=(s=u+(X2[t>>2]<<4)|0)+8|0,L=s+4|0,B=U2[A+72>>2],d=U2[A+68>>2],g=U2[A+64>>2],c=2;;)if(m=u+(X2[n>>2]<<4)|0,k=U2[m+8>>2],N=u+(X2[t+((0|c)%(0|b)<<2)>>2]<<4)|0,l=U2[N+8>>2],G=U2[s>>2],X=U2[m>>2],J=P2(G-X),Z=U2[L>>2],U=U2[N+4>>2],f=P2(Z-U),H=U2[m+4>>2],F=P2(Z-H),P=U2[N>>2],j=P2(G-P),T=P2(P2(J*f)-P2(F*j)),K=F,F=U2[D>>2],z=P2(F-l),O=P2(F-k),f=P2(P2(K*z)-P2(O*f)),l=P2(P2(P2(F+k)+l)*P2(.3333333432674408)),k=P2(P2(O*j)-P2(J*z)),k=P2(P2(O2(P2(P2(T*T)+P2(P2(f*f)+P2(k*k)))))*P2(.5)),B=P2(B+P2(l*k)),U2[A+72>>2]=B,d=P2(d+P2(P2(P2(U+P2(Z+H))*P2(.3333333432674408))*k)),U2[A+68>>2]=d,g=P2(g+P2(P2(P2(P+P2(G+X))*P2(.3333333432674408))*k)),U2[A+64>>2]=g,R=P2(R+k),n=n+4|0,(0|b)==(0|(c=c+1|0)))break;if((0|E)==(0|(Q=Q+(n=1)|0)))break;}break A;}}n=0;}if(X2[A+96>>2]=2139095039,k=P2(P2(1)/R),B=P2(k*U2[A+64>>2]),U2[A+64>>2]=B,d=P2(k*U2[A+68>>2]),U2[A+68>>2]=d,g=P2(k*U2[A+72>>2]),U2[A+72>>2]=g,G=P2(34028234663852886e22),l=P2(34028234663852886e22),n)for(n=X2[A+36>>2]+32|0;;)if((k=P2(j2(P2(U2[n>>2]+P2(P2(P2(B*U2[n-12>>2])+P2(U2[n-8>>2]*d))+P2(U2[n-4>>2]*g))))))<l&&(l=U2[A+96>>2]=k),n=n+36|0,!(E=E-1|0))break;if((0|(c=X2[A+8>>2]))<1)k=P2(-34028234663852886e22),B=P2(34028234663852886e22),d=P2(-34028234663852886e22),g=P2(-34028234663852886e22),R=P2(34028234663852886e22);else for(n=X2[A+16>>2],g=P2(-34028234663852886e22),R=P2(34028234663852886e22),d=P2(-34028234663852886e22),k=P2(-34028234663852886e22),B=P2(34028234663852886e22);;)if(g=g<(Z=U2[n+8>>2])?Z:g,B=Z<B?Z:B,d=d<(Z=U2[n+4>>2])?Z:d,G=Z<G?Z:G,k=k<(Z=U2[n>>2])?Z:k,R=Z<R?Z:R,n=n+16|0,!(c=c-1|0))break;X2[A+128>>2]=0,Z=P2(g-B),U2[A+124>>2]=Z,T=P2(d-G),U2[A+120>>2]=T,F=P2(k-R),U2[A+116>>2]=F,l=P2(l/P2(1.7320507764816284)),U2[A+88>>2]=l,X2[A+112>>2]=0,U2[A+108>>2]=B+g,U2[A+104>>2]=G+d,U2[A+100>>2]=k+R,U2[A+84>>2]=l,U2[A+80>>2]=l,t=(b=(u=F<T?T<Z?2:1:(F<Z)<<1)<<2)+(A+80|0)|0,k=P2(U2[b+(A+116|0)>>2]*P2(.5)),U2[t>>2]=k,B=P2(P2(k-l)*P2(.0009765625)),n=1024;A:{e:{for(;;){if(h0(A))break e;if(k=P2(k-B),U2[t>>2]=k,!(n=n-1|0))break;}U2[A+84>>2]=l,U2[A+88>>2]=l,U2[A+80>>2]=l;break A;}for(u=(t=A+80|0)+((b=1<<u&3)<<2)|0,k=U2[(t=t+((1<<b&3)<<2)|0)>>2],B=P2(P2(U2[A+96>>2]-l)*P2(.0009765625)),b=1024;;){if(d=U2[u>>2],U2[u>>2]=B+d,l=P2(B+U2[t>>2]),U2[t>>2]=l,h0(A)){if(k=l,b=b-1|0)continue;break A;}break;}U2[u>>2]=d,U2[t>>2]=k;}v&&(X2[6259]=X2[6259]+1,q2(X2[v-4>>2])),o&&(X2[6259]=X2[6259]+1,q2(X2[o-4>>2])),_&&(X2[6259]=X2[6259]+1,q2(X2[_-4>>2])),w&&(X2[6259]=X2[6259]+1,q2(X2[w-4>>2]));}function Y0(A,e,r,f,i,a,n){var b,t,o,c=P2(0),k=P2(0),u=0,s=0;P2(0),P2(0),P2(0);if(X2[f>>2]=2139095039,X2[i>>2]=-8388609,s=X2[A+(u=8)>>2],c=P2(-34028234663852886e22),!((0|s)<1)){for(;;)if(b=X2[A+16>>2]+u|0,c=U2[b-8>>2],k=U2[b-4>>2],b=U2[b>>2],t=P2(P2(P2(P2(c*U2[e>>2])+P2(k*U2[e+4>>2]))+P2(b*U2[e+8>>2]))+U2[e+48>>2]),o=P2(P2(P2(P2(c*U2[e+16>>2])+P2(k*U2[e+20>>2]))+P2(b*U2[e+24>>2]))+U2[e+52>>2]),k=P2(P2(P2(P2(c*U2[e+32>>2])+P2(k*U2[e+36>>2]))+P2(b*U2[e+40>>2]))+U2[e+56>>2]),(c=P2(P2(P2(t*U2[r>>2])+P2(o*U2[r+4>>2]))+P2(k*U2[r+8>>2])))<U2[f>>2]&&(U2[f>>2]=c,X2[a+12>>2]=0,U2[a+8>>2]=k,U2[a+4>>2]=o,U2[a>>2]=t),c>U2[i>>2]&&(U2[i>>2]=c,X2[n+12>>2]=0,U2[n+8>>2]=k,U2[n+4>>2]=o,U2[n>>2]=t),u=u+16|0,!(s=s-1|0))break;c=U2[i>>2];}c<(k=U2[f>>2])&&(U2[f>>2]=c,U2[i>>2]=k,r=X2[(A=a+8|0)>>2],f=X2[A+4>>2],u=X2[(e=n+8|0)+4>>2],X2[A>>2]=X2[e>>2],X2[A+4>>2]=u,A=X2[a>>2],i=X2[a+4>>2],u=X2[n+4>>2],X2[a>>2]=X2[n>>2],X2[a+4>>2]=u,X2[n>>2]=A,X2[n+4>>2]=i,X2[e>>2]=r,X2[e+4>>2]=f);}function m0(A,e,r,f,i,a){var n,b,t,o,c=0,k=0,u=0,s=0;return (0|(c=X2[a+16>>2]))!=(0|i)?i-c|0:i?(t=X2[a+8>>2],n=P(u=X2[a+12>>2],c=0,s=A,0),A=H,k=e,b=P(u,e=0,k,e),c=H,c=(u=A+b|0)>>>0<b>>>0?H+1|0:H,e=P(k,0,t,0),A=c,c=A=(u=H+u|0)>>>0<H>>>0?A+1|0:A,c=(u=u+(A=(n=e+n|0)>>>0<e>>>0)|0)>>>0<A>>>0?c+1|0:c,k=u,A=n,n=P(t,0,s,0),A=(e=A)+H|0,o=t=0+n|0,n=(s=e=k+(A=(0|e)==(0|(u=A=t>>>0<n>>>0?A+1|0:A))&0|A>>>0<e>>>0)|0)>>>0<A>>>0?c+1|0:c,A=X2[a+4>>2],a=X2[a>>2],r=P(A,c=0,t=r,0),k=H,e=P(A,0,f,0),A=H,A=(k=k+e|0)>>>0<e>>>0?A+1|0:A,e=P(f,0,a,0),c=k=(f=H)+k|0,f=(c=k)>>>0<f>>>0?A+1|0:A,k=k+(c=A=(r=e+r|0)>>>0<e>>>0)|0,A=f,c=(f=k)>>>0<c>>>0?A+1|0:A,k=-1,b=f,A=r,r=P(a,f=0,t,0),A=(e=A)+H|0,H2(i,k=(0|(c=(r=b+(e=(A=(a=f+r|0)>>>0<r>>>0?A+1|0:A)>>>0<e>>>0)|0)>>>0<e>>>0?c+1|0:c))==(0|n)&s>>>0<(e=r)>>>0|n>>>0<c>>>0?k:(0|c)==(0|n)&r>>>0<s>>>0|c>>>0<n>>>0?1:(0|A)==(0|u)&o>>>0<a>>>0|u>>>0<A>>>0?-1:(0|A)==(0|u)&a>>>0<o>>>0|A>>>0<u>>>0)):0;}function N0(A,e,r){var f=0,i=0,a=0,n=0,b=0,t=0,n=X2[A+56>>2];if(!(n||((f=X2[A+52>>2])?X2[A+52>>2]=X2[f+8>>2]:(a=X2[6258],f=n=0,(i=L2(31))&&(X2[(f=i+19&-16)-4>>2]=i),X2[f+8>>2]=0,X2[6258]=a+2,i=X2[A+60>>2],X2[f+4>>2]=i,(i=L2(H2(i,24)+19|0))&&(X2[(n=i+19&-16)-4>>2]=i),X2[f>>2]=n,n=X2[A+48>>2],X2[A+48>>2]=f,X2[f+8>>2]=n),n=X2[f>>2],(0|(i=X2[f+4>>2]))<1||(f=n+24|0,X2[n>>2]=(a=1==(0|i))?0:f,a))))for(a=1;;)if(f=(t=f)+24|0,X2[t>>2]=(0|(a=a+1|0))<(0|i)?f:0,(0|i)==(0|a))break;if(X2[A+56>>2]=X2[n>>2],X2[(f=n+8|0)>>2]=0,X2[f+4>>2]=0,X2[(f=n+16|0)>>2]=0,X2[f+4>>2]=0,X2[n>>2]=0,X2[n+4>>2]=0,!((i=X2[A+56>>2])||((f=X2[A+52>>2])?X2[A+52>>2]=X2[f+8>>2]:(b=X2[6258],f=a=0,(i=L2(31))&&(X2[(f=i+19&-16)-4>>2]=i),X2[f+8>>2]=0,X2[6258]=b+2,i=X2[A+60>>2],X2[f+4>>2]=i,(i=L2(H2(i,24)+19|0))&&(X2[(a=i+19&-16)-4>>2]=i),X2[f>>2]=a,i=X2[A+48>>2],X2[A+48>>2]=f,X2[f+8>>2]=i),i=X2[f>>2],(0|(b=X2[f+4>>2]))<1||(f=i+24|0,X2[i>>2]=(a=1==(0|b))?0:f,a))))for(a=1;;)if(f=(t=f)+24|0,X2[t>>2]=(0|(a=a+1|0))<(0|b)?f:0,(0|a)==(0|b))break;return X2[A+56>>2]=X2[i>>2],X2[(f=i+8|0)>>2]=0,X2[f+4>>2]=0,X2[(a=i+16|0)>>2]=0,X2[a+4>>2]=0,X2[i>>2]=0,X2[i+4>>2]=0,X2[n+8>>2]=i,X2[n+12>>2]=r,X2[n+16>>2]=0,r=X2[A+100>>2],X2[n+20>>2]=r,X2[f>>2]=n,X2[i+12>>2]=e,X2[a>>2]=0,X2[i+20>>2]=r,e=X2[A+116>>2],X2[A+116>>2]=r=e+1|0,(0|e)>=X2[A+120>>2]&&(X2[A+120>>2]=r),n;}function R0(A,e,r,f,i,a,n,b){var t,o,c,k,u,s,l,B=0,B=X2[A+4>>2];return X2[A>>2]==(0|e)?(0|e)!=(0|B)||(B=X2[e+12>>2],e=X2[X2[e+8>>2]+12>>2],c=X2[e+96>>2],s=X2[B+96>>2]-c|0,A=X2[A+12>>2],t=X2[e+92>>2],l=X2[A+92>>2]-t|0,t=X2[B+92>>2]-t|0,c=X2[A+96>>2]-c|0,o=P(o=H2(s,l)-H2(t,c)|0,o>>31,o=H2(i,n)-H2(f,b)|0,o>>31),u=H,k=t,t=X2[A+88>>2],A=X2[e+88>>2],B=X2[B+88>>2]-A|0,f=P(e=A=H2(k,t=t-A|0)-H2(B,l)|0,A>>31,A=H2(f,a)-H2(r,n)|0,A>>31),A=H+u|0,A=(e=f+o|0)>>>0<f>>>0?A+1|0:A,f=e,r=P(n=e=H2(B,c)-H2(t,s)|0,e>>31,e=H2(r,b)-H2(i,a)|0,e>>31),A=H+A|0,0<(0|(A=(e=f+r|0)>>>0<r>>>0?A+1|0:A))?1:0<=(0|A)?e:0)?2:1:(0|e)==(0|B);}function D0(x,A,e,y,V){var r,f,i,a,n,b,t,o,c,p,M,S,k=0,u=0,s=0,l=0,B=0,v=0,d=0,Z=0,_=0,g=0,E=0,Q=0,w=0,G=0,C=0,h=0,F=0,Y=0,m=0,N=0,R=0,D=0,T=0,W=0,X=0,J=0,U=0,I=K2-32|0;if(K2=I,w=X2[V>>2],Y=A,(T=X2[y>>2])&&(Y=X2[T+12>>2]),R=X2[Y+96>>2],l=e,C=X2[A+96>>2],t=X2[e+96>>2]-C|0,d=X2[(T||w)+12>>2],h=X2[A+92>>2],g=X2[d+92>>2]-h|0,o=X2[e+92>>2]-h|0,Z=X2[d+96>>2]-C|0,e=P(X=e=H2(t,g)-H2(o,Z)|0,p=e>>31,t,s=t>>31),B=H,u=X2[A+88>>2],k=X2[d+88>>2]-u|0,c=X2[l+88>>2]-u|0,A=P(J=A=H2(k,o)-H2(g,c)|0,M=A>>31,c,_=c>>31),e=P(r=e-A|0,f=B-(H+(e>>>0<A>>>0)|0)|0,A=D=X2[Y+92>>2],A>>31),d=H,A=P(J,M,o,g=o>>31),B=H,G=e,e=P(U=e=H2(Z,c)-H2(k,t)|0,S=e>>31,t,s),A=P(i=A-e|0,a=B-(H+(A>>>0<e>>>0)|0)|0,A=Y=X2[Y+88>>2],A>>31),k=H+d|0,k=(e=G+A|0)>>>0<A>>>0?k+1|0:k,A=P(c,_,U,S),B=H,s=e,e=P(o,g,X,p),A=P(n=A-e|0,b=B-(H+(A>>>0<e>>>0)|0)|0,R,R>>31),k=H+k|0,B=(g=e=s+A|0)>>>0<A>>>0?k+1|0:k,A=P(X,p,u,u>>31),e=H,s=A,A=P(J,M,C,C>>31),k=H+e|0,k=(d=s+A|0)>>>0<A>>>0?k+1|0:k,e=P(U,S,h,h>>31),A=H+k|0,d=(_=d=e+d|0)>>>0<e>>>0?A+1|0:A,l=w?X2[w+12>>2]:l,W=X2[l+96>>2],C=X2[l+92>>2],h=X2[l+88>>2],e=w,T&&X2[T+12>>2]&&(A=X2[X2[T+8>>2]+4>>2],N=X2[A+12>>2],k=P(Z=e=X2[N+92>>2],s=e>>31,U,S),l=H,e=w,v=k,u=P(G=k=X2[N+88>>2],Q=k>>31,X,p),k=H+l|0,k=(v=v+u|0)>>>0<u>>>0?k+1|0:k,u=P(m=u=X2[N+96>>2],E=u>>31,J,M),k=H+k|0,!(k=(0|(k=(l=u+v|0)>>>0<u>>>0?k+1|0:k))<(0|(u=d))?1:(0|k)<=(0|u)?l>>>0<_>>>0:0))){for(l=A+12|0;;)if(X2[A+20>>2]==(0|x)||(e=P(Z,s,r,f),k=H,s=e,e=P(G,Q,i,a),k=H+k|0,k=(s=s+e|0)>>>0<e>>>0?k+1|0:k,e=P(m,E,n,b),k=H+k|0,(0|(e=k=(s=e+s|0)>>>0<e>>>0?k+1|0:k))<(0|B)||(0|k)<=(0|B)&&s>>>0<=g>>>0||(X2[y>>2]=A,B=X2[l>>2],R=X2[B+96>>2],D=X2[B+92>>2],Y=X2[B+88>>2],l=(A=X2[X2[A+8>>2]+4>>2])+12|0,g=s,B=e,v=X2[A+12>>2],e=P(Z=e=X2[v+92>>2],s=e>>31,U,S),k=H,u=e,e=P(G=e=X2[v+88>>2],Q=e>>31,X,p),k=H+k|0,k=(u=u+e|0)>>>0<e>>>0?k+1|0:k,e=P(m=e=X2[v+96>>2],E=e>>31,J,M),k=H+k|0,k=(u=e+u|0)>>>0<e>>>0?k+1|0:k,e=u,!((0|d)<(0|k)||(0|d)<=(0|k)&&_>>>0<=e>>>0))))break;e=X2[V>>2];}A=P(r,f,C,C>>31),k=H,s=A,A=P(i,a,h,h>>31),k=H+k|0,k=(s=s+A|0)>>>0<A>>>0?k+1|0:k,A=P(n,b,W,W>>31),k=H+k|0,s=(Z=s=A+s|0)>>>0<A>>>0?k+1|0:k;A:if(e){if(X2[e+12>>2]&&(l=X2[X2[e+8>>2]>>2],v=X2[l+12>>2],A=P(G=A=X2[v+92>>2],Q=A>>31,U,S),k=H,u=A,A=P(m=A=X2[v+88>>2],E=A>>31,X,p),k=H+k|0,k=(u=u+A|0)>>>0<A>>>0?k+1|0:k,A=P(F=A=X2[v+96>>2],v=A>>31,J,M),k=H+k|0,k=(u=A+u|0)>>>0<A>>>0?k+1|0:k,A=u,!((0|k)<(0|d)||(0|k)<=(0|d)&&A>>>0<_>>>0)))for(N=l+12|0;;){if(X2[(u=l)+20>>2]==(0|x))break A;if(k=P(G,Q,r,f),A=H,l=k,k=P(m,E,i,a),A=H+A|0,A=(l=l+k|0)>>>0<k>>>0?A+1|0:A,v=(k=l)+(l=P(n,b,F,v))|0,k=H+A|0,k=v>>>0<l>>>0?k+1|0:k,v=A=v,l=(0|(l=k))<(0|s)?1:(0|l)<=(0|s)?v>>>0<=Z>>>0:0)break A;if(X2[V>>2]=u,e=X2[N>>2],W=X2[e+96>>2],C=X2[e+92>>2],h=X2[e+88>>2],N=(l=X2[X2[u+8>>2]>>2])+12|0,Z=A,s=k,e=u,v=X2[l+12>>2],A=P(G=A=X2[v+92>>2],Q=A>>31,U,S),k=H,u=A,A=P(m=A=X2[v+88>>2],E=A>>31,X,p),k=H+k|0,k=(u=u+A|0)>>>0<A>>>0?k+1|0:k,A=P(F=A=X2[v+96>>2],v=A>>31,J,M),k=H+k|0,k=(u=A+u|0)>>>0<A>>>0?k+1|0:k,A=u,!((0|d)<(0|k)||(0|d)<=(0|k)&&_>>>0<=A>>>0))break;}}else e=0;A:{if(B=s-((Z>>>0<g>>>0)+B|0)|0,A=g=Z-g|0,A=0<(0|B)?1:0<=(0|B)?1<=A>>>0:0)for(;;){for(A=X2[y>>2];;){e:if(Q=(d=e=G=(H2(C-D|0,o)+H2(h-Y|0,c)|0)+H2(W-R|0,t)|0)>>31,A&&X2[A+12>>2]&&(E=X2[X2[A>>2]+8>>2],!(X2[E+20>>2]<=(0|x)))){e=X2[E+12>>2],Z=X2[e+92>>2],u=(s=X2[e+88>>2])-Y|0,l=(_=X2[e+96>>2])-R|0,e=(H2(k=Z-D|0,o)+H2(u,c)|0)+H2(l,t)|0,w=P(r,f,k,k>>31),k=H,v=w,w=P(i,a,u,u>>31),k=H+k|0,k=(u=v+w|0)>>>0<w>>>0?k+1|0:k,w=P(n,b,l,l>>31),k=H+k|0;r:{if(!((u=w+u|0)|(w=k=u>>>0<w>>>0?k+1|0:k))){if((0|e)<0)break r;break e;}if(-1<(0|w))break e;if(m=0<(0|e),N=e>>>31|0,v=(k=(0|e)<0)?0-e|0:0,F=e>>31,l=k?0-(F+(0!=(0|e))|0)|0:0,k=1<=(0|G)?(X2[8+I>>2]=d,X2[12+I>>2]=Q,-(X2[24+I>>2]=1)):(0|G)<=-1?(X2[24+I>>2]=-1,X2[8+I>>2]=0-d,X2[12+I>>2]=0-((0!=(0|d))+Q|0),1):(X2[8+I>>2]=0,X2[12+I>>2]=0,X2[24+I>>2]=0),N=m?-1:N,v=m?e:v,l=m?F:l,u=0-(e=u)|0,w=0-((0!=(0|e))+w|0)|0,e=g,(m=0<(0|(F=B))?1:0<=(0|B)?g:0)||-1<((F=e=0)|B)||(X2[24+I>>2]=k,e=0-g|0,F=0-((0!=(0|g))+B|0)|0),X2[16+I>>2]=e,X2[20+I>>2]=F,(0|m0(v,l,u,w,N,8+I|0))<=-1)break e;}X2[y>>2]=A=(0|A)==(0|T)?0:E,e=P(r,f,e=C-Z|0,e>>31),B=H,g=(k=e)+(e=P(i,a,e=h-s|0,e>>31))|0,k=H+B|0,k=g>>>0<e>>>0?k+1|0:k,e=P(n,b,e=W-_|0,e>>31),k=H+k|0,B=(g=B=e+g|0)>>>0<e>>>0?k+1|0:k,Y=s,D=Z,R=_;continue;}break;}if(!(A=X2[V>>2]))break A;if(!X2[A+12>>2])break A;if(E=X2[X2[A+8>>2]>>2],X2[E+20>>2]<=(0|x))break A;if(Z=X2[E+12>>2],A=P(v=A=N=(F=X2[Z+92>>2])-C|0,C=A>>31,U,S),_=H,s=A,e=P(l=A=h=(k=X2[Z+88>>2])-h|0,u=A>>31,X,p),A=H+_|0,A=(s=s+e|0)>>>0<e>>>0?A+1|0:A,A=(0|(m=s))!=(0-(e=P(J,M,w=e=_=(s=X2[Z+96>>2])-W|0,Z=e>>31))|0)?1:(0-(H+(0!=(0|e))|0)|0)!=(0|A))break A;if(A=P(r,f,A=F-D|0,A>>31),e=H,F=A,A=P(i,a,A=k-Y|0,A>>31),k=H+e|0,k=(W=F+A|0)>>>0<A>>>0?k+1|0:k,A=P(n,b,A=s-R|0,A>>31),k=H+k|0,k=(e=A+W|0)>>>0<A>>>0?k+1|0:k,A=e,s=(0|(e=k))<0?1:(0|e)<=0?A>>>0<1:0)break A;_=(H2(N,o)+H2(h,c)|0)+H2(_,t)|0,s=P(v,C,r,f),k=H,v=s,s=P(l,u,i,a),k=H+k|0,k=(u=v+s|0)>>>0<s>>>0?k+1|0:k,s=P(n,b,w,Z),k=H+k|0;e:{if(!((Z=s+u|0)|(s=k=Z>>>0<s>>>0?k+1|0:k))){if((0|_)<0)break e;break A;}if(-1<(0|s))break A;if(C=0<(0|_),l=_>>>31|0,u=(_=(0|(k=_))<0)?0-k|0:0,h=k>>31,w=_?0-(h+(0!=(0|k))|0)|0:0,_=1<=(0|G)?(X2[8+I>>2]=d,X2[12+I>>2]=Q,-(X2[24+I>>2]=1)):(0|G)<=-1?(X2[24+I>>2]=-1,X2[8+I>>2]=0-d,X2[12+I>>2]=0-((0!=(0|d))+Q|0),1):(X2[8+I>>2]=0,X2[12+I>>2]=0,X2[24+I>>2]=0),l=C?-1:l,u=C?k:u,w=C?h:w,Z=0-(d=Z)|0,k=0-((0!=(0|d))+s|0)|0,s=d=B,B=g,(G=0<(0|s)?1:0<=(0|d)?B:0)||-1<((s=g=0)|d)||(X2[24+I>>2]=_,g=0-B|0,s=0-((0!=(0|B))+d|0)|0),X2[16+I>>2]=g,X2[20+I>>2]=s,(0|m0(u,w,Z,k,l,8+I|0))<=0)break A;}X2[V>>2]=E,B=X2[E+12>>2],W=X2[B+96>>2],C=X2[B+92>>2],h=X2[B+88>>2],g=A,B=e;}if(!(-1<(0|B)))for(;;){G=(d=A=T=(H2(C-D|0,o)+H2(h-Y|0,c)|0)+H2(W-R|0,t)|0)>>31;e:if(e&&X2[e+12>>2]&&(m=X2[X2[e+4>>2]+8>>2],!(X2[m+20>>2]<=(0|x)))){_=X2[m+12>>2],Z=X2[_+92>>2],u=(s=X2[_+88>>2])-h|0,l=(_=X2[_+96>>2])-W|0,v=(H2(A=Z-C|0,o)+H2(u,c)|0)+H2(l,t)|0,k=P(r,f,A,A>>31),A=H,F=k,k=P(i,a,u,u>>31),A=H+A|0,A=(u=F+k|0)>>>0<k>>>0?A+1|0:A,l=(k=u)+(u=P(n,b,l,l>>31))|0,k=H+A|0;r:{if(!(l|(u=k=l>>>0<u>>>0?k+1|0:k))){if(0<(0|v))break r;break e;}if(-1<(0|u))break e;if(Q=0<(0|v),F=v>>>31|0,N=(k=(0|(A=v))<0)?0-A|0:0,E=A>>31,v=k?0-(E+(0!=(0|A))|0)|0:0,k=1<=(0|T)?(X2[8+I>>2]=d,X2[12+I>>2]=G,-(X2[24+I>>2]=1)):(0|T)<=-1?(X2[24+I>>2]=-1,X2[8+I>>2]=0-d,X2[12+I>>2]=0-((0!=(0|d))+G|0),1):(X2[8+I>>2]=0,X2[12+I>>2]=0,X2[24+I>>2]=0),F=Q?-1:F,N=Q?A:N,v=Q?E:v,l=0-(A=l)|0,u=0-((0!=(0|A))+u|0)|0,A=g,(Q=0<(0|(E=B))?1:0<=(0|B)?g:0)||-1<((E=A=0)|B)||(X2[24+I>>2]=k,A=0-g|0,E=0-((0!=(0|g))+B|0)|0),X2[16+I>>2]=A,X2[20+I>>2]=E,1<=(0|m0(N,v,l,u,F,8+I|0)))break e;}X2[V>>2]=e=(0|e)==(0|w)?0:m,A=P(r,f,A=Z-D|0,A>>31),B=H,g=(k=A)+(A=P(i,a,A=s-Y|0,A>>31))|0,k=H+B|0,k=g>>>0<A>>>0?k+1|0:k,B=P(n,b,A=_-R|0,A>>31),A=H+k|0,B=A=(g=B+g|0)>>>0<B>>>0?A+1|0:A,h=s,C=Z,W=_;continue;}if(!(A=X2[y>>2]))break A;if(!X2[A+12>>2])break A;if(Q=X2[X2[A+8>>2]+4>>2],X2[Q+20>>2]<=(0|x))break A;if(s=X2[Q+12>>2],A=P(F=A=E=(m=X2[s+92>>2])-D|0,N=A>>31,U,S),e=H,_=(k=A)+(A=P(l=A=D=(v=X2[s+88>>2])-Y|0,u=A>>31,X,p))|0,k=H+e|0,k=_>>>0<A>>>0?k+1|0:k,A=(0|(e=_))!=(0-(A=P(J,M,Y=A=s=(_=X2[s+96>>2])-R|0,Z=A>>31))|0)?1:(0-(H+(0!=(0|A))|0)|0)!=(0|k))break A;if(A=P(r,f,A=C-m|0,A>>31),e=H,R=(k=A)+(A=P(i,a,A=h-v|0,A>>31))|0,k=H+e|0,k=R>>>0<A>>>0?k+1|0:k,A=P(n,b,A=W-_|0,A>>31),k=H+k|0,-1<(0|(A=(_=e=A+R|0)>>>0<A>>>0?k+1|0:k)))break A;if(e=(H2(E,o)+H2(D,c)|0)+H2(s,t)|0,s=P(F,N,r,f),k=H,v=s,s=P(l,u,i,a),k=H+k|0,k=(u=v+s|0)>>>0<s>>>0?k+1|0:k,s=P(n,b,Y,Z),k=H+k|0,(k=(Z=s+u|0)>>>0<s>>>0?k+1|0:k)|(s=Z)){if(-1<(0|k))break A;if(R=0<(0|e),D=e>>>31|0,Y=(Z=(0|e)<0)?0-e|0:0,l=e>>31,Z=Z?0-(l+(0!=(0|e))|0)|0:0,d=1<=(0|T)?(X2[8+I>>2]=d,X2[12+I>>2]=G,-(X2[24+I>>2]=1)):(0|T)<=-1?(X2[24+I>>2]=-1,X2[8+I>>2]=0-d,X2[12+I>>2]=0-((0!=(0|d))+G|0),1):(X2[8+I>>2]=0,X2[12+I>>2]=0,X2[24+I>>2]=0),u=R?-1:D,Y=R?e:Y,Z=R?l:Z,s=0-(e=s)|0,k=0-((0!=(0|e))+k|0)|0,e=g,(G=0<(0|(l=B))?1:0<=(0|B)?e:0)||-1<((l=g=0)|B)||(X2[24+I>>2]=d,g=0-e|0,l=0-((0!=(0|e))+B|0)|0),X2[16+I>>2]=g,X2[20+I>>2]=l,0<=(0|m0(Y,Z,s,k,u,8+I|0)))break A;}else if((0|e)<=0)break A;X2[y>>2]=Q,B=X2[Q+12>>2],R=X2[B+96>>2],D=X2[B+92>>2],e=X2[V>>2],Y=X2[B+88>>2],g=_,B=A;}}K2=32+I|0;}function T0(A,e,r,f,i,a,n){var b,t,o,c,k,u,s,l=0,B=0,v=0,d=0,Z=0,_=0,g=0,E=0,Q=0,w=0;if(!(l=X2[r+8>>2]))return 0;for(u=f+8|0,s=f+4|0,g=l;;){if(X2[g+20>>2]>X2[A+100>>2]){B=X2[g+12>>2],l=P(v=l=t=X2[B+92>>2]-X2[r+92>>2]|0,d=l>>31,X2[i+8>>2],X2[i+12>>2]),Z=H,_=l,b=P(E=l=o=X2[B+88>>2]-X2[r+88>>2]|0,Q=l>>31,X2[i>>2],X2[i+4>>2]),l=H+Z|0,l=(_=_+b|0)>>>0<b>>>0?l+1|0:l,k=P(Z=B=b=X2[B+96>>2]-X2[r+96>>2]|0,c=B>>31,X2[i+16>>2],X2[i+20>>2]),B=H+l|0,B=(_=k+_|0)>>>0<k>>>0?B+1|0:B,l=P(X2[a+8>>2],X2[a+12>>2],v,d),d=H,v=(E=P(X2[a>>2],X2[a+4>>2],E,Q))+l|0,l=H+d|0,l=v>>>0<E>>>0?l+1|0:l,d=P(X2[a+16>>2],X2[a+20>>2],Z,c),l=H+l|0,l=(v=d+v|0)>>>0<d>>>0?l+1|0:l,Z=d=v,l=(l=0<(0|(v=l))?1:0<=(0|v)?Z:0)?(Z=-1,E=0,1):-1<(0|v)?(E=1,Z=v=d=0):(d=0-(l=d)|0,v=0-((0!=(0|l))+v|0)|0,E=0,-(Z=1)),Q=0<(0|B)?1:0<=(0|B)?_:0;A:{if(!Q)if((0|B)<-1||(0|B)<=-1)_=0-(l=_)|0,B=0-((0!=(0|l))+B|0)|0,l=Z;else if(B=_=0,E)break A;!w||(0|(Z=m0(d,v,_,B,l,n)))<=-1?(X2[n+16>>2]=l,X2[n+8>>2]=_,X2[n+12>>2]=B,X2[n>>2]=d,X2[n+4>>2]=v,w=g):Z||(w=2!=(0|R0(w,g,X2[f>>2],X2[s>>2],X2[u>>2],o,t,b))^e?g:w);}l=X2[r+8>>2];}if((0|(g=X2[g>>2]))==(0|l))break;}return w;}function W0(A){var e,r,f,i,a=P2(0);return K2=i=K2-16|0,r=X2[A+8>>2],e=X2[A+12>>2],a=P2(P2(P2((r>>>0)+4294967296*((f=e)>>>0))*P2(0x10000000000000000))+P2(+X[A>>2]+4294967296*+X[A+4>>2])),0<(0|e)||0<=(0|e)||(e=X2[A+4>>2],A=X2[A>>2],X2[i>>2]=0-A,X2[4+i>>2]=0-(e+(0!=(0|A))|0),r=(A=!(A|e))+(e=-1^r)|0,A=-1^f,X2[8+i>>2]=r,X2[12+i>>2]=r>>>0<e>>>0?A+1|0:A,a=P2(-W0(i))),K2=16+i|0,a;}function I0(A,e,r){var f,i,a,n=0,b=0,t=0,o=0,c=P2(0),k=P2(0),u=0,s=0,l=0,B=P2(0),v=0,d=P2(0),Z=0,_=0,g=0,E=P2(0),Q=P2(0),w=P2(0),G=0,C=P2(0),h=P2(0),F=(P2(0),0),Y=0;if(K2=a=K2-176|0,(0|r)<=0)(e=X2[A+12>>2])&&J2[A+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+12>>2]=0,S2[A+16|0]=1,X2[A+4>>2]=0,X2[A+8>>2]=0,(e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+32>>2]=0,S2[A+36|0]=1,X2[(e=A+24|0)>>2]=0,X2[e+4>>2]=0,(e=X2[A+52>>2])&&J2[A+56|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+52>>2]=0,S2[A+56|0]=1,X2[(A=A+44|0)>>2]=0,X2[A+4>>2]=0;else {for(S2[104+a|0]=1,X2[(n=80+a|0)>>2]=0,X2[n+4>>2]=256,X2[(n=a+64|0)>>2]=0,X2[n+4>>2]=256,X2[(n=48+a|0)>>2]=0,X2[n+4>>2]=256,X2[100+a>>2]=0,X2[(n=92+a|0)>>2]=0,X2[n+4>>2]=0,X2[72+a>>2]=0,X2[76+a>>2]=0,X2[56+a>>2]=0,X2[60+a>>2]=0,X2[40+a>>2]=0,X2[44+a>>2]=0,E=P2(-1.0000000150474662e30),Q=P2(1.0000000150474662e30),b=r,n=e,w=P2(1.0000000150474662e30),d=P2(1.0000000150474662e30),C=P2(-1.0000000150474662e30),h=P2(-1.0000000150474662e30);;)if(E=E<(c=U2[n+8>>2])?c:E,C=C<(k=U2[n+4>>2])?k:C,Q=c<Q?c:Q,w=k<w?k:w,h=h<(c=U2[n>>2])?c:h,d=c<d?c:d,n=n+16|0,!(b=b-1|0))break;if(n=1,i=P2(E-Q),k=P2(C-w),(0|(o=(c=(B=P2(h-d))<k?(X2[120+a>>2]=b=k<i?2:1,n=0,B):(X2[120+a>>2]=b=(B<i)<<1,k))<i?n:2))==(0|b)&&(o=(b+1>>>0)%3|0),X2[36+a>>2]=n=0,U2[32+a>>2]=P2(E+Q)*P2(.5),U2[28+a>>2]=P2(C+w)*P2(.5),X2[6258]=X2[6258]+1,X2[20+a>>2]=0,U2[24+a>>2]=P2(h+d)*P2(.5),X2[112+a>>2]=o,X2[116+a>>2]=t=(3^b)-o|0,c=P2(i*P2(9788566967472434e-20)),c=(b=((t+1|0)%3|0)==(0|b))?c:P2(-c),U2[16+a>>2]=c,k=P2(k*P2(9788566967472434e-20)),k=b?k:P2(-k),U2[12+a>>2]=k,B=P2(B*P2(9788566967472434e-20)),B=b?B:P2(-B),U2[8+a>>2]=B,(b=L2(19+(r<<4)|0))&&(X2[(n=b+19&-16)-4>>2]=b),X2[164+a>>2]=n,S2[168+a|0]=1,X2[160+a>>2]=r,b=X2[140+a>>2],X2[n>>2]=X2[136+a>>2],X2[n+4>>2]=b,b=X2[(t=144+a|0)+4>>2],X2[(n=n+8|0)>>2]=X2[t>>2],X2[n+4>>2]=b,1!=(0|r))for(b=r-1|0,n=16;;)if(o=X2[140+a>>2],s=X2[164+a>>2]+n|0,X2[s>>2]=X2[136+a>>2],X2[s+4>>2]=o,l=X2[t+4>>2],X2[(s=s+8|0)>>2]=X2[t>>2],X2[s+4>>2]=l,n=n+16|0,!(b=b-1|0))break;for(c=c!=P2(0)?P2(P2(1)/c):c,k=k!=P2(0)?P2(P2(1)/k):k,B=B!=P2(0)?P2(P2(1)/B):B,X2[156+a>>2]=r,s=(136+a|0)+(X2[112+a>>2]<<2)|0,l=(136+a|0)+(X2[120+a>>2]<<2)|0,o=(136+a|0)+(X2[116+a>>2]<<2)|0,n=X2[164+a>>2],E=U2[32+a>>2],Q=U2[28+a>>2],w=U2[24+a>>2],b=0;;)if(X2[n+12>>2]=b,X2[148+a>>2]=0,U2[136+a>>2]=B*P2(U2[e>>2]-w),U2[144+a>>2]=c*P2(U2[e+8>>2]-E),U2[140+a>>2]=k*P2(U2[e+4>>2]-Q),t=n,d=U2[o>>2],u=P2(j2(d))<P2(2147483648)?~~d:-2147483648,X2[t>>2]=u,u=n+4|0,d=U2[l>>2],t=P2(j2(d))<P2(2147483648)?~~d:-2147483648,X2[u>>2]=t,u=n+8|0,d=U2[s>>2],t=P2(j2(d))<P2(2147483648)?~~d:-2147483648,X2[u>>2]=t,e=e+16|0,n=n+16|0,(0|(b=b+1|0))==(0|r))break;if(2<=(0|r)&&!function A(e,r,f){var i,a,n,b,t,o=0,c=0,k=0,u=0,s=0,l=0,B=0;for(K2=t=K2-16|0,u=X2[e+12>>2],b=X2[8+(k=u+((r+f|0)/2<<4)|0)>>2],a=X2[k+4>>2],n=X2[k>>2],k=r,l=f;;){for(o=(k<<4)+u|0;;){A:{if(!((0|(c=X2[o+4>>2]))<(0|a))){if((0|c)!=(0|a))break A;if(!((0|(c=X2[o>>2]))<(0|n))){if((0|c)!=(0|n))break A;if(X2[o+8>>2]>=(0|b))break A;}}o=o+16|0,k=k+1|0;continue;}break;}for(B=l<<4;;){A:{if(!((0|a)<(0|(s=X2[4+(c=u+B|0)>>2])))){if((0|s)!=(0|a))break A;if(!((0|n)<(0|(s=X2[c>>2])))){if((0|s)!=(0|n))break A;if(X2[c+8>>2]<=(0|b))break A;}}B=B-16|0,l=l-1|0;continue;}break;}if((0|k)<=(0|l)&&(i=X2[4+(s=o+8|0)>>2],X2[(u=8+t|0)>>2]=X2[s>>2],X2[u+4>>2]=i,i=X2[o+4>>2],X2[t>>2]=X2[o>>2],X2[4+t>>2]=i,i=X2[c+4>>2],X2[o>>2]=X2[c>>2],X2[o+4>>2]=i,c=X2[4+(o=c+8|0)>>2],X2[s>>2]=X2[o>>2],X2[s+4>>2]=c,o=X2[e+12>>2]+B|0,B=X2[4+t>>2],X2[o>>2]=X2[t>>2],X2[o+4>>2]=B,c=X2[u+4>>2],X2[(o=o+8|0)>>2]=X2[u>>2],X2[o+4>>2]=c,l=l-1|0,k=k+1|0),!((0|k)<=(0|l)))break;u=X2[e+12>>2];}(0|r)<(0|l)&&A(e,r,l),(0|k)<(0|f)&&A(e,k,f),K2=16+t|0;}(152+a|0,0,r-1|0),X2[48+a>>2]=0,X2[44+a>>2]=X2[40+a>>2],X2[52+a>>2]=r,(0|(t=X2[92+a>>2]))<(0|r)){if(X2[96+a>>2]<(0|r)){if(b=0,X2[6258]=X2[6258]+1,(e=L2(19+(r<<2)|0))&&(X2[(b=e+19&-16)-4>>2]=e),1<=(0|t))for(n=0,e=t;;)if(X2[n+b>>2]=X2[X2[100+a>>2]+n>>2],n=n+4|0,!(e=e-1|0))break;(e=X2[100+a>>2])&&J2[104+a|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[100+a>>2]=b,S2[104+a|0]=1,X2[96+a>>2]=r;}for(n=t<<2,e=r-t|0;;)if(n=n+4|(X2[X2[100+a>>2]+n>>2]=0),!(e=e-1|0))break;}for(X2[92+a>>2]=r,o=0;;){if(!((b=X2[48+a>>2])||((n=X2[44+a>>2])?X2[44+a>>2]=X2[n+8>>2]:(t=X2[6258],n=e=0,(b=L2(31))&&(X2[(n=b+19&-16)-4>>2]=b),X2[n+8>>2]=0,b=X2[52+a>>2],X2[n+4>>2]=b,X2[6258]=t+2,(b=L2(H2(b,112)+19|0))&&(X2[(e=b+19&-16)-4>>2]=b),X2[n>>2]=e,X2[n+8>>2]=X2[40+a>>2],X2[40+a>>2]=n),b=X2[n>>2],(0|(t=X2[n+4>>2]))<1||(n=b+112|0,X2[b>>2]=(e=1==(0|t))?0:n,e))))for(e=1;;)if(n=(l=n)+112|0,X2[l>>2]=(0|(e=e+1|0))<(0|t)?n:0,(0|e)==(0|t))break;if(X2[48+a>>2]=X2[b>>2],X2[(e=b+8|0)>>2]=0,X2[e+4>>2]=0,X2[b+16>>2]=0,X2[b>>2]=0,X2[b+4>>2]=0,X2[b+104>>2]=-1,X2[e>>2]=0,e=X2[164+a>>2]+(o<<4)|0,n=X2[e+4>>2],X2[b+88>>2]=X2[e>>2],X2[b+92>>2]=n,t=X2[(e=e+8|0)+4>>2],X2[(n=b+96|0)>>2]=X2[e>>2],X2[n+4>>2]=t,X2[b+104>>2]=-1,X2[X2[100+a>>2]+(o<<2)>>2]=b,(0|(o=o+1|0))==(0|r))break;}if((e=X2[164+a>>2])&&J2[168+a|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[164+a>>2]=0,S2[168+a|0]=1,X2[156+a>>2]=0,X2[160+a>>2]=0,X2[124+a>>2]=0,X2[128+a>>2]=0,X2[64+a>>2]=0,X2[60+a>>2]=X2[56+a>>2],X2[108+a>>2]=-3,X2[68+a>>2]=H2(r,6),X2[(e=144+a|0)>>2]=0,X2[e+4>>2]=0,X2[136+a>>2]=0,!function x(A,e,r,f){var i,a=0,n=0,b=0,t=0,o=0,c=0,k=0,u=0,s=0,l=0,B=0,v=0,d=0,Z=0,_=0,g=0,E=0,Q=0,w=0,G=0,C=0,h=0,F=0,Y=0,m=0,N=0,R=0,D=0,T=0,W=0,I=0,y=0;K2=i=K2-144|0;A:{e:{r:{f:{switch(0|(a=r-e|0)){case 1:break r;case 2:break f;case 0:break;default:break e;}X2[f>>2]=0,X2[f+4>>2]=0,X2[(A=f+8|0)>>2]=0,X2[A+4>>2]=0;break A;}if(r=X2[X2[A+92>>2]+(e<<2)>>2],a=X2[r+204>>2],t=X2[r+92>>2],(0|(n=X2[r+88>>2]))!=(0|(b=X2[r+200>>2]))||(0|a)!=(0|t)||(a=t,X2[r+96>>2]!=X2[r+208>>2])){e=r+112|0,(o=t-a|0)|(a=n-b|0)?(X2[r+4>>2]=e,X2[r>>2]=e,X2[r+116>>2]=r,X2[r+112>>2]=r,X2[f+4>>2]=(a=(t=(0|a)<0)|(b=(0|o)<0)&!a)?e:r,X2[f>>2]=a?r:e,a=t&!o||b?(X2[f+8>>2]=r,e):(X2[f+8>>2]=e,r)):(t=X2[r+96>>2]>X2[r+208>>2],X2[f+8>>2]=a=t?e:r,X2[f+4>>2]=a,X2[f>>2]=a,X2[a+4>>2]=a,e=t?r:e,r=X2[a>>2]=a),X2[f+12>>2]=a,r=N0(A,f=r,e),X2[f+8>>2]=r,A=X2[r+8>>2],X2[e+8>>2]=A,X2[r+4>>2]=r,X2[r>>2]=r,X2[A+4>>2]=A,X2[A>>2]=A;break A;}X2[r+8>>2]=0,X2[f+12>>2]=r,X2[f+8>>2]=r,X2[f+4>>2]=r,X2[f>>2]=r,X2[r+4>>2]=r,X2[r>>2]=r;break A;}A=X2[X2[A+92>>2]+(e<<2)>>2],X2[A+8>>2]=0,X2[f+12>>2]=A,X2[f+8>>2]=A,X2[f+4>>2]=A,X2[f>>2]=A,X2[A+4>>2]=A,X2[A>>2]=A;break A;}n=t=(u=(0|a)/2|0)+e|0;e:if(!((0|r)<=(0|n))){for(a=X2[A+92>>2],b=X2[(a+(t<<2)|0)-4>>2],c=X2[b+88>>2],o=X2[b+96>>2],b=X2[b+92>>2],a=a+(e+u<<2)|0,n=t;;){if(u=X2[a>>2],(0|c)!=X2[u+88>>2])break e;if((0|b)!=X2[u+92>>2])break e;if((0|o)!=X2[u+96>>2])break e;if(a=a+4|0,!((0|(n=n+1|0))<(0|r)))break;}n=r;}if(x(A,e,t,f),X2[(e=16+i|0)>>2]=0,X2[e+4>>2]=0,X2[8+i>>2]=0,x(A,n,r,8+i|(X2[12+i>>2]=0)),E=X2[12+i>>2])if(d=X2[f+4>>2]){T=X2[(e=A+100|0)>>2]-1|0,X2[e>>2]=T,Q=X2[f+12>>2],e=X2[Q+88>>2],u=X2[16+i>>2];e:{r:if((0|e)==X2[u+88>>2]&&(0|(C=X2[Q+92>>2]))==X2[u+92>>2]){if((0|(r=X2[u+4>>2]))==(0|u)){(r=X2[u+8>>2])&&(u=X2[r+12>>2],C=X2[u+92>>2],e=X2[u+88>>2]),w=e+1|0,E=X2[u+96>>2];break e;}if(e=X2[u>>2],X2[e+4>>2]=r,X2[r>>2]=e,X2[8+i>>2]==(0|u)&&((0|(b=X2[(a=e)+88>>2]))<(0|(t=X2[r+88>>2]))||(0|b)==(0|t)&&X2[e+92>>2]<X2[r+92>>2]||(a=r),X2[8+i>>2]=a),(0|u)==(0|E)){f:{if((0|(t=X2[e+88>>2]))<=(0|(a=X2[r+88>>2]))){if((0|a)!=(0|t))break f;if(X2[e+92>>2]<=X2[r+92>>2])break f;}E=X2[12+i>>2]=e;break r;}E=X2[12+i>>2]=r;}}for(v=X2[f>>2],Z=X2[8+i>>2],a=d,e=E,t=r=0,l=b=1;;){u=t,Q=r,t=X2[e+88>>2],c=X2[a+88>>2];r:if(1<=(0|(n=H2(t-c|0,b))))for(_=X2[e+92>>2],r=a;;){for(t=e,a=X2[r+92>>2],c=n;;){f:if(B=_-a|0,(0|(n=X2[(k=1&l?4:0)+r>>2]))!=(0|r)&&!(0<(0|(o=(e=X2[n+92>>2])-a|0)))){if(a=X2[n+88>>2],s=H2(a-X2[r+88>>2]|0,b)){if(-1<(0|s))break f;if((0|H2(o,c))>(0|H2(s,B)))break f;}c=H2(X2[t+88>>2]-a|0,b),a=e,r=n;continue;}break;}if((0|t)==(0|(e=X2[t+k>>2])))break r;if(-1<(0|(k=(a=X2[e+92>>2])-_|0)))break r;if(o=X2[e+88>>2],(0|(n=H2(o-X2[r+88>>2]|0,b)))<1)break r;if(_=a,a=H2(o-X2[t+88>>2]|0,b)){if(-1<(0|a))break r;if(!((0|H2(c,k))<(0|H2(a,B))))break;}}else if((0|n)<=-1){o=X2[a+92>>2],_=X2[e+92>>2];f:for(;;){for(k=X2[(Y=1&l?0:4)+e>>2];;){r=a,s=n,m=_-o|0;i:if((0|e)!=(0|k)&&!((0|(n=(a=X2[k+92>>2])-_|0))<0)){if(c=X2[k+88>>2],t=H2(c-t|0,b)){if(-1<(0|t))break i;if((0|H2(n,s))>(0|H2(t,m)))break i;}n=H2(c-X2[r+88>>2]|0,b),t=c,_=a,e=k,a=r;continue f;}if((0|(a=X2[r+Y>>2]))==(0|r)){t=e;break r;}if((0|(h=(c=X2[a+92>>2])-o|0))<1){t=e;break r;}if(t=X2[e+88>>2],B=X2[a+88>>2],-1<(0|(n=H2(t-B|0,b)))){t=e;break r;}if(o=c,c=H2(B-X2[r+88>>2]|0,b)){if(-1<(0|c)){t=e;break r;}if(!((0|H2(s,h))<(0|H2(c,m))))break;}}break;}t=e;}else {n=X2[a+92>>2];f:if(o=1&l)for(b=a;;){if((0|(b=X2[(r=b)+4>>2]))==(0|a))break f;if((0|c)!=X2[b+88>>2])break f;if(t=n,!((0|(n=X2[b+92>>2]))<=(0|t)))break;}else for(b=a;;){if((0|(b=X2[(r=b)>>2]))==(0|a))break f;if((0|c)!=X2[b+88>>2])break f;if(t=n,!((0|(n=X2[b+92>>2]))<=(0|t)))break;}if(b=X2[e+92>>2],o)for(a=e;;){if((0|(a=X2[(t=a)>>2]))==(0|e))break r;if((0|c)!=X2[a+88>>2])break r;if(!((0|(n=b))<=(0|(b=X2[a+92>>2]))))break;}else for(a=e;;){if((0|(a=X2[(t=a)+4>>2]))==(0|e))break r;if((0|c)!=X2[a+88>>2])break r;if(!((0|(n=b))<=(0|(b=X2[a+92>>2]))))break;}}if(n=1&l,l=0,b=-1,a=v,e=Z,!n)break;}if(X2[t>>2]=r,X2[r+4>>2]=t,X2[Q>>2]=u,X2[u+4>>2]=Q,X2[Z+88>>2]<X2[v+88>>2]&&(X2[f>>2]=Z),X2[E+88>>2]>=X2[d+88>>2]&&(X2[f+4>>2]=E),X2[f+12>>2]=X2[20+i>>2],W=X2[u+96>>2],g=X2[Q+96>>2],y=X2[u+92>>2],I=X2[Q+92>>2],f=X2[Q+8>>2],m=X2[u+88>>2],Y=X2[Q+88>>2],Z=P(n=r=h=W-g|(X2[104+i>>2]=e=0),b=r>>31,C=r=B=y-I|0,w=r>>31),d=H,r=P(D=r=0-(F=m-Y|0)|0,N=r>>31,F,F>>31),t=H,v=r-(a=P(B,w,B,w))|0,l=t-(H+(r>>>0<a>>>0)|0)|0,E=0-(r=P(n,b,D,N))|0,s=0-(H+(0!=(0|r))|0)|0,b=0,f){for(r=f;k=X2[r+12>>2],a=P(_=a=X2[k+92>>2]-I|0,c=a>>31,D,N),t=H,(a=(0|a)!=(0-(a=P(C,w,o=a=X2[k+88>>2]-Y|0,n=a>>31))|0)?1:(0-(H+(0!=(0|a))|0)|0)!=(0|t))||(a=P(Z,d,_,c),t=H,c=a,a=P(E,s,o,n),o=H+t|0,o=(n=c+a|0)>>>0<a>>>0?o+1|0:o,t=(a=P(v,l,a=X2[k+96>>2]-g|0,a>>31))+n|0,n=H+o|0,n=t>>>0<a>>>0?n+1|0:n,a=t,(a=(0|n)<0?1:(0|n)<=0?a>>>0<1:0)||b&&1!=(0|R0(b,r,F,B,h,0,0,-1))||(b=r)),(0|f)!=(0|(r=X2[r>>2])););X2[104+i>>2]=b;}if(f=X2[u+8>>2],X2[80+i>>2]=0,f){for(r=f;k=X2[r+12>>2],a=P(_=a=X2[k+92>>2]-y|0,c=a>>31,D,N),t=H,(a=(0|a)!=(0-(a=P(C,w,o=a=X2[k+88>>2]-m|0,n=a>>31))|0)?1:(0-(H+(0!=(0|a))|0)|0)!=(0|t))||(a=P(Z,d,_,c),t=H,c=a,a=P(E,s,o,n),o=H+t|0,o=(n=c+a|0)>>>0<a>>>0?o+1|0:o,t=(a=P(v,l,a=X2[k+96>>2]-W|0,a>>31))+n|0,n=H+o|0,n=t>>>0<a>>>0?n+1|0:n,a=t,(a=(0|n)<0?1:(0|n)<=0?a>>>0<1:0)||e&&2!=(0|R0(e,r,F,B,h,0,0,-1))||(e=r)),(0|f)!=(0|(r=X2[r>>2])););X2[80+i>>2]=e;}e|b&&(D0(T,Q,u,104+i|0,80+i|0),(e=X2[104+i>>2])&&(Q=X2[e+12>>2]),(e=X2[80+i>>2])&&(u=X2[e+12>>2])),C=X2[u+92>>2],w=X2[u+88>>2],E=X2[u+96>>2]+1|0;}for(y=A+100|0,e=Q,o=u,T=1,_=k=Z=t=s=l=0;;){if(X2[140+i>>2]=-1,n=X2[(m=e+92|0)>>2],a=X2[(I=o+92|0)>>2]-n|0,X2[132+i>>2]=a,r=X2[(h=e+96|0)>>2],f=X2[(Y=o+96|0)>>2]-r|0,X2[136+i>>2]=f,v=X2[e+88>>2],b=X2[o+88>>2]-v|0,X2[128+i>>2]=b,c=C-n|0,n=E-r|0,F=(r=H2(c,f)-H2(n,a)|0)>>31,W=r,X2[104+i>>2]=r,X2[108+i>>2]=F,D=(r=(r=H2(n,b))-H2(n=w-v|0,f)|0)>>31,g=r,X2[112+i>>2]=r,X2[116+i>>2]=D,N=(r=H2(a,n)-H2(b,c)|0)>>31,B=r,X2[120+i>>2]=r,X2[124+i>>2]=N,r=P(g,D,b,d=b>>31),c=H,n=P(W,F,a,v=a>>31),X2[96+i>>2]=r-n,X2[100+i>>2]=c-(H+(r>>>0<n>>>0)|0),r=P(W,F,f,c=f>>31),n=H,b=P(B,N,b,d),X2[88+i>>2]=r-b,X2[92+i>>2]=n-(H+(r>>>0<b>>>0)|0),r=P(a,v,B,N),a=H,f=P(g,D,f,c),X2[80+i>>2]=r-f,X2[84+i>>2]=a-(H+(r>>>0<f>>>0)|0),X2[72+i>>2]=0,X2[(r=64+i|0)>>2]=0,X2[r+4>>2]=0,X2[56+i>>2]=0,B=T0(A,X2[60+i>>2]=0,e,128+i|0,104+i|0,80+i|0,56+i|0),X2[48+i>>2]=0,X2[(r=40+i|0)>>2]=0,X2[r+4>>2]=0,X2[32+i>>2]=0,(d=T0(A,1,o,128+i|(X2[36+i>>2]=0),104+i|0,80+i|0,32+i|0))|B){g=B?-1:1,B&&d&&(g=m0(X2[56+i>>2],X2[60+i>>2],X2[64+i>>2],X2[68+i>>2],X2[72+i>>2],32+i|0));e:{r:if(!T){if(0<=(0|g)){if(-1<X2[48+i>>2])break r;if(X2[40+i>>2]|X2[44+i>>2])break r;}else {if(-1<X2[72+i>>2])break r;if(X2[64+i>>2]|X2[68+i>>2])break r;}f=l,c=s,v=Z,a=k;break e;}a=v=N0(A,e,o),Z&&(X2[Z+4>>2]=v,a=k),X2[v>>2]=Z,c=f=X2[v+8>>2],l&&(X2[l>>2]=f,c=s),X2[f+4>>2]=l;}if(X2[28+i>>2]=B,l=X2[24+i>>2]=d,g||(D0(X2[y>>2],e,o,28+i|0,24+i|0),l=X2[24+i>>2]),(0|g)<0||!l)s=c;else {e:{r:{if(G){if((0|d)!=(0|(r=X2[G>>2])))for(;s=X2[r+8>>2],((b=n=0)|(k=X2[r>>2]))!=(0|r)&&(X2[k+4>>2]=X2[r+4>>2],b=X2[X2[r+4>>2]>>2]=k),X2[X2[s+12>>2]+8>>2]=b,(0|(b=X2[s>>2]))!=(0|s)&&(X2[b+4>>2]=X2[s+4>>2],n=X2[X2[s+4>>2]>>2]=b),X2[X2[r+12>>2]+8>>2]=n,X2[r+16>>2]=0,X2[(b=r+8|0)>>2]=0,X2[b+4>>2]=0,X2[r>>2]=0,X2[r+4>>2]=0,X2[r>>2]=X2[A+56>>2],X2[A+56>>2]=r,X2[s+16>>2]=0,X2[(r=s+8|0)>>2]=0,X2[r+4>>2]=0,X2[s>>2]=0,X2[s+4>>2]=0,X2[s>>2]=X2[A+56>>2],X2[A+56>>2]=s,X2[A+116>>2]=X2[A+116>>2]-1,(0|d)!=(0|(r=k)););if(f)break r;break e;}if(!f){t=d;break e;}G=X2[d+4>>2],t=c;}X2[G>>2]=c,X2[c+4>>2]=G,X2[f>>2]=d,X2[d+4>>2]=f,l=X2[24+i>>2],c=0;}s=c,E=X2[Y>>2],C=X2[I>>2],G=X2[l+8>>2],w=X2[o+88>>2],f=0,o=X2[l+12>>2];}if(b=o,l=f,0<(0|g)||!(g=X2[28+i>>2]))Z=v;else {e:{r:{f:{i:{if(R){if((0|B)!=(0|(r=X2[R+4>>2])))for(;k=X2[r+8>>2],f=X2[r+4>>2],((o=n=0)|(c=X2[r>>2]))!=(0|r)&&(X2[c+4>>2]=f,o=X2[X2[r+4>>2]>>2]=c),X2[X2[k+12>>2]+8>>2]=o,(0|(o=X2[k>>2]))!=(0|k)&&(X2[o+4>>2]=X2[k+4>>2],n=X2[X2[k+4>>2]>>2]=o),X2[X2[r+12>>2]+8>>2]=n,X2[r+16>>2]=0,X2[(n=r+8|0)>>2]=0,X2[n+4>>2]=0,X2[r>>2]=0,X2[r+4>>2]=0,X2[r>>2]=X2[A+56>>2],X2[A+56>>2]=r,X2[k+16>>2]=0,X2[(r=k+8|0)>>2]=0,X2[r+4>>2]=0,X2[k>>2]=0,X2[k+4>>2]=0,X2[k>>2]=X2[A+56>>2],X2[A+56>>2]=k,X2[A+116>>2]=X2[A+116>>2]-1,(0|B)!=(0|(r=f)););if(v)break i;break e;}if(v)break f;_=B;break e;}r=(X2[a>>2]=R)+4|0;break r;}r=X2[B>>2],r=(X2[(_=a)>>2]=r)+4|0;}X2[r>>2]=a,X2[B>>2]=v,X2[v+4>>2]=B,g=X2[28+i>>2],a=0;}E=X2[h>>2],C=X2[m>>2],R=X2[g+8>>2],w=X2[e+88>>2],Z=0,e=X2[g+12>>2];}if(k=a,r=1,(0|e)==(0|Q)&&(0|b)==(0|u)){if(R){if((0|_)!=(0|(r=X2[R+4>>2])))for(;b=X2[r+8>>2],f=X2[r+4>>2],((o=n=0)|(a=X2[r>>2]))!=(0|r)&&(X2[a+4>>2]=f,o=X2[X2[r+4>>2]>>2]=a),X2[X2[b+12>>2]+8>>2]=o,(0|(a=X2[b>>2]))!=(0|b)&&(X2[a+4>>2]=X2[b+4>>2],n=X2[X2[b+4>>2]>>2]=a),X2[X2[r+12>>2]+8>>2]=n,X2[r+16>>2]=0,X2[(a=r+8|0)>>2]=0,X2[a+4>>2]=0,X2[r>>2]=0,X2[r+4>>2]=0,X2[r>>2]=X2[A+56>>2],X2[A+56>>2]=r,X2[b+16>>2]=0,X2[(r=b+8|0)>>2]=0,X2[r+4>>2]=0,X2[b>>2]=0,X2[b+4>>2]=0,X2[b>>2]=X2[A+56>>2],X2[A+56>>2]=b,X2[A+116>>2]=X2[A+116>>2]-1,(0|_)!=(0|(r=f)););Z&&(X2[R+4>>2]=k,X2[k>>2]=R,X2[Z+4>>2]=_,X2[_>>2]=Z);}else X2[Z+4>>2]=k,X2[k>>2]=Z,X2[e+8>>2]=Z;if(G){if((0|t)!=(0|(r=X2[G>>2])))for(;o=X2[r+8>>2],((b=n=0)|(f=X2[r>>2]))!=(0|r)&&(X2[f+4>>2]=X2[r+4>>2],b=X2[X2[r+4>>2]>>2]=f),X2[X2[o+12>>2]+8>>2]=b,(0|(a=X2[o>>2]))!=(0|o)&&(X2[a+4>>2]=X2[o+4>>2],n=X2[X2[o+4>>2]>>2]=a),X2[X2[r+12>>2]+8>>2]=n,X2[r+16>>2]=0,X2[(a=r+8|0)>>2]=0,X2[a+4>>2]=0,X2[r>>2]=0,X2[r+4>>2]=0,X2[r>>2]=X2[A+56>>2],X2[A+56>>2]=r,X2[o+16>>2]=0,X2[(r=o+8|0)>>2]=0,X2[r+4>>2]=0,X2[o>>2]=0,X2[o+4>>2]=0,X2[o>>2]=X2[A+56>>2],X2[A+56>>2]=o,X2[A+116>>2]=X2[A+116>>2]-1,(0|t)!=(0|(r=f)););r=0,l?(X2[s+4>>2]=G,X2[G>>2]=s,X2[t+4>>2]=l,X2[l>>2]=t,o=u):(o=u,l=0);}else X2[s+4>>2]=l,X2[l>>2]=s,X2[u+8>>2]=l,o=u,r=G=0;}else o=b,T=0;}else f=N0(A,e,o),X2[e+8>>2]=f,r=X2[f+8>>2],X2[o+8>>2]=r,X2[f+4>>2]=f,X2[f>>2]=f,X2[r+4>>2]=r,X2[r>>2]=r,r=0;if(!r)break;}}else A=X2[12+i>>2],X2[f>>2]=X2[8+i>>2],X2[f+4>>2]=A,A=X2[4+(e=16+i|0)>>2],X2[(r=f+8|0)>>2]=X2[e>>2],X2[r+4>>2]=A;}K2=144+i|0;}(8+a|(X2[140+a>>2]=0),0,r,136+a|0),X2[132+a>>2]=X2[136+a>>2],(e=X2[164+a>>2])&&J2[168+a|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),(0|(n=X2[A+4>>2]))<=-1)for(X2[A+8>>2]<=-1&&((e=X2[A+12>>2])&&J2[A+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),S2[A+16|0]=1,X2[A+8>>2]=0,X2[A+12>>2]=0),e=n<<4;;)if(t=X2[156+a>>2],r=X2[A+12>>2]+e|0,X2[(b=r)>>2]=X2[152+a>>2],X2[b+4>>2]=t,t=X2[(b=160+a|0)+4>>2],X2[(r=r+8|0)>>2]=X2[b>>2],X2[r+4>>2]=t,e=e+16|0,!((r=n)>>>0<=(n=n+1|0)>>>0))break;if(X2[A+4>>2]=0,X2[160+a>>2]=0,X2[152+a>>2]=0,((X2[156+a>>2]=0)|(n=X2[A+24>>2]))<=-1)for(X2[A+28>>2]<=-1&&((e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+28>>2]=0,X2[A+32>>2]=0,S2[A+36|0]=1),e=H2(n,12);;)if(b=X2[156+a>>2],r=X2[A+32>>2]+e|0,X2[r>>2]=X2[152+a>>2],X2[r+4>>2]=b,X2[r+8>>2]=X2[160+a>>2],e=e+12|0,!((r=n)>>>0<=(n=n+1|0)>>>0))break;if(((X2[A+24>>2]=0)|(r=X2[A+44>>2]))<=-1&&(e=X2[A+52>>2],X2[A+48>>2]<=-1&&(e&&J2[A+56|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),S2[A+56|0]=1,X2[A+48>>2]=0,e=X2[A+52>>2]=0),v2((n=e)+(e=r<<2)|0,0,0-e|0)),X2[A+44>>2]=0,t=X2[132+a>>2],!(-1<X2[t+104>>2])){for(X2[t+104>>2]=0,X2[6258]=X2[6258]+1,e=L2(23),X2[(s=e+19&-16)>>2]=t,X2[s-4>>2]=e,v=l=1;;){A:{e:{r:{f:{if(0<=X2[t+100>>2])U2[(152+a|0)+(X2[116+a>>2]<<2)>>2]=X2[t+88>>2];else if(c=W0(t+24|0),k=W0(e=t+72|0),U2[(152+a|0)+(X2[116+a>>2]<<2)>>2]=c/k,X2[t+100>>2]<0)break f;U2[(152+a|0)+(X2[120+a>>2]<<2)>>2]=X2[t+92>>2];break r;}if(c=W0(t+40|0),k=W0(e),U2[(152+a|0)+(X2[120+a>>2]<<2)>>2]=c/k,X2[t+100>>2]<0)break e;}c=P2(X2[t+96>>2]);break A;}c=P2(W0(t+56|0)/W0(e));}if(U2[(152+a|0)+(X2[112+a>>2]<<2)>>2]=c,c=P2(P2(U2[160+a>>2]*U2[16+a>>2])+U2[32+a>>2]),k=P2(P2(U2[156+a>>2]*U2[12+a>>2])+U2[28+a>>2]),B=P2(P2(U2[152+a>>2]*U2[8+a>>2])+U2[24+a>>2]),(0|(e=X2[A+4>>2]))==X2[A+8>>2]&&!((0|(r=e?e<<1:1))<=(0|e))){if(o=0,r&&(X2[6258]=X2[6258]+1,(n=L2(19+(r<<4)|0))&&(X2[(o=n+19&-16)-4>>2]=n)),1<=(0|e))for(n=0;;)if(u=X2[A+12>>2]+n|0,G=X2[u+4>>2],X2[(b=n+o|0)>>2]=X2[u>>2],X2[b+4>>2]=G,G=X2[(u=u+8|0)+4>>2],X2[(b=b+8|0)>>2]=X2[u>>2],X2[b+4>>2]=G,n=n+16|0,!(e=e-1|0))break;(e=X2[A+12>>2])&&J2[A+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+12>>2]=o,S2[A+16|0]=1,X2[A+8>>2]=r,e=X2[A+4>>2];}if(e=X2[A+12>>2]+(e<<4)|0,X2[e+12>>2]=0,U2[e+8>>2]=c,U2[e+4>>2]=k,U2[e>>2]=B,X2[A+4>>2]=X2[A+4>>2]+1,G=X2[t+8>>2]){for(e=G,u=r=-1;;){if((0|(n=X2[e+20>>2]))<=-1){if(t=X2[A+24>>2],X2[(f=160+a|0)>>2]=0,X2[152+a>>2]=0,((X2[156+a>>2]=0)|(n=t))==X2[A+28>>2]&&!((0|(Z=n?t<<1:1))<=(0|n))){if(o=0,Z&&(X2[6258]=X2[6258]+1,(n=L2(H2(Z,12)+19|0))&&(X2[(o=n+19&-16)-4>>2]=n)),1<=(0|t))for(n=0,b=t;;)if(_=X2[A+32>>2]+n|0,F=X2[_+4>>2],X2[(g=n+o|0)>>2]=X2[_>>2],X2[g+4>>2]=F,X2[g+8>>2]=X2[_+8>>2],n=n+12|0,!(b=b-1|0))break;(n=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[n-4>>2])),X2[A+32>>2]=o,S2[A+36|0]=1,X2[A+28>>2]=Z,n=X2[A+24>>2];}if(b=X2[156+a>>2],n=X2[A+32>>2]+H2(n,12)|0,X2[n>>2]=X2[152+a>>2],X2[n+4>>2]=b,X2[n+8>>2]=X2[f>>2],b=X2[A+24>>2],X2[A+24>>2]=n=b+1|0,X2[f>>2]=0,X2[152+a>>2]=0,X2[156+a>>2]=0,X2[A+28>>2]==(0|n)&&!((0|(Z=n?n<<1:1))<=(0|n))){if(o=0,Z&&(X2[6258]=X2[6258]+1,(n=L2(H2(Z,12)+19|0))&&(X2[(o=n+19&-16)-4>>2]=n)),0<=(0|b))for(b=b+1|0,n=0;;)if(_=X2[A+32>>2]+n|0,F=X2[_+4>>2],X2[(g=n+o|0)>>2]=X2[_>>2],X2[g+4>>2]=F,X2[g+8>>2]=X2[_+8>>2],n=n+12|0,!(b=b-1|0))break;(n=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[n-4>>2])),X2[A+32>>2]=o,S2[A+36|0]=1,X2[A+28>>2]=Z,n=X2[A+24>>2];}if(b=X2[156+a>>2],n=X2[A+32>>2]+H2(n,12)|0,X2[n>>2]=X2[152+a>>2],X2[n+4>>2]=b,X2[n+8>>2]=X2[f>>2],X2[A+24>>2]=X2[A+24>>2]+1,X2[e+20>>2]=t,X2[X2[e+8>>2]+20>>2]=g=t+1|0,f=(_=X2[A+32>>2])+H2(t,12)|0,X2[4+f>>2]=1,X2[16+f>>2]=-1,Z=X2[e+12>>2],-1<(0|(n=X2[Z+104>>2])))b=l,l=n;else {X2[Z+104>>2]=l;A:if((0|l)!=(0|v)||(0|(o=v?v<<1:1))<=(0|v))t=s,o=v;else {if(t=0,o&&(X2[6258]=X2[6258]+1,(n=L2(19+(o<<2)|0))&&(X2[(t=n+19&-16)-4>>2]=n)),1<=(0|v)){for(n=t,b=s;;)if(X2[n>>2]=X2[b>>2],n=n+4|0,b=b+4|0,!(v=v-1|0))break;}else if(!s)break A;X2[6259]=X2[6259]+1,q2(X2[s-4>>2]);}X2[(l<<2)+t>>2]=Z,b=l+1|0,s=t,v=o;}X2[8+(_+H2(g,12)|0)>>2]=Y,X2[8+f>>2]=l,l=b,n=X2[e+20>>2];}if(b=n,0<=(0|r)&&(X2[X2[A+32>>2]+H2(n,12)>>2]=r-n,b=u),r=n,u=b,(0|G)==(0|(e=X2[e>>2])))break;}X2[X2[A+32>>2]+H2(u,12)>>2]=r-u;}if(!((0|(e=Y+1|0))<(0|l)))break;t=X2[(e<<2)+s>>2],Y=e;}for(v=0;;){if(l=X2[X2[(v<<2)+s>>2]+8>>2])for(e=l;;){if(0<=(0|(n=X2[e+20>>2]))){if((0|(o=X2[A+44>>2]))==X2[A+48>>2]&&!((0|(u=o?o<<1:1))<=(0|o))){r=0,u&&(X2[6258]=X2[6258]+1,(n=L2(19+(u<<2)|0))&&(X2[(r=n+19&-16)-4>>2]=n)),t=X2[A+52>>2];A:{if(1<=(0|o)){for(n=r,b=t;;)if(X2[n>>2]=X2[b>>2],n=n+4|0,b=b+4|0,!(o=o-1|0))break;}else if(!t)break A;J2[A+56|0]&&(X2[6259]=X2[6259]+1,q2(X2[t-4>>2])),o=X2[A+44>>2];}X2[A+48>>2]=u,X2[A+52>>2]=r,S2[A+56|0]=1,n=X2[e+20>>2];}for(X2[X2[A+52>>2]+(o<<2)>>2]=n,X2[A+44>>2]=X2[A+44>>2]+1,n=e;;)if(X2[n+20>>2]=-1,(0|(n=X2[X2[n+8>>2]+4>>2]))==(0|e))break;}if((0|l)==(0|(e=X2[e>>2])))break;}if(e=(0|v)==(0|Y),v=v+1|0,e)break;}s&&(X2[6259]=X2[6259]+1,q2(X2[s-4>>2]));}if((A=X2[100+a>>2])&&J2[104+a|0]&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),X2[100+a>>2]=0,S2[104+a|0]=1,X2[92+a>>2]=0,X2[96+a>>2]=0,n=X2[72+a>>2])for(;;)if(X2[72+a>>2]=X2[n+8>>2],(A=X2[n>>2])&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),X2[6259]=X2[6259]+1,q2(X2[n-4>>2]),!(n=X2[72+a>>2]))break;if(n=X2[56+a>>2])for(;;)if(X2[56+a>>2]=X2[n+8>>2],(A=X2[n>>2])&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),X2[6259]=X2[6259]+1,q2(X2[n-4>>2]),!(n=X2[56+a>>2]))break;if(n=X2[40+a>>2])for(;;)if(X2[40+a>>2]=X2[n+8>>2],(A=X2[n>>2])&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),X2[6259]=X2[6259]+1,q2(X2[n-4>>2]),!(n=X2[40+a>>2]))break;}K2=176+a|0;}function x0(A,e,r,f){N2[X2[X2[(A|=0)>>2]+80>>2]](A,e|=0,r|=0,f|=0);}function y0(A,e){A|=0,e=P2(e),U2[A+52>>2]=e;}function V0(A){return 0;}function f(A,e,r){}function p0(A,e){var r,f,i,a=0,n=0,b=0,t=0,o=0,c=0,k=0,u=0,s=0,l=0,B=0,v=0;if(X2[A+8>>2]<(0|e)){if(e&&(X2[6258]=X2[6258]+1,(a=L2(H2(e,36)+19|0))&&(X2[(k=a+19&-16)-4>>2]=a)),!((0|(i=X2[A+4>>2]))<1)){for(;;){n=H2(u,36),X2[(a=n+k|0)+4>>2]=0,X2[a+8>>2]=0,S2[a+16|0]=1,r=a+4|(X2[a+12>>2]=0);A:{e:{r:{if(o=n+X2[A+12>>2]|0,1<=(0|(b=X2[o+4>>2]))){if(B=a+8|0,s=a+12|0,v=a+16|0,X2[6258]=X2[6258]+1,!(n=L2((l=b<<2)+19|0)))break r;if(X2[(c=n+19&-16)-4>>2]=n,f=X2[s>>2],1<=(0|(n=X2[r>>2]))){for(t=0;;)if(X2[t+c>>2]=X2[t+f>>2],t=t+4|0,!(n=n-1|0))break;}else if(!f)break e;X2[6259]=X2[6259]+1,q2(X2[f-4>>2]);break e;}X2[r>>2]=b;break A;}c=0;}for(X2[s>>2]=c,S2[0|v]=1,X2[B>>2]=b,v2(c,0,l),X2[r>>2]=b,t=X2[o+12>>2],n=X2[s>>2];;)if(X2[n>>2]=X2[t>>2],n=n+4|0,t=t+4|0,!(b=b-1|0))break;}if(n=X2[o+24>>2],X2[a+20>>2]=X2[o+20>>2],X2[a+24>>2]=n,b=X2[(n=o+28|0)+4>>2],X2[(a=a+28|0)>>2]=X2[n>>2],X2[a+4>>2]=b,(0|i)==(0|(u=u+1|0)))break;}if(!((0|(b=X2[A+4>>2]))<1))for(n=8;;)if(a=X2[A+12>>2]+n|0,(o=X2[(t=a+4|0)>>2])&&J2[a+8|0]&&(X2[6259]=X2[6259]+1,q2(X2[o-4>>2])),X2[t>>2]=0,S2[a+8|0]=1,X2[(a=a-4|0)>>2]=0,n=n+36|(X2[a+4>>2]=0),!(b=b-1|0))break;}(a=X2[A+12>>2])&&J2[A+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[a-4>>2])),X2[A+12>>2]=k,S2[A+16|0]=1,X2[A+8>>2]=e;}}function M0(A,e){var r,f,i,a,n,b,t=0,o=0,c=0,k=0;if((0|(k=X2[A+4>>2]))==X2[A+8>>2]&&(p0(A,k?k<<1:1),k=X2[A+4>>2]),t=(f=X2[A+12>>2])+H2(k,36)|0,X2[t+4>>2]=0,X2[t+8>>2]=0,S2[t+16|0]=1,i=t+4|(X2[t+12>>2]=0),1<=(0|(o=X2[e+4>>2]))){for(n=t+8|0,r=t+12|0,b=t+16|0,X2[6258]=X2[6258]+1,(t=L2(19+(a=o<<2)|0))&&(X2[(c=t+19&-16)-4>>2]=t,(t=X2[r>>2])&&(X2[6259]=X2[6259]+1,q2(X2[t-4>>2]))),X2[r>>2]=c,S2[0|b]=1,X2[n>>2]=o,v2(c,0,a),X2[i>>2]=o,t=X2[e+12>>2],c=X2[r>>2];;)if(X2[c>>2]=X2[t>>2],c=c+4|0,t=t+4|0,!(o=o-1|0))break;}else X2[i>>2]=o;o=X2[e+24>>2],t=H2(k,36)+f|0,X2[t+20>>2]=X2[e+20>>2],X2[t+24>>2]=o,o=X2[(e=e+28|0)+4>>2],X2[(t=t+28|0)>>2]=X2[e>>2],X2[t+4>>2]=o,X2[A+4>>2]=X2[A+4>>2]+1;}function S0(A,e,r,f){A|=0,e|=0,r|=0,f|=0;P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var i,a,n,b=P2(N2[X2[X2[A>>2]+48>>2]](A)),t=U2[e+52>>2],o=U2[e+24>>2],c=U2[e+20>>2],k=U2[e+56>>2],u=U2[e+40>>2],s=U2[A+72>>2],l=U2[A+88>>2],B=U2[e+36>>2],v=U2[A+68>>2],d=U2[A+84>>2],Z=U2[e+48>>2],_=U2[e+8>>2],g=U2[e>>2],E=U2[e+4>>2],Q=U2[e+16>>2],e=U2[e+32>>2],w=U2[A+64>>2],A=U2[A+80>>2];X2[r+12>>2]=0,i=k,k=P2(P2(A+w)*P2(.5)),a=P2(P2(d+v)*P2(.5)),n=P2(P2(l+s)*P2(.5)),i=P2(i+P2(P2(P2(e*k)+P2(B*a))+P2(u*n))),w=P2(b+P2(P2(A-w)*P2(.5))),v=P2(b+P2(P2(d-v)*P2(.5))),b=P2(b+P2(P2(l-s)*P2(.5))),u=P2(P2(P2(w*P2(j2(e)))+P2(v*P2(j2(B))))+P2(b*P2(j2(u)))),U2[r+8>>2]=i-u,s=P2(t+P2(P2(P2(k*Q)+P2(a*c))+P2(n*o))),o=P2(P2(P2(w*P2(j2(Q)))+P2(v*P2(j2(c))))+P2(b*P2(j2(o)))),U2[r+4>>2]=s-o,c=P2(Z+P2(P2(P2(k*g)+P2(a*E))+P2(n*_))),b=P2(P2(P2(w*P2(j2(g)))+P2(v*P2(j2(E))))+P2(b*P2(j2(_)))),U2[r>>2]=c-b,X2[f+12>>2]=0,U2[f+8>>2]=u+i,U2[f+4>>2]=o+s,U2[f>>2]=b+c;}function X0(A,e){A|=0,e=P2(e);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var r,f,i,a,n,b,t,o=P2(N2[X2[X2[A>>2]+48>>2]](A)),c=P2(N2[X2[X2[A>>2]+48>>2]](A)),k=P2(N2[X2[X2[A>>2]+48>>2]](A));U2[A+52>>2]=e,e=U2[(r=A+44|0)>>2],i=U2[(f=A+40|0)>>2],a=U2[A+36>>2],n=P2(N2[X2[X2[A>>2]+48>>2]](A)),b=P2(N2[X2[X2[A>>2]+48>>2]](A)),t=P2(N2[X2[X2[A>>2]+48>>2]](A)),X2[A+48>>2]=0,U2[f>>2]=P2(c+i)-b,U2[A+36>>2]=P2(o+a)-n,U2[r>>2]=P2(k+e)-t;}function J0(A){var e;X2[(A|=0)>>2]=10364,(e=X2[A+60>>2])&&(N2[X2[X2[e>>2]>>2]](e),(e=X2[A+60>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);}function U0(A,e,r,f){A|=0,e|=0,r|=0,f|=0;P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var i=P2(N2[X2[X2[A>>2]+48>>2]](A)),a=U2[e+52>>2],n=U2[e+20>>2],b=U2[e+24>>2],t=U2[e+56>>2],o=U2[e+36>>2],c=U2[A+40>>2],k=U2[e+40>>2],u=U2[A+44>>2],s=U2[e+48>>2],l=U2[e>>2],B=U2[e+4>>2],v=U2[e+8>>2],d=U2[e+16>>2],e=U2[e+32>>2],A=U2[A+36>>2];X2[r+12>>2]=0,A=P2(i+A),c=P2(i+c),i=P2(i+u),o=P2(P2(P2(A*P2(j2(e)))+P2(c*P2(j2(o))))+P2(i*P2(j2(k)))),U2[r+8>>2]=t-o,n=P2(P2(P2(A*P2(j2(d)))+P2(c*P2(j2(n))))+P2(i*P2(j2(b)))),U2[r+4>>2]=a-n,i=P2(P2(P2(A*P2(j2(l)))+P2(c*P2(j2(B))))+P2(i*P2(j2(v)))),U2[r>>2]=s-i,X2[f+12>>2]=0,U2[f+8>>2]=t+o,U2[f+4>>2]=n+a,U2[f>>2]=i+s;}function H0(A,e){A|=0,e|=0;P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var r,f,i,a=P2(N2[X2[X2[A>>2]+48>>2]](A)),n=P2(N2[X2[X2[A>>2]+48>>2]](A)),b=P2(N2[X2[X2[A>>2]+48>>2]](A)),t=U2[e>>2],o=U2[e+4>>2],c=U2[e+8>>2];X2[A+48>>2]=0,X2[A+32>>2]=0,r=U2[(e=A+28|0)>>2],c=P2(j2(c)),U2[e>>2]=c,f=U2[(e=A+24|0)>>2],o=P2(j2(o)),U2[e>>2]=o,i=U2[A+20>>2],t=P2(j2(t)),U2[A+20>>2]=t,U2[(e=A+44|0)>>2]=P2(P2(P2(b+U2[e>>2])/r)*c)-b,U2[(e=A+40|0)>>2]=P2(P2(P2(n+U2[e>>2])/f)*o)-n,U2[A+36>>2]=P2(P2(P2(a+U2[A+36>>2])/i)*t)-a;}function P0(A){return 52;}function j0(A){return 6;}function z0(A){A|=0,X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);}function O0(A,e){e|=0;var r;X2[(A|=0)>>2]=0,X2[A+4>>2]=0,X2[(r=A+8|0)>>2]=0,X2[4+r>>2]=0,X2[(X2[e+60>>2]<<2)+A>>2]=1065353216;}function K0(A,e){P2(e);}function L0(A){return 60;}function q0(A,e,r){A|=0,e=P2(e),X2[(r|=0)>>2]=0,X2[r+4>>2]=0,X2[(A=r+8|0)>>2]=0,X2[A+4>>2]=0;}function $0(A){var e;(e=X2[A>>2])&&A1(A,e),(e=X2[A+4>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+4>>2]=0,X2[A+8>>2]=-1,(e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+16>>2]=0,X2[A+32>>2]=0,S2[A+36|0]=1,X2[(A=A+24|0)>>2]=0,X2[A+4>>2]=0;}function A1(A,e){var r;X2[e+40>>2]&&(A1(A,X2[e+36>>2]),A1(A,X2[e+40>>2])),X2[A>>2]==(0|e)&&(X2[A>>2]=0),(r=X2[A+4>>2])&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+4>>2]=e;}function e1(A){var e;(e=X2[A>>2])&&A1(A,e),(e=X2[A+4>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+4>>2]=0,X2[A+8>>2]=-1,(e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+32>>2]=0,X2[A+16>>2]=0,S2[A+36|0]=1,X2[(A=A+24|0)>>2]=0,X2[A+4>>2]=0;}function r1(A,e){var r,f,i,a,n,b,t,o,c,k,u,s,l=0,B=0,v=0,d=0,Z=0,_=0;K2=s=K2-32|0;A:if(!((0|(e=(0|e)<=-1?X2[A+12>>2]:e))<1)&&(l=X2[A>>2]))for(;;){if(X2[(d=l+40|0)>>2])for(_=0;;)if((v=X2[l+32>>2])>>>0<=l>>>0?v=l:(f=(0|(r=X2[v+40>>2]))==(0|l),a=X2[36+((i=((0|l)!=(0|r))<<2)+v|0)>>2],Z=A,(B=X2[v+32>>2])&&(Z=36+(B+((X2[B+40>>2]==(0|v))<<2)|0)|0),X2[Z>>2]=l,X2[a+32>>2]=l,X2[v+32>>2]=l,X2[l+32>>2]=B,X2[v+36>>2]=X2[l+36>>2],X2[v+40>>2]=X2[d>>2],X2[X2[l+36>>2]+32>>2]=v,X2[X2[d>>2]+32>>2]=v,X2[(r=l+36|0)+(f<<2)>>2]=v,X2[r+i>>2]=a,d=X2[4+(r=v+24|0)>>2],o=X2[r>>2],X2[(B=24+s|0)>>2]=o,X2[B+4>>2]=d,a=X2[(B=v+16|0)+4>>2],c=X2[B>>2],X2[(f=16+s|0)>>2]=c,X2[4+f>>2]=a,i=X2[4+(f=v+8|0)>>2],k=X2[f>>2],X2[(n=8+s|0)>>2]=k,X2[4+n>>2]=i,n=X2[v+4>>2],u=X2[v>>2],X2[s>>2]=u,X2[4+s>>2]=n,b=X2[(Z=t=l+24|0)+4>>2],X2[r>>2]=X2[Z>>2],X2[4+r>>2]=b,b=X2[4+(r=l+16|0)>>2],X2[B>>2]=X2[r>>2],X2[B+4>>2]=b,b=X2[(B=l+8|0)+4>>2],X2[f>>2]=X2[B>>2],X2[4+f>>2]=b,f=X2[l+4>>2],X2[v>>2]=X2[l>>2],X2[v+4>>2]=f,X2[t>>2]=o,X2[4+t>>2]=d,X2[r>>2]=c,X2[4+r>>2]=a,X2[B>>2]=k,X2[B+4>>2]=i,X2[l>>2]=u,X2[l+4>>2]=n),l=X2[A+16>>2]>>>_|0,_=_+1&31,l=X2[36+(((1&l)<<2)+v|0)>>2],!X2[(d=l+40|0)>>2])break;if(B=0,i1(Z=A,B=f1(A,l)?X2[A>>2]:B,l),X2[A+16>>2]=X2[A+16>>2]+1,!(e=e-1|0))break A;l=X2[A>>2];}K2=32+s|0;}function f1(A,e){var r,f,i,a,n,b,t,o,c,k,u,s,l,B,v=0,d=0;P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);if(X2[A>>2]==(0|e))return X2[A>>2]=0;if(d=X2[e+32>>2],v=X2[36+(((X2[d+40>>2]!=(0|e))<<2)+d|0)>>2],e=X2[d+32>>2]){for(X2[36+((((0|d)==X2[e+40>>2])<<2)+e|0)>>2]=v,X2[v+32>>2]=e,(v=X2[A+4>>2])&&(X2[6259]=X2[6259]+1,q2(X2[v-4>>2])),X2[A+4>>2]=d;;){if(B=U2[e>>2],v=X2[e+36>>2],r=U2[v>>2],d=X2[e+40>>2],o=U2[d>>2],U2[e>>2]=r=r<o?r:o,o=U2[e+16>>2],f=U2[v+16>>2],c=U2[d+16>>2],U2[e+16>>2]=f=c<f?f:c,c=U2[e+4>>2],i=U2[v+4>>2],k=U2[d+4>>2],U2[e+4>>2]=i=i<k?i:k,k=U2[(a=e+20|0)>>2],n=U2[v+20>>2],u=U2[d+20>>2],U2[a>>2]=n=u<n?n:u,u=U2[e+8>>2],b=U2[v+8>>2],s=U2[d+8>>2],U2[e+8>>2]=b=b<s?b:s,s=U2[(a=e+24|0)>>2],t=U2[v+24>>2],l=U2[d+24>>2],U2[a>>2]=t=l<t?t:l,k==n&&o==f&&r==B&&c==i&&u==b&&s==t)return e;if(!(e=X2[e+32>>2]))break;}return X2[A>>2];}return X2[v+32>>2]=0,X2[A>>2]=v,(e=X2[A+4>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]),v=X2[A>>2]),X2[A+4>>2]=d,v;}function i1(A,e,r){var f,i=0,a=P2(0),n=P2(0),b=P2(0),t=0;if(X2[A>>2]){if(i=X2[e+40>>2])for(n=P2(U2[r>>2]+U2[r+16>>2]),a=P2(U2[r+8>>2]+U2[r+24>>2]),b=P2(U2[r+4>>2]+U2[r+20>>2]);;)if(t=e+36|0,e=X2[e+36>>2],e=X2[t+(!(P2(P2(P2(j2(P2(n-P2(U2[e>>2]+U2[e+16>>2]))))+P2(j2(P2(b-P2(U2[e+4>>2]+U2[e+20>>2])))))+P2(j2(P2(a-P2(U2[e+8>>2]+U2[e+24>>2])))))<P2(P2(P2(j2(P2(n-P2(U2[i>>2]+U2[i+16>>2]))))+P2(j2(P2(b-P2(U2[i+4>>2]+U2[i+20>>2])))))+P2(j2(P2(a-P2(U2[i+8>>2]+U2[i+24>>2]))))))<<2)>>2],!(i=X2[e+40>>2]))break;t=X2[e+32>>2],(i=X2[A+4>>2])?X2[A+4>>2]=0:(X2[6258]=X2[6258]+1,i=0,(f=L2(63))&&(X2[(i=f+19&-16)-4>>2]=f),X2[i>>2]=0,X2[i+4>>2]=0,X2[i+40>>2]=0,X2[(f=i+32|0)>>2]=0,X2[4+f>>2]=0,X2[(f=i+24|0)>>2]=0,X2[4+f>>2]=0,X2[(f=i+16|0)>>2]=0,X2[4+f>>2]=0,X2[(f=i+8|0)>>2]=0,X2[4+f>>2]=0),X2[i+36>>2]=0,X2[i+40>>2]=0,n=U2[r>>2],a=U2[e>>2],U2[i>>2]=n<a?n:a,n=U2[r+16>>2],a=U2[e+16>>2],U2[i+16>>2]=a<n?n:a,n=U2[r+4>>2],a=U2[e+4>>2],U2[i+4>>2]=n<a?n:a,n=U2[r+20>>2],a=U2[e+20>>2],U2[i+20>>2]=a<n?n:a,n=U2[r+8>>2],a=U2[e+8>>2],U2[i+8>>2]=n<a?n:a,X2[i+32>>2]=t,n=U2[r+24>>2],a=U2[e+24>>2],U2[i+24>>2]=a<n?n:a;A:if(t)for(X2[36+(((X2[X2[e+32>>2]+40>>2]==(0|e))<<2)+t|0)>>2]=i,X2[i+36>>2]=e,X2[e+32>>2]=i,X2[i+40>>2]=r,X2[r+32>>2]=i,n=U2[i>>2];;){if(A=i,U2[(i=t)>>2]<=n&&U2[i+4>>2]<=U2[A+4>>2]&&U2[i+8>>2]<=U2[A+8>>2]&&U2[i+16>>2]>=U2[A+16>>2]&&U2[i+20>>2]>=U2[A+20>>2]&&U2[i+24>>2]>=U2[A+24>>2])break A;if(A=X2[i+36>>2],n=U2[A>>2],e=X2[i+40>>2],a=U2[e>>2],U2[i>>2]=n=n<a?n:a,a=U2[A+16>>2],b=U2[e+16>>2],U2[i+16>>2]=b<a?a:b,a=U2[A+4>>2],b=U2[e+4>>2],U2[i+4>>2]=a<b?a:b,a=U2[A+20>>2],b=U2[e+20>>2],U2[i+20>>2]=b<a?a:b,a=U2[A+8>>2],b=U2[e+8>>2],U2[i+8>>2]=a<b?a:b,a=U2[A+24>>2],b=U2[e+24>>2],U2[i+24>>2]=b<a?a:b,!(t=X2[i+32>>2]))break;}else X2[i+36>>2]=e,X2[e+32>>2]=i,X2[i+40>>2]=r,X2[A>>2]=i,X2[r+32>>2]=i;}else X2[r+32>>2]=0,X2[A>>2]=r;}function a1(A,e){return 1;}function n1(A){var e=0;return X2[(A|=0)>>2]=11628,(e=X2[A+72>>2])&&($0(e),(e=X2[A+72>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),(e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+32>>2]=0,S2[A+36|0]=1,X2[(e=A+24|0)>>2]=0,(X2[e+4>>2]=0)|A;}function b1(A,e){var r,f,i,a,n,b,t,o,c,k,u,s,l,B=0,v=0,d=0,Z=0,_=0;K2=l=K2-80|0,X2[A+76>>2]=X2[A+76>>2]+1,(r=X2[A+72>>2])&&(f1(r,B=X2[76+(X2[A+32>>2]+H2(e,80)|0)>>2]),(d=X2[r+4>>2])&&(X2[6259]=X2[6259]+1,q2(X2[d-4>>2])),X2[r+4>>2]=B,X2[r+12>>2]=X2[r+12>>2]-1),B=X2[A+24>>2],k=H2(e,80),n=X2[(u=A+32|0)>>2],Z=X2[4+(f=8+(r=k+n|0)|0)>>2],X2[(d=8+l|0)>>2]=X2[f>>2],X2[d+4>>2]=Z,b=X2[4+(i=24+r|0)>>2],X2[(Z=t=24+l|0)>>2]=X2[i>>2],X2[4+Z>>2]=b,_=X2[4+(o=40+r|0)>>2],X2[(Z=40+l|0)>>2]=X2[o>>2],X2[4+Z>>2]=_,v=X2[4+(a=56+r|0)>>2],X2[(_=b=56+l|0)>>2]=X2[a>>2],X2[4+_>>2]=v,s=X2[4+(c=72+r|0)>>2],X2[(v=_=72+l|0)>>2]=X2[c>>2],X2[4+v>>2]=s,v=X2[4+r>>2],X2[l>>2]=X2[r>>2],X2[4+l>>2]=v,v=X2[20+r>>2],X2[16+l>>2]=X2[16+r>>2],X2[20+l>>2]=v,v=X2[36+r>>2],X2[32+l>>2]=X2[32+r>>2],X2[36+l>>2]=v,v=X2[52+r>>2],X2[48+l>>2]=X2[48+r>>2],X2[52+l>>2]=v,v=X2[68+r>>2],X2[64+l>>2]=X2[64+r>>2],X2[68+l>>2]=v,v=H2(B,80)-80|0,s=X2[(B=v+n|0)+68>>2],X2[64+r>>2]=X2[B+64>>2],X2[68+r>>2]=s,s=X2[4+(n=B+8|0)>>2],X2[f>>2]=X2[n>>2],X2[4+f>>2]=s,f=X2[B+4>>2],X2[r>>2]=X2[B>>2],X2[4+r>>2]=f,n=X2[4+(f=B+24|0)>>2],X2[i>>2]=X2[f>>2],X2[4+i>>2]=n,f=X2[B+20>>2],X2[16+r>>2]=X2[B+16>>2],X2[20+r>>2]=f,i=X2[4+(f=B+40|0)>>2],X2[o>>2]=X2[f>>2],X2[4+o>>2]=i,f=X2[B+36>>2],X2[32+r>>2]=X2[B+32>>2],X2[36+r>>2]=f,i=X2[4+(f=B+56|0)>>2],X2[a>>2]=X2[f>>2],X2[4+a>>2]=i,f=X2[B+52>>2],X2[48+r>>2]=X2[B+48>>2],X2[52+r>>2]=f,B=X2[4+(r=B+72|0)>>2],X2[c>>2]=X2[r>>2],X2[4+c>>2]=B,f=X2[4+l>>2],r=v+X2[u>>2]|0,X2[r>>2]=X2[l>>2],X2[4+r>>2]=f,f=X2[d+4>>2],X2[(B=8+r|0)>>2]=X2[d>>2],X2[B+4>>2]=f,d=X2[4+t>>2],X2[(B=24+r|0)>>2]=X2[t>>2],X2[B+4>>2]=d,B=X2[20+l>>2],X2[16+r>>2]=X2[16+l>>2],X2[20+r>>2]=B,d=X2[4+Z>>2],X2[(B=40+r|0)>>2]=X2[Z>>2],X2[B+4>>2]=d,B=X2[36+l>>2],X2[32+r>>2]=X2[32+l>>2],X2[36+r>>2]=B,d=X2[4+b>>2],X2[(B=56+r|0)>>2]=X2[b>>2],X2[B+4>>2]=d,B=X2[52+l>>2],X2[48+r>>2]=X2[48+l>>2],X2[52+r>>2]=B,d=X2[4+_>>2],X2[(B=72+r|0)>>2]=X2[_>>2],X2[B+4>>2]=d,B=X2[68+l>>2],X2[64+r>>2]=X2[64+l>>2],X2[68+r>>2]=B,X2[A+72>>2]&&(X2[X2[76+(X2[A+32>>2]+k|0)>>2]+36>>2]=e),X2[A+24>>2]=X2[A+24>>2]-1,K2=80+l|0;}function t1(A,e,r,f,i,a,n,b,t,o){e|=0,f|=0,i|=0,a|=0,n|=0,b|=0,t|=0,A=X2[(A|=0)+32>>2]+((o|=0)<<5)|0,X2[(r|=0)>>2]=X2[A+12>>2],X2[i>>2]=X2[A+20>>2],X2[e>>2]=X2[A+16>>2],X2[f>>2]=X2[A+28>>2],X2[b>>2]=X2[A>>2],X2[a>>2]=X2[A+4>>2],X2[t>>2]=X2[A+24>>2],X2[n>>2]=X2[A+8>>2];}function o1(A,e){}function c1(A){var e;return X2[(A|=0)>>2]=12152,(e=X2[A+156>>2])&&J2[A+160|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+156>>2]=0,S2[A+160|0]=1,X2[(e=A+148|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+136>>2])&&J2[A+140|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+136>>2]=0,S2[A+140|0]=1,X2[(e=A+128|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+116>>2])&&J2[A+120|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+116>>2]=0,S2[A+120|0]=1,X2[(e=A+108|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+96>>2])&&J2[A+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+96>>2]=0,X2[A>>2]=12040,S2[A+100|0]=1,X2[(e=A+88|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+32>>2]=0,S2[A+36|0]=1,X2[(e=A+24|0)>>2]=0,(X2[4+e>>2]=0)|A;}function k1(A){return X2[(A|=0)+24>>2];}function u1(A,e){var r,f=0,i=0,a=0,n=0,b=0,t=0;if(J2[A+164|0]){if((0|(a=X2[A+128>>2]))==X2[A+132>>2]&&!((0|(n=a?a<<1:1))<=(0|a))){n&&(X2[6258]=X2[6258]+1,(f=L2(19+(n<<2)|0))&&(X2[(i=f+19&-16)-4>>2]=f)),b=X2[A+136>>2];A:{if(1<=(0|a)){for(f=i,t=b;;)if(X2[f>>2]=X2[t>>2],f=f+4|0,t=t+4|0,!(a=a-1|0))break;}else if(!b)break A;J2[A+140|0]&&(X2[6259]=X2[6259]+1,q2(X2[b-4>>2])),a=X2[A+128>>2];}X2[A+136>>2]=i,X2[A+132>>2]=n,S2[A+140|0]=1;}i=X2[A+136>>2],X2[i+(a<<2)>>2]=e,X2[X2[A+32>>2]+4>>2]=i,X2[A+128>>2]=X2[A+128>>2]+1;}else {if((0|(i=X2[A+148>>2]))==X2[A+152>>2]&&!((0|(r=i?i<<1:1))<=(0|i))){r&&(X2[6258]=X2[6258]+1,(f=L2(19+(r<<1)|0))&&(X2[(n=f+19&-16)-4>>2]=f)),b=X2[A+156>>2];A:{if(1<=(0|i)){for(f=n,t=b,a=i;;)if($[f>>1]=A2[t>>1],f=f+2|0,t=t+2|0,!(a=a-1|0))break;}else if(!b)break A;J2[A+160|0]&&(X2[6259]=X2[6259]+1,q2(X2[b-4>>2]),i=X2[A+148>>2]);}X2[A+156>>2]=n,X2[A+152>>2]=r,S2[A+160|0]=1;}X2[A+148>>2]=i+1,f=X2[A+32>>2],A=X2[A+156>>2],X2[f+4>>2]=A,$[A+(i<<1)>>1]=e;}}function s1(A,e,r){var f=0,i=0,a=0,n=0,b=0,t=0,o=P2(0),c=P2(0),k=P2(0),u=P2(0),s=P2(0),l=P2(0);A:{if(J2[A+165|0]){if(!((0|(a=X2[A+88>>2]))<1)&&r)for(r=X2[A+96>>2],k=U2[A+168>>2],u=U2[e+8>>2],s=U2[e+4>>2],l=U2[e>>2];;){if(o=P2(U2[r>>2]-l),c=P2(o*o),o=P2(U2[r+4>>2]-s),c=P2(c+P2(o*o)),o=P2(U2[r+8>>2]-u),k>=P2(c+P2(o*o)))break A;if(r=r+16|0,(0|(b=b+1|0))==(0|a))break;}if(r=X2[A+32>>2],X2[r+12>>2]=X2[r+12>>2]+1,X2[A+92>>2]==(0|a)&&!((0|(b=a?a<<1:1))<=(0|a))){if(b&&(X2[6258]=X2[6258]+1,(r=L2(19+(b<<4)|0))&&(X2[(f=r+19&-16)-4>>2]=r)),1<=(0|a))for(r=0;;)if(i=X2[A+96>>2]+r|0,n=X2[i+4>>2],X2[(t=r+f|0)>>2]=X2[i>>2],X2[t+4>>2]=n,n=X2[(i=i+8|0)+4>>2],X2[(t=t+8|0)>>2]=X2[i>>2],X2[t+4>>2]=n,r=r+16|0,!(a=a-1|0))break;(r=X2[A+96>>2])&&J2[A+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+96>>2]=f,X2[A+92>>2]=b,S2[A+100|0]=1,a=X2[A+88>>2];}return r=X2[e+4>>2],f=X2[(n=A+96|0)>>2]+(a<<4)|0,X2[f>>2]=X2[e>>2],X2[f+4>>2]=r,e=X2[(r=e+8|0)+4>>2],X2[(f=f+8|0)>>2]=X2[r>>2],X2[f+4>>2]=e,X2[X2[A+32>>2]+16>>2]=X2[n>>2],A=X2[(e=A)+88>>2],X2[e+88>>2]=A+1,A;}if(!((0|(i=X2[A+108>>2]))<1)&&r)for(r=X2[A+116>>2],k=U2[A+168>>2],u=U2[e+8>>2],s=U2[e+4>>2],l=U2[e>>2];;){if(o=P2(U2[r>>2]-l),c=P2(o*o),o=P2(U2[r+4>>2]-s),c=P2(c+P2(o*o)),o=P2(U2[r+8>>2]-u),k>=P2(c+P2(o*o)))break A;if(r=r+12|0,b=b+1|0,!((0|(a=a+3|0))<(0|i)))break;}if((0|i)==(0|(f=X2[A+112>>2])))if((0|(f=i?i<<1:1))<=(0|i))f=i;else {f&&(X2[6258]=X2[6258]+1,(r=L2(19+(f<<2)|0))&&(X2[(n=r+19&-16)-4>>2]=r)),t=X2[A+116>>2];e:{if(1<=(0|i)){for(r=n,b=t,a=i;;)if(U2[r>>2]=U2[b>>2],r=r+4|0,b=b+4|0,!(a=a-1|0))break;}else if(!t)break e;J2[A+120|0]&&(X2[6259]=X2[6259]+1,q2(X2[t-4>>2]),i=X2[A+108>>2]);}X2[A+116>>2]=n,X2[A+112>>2]=f,S2[A+120|0]=1;}if(X2[A+108>>2]=r=i+1|0,t=X2[A+116>>2],U2[t+(i<<2)>>2]=U2[e>>2],(0|r)!=(0|f))i=f,n=t,f=r;else if((0|(i=f?f<<1:1))<=(0|f))i=f,n=t;else {n=0,i&&(X2[6258]=X2[6258]+1,(r=L2(19+(i<<2)|0))&&(X2[(n=r+19&-16)-4>>2]=r,t=X2[A+116>>2]));e:{if(1<=(0|f)){for(r=n,b=t,a=f;;)if(U2[r>>2]=U2[b>>2],r=r+4|0,b=b+4|0,!(a=a-1|0))break;}else if(!t)break e;J2[A+120|0]&&(X2[6259]=X2[6259]+1,q2(X2[t-4>>2]),f=X2[A+108>>2]);}X2[A+116>>2]=n,X2[A+112>>2]=i,S2[A+120|0]=1;}if(X2[A+108>>2]=r=f+1|0,U2[(f<<2)+n>>2]=U2[e+4>>2],(0|r)!=(0|i))f=n,i=r;else if((0|(t=i?i<<1:1))<=(0|i))f=n;else {f=0,t&&(X2[6258]=X2[6258]+1,(r=L2(19+(t<<2)|0))&&(X2[(f=r+19&-16)-4>>2]=r,n=X2[A+116>>2]));e:{if(1<=(0|i)){for(r=f,b=n,a=i;;)if(U2[r>>2]=U2[b>>2],r=r+4|0,b=b+4|0,!(a=a-1|0))break;}else if(!n)break e;J2[A+120|0]&&(X2[6259]=X2[6259]+1,q2(X2[n-4>>2]),i=X2[A+108>>2]);}X2[A+116>>2]=f,X2[A+112>>2]=t,S2[A+120|0]=1;}X2[A+108>>2]=r=i+1|0,U2[(i<<2)+f>>2]=U2[e+8>>2],A=X2[A+32>>2],X2[A+16>>2]=f,X2[A+12>>2]=X2[A+12>>2]+1,b=((0|r)/3|0)-1|0;}return b;}function l1(A,e){var r,f,i,a;K2=a=K2-48|0,i=X2[(e|=0)+4>>2],f=X2[(A|=0)+56>>2],X2[(r=f)+4>>2]=X2[e>>2],X2[r+8>>2]=i,r=X2[(e=e+8|0)+4>>2],X2[(f=f+12|0)>>2]=X2[e>>2],X2[4+f>>2]=r,X2[44+a>>2]=0,X2[36+a>>2]=0,X2[40+a>>2]=0,X2[32+a>>2]=1065353216,N2[X2[X2[A>>2]+68>>2]](16+a|0,A,32+a|0),U2[A+40>>2]=U2[16+a>>2]+U2[A+20>>2],X2[32+a>>2]=-1082130432,N2[X2[X2[A>>2]+68>>2]](a,A,32+a|0),r=X2[4+(f=8+a|0)>>2],X2[(e=24+a|0)>>2]=X2[f>>2],X2[e+4>>2]=r,r=X2[4+a>>2],X2[16+a>>2]=X2[a>>2],X2[20+a>>2]=r,U2[A+24>>2]=U2[16+a>>2]-U2[A+20>>2],X2[(r=40+a|0)>>2]=0,X2[4+r>>2]=0,X2[32+a>>2]=0,X2[36+a>>2]=0,X2[36+a>>2]=1065353216,N2[X2[X2[A>>2]+68>>2]](16+a|0,A,32+a|0),U2[A+44>>2]=U2[20+a>>2]+U2[A+20>>2],X2[36+a>>2]=-1082130432,N2[X2[X2[A>>2]+68>>2]](a,A,32+a|0),i=X2[4+f>>2],X2[e>>2]=X2[f>>2],X2[e+4>>2]=i,i=X2[4+a>>2],X2[16+a>>2]=X2[a>>2],X2[20+a>>2]=i,U2[A+28>>2]=U2[20+a>>2]-U2[A+20>>2],X2[r>>2]=0,X2[4+r>>2]=0,X2[r>>2]=1065353216,X2[32+a>>2]=0,X2[36+a>>2]=0,N2[X2[X2[A>>2]+68>>2]](16+a|0,A,32+a|0),X2[r>>2]=-1082130432,U2[A+48>>2]=U2[e>>2]+U2[A+20>>2],N2[X2[X2[A>>2]+68>>2]](a,A,32+a|0),r=X2[4+f>>2],X2[e>>2]=X2[f>>2],X2[e+4>>2]=r,f=X2[4+a>>2],X2[16+a>>2]=X2[a>>2],X2[20+a>>2]=f,U2[A+32>>2]=U2[e>>2]-U2[A+20>>2],K2=48+a|0;}function B1(A){var e;return X2[(A|=0)>>2]=12576,(e=X2[A+160>>2])&&J2[A+164|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+160>>2]=0,S2[A+164|0]=1,X2[(e=A+152|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+136>>2])&&J2[A+140|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+136>>2]=0,S2[A+140|0]=1,X2[(e=A+128|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+116>>2])&&J2[A+120|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+116>>2]=0,S2[A+120|0]=1,X2[(e=A+108|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+96>>2])&&J2[A+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+96>>2]=0,S2[A+100|0]=1,X2[(e=A+88|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+76>>2])&&J2[A+80|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+76>>2]=0,S2[A+80|0]=1,X2[(e=A+68|0)>>2]=0,(X2[4+e>>2]=0)|A;}function v1(A,e,r,f){e|=0,r|=0,f|=0;var i=0,a=0,n=0,b=0,t=0,o=0,c=0,k=0;if(X2[(A|=0)+168>>2]=X2[A+152>>2],S2[e+80|0]=1,S2[e+60|0]=0,X2[e+52>>2]=287,X2[e>>2]=12576,X2[e+76>>2]=0,S2[e+100|0]=1,X2[e+68>>2]=0,X2[e+72>>2]=0,X2[e+96>>2]=0,S2[e+120|0]=1,X2[e+88>>2]=0,X2[e+92>>2]=0,X2[e+116>>2]=0,S2[e+140|0]=1,X2[e+108>>2]=0,X2[e+112>>2]=0,X2[e+136>>2]=0,X2[e+144>>2]=0,S2[e+164|0]=1,X2[e+128>>2]=0,X2[e+132>>2]=0,X2[e+152>>2]=0,X2[e+156>>2]=0,X2[e+4>>2]=-8388609,X2[e+8>>2]=-8388609,X2[e+12>>2]=-8388609,X2[e+16>>2]=0,X2[e+20>>2]=2139095039,X2[e+24>>2]=2139095039,X2[e+28>>2]=2139095039,X2[e+32>>2]=0,X2[e+168>>2]=0,X2[e+160>>2]=0,r=X2[A+56>>2],r=f?(X2[e+56>>2]=r<<8&16711680|r<<24|r>>>8&65280|r>>>24,S2[e+4|0]=J2[A+7|0],S2[e+5|0]=J2[A+6|0],S2[e+6|0]=J2[A+5|0],S2[e+7|0]=J2[A+4|0],S2[e+8|0]=J2[A+11|0],S2[e+9|0]=J2[A+10|0],S2[e+10|0]=J2[A+9|0],S2[e+11|0]=J2[A+8|0],S2[e+12|0]=J2[A+15|0],S2[e+13|0]=J2[A+14|0],S2[e+14|0]=J2[A+13|0],S2[e+15|0]=J2[A+12|0],S2[e+16|0]=J2[A+19|0],S2[e+17|0]=J2[A+18|0],S2[e+18|0]=J2[A+17|0],S2[e+19|0]=J2[A+16|0],S2[e+20|0]=J2[A+23|0],S2[e+21|0]=J2[A+22|0],S2[e+22|0]=J2[A+21|0],S2[e+23|0]=J2[A+20|0],S2[e+24|0]=J2[A+27|0],S2[e+25|0]=J2[A+26|0],S2[e+26|0]=J2[A+25|0],S2[e+27|0]=J2[A+24|0],S2[e+28|0]=J2[A+31|0],S2[e+29|0]=J2[A+30|0],S2[e+30|0]=J2[A+29|0],S2[e+31|0]=J2[A+28|0],S2[e+32|0]=J2[A+35|0],S2[e+33|0]=J2[A+34|0],S2[e+34|0]=J2[A+33|0],S2[e+35|0]=J2[A+32|0],S2[e+36|0]=J2[A+39|0],S2[e+37|0]=J2[A+38|0],S2[e+38|0]=J2[A+37|0],S2[e+39|0]=J2[A+36|0],S2[e+40|0]=J2[A+43|0],S2[e+41|0]=J2[A+42|0],S2[e+42|0]=J2[A+41|0],S2[e+43|0]=J2[A+40|0],S2[e+44|0]=J2[A+47|0],S2[e+45|0]=J2[A+46|0],S2[e+46|0]=J2[A+45|0],S2[e+47|0]=J2[A+44|0],S2[e+48|0]=J2[A+51|0],S2[e+49|0]=J2[A+50|0],S2[e+50|0]=J2[A+49|0],S2[e+51|0]=J2[A+48|0],r=X2[A+144>>2],X2[e+144>>2]=r<<24|r<<8&16711680|r>>>8&65280|r>>>24,(r=X2[A+168>>2])<<24|r<<8&16711680|r>>>8&65280|r>>>24):(X2[e+56>>2]=r,i=X2[(t=A+12|0)+4>>2],X2[(o=(r=e+4|0)+8|0)>>2]=X2[t>>2],X2[o+4>>2]=i,o=X2[A+8>>2],X2[r>>2]=X2[A+4>>2],X2[r+4>>2]=o,i=X2[(t=A+28|0)+4>>2],X2[(o=(r=e+20|0)+8|0)>>2]=X2[t>>2],X2[o+4>>2]=i,o=X2[A+24>>2],X2[r>>2]=X2[A+20>>2],X2[r+4>>2]=o,r=X2[A+40>>2],X2[e+36>>2]=X2[A+36>>2],X2[e+40>>2]=r,t=X2[(o=A+44|0)+4>>2],X2[(r=e+44|0)>>2]=X2[o>>2],X2[r+4>>2]=t,X2[e+144>>2]=X2[A+144>>2],X2[A+168>>2]),S2[e+60|0]=J2[A+60|0],X2[e+168>>2]=r,t=e+172|0,o=X2[A+56>>2],J2[A+60|0]){if((r=X2[e+136>>2])&&J2[e+140|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[e+136>>2]=t,S2[e+140|0]=0,f){if(!((0|o)<1))for(c=X2[A+136>>2],i=o;;)if(n=A2[(a=b+c|0)>>1],$[(r=e+b|0)+172>>1]=(n<<24|n<<8&16711680)>>>16,n=A2[a+2>>1],$[r+174>>1]=(n<<24|n<<8&16711680)>>>16,n=A2[a+4>>1],$[r+176>>1]=(n<<24|n<<8&16711680)>>>16,n=A2[a+6>>1],$[r+178>>1]=(n<<24|n<<8&16711680)>>>16,n=A2[a+8>>1],$[r+180>>1]=(n<<24|n<<8&16711680)>>>16,n=X2[a+12>>2],X2[r+184>>2]=n<<24|n<<8&16711680|n>>>8&65280|n>>>24,n=r+182|0,r=A2[a+10>>1],$[n>>1]=(r<<24|r<<8&16711680)>>>16,b=b+16|0,!(i=i-1|0))break;}else if(!((0|o)<1))for(n=X2[A+136>>2],r=o;;)if($[(i=e+b|0)+172>>1]=A2[(a=n+b|0)>>1],$[i+174>>1]=A2[a+2>>1],$[i+176>>1]=A2[a+4>>1],$[i+178>>1]=A2[a+6>>1],$[i+180>>1]=A2[a+8>>1],X2[i+184>>2]=X2[a+12>>2],$[i+182>>1]=A2[a+10>>1],b=b+16|0,!(r=r-1|0))break;n=e+128|0,b=o<<4;}else {(r=X2[e+96>>2])&&J2[e+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[e+96>>2]=t,S2[e+100|0]=0,X2[e+92>>2]=o,X2[e+88>>2]=o;A:{e:{if(!f){if(1<=(0|o))break e;r=t;break A;}if((0|o)<1){r=t;break A;}for(a=X2[A+96>>2],b=40,i=o,r=t;;)if(S2[(r=r+b|0)-40|0]=J2[(a=a+b|0)-37|0],S2[r-39|0]=J2[a-38|0],S2[r-38|0]=J2[a-39|0],S2[r-37|0]=J2[a-40|0],S2[r-36|0]=J2[a-33|0],S2[r-35|0]=J2[a-34|0],S2[r-34|0]=J2[a-35|0],S2[r-33|0]=J2[a-36|0],S2[r-32|0]=J2[a-29|0],S2[r-31|0]=J2[a-30|0],S2[r-30|0]=J2[a-31|0],S2[r-29|0]=J2[a-32|0],S2[r-28|0]=J2[a-25|0],S2[r-27|0]=J2[a-26|0],S2[r-26|0]=J2[a-27|0],S2[r-25|0]=J2[a-28|0],r=X2[e+96>>2]+b|0,a=X2[A+96>>2]+b|0,S2[r-24|0]=J2[a-21|0],S2[r-23|0]=J2[a-22|0],S2[r-22|0]=J2[a-23|0],S2[r-21|0]=J2[a-24|0],S2[r-20|0]=J2[a-17|0],S2[r-19|0]=J2[a-18|0],S2[r-18|0]=J2[a-19|0],S2[r-17|0]=J2[a-20|0],S2[r-16|0]=J2[a-13|0],S2[r-15|0]=J2[a-14|0],S2[r-14|0]=J2[a-15|0],S2[r-13|0]=J2[a-16|0],S2[r-12|0]=J2[a-9|0],S2[r-11|0]=J2[a-10|0],S2[r-10|0]=J2[a-11|0],S2[r-9|0]=J2[a-12|0],r=X2[e+96>>2],a=X2[A+96>>2],n=X2[(k=b+a|0)>>2],X2[(c=b+r|0)>>2]=n<<24|n<<8&16711680|n>>>8&65280|n>>>24,n=X2[k-8>>2],X2[c-8>>2]=n<<24|n<<8&16711680|n>>>8&65280|n>>>24,n=X2[k-4>>2],X2[c-4>>2]=n<<24|n<<8&16711680|n>>>8&65280|n>>>24,b=b- -64|0,!(i=i-1|0))break;break A;}for(i=X2[A+96>>2],n=40,a=o,r=t;;)if(b=X2[(i=(i+n|0)-40|0)+4>>2],X2[(r=(r+n|0)-40|0)>>2]=X2[i>>2],X2[r+4>>2]=b,b=X2[(i=i+8|0)+4>>2],X2[(r=r+8|0)>>2]=X2[i>>2],X2[r+4>>2]=b,i=(X2[A+96>>2]+n|0)-24|0,b=X2[i+4>>2],r=(X2[e+96>>2]+n|0)-24|0,X2[r>>2]=X2[i>>2],X2[r+4>>2]=b,b=X2[(i=i+8|0)+4>>2],X2[(r=r+8|0)>>2]=X2[i>>2],X2[r+4>>2]=b,r=X2[e+96>>2],i=X2[A+96>>2],X2[(b=n+r|0)>>2]=X2[(c=i+n|0)>>2],X2[b-4>>2]=X2[c-4>>2],X2[b-8>>2]=X2[c-8>>2],n=n- -64|0,!(a=a-1|0))break;}n=e+88|0,b=o<<6,J2[e+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2]));}if(X2[n>>2]=0,X2[n+4>>2]=0,S2[0|(r=n+5|0)]=0,S2[r+1|0]=0,S2[r+2|0]=0,S2[r+3|0]=0,S2[r+4|0]=0,S2[r+5|0]=0,S2[r+6|0]=0,r=b+t|(S2[r+7|0]=0),(o=X2[e+160>>2])&&J2[e+164|0]&&(X2[6259]=X2[6259]+1,q2(X2[o-4>>2])),o=e+152|0,S2[e+164|0]=0,X2[e+160>>2]=r,r=X2[A+168>>2],f){if(!((0|r)<1))for(a=e+b|0,b=X2[A+160>>2],A=0;;)if(i=A2[(t=A+b|0)>>1],$[(f=A+a|0)+172>>1]=(i<<24|i<<8&16711680)>>>16,i=A2[t+2>>1],$[f+174>>1]=(i<<24|i<<8&16711680)>>>16,i=A2[t+4>>1],$[f+176>>1]=(i<<24|i<<8&16711680)>>>16,i=A2[t+6>>1],$[f+178>>1]=(i<<24|i<<8&16711680)>>>16,i=A2[t+8>>1],$[f+180>>1]=(i<<24|i<<8&16711680)>>>16,i=X2[t+12>>2],X2[f+184>>2]=i<<24|i<<8&16711680|i>>>8&65280|i>>>24,i=X2[t+16>>2],X2[f+188>>2]=i<<24|i<<8&16711680|i>>>8&65280|i>>>24,i=f+182|0,f=A2[t+10>>1],$[i>>1]=(f<<24|f<<8&16711680)>>>16,A=A+32|0,!(r=r-1|0))break;}else if(!((0|r)<1))for(i=e+b|0,a=X2[A+160>>2],r=b=0;;)if($[(f=i+b|0)+172>>1]=A2[(t=a+b|0)>>1],$[f+174>>1]=A2[t+2>>1],$[f+176>>1]=A2[t+4>>1],$[f+178>>1]=A2[t+6>>1],$[f+180>>1]=A2[t+8>>1],c=X2[(n=t+12|0)+4>>2],n=X2[n>>2],X2[f+200>>2]=0,X2[(k=f+184|0)>>2]=n,X2[k+4>>2]=c,t=A2[t+10>>1],X2[(n=f+192|0)>>2]=0,X2[n+4>>2]=0,$[f+182>>1]=t,b=b+32|0,!((0|(r=r+1|0))<X2[A+168>>2]))break;return X2[(A=o)>>2]=0,X2[A+4>>2]=0,X2[e>>2]=0,S2[0|(A=A+5|0)]=0,S2[A+1|0]=0,S2[A+2|0]=0,S2[A+3|0]=0,S2[A+4|0]=0,S2[A+5|0]=0,S2[A+6|0]=0,S2[A+7|0]=0,1;}function d1(A,e,r,f,i,a,n,b){var t,o,c,k,u,s,l,B,v,d,Z,_,g,E,x,y,V,p,M,S,X,Q,w=0,G=0,C=(P2(0),P2(0)),h=P2(0),F=P2(0),Y=0,m=(P2(0),P2(0),0),N=P2(0),R=P2(0),D=P2(0),T=0,W=0,I=0;P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);K2=Q=K2-32|0;A:if(!((0|(I=X2[A+56>>2]))<1))for(t=U2[r+8>>2],R=F=P2(a-t),o=U2[r>>2],C=P2(f-o),c=U2[r+4>>2],h=P2(i-c),N=P2(P2(1)/P2(O2(P2(P2(P2(C*C)+P2(h*h))+P2(F*F))))),F=P2(F*N),C=P2((D=C)*N),h=P2((k=h)*N),k=P2(P2(R*F)+P2(P2(D*C)+P2(k*h))),N=U2[b+8>>2],l=P2((t<a?a:t)+N),R=U2[b+4>>2],B=P2((c<i?i:c)+R),D=U2[b>>2],v=P2((o<f?f:o)+D),t=a<t?a:t,a=U2[n+8>>2],d=P2(t+a),t=i<c?i:c,i=U2[n+4>>2],Z=P2(t+i),t=f<o?f:o,f=U2[n>>2],_=P2(t+f),G=X2[A+96>>2],g=((w=(t=F==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/F))<P2(0))<<4)+Q|8,E=((Y=(o=h==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/h))<P2(0))<<4)+Q|4,x=(!w<<4)+Q|8,y=(!Y<<4)+Q|4,V=((w=(c=C==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/C))<P2(0))<<4)+Q|0,p=(!w<<4)+Q|0,u=16+Q|0,T=1;;){Y=X2[(w=G+8|0)>>2],w=X2[w+4>>2],M=X2[G>>2],S=X2[G+4>>2],m=X2[G+20>>2],X2[u>>2]=X2[G+16>>2],X2[4+u>>2]=m,X=X2[(m=G+24|0)+4>>2],X2[(s=8+u|0)>>2]=X2[m>>2],X2[4+s>>2]=X,X2[Q>>2]=M,X2[4+Q>>2]=S,X2[8+Q>>2]=Y,X2[12+Q>>2]=w,U2[Q>>2]=U2[Q>>2]-D,U2[4+Q>>2]=U2[4+Q>>2]-R,U2[16+Q>>2]=U2[16+Q>>2]-f,U2[20+Q>>2]=U2[20+Q>>2]-i,U2[8+Q>>2]=U2[8+Q>>2]-N,U2[24+Q>>2]=U2[24+Q>>2]-a,w=0,U2[G+16>>2]<_||(w=0,U2[G>>2]>v||(w=1)),Y=0,U2[m>>2]<d||U2[G+8>>2]>l||(Y=w);e:{r:{f:{i:{if(!(U2[G+20>>2]<Z||1^Y|U2[G+4>>2]>B||(C=U2[r+4>>2],f=P2(o*P2(U2[E>>2]-C)),a=U2[r>>2],(i=P2(c*P2(U2[p>>2]-a)))<f||(a=P2(c*P2(U2[V>>2]-a)),(C=P2(o*P2(U2[y>>2]-C)))<a||(F=U2[r+8>>2],(i=C<i?C:i)<(h=P2(t*P2(U2[g>>2]-F)))||(f=a<f?f:a,(a=P2(t*P2(U2[x>>2]-F)))<f)))))){if(m=-1==(0|(w=X2[G+32>>2])),!(Y=(f<h?h:f)<k&(a<i?a:i)>P2(0)))break i;if(-1!=(0|w))break i;N2[X2[X2[e>>2]+8>>2]](e,X2[G+36>>2],X2[G+40>>2]),I=X2[A+56>>2];break f;}m=-1==(0|(w=X2[G+32>>2])),Y=0;}if(!m&&!Y)break r;}W=W+1|0,G=G- -64|0;break e;}W=w+W|0,G=(w<<6)+G|0;}if((0|I)<=(0|W))break A;T=T+1|0,a=U2[n+8>>2],i=U2[n+4>>2],f=U2[n>>2],N=U2[b+8>>2],R=U2[b+4>>2],D=U2[b>>2];}X2[6352]<(0|T)&&(X2[6352]=T),K2=32+Q|0;}function Z1(A,e,r,f,i,a,n,b,t){var o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,x,y,V,p,M,S,X,J,U,h,F=P2(0),Y=0,m=0,N=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),0),R=0,D=(P2(0),0),T=0,W=0,I=0;if(K2=h=K2-32|0,d=U2[r+4>>2],Z=U2[r>>2],k=U2[A+28>>2],l=U2[A+12>>2],_=U2[r+8>>2],F=P2((a<_?a:_)+U2[n+8>>2]),g=U2[A+44>>2],N=(F=P2(P2((k<(F=F<l?l:F)?k:F)-l)*g))<P2(4294967296)&F>=P2(0)?~~F>>>0:0,u=U2[A+24>>2],B=U2[A+8>>2],F=P2((i<d?i:d)+U2[n+4>>2]),o=U2[A+40>>2],R=(F=P2(P2((u<(F=F<B?B:F)?u:F)-B)*o))<P2(4294967296)&F>=P2(0)?~~F>>>0:0,s=U2[A+20>>2],v=U2[A+4>>2],F=P2((f<Z?f:Z)+U2[n>>2]),c=U2[A+36>>2],D=(F=P2(P2((s<(F=F<v?v:F)?s:F)-v)*c))<P2(4294967296)&F>=P2(0)?~~F>>>0:0,F=P2((_<a?a:_)+U2[b+8>>2]),T=(F=P2(P2(P2((k<(F=F<l?l:F)?k:F)-l)*g)+P2(1)))<P2(4294967296)&F>=P2(0)?~~F>>>0:0,F=P2((d<i?i:d)+U2[b+4>>2]),m=(F=P2(P2(P2((u<(F=F<B?B:F)?u:F)-B)*o)+P2(1)))<P2(4294967296)&F>=P2(0)?~~F>>>0:0,F=P2((Z<f?f:Z)+U2[b>>2]),Y=(F=P2(P2(P2((s<(F=F<v?v:F)?s:F)-v)*c)+P2(1)))<P2(4294967296)&F>=P2(0)?~~F>>>0:0,1<=(0|t))for(a=F=P2(a-_),o=P2(f-Z),c=P2(i-d),f=P2(P2(1)/P2(O2(P2(P2(P2(o*o)+P2(c*c))+P2(F*F))))),F=P2(F*f),i=P2(o*f),f=P2(c*f),g=P2(P2(a*F)+P2(P2(o*i)+P2(c*f))),w=65534&N,G=65534&R,C=65534&D,x=1|T,y=1|m,V=1|Y,p=((m=(k=F==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/F))<P2(0))<<4)+h|8,M=((Y=(u=f==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/f))<P2(0))<<4)+h|4,S=(!m<<4)+h|8,X=(!Y<<4)+h|4,Y=X2[A+136>>2],J=((m=(s=i==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/i))<P2(0))<<4)+h|0,U=(!m<<4)+h|0;;){E=X2[Y+12>>2],m=0;A:{e:{r:{f:if(!(A2[Y+6>>1]<C>>>0||V>>>0<(Q=A2[Y>>1])>>>0||A2[Y+10>>1]<w>>>0||x>>>0<(N=A2[Y+4>>1])>>>0||A2[Y+8>>1]<G>>>0||y>>>0<(R=A2[Y+2>>1])>>>0)){if(X2[12+h>>2]=0,D=A2[Y+10>>1],T=A2[Y+8>>1],m=A2[Y+6>>1],X2[28+h>>2]=0,o=U2[A+36>>2],c=U2[A+4>>2],U2[h>>2]=P2(P2(P2(Q>>>0)/o)+c)-U2[b>>2],F=U2[A+40>>2],a=U2[A+8>>2],U2[4+h>>2]=P2(P2(P2(R>>>0)/F)+a)-U2[b+4>>2],i=U2[A+44>>2],f=U2[A+12>>2],U2[8+h>>2]=P2(P2(P2(N>>>0)/i)+f)-U2[b+8>>2],U2[16+h>>2]=P2(c+P2(P2(m>>>0)/o))-U2[n>>2],U2[20+h>>2]=P2(a+P2(P2(T>>>0)/F))-U2[n+4>>2],U2[24+h>>2]=P2(f+P2(P2(D>>>0)/i))-U2[n+8>>2],i=U2[r+4>>2],o=P2(u*P2(U2[M>>2]-i)),f=U2[r>>2],!((a=P2(s*P2(U2[U>>2]-f)))<o||(c=P2(s*P2(U2[J>>2]-f)),(i=P2(u*P2(U2[X>>2]-i)))<c||(f=U2[r+8>>2],(a=i<a?i:a)<(F=P2(k*P2(U2[p>>2]-f)))||(i=c<o?o:c,(f=P2(k*P2(U2[S>>2]-f)))<i))))){if(m=(i<F?F:i)<g&(f<a?f:a)>P2(0),(0|E)<0)break f;if(!m)break f;m=X2[Y+12>>2],N2[X2[X2[e>>2]+8>>2]](e,m>>21,2097151&m);break r;}m=0;}if(!(-1<(0|E))&&!m)break e;}W=W+1|0,Y=Y+16|0;break A;}W=W-(m=X2[Y+12>>2])|0,Y=Y-(m<<4)|0;}if(I=I+1|0,!((0|W)<(0|t)))break;}X2[6352]<(0|I)&&(X2[6352]=I),K2=32+h|0;}function _1(A){return 84;}function g1(A,e,r,f,i){var a,n,b,t,o,c,k,u,s=0,l=P2(0),B=(P2(0),0),v=0,d=0,Z=(P2(0),P2(0)),_=P2(0),g=0,E=0,Q=P2(0),w=P2(0),G=P2(0),C=P2(0);P2(0),P2(0),P2(0),P2(0);if(K2=u=K2-112|0,S2[A+60|0]=r){if(l=U2[f>>2],Z=U2[f+4>>2],_=U2[f+8>>2],X2[A+16>>2]=0,Q=P2(_+P2(-1)),U2[A+12>>2]=Q,Z=P2(Z+P2(-1)),U2[A+8>>2]=Z,l=P2(l+P2(-1)),U2[A+4>>2]=l,S2[A+60|0]=1,_=U2[i>>2],a=U2[i+4>>2],w=U2[i+8>>2],X2[A+32>>2]=0,o=P2(w+P2(1)),U2[A+28>>2]=o,w=P2(a+P2(1)),U2[A+24>>2]=w,_=P2(_+P2(1)),U2[A+20>>2]=_,G=P2(o-Q),C=P2(P2(65533)/G),U2[A+44>>2]=C,a=P2(P2(65533)/P2(w-Z)),U2[A+40>>2]=a,t=P2(P2(65533)/P2(_-l)),U2[A+36>>2]=t,r=(n=P2(P2(Q-Q)*C))<P2(4294967296)&n>=P2(0)?~~n>>>0:0,k=P2((65534&r)>>>0),r=(n=P2(P2((c=Z)-Z)*a))<P2(4294967296)&n>=P2(0)?~~n>>>0:0,c=P2(c+P2(P2((65534&r)>>>0)/a)),r=(n=P2(P2((a=l)-l)*t))<P2(4294967296)&n>=P2(0)?~~n>>>0:0,(a=P2(P2(a+P2(P2((65534&r)>>>0)/t))+P2(-1)))<l&&(l=U2[A+4>>2]=a),(a=P2(c+P2(-1)))<Z&&(Z=U2[A+8>>2]=a),(a=P2(P2(Q+P2(k/C))+P2(-1)))<Q&&(U2[A+12>>2]=a,G=P2(o-a),C=P2(P2(65533)/G),Q=a),a=P2(w-Z),t=P2(P2(65533)/a),r=(a=P2(P2(t*a)+P2(1)))<P2(4294967296)&a>=P2(0)?~~a>>>0:0,t=P2(P2((1|r)>>>0)/t),l=P2(_-(a=l)),n=P2(P2(65533)/l),r=(l=P2(P2(n*l)+P2(1)))<P2(4294967296)&l>=P2(0)?~~l>>>0:0,f=!(_<(l=P2(P2(a+P2(P2((1|r)>>>0)/n))+P2(1)))),r=(G=P2(P2(C*G)+P2(1)))<P2(4294967296)&G>=P2(0)?~~G>>>0:0,f||(_=U2[A+20>>2]=l),w<(l=P2(P2(Z+t)+P2(1)))&&(w=U2[A+24>>2]=l),o<(l=P2(P2(Q+P2(P2((1|r)>>>0)/C))+P2(1)))&&(U2[A+28>>2]=l,C=P2(P2(65533)/P2(l-Q))),X2[A+48>>2]=0,U2[A+44>>2]=C,U2[A+40>>2]=P2(65533)/P2(w-Z),U2[A+36>>2]=P2(65533)/P2(_-a),X2[96+u>>2]=A,X2[92+u>>2]=A+104,X2[88+u>>2]=12800,N2[X2[X2[e>>2]+8>>2]](e,88+u|0,A+4|0,A+20|0),g=X2[A+108>>2],X2[(e=16+u|0)>>2]=0,X2[e+4>>2]=0,X2[8+u>>2]=0,((X2[12+u>>2]=0)|(f=X2[A+128>>2]))<(0|(i=g<<1))){if((0|i)>X2[A+132>>2]){if(g&&(X2[6258]=X2[6258]+1,(e=L2(g<<5|19))&&(X2[(v=e+19&-16)-4>>2]=e)),1<=(0|f))for(r=0,e=f;;)if(s=X2[A+136>>2]+r|0,d=X2[s+4>>2],X2[(B=E=r+v|0)>>2]=X2[s>>2],X2[B+4>>2]=d,B=X2[(s=s+8|0)+4>>2],X2[(E=E+8|0)>>2]=X2[s>>2],X2[E+4>>2]=B,r=r+16|0,!(e=e-1|0))break;(e=X2[A+136>>2])&&J2[A+140|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+136>>2]=v,X2[A+132>>2]=i,S2[A+140|0]=1;}for(r=f<<4,e=f-(g<<1)|0;;)if(v=X2[12+u>>2],f=X2[A+136>>2]+r|0,X2[f>>2]=X2[8+u>>2],X2[f+4>>2]=v,v=X2[(s=16+u|0)+4>>2],X2[(f=f+8|0)>>2]=X2[s>>2],X2[f+4>>2]=v,r=r+16|0,!((f=e)>>>0<=(e=e+1|0)>>>0))break;}X2[A+128>>2]=i;}else {if(X2[104+u>>2]=12820,X2[108+u>>2]=A- -64,X2[96+u>>2]=-581039253,X2[100+u>>2]=0,X2[88+u>>2]=-581039253,X2[92+u>>2]=-581039253,X2[80+u>>2]=1566444395,X2[84+u>>2]=0,X2[72+u>>2]=1566444395,X2[76+u>>2]=1566444395,N2[X2[X2[e>>2]+8>>2]](e,104+u|0,88+u|0,72+u|0),g=X2[A+68>>2],X2[(e=u+64|0)>>2]=0,X2[e+4>>2]=0,X2[(e=56+u|0)>>2]=0,X2[e+4>>2]=0,X2[(e=48+u|0)>>2]=0,X2[e+4>>2]=0,X2[(e=40+u|0)>>2]=0,X2[e+4>>2]=0,X2[(e=32+u|0)>>2]=0,X2[e+4>>2]=0,X2[(e=24+u|0)>>2]=0,X2[e+4>>2]=0,X2[(e=16+u|0)>>2]=0,X2[e+4>>2]=0,X2[8+u>>2]=0,((X2[12+u>>2]=0)|(r=X2[A+88>>2]))<(0|(E=g<<1))){if((0|E)>X2[A+92>>2]){if(g&&(X2[6258]=X2[6258]+1,(e=L2(g<<7|19))&&(X2[(v=e+19&-16)-4>>2]=e)),1<=(0|r))for(f=0,i=r;;)if(s=X2[A+96>>2]+f|0,b=X2[s+4>>2],X2[(e=f+v|0)>>2]=X2[s>>2],X2[e+4>>2]=b,b=X2[(B=s+56|0)+4>>2],X2[(d=e+56|0)>>2]=X2[B>>2],X2[d+4>>2]=b,b=X2[(d=s+48|0)+4>>2],X2[(B=e+48|0)>>2]=X2[d>>2],X2[B+4>>2]=b,b=X2[(d=s+40|0)+4>>2],X2[(B=e+40|0)>>2]=X2[d>>2],X2[B+4>>2]=b,b=X2[(d=s+32|0)+4>>2],X2[(B=e+32|0)>>2]=X2[d>>2],X2[B+4>>2]=b,b=X2[(d=s+24|0)+4>>2],X2[(B=e+24|0)>>2]=X2[d>>2],X2[B+4>>2]=b,b=X2[(d=s+16|0)+4>>2],X2[(B=e+16|0)>>2]=X2[d>>2],X2[B+4>>2]=b,B=X2[(s=s+8|0)+4>>2],X2[(e=e+8|0)>>2]=X2[s>>2],X2[e+4>>2]=B,f=f- -64|0,!(i=i-1|0))break;(e=X2[A+96>>2])&&J2[A+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+96>>2]=v,X2[A+92>>2]=E,S2[A+100|0]=1;}for(e=r<<6,f=r-(g<<1)|0;;)if(s=X2[12+u>>2],r=X2[A+96>>2]+e|0,X2[r>>2]=X2[8+u>>2],X2[r+4>>2]=s,v=X2[(s=u+64|0)+4>>2],X2[(i=r+56|0)>>2]=X2[s>>2],X2[i+4>>2]=v,v=X2[(s=56+u|0)+4>>2],X2[(i=r+48|0)>>2]=X2[s>>2],X2[i+4>>2]=v,v=X2[(s=48+u|0)+4>>2],X2[(i=r+40|0)>>2]=X2[s>>2],X2[i+4>>2]=v,v=X2[(s=40+u|0)+4>>2],X2[(i=r+32|0)>>2]=X2[s>>2],X2[i+4>>2]=v,v=X2[(s=32+u|0)+4>>2],X2[(i=r+24|0)>>2]=X2[s>>2],X2[i+4>>2]=v,v=X2[(s=24+u|0)+4>>2],X2[(i=r+16|0)>>2]=X2[s>>2],X2[i+4>>2]=v,s=X2[(i=16+u|0)+4>>2],X2[(r=r+8|0)>>2]=X2[i>>2],X2[r+4>>2]=s,e=e- -64|0,!((r=f)>>>0<=(f=r+1|0)>>>0))break;}X2[A+88>>2]=E;}!function x(A,e,r){var f,i,y,V,p,M,S,X,J,U,H,a,n=0,b=0,t=P2(0),o=0,c=0,k=0,u=0,s=0,l=P2(0),B=P2(0),v=0,d=P2(0),Z=0,_=0,g=P2(0),E=P2(0),Q=P2(0),w=P2(0),G=P2(0),C=0,h=0,F=P2(0),Y=0,m=0,N=0,R=0,D=0,T=P2(0),W=P2(0),I=P2(0),P=P2(0);if(K2=a=K2-112|0,R=X2[A+56>>2],1==(0|(k=r-e|0)))J2[A+60|0]?(e=X2[A+116>>2]+(e<<4)|0,n=X2[e+4>>2],r=X2[A+136>>2]+(R<<4)|0,X2[r>>2]=X2[e>>2],X2[r+4>>2]=n):(e=X2[A+76>>2]+(e<<6)|0,n=X2[(b=e)+4>>2],r=X2[A+96>>2]+(R<<6)|0,X2[r>>2]=X2[b>>2],X2[r+4>>2]=n,n=X2[4+(k=b+56|0)>>2],X2[(o=r+56|0)>>2]=X2[k>>2],X2[o+4>>2]=n,n=X2[4+(k=b+48|0)>>2],X2[(o=r+48|0)>>2]=X2[k>>2],X2[o+4>>2]=n,n=X2[4+(k=b+40|0)>>2],X2[(o=r+40|0)>>2]=X2[k>>2],X2[o+4>>2]=n,n=X2[4+(k=b+32|0)>>2],X2[(o=r+32|0)>>2]=X2[k>>2],X2[o+4>>2]=n,n=X2[4+(k=b+24|0)>>2],X2[(o=r+24|0)>>2]=X2[k>>2],X2[o+4>>2]=n,n=X2[4+(k=b+16|0)>>2],X2[(o=r+16|0)>>2]=X2[k>>2],X2[o+4>>2]=n),n=r+8|0,e=X2[4+(r=e+8|0)>>2],X2[n>>2]=X2[r>>2],X2[n+4>>2]=e,X2[A+56>>2]=X2[A+56>>2]+1;else {if(_=(0|e)<(0|r)){if(o=J2[A+60|0])for(n=X2[A+116>>2]+(e<<4)|0,u=r-e|0,g=U2[A+12>>2],E=U2[A+8>>2],d=U2[A+44>>2],l=U2[A+40>>2],B=U2[A+4>>2],t=U2[A+36>>2];w=P2(w+P2(P2(P2(P2(P2(A2[n+10>>1])/d)+g)+P2(P2(P2(A2[n+4>>1])/d)+g))*P2(.5))),G=P2(G+P2(P2(P2(P2(P2(A2[n+8>>1])/l)+E)+P2(P2(P2(A2[n+2>>1])/l)+E))*P2(.5))),Q=P2(Q+P2(P2(P2(P2(P2(A2[n+6>>1])/t)+B)+P2(P2(P2(A2[n>>1])/t)+B))*P2(.5))),n=n+16|0,u=u-1|0;);else for(n=X2[A+76>>2]+(e<<6)|0,u=r-e|0;w=P2(w+P2(P2(U2[n+24>>2]+U2[n+8>>2])*P2(.5))),G=P2(G+P2(P2(U2[n+20>>2]+U2[n+4>>2])*P2(.5))),Q=P2(Q+P2(P2(U2[n+16>>2]+U2[n>>2])*P2(.5))),n=n- -64|0,u=u-1|0;);if(I=P2(0|k),t=P2(P2(1)/I),w=P2(t*w),G=P2(t*G),Q=P2(t*Q),o)for(n=X2[A+116>>2]+(e<<4)|0,u=r-e|0,F=U2[A+12>>2],g=U2[A+8>>2],E=U2[A+44>>2],d=U2[A+40>>2],l=U2[A+4>>2],B=U2[A+36>>2];t=P2(P2(P2(P2(P2(P2(A2[n+10>>1])/E)+F)+P2(P2(P2(A2[n+4>>1])/E)+F))*P2(.5))-w),T=P2(T+P2(t*t)),t=P2(P2(P2(P2(P2(P2(A2[n+8>>1])/d)+g)+P2(P2(P2(A2[n+2>>1])/d)+g))*P2(.5))-G),P=P2(P+P2(t*t)),t=P2(P2(P2(P2(P2(P2(A2[n+6>>1])/B)+l)+P2(P2(P2(A2[n>>1])/B)+l))*P2(.5))-Q),W=P2(W+P2(t*t)),n=n+16|0,u=u-1|0;);else for(n=X2[A+76>>2]+(e<<6)|0,u=r-e|0;t=P2(P2(P2(U2[n+24>>2]+U2[n+8>>2])*P2(.5))-w),T=P2(T+P2(t*t)),t=P2(P2(P2(U2[n+20>>2]+U2[n+4>>2])*P2(.5))-G),P=P2(P+P2(t*t)),t=P2(P2(P2(U2[n+16>>2]+U2[n>>2])*P2(.5))-Q),W=P2(W+P2(t*t)),n=n- -64|0,u=u-1|0;);}else I=P2(0|k);if(X2[28+a>>2]=0,w=P2(0),G=P2(0),Q=P2(0),!(b=(0|r)<=(0|e)))if(J2[A+60|0])for(n=X2[A+116>>2]+(e<<4)|0,u=r-e|0,g=U2[A+12>>2],E=U2[A+8>>2],d=U2[A+44>>2],l=U2[A+40>>2],B=U2[A+4>>2],t=U2[A+36>>2];w=P2(P2(P2(P2(P2(P2(A2[n+10>>1])/d)+g)+P2(P2(P2(A2[n+4>>1])/d)+g))*P2(.5))+w),G=P2(P2(P2(P2(P2(P2(A2[n+8>>1])/l)+E)+P2(P2(P2(A2[n+2>>1])/l)+E))*P2(.5))+G),Q=P2(P2(P2(P2(P2(P2(A2[n+6>>1])/t)+B)+P2(P2(P2(A2[n>>1])/t)+B))*P2(.5))+Q),n=n+16|0,u=u-1|0;);else for(n=X2[A+76>>2]+(e<<6)|0,u=r-e|0;w=P2(P2(P2(U2[n+24>>2]+U2[n+8>>2])*P2(.5))+w),G=P2(P2(P2(U2[n+20>>2]+U2[n+4>>2])*P2(.5))+G),Q=P2(P2(P2(U2[n+16>>2]+U2[n>>2])*P2(.5))+Q),n=n- -64|0,u=u-1|0;);if(t=P2(P2(1)/P2(0|k)),U2[24+a>>2]=t*w,U2[20+a>>2]=t*G,U2[16+a>>2]=t*Q,u=R,o=e,!b){for(l=P2(P2(1)/P2(I+P2(-1))),b=(B=P2(l*P))<(t=P2(l*T))?2:1,I=t,t=P2(l*W),F=U2[(16+a|0)+((n=t<B?b:(t<I)<<1)<<2)>>2],Y=r-e|0,u=e<<4,D=e<<6,N=(n<<2)+a|0;t=(n=J2[A+60|0])?(b=X2[A+116>>2]+u|0,g=U2[A+36>>2],E=U2[A+4>>2],w=P2(P2(P2(A2[b>>1])/g)+E),d=U2[A+44>>2],l=U2[A+12>>2],G=P2(P2(P2(A2[b+4>>1])/d)+l),B=U2[A+40>>2],t=U2[A+8>>2],Q=P2(P2(P2(A2[b+2>>1])/B)+t),W=P2(P2(P2(A2[b+10>>1])/d)+l),T=P2(P2(P2(A2[b+6>>1])/g)+E),P2(P2(P2(A2[b+8>>1])/B)+t)):(b=X2[A+76>>2]+D|0,w=U2[b>>2],G=U2[b+8>>2],Q=U2[b+4>>2],W=U2[b+24>>2],T=U2[b+16>>2],U2[b+20>>2]),X2[12+a>>2]=0,U2[8+a>>2]=P2(W+G)*P2(.5),U2[4+a>>2]=P2(t+Q)*P2(.5),U2[a>>2]=P2(T+w)*P2(.5),F<U2[N>>2]&&(n?(n=X2[A+116>>2],m=X2[(c=n+u|0)>>2],C=X2[c+4>>2],n=X2[4+(b=h=(Z=o<<4)+n|0)>>2],X2[c>>2]=X2[b>>2],X2[c+4>>2]=n,s=X2[(v=c+8|0)>>2],c=X2[v+4>>2],n=X2[4+(b=b+8|0)>>2],X2[v>>2]=X2[b>>2],X2[v+4>>2]=n,n=Z+X2[A+116>>2]|0,X2[n>>2]=m,X2[n+4>>2]=C,X2[(n=n+8|0)>>2]=s,X2[n+4>>2]=c):(n=X2[A+76>>2],Z=X2[(f=n+D|0)>>2],h=X2[4+f>>2],n=X2[4+(b=i=(s=o<<6)+n|0)>>2],X2[f>>2]=X2[b>>2],X2[4+f>>2]=n,n=X2[4+(b=y=8+f|0)>>2],X2[(c=V=40+a|0)>>2]=X2[b>>2],X2[c+4>>2]=n,n=X2[4+(b=p=16+f|0)>>2],X2[(c=M=48+a|0)>>2]=X2[b>>2],X2[c+4>>2]=n,n=X2[4+(b=S=24+f|0)>>2],X2[(c=X=56+a|0)>>2]=X2[b>>2],X2[c+4>>2]=n,n=X2[4+(b=J=32+f|0)>>2],X2[(c=U=64+a|0)>>2]=X2[b>>2],X2[c+4>>2]=n,n=X2[4+(b=v=40+f|0)>>2],X2[(c=H=72+a|0)>>2]=X2[b>>2],X2[c+4>>2]=n,n=X2[4+(b=C=48+f|0)>>2],X2[(c=m=80+a|0)>>2]=X2[b>>2],X2[c+4>>2]=n,n=X2[4+(f=56+f|0)>>2],X2[(b=c=88+a|0)>>2]=X2[f>>2],X2[b+4>>2]=n,n=X2[4+(b=8+i|0)>>2],X2[y>>2]=X2[b>>2],X2[4+y>>2]=n,n=X2[4+(b=16+i|0)>>2],X2[p>>2]=X2[b>>2],X2[4+p>>2]=n,n=X2[4+(b=24+i|0)>>2],X2[S>>2]=X2[b>>2],X2[4+S>>2]=n,n=X2[4+(b=32+i|0)>>2],X2[J>>2]=X2[b>>2],X2[4+J>>2]=n,n=X2[4+(b=40+i|0)>>2],X2[v>>2]=X2[b>>2],X2[v+4>>2]=n,n=X2[4+(b=48+i|0)>>2],X2[C>>2]=X2[b>>2],X2[C+4>>2]=n,n=X2[4+(b=56+i|0)>>2],X2[f>>2]=X2[b>>2],X2[4+f>>2]=n,X2[32+a>>2]=Z,X2[36+a>>2]=h,n=X2[36+a>>2],s=s+X2[A+76>>2]|0,X2[s>>2]=X2[32+a>>2],X2[s+4>>2]=n,n=X2[c+4>>2],X2[(b=s+56|0)>>2]=X2[c>>2],X2[b+4>>2]=n,n=X2[m+4>>2],X2[(b=s+48|0)>>2]=X2[m>>2],X2[b+4>>2]=n,n=X2[4+H>>2],X2[(b=s+40|0)>>2]=X2[H>>2],X2[b+4>>2]=n,n=X2[4+U>>2],X2[(b=s+32|0)>>2]=X2[U>>2],X2[b+4>>2]=n,n=X2[4+X>>2],X2[(b=s+24|0)>>2]=X2[X>>2],X2[b+4>>2]=n,n=X2[4+M>>2],X2[(b=s+16|0)>>2]=X2[M>>2],X2[b+4>>2]=n,n=X2[4+V>>2],X2[(b=s+8|0)>>2]=X2[V>>2],X2[b+4>>2]=n),o=o+1|0),u=u+16|0,D=D- -64|0,Y=Y-1|0;);u=X2[A+56>>2];}if(C=(k>>1)+e|0,s=((-1^(n=(0|k)/3|0))+r|0)<=(0|o),h=e+n|0,J2[A+60|0]?(b=n=X2[A+136>>2]+(u<<4)|0,c=(t=P2(P2(U2[A+20>>2]-U2[A+4>>2])*U2[A+36>>2]))<P2(4294967296)&t>=P2(0)?~~t>>>0:0,$[b>>1]=65534&c,l=U2[A+40>>2],B=U2[A+8>>2],t=U2[A+24>>2],b=n,c=(d=P2(P2(U2[A+28>>2]-U2[A+12>>2])*U2[A+44>>2]))<P2(4294967296)&d>=P2(0)?~~d>>>0:0,$[b+4>>1]=65534&c,b=(t=P2(l*P2(t-B)))<P2(4294967296)&t>=P2(0)?~~t>>>0:0,$[n+2>>1]=65534&b):(n=X2[4+(Z=A+20|0)>>2],c=X2[A+96>>2]+(u<<6)|0,X2[(b=c)>>2]=X2[Z>>2],X2[b+4>>2]=n,n=X2[4+(b=Z+8|0)>>2],X2[(c=c+8|0)>>2]=X2[b>>2],X2[c+4>>2]=n),s=s?C:o,c=(0|o)<=(0|h),n=X2[A+56>>2],J2[A+60|0]?(n=b=X2[A+136>>2]+(n<<4)|0,t=U2[A+4>>2],o=(t=P2(P2(P2(t-t)*U2[A+36>>2])+P2(1)))<P2(4294967296)&t>=P2(0)?~~t>>>0:0,$[n+6>>1]=1|o,B=U2[A+40>>2],l=U2[A+8>>2],n=b+10|0,t=U2[A+12>>2],o=(t=P2(P2(P2(t-t)*U2[A+44>>2])+P2(1)))<P2(4294967296)&t>=P2(0)?~~t>>>0:0,$[n>>1]=1|o,b=b+8|0,n=(t=P2(P2(B*P2(l-l))+P2(1)))<P2(4294967296)&t>=P2(0)?~~t>>>0:0,$[b>>1]=1|n):(b=X2[A+96>>2]+(n<<6)|0,n=X2[4+(h=A+4|0)>>2],X2[b+16>>2]=X2[h>>2],X2[b+20>>2]=n,n=X2[4+(o=h+8|0)>>2],X2[(b=b+24|0)>>2]=X2[o>>2],X2[b+4>>2]=n),m=c?C:s,_)for(D=e<<4,Y=e<<6|16,N=X2[A+56>>2],Z=J2[A+60|0];Z?(_=X2[A+116>>2]+D|0,F=U2[A+36>>2],g=U2[A+4>>2],n=(t=P2(P2(P2(P2(P2(A2[_>>1])/F)+g)-g)*F))<P2(4294967296)&t>=P2(0)?~~t>>>0:0,v=X2[A+136>>2]+(N<<4)|0,h=A2[v>>1],E=U2[A+44>>2],d=U2[A+12>>2],s=(t=P2(P2(P2(P2(P2(A2[_+4>>1])/E)+d)-d)*E))<P2(4294967296)&t>=P2(0)?~~t>>>0:0,l=U2[A+40>>2],B=U2[A+8>>2],c=(t=P2(P2(P2(P2(P2(A2[_+2>>1])/l)+B)-B)*l))<P2(4294967296)&t>=P2(0)?~~t>>>0:0,b=(t=P2(P2(E*P2(P2(P2(P2(A2[_+10>>1])/E)+d)-d))+P2(1)))<P2(4294967296)&t>=P2(0)?~~t>>>0:0,C=65534&n,o=(t=P2(P2(l*P2(P2(P2(P2(A2[_+8>>1])/l)+B)-B))+P2(1)))<P2(4294967296)&t>=P2(0)?~~t>>>0:0,h=h>>>0<=C>>>0,n=(t=P2(P2(F*P2(P2(P2(P2(A2[_+6>>1])/F)+g)-g))+P2(1)))<P2(4294967296)&t>=P2(0)?~~t>>>0:0,h||($[v>>1]=C),(n|=1)>>>0>A2[v+6>>1]&&($[v+6>>1]=n),(n=65534&c)>>>0<A2[v+2>>1]&&($[v+2>>1]=n),(n=1|o)>>>0>A2[(c=v+8|0)>>1]&&($[c>>1]=n),(n=65534&s)>>>0<A2[v+4>>1]&&($[v+4>>1]=n),(n=1|b)>>>0<=A2[(o=v+10|0)>>1]||($[o>>1]=n)):(n=X2[A+76>>2]+Y|0,Q=U2[n>>2],F=U2[n+12>>2],g=U2[n+8>>2],E=U2[n+4>>2],d=U2[n-4>>2],l=U2[n-8>>2],B=U2[n-12>>2],t=U2[n-16>>2],o=X2[A+96>>2]+(N<<6)|0,t<U2[o>>2]&&(U2[o>>2]=t),B<U2[o+4>>2]&&(U2[o+4>>2]=B),l<U2[o+8>>2]&&(U2[o+8>>2]=l),d<U2[o+12>>2]&&(U2[o+12>>2]=d),Q>U2[o+16>>2]&&(U2[o+16>>2]=Q),E>U2[(n=o+20|0)>>2]&&(U2[n>>2]=E),g>U2[(n=o+24|0)>>2]&&(U2[n>>2]=g),F>U2[(n=o+28|0)>>2]&&(U2[n>>2]=F)),D=D+16|0,Y=Y- -64|0,k=k-1|0;);else N=X2[A+56>>2];if(X2[A+56>>2]=_=N+1|0,x(A,e,m),N=X2[A+56>>2],x(A,m,r),m=X2[A+56>>2]-R|0,(n=J2[A+60|0])&&!((0|m)<129)){if(C=X2[A+136>>2],h=-1<(0|(e=X2[12+(C+(N<<4)|0)>>2]))?1:0-e|0,(0|(c=-1<(0|(e=X2[12+(C+(_<<4)|0)>>2]))?1:0-e|0))<=128){if((0|(n=e=X2[A+152>>2]))==X2[A+156>>2]&&!((0|(v=(n=e)?n<<1:1))<=(0|n))){if(Y=0,v&&(X2[6258]=X2[6258]+1,(r=L2(v<<5|19))&&(X2[(Y=r+19&-16)-4>>2]=r)),1<=(0|e))for(n=0,k=e;R=X2[A+160>>2]+n|0,r=X2[(s=R)+4>>2],X2[(o=Z=n+Y|0)>>2]=X2[s>>2],X2[o+4>>2]=r,r=X2[4+(o=s+24|0)>>2],X2[(b=Z+24|0)>>2]=X2[o>>2],X2[b+4>>2]=r,r=X2[4+(o=s+16|0)>>2],X2[(b=Z+16|0)>>2]=X2[o>>2],X2[b+4>>2]=r,r=X2[4+(o=s+8|0)>>2],X2[(b=Z+8|0)>>2]=X2[o>>2],X2[b+4>>2]=r,n=n+32|0,k=k-1|0;);(r=X2[A+160>>2])&&J2[A+164|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+160>>2]=Y,X2[A+156>>2]=v,S2[A+164|0]=1,n=X2[A+152>>2];}X2[A+152>>2]=n+1,b=(k=e<<5)+X2[(o=A+160|0)>>2]|0,e=X2[36+a>>2],X2[b>>2]=X2[32+a>>2],X2[b+4>>2]=e,e=X2[4+(r=56+a|0)>>2],X2[(n=b+24|0)>>2]=X2[r>>2],X2[n+4>>2]=e,e=X2[4+(r=48+a|0)>>2],X2[(n=b+16|0)>>2]=X2[r>>2],X2[n+4>>2]=e,e=X2[4+(r=40+a|0)>>2],X2[(n=b+8|0)>>2]=X2[r>>2],X2[n+4>>2]=e,r=k+X2[o>>2]|0,$[r>>1]=A2[(e=C+(_<<4)|0)>>1],$[r+2>>1]=A2[e+2>>1],$[r+4>>1]=A2[e+4>>1],$[r+6>>1]=A2[e+6>>1],$[r+8>>1]=A2[e+8>>1],X2[r+16>>2]=c,X2[r+12>>2]=_,$[r+10>>1]=A2[e+10>>1];}if((0|h)<=128){if((0|(n=e=X2[A+152>>2]))==X2[A+156>>2]&&!((0|(_=(n=e)?n<<1:1))<=(0|n))){if(o=0,_&&(X2[6258]=X2[6258]+1,(r=L2(_<<5|19))&&(X2[(o=r+19&-16)-4>>2]=r)),1<=(0|e))for(n=0,k=e;R=X2[A+160>>2]+n|0,r=X2[(s=R)+4>>2],X2[(b=Z=n+o|0)>>2]=X2[s>>2],X2[b+4>>2]=r,r=X2[4+(b=s+24|0)>>2],X2[(c=Z+24|0)>>2]=X2[b>>2],X2[c+4>>2]=r,r=X2[4+(b=s+16|0)>>2],X2[(c=Z+16|0)>>2]=X2[b>>2],X2[c+4>>2]=r,r=X2[4+(b=s+8|0)>>2],X2[(c=Z+8|0)>>2]=X2[b>>2],X2[c+4>>2]=r,n=n+32|0,k=k-1|0;);(r=X2[A+160>>2])&&J2[A+164|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+160>>2]=o,X2[A+156>>2]=_,S2[A+164|0]=1,n=X2[A+152>>2];}X2[A+152>>2]=n+1,b=(k=e<<5)+X2[(o=A+160|0)>>2]|0,e=X2[36+a>>2],X2[b>>2]=X2[32+a>>2],X2[b+4>>2]=e,e=X2[4+(r=56+a|0)>>2],X2[(n=b+24|0)>>2]=X2[r>>2],X2[n+4>>2]=e,e=X2[4+(r=48+a|0)>>2],X2[(n=b+16|0)>>2]=X2[r>>2],X2[n+4>>2]=e,e=X2[4+(r=40+a|0)>>2],X2[(n=b+8|0)>>2]=X2[r>>2],X2[n+4>>2]=e,r=k+X2[o>>2]|0,$[r>>1]=A2[(e=C+(N<<4)|0)>>1],$[r+2>>1]=A2[e+2>>1],$[r+4>>1]=A2[e+4>>1],$[r+6>>1]=A2[e+6>>1],$[r+8>>1]=A2[e+8>>1],X2[r+16>>2]=h,X2[r+12>>2]=N,$[r+10>>1]=A2[e+10>>1];}X2[A+168>>2]=X2[A+152>>2],n=J2[A+60|0];}255&n?X2[12+(X2[A+136>>2]+(u<<4)|0)>>2]=0-m:X2[32+(X2[A+96>>2]+(u<<6)|0)>>2]=m;}K2=112+a|0;}(A,X2[A+56>>2]=0,g),J2[A+60|0]&&!X2[A+152>>2]&&(X2[A+156>>2]?(r=X2[A+160>>2],e=1):(r=0,X2[6258]=X2[6258]+(e=1),(f=L2(51))&&(X2[(r=f+19&-16)-4>>2]=f),(f=X2[A+160>>2])&&J2[A+164|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2]),e=X2[A+152>>2]+1|0),X2[A+160>>2]=r,X2[A+156>>2]=1,S2[A+164|0]=1),X2[A+152>>2]=e,e=X2[12+u>>2],X2[r>>2]=X2[8+u>>2],X2[r+4>>2]=e,i=X2[(f=32+u|0)+4>>2],X2[(e=r+24|0)>>2]=X2[f>>2],X2[e+4>>2]=i,i=X2[(f=24+u|0)+4>>2],X2[(e=r+16|0)>>2]=X2[f>>2],X2[e+4>>2]=i,e=r+8|0,f=X2[(r=16+u|0)+4>>2],X2[e>>2]=X2[r>>2],X2[e+4>>2]=f,e=X2[A+160>>2],r=X2[A+136>>2],$[e>>1]=A2[r>>1],$[e+2>>1]=A2[r+2>>1],$[e+4>>1]=A2[r+4>>1],$[e+6>>1]=A2[r+6>>1],$[e+8>>1]=A2[r+8>>1],X2[e+12>>2]=0,f=X2[r+12>>2],X2[e+16>>2]=-1<(0|f)?1:0-f|0,$[e+10>>1]=A2[r+10>>1]),X2[A+168>>2]=X2[A+152>>2],(e=X2[A+116>>2])&&J2[A+120|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+116>>2]=0,S2[A+120|0]=1,X2[(e=A+108|0)>>2]=0,X2[e+4>>2]=0,(e=X2[A+76>>2])&&J2[A+80|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+76>>2]=0,S2[A+80|0]=1,X2[(A=A+68|0)>>2]=0,X2[A+4>>2]=0,K2=112+u|0;}function E1(A,e,r){A|=0,e|=0,r|=0;var f,i,a,n,b,t,o=0,c=P2(0),k=P2(0),u=P2(0),s=0,l=P2(0);K2=t=K2-80|0,s=X2[A+4>>2],N2[X2[X2[s>>2]+16>>2]](s,28+t|0,24+t|0,20+t|0,16+t|0,12+t|0,8+t|0,4+t|0,t,e),s=(f=X2[A+4>>2])+12|0,i=X2[12+t>>2]+H2(X2[8+t>>2],r)|0,a=X2[16+t>>2],n=X2[28+t>>2],b=X2[20+t>>2];A:{e:{r:{f:{i:{a:{n:{if(3!=X2[t>>2]){if(o=H2(X2[8+i>>2],a)+n|0,b)break n;u=P2(U2[o+4>>2]*U2[f+8>>2]),k=P2(U2[o>>2]*U2[f+4>>2]),c=U2[f+12>>2],o=o+8|0;break a;}if(o=H2(A2[4+i>>1],a)+n|0,o=b?(u=P2(U2[f+8>>2]*P2(M[o+8>>3])),k=P2(U2[f+4>>2]*P2(M[o>>3])),c=P2(M[o+16>>3]),s):(u=P2(U2[o+4>>2]*U2[f+8>>2]),k=P2(U2[o>>2]*U2[f+4>>2]),c=U2[f+12>>2],o+8|0),l=U2[o>>2],X2[76+t>>2]=0,U2[68+t>>2]=u,U2[72+t>>2]=l*c,U2[64+t>>2]=k,o=H2(A2[2+i>>1],a)+n|0,!b)break i;u=P2(U2[f+8>>2]*P2(M[o+8>>3])),k=P2(U2[f+4>>2]*P2(M[o>>3])),c=P2(M[o+16>>3]),o=s;break f;}u=P2(U2[f+8>>2]*P2(M[o+8>>3])),k=P2(U2[f+4>>2]*P2(M[o>>3])),c=P2(M[o+16>>3]),o=s;}if(l=U2[o>>2],X2[76+t>>2]=0,U2[68+t>>2]=u,U2[72+t>>2]=l*c,U2[64+t>>2]=k,o=H2(X2[4+i>>2],a)+n|0,!b)break r;u=P2(U2[f+8>>2]*P2(M[o+8>>3])),k=P2(U2[f+4>>2]*P2(M[o>>3])),c=P2(M[o+16>>3]),o=s;break e;}u=P2(U2[o+4>>2]*U2[f+8>>2]),k=P2(U2[o>>2]*U2[f+4>>2]),c=U2[f+12>>2],o=o+8|0;}l=U2[o>>2],X2[60+t>>2]=0,U2[52+t>>2]=u,U2[56+t>>2]=l*c,U2[48+t>>2]=k,o=H2(A2[i>>1],a)+n|0,c=b?(u=P2(U2[f+8>>2]*P2(M[o+8>>3])),k=P2(U2[f+4>>2]*P2(M[o>>3])),P2(M[o+16>>3])):(s=o+8|0,u=P2(U2[o+4>>2]*U2[f+8>>2]),k=P2(U2[o>>2]*U2[f+4>>2]),U2[f+12>>2]),l=U2[s>>2],U2[32+t>>2]=k,c=P2(l*c);break A;}u=P2(U2[o+4>>2]*U2[f+8>>2]),k=P2(U2[o>>2]*U2[f+4>>2]),c=U2[f+12>>2],o=o+8|0;}l=U2[o>>2],X2[60+t>>2]=0,U2[52+t>>2]=u,U2[56+t>>2]=l*c,U2[48+t>>2]=k,o=H2(X2[i>>2],a)+n|0,c=b?(u=P2(U2[f+8>>2]*P2(M[o+8>>3])),k=P2(U2[f+4>>2]*P2(M[o>>3])),P2(M[o+16>>3])):(s=o+8|0,u=P2(U2[o+4>>2]*U2[f+8>>2]),k=P2(U2[o>>2]*U2[f+4>>2]),U2[f+12>>2]),l=U2[s>>2],U2[32+t>>2]=k,c=P2(l*c);}X2[44+t>>2]=0,U2[40+t>>2]=c,U2[36+t>>2]=u,s=X2[A+8>>2],N2[X2[X2[s>>2]+8>>2]](s,32+t|0,e,r),A=X2[A+4>>2],N2[X2[X2[A>>2]+24>>2]](A,e),K2=80+t|0;}function Q1(A,e){var r=X2[(e|=0)+4>>2];X2[(A|=0)+24>>2]=X2[e>>2],X2[A+28>>2]=r,r=X2[(e=e+8|0)+4>>2],X2[(A=A+32|0)>>2]=X2[e>>2],X2[A+4>>2]=r;}function w1(A){return (A|=0)+24|0;}function G1(A,e,r){e=P2(e);}function C1(A,e,r,f){}function h1(A,e,r){return r=P2(r),0;}function F1(A,e,r,f){A|=0,e|=0,r|=0,f|=0;P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var i,a=P2(N2[X2[X2[A>>2]+48>>2]](A)),n=P2(N2[X2[X2[A>>2]+48>>2]](A)),b=P2(N2[X2[X2[A>>2]+48>>2]](A)),t=U2[(A=e+52|0)>>2],o=U2[(i=e+56|0)>>2],c=U2[e+48>>2];X2[r+12>>2]=0,U2[r+8>>2]=o-b,U2[r+4>>2]=t-n,U2[r>>2]=c-a,t=U2[A>>2],o=U2[i>>2],c=U2[e+48>>2],X2[f+12>>2]=0,U2[f+8>>2]=b+o,U2[f+4>>2]=n+t,U2[f>>2]=a+c;}function Y1(A){return X2[(A|=0)+16>>2];}function m1(A){return X2[(A|=0)+8>>2];}function N1(A,e,r,f){N2[X2[X2[(A|=0)>>2]+8>>2]](A,e|=0,r|=0,f|=0);}function R1(A,e){N2[X2[X2[(A|=0)>>2]+64>>2]](A,e|=0);}function D1(A,e){var r,f,i=P2(0),a=P2(0),n=0,b=P2(0),t=P2(0),o=P2(0),c=0,k=P2(0),u=P2(0),s=P2(0),l=P2(0),B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=P2(0),g=P2(0),E=P2(0),Q=P2(0);P2(0),P2(0);A:{e:{r:{f:{i:{if(4==(0|(n=X2[A+844>>2]))){if(o=U2[e>>2],c=(n=(i=U2[A+84>>2])<(b=U2[e+80>>2]))?0:-1,f=(n=(a=U2[A+292>>2])<(i=n?i:b))?1:c,b=U2[A+500>>2],!(n=(c=U2[A+708>>2]<((n=b<(i=n?a:i))?b:i))?3:n?2:f)){k=U2[A+636>>2],Z=U2[A+428>>2],a=P2(k-Z),s=U2[A+632>>2],_=U2[A+424>>2],t=P2(s-_),g=U2[A+628>>2],E=U2[A+420>>2],u=P2(g-E),Q=U2[A+220>>2],l=U2[A+216>>2],B=U2[A+212>>2],i=U2[e+8>>2],b=U2[e+4>>2];break i;}if(B=U2[A+212>>2],v=P2(o-B),s=U2[A+632>>2],_=U2[A+424>>2],t=P2(s-_),b=U2[e+4>>2],l=U2[A+216>>2],i=P2(b-l),g=U2[A+628>>2],E=U2[A+420>>2],u=P2(g-E),a=P2(P2(v*t)-P2(i*u)),f=P2(a*a),k=U2[A+636>>2],Z=U2[A+428>>2],a=P2(k-Z),r=P2(i*a),i=U2[e+8>>2],Q=U2[A+220>>2],d=P2(i-Q),r=P2(r-P2(d*t)),v=P2(P2(d*u)-P2(v*a)),v=P2(f+P2(P2(r*r)+P2(v*v))),1!=(0|n))break i;o=P2(o-U2[A+4>>2]),i=P2(i-U2[A+12>>2]),b=P2(b-U2[A+8>>2]),u=P2(0);break f;}X2[A+844>>2]=n+1;break A;}if(o=P2(o-U2[A+4>>2]),b=P2(b-U2[A+8>>2]),d=P2(P2(o*t)-P2(b*u)),i=P2(i-U2[A+12>>2]),t=P2(P2(b*a)-P2(i*t)),a=P2(P2(i*u)-P2(o*a)),u=P2(P2(d*d)+P2(P2(t*t)+P2(a*a))),a=P2(0),2==(0|n))break r;}if(a=P2(s-l),t=P2(g-B),s=P2(P2(o*a)-P2(b*t)),k=P2(k-Q),a=P2(P2(b*k)-P2(i*a)),d=P2(a*a),a=P2(P2(i*t)-P2(o*k)),a=P2(P2(s*s)+P2(d+P2(a*a))),t=P2(0),c)break e;}t=P2(_-l),l=P2(E-B),B=P2(P2(o*t)-P2(b*l)),k=b,b=P2(Z-Q),t=P2(P2(k*b)-P2(i*t)),i=P2(P2(i*l)-P2(o*b)),t=P2(P2(B*B)+P2(P2(t*t)+P2(i*i)));}c=(n=(i=P2(j2(v)))>P2(-0xde0b6b000000000))?0:-1,b=P2(j2(u)),c=(n=(i=n?i:P2(-0xde0b6b000000000))<b)?1:c,n=(i=n?b:i)<(a=P2(j2(a))),n=P2(j2(t))>(n?a:i)?3:n?2:c;}return $2(4+((c=A)+H2(A=0<(0|n)?n:0,208)|0)|0,e,208),A;}function R2(A,e,r){var f,i,a,n,b,t,o,c,k,u,s,l,B,v,d=0,Z=P2(0),_=P2(0),g=P2(0),E=0,Q=0,w=(P2(0),P2(0),P2(0));P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);if(1<=(0|(E=X2[A+844>>2]))){for(Q=E+1|0,d=(H2(E,208)+A|0)-204|0;;)if(a=U2[e+48>>2],t=U2[e+8>>2],o=U2[e+4>>2],c=U2[e>>2],n=U2[e+52>>2],k=U2[e+24>>2],f=U2[e+20>>2],u=U2[e+16>>2],Z=U2[e+56>>2],_=U2[e+40>>2],g=U2[e+36>>2],b=U2[e+32>>2],X2[d+60>>2]=0,w=Z,Z=U2[d>>2],s=g,g=U2[d+4>>2],i=_,_=U2[d+8>>2],b=P2(w+P2(P2(P2(b*Z)+P2(s*g))+P2(i*_))),U2[d+56>>2]=b,n=P2(n+P2(P2(P2(Z*u)+P2(g*f))+P2(_*k))),U2[d+52>>2]=n,a=P2(a+P2(P2(P2(Z*c)+P2(g*o))+P2(_*t))),U2[d+48>>2]=a,t=U2[r+56>>2],o=U2[r+40>>2],c=U2[r+32>>2],k=U2[r+36>>2],f=U2[r+52>>2],u=U2[r+24>>2],l=U2[r+16>>2],B=U2[r+20>>2],Z=U2[r+48>>2],_=U2[r+8>>2],g=U2[r>>2],i=U2[r+4>>2],X2[d+44>>2]=0,w=Z,Z=U2[d+16>>2],v=P2(g*Z),g=U2[d+20>>2],s=_,_=U2[d+24>>2],i=P2(w+P2(P2(v+P2(i*g))+P2(s*_))),U2[d+32>>2]=i,f=P2(f+P2(P2(P2(Z*l)+P2(g*B))+P2(_*u))),U2[d+36>>2]=f,Z=P2(t+P2(P2(P2(Z*c)+P2(g*k))+P2(_*o))),U2[d+40>>2]=Z,U2[d+80>>2]=P2(P2(P2(a-i)*U2[d- -64>>2])+P2(P2(n-f)*U2[d+68>>2]))+P2(P2(b-Z)*U2[d+72>>2]),X2[(v=d+164|0)>>2]=X2[v>>2]+1,d=d-208|0,!(1<(0|(Q=Q-1|0))))break;for(d=(H2(E,208)+A|0)-204|0;;)if(E=(e=E)-1|0,(Z=U2[d+80>>2])<=(g=U2[A+848>>2])&&(_=P2(U2[d+32>>2]-P2(U2[d+48>>2]-P2(U2[d- -64>>2]*Z))),w=P2(_*_),_=P2(U2[d+36>>2]-P2(U2[d+52>>2]-P2(Z*U2[d+68>>2]))),Z=P2(U2[d+40>>2]-P2(U2[d+56>>2]-P2(Z*U2[d+72>>2]))),!(P2(P2(w+P2(_*_))+P2(Z*Z))>P2(g*g)))||(e=(0|(r=e))!=(0|(e=X2[(Q=A)+844>>2]))?($2(d,(e=H2(e-1|0,208)+A|0)+4|0,208),X2[e+168>>2]=0,X2[e+120>>2]=0,X2[(r=e+132|0)>>2]=0,X2[r+4>>2]=0,X2[(e=e+140|0)>>2]=0,X2[e+4>>2]=0,X2[A+844>>2]-1|0):E,X2[Q+844>>2]=e),d=d-208|0,!(1<(E+1|0)))break;}}function T1(A){var e,r,f,i,a,n,x,y,V,p,M,S,X,J,U,H,P,j,z,b,t=0,o=0,c=0,k=0,u=P2(0),s=P2(0),l=0,B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=P2(0),g=P2(0),E=0,Q=0,w=0,G=0,C=0,h=P2(0),F=P2(0),Y=0,m=P2(0),N=P2(0),R=0,D=0,T=P2(0),W=(P2(0),P2(0)),I=P2(0),O=0,K=P2(0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);K2=b=K2+-64|0;A:if(J2[A+356|0]){S2[A+356|0]=0,S2[0|(l=A+352|0)]=0,X2[(o=G=A+344|0)>>2]=0,X2[o+4>>2]=0,X2[(o=O=A+336|0)>>2]=0,X2[o+4>>2]=0,o=J2[0|(t=A+332|0)],S2[0|t]=w=-16&o,t=A+316|0;e:{r:{f:switch(X2[A>>2]){case 1:c=X2[A+168>>2],X2[A+260>>2]=X2[A+164>>2],X2[A+264>>2]=c,c=X2[A+88>>2],X2[A+244>>2]=X2[A+84>>2],X2[A+248>>2]=c,c=X2[(o=A+172|0)+4>>2],X2[(t=k=A+268|0)>>2]=X2[o>>2],X2[t+4>>2]=c,c=X2[(o=A+92|0)+4>>2],X2[(t=A+252|0)>>2]=X2[o>>2],X2[t+4>>2]=c,S2[0|l]=0,X2[A+288>>2]=0,U2[A+280>>2]=U2[A+248>>2]-U2[A+264>>2],U2[A+276>>2]=U2[A+244>>2]-U2[A+260>>2],U2[A+284>>2]=U2[t>>2]-U2[k>>2],X2[G>>2]=0,X2[G+4>>2]=0,X2[A+336>>2]=1065353216,X2[A+340>>2]=0,S2[A+332|0]=w,S2[A+312|0]=c=1;break A;case 2:v=U2[(k=A)+4>>2],Z=P2(U2[A+20>>2]-v),B=U2[A+8>>2],_=P2(U2[A+24>>2]-B),u=U2[A+12>>2],d=P2(U2[A+28>>2]-u),c=(u=P2(P2(P2(P2(P2(0)-v)*Z)+P2(P2(P2(0)-B)*_))+P2(P2(P2(0)-u)*d)))>P2(0)?u<(s=P2(P2(P2(Z*Z)+P2(_*_))+P2(d*d)))?(s=P2(u/s),3|w):(s=P2(1),2|w):1|w,S2[k+332|0]=c,X2[(o=A+344|0)>>2]=0,X2[o+4>>2]=0,U2[A+340>>2]=s,g=P2(P2(1)-s),U2[A+336>>2]=g,X2[A+256>>2]=0,u=U2[A+92>>2],v=P2(u+P2(s*P2(U2[A+108>>2]-u))),U2[A+252>>2]=v,u=U2[A+88>>2],Z=P2(u+P2(s*P2(U2[A+104>>2]-u))),U2[A+248>>2]=Z,u=U2[A+84>>2],_=P2(u+P2(s*P2(U2[A+100>>2]-u))),U2[A+244>>2]=_,d=U2[A+180>>2],B=U2[A+184>>2],W=U2[A+168>>2],u=U2[A+188>>2],I=U2[A+172>>2],h=U2[A+164>>2],X2[A+288>>2]=0,F=v,v=P2(I+P2(s*P2(u-I))),U2[A+284>>2]=F-v,B=P2(W+P2(s*P2(B-W))),U2[A+280>>2]=Z-B,u=P2(h+P2(s*P2(d-h))),U2[A+276>>2]=_-u,X2[A+272>>2]=0,U2[A+268>>2]=v,U2[A+264>>2]=B,U2[A+260>>2]=u,Q=1,2&c||(X2[A>>2]=1,Q=0),1&c||(X2[A>>2]=Q,w=X2[(c=(C=(Q<<4)+A|0)+12|0)>>2],G=X2[c+4>>2],O=X2[(c=C+4|0)>>2],l=X2[c+4>>2],c=X2[(o=C+84|0)+4>>2],X2[(t=k=A+84|0)>>2]=X2[o>>2],X2[t+4>>2]=c,c=X2[(o=C+92|0)+4>>2],X2[(t=t+8|0)>>2]=X2[o>>2],X2[t+4>>2]=c,c=X2[(o=C+164|0)+4>>2],X2[(t=k=A+164|0)>>2]=X2[o>>2],X2[t+4>>2]=c,c=X2[(o=C+172|0)+4>>2],X2[(t=t+8|0)>>2]=X2[o>>2],X2[t+4>>2]=c,X2[(c=A+4|0)>>2]=O,X2[c+4>>2]=l,X2[(c=c+8|0)>>2]=w,X2[c+4>>2]=G),c=g>=P2(0)&s>=P2(0),S2[A+312|0]=c;break A;case 3:X2[(c=32+b|0)>>2]=0,X2[c+4>>2]=0,X2[24+b>>2]=0,W1(24+b|(X2[28+b>>2]=0),Y=A+4|0,R=A+20|0,D=A+36|0,t),X2[A+256>>2]=0,T=U2[A+336>>2],m=U2[A+340>>2],N=U2[G>>2],K=P2(P2(P2(T*U2[A+92>>2])+P2(m*U2[A+108>>2]))+P2(N*U2[A+124>>2])),U2[A+252>>2]=K,W=P2(P2(P2(T*U2[A+88>>2])+P2(m*U2[A+104>>2]))+P2(N*U2[A+120>>2])),U2[A+248>>2]=W,C=A+100|0,w=A+116|0,I=P2(P2(P2(T*U2[A+84>>2])+P2(m*U2[C>>2]))+P2(N*U2[w>>2])),U2[A+244>>2]=I,h=U2[(G=A+180|0)>>2],g=U2[(l=A+196|0)>>2],Z=U2[A+168>>2],_=U2[A+184>>2],d=U2[A+200>>2],v=U2[A+172>>2],B=U2[A+188>>2],u=U2[A+204>>2],s=U2[A+164>>2],X2[A+288>>2]=0,B=P2(P2(P2(T*v)+P2(m*B))+P2(N*u)),U2[A+284>>2]=K-B,u=P2(P2(P2(T*Z)+P2(m*_))+P2(N*d)),U2[A+280>>2]=W-u,s=P2(P2(P2(T*s)+P2(m*h))+P2(N*g)),U2[A+276>>2]=I-s,X2[A+272>>2]=0,U2[A+268>>2]=B,U2[A+264>>2]=u,U2[A+260>>2]=s;i:{a:{n:{b:{t:{if(4<=(0|(o=X2[A>>2])))8&(Q=J2[A+332|0])?c=o:(o=X2[(t=(E=((c=o-1|0)<<4)+A|0)+12|0)+4>>2],X2[(k=A+60|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=E+4|0)+4>>2],X2[(k=A+52|0)>>2]=X2[t>>2],X2[k+4>>2]=o,X2[A>>2]=c,o=X2[(t=E+84|0)+4>>2],X2[(k=A+132|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=E+92|0)+4>>2],X2[(k=A+140|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=E+164|0)+4>>2],X2[(k=A+212|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=E+172|0)+4>>2],X2[(k=A+220|0)>>2]=X2[t>>2],X2[k+4>>2]=o);else {if((c=3)!=(0|o))break t;Q=J2[A+332|0];}if(4&Q)break b;X2[A>>2]=c=c-1|0,o=X2[(t=(E=(c<<4)+A|0)+12|0)+4>>2],X2[(k=D+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=E+4|0)+4>>2],X2[D>>2]=X2[t>>2],X2[D+4>>2]=o,o=X2[(t=E+92|0)+4>>2],X2[(k=w+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=E+84|0)+4>>2],X2[w>>2]=X2[t>>2],X2[w+4>>2]=o,o=X2[(t=E+164|0)+4>>2],X2[l>>2]=X2[t>>2],X2[l+4>>2]=o,o=X2[(t=E+172|0)+4>>2],X2[(k=l+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o;break b;}if((0|o)<(c=2))break n;Q=J2[A+332|0];}if(2&Q)break a;X2[A>>2]=c=c-1|0,o=X2[(t=(l=(c<<4)+A|0)+12|0)+4>>2],X2[(k=R+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=l+4|0)+4>>2],X2[R>>2]=X2[t>>2],X2[R+4>>2]=o,o=X2[(t=l+92|0)+4>>2],X2[(k=C+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=l+84|0)+4>>2],X2[C>>2]=X2[t>>2],X2[C+4>>2]=o,o=X2[(t=l+164|0)+4>>2],X2[G>>2]=X2[t>>2],X2[G+4>>2]=o,o=X2[(t=l+172|0)+4>>2],X2[(k=G+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o;break a;}if((c=1)!=(0|o))break i;Q=J2[A+332|0];}1&Q||(X2[A>>2]=c=c-1|0,c=X2[(o=(l=(c<<4)+A|0)+12|0)+4>>2],X2[(t=Y+8|0)>>2]=X2[o>>2],X2[t+4>>2]=c,c=X2[(o=l+4|0)+4>>2],X2[Y>>2]=X2[o>>2],X2[Y+4>>2]=c,c=X2[(o=l+92|0)+4>>2],X2[(t=(k=A+84|0)+8|0)>>2]=X2[o>>2],X2[t+4>>2]=c,c=X2[(o=l+84|0)+4>>2],X2[k>>2]=X2[o>>2],X2[k+4>>2]=c,c=X2[(o=l+164|0)+4>>2],X2[(t=k=A+164|0)>>2]=X2[o>>2],X2[t+4>>2]=c,c=X2[(o=l+172|0)+4>>2],X2[(t=t+8|0)>>2]=X2[o>>2],X2[t+4>>2]=c);}if(!(U2[O>>2]>=P2(c=0)))break e;if(!(m>=P2(0)))break e;if(!(N>=P2(0)))break e;c=U2[A+348>>2]>=P2(0),S2[A+312|0]=c;break A;case 0:break e;case 4:break f;default:break r;}if(X2[(c=16+b|0)>>2]=0,X2[c+4>>2]=0,X2[8+b>>2]=0,X2[12+b>>2]=0,X2[t>>2]=0,X2[t+4>>2]=0,X2[(c=t+8|0)>>2]=0,X2[c+4>>2]=0,S2[A+332|0]=15|o,S2[40+b|0]=0,a=U2[A+12>>2],P=P2(P2(0)-a),n=U2[A+28>>2],x=P2(n-a),d=U2[(r=A+36|0)>>2],y=U2[A+4>>2],V=P2(d-y),v=U2[A+56>>2],p=U2[A+8>>2],g=P2(v-p),u=U2[A+40>>2],M=P2(u-p),s=U2[(f=A+52|0)>>2],S=P2(s-y),H=P2(P2(V*g)-P2(M*S)),X=U2[(i=A+20|0)>>2],J=P2(X-y),m=U2[A+60>>2],e=P2(m-a),B=U2[A+44>>2],Z=P2(B-a),N=P2(P2(M*e)-P2(Z*g)),U=U2[A+24>>2],_=P2(U-p),T=P2(P2(Z*S)-P2(V*e)),j=P2(P2(x*H)+P2(P2(J*N)+P2(_*T))),K=P2(P2(_*Z)-P2(x*M)),W=P2(P2(x*V)-P2(J*Z)),I=P2(P2(J*M)-P2(_*V)),z=P2(P2(P2(K*S)+P2(W*g))+P2(I*e)),h=P2(P2(_*S)-P2(J*g)),F=P2(Z*h),g=P2(P2(x*g)-P2(_*e)),Z=P2(P2(J*e)-P2(x*S)),e=P2(F+P2(P2(V*g)+P2(M*Z))),u=P2(u-U),_=P2(s-X),d=P2(d-X),s=P2(v-U),v=P2(P2(u*_)-P2(d*s)),B=P2(B-n),F=P2(B*s),s=P2(m-n),u=P2(F-P2(u*s)),s=P2(P2(d*s)-P2(B*_)),_=P2(P2(P2(a-n)*v)+P2(P2(P2(y-X)*u)+P2(P2(p-U)*s))),k=P2(_*_)<P2(9.99999905104687e-9)?-1:P2(P2(P2(P2(P2(0)-n)*v)+P2(P2(P2(P2(0)-X)*u)+P2(P2(P2(0)-U)*s)))*_)<P2(0),d=P2(P2(0)-y),B=P2(P2(0)-p),(0|(c=k|(t=P2(j*j)<P2(9.99999905104687e-9)?-1:P2(P2(P2(P*H)+P2(P2(d*N)+P2(B*T)))*j)<P2(0))|(o=P2(z*z)<P2(9.99999905104687e-9)?-1:P2(P2(P2(P2(d*K)+P2(B*W))+P2(I*P))*z)<P2(0))|(l=P2(e*e)<P2(9.99999905104687e-9)?-1:P2(P2(P2(P*h)+P2(P2(d*g)+P2(B*Z)))*e)<P2(0))))<=-1)S2[A+352|0]=1;else {if(c){E=A+4|0,s=P2(34028234663852886e22),o&&(W1(8+b|0,E,i,r,24+b|0),d=U2[24+b>>2],u=P2(d-U2[8+b>>2]),s=P2(u*u),v=U2[28+b>>2],u=P2(v-U2[12+b>>2]),s=P2(s+P2(u*u)),B=U2[32+b>>2],u=P2(B-U2[16+b>>2]),u=P2(s+P2(u*u)),s=P2(34028234663852886e22),u<P2(34028234663852886e22)&&(U2[A+316>>2]=d,c=X2[48+b>>2],X2[A+336>>2]=X2[44+b>>2],X2[A+340>>2]=c,U2[A+328>>2]=U2[36+b>>2],U2[A+324>>2]=B,U2[A+320>>2]=v,X2[A+348>>2]=0,U2[A+344>>2]=U2[52+b>>2],c=J2[40+b|0],S2[A+332|0]=1&c|240&J2[A+332|0]|2&c|4&c,s=u)),t&&(W1(8+b|0,E,r,f,24+b|0),d=U2[24+b>>2],u=P2(d-U2[8+b>>2]),F=P2(u*u),v=U2[28+b>>2],u=P2(v-U2[12+b>>2]),F=P2(F+P2(u*u)),B=U2[32+b>>2],u=P2(B-U2[16+b>>2]),(u=P2(F+P2(u*u)))<s&&(U2[A+316>>2]=d,U2[A+336>>2]=U2[44+b>>2],U2[A+328>>2]=U2[36+b>>2],U2[A+324>>2]=B,U2[A+320>>2]=v,X2[A+340>>2]=0,c=X2[(o=48+b|0)+4>>2],X2[(t=A+344|0)>>2]=X2[o>>2],X2[t+4>>2]=c,c=J2[40+b|0],S2[A+332|0]=8&(o=c<<1)|(4&o|(1&c|240&J2[A+332|0])),s=u)),l&&(W1(8+b|0,E,f,i,24+b|0),d=U2[24+b>>2],u=P2(d-U2[8+b>>2]),F=P2(u*u),v=U2[28+b>>2],u=P2(v-U2[12+b>>2]),F=P2(F+P2(u*u)),B=U2[32+b>>2],u=P2(B-U2[16+b>>2]),(u=P2(F+P2(u*u)))<s&&(U2[A+316>>2]=d,U2[A+336>>2]=U2[44+b>>2],U2[A+328>>2]=U2[36+b>>2],U2[A+324>>2]=B,U2[A+320>>2]=v,X2[A+344>>2]=0,U2[A+348>>2]=U2[48+b>>2],U2[A+340>>2]=U2[52+b>>2],c=J2[40+b|0],S2[A+332|0]=1&c|240&J2[A+332|0]|c>>>1&2|c<<2&8,s=u)),k&&(W1(8+b|0,i,f,r,24+b|0),F=s,v=U2[24+b>>2],s=P2(v-U2[8+b>>2]),u=P2(s*s),B=U2[28+b>>2],s=P2(B-U2[12+b>>2]),H=P2(u+P2(s*s)),u=U2[32+b>>2],s=P2(u-U2[16+b>>2]),F>P2(H+P2(s*s))&&(U2[A+316>>2]=v,X2[A+336>>2]=0,U2[A+328>>2]=U2[36+b>>2],U2[A+324>>2]=u,U2[A+320>>2]=B,U2[A+340>>2]=U2[44+b>>2],U2[A+348>>2]=U2[48+b>>2],U2[A+344>>2]=U2[52+b>>2],c=J2[40+b|0],S2[A+332|0]=4&c|240&J2[A+332|0]|c<<1&2|c<<2&8)),X2[A+256>>2]=0,g=U2[A+336>>2],Z=U2[A+340>>2],s=U2[A+344>>2],h=U2[A+348>>2],_=P2(P2(P2(P2(g*U2[A+92>>2])+P2(Z*U2[A+108>>2]))+P2(s*U2[A+124>>2]))+P2(h*U2[A+140>>2])),U2[A+252>>2]=_,d=P2(P2(P2(P2(g*U2[A+88>>2])+P2(Z*U2[A+104>>2]))+P2(s*U2[A+120>>2]))+P2(h*U2[A+136>>2])),U2[A+248>>2]=d,R=A+100|0,D=A+116|0,C=A+132|0,v=P2(P2(P2(P2(g*U2[A+84>>2])+P2(Z*U2[R>>2]))+P2(s*U2[D>>2]))+P2(h*U2[C>>2])),U2[A+244>>2]=v,X2[A+288>>2]=0,w=A+180|(X2[A+272>>2]=0),G=A+196|0,l=A+212|0,B=P2(P2(P2(P2(g*U2[A+164>>2])+P2(Z*U2[w>>2]))+P2(s*U2[G>>2]))+P2(h*U2[l>>2])),U2[A+260>>2]=B,u=P2(P2(P2(P2(g*U2[A+168>>2])+P2(Z*U2[A+184>>2]))+P2(s*U2[A+200>>2]))+P2(h*U2[A+216>>2])),U2[A+264>>2]=u,s=P2(P2(P2(P2(g*U2[A+172>>2])+P2(Z*U2[A+188>>2]))+P2(s*U2[A+204>>2]))+P2(h*U2[A+220>>2])),U2[A+268>>2]=s,U2[A+276>>2]=v-B,U2[A+280>>2]=d-u,U2[A+284>>2]=_-s;f:{i:{a:{n:{b:{if(4<=(0|(o=X2[A>>2])))8&(Q=J2[A+332|0])?c=o:(o=X2[(t=(Y=((c=o-1|0)<<4)+A|0)+12|0)+4>>2],X2[(k=8+f|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=Y+4|0)+4>>2],X2[f>>2]=X2[t>>2],X2[4+f>>2]=o,X2[A>>2]=c,o=X2[(t=Y+84|0)+4>>2],X2[C>>2]=X2[t>>2],X2[C+4>>2]=o,o=X2[(t=Y+92|0)+4>>2],X2[(k=C+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=Y+164|0)+4>>2],X2[l>>2]=X2[t>>2],X2[l+4>>2]=o,o=X2[(t=Y+172|0)+4>>2],X2[(k=l+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o);else {if((c=3)!=(0|o))break b;Q=J2[A+332|0];}if(4&Q)break n;X2[A>>2]=c=c-1|0,o=X2[(t=(l=(c<<4)+A|0)+12|0)+4>>2],X2[(k=8+r|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=l+4|0)+4>>2],X2[r>>2]=X2[t>>2],X2[4+r>>2]=o,o=X2[(t=l+92|0)+4>>2],X2[(k=D+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=l+84|0)+4>>2],X2[D>>2]=X2[t>>2],X2[D+4>>2]=o,o=X2[(t=l+164|0)+4>>2],X2[G>>2]=X2[t>>2],X2[G+4>>2]=o,o=X2[(t=l+172|0)+4>>2],X2[(k=G+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o;break n;}if((0|o)<(c=2))break a;Q=J2[A+332|0];}if(2&Q)break i;X2[A>>2]=c=c-1|0,o=X2[(t=(l=(c<<4)+A|0)+12|0)+4>>2],X2[(k=8+i|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=l+4|0)+4>>2],X2[i>>2]=X2[t>>2],X2[4+i>>2]=o,o=X2[(t=l+92|0)+4>>2],X2[(k=R+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o,o=X2[(t=l+84|0)+4>>2],X2[R>>2]=X2[t>>2],X2[R+4>>2]=o,o=X2[(t=l+164|0)+4>>2],X2[w>>2]=X2[t>>2],X2[w+4>>2]=o,o=X2[(t=l+172|0)+4>>2],X2[(k=w+8|0)>>2]=X2[t>>2],X2[k+4>>2]=o;break i;}if((c=1)!=(0|o))break f;Q=J2[A+332|0];}1&Q||(X2[A>>2]=c=c-1|0,c=X2[(o=(l=(c<<4)+A|0)+12|0)+4>>2],X2[(t=E+8|0)>>2]=X2[o>>2],X2[t+4>>2]=c,c=X2[(o=l+4|0)+4>>2],X2[E>>2]=X2[o>>2],X2[E+4>>2]=c,c=X2[(o=l+92|0)+4>>2],X2[(t=(k=A+84|0)+8|0)>>2]=X2[o>>2],X2[t+4>>2]=c,c=X2[(o=l+84|0)+4>>2],X2[k>>2]=X2[o>>2],X2[k+4>>2]=c,c=X2[(o=l+164|0)+4>>2],X2[(t=k=A+164|0)>>2]=X2[o>>2],X2[t+4>>2]=c,c=X2[(o=l+172|0)+4>>2],X2[(t=t+8|0)>>2]=X2[o>>2],X2[t+4>>2]=c);}if(!(U2[O>>2]>=P2(c=0)))break e;if(!(U2[A+340>>2]>=P2(0)))break e;if(!(U2[A+344>>2]>=P2(0)))break e;c=h>=P2(0),S2[A+312|0]=c;break A;}if(!J2[A+352|0]){X2[A+276>>2]=0,X2[A+280>>2]=0,S2[A+312|0]=c=1,X2[(A=A+284|0)>>2]=0,X2[A+4>>2]=0;break A;}}}c=0;}S2[A+312|0]=0;}else c=J2[A+312|0];return K2=b+64|0,0!=(255&c);}function W1(A,e,r,f,i){var a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E=P2(0),Q=P2(0),w=P2(0),G=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0)),C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=(P2(0),P2(0),P2(0),P2(0),-16&J2[i+16|0]);S2[i+16|0]=N,d=U2[f>>2],t=U2[e>>2],s=P2(d-t),b=U2[A>>2],E=P2(b-t),Z=U2[f+4>>2],o=U2[e+4>>2],l=P2(Z-o),a=U2[A+4>>2],Q=P2(a-o),_=U2[f+8>>2],c=U2[e+8>>2],B=P2(_-c),k=U2[A+8>>2],w=P2(k-c),n=P2(P2(P2(s*E)+P2(l*Q))+P2(B*w)),g=i,F=U2[r>>2],G=P2(F-t),Y=U2[r+4>>2],C=P2(Y-o),m=U2[r+8>>2],h=P2(m-c),w=(Q=P2(P2(P2(G*E)+P2(C*Q))+P2(h*w)))<=P2(0)&&n<=P2(0)?(A=X2[e+4>>2],X2[i>>2]=X2[e>>2],X2[i+4>>2]=A,r=X2[(e=e+8|0)+4>>2],X2[(A=i+8|0)>>2]=X2[e>>2],X2[A+4>>2]=r,S2[i+16|0]=1|N,Q=P2(0),E=P2(0),P2(1)):(E=P2(b-F),w=P2(a-Y),u=P2(k-m),v=P2(P2(P2(s*E)+P2(l*w))+P2(B*u)),(w=P2(P2(P2(G*E)+P2(C*w))+P2(h*u)))>=P2(0)&&v<=w?(A=X2[r+4>>2],X2[i>>2]=X2[r>>2],X2[i+4>>2]=A,r=X2[(e=r+8|0)+4>>2],X2[(A=i+8|0)>>2]=X2[e>>2],X2[A+4>>2]=r,S2[i+16|0]=2|N,Q=P2(1),E=P2(0),P2(0)):(u=P2(P2(Q*v)-P2(w*n)),w<=P2(0)&&Q>=P2(0)&&(E=P2(0),u<=P2(0))?(X2[i+12>>2]=0,S2[i+16|0]=3|N,Q=P2(Q/P2(Q-w)),U2[i+8>>2]=c+P2(h*Q),U2[i+4>>2]=o+P2(C*Q),U2[i>>2]=t+P2(G*Q),P2(P2(1)-Q)):(E=P2(b-d),a=P2(a-Z),k=P2(k-_),b=P2(P2(P2(G*E)+P2(C*a))+P2(h*k)),(E=P2(P2(P2(s*E)+P2(l*a))+P2(B*k)))>=P2(0)&&b<=E?(A=X2[f+4>>2],X2[i>>2]=X2[f>>2],X2[i+4>>2]=A,r=X2[(e=f+8|0)+4>>2],X2[(A=i+8|0)>>2]=X2[e>>2],X2[A+4>>2]=r,S2[i+16|0]=4|N,E=P2(1),Q=P2(0),P2(0)):(a=P2(P2(b*n)-P2(Q*E)),E<=P2(0)&&n>=P2(0)&&(Q=P2(0),a<=P2(0))?(X2[i+12>>2]=0,S2[i+16|0]=5|N,E=P2(n/P2(n-E)),U2[i+8>>2]=c+P2(B*E),U2[i+4>>2]=o+P2(l*E),U2[i>>2]=t+P2(s*E),P2(P2(1)-E)):(Q=P2(P2(w*E)-P2(b*v)),(n=P2(b-E))>=P2(0)&&(E=P2(v-w))>=P2(0)&&Q<=P2(0)?(X2[i+12>>2]=0,S2[i+16|0]=6|N,E=P2(E/P2(E+n)),U2[i+8>>2]=m+P2(P2(_-m)*E),U2[i+4>>2]=Y+P2(P2(Z-Y)*E),U2[i>>2]=F+P2(P2(d-F)*E),Q=P2(P2(1)-E),P2(0)):(X2[i+12>>2]=0,S2[i+16|0]=7|N,Q=P2(P2(1)/P2(u+P2(Q+a))),E=P2(u*Q),Q=P2(a*Q),U2[i+8>>2]=P2(B*E)+P2(c+P2(h*Q)),U2[i+4>>2]=P2(l*E)+P2(o+P2(C*Q)),U2[i>>2]=P2(s*E)+P2(t+P2(G*Q)),P2(P2(P2(1)-Q)-E))))))),U2[g+20>>2]=w,X2[i+32>>2]=0,U2[i+28>>2]=E,U2[i+24>>2]=Q;}function I1(A,e,r,f,i){A|=0,e|=0,r|=0,f|=0,i|=0;var a,n,b,t,o,c,k,u,x,y,V,p,M,S,X,J,U,H,P,j,z,O,K,L,q,$,A2,e2,r2,f2,i2,a2,n2,b2,t2,s=0,l=0,B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=0,g=P2(0),E=P2(0),Q=P2(0),w=P2(0),G=P2(0),C=P2(0),h=P2(0),F=0,Y=P2(0),m=P2(0),N=P2(0),R=P2(0),D=P2(0),T=P2(0),W=0,I=(P2(0),P2(0),P2(0),0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);for(K2=i=K2-208|0,X2[A+56>>2]=0,X2[(s=i+200|0)>>2]=0,X2[s+4>>2]=0,X2[i+192>>2]=0,X2[i+196>>2]=0,a=X2[(l=e+8|0)+4>>2],X2[(s=i+136|0)>>2]=X2[l>>2],X2[s+4>>2]=a,a=X2[(l=e+24|0)+4>>2],X2[(s=i+152|0)>>2]=X2[l>>2],X2[s+4>>2]=a,a=X2[(l=e+40|0)+4>>2],X2[(s=i+168|0)>>2]=X2[l>>2],X2[s+4>>2]=a,_=X2[4+(a=e+56|0)>>2],X2[(s=i+184|0)>>2]=X2[a>>2],X2[s+4>>2]=_,l=X2[e+4>>2],X2[i+128>>2]=X2[e>>2],X2[i+132>>2]=l,l=X2[e+20>>2],X2[i+144>>2]=X2[e+16>>2],X2[i+148>>2]=l,l=X2[e+36>>2],X2[i+160>>2]=X2[e+32>>2],X2[i+164>>2]=l,l=X2[e+52>>2],X2[i+176>>2]=X2[e+48>>2],X2[i+180>>2]=l,F=X2[(_=e+120|0)+4>>2],X2[(l=i+120|0)>>2]=X2[_>>2],X2[l+4>>2]=F,F=X2[(_=e+72|0)+4>>2],X2[(a=i+72|0)>>2]=X2[_>>2],X2[4+a>>2]=F,F=X2[(_=e+88|0)+4>>2],X2[(a=i+88|0)>>2]=X2[_>>2],X2[4+a>>2]=F,F=X2[(_=e+104|0)+4>>2],X2[(a=i+104|0)>>2]=X2[_>>2],X2[4+a>>2]=F,a=X2[e+68>>2],X2[i+64>>2]=X2[e+64>>2],X2[i+68>>2]=a,_=X2[4+(a=e+80|0)>>2],X2[i+80>>2]=X2[a>>2],X2[i+84>>2]=_,_=X2[4+(a=e+96|0)>>2],X2[i+96>>2]=X2[a>>2],X2[i+100>>2]=_,_=X2[4+(a=e+112|0)>>2],X2[i+112>>2]=X2[a>>2],X2[i+116>>2]=_,B=U2[(a=i+116|0)>>2],Q=U2[(_=i+180|0)>>2],w=U2[i+112>>2],v=U2[i+176>>2],G=U2[s>>2],d=U2[l>>2],n=P2(P2(G+d)*P2(.5)),U2[s>>2]=G-n,b=P2(P2(Q+B)*P2(.5)),U2[_>>2]=Q-b,t=P2(P2(v+w)*P2(.5)),U2[i+176>>2]=v-t,U2[l>>2]=d-n,U2[a>>2]=B-b,U2[i+112>>2]=w-t,k=X2[X2[A+28>>2]+4>>2]-17>>>0<=1?X2[X2[A+32>>2]+4>>2]-17>>>0<2:0,X2[A+68>>2]=0,X2[A+4>>2]=0,X2[A+8>>2]=1065353216,X2[A+60>>2]=-1,X2[A+64>>2]=0,X2[(s=A+12|0)>>2]=0,X2[s+4>>2]=0,X2[6364]=X2[6364]+1,s=X2[A+24>>2],S2[s+312|0]=0,S2[s+356|0]=1,u=J2[A+52|0],C=U2[A+48>>2],Y=U2[A+44>>2],X2[(l=s+336|0)>>2]=0,X2[l+4>>2]=0,X2[(l=s+300|0)>>2]=1566444395,X2[l+4>>2]=0,X2[s+292>>2]=1566444395,X2[s+296>>2]=1566444395,X2[(l=s+344|0)>>2]=0,X2[l+4>>2]=0,S2[s+352|0]=0,X2[s>>2]=0,S2[0|(s=s+332|0)]=240&J2[0|s],a=A+4|0,v=P2(0xde0b6b000000000);;){X2[i+60>>2]=0,w=U2[A+8>>2],G=P2(-w),B=U2[A+4>>2],Q=U2[A+12>>2],U2[i+56>>2]=P2(P2(U2[e+24>>2]*G)-P2(B*U2[e+8>>2]))-P2(Q*U2[e+40>>2]),U2[i+52>>2]=P2(P2(U2[e+20>>2]*G)-P2(B*U2[e+4>>2]))-P2(Q*U2[e+36>>2]),U2[i+48>>2]=P2(P2(U2[e+16>>2]*G)-P2(B*U2[e>>2]))-P2(Q*U2[e+32>>2]),X2[i+44>>2]=0,U2[i+40>>2]=P2(P2(B*U2[e+72>>2])+P2(w*U2[e+88>>2]))+P2(Q*U2[e+104>>2]),U2[i+36>>2]=P2(P2(B*U2[e+68>>2])+P2(w*U2[e+84>>2]))+P2(Q*U2[e+100>>2]),U2[i+32>>2]=P2(P2(B*U2[e+64>>2])+P2(w*U2[e+80>>2]))+P2(Q*U2[e+96>>2]),w0(i+16|0,X2[A+28>>2],i+48|0),w0(i,X2[A+32>>2],i+32|0);A:{if(G=U2[i+16>>2],d=U2[i+20>>2],w=U2[i+24>>2],h=P2(P2(P2(P2(G*U2[i+128>>2])+P2(d*U2[i+132>>2]))+P2(w*U2[i+136>>2]))+U2[i+176>>2]),Z=U2[i>>2],E=U2[i+4>>2],g=U2[i+8>>2],m=P2(P2(P2(P2(Z*U2[i+64>>2])+P2(E*U2[i+68>>2]))+P2(g*U2[i+72>>2]))+U2[i+112>>2]),Q=P2(h-m),R=P2(P2(P2(P2(G*U2[i+144>>2])+P2(d*U2[i+148>>2]))+P2(w*U2[i+152>>2]))+U2[i+180>>2]),D=P2(P2(P2(P2(Z*U2[i+80>>2])+P2(E*U2[i+84>>2]))+P2(g*U2[i+88>>2]))+U2[i+116>>2]),B=P2(R-D),T=P2(k?0:P2(P2(P2(G*U2[i+160>>2])+P2(d*U2[i+164>>2]))+P2(w*U2[i+168>>2]))+U2[i+184>>2]),Z=P2(k?0:P2(P2(P2(Z*U2[i+96>>2])+P2(E*U2[i+100>>2]))+P2(g*U2[i+104>>2]))+U2[i+120>>2]),d=P2(T-Z),(G=P2(P2(P2(Q*U2[A+4>>2])+P2(B*U2[A+8>>2]))+P2(d*U2[A+12>>2])))>P2(0)&&P2(G*G)>P2(v*U2[e+128>>2]))X2[A+68>>2]=10;else {s=X2[A+24>>2];e:if((0|(W=X2[s>>2]))<1)F=0;else for(l=s+12|0,w=U2[s+308>>2],_=0,F=1;;){if(E=P2(Q-U2[l-8>>2]),g=P2(E*E),E=P2(B-U2[l-4>>2]),g=P2(g+P2(E*E)),E=P2(d-U2[l>>2]),P2(g+P2(E*E))<=w)break e;if(l=l+16|0,F=(0|(_=_+1|0))<(0|W),(0|_)==(0|W))break;}e:{r:{if(U2[s+304>>2]==P2(0)&&d==U2[s+300>>2]&&B==U2[s+296>>2]){if(U2[s+292>>2]==Q|F)break r;break e;}if(!F)break e;}X2[A+68>>2]=I=1,l=0;break A;}if((E=P2(v-G))<=P2(v*P2(9.999999974752427e-7)))X2[A+68>>2]=E<=P2(0)?2:11;else if(X2[s+304>>2]=0,U2[s+296>>2]=B,U2[s+300>>2]=d,S2[s+356|0]=1,U2[s+292>>2]=Q,X2[(l=s+(W<<4)|0)+16>>2]=0,U2[l+8>>2]=B,U2[l+12>>2]=d,U2[l+4>>2]=Q,l=s+(X2[s>>2]<<4)|0,X2[l+96>>2]=0,U2[l+88>>2]=R,U2[l+92>>2]=T,U2[l+84>>2]=h,l=s+(X2[s>>2]<<4)|0,X2[l+176>>2]=0,U2[l+168>>2]=D,U2[l+172>>2]=Z,U2[l+164>>2]=m,X2[s>>2]=X2[s>>2]+1,T1(s=X2[A+24>>2])){if(w=U2[s+288>>2],B=U2[s+276>>2],d=U2[s+280>>2],Z=U2[s+284>>2],!((Q=P2(P2(P2(B*B)+P2(d*d))+P2(Z*Z)))<P2(9.999999974752427e-7))){P2(v-Q)<=P2(v*P2(1.1920928955078125e-7))?(X2[A+68>>2]=12,I=1,l=0):(U2[A+16>>2]=w,U2[A+12>>2]=Z,U2[A+8>>2]=d,U2[A+4>>2]=B,s=X2[A+64>>2],X2[A+64>>2]=s+1,1e3<((l=0)|s)||(4!=X2[X2[A+24>>2]>>2]?l=1:X2[A+68>>2]=13)),v=Q;break A;}X2[A+68>>2]=6,U2[A+16>>2]=w,U2[A+12>>2]=Z,U2[A+8>>2]=d,U2[A+4>>2]=B;}else X2[A+68>>2]=3;}I=1,l=0;}if(!l)break;}B=P2(0),d=u?P2(0):C,Z=P2((u?P2(0):Y)+d),l=_=0,I&&(T1(s=X2[A+24>>2]),W=X2[(F=8+a|0)+4>>2],X2[(l=i+200|0)>>2]=X2[F>>2],X2[l+4>>2]=W,l=X2[4+a>>2],X2[i+192>>2]=X2[a>>2],X2[i+196>>2]=l,G=U2[s+268>>2],w=U2[s+264>>2],Q=U2[s+260>>2],E=U2[A+4>>2],g=U2[A+8>>2],C=U2[A+12>>2],(B=P2(P2(P2(E*E)+P2(g*g))+P2(C*C)))<P2(9.999999974752427e-7)&&(X2[A+68>>2]=5),s=1,B=(l=B>P2(14210854715202004e-30))?(B=P2(P2(1)/P2(O2(B))),U2[i+192>>2]=B*U2[i+192>>2],U2[i+196>>2]=B*U2[i+196>>2],U2[i+200>>2]=B*U2[i+200>>2],v=P2(d/P2(O2(v))),G=P2(P2(v*C)+G),w=P2(P2(v*g)+w),Q=P2(P2(v*E)+Q),P2(P2(P2(1)/B)-Z)):(s=2,P2(0)),X2[A+60>>2]=s),X2[A+72>>2]&&X2[A+20>>2]&&X2[A+68>>2]&&(_=P2(Z+B)<P2(.0010000000474974513));A:{e:{if((1^l||_)&&(s=X2[A+20>>2])){if(X2[a>>2]=0,X2[4+a>>2]=0,X2[(_=8+a|0)>>2]=0,X2[_+4>>2]=0,X2[6365]=X2[6365]+1,0|N2[X2[X2[s>>2]+8>>2]](s,X2[A+24>>2],X2[A+28>>2],X2[A+32>>2],i+128|0,i- -64|0,a,i+48|0,i+32|0,f)){if(v=P2(0),d=U2[i+32>>2],g=U2[i+48>>2],C=P2(d-g),Z=U2[i+36>>2],R=U2[i+52>>2],Y=P2(Z-R),E=U2[i+40>>2],D=U2[i+56>>2],h=P2(E-D),(m=P2(P2(P2(C*C)+P2(Y*Y))+P2(h*h)))<=P2(14210854715202004e-30)&&(C=U2[A+4>>2],Y=U2[A+8>>2],h=U2[A+12>>2],m=P2(P2(P2(C*C)+P2(Y*Y))+P2(h*h)),v=U2[A+16>>2]),m>P2(14210854715202004e-30)){if(X2[A+60>>2]=3,g=P2(g-d),N=P2(g*g),g=P2(R-Z),N=P2(N+P2(g*g)),g=P2(D-E),!(!((g=P2(-P2(O2(P2(N+P2(g*g))))))<B)&l)){U2[i+204>>2]=v,B=P2(P2(1)/P2(O2(m))),U2[i+200>>2]=h*B,U2[i+196>>2]=Y*B,U2[i+192>>2]=C*B,Q=d,w=Z,G=E,B=g;break e;}X2[A+60>>2]=8;break e;}if(X2[A+60>>2]=9,l)break e;break A;}if(E=U2[A+4>>2],g=U2[A+8>>2],C=U2[A+12>>2],P2(P2(P2(E*E)+P2(g*g))+P2(C*C))>P2(0)){if(Y=U2[i+32>>2],v=P2(U2[i+48>>2]-Y),N=P2(v*v),h=U2[i+36>>2],v=P2(U2[i+52>>2]-h),N=P2(N+P2(v*v)),m=U2[i+40>>2],v=P2(U2[i+56>>2]-m),!(!((v=P2(P2(O2(P2(N+P2(v*v))))-Z))<B)&l)){_=X2[(l=8+a|0)+4>>2],X2[(s=f=i+200|0)>>2]=X2[l>>2],X2[s+4>>2]=_,X2[A+60>>2]=6,s=X2[4+a>>2],X2[i+192>>2]=X2[a>>2],X2[i+196>>2]=s,Q=U2[i+192>>2],w=U2[i+196>>2],G=U2[f>>2],B=P2(P2(1)/P2(O2(P2(P2(P2(Q*Q)+P2(w*w))+P2(G*G))))),U2[f>>2]=G*B,U2[i+192>>2]=Q*B,U2[i+196>>2]=w*B,G=P2(P2(d*C)+m),w=P2(P2(d*g)+h),Q=P2(P2(d*E)+Y),B=v;break e;}X2[A+60>>2]=5;break e;}}if(!l)break A;}(U2[e+128>>2]>P2(B*B)||B<P2(0))&&(f=X2[i+196>>2],X2[a>>2]=X2[i+192>>2],X2[4+a>>2]=f,U2[A+56>>2]=B,l=X2[(f=i+200|0)+4>>2],X2[(s=8+a|0)>>2]=X2[f>>2],X2[s+4>>2]=l,X2[i+60>>2]=0,v=U2[i+192>>2],Z=U2[i+196>>2],d=U2[f>>2],U2[i+56>>2]=P2(P2(v*U2[e+8>>2])+P2(Z*U2[e+24>>2]))+P2(d*U2[e+40>>2]),U2[i+52>>2]=P2(P2(v*U2[e+4>>2])+P2(Z*U2[e+20>>2]))+P2(d*U2[e+36>>2]),U2[i+48>>2]=P2(P2(v*U2[e>>2])+P2(Z*U2[e+16>>2]))+P2(d*U2[e+32>>2]),X2[i+44>>2]=0,Z=P2(-Z),U2[i+40>>2]=P2(P2(U2[e+88>>2]*Z)-P2(v*U2[e+72>>2]))-P2(d*U2[e+104>>2]),U2[i+36>>2]=P2(P2(U2[e+84>>2]*Z)-P2(v*U2[e+68>>2]))-P2(d*U2[e+100>>2]),U2[i+32>>2]=P2(P2(U2[e+80>>2]*Z)-P2(v*U2[e+64>>2]))-P2(d*U2[e+96>>2]),w0(i+16|0,X2[A+28>>2],i+48|0),w0(i,X2[A+32>>2],i+32|0),v=U2[f>>2],V=U2[i+184>>2],p=U2[i+168>>2],M=U2[i+160>>2],S=U2[i+164>>2],X=U2[i+120>>2],J=U2[i+104>>2],U=U2[i+96>>2],H=U2[i+100>>2],P=U2[i+180>>2],j=U2[i+152>>2],z=U2[i+144>>2],O=U2[i+148>>2],K=U2[i+116>>2],L=U2[i+88>>2],q=U2[i+80>>2],$=U2[i+84>>2],A2=U2[i+176>>2],e2=U2[i+136>>2],E=U2[i+24>>2],r2=U2[i+128>>2],g=U2[i+16>>2],f2=U2[i+132>>2],C=U2[i+20>>2],i2=U2[i+112>>2],a2=U2[i+72>>2],Y=U2[i+8>>2],n2=U2[i+64>>2],h=U2[i>>2],b2=U2[i+68>>2],m=U2[i+4>>2],Z=U2[i+196>>2],d=U2[i+192>>2],X2[i+60>>2]=0,R=P2(-Z),U2[i+56>>2]=P2(P2(U2[e+24>>2]*R)-P2(d*U2[e+8>>2]))-P2(v*U2[e+40>>2]),U2[i+52>>2]=P2(P2(U2[e+20>>2]*R)-P2(d*U2[e+4>>2]))-P2(v*U2[e+36>>2]),U2[i+48>>2]=P2(P2(U2[e+16>>2]*R)-P2(d*U2[e>>2]))-P2(v*U2[e+32>>2]),X2[i+44>>2]=0,U2[i+40>>2]=P2(P2(d*U2[e+72>>2])+P2(Z*U2[e+88>>2]))+P2(v*U2[e+104>>2]),U2[i+36>>2]=P2(P2(d*U2[e+68>>2])+P2(Z*U2[e+84>>2]))+P2(v*U2[e+100>>2]),U2[i+32>>2]=P2(P2(d*U2[e+64>>2])+P2(Z*U2[e+80>>2]))+P2(v*U2[e+96>>2]),w0(i+16|0,X2[A+28>>2],i+48|0),w0(i,X2[A+32>>2],i+32|0),Z=U2[i+16>>2],D=U2[i+20>>2],T=U2[i+24>>2],o=U2[i>>2],c=U2[i+4>>2],N=U2[i+8>>2],x=U2[i+192>>2],y=U2[i+196>>2],t2=P2(P2(P2(P2(P2(P2(P2(Z*U2[i+128>>2])+P2(D*U2[i+132>>2]))+P2(T*U2[i+136>>2]))+U2[i+176>>2])-P2(P2(P2(P2(o*U2[i+64>>2])+P2(c*U2[i+68>>2]))+P2(N*U2[i+72>>2]))+U2[i+112>>2]))*x)+P2(P2(P2(P2(P2(P2(Z*U2[i+144>>2])+P2(D*U2[i+148>>2]))+P2(T*U2[i+152>>2]))+U2[i+180>>2])-P2(P2(P2(P2(o*U2[i+80>>2])+P2(c*U2[i+84>>2]))+P2(N*U2[i+88>>2]))+U2[i+116>>2]))*y)),N=P2(P2(P2(P2(P2(Z*U2[i+160>>2])+P2(D*U2[i+164>>2]))+P2(T*U2[i+168>>2]))+U2[i+184>>2])-P2(P2(P2(P2(o*U2[i+96>>2])+P2(c*U2[i+100>>2]))+P2(N*U2[i+104>>2]))+U2[i+120>>2])),Z=U2[f>>2],P2(t2+P2(N*Z))<P2(P2(P2(P2(P2(P+P2(P2(P2(g*z)+P2(C*O))+P2(E*j)))-P2(K+P2(P2(P2(h*q)+P2(m*$))+P2(Y*L))))*R)-P2(d*P2(P2(A2+P2(P2(P2(g*r2)+P2(C*f2))+P2(E*e2)))-P2(i2+P2(P2(P2(h*n2)+P2(m*b2))+P2(Y*a2))))))-P2(v*P2(P2(V+P2(P2(P2(g*M)+P2(C*S))+P2(E*p)))-P2(X+P2(P2(P2(h*U)+P2(m*H))+P2(Y*J))))))&&(X2[A+60>>2]=10,U2[i+200>>2]=-Z,U2[i+196>>2]=-y,U2[i+192>>2]=-x),X2[i+60>>2]=0,U2[i+56>>2]=n+G,U2[i+52>>2]=b+w,U2[i+48>>2]=t+Q,N2[X2[X2[r>>2]+16>>2]](r,i+192|0,i+48|0,B));}K2=i+208|0;}function x1(A,e,r,f,i,a,n,b,t,o,c){var k;P2(0),P2(0);return r=P2(P2(P2(r*a)+P2(f*n))+P2(i*b)),f=P2(P2(P2(U2[A>>2]*a)+P2(U2[A+16>>2]*n))+P2(U2[A+32>>2]*b)),i=U2[t+80>>2],k=P2(f*(f<P2(0)?P2(-i):i)),f=P2(P2(P2(U2[A+4>>2]*a)+P2(U2[A+20>>2]*n))+P2(U2[A+36>>2]*b)),i=U2[t+84>>2],k=P2(k+P2(f*(f<P2(0)?P2(-i):i))),f=P2(P2(P2(U2[A+8>>2]*a)+P2(U2[A+24>>2]*n))+P2(U2[A+40>>2]*b)),i=U2[t+88>>2],f=P2(k+P2(f*(f<P2(0)?P2(-i):i))),k=(i=U2[t+96>>2])<f?f:i,f=P2(P2(P2(U2[e>>2]*a)+P2(U2[e+16>>2]*n))+P2(U2[e+32>>2]*b)),i=U2[o+80>>2],A=P2(f*(f<P2(0)?P2(-i):i)),f=P2(P2(P2(U2[e+4>>2]*a)+P2(U2[e+20>>2]*n))+P2(U2[e+36>>2]*b)),i=U2[o+84>>2],A=P2(A+P2(f*(f<P2(0)?P2(-i):i))),f=P2(P2(P2(U2[e+8>>2]*a)+P2(U2[e+24>>2]*n))+P2(U2[e+40>>2]*b)),i=U2[o+88>>2],f=P2(A+P2(f*(f<P2(0)?P2(-i):i))),i=U2[o+96>>2],f=P2(k+(i<f?f:i)),!(c<((i=P2(r+f))<(r=P2(f-r))?i:r));}function y1(A,e,r,f,i,x,y,V){var a,n,b,p,M,S,X,J,U,H,P,j,z,O,t,o=0,c=0,k=0,u=0,s=P2(0),l=0,B=P2(0),v=P2(0),d=0,Z=P2(0),_=0,g=P2(0),E=P2(0),Q=P2(0),w=0,G=P2(0),C=P2(0),h=P2(0),F=0,Y=P2(0),m=P2(0),N=P2(0),R=P2(0),D=P2(0),T=0,W=P2(0),I=P2(0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);if(K2=t=K2-16|0,(0|(o=X2[i+4>>2]))<=-1)for(X2[i+8>>2]<=-1&&((k=X2[i+12>>2])&&J2[i+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[k-4>>2])),S2[i+16|0]=1,X2[i+8>>2]=0,X2[i+12>>2]=0),c=o<<4;;)if(F=X2[4+t>>2],k=X2[i+12>>2]+c|0,X2[k>>2]=X2[t>>2],X2[k+4>>2]=F,F=X2[(d=8+t|0)+4>>2],X2[(k=k+8|0)>>2]=X2[d>>2],X2[k+4>>2]=F,c=c+16|0,!((k=o)>>>0<=(o=o+1|0)>>>0))break;if(((X2[i+4>>2]=c=0)|(k=X2[f+4>>2]))>X2[i+8>>2]&&(k&&(X2[6258]=X2[6258]+1,(o=L2(19+(k<<4)|0))&&(X2[(c=o+19&-16)-4>>2]=o)),(o=X2[i+12>>2])&&J2[i+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[o-4>>2])),X2[i+12>>2]=c,S2[i+16|0]=1,X2[i+8>>2]=k),!((0|(F=X2[e+28>>2]))<1)){for(o=(a=X2[e+36>>2])+28|0,s=U2[r+40>>2],Y=U2[r+36>>2],Z=U2[r+24>>2],v=U2[r+20>>2],m=U2[A+8>>2],N=U2[A+4>>2],W=U2[A>>2],h=U2[r+32>>2],Q=U2[r+16>>2],g=U2[r+8>>2],E=U2[r+4>>2],G=U2[r>>2],c=0,B=P2(34028234663852886e22),d=-1;;)if(C=U2[o-8>>2],R=U2[o-4>>2],D=U2[o>>2],B=(k=(C=P2(P2(P2(P2(P2(P2(C*G)+P2(R*E))+P2(D*g))*W)+P2(P2(P2(P2(C*Q)+P2(R*v))+P2(D*Z))*N))+P2(P2(P2(P2(C*h)+P2(R*Y))+P2(D*s))*m)))<B)?C:B,d=k?c:d,o=o+36|0,(0|F)==(0|(c=c+1|0)))break;if(!((0|d)<0)){if(a=a+H2(d,36)|0,1<=(0|(M=X2[4+a>>2])))for(P=28+a|0,j=24+a|0,z=20+a|0,O=12+a|0,c=0;;){if(S=(0|(F=c+1|0))==(0|M),2<=(0|(d=X2[(k=f)+4>>2]))){for(o=X2[O>>2],f=X2[o+(c<<2)>>2]<<4,c=X2[e+16>>2],B=U2[(f=f+c|0)>>2],o=c+(X2[o+((S?0:F)<<2)>>2]<<4)|0,m=P2(B-U2[o>>2]),C=U2[f+4>>2],N=P2(C-U2[o+4>>2]),R=U2[f+8>>2],W=P2(R-U2[o+8>>2]),X=P2(P2(P2(m*h)+P2(N*Y))+P2(W*s)),n=U2[z>>2],b=U2[j>>2],p=U2[P>>2],J=P2(P2(P2(G*n)+P2(E*b))+P2(g*p)),U=P2(P2(P2(m*G)+P2(N*E))+P2(W*g)),H=P2(P2(P2(h*n)+P2(Y*b))+P2(s*p)),D=P2(-P2(P2(X*J)-P2(U*H))),I=P2(P2(P2(P2(P2(B*Q)+P2(C*v))+P2(R*Z))+U2[r+52>>2])*D),N=P2(P2(P2(m*Q)+P2(N*v))+P2(W*Z)),Z=P2(P2(P2(Q*n)+P2(v*b))+P2(Z*p)),m=P2(P2(N*H)-P2(X*Z)),Q=P2(I-P2(m*P2(P2(P2(P2(B*G)+P2(C*E))+P2(R*g))+U2[r+48>>2]))),G=P2(P2(U*Z)-P2(N*J)),C=P2(Q-P2(G*P2(P2(P2(P2(B*h)+P2(C*Y))+P2(R*s))+U2[r+56>>2]))),o=X2[k+12>>2],B=U2[(f=(o+(d<<4)|0)-16|0)+4>>2],Z=U2[f>>2],v=U2[f+8>>2],s=P2(P2(P2(P2(B*D)-P2(m*Z))-P2(G*v))-C),T=0;;){h=U2[(f=(T<<4)+o|0)+4>>2],Q=U2[f>>2],g=U2[f+8>>2],E=P2(P2(P2(P2(h*D)-P2(m*Q))-P2(G*g))-C),Y=U2[f+12>>2];A:{if(s<P2(0)){if(E<P2(0)){if((0|(c=X2[i+4>>2]))==X2[i+8>>2]&&!((0|(_=c?c<<1:1))<=(0|c))){if(f=0,_&&(X2[6258]=X2[6258]+1,(o=L2(19+(_<<4)|0))&&(X2[(f=o+19&-16)-4>>2]=o)),1<=(0|c))for(o=0;;)if(l=X2[i+12>>2]+o|0,w=X2[l+4>>2],X2[(u=f+o|0)>>2]=X2[l>>2],X2[u+4>>2]=w,w=X2[(l=l+8|0)+4>>2],X2[(u=u+8|0)>>2]=X2[l>>2],X2[u+4>>2]=w,o=o+16|0,!(c=c-1|0))break;(o=X2[i+12>>2])&&J2[i+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[o-4>>2])),X2[i+12>>2]=f,S2[i+16|0]=1,X2[i+8>>2]=_,c=X2[i+4>>2];}f=X2[i+12>>2]+(c<<4)|0,U2[f+8>>2]=g,U2[f+4>>2]=h,U2[f>>2]=Q;}else {if(s=P2(s/P2(s-E)),v=P2(v+P2(P2(g-v)*s)),B=P2(B+P2(P2(h-B)*s)),s=P2(Z+P2(P2(Q-Z)*s)),(0|(c=X2[i+4>>2]))==X2[i+8>>2]&&!((0|(_=c?c<<1:1))<=(0|c))){if(f=0,_&&(X2[6258]=X2[6258]+1,(o=L2(19+(_<<4)|0))&&(X2[(f=o+19&-16)-4>>2]=o)),1<=(0|c))for(o=0;;)if(l=X2[i+12>>2]+o|0,w=X2[l+4>>2],X2[(u=f+o|0)>>2]=X2[l>>2],X2[u+4>>2]=w,w=X2[(l=l+8|0)+4>>2],X2[(u=u+8|0)>>2]=X2[l>>2],X2[u+4>>2]=w,o=o+16|0,!(c=c-1|0))break;(o=X2[i+12>>2])&&J2[i+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[o-4>>2])),X2[i+12>>2]=f,S2[i+16|0]=1,X2[i+8>>2]=_,c=X2[i+4>>2];}f=X2[i+12>>2]+(c<<4)|0,U2[f+8>>2]=v,U2[f+4>>2]=B,U2[f>>2]=s,Y=P2(0);}}else {if(!(E<P2(0)))break A;if(s=P2(s/P2(s-E)),v=P2(v+P2(P2(g-v)*s)),B=P2(B+P2(P2(h-B)*s)),s=P2(Z+P2(P2(Q-Z)*s)),(0|(c=X2[i+4>>2]))==X2[i+8>>2]&&!((0|(_=c?c<<1:1))<=(0|c))){if(f=0,_&&(X2[6258]=X2[6258]+1,(o=L2(19+(_<<4)|0))&&(X2[(f=o+19&-16)-4>>2]=o)),1<=(0|c))for(o=0;;)if(l=X2[i+12>>2]+o|0,w=X2[l+4>>2],X2[(u=f+o|0)>>2]=X2[l>>2],X2[u+4>>2]=w,w=X2[(l=l+8|0)+4>>2],X2[(u=u+8|0)>>2]=X2[l>>2],X2[u+4>>2]=w,o=o+16|0,!(c=c-1|0))break;(o=X2[i+12>>2])&&J2[i+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[o-4>>2])),X2[i+12>>2]=f,S2[i+16|0]=1,X2[i+8>>2]=_,c=X2[i+4>>2];}if(f=X2[i+12>>2]+(c<<4)|0,X2[f+12>>2]=0,U2[f+8>>2]=v,U2[f+4>>2]=B,U2[f>>2]=s,c=X2[i+4>>2],X2[i+4>>2]=o=c+1|0,X2[i+8>>2]==(0|o)&&!((0|(_=o?o<<1:1))<=(0|o))){if(f=0,_&&(X2[6258]=X2[6258]+1,(o=L2(19+(_<<4)|0))&&(X2[(f=o+19&-16)-4>>2]=o)),0<=(0|c))for(c=c+1|0,o=0;;)if(l=X2[i+12>>2]+o|0,w=X2[l+4>>2],X2[(u=f+o|0)>>2]=X2[l>>2],X2[u+4>>2]=w,w=X2[(l=l+8|0)+4>>2],X2[(u=u+8|0)>>2]=X2[l>>2],X2[u+4>>2]=w,o=o+16|0,!(c=c-1|0))break;(o=X2[i+12>>2])&&J2[i+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[o-4>>2])),X2[i+12>>2]=f,S2[i+16|0]=1,X2[i+8>>2]=_,o=X2[i+4>>2];}f=X2[i+12>>2]+(o<<4)|0,U2[f+8>>2]=g,U2[f+4>>2]=h,U2[f>>2]=Q;}U2[(f=f+12|0)>>2]=Y,X2[i+4>>2]=X2[i+4>>2]+1;}if((0|(T=T+1|0))==(0|d))break;o=X2[k+12>>2],s=E,v=g,B=h,Z=Q;}d=X2[k+4>>2];}if((0|d)<=-1)for(X2[k+8>>2]<=-1&&((f=X2[k+12>>2])&&J2[k+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),S2[k+16|0]=1,X2[k+8>>2]=0,X2[k+12>>2]=0),o=d<<4;;)if(c=X2[4+t>>2],f=X2[k+12>>2]+o|0,X2[f>>2]=X2[t>>2],X2[f+4>>2]=c,T=X2[(c=8+t|0)+4>>2],X2[(f=f+8|0)>>2]=X2[c>>2],X2[f+4>>2]=T,o=o+16|0,!((f=d)>>>0<=(d=f+1|0)>>>0))break;if(X2[k+4>>2]=0,s=U2[r+40>>2],Y=U2[r+36>>2],h=U2[r+32>>2],Z=U2[r+24>>2],v=U2[r+20>>2],Q=U2[r+16>>2],g=U2[r+8>>2],E=U2[r+4>>2],G=U2[r>>2],f=i,c=F,i=k,S)break;}if(!((0|(d=X2[f+4>>2]))<1))for(B=U2[20+a>>2],I=P2(B*G),G=U2[24+a>>2],I=P2(I+P2(G*E)),E=U2[28+a>>2],g=P2(I+P2(E*g)),Z=P2(P2(P2(B*Q)+P2(G*v))+P2(E*Z)),s=P2(P2(P2(B*h)+P2(G*Y))+P2(E*s)),B=P2(U2[32+a>>2]-P2(P2(P2(g*U2[r+48>>2])+P2(Z*U2[r+52>>2]))+P2(s*U2[r+56>>2]))),c=o=0;;)if(r=(e=X2[f+12>>2]+o|0)+8|0,o=o+16|0,(v=(v=P2(B+P2(P2(P2(g*U2[e>>2])+P2(Z*U2[e+4>>2]))+P2(s*U2[r>>2]))))<=x?x:v)<=y&&(k=X2[r+4>>2],X2[(i=8+t|0)>>2]=X2[r>>2],X2[i+4>>2]=k,r=X2[e+4>>2],X2[t>>2]=X2[e>>2],X2[4+t>>2]=r,N2[X2[X2[V>>2]+16>>2]](V,A,t,v),d=X2[f+4>>2]),!((0|(c=c+1|0))<(0|d)))break;}}K2=16+t|0;}function V1(A,e,r,f,i,a){A|=0,e|=0,r|=0,f|=0,i|=0,a|=0;var n,b,t,o,c,k,u,s,l,B,v,d,Z=0,_=P2(0),g=P2(0),E=P2(0),Q=P2(0),w=P2(0),G=P2(0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);K2=d=K2-288|0,n=X2[A+4>>2],X2[n+292>>2]=1566444395,X2[n+296>>2]=1566444395,X2[(Z=n+336|0)>>2]=0,X2[Z+4>>2]=0,X2[(Z=n+300|0)>>2]=1566444395,X2[Z+4>>2]=0,X2[(Z=n+344|0)>>2]=0,X2[Z+4>>2]=0,S2[n+352|0]=0,S2[0|(Z=n+332|0)]=240&J2[0|Z],S2[n+312|0]=0,S2[n+356|0]=1,X2[n>>2]=0,_=U2[r+52>>2],g=U2[e+52>>2],Q=U2[i+52>>2],w=U2[f+52>>2],G=U2[r+56>>2],E=U2[(b=e+56|0)>>2],o=U2[i+56>>2],c=U2[(t=f+56|0)>>2],k=U2[r+48>>2],u=U2[e+48>>2],s=U2[i+48>>2],l=U2[f+48>>2],S2[264+d|0]=0,X2[260+d>>2]=1566444395,X2[224+d>>2]=15108,X2[(n=156+d|0)>>2]=0,X2[4+n>>2]=0,X2[144+d>>2]=14952,X2[164+d>>2]=0,X2[148+d>>2]=0,X2[152+d>>2]=1065353216,n=X2[A+12>>2],X2[176+d>>2]=n,Z=X2[A+8>>2],X2[172+d>>2]=Z,X2[168+d>>2]=X2[A+4>>2],X2[180+d>>2]=X2[Z+4>>2],X2[184+d>>2]=X2[n+4>>2],B=d,v=P2(N2[X2[X2[Z>>2]+48>>2]](Z)),U2[188+B>>2]=v,B=P2(N2[X2[X2[n>>2]+48>>2]](n)),X2[216+d>>2]=1,X2[220+d>>2]=1,X2[204+d>>2]=-1,S2[196+d|0]=0,U2[192+d>>2]=B,Z=X2[4+(n=e+8|0)>>2],X2[(A=16+d|0)>>2]=X2[n>>2],X2[A+4>>2]=Z,Z=X2[4+(n=e+24|0)>>2],X2[(A=32+d|0)>>2]=X2[n>>2],X2[A+4>>2]=Z,Z=X2[4+(n=e+40|0)>>2],X2[(A=48+d|0)>>2]=X2[n>>2],X2[A+4>>2]=Z,n=X2[4+b>>2],X2[(A=d+64|0)>>2]=X2[b>>2],X2[A+4>>2]=n,Z=X2[4+(n=f+8|0)>>2],X2[(A=80+d|0)>>2]=X2[n>>2],X2[A+4>>2]=Z,X2[136+d>>2]=1566444395,A=X2[e+4>>2],X2[8+d>>2]=X2[e>>2],X2[12+d>>2]=A,A=X2[e+20>>2],X2[24+d>>2]=X2[e+16>>2],X2[28+d>>2]=A,A=X2[e+36>>2],X2[40+d>>2]=X2[e+32>>2],X2[44+d>>2]=A,A=X2[e+52>>2],X2[56+d>>2]=X2[e+48>>2],X2[60+d>>2]=A,A=X2[f+4>>2],X2[72+d>>2]=X2[f>>2],X2[76+d>>2]=A,Z=X2[4+(n=f+24|0)>>2],X2[(A=96+d|0)>>2]=X2[n>>2],X2[A+4>>2]=Z,n=X2[f+20>>2],X2[(A=88+d|0)>>2]=X2[f+16>>2],X2[A+4>>2]=n,Z=X2[4+(n=f+40|0)>>2],X2[(A=112+d|0)>>2]=X2[n>>2],X2[A+4>>2]=Z,n=X2[f+36>>2],X2[(A=104+d|0)>>2]=X2[f+32>>2],X2[A+4>>2]=n,n=X2[4+t>>2],X2[(A=128+d|0)>>2]=X2[t>>2],X2[A+4>>2]=n,n=X2[f+52>>2],X2[(A=120+d|0)>>2]=X2[f+48>>2],X2[A+4>>2]=n,I1(144+d|0,8+d|0,224+d|0,0,0),Z=X2[4+(n=252+d|0)>>2],X2[(A=280+d|0)>>2]=X2[n>>2],X2[A+4>>2]=Z,A=X2[248+d>>2],X2[272+d>>2]=X2[244+d>>2],X2[276+d>>2]=A;A:if(J2[264+d|(A=0)]){o=P2(P2(G-E)-P2(o-c)),c=P2(P2(_-g)-P2(Q-w)),k=P2(P2(k-u)-P2(s-l)),Q=U2[236+d>>2],w=U2[232+d>>2],G=U2[228+d>>2];e:{if((E=U2[260+d>>2])>P2(.0010000000474974513))for(n=244+d|0,Z=33,g=P2(0);;){if(!(Z=Z-1|(A=0)))break A;if(A=0,(_=P2(g-P2(E/P2(P2(P2(k*G)+P2(c*w))+P2(o*Q)))))<=g)break A;if(A=0,_>P2(1))break A;if(_<P2(A=0))break A;if(N2[X2[X2[a>>2]>>2]](a,_),g=P2(P2(1)-_),U2[56+d>>2]=P2(g*U2[e+48>>2])+P2(_*U2[r+48>>2]),U2[60+d>>2]=P2(g*U2[e+52>>2])+P2(_*U2[r+52>>2]),U2[64+d>>2]=P2(g*U2[e+56>>2])+P2(_*U2[r+56>>2]),U2[120+d>>2]=P2(g*U2[f+48>>2])+P2(_*U2[i+48>>2]),U2[124+d>>2]=P2(g*U2[f+52>>2])+P2(_*U2[i+52>>2]),U2[128+d>>2]=P2(g*U2[f+56>>2])+P2(_*U2[i+56>>2]),I1(144+d|0,8+d|0,224+d|0,0,0),!J2[264+d|(A=0)])break A;if((E=U2[260+d>>2])<P2(0)){U2[a+164>>2]=_,A=X2[232+d>>2],X2[a+132>>2]=X2[228+d>>2],X2[a+136>>2]=A,e=X2[240+d>>2],X2[(A=a+140|0)>>2]=X2[236+d>>2],X2[A+4>>2]=e,A=X2[4+n>>2],X2[a+148>>2]=X2[n>>2],X2[a+152>>2]=A,r=X2[(e=8+n|0)+4>>2],X2[(A=a+156|0)>>2]=X2[e>>2],X2[A+4>>2]=r;break e;}if(t=X2[4+(b=8+n|0)>>2],X2[(A=280+d|0)>>2]=X2[b>>2],X2[A+4>>2]=t,A=X2[4+n>>2],X2[272+d>>2]=X2[n>>2],X2[276+d>>2]=A,Q=U2[236+d>>2],w=U2[232+d>>2],G=U2[228+d>>2],g=_,!(E>P2(.0010000000474974513)))break;}else _=P2(0);if(g=U2[240+d>>2],A=0,P2(-U2[a+172>>2])<=P2(P2(P2(k*G)+P2(c*w))+P2(o*Q)))break A;U2[a+132>>2]=G,U2[a+164>>2]=_,A=X2[276+d>>2],X2[a+148>>2]=X2[272+d>>2],X2[a+152>>2]=A,U2[a+144>>2]=g,U2[a+140>>2]=Q,U2[a+136>>2]=w,r=X2[(e=280+d|0)+4>>2],X2[(A=a+156|0)>>2]=X2[e>>2],X2[A+4>>2]=r;}A=1;}return K2=288+d|0,0|A;}function p1(A,e,r,f,i,a,n,b,t,o,c){var k,u=P2(0),s=P2(0),l=P2(0),B=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),U2[(b=(b<<2)+o|0)>>2]),v=P2(U2[o+48>>2]-U2[t+48>>2]),d=U2[b+16>>2],Z=P2(U2[o+52>>2]-U2[t+52>>2]),b=U2[b+32>>2],_=P2(U2[o+56>>2]-U2[t+56>>2]),l=P2(P2(P2(B*v)+P2(d*Z))+P2(b*_)),t=U2[(n=(n<<2)+t|0)>>2],g=U2[n+16>>2],n=U2[n+32>>2],E=P2(P2(P2(t*v)+P2(g*Z))+P2(n*_)),Q=P2(P2(P2(t*B)+P2(g*d))+P2(n*b));(s=P2(P2(1)-P2(Q*Q)))!=P2(0)&&(u=P2(-r),(s=P2(P2(E-P2(Q*l))/s))<u||r<(u=s)&&(u=r));A:{if((s=P2(P2(Q*u)-l))<(l=P2(-i))){if(u=P2(-r),(i=P2(E-P2(Q*i)))<u){s=l;break A;}if(!(r<i)){s=l,u=i;break A;}i=l;}else {if(!(i<s))break A;if(u=P2(-r),(l=P2(P2(Q*i)+E))<u){s=i;break A;}if(!(r<l)){s=i,u=l;break A;}}s=i,u=r;}return k=c,l=P2(b*s),r=P2(l+P2(_-P2(n*u))),Q=P2(B*s),i=P2(Q+P2(v-P2(t*u))),s=P2(d*s),c=P2(s+P2(Z-P2(g*u))),u=P2(P2(r*r)+P2(P2(i*i)+P2(c*c))),E=P2(O2(u)),k<(B=P2(P2(E-f)-a))||(u<=P2(14210854715202004e-30)?P2(j2(n))>P2(.7071067690849304)?(X2[A>>2]=0,f=P2(P2(1)/P2(O2(P2(P2(g*g)+P2(n*n))))),r=P2(g*f),U2[A+8>>2]=r,u=P2(f*P2(-n)),U2[A+4>>2]=u,f=P2(0)):(X2[A+8>>2]=0,r=P2(P2(1)/P2(O2(P2(P2(t*t)+P2(g*g))))),u=P2(t*r),U2[A+4>>2]=u,f=P2(r*P2(-g)),U2[A>>2]=f,r=P2(0)):(X2[A+12>>2]=0,f=P2(P2(-1)/E),r=P2(r*f),U2[A+8>>2]=r,u=P2(c*f),U2[A+4>>2]=u,f=P2(i*f),U2[A>>2]=f),i=U2[o+48>>2],c=U2[o+52>>2],g=U2[o+56>>2],X2[e+12>>2]=0,U2[e+8>>2]=P2(l+g)+P2(r*a),U2[e+4>>2]=P2(s+c)+P2(u*a),U2[e>>2]=P2(Q+i)+P2(f*a)),B;}function M1(A,e,r,f){P2(f);}function S1(A,e,r,f,i,a){A|=0,e|=0,r|=0,f|=0,i|=0,a|=0;var n,b,t,o,c,x,y,V,p,M,S,X,J,U,H,P,j,z,O,K,L,q,$,A2,e2,r2,f2,i2,a2,n2,k,u=0,s=P2(0),l=0,B=P2(0),v=0,d=P2(0),Z=(P2(0),P2(0)),_=P2(0),g=P2(0),E=0,Q=P2(0),w=P2(0),G=P2(0),C=P2(0),h=0,F=(P2(0),P2(0),P2(0)),Y=P2(0),m=0,N=P2(0),R=(P2(0),P2(0)),D=(P2(0),P2(0)),T=P2(0),W=P2(0),I=P2(0),b2=(P2(0),P2(0),P2(0),P2(0)),t2=P2(0),o2=(P2(0),P2(0)),c2=P2(0),k2=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0)),u2=P2(0),s2=P2(0),l2=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0));K2=k=K2-32|0,v=X2[A+4>>2],S2[v+312|0]=0,S2[v+356|0]=1,X2[v>>2]=0,X2[v+292>>2]=1566444395,X2[v+296>>2]=1566444395,X2[(u=v+336|0)>>2]=0,X2[u+4>>2]=0,X2[(u=v+300|0)>>2]=1566444395,X2[u+4>>2]=0,X2[(u=v+344|0)>>2]=0,X2[u+4>>2]=0,S2[v+352|0]=0,S2[0|(u=v+332|0)]=240&J2[0|u],O=U2[(x=f+40|0)>>2],K=U2[(y=f+36|0)>>2],L=U2[(V=f+24|0)>>2],q=U2[(p=f+20|0)>>2],M=U2[($=e+20|0)>>2],S=U2[(A2=e+36|0)>>2],X=U2[(l=e+24|0)>>2],d=U2[r+52>>2],b2=U2[(E=e+52|0)>>2],Q=U2[i+52>>2],t2=U2[(h=f+52|0)>>2],J=U2[(m=e+40|0)>>2],R=U2[r+56>>2],o2=U2[(v=e+56|0)>>2],Z=U2[i+56>>2],c2=U2[(u=f+56|0)>>2],e2=U2[f+32>>2],r2=U2[f+16>>2],f2=U2[f+8>>2],i2=U2[f+4>>2],a2=U2[f>>2],U=U2[e>>2],H=U2[e+16>>2],P=U2[e+32>>2],j=U2[e+4>>2],z=U2[e+8>>2],s=U2[r+48>>2],k2=U2[e+48>>2],_=U2[i+48>>2],u2=U2[f+48>>2],n2=X2[A+8>>2],X2[12+k>>2]=0,c=P2(P2(d-b2)-P2(Q-t2)),Q=P2(-c),b=P2(P2(s-k2)-P2(_-u2)),t=P2(P2(R-o2)-P2(Z-c2)),U2[8+k>>2]=P2(P2(X*Q)-P2(z*b))-P2(J*t),U2[4+k>>2]=P2(P2(M*Q)-P2(b*j))-P2(t*S),U2[k>>2]=P2(P2(H*Q)-P2(b*U))-P2(t*P),N2[X2[X2[n2>>2]+64>>2]](16+k|0,n2,k),g=U2[v>>2],D=U2[m>>2],T=U2[A2>>2],W=U2[E>>2],I=U2[l>>2],F=U2[$>>2],Y=U2[e+32>>2],n=U2[e+48>>2],B=U2[e+8>>2],d=U2[e>>2],Z=U2[e+4>>2],s=U2[e+16>>2],G=U2[24+k>>2],C=U2[16+k>>2],N=U2[20+k>>2],v=X2[A+12>>2],X2[12+k>>2]=0,U2[8+k>>2]=P2(P2(b*U2[f+8>>2])+P2(c*U2[V>>2]))+P2(t*U2[x>>2]),U2[4+k>>2]=P2(P2(b*U2[f+4>>2])+P2(c*U2[p>>2]))+P2(t*U2[y>>2]),U2[k>>2]=P2(P2(b*U2[f>>2])+P2(c*U2[f+16>>2]))+P2(t*U2[f+32>>2]),N2[X2[X2[v>>2]+64>>2]](16+k|0,v,k),Q=P2(0),R=P2(0),_=P2(0);A:{e:if(B=P2(n+P2(P2(P2(C*d)+P2(N*Z))+P2(G*B))),o=U2[16+k>>2],n=U2[20+k>>2],Z=U2[24+k>>2],B=P2(B-P2(P2(P2(P2(o*U2[f>>2])+P2(n*U2[f+4>>2]))+P2(Z*U2[f+8>>2]))+U2[f+48>>2])),d=P2(P2(W+P2(P2(P2(C*s)+P2(N*F))+P2(G*I)))-P2(P2(P2(P2(o*U2[f+16>>2])+P2(n*U2[p>>2]))+P2(Z*U2[V>>2]))+U2[h>>2])),s=P2(P2(g+P2(P2(P2(C*Y)+P2(N*T))+P2(G*D)))-P2(P2(P2(P2(o*U2[f+32>>2])+P2(n*U2[y>>2]))+P2(Z*U2[x>>2]))+U2[u>>2])),P2(P2(P2(B*B)+P2(d*d))+P2(s*s))>P2(9999999747378752e-20))for(v=31,Z=P2(0);;){if(u=X2[A+8>>2],X2[12+k>>2]=E=0,n=P2(-d),U2[8+k>>2]=P2(P2(X*n)-P2(z*B))-P2(J*s),U2[4+k>>2]=P2(P2(M*n)-P2(j*B))-P2(S*s),U2[k>>2]=P2(P2(H*n)-P2(U*B))-P2(P*s),N2[X2[X2[u>>2]+64>>2]](16+k|0,u,k),N=U2[24+k>>2],o=U2[16+k>>2],F=U2[20+k>>2],u=X2[A+12>>2],X2[12+k>>2]=0,U2[8+k>>2]=P2(P2(f2*B)+P2(L*d))+P2(O*s),U2[4+k>>2]=P2(P2(i2*B)+P2(q*d))+P2(K*s),U2[k>>2]=P2(P2(a2*B)+P2(r2*d))+P2(e2*s),N2[X2[X2[u>>2]+64>>2]](16+k|0,u,k),w>P2(1))break A;if(D=P2(k2+P2(P2(P2(U*o)+P2(j*F))+P2(z*N))),g=U2[16+k>>2],Y=U2[20+k>>2],n=U2[24+k>>2],T=P2(u2+P2(P2(P2(a2*g)+P2(i2*Y))+P2(f2*n))),G=P2(D-T),W=P2(b2+P2(P2(P2(H*o)+P2(M*F))+P2(X*N))),I=P2(t2+P2(P2(P2(r2*g)+P2(q*Y))+P2(L*n))),C=P2(W-I),F=P2(o2+P2(P2(P2(P*o)+P2(S*F))+P2(J*N))),Y=P2(c2+P2(P2(P2(e2*g)+P2(K*Y))+P2(O*n))),g=P2(F-Y),(n=P2(P2(P2(G*B)+P2(C*d))+P2(g*s)))>P2(0)){if((_=P2(P2(P2(b*B)+P2(c*d))+P2(t*s)))>=P2(-14210854715202004e-30))break A;w=P2(w-P2(n/_)),_=P2(P2(1)-w),c2=P2(P2(_*U2[f+56>>2])+P2(w*U2[i+56>>2])),t2=P2(P2(_*U2[f+52>>2])+P2(w*U2[i+52>>2])),u2=P2(P2(_*U2[f+48>>2])+P2(w*U2[i+48>>2])),o2=P2(P2(_*U2[e+56>>2])+P2(w*U2[r+56>>2])),b2=P2(P2(_*U2[e+52>>2])+P2(w*U2[r+52>>2])),k2=P2(P2(_*U2[e+48>>2])+P2(w*U2[r+48>>2])),Q=B,R=d,s2=s,_=Z;}l=X2[A+4>>2];r:if((0|(u=X2[l>>2]))<1)m=0;else for(h=l+12|0,Z=U2[l+308>>2],m=1;;){if(s=P2(G-U2[h-8>>2]),B=P2(s*s),s=P2(C-U2[h-4>>2]),B=P2(B+P2(s*s)),s=P2(g-U2[h>>2]),Z>=P2(B+P2(s*s)))break r;if(h=h+16|0,m=(0|(E=E+1|0))<(0|u),(0|u)==(0|E))break;}r:{if(U2[l+304>>2]==P2(0)&&g==U2[l+300>>2]&&C==U2[l+296>>2]){if(G==U2[l+292>>2]|m)break r;}else if(m)break r;X2[l+304>>2]=0,U2[l+296>>2]=C,U2[l+300>>2]=g,S2[l+356|0]=1,U2[l+292>>2]=G,X2[(u=(u<<4)+l|0)+16>>2]=0,U2[u+8>>2]=C,U2[u+12>>2]=g,U2[u+4>>2]=G,u=(X2[l>>2]<<4)+l|0,X2[u+96>>2]=0,U2[u+88>>2]=W,U2[u+92>>2]=F,U2[u+84>>2]=D,u=(X2[l>>2]<<4)+l|0,X2[u+176>>2]=0,U2[u+168>>2]=I,U2[u+172>>2]=Y,U2[u+164>>2]=T,X2[l>>2]=X2[l>>2]+1,l=X2[A+4>>2];}if(!T1(l))break e;if(B=U2[l+276>>2],d=U2[l+280>>2],s=U2[l+284>>2],!(P2(P2(P2(B*B)+P2(d*d))+P2(s*s))>P2(9999999747378752e-20)))break e;if(!v)break e;Z=U2[l+288>>2],v=v-1|0;}U2[a+164>>2]=w,B=P2(0),d=P2(0),s=P2(0),(Z=P2(P2(P2(Q*Q)+P2(R*R))+P2(s2*s2)))>=P2(14210854715202004e-30)&&(s=P2(P2(1)/P2(O2(Z))),d=P2(s2*s),B=P2(R*s),l2=P2(Q*s),s=_),U2[a+132>>2]=l2,U2[a+144>>2]=s,U2[a+140>>2]=d,U2[a+136>>2]=B,E=0,P2(-U2[a+172>>2])<=P2(P2(P2(b*l2)+P2(c*B))+P2(t*d))||(T1(A=X2[A+4>>2]),i=X2[A+260>>2],f=X2[A+264>>2],A=X2[(e=A+268|0)+4>>2],X2[(r=a+156|0)>>2]=X2[e>>2],X2[r+4>>2]=A,X2[a+148>>2]=i,X2[a+152>>2]=f,E=1);}return K2=32+k|0,0|E;}function X1(A){return 2;}function J1(A){return 3;}function U1(A){return 1;}function H1(A,e,r){var f,i,a,n,b,t=0,o=0,c=0,k=0;if(K2=b=K2-32|0,n=J2[A+68|0],a=X2[(i=n?r:e)+4>>2],f=X2[a+24>>2],(0|(k=X2[A+52>>2]))<(0|f)){if(X2[A+56>>2]<(0|f)){if(f&&(X2[6258]=X2[6258]+1,(t=L2(19+(f<<2)|0))&&(X2[(c=t+19&-16)-4>>2]=t)),1<=(0|k))for(t=k;;)if(X2[o+c>>2]=X2[X2[A+60>>2]+o>>2],o=o+4|0,!(t=t-1|0))break;(t=X2[A+60>>2])&&J2[A- -64|0]&&(X2[6259]=X2[6259]+1,q2(X2[t-4>>2])),X2[A+60>>2]=c,X2[A+56>>2]=f,S2[A- -64|0]=1;}for(o=k<<2,t=f-k|0;;)if(o=o+4|(X2[X2[A+60>>2]+o>>2]=0),!(t=t-1|0))break;}if(1<=(0|(X2[A+52>>2]=f)))for(e=n?e:r,t=64,c=o=0;;)if(X2[a+72>>2]?X2[X2[A+60>>2]+o>>2]=0:(r=X2[X2[a+32>>2]+t>>2],X2[28+b>>2]=c,X2[24+b>>2]=-1,X2[8+b>>2]=i,k=X2[i+12>>2],X2[16+b>>2]=X2[i+8>>2],X2[20+b>>2]=k,X2[12+b>>2]=r,r=X2[A+4>>2],r=0|N2[X2[X2[r>>2]+8>>2]](r,8+b|0,e,X2[A+72>>2],1),X2[X2[A+60>>2]+o>>2]=r),t=t+80|0,o=o+4|0,(0|(c=c+1|0))==(0|f))break;K2=32+b|0;}function P1(A){var e,r=0,f=0;if(X2[(A|=0)>>2]=16500,1<=(0|(f=X2[A+52>>2])))for(;;)if((e=X2[X2[A+60>>2]+r>>2])&&(N2[X2[X2[e>>2]>>2]](e),e=X2[A+4>>2],N2[X2[X2[e>>2]+60>>2]](e,X2[X2[A+60>>2]+r>>2])),r=r+4|0,!(f=f-1|0))break;return (r=X2[A+60>>2])&&J2[A- -64|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+60>>2]=0,X2[A+52>>2]=0,X2[A+56>>2]=0,S2[A- -64|0]=1,(r=X2[A+40>>2])&&J2[A+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+40>>2]=0,S2[A+44|0]=1,X2[(r=A+32|0)>>2]=0,X2[r+4>>2]=0,(r=X2[A+20>>2])&&J2[A+24|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+20>>2]=0,S2[A+24|0]=1,X2[(r=A+12|0)>>2]=0,(X2[r+4>>2]=0)|A;}function j1(A,e,r,f,i){A|=0,e|=0,r|=0,f|=0,i|=0;var a,n,b,x,y,V,p,t,o=0,c=0,k=0,u=P2(0),s=P2(0),l=P2(0),B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=P2(0),g=P2(0),E=P2(0),Q=P2(0),w=P2(0),G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=P2(0),R=P2(0),D=P2(0),T=P2(0),W=P2(0),I=P2(0);if(K2=t=K2-160|0,a=J2[A+68|0],n=X2[(b=a?r:e)+4>>2],X2[n+76>>2]!=X2[A+80>>2]){if(1<=(0|(k=X2[A+52>>2])))for(;;)if((c=X2[X2[A+60>>2]+o>>2])&&(N2[X2[X2[c>>2]>>2]](c),c=X2[A+4>>2],N2[X2[X2[c>>2]+60>>2]](c,X2[X2[A+60>>2]+o>>2])),o=o+4|0,!(k=k-1|0))break;H1(A,e,r),X2[A+80>>2]=X2[n+76>>2];}if(c=X2[A+52>>2]){if(k=X2[n+72>>2],X2[148+t>>2]=i,X2[144+t>>2]=f,X2[136+t>>2]=a=a?e:r,X2[132+t>>2]=b,X2[128+t>>2]=16540,X2[156+t>>2]=X2[A+72>>2],X2[152+t>>2]=X2[A+60>>2],X2[140+t>>2]=X2[A+4>>2],(0|(o=X2[A+32>>2]))<=-1){for(X2[A+36>>2]<=-1&&((e=X2[A+40>>2])&&J2[A+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+36>>2]=0,X2[A+40>>2]=0,S2[A+44|0]=1),c=o<<2;;)if(c=c+4|(X2[X2[A+40>>2]+c>>2]=0),!((e=o)>>>0<=(o=e+1|0)>>>0))break;c=X2[A+52>>2];}if(1<=((X2[A+32>>2]=0)|c))for(V=A+28|0,r=0;;){if(e=X2[X2[A+60>>2]+(r<<2)>>2]){if(N2[X2[X2[e>>2]+16>>2]](e,V),1<=(0|(o=X2[A+32>>2])))for(e=c=0;;)if(f=X2[X2[A+40>>2]+c>>2],X2[f+844>>2]&&(X2[i+4>>2]=f,x=X2[X2[i+8>>2]+8>>2],y=X2[f+836>>2],p=f,f=X2[X2[i+12>>2]+8>>2],R2(p,((o=(0|x)==(0|y))?y:f)+4|0,(o?f:x)+4|0),X2[i+4>>2]=0,o=X2[A+32>>2]),c=c+4|0,!((0|(e=e+1|0))<(0|o)))break;if((0|o)<=-1)for(X2[A+36>>2]<=-1&&((e=X2[A+40>>2])&&J2[A+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),S2[A+44|0]=1,X2[A+36>>2]=0,X2[A+40>>2]=0),c=o<<2;;)if(c=c+4|(X2[X2[A+40>>2]+c>>2]=0),!((e=o)>>>0<=(o=e+1|0)>>>0))break;X2[A+32>>2]=0,c=X2[A+52>>2];}if(!((0|(r=r+1|0))<(0|c)))break;}if(k){if(e=X2[b+12>>2],E=U2[e+52>>2],Q=U2[e+56>>2],r=X2[a+12>>2],w=U2[r+52>>2],G=U2[r+56>>2],u=U2[e+20>>2],s=U2[e+36>>2],C=U2[r+20>>2],h=U2[r+36>>2],F=U2[r+24>>2],l=U2[e+24>>2],Y=U2[r+40>>2],B=U2[e+40>>2],m=U2[r+32>>2],v=U2[e+32>>2],N=U2[r>>2],d=U2[e>>2],R=U2[r+16>>2],Z=U2[e+16>>2],D=U2[e+48>>2],T=U2[r+48>>2],_=U2[e+4>>2],W=U2[r+4>>2],I=U2[r+8>>2],g=U2[e+8>>2],X2[92+t>>2]=0,X2[76+t>>2]=0,X2[60+t>>2]=0,U2[72+t>>2]=P2(P2(g*I)+P2(l*F))+P2(B*Y),U2[68+t>>2]=P2(P2(g*W)+P2(l*C))+P2(B*h),U2[56+t>>2]=P2(P2(_*I)+P2(u*F))+P2(s*Y),U2[52+t>>2]=P2(P2(_*W)+P2(u*C))+P2(s*h),E=P2(-E),U2[88+t>>2]=P2(P2(P2(l*E)-P2(g*D))-P2(B*Q))+P2(P2(P2(g*T)+P2(l*w))+P2(B*G)),U2[84+t>>2]=P2(P2(P2(u*E)-P2(_*D))-P2(s*Q))+P2(P2(P2(_*T)+P2(u*w))+P2(s*G)),X2[44+t>>2]=0,U2[32+t>>2]=P2(P2(d*N)+P2(Z*R))+P2(v*m),U2[64+t>>2]=P2(P2(g*N)+P2(l*R))+P2(B*m),U2[48+t>>2]=P2(P2(_*N)+P2(u*R))+P2(s*m),U2[40+t>>2]=P2(P2(d*I)+P2(Z*F))+P2(v*Y),U2[36+t>>2]=P2(P2(d*W)+P2(Z*C))+P2(v*h),U2[80+t>>2]=P2(P2(P2(Z*E)-P2(d*D))-P2(v*Q))+P2(P2(P2(d*T)+P2(Z*w))+P2(v*G)),e=X2[a+4>>2],N2[X2[X2[e>>2]+8>>2]](e,32+t|0,112+t|0,96+t|0),u=U2[i+32>>2],s=P2(U2[112+t>>2]-u),U2[112+t>>2]=s,l=P2(U2[116+t>>2]-u),U2[116+t>>2]=l,B=P2(U2[120+t>>2]-u),U2[120+t>>2]=B,v=P2(u+U2[96+t>>2]),U2[96+t>>2]=v,d=P2(u+U2[100+t>>2]),U2[100+t>>2]=d,u=P2(u+U2[104+t>>2]),U2[104+t>>2]=u,f=X2[k>>2]){if(e=X2[A+16>>2],(0|(o=X2[A+12>>2]))<=-1)for((0|e)<=-1&&((e=X2[A+20>>2])&&J2[A+24|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+16>>2]=0,X2[A+20>>2]=0,S2[A+24|0]=1,e=0),c=o<<2;;)if(c=c+4|(X2[X2[A+20>>2]+c>>2]=0),!((r=o)>>>0<=(o=r+1|0)>>>0))break;if(((X2[A+12>>2]=o=0)|e)<=63&&(X2[6258]=X2[6258]+1,c=0,(e=L2(275))&&(X2[(c=e+19&-16)-4>>2]=e),(e=X2[A+20>>2])&&J2[A+24|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]),o=X2[A+12>>2]),X2[A+20>>2]=c,X2[A+16>>2]=64,S2[A+24|0]=1,e=64),(0|e)==(0|o))if((0|(i=e<<1))<=(0|e))o=e;else {for(o=0,X2[6258]=X2[6258]+1,(r=L2(19+(e<<3)|(k=0)))&&(X2[(k=r+19&-16)-4>>2]=r),c=e;;)if(X2[o+k>>2]=X2[X2[A+20>>2]+o>>2],o=o+4|0,!(c=c-1|0))break;(r=X2[A+20>>2])&&J2[A+24|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2]),e=X2[A+12>>2]),o=e,X2[A+20>>2]=k,X2[A+16>>2]=i,S2[A+24|0]=1;}for(X2[X2[A+20>>2]+(o<<2)>>2]=f,o=o+1|0;;){if(X2[A+12>>2]=c=o-1|0,i=X2[A+20>>2],f=X2[i+(c<<2)>>2],v>=U2[f>>2]){if(s<=U2[f+16>>2]){if(d>=U2[f+4>>2]){if(l<=U2[f+20>>2]){if(u>=U2[f+8>>2]){if(B<=U2[f+24>>2]){if(X2[f+40>>2]){if((0|c)==(0|(r=X2[A+16>>2])))if((0|(r=c?c<<1:1))<(0|o))r=c;else {if(i=0,r&&(X2[6258]=X2[6258]+1,(e=L2(19+(r<<2)|0))&&(X2[(i=e+19&-16)-4>>2]=e)),2<=(0|o))for(e=o-1|0,o=0;;)if(X2[i+o>>2]=X2[X2[A+20>>2]+o>>2],o=o+4|0,!(e=e-1|0))break;(e=X2[A+20>>2])&&J2[A+24|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]),c=X2[A+12>>2]),X2[A+20>>2]=i,S2[A+24|0]=1,X2[A+16>>2]=r;}if(X2[A+12>>2]=e=c+1|0,X2[(c<<2)+i>>2]=X2[f+36>>2],(0|e)==(0|r))if((0|(k=r?r<<1:1))<=(0|r))e=r;else {if(i=0,k&&(X2[6258]=X2[6258]+1,(e=L2(19+(k<<2)|0))&&(X2[(i=e+19&-16)-4>>2]=e)),1<=(0|r))for(o=0,c=r;;)if(X2[i+o>>2]=X2[X2[A+20>>2]+o>>2],o=o+4|0,!(c=c-1|0))break;e=r,(r=X2[A+20>>2])&&J2[A+24|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2]),e=X2[A+12>>2]),X2[A+20>>2]=i,S2[A+24|0]=1,X2[A+16>>2]=k;}X2[A+12>>2]=o=e+1|0,X2[X2[A+20>>2]+(e<<2)>>2]=X2[f+40>>2];}else N2[X2[X2[128+t>>2]+12>>2]](128+t|0,f),o=X2[A+12>>2];}else o=c;}else o=c;}else o=c;}else o=c;}else o=c;}else o=c;if(!(0<(0|o)))break;}}}else if(!((0|c)<1))for(o=0,k=64;;)if(z1(128+t|0,X2[X2[n+32>>2]+k>>2],o),k=k+80|0,(0|c)==(0|(o=o+1|0)))break;if(e=X2[A+52>>2],(0|(o=X2[A+32>>2]))<=-1)for(X2[A+36>>2]<=-1&&((r=X2[A+40>>2])&&J2[A+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+36>>2]=0,X2[A+40>>2]=0,S2[A+44|0]=1),c=o<<2;;)if(c=c+4|(X2[X2[A+40>>2]+c>>2]=0),!((r=o)>>>0<=(o=r+1|0)>>>0))break;if(!(((X2[A+32>>2]=0)|e)<1))for(i=32,k=0;;)if(X2[X2[A+60>>2]+k>>2]&&(r=X2[n+32>>2]+i|0,o=X2[r+32>>2],f=X2[b+12>>2],W=U2[f+52>>2],I=U2[f+56>>2],Q=U2[r+16>>2],w=U2[r+20>>2],G=U2[r+24>>2],u=U2[f+20>>2],s=U2[f+24>>2],C=U2[r-32>>2],h=U2[r-16>>2],F=U2[r>>2],Y=U2[r-28>>2],m=U2[r-12>>2],N=U2[r+4>>2],R=U2[r-24>>2],l=U2[f+36>>2],D=U2[r-8>>2],B=U2[f+40>>2],T=U2[r+8>>2],E=U2[f+48>>2],v=U2[f+8>>2],d=U2[f>>2],Z=U2[f+4>>2],_=U2[f+16>>2],g=U2[f+32>>2],X2[92+t>>2]=c=0,X2[76+t>>2]=0,X2[60+t>>2]=0,X2[44+t>>2]=0,U2[72+t>>2]=P2(P2(g*R)+P2(l*D))+P2(B*T),U2[68+t>>2]=P2(P2(g*Y)+P2(l*m))+P2(B*N),U2[64+t>>2]=P2(P2(g*C)+P2(l*h))+P2(B*F),U2[56+t>>2]=P2(P2(_*R)+P2(u*D))+P2(s*T),U2[52+t>>2]=P2(P2(_*Y)+P2(u*m))+P2(s*N),U2[48+t>>2]=P2(P2(_*C)+P2(u*h))+P2(s*F),U2[40+t>>2]=P2(P2(d*R)+P2(Z*D))+P2(v*T),U2[36+t>>2]=P2(P2(d*Y)+P2(Z*m))+P2(v*N),U2[32+t>>2]=P2(P2(d*C)+P2(Z*h))+P2(v*F),U2[88+t>>2]=I+P2(P2(P2(g*Q)+P2(l*w))+P2(B*G)),U2[84+t>>2]=W+P2(P2(P2(_*Q)+P2(u*w))+P2(s*G)),U2[80+t>>2]=E+P2(P2(P2(d*Q)+P2(Z*w))+P2(v*G)),N2[X2[X2[o>>2]+8>>2]](o,32+t|0,112+t|0,96+t|0),r=X2[a+4>>2],N2[X2[X2[r>>2]+8>>2]](r,X2[a+12>>2],16+t|0,t),r=0,U2[112+t>>2]>U2[t>>2]||(r=0,U2[96+t>>2]<U2[16+t>>2]||(r=1)),U2[120+t>>2]>U2[8+t>>2]||U2[104+t>>2]<U2[24+t>>2]||(c=r),!(U2[100+t>>2]<U2[20+t>>2])&c&&!(U2[116+t>>2]>U2[4+t>>2])||(r=X2[X2[A+60>>2]+k>>2],N2[X2[X2[r>>2]>>2]](r),r=X2[A+4>>2],N2[X2[X2[r>>2]+60>>2]](r,X2[X2[A+60>>2]+k>>2]),X2[X2[A+60>>2]+k>>2]=0)),i=i+80|0,k=k+4|0,!(e=e-1|0))break;}K2=160+t|0;}function z1(A,e,r){var f,i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h,F=0,Y=(P2(0),0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);K2=h=K2-160|0,Y=X2[A+4>>2],F=X2[Y+12>>2],l=U2[F+52>>2],b=U2[F+56>>2],f=U2[F+24>>2],t=U2[F+20>>2],i=U2[F+40>>2],a=U2[F+36>>2],o=X2[X2[Y+4>>2]+32>>2],G=U2[F+48>>2],c=U2[F+8>>2],k=U2[F>>2],u=U2[F+4>>2],s=U2[F+16>>2],n=U2[F+32>>2],X2[156+h>>2]=Y=0,X2[140+h>>2]=0,X2[124+h>>2]=0,F=o+H2(r,80)|0,B=U2[F+8>>2],v=U2[F+24>>2],d=U2[F+40>>2],U2[136+h>>2]=P2(P2(n*B)+P2(a*v))+P2(i*d),Z=U2[F+4>>2],_=U2[F+20>>2],g=U2[F+36>>2],U2[132+h>>2]=P2(P2(n*Z)+P2(a*_))+P2(i*g),U2[120+h>>2]=P2(P2(s*B)+P2(t*v))+P2(f*d),U2[116+h>>2]=P2(P2(s*Z)+P2(t*_))+P2(f*g),E=b,b=U2[F+48>>2],Q=U2[F+52>>2],w=U2[F+56>>2],U2[152+h>>2]=E+P2(P2(P2(n*b)+P2(a*Q))+P2(i*w)),U2[148+h>>2]=l+P2(P2(P2(s*b)+P2(t*Q))+P2(f*w)),X2[108+h>>2]=0,E=n,n=U2[F>>2],l=a,a=U2[F+16>>2],C=i,i=U2[F+32>>2],U2[128+h>>2]=P2(P2(E*n)+P2(l*a))+P2(C*i),U2[112+h>>2]=P2(P2(s*n)+P2(t*a))+P2(f*i),U2[96+h>>2]=P2(P2(k*n)+P2(u*a))+P2(c*i),U2[104+h>>2]=P2(P2(k*B)+P2(u*v))+P2(c*d),U2[100+h>>2]=P2(P2(k*Z)+P2(u*_))+P2(c*g),U2[144+h>>2]=G+P2(P2(P2(k*b)+P2(u*Q))+P2(c*w)),N2[X2[X2[e>>2]+8>>2]](e,96+h|0,80+h|0,h+64|0),f=U2[X2[A+20>>2]+32>>2],U2[80+h>>2]=U2[80+h>>2]-f,U2[84+h>>2]=U2[84+h>>2]-f,U2[88+h>>2]=U2[88+h>>2]-f,U2[64+h>>2]=f+U2[64+h>>2],U2[68+h>>2]=f+U2[68+h>>2],U2[72+h>>2]=f+U2[72+h>>2],F=X2[A+8>>2],o=X2[F+4>>2],N2[X2[X2[o>>2]+8>>2]](o,X2[F+12>>2],48+h|0,32+h|0),F=0,U2[80+h>>2]>U2[32+h>>2]||(F=0,U2[64+h>>2]<U2[48+h>>2]||(F=1)),U2[88+h>>2]>U2[40+h>>2]||U2[72+h>>2]<U2[56+h>>2]||(Y=F),U2[84+h>>2]>U2[36+h>>2]||1^Y|U2[68+h>>2]<U2[52+h>>2]||(X2[28+h>>2]=r,X2[24+h>>2]=-1,X2[12+h>>2]=e,e=X2[A+4>>2],X2[8+h>>2]=e,X2[16+h>>2]=X2[e+8>>2],f=U2[X2[A+20>>2]+32>>2],X2[20+h>>2]=96+h,f>P2(0)?(e=X2[A+12>>2],e=0|N2[X2[X2[e>>2]+8>>2]](e,8+h|0,X2[A+8>>2],0,2)):(e=X2[(F=r<<2)+X2[A+24>>2]>>2])||(e=X2[A+12>>2],e=0|N2[X2[X2[e>>2]+8>>2]](e,8+h|0,X2[A+8>>2],X2[A+28>>2],1),X2[F+X2[A+24>>2]>>2]=e,e=X2[F+X2[A+24>>2]>>2]),F=X2[A+20>>2],Y=X2[F+8>>2],X2[Y+8>>2]==X2[X2[A+4>>2]+8>>2]?(X2[F+8>>2]=8+h,N2[X2[X2[F>>2]+8>>2]](F,-1,r)):(Y=X2[F+12>>2],X2[F+12>>2]=8+h,N2[X2[X2[F>>2]+12>>2]](F,-1,r)),N2[X2[X2[e>>2]+8>>2]](e,8+h|0,X2[A+8>>2],X2[A+16>>2],X2[A+20>>2]),e=X2[A+20>>2],X2[(X2[X2[e+8>>2]+8>>2]==X2[X2[A+4>>2]+8>>2]?8:12)+e>>2]=Y),K2=160+h|0;}function O1(A){var e,r,f,i,a=0,n=0,b=0,t=0,o=0;if(!((0|(e=X2[A+12>>2]))<=(0|(r=X2[A+28>>2])))){A:if(X2[A+32>>2]>=(0|e))b=X2[A+36>>2];else {if(e&&(X2[6258]=X2[6258]+1,(n=L2(19+(e<<2)|0))&&(X2[(b=n+19&-16)-4>>2]=n)),a=X2[A+36>>2],1<=(0|r)){for(n=b,o=a,t=r;;)if(X2[n>>2]=X2[o>>2],n=n+4|0,o=o+4|0,!(t=t-1|0))break;}else if(!a){X2[A+36>>2]=b,X2[A+32>>2]=e,S2[A+40|0]=1;break A;}J2[A+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[a-4>>2])),X2[A+36>>2]=b,S2[A+40|0]=1,X2[A+32>>2]=e;}if(v2((r<<2)+b|0,0,e-r<<2),f=(X2[A+28>>2]=e)<<2,(0|(a=X2[A+48>>2]))<(0|e)){A:if(X2[A+52>>2]>=(0|e))b=X2[A+56>>2];else {if(b=0,e&&(X2[6258]=X2[6258]+1,(n=L2(16+(3|f)|0))&&(X2[(b=n+19&-16)-4>>2]=n)),i=X2[A+56>>2],1<=(0|a)){for(n=b,o=i,t=a;;)if(X2[n>>2]=X2[o>>2],n=n+4|0,o=o+4|0,!(t=t-1|0))break;}else if(!i){X2[A+56>>2]=b,X2[A+52>>2]=e,S2[A+60|0]=1;break A;}J2[A+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+56>>2]=b,S2[A+60|0]=1,X2[A+52>>2]=e;}v2((a<<2)+b|0,0,e-a<<2);}if(1<=(0|(X2[A+48>>2]=e))&&(v2(X2[A+36>>2],255,f),v2(X2[A+56>>2],255,f)),!((0|r)<1))for(o=X2[A+56>>2],n=X2[A+16>>2],b=X2[A+36>>2],t=0;;)if(a=X2[n>>2]|X2[n+4>>2]<<16,a=H2((a=(a<<15^-1)+a|0)>>>10^a,9),a=b+((X2[A+12>>2]-1&((a=((a^=a>>>6)<<11^-1)+a|0)>>>16^a))<<2)|0,X2[o>>2]=X2[a>>2],n=n+12|0,o=o+4|0,(0|r)==(0|(t=(X2[a>>2]=t)+1|0)))break;}}function K1(A){return X2[(A|=0)+16>>2];}function L1(A){var e,r,f,i=0,a=0,n=0;if((i=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+16>>2]=0,S2[A+20|0]=1,X2[(i=A+8|0)>>2]=0,X2[i+4>>2]=0,(i=X2[A+36>>2])&&J2[A+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+36>>2]=0,S2[A+40|0]=1,X2[(i=A+28|0)>>2]=0,X2[i+4>>2]=0,(i=X2[A+56>>2])&&J2[A+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+56>>2]=0,S2[A+60|0]=1,X2[(i=A+48|0)>>2]=0,X2[i+4>>2]=0,X2[A+12>>2]<=1){if(X2[6258]=X2[6258]+1,(i=L2(43))&&(X2[(n=i+19&-16)-4>>2]=i),1<=(0|(a=X2[A+8>>2])))for(i=0;;)if(e=X2[A+16>>2]+i|0,f=X2[4+e>>2],X2[(r=i+n|0)>>2]=X2[e>>2],X2[4+r>>2]=f,X2[8+r>>2]=X2[8+e>>2],i=i+12|0,!(a=a-1|0))break;(i=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+16>>2]=n,S2[A+20|0]=1,X2[A+12>>2]=2;}O1(A);}function q1(A){var e,r,f=0,i=0,a=0;if(X2[(A|=0)>>2]=16708,f=X2[A+84>>2],1<=(0|(i=X2[f+(a=8)>>2]))){for(;;)if((e=X2[X2[f+16>>2]+a>>2])&&(N2[X2[X2[e>>2]>>2]](e),r=X2[A+4>>2],N2[X2[X2[r>>2]+60>>2]](r,e)),a=a+12|0,!(i=i-1|0))break;f=X2[A+84>>2];}return L1(f),f=X2[A+84>>2],N2[X2[X2[f>>2]>>2]](f),(f=X2[A+84>>2])&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),(f=X2[A+100>>2])&&J2[A+104|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+100>>2]=0,S2[A+104|0]=1,X2[(f=A+92|0)>>2]=0,X2[f+4>>2]=0,P1(A),0|A;}function $1(A,e,r,f,i){return P2(P2(1));}function A4(A,e){A|=0,e|=0;var r,f=0,i=0,a=0,n=0;if((a=X2[A+12>>2])&&J2[A+8|0]){if((0|(i=X2[e+4>>2]))==X2[e+8>>2]&&!((0|(r=i?i<<1:1))<=(0|i))){if(r&&(X2[6258]=X2[6258]+1,(f=L2(19+(r<<2)|0))&&(X2[(n=f+19&-16)-4>>2]=f)),1<=(0|i))for(a=0,f=i;;)if(X2[a+n>>2]=X2[X2[e+12>>2]+a>>2],a=a+4|0,!(f=f-1|0))break;(f=X2[e+12>>2])&&J2[e+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2]),i=X2[e+4>>2]),X2[e+12>>2]=n,S2[e+16|0]=1,X2[e+8>>2]=r,a=X2[A+12>>2];}X2[e+4>>2]=i+1,X2[X2[e+12>>2]+(i<<2)>>2]=a;}}function e4(A,e,r,f,i){A|=0,e|=0,r|=0,f|=0,i|=0;var a,n,b,t,o=P2(0),c=P2(0),k=P2(0),u=P2(0),s=P2(0),l=P2(0),B=P2(0),v=P2(0),d=P2(0),Z=0,_=P2(0),g=P2(0),E=P2(0),Q=P2(0),w=P2(0),G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=P2(0),R=P2(0),D=0;P2(0),P2(0),P2(0);K2=f=K2-32|0,Z=X2[A+8>>2],G=U2[Z+80>>2],k=U2[Z+64>>2],s=P2(G-k),E=U2[Z+100>>2],l=U2[Z+68>>2],o=P2(E-l),C=U2[Z+84>>2],d=P2(C-l),Y=U2[Z+96>>2],u=P2(Y-k),v=P2(P2(s*o)-P2(d*u)),w=U2[Z+104>>2],m=U2[Z+72>>2],c=P2(w-m),R=U2[Z+88>>2],_=P2(R-m),o=P2(P2(d*c)-P2(_*o)),u=P2(P2(_*u)-P2(s*c)),c=P2(P2(v*v)+P2(P2(o*o)+P2(u*u)));A:if(c>=P2(14210854715202004e-30)&&(D=X2[A+4>>2],N=P2(U2[D+36>>2]*U2[D+20>>2]),B=P2(N+U2[A+12>>2]),c=P2(P2(1)/P2(O2(c))),o=P2(o*c),g=P2(U2[e+48>>2]-U2[e+112>>2]),Q=P2(U2[e+52>>2]-U2[e+116>>2]),a=P2(U2[e+56>>2]-U2[e+120>>2]),h=P2(P2(P2(g*U2[e+64>>2])+P2(Q*U2[e+80>>2]))+P2(a*U2[e+96>>2])),b=P2(h-k),u=P2(u*c),F=P2(P2(P2(g*U2[e+68>>2])+P2(Q*U2[e+84>>2]))+P2(a*U2[e+100>>2])),t=P2(F-l),v=P2(v*c),g=P2(P2(P2(g*U2[e+72>>2])+P2(Q*U2[e+88>>2]))+P2(a*U2[e+104>>2])),Q=P2(g-m),(c=P2(P2(P2(o*b)+P2(u*t))+P2(v*Q)))<P2(0)&&(v=P2(-v),u=P2(-u),c=P2(-c),o=P2(-o)),c<B)){s=P2(P2(Q*P2(P2(s*u)-P2(d*o)))+P2(P2(b*P2(P2(d*v)-P2(_*u)))+P2(t*P2(P2(_*o)-P2(s*v))))),d=P2(Y-G),_=P2(E-C),Q=P2(P2(g-R)*P2(P2(d*u)-P2(_*o))),a=P2(_*v),_=P2(w-R),d=P2(Q+P2(P2(P2(h-G)*P2(a-P2(_*u)))+P2(P2(F-C)*P2(P2(_*o)-P2(d*v)))));e:{r:{if(k=P2(k-Y),l=P2(l-E),_=P2(P2(g-w)*P2(P2(k*u)-P2(l*o))),Q=P2(l*v),l=P2(m-w),!((k=P2(_+P2(P2(P2(h-Y)*P2(Q-P2(l*u)))+P2(P2(F-E)*P2(P2(l*o)-P2(k*v))))))>P2(0)&&s>P2(0)&&d>P2(0))){if(!(k<=P2(0)))break r;if(!(s<=P2(0)))break r;if(!(d<=P2(0)))break r;}w=P2(g-P2(c*v)),G=P2(F-P2(c*u)),C=P2(h-P2(c*o)),Y=P2(B*B);break e;}if((0|N2[X2[X2[Z>>2]+100>>2]](Z))<1)break A;for(Y=P2(B*B),Z=D=0;;)if(n=X2[A+8>>2],N2[X2[X2[n>>2]+104>>2]](n,Z,f+16|0,f),c=P2(0),m=U2[f+16>>2],B=P2(h-m),E=P2(U2[f>>2]-m),_=U2[f+20>>2],k=P2(F-_),l=P2(U2[f+4>>2]-_),R=U2[f+24>>2],s=P2(g-R),d=P2(U2[f+8>>2]-R),(Q=P2(P2(P2(B*E)+P2(k*l))+P2(s*d)))>P2(0)&&(Q<(c=P2(P2(P2(E*E)+P2(l*l))+P2(d*d)))?(c=P2(Q/c),s=P2(s-P2(d*c)),k=P2(k-P2(l*c)),B=P2(B-P2(E*c))):(s=P2(s-d),k=P2(k-l),B=P2(B-E),c=P2(1))),P2(P2(P2(B*B)+P2(k*k))+P2(s*s))<Y&&(C=P2(m+P2(E*c)),G=P2(_+P2(l*c)),D=1,w=P2(R+P2(d*c))),n=X2[A+8>>2],Z=Z+1|0,!((0|N2[X2[X2[n>>2]+100>>2]](n))>(0|Z)))break;if(!D)break A;}c=P2(h-C),B=P2(F-G),k=P2(g-w),(s=P2(P2(P2(c*c)+P2(B*B))+P2(k*k)))<Y&&(s>P2(1.1920928955078125e-7)&&(o=P2(O2(s)),N=P2(N-o),o=P2(P2(1)/o),v=P2(k*o),u=P2(B*o),o=P2(c*o)),c=P2(-N),i?(B=U2[e+72>>2],k=U2[e+64>>2],s=U2[e+68>>2],h=U2[e+88>>2],F=U2[e+80>>2],g=U2[e+84>>2],E=U2[e+104>>2],l=U2[e+96>>2],d=U2[e+100>>2],X2[f+28>>2]=0,Y=P2(P2(P2(o*l)+P2(u*d))+P2(v*E)),U2[f+24>>2]=-Y,m=P2(P2(P2(o*F)+P2(u*g))+P2(v*h)),U2[f+20>>2]=-m,o=P2(P2(P2(k*o)+P2(s*u))+P2(B*v)),U2[f+16>>2]=-o,X2[f+12>>2]=0,U2[f+8>>2]=P2(P2(P2(P2(C*l)+P2(G*d))+P2(w*E))+U2[e+120>>2])-P2(N*Y),U2[f+4>>2]=P2(P2(P2(P2(C*F)+P2(G*g))+P2(w*h))+U2[e+116>>2])-P2(N*m),U2[f>>2]=P2(P2(P2(P2(C*k)+P2(G*s))+P2(w*B))+U2[e+112>>2])-P2(N*o)):(X2[f+28>>2]=0,N=U2[e+96>>2],B=U2[e+100>>2],k=U2[e+104>>2],U2[f+24>>2]=P2(P2(o*N)+P2(u*B))+P2(v*k),s=U2[e+80>>2],h=U2[e+84>>2],F=U2[e+88>>2],U2[f+20>>2]=P2(P2(o*s)+P2(u*h))+P2(v*F),g=U2[e+64>>2],l=P2(g*o),o=U2[e+68>>2],l=P2(l+P2(o*u)),u=U2[e+72>>2],U2[f+16>>2]=l+P2(u*v),X2[f+12>>2]=0,U2[f+8>>2]=P2(P2(P2(C*N)+P2(G*B))+P2(w*k))+U2[e+120>>2],U2[f+4>>2]=P2(P2(P2(C*s)+P2(G*h))+P2(w*F))+U2[e+116>>2],U2[f>>2]=P2(P2(P2(C*g)+P2(G*o))+P2(w*u))+U2[e+112>>2]),N2[X2[X2[r>>2]+16>>2]](r,f+16|0,f,c));}K2=f+32|0;}function r4(A,e,x,r,f){A|=0,e|=0,x|=0,r|=0,f|=0;var i,a,y,V,p,M,S,X,J,U,H,P,j,z,O,K,L,q,n,$,A2,e2,r2,f2,i2,a2,n2,b,t=P2(0),o=P2(0),c=P2(0),k=0,u=P2(0),s=P2(0),l=P2(0),B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=0,g=P2(0),E=P2(0),Q=P2(0),w=0,G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=(P2(0),P2(0)),m=P2(0),N=P2(0),R=P2(0),D=P2(0),T=0,W=P2(0),I=(P2(0),P2(0)),b2=P2(0),t2=P2(0),o2=(P2(0),P2(0),P2(0)),c2=(P2(0),P2(0),0),k2=0,u2=(P2(0),P2(0),P2(0),P2(0),0),s2=(P2(0),P2(0),P2(0),P2(0),P2(0),0),l2=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),0);P2(0);U2[48+(K2=b=K2-448|0)>>2]=U2[e>>2],U2[b>>2]=U2[e+64>>2],r=X2[e+8>>2],X2[52+b>>2]=X2[e+4>>2],X2[56+b>>2]=r,f=X2[(r=e+68|0)+4>>2],X2[4+b>>2]=X2[r>>2],X2[8+b>>2]=f,r=X2[e+20>>2],X2[64+b>>2]=X2[e+16>>2],X2[68+b>>2]=r,f=X2[(r=e+80|0)+4>>2],X2[16+b>>2]=X2[r>>2],X2[20+b>>2]=f,U2[72+b>>2]=U2[e+24>>2],U2[24+b>>2]=U2[e+88>>2],U2[80+b>>2]=U2[e+32>>2],t=U2[e+96>>2],f=X2[(r=e+36|0)+4>>2],X2[84+b>>2]=X2[r>>2],X2[88+b>>2]=f,U2[40+b>>2]=U2[e+104>>2],U2[36+b>>2]=U2[e+100>>2],U2[32+b>>2]=t,r=X2[A+4>>2],t=U2[r+40>>2],o=U2[r+44>>2],v=U2[r+36>>2],g=P2(N2[X2[X2[r>>2]+48>>2]](r)),E=P2(N2[X2[X2[r>>2]+48>>2]](r)),l=P2(N2[X2[X2[r>>2]+48>>2]](r)),A=X2[A+8>>2],c=U2[A+44>>2],B=U2[A+40>>2],s=U2[A+36>>2],d=P2(N2[X2[X2[A>>2]+48>>2]](A)),u=P2(N2[X2[X2[A>>2]+48>>2]](A)),h=P2(N2[X2[X2[A>>2]+48>>2]](A)),o=P2(o+l),l=P2(P2(o+o)*P2(.5)),U2[380+b>>2]=l,t=P2(t+E),Q=P2(P2(t+t)*P2(.5)),U2[376+b>>2]=Q,t=P2(v+g),Z=P2(P2(t+t)*P2(.5)),U2[372+b>>2]=Z,t=P2(B+u),B=P2(P2(t+t)*P2(.5)),U2[364+b>>2]=B,t=P2(s+d),s=P2(P2(t+t)*P2(.5)),U2[360+b>>2]=s,t=P2(c+h),d=P2(P2(t+t)*P2(.5)),U2[368+b>>2]=d;A:if(v=P2(U2[(f=e+112|0)>>2]-U2[e+48>>2]),z=U2[48+b>>2],g=P2(U2[e+116>>2]-U2[e+52>>2]),t=U2[64+b>>2],E=P2(U2[e+120>>2]-U2[e+56>>2]),o=U2[80+b>>2],h=P2(P2(P2(v*z)+P2(g*t))+P2(E*o)),a=U2[b>>2],D=U2[16+b>>2],F=U2[32+b>>2],W=P2(P2(P2(z*a)+P2(t*D))+P2(o*F)),M=P2(j2(W)),S=U2[4+b>>2],b2=U2[20+b>>2],o2=U2[36+b>>2],t2=P2(P2(P2(z*S)+P2(t*b2))+P2(o*o2)),U=P2(j2(t2)),X=U2[8+b>>2],J=U2[24+b>>2],O=U2[40+b>>2],I=P2(P2(P2(z*X)+P2(t*J))+P2(o*O)),H=P2(j2(I)),!((o=P2(P2(j2(h))-P2(P2(P2(Z+P2(s*M))+P2(B*U))+P2(d*H))))>P2(0)||(t=U2[52+b>>2],u=U2[68+b>>2],G=U2[84+b>>2],c=P2(P2(P2(v*t)+P2(g*u))+P2(E*G)),N=P2(P2(P2(t*X)+P2(u*J))+P2(G*O)),P=P2(j2(N)),R=P2(P2(P2(t*S)+P2(u*b2))+P2(G*o2)),y=P2(j2(R)),G=P2(P2(P2(t*a)+P2(u*D))+P2(G*F)),i=P2(j2(G)),t=P2(-34028234663852886e22),A=r=0,o>P2(-34028234663852886e22)&&(r=h<P2(0),k=48+b|0,t=o,A=1),(o=P2(P2(j2(c))-P2(P2(P2(Q+P2(s*i))+P2(B*y))+P2(d*P))))>P2(0)||(C=U2[56+b>>2],p=U2[72+b>>2],V=U2[88+b>>2],u=P2(P2(P2(v*C)+P2(g*p))+P2(E*V)),Y=P2(P2(P2(C*X)+P2(p*J))+P2(V*O)),K=P2(j2(Y)),m=P2(P2(P2(C*S)+P2(p*b2))+P2(V*o2)),L=P2(j2(m)),C=P2(P2(P2(C*a)+P2(p*D))+P2(V*F)),j=P2(j2(C)),t<o&&(k=48+b|4,r=c<P2(0),t=o,A=2),(o=P2(P2(j2(u))-P2(P2(P2(l+P2(s*j))+P2(B*L))+P2(d*K))))>P2(0)||(t<o&&(k=48+b|8,r=u<P2(0),t=o,A=3),a=P2(P2(P2(v*a)+P2(g*D))+P2(E*F)),(o=P2(P2(j2(a))-P2(s+P2(P2(l*j)+P2(P2(Z*M)+P2(Q*i))))))>P2(0)||(t<o&&(r=a<P2(0),k=b,t=o,A=4),a=P2(P2(P2(v*S)+P2(g*b2))+P2(E*o2)),(o=P2(P2(j2(a))-P2(B+P2(P2(l*L)+P2(P2(Z*U)+P2(Q*y))))))>P2(0)||(t<o&&(k=4|b,r=a<P2(0),t=o,A=5),v=P2(P2(P2(v*X)+P2(g*J))+P2(E*O)),(o=P2(P2(j2(v))-P2(d+P2(P2(l*K)+P2(P2(Z*H)+P2(Q*P))))))>P2(0)||(t<o&&(k=8|b,r=v<P2(0),t=o,A=6),n=P2(P2(u*G)-P2(c*C)),U=P2(U+P2(9999999747378752e-21)),j=P2(j+P2(9999999747378752e-21)),q=P2(i+P2(9999999747378752e-21)),H=P2(H+P2(9999999747378752e-21)),(o=P2(P2(j2(n))-P2(P2(d*U)+P2(P2(P2(Q*j)+P2(l*q))+P2(B*H)))))>P2(1.1920928955078125e-7)||(a=P2(L+P2(9999999747378752e-21)),S=P2(y+P2(9999999747378752e-21)),X=P2(M+P2(9999999747378752e-21)),E=P2(0),L=P2(G*G),M=P2(P2(C*C)+P2(0)),(y=P2(O2(P2(L+M))))>P2(1.1920928955078125e-7)?(g=P2(0),o=P2(o/y),v=P2(0),P2(o*P2(1.0499999523162842))>t&&(r=n<P2(0),g=P2(G/y),E=P2(P2(0)/y),k=0,A=7,t=o,v=P2(P2(-C)/y))):(g=P2(0),v=P2(0)),n=P2(P2(u*R)-P2(c*m)),(o=P2(P2(j2(n))-P2(P2(d*X)+P2(P2(P2(Q*a)+P2(l*S))+P2(s*H)))))>P2(1.1920928955078125e-7)||(y=P2(K+P2(9999999747378752e-21)),P=P2(P+P2(9999999747378752e-21)),K=P2(R*R),$=P2(P2(m*m)+P2(0)),(i=P2(O2(P2(K+$))))>P2(1.1920928955078125e-7)&&(o=P2(o/i),P2(o*P2(1.0499999523162842))>t&&(r=n<P2(0),g=P2(R/i),v=P2(P2(-m)/i),E=P2(P2(0)/i),k=0,A=8,t=o)),n=P2(P2(u*N)-P2(c*Y)),(o=P2(P2(j2(n))-P2(P2(B*X)+P2(P2(s*U)+P2(P2(Q*y)+P2(l*P))))))>P2(1.1920928955078125e-7)||(A2=P2(N*N),e2=P2(P2(Y*Y)+P2(0)),(i=P2(O2(P2(A2+e2))))>P2(1.1920928955078125e-7)&&(o=P2(o/i),P2(o*P2(1.0499999523162842))>t&&(r=n<P2(0),g=P2(N/i),v=P2(P2(-Y)/i),E=P2(P2(0)/i),k=0,A=9,t=o)),n=P2(P2(h*C)-P2(u*W)),(o=P2(P2(j2(n))-P2(P2(d*S)+P2(P2(P2(Z*j)+P2(l*X))+P2(B*P)))))>P2(1.1920928955078125e-7)||(r2=P2(W*W),(i=P2(O2(P2(r2+M))))>P2(1.1920928955078125e-7)&&(o=P2(o/i),P2(o*P2(1.0499999523162842))>t&&(r=n<P2(0),g=P2(P2(-W)/i),v=P2(P2(0)/i),E=P2(C/i),k=0,A=10,t=o)),i=P2(P2(h*m)-P2(u*t2)),(o=P2(P2(j2(i))-P2(P2(d*q)+P2(P2(P2(Z*a)+P2(l*U))+P2(s*P)))))>P2(1.1920928955078125e-7)||(M=P2(t2*t2),(C=P2(O2(P2(M+$))))>P2(1.1920928955078125e-7)&&(o=P2(o/C),P2(o*P2(1.0499999523162842))>t&&(r=i<P2(0),g=P2(P2(-t2)/C),v=P2(P2(0)/C),E=P2(m/C),k=0,A=11,t=o)),m=P2(P2(h*Y)-P2(u*I)),(o=P2(P2(j2(m))-P2(P2(B*q)+P2(P2(s*S)+P2(P2(Z*y)+P2(l*H))))))>P2(1.1920928955078125e-7)||(C=P2(I*I),(u=P2(O2(P2(C+e2))))>P2(1.1920928955078125e-7)&&(o=P2(o/u),P2(o*P2(1.0499999523162842))>t&&(r=m<P2(0),g=P2(P2(-I)/u),v=P2(P2(0)/u),E=P2(Y/u),k=0,A=12,t=o)),Y=P2(P2(c*W)-P2(h*G)),(o=P2(P2(j2(Y))-P2(P2(d*a)+P2(P2(P2(Z*q)+P2(Q*X))+P2(B*y)))))>P2(1.1920928955078125e-7)||((u=P2(O2(P2(P2(L+r2)+P2(0)))))>P2(1.1920928955078125e-7)&&(o=P2(o/u),P2(o*P2(1.0499999523162842))>t&&(r=Y<P2(0),g=P2(P2(0)/u),v=P2(W/u),E=P2(P2(-G)/u),k=0,A=13,t=o)),W=P2(P2(c*t2)-P2(h*R)),(o=P2(P2(j2(W))-P2(P2(d*j)+P2(P2(P2(Z*S)+P2(Q*U))+P2(s*y)))))>P2(1.1920928955078125e-7)||((u=P2(O2(P2(P2(K+M)+P2(0)))))>P2(1.1920928955078125e-7)&&(o=P2(o/u),P2(o*P2(1.0499999523162842))>t&&(r=W<P2(0),g=P2(P2(0)/u),v=P2(t2/u),E=P2(P2(-R)/u),k=0,A=14,t=o)),u=P2(P2(c*I)-P2(h*N)),(o=P2(P2(j2(u))-P2(P2(B*j)+P2(P2(s*a)+P2(P2(Z*P)+P2(Q*H))))))>P2(1.1920928955078125e-7))))))))))))))))){e:{r:{if((c=P2(O2(P2(P2(A2+C)+P2(0)))))>P2(1.1920928955078125e-7)&&(o=P2(o/c),P2(o*P2(1.0499999523162842))>t))r=u<P2(0),g=P2(P2(0)/c),v=P2(I/c),E=P2(P2(-N)/c),A=15;else {if(!A)break A;if(k)break r;o=t;}u=P2(P2(P2(E*U2[80+b>>2])+P2(v*U2[84+b>>2]))+P2(g*V)),c=P2(P2(P2(z*E)+P2(v*U2[52+b>>2]))+P2(g*U2[56+b>>2])),t=P2(P2(P2(E*U2[64+b>>2])+P2(v*U2[68+b>>2]))+P2(g*p));break e;}u=U2[k+32>>2],c=U2[k>>2],o=t,t=U2[k+16>>2];}if(v=r?P2(-u):u,g=r?P2(-t):t,E=r?P2(-c):c,7<=(0|A))C=U2[e+48>>2],z=U2[e+52>>2],a=U2[e+56>>2],t=U2[56+b>>2],u=U2[80+b>>2],h=U2[48+b>>2],W=U2[64+b>>2],t2=U2[84+b>>2],I=U2[52+b>>2],N=U2[68+b>>2],X2[(e=184+b|0)>>2]=X2[f+8>>2],r=X2[f+4>>2],X2[176+b>>2]=X2[f>>2],X2[180+b>>2]=r,c=P2(0),Y=U2[b>>2],s=P2(P2(P2(E*Y)+P2(g*D))+P2(v*F))>P2(0)?P2(-s):s,m=U2[4+b>>2],B=P2(P2(P2(E*m)+P2(g*b2))+P2(v*o2))>P2(0)?P2(-B):B,G=P2(P2(U2[e>>2]+P2(s*F))+P2(B*o2)),F=U2[8+b>>2],d=P2(P2(P2(E*F)+P2(g*J))+P2(v*O))>P2(0)?P2(-d):d,R=P2(G+P2(d*O)),G=P2(P2(P2(U2[180+b>>2]+P2(s*D))+P2(B*b2))+P2(d*J)),B=P2(P2(P2(U2[176+b>>2]+P2(s*Y))+P2(B*m))+P2(d*F)),D=U2[(A=(48+b|0)+((0|(e=A-7|0))/3<<24>>24<<2)|0)>>2],s=U2[(e=((0|e)%3<<24>>24<<2)+b|0)>>2],F=U2[A+16>>2],d=U2[e+16>>2],b2=U2[A+32>>2],Y=U2[e+32>>2],m=P2(P2(P2(D*s)+P2(F*d))+P2(b2*Y)),(o2=P2(P2(1)-P2(m*m)))<=P2(9999999747378752e-20)||(Z=P2(P2(P2(E*h)+P2(g*W))+P2(v*u))>P2(0)?Z:P2(-Z),Q=P2(P2(P2(E*I)+P2(g*N))+P2(v*t2))>P2(0)?Q:P2(-Q),l=P2(P2(P2(E*t)+P2(g*p))+P2(v*V))>P2(0)?l:P2(-l),t=P2(B-P2(P2(P2(C+P2(Z*h))+P2(Q*I))+P2(l*t))),c=P2(G-P2(P2(P2(z+P2(Z*W))+P2(Q*N))+P2(l*p))),l=P2(R-P2(P2(P2(a+P2(Z*u))+P2(Q*t2))+P2(l*V))),c=P2(P2(P2(P2(P2(P2(t*D)+P2(c*F))+P2(l*b2))*m)-P2(P2(P2(t*s)+P2(c*d))+P2(l*Y)))*P2(P2(1)/o2))),U2[184+b>>2]=R+P2(c*Y),U2[180+b>>2]=G+P2(c*d),U2[176+b>>2]=B+P2(c*s),X2[284+b>>2]=0,U2[280+b>>2]=-v,U2[276+b>>2]=-g,U2[272+b>>2]=-E,N2[X2[X2[x>>2]+16>>2]](x,272+b|0,176+b|0,o);else {T=e+48|0,e=(0|A)<4?(_=48+b|0,k2=372+b|0,k=360+b|0,o=E,Q=g,l=v,b):(l=P2(-v),Q=P2(-g),o=P2(-E),e=f,k=372+(_=b)|0,k2=360+b|0,f=T,T=e,48+b|0),Z=P2(P2(P2(o*U2[e>>2])+P2(Q*U2[e+16>>2]))+P2(l*U2[e+32>>2])),U2[344+b>>2]=Z,c=P2(P2(P2(o*U2[e+4>>2])+P2(Q*U2[e+20>>2]))+P2(l*U2[e+36>>2])),U2[348+b>>2]=c,u2=1,t=P2(P2(P2(o*U2[e+8>>2])+P2(Q*U2[e+24>>2]))+P2(l*U2[e+40>>2])),U2[352+b>>2]=t,t=P2(j2(t)),c=P2(j2(c));e:{if((Z=P2(j2(Z)))<c){if(u2=0,t<c){s2=2,r=1;break e;}}else {if(t<Z){s2=2,r=0;break e;}u2=0;}s2=1,r=2;}t=U2[(r<<=2)+k>>2],Z=P2(t*U2[e+r>>2]),c=P2(U2[f>>2]-U2[T>>2]),Z=U2[r+(344+b|0)>>2]<P2(0)?(W=P2(P2(U2[f+8>>2]-U2[T+8>>2])+P2(t*U2[e+(32|r)>>2])),t2=P2(c+Z),P2(P2(U2[f+4>>2]-U2[T+4>>2])+P2(t*U2[e+(16|r)>>2]))):(W=P2(P2(U2[f+8>>2]-U2[T+8>>2])-P2(t*U2[e+(32|r)>>2])),t2=P2(c-Z),P2(P2(U2[f+4>>2]-U2[T+4>>2])-P2(t*U2[e+(16|r)>>2]))),r=1,f=2;e:{r:{f:switch(0|(l2=((0|A)<4?-1:-4)+A|0)){case 0:break e;case 1:break f;default:break r;}r=0;break e;}f=1,r=0;}t=U2[(f=(w=f<<2)+_|0)>>2],c=U2[f+16>>2],B=U2[f+32>>2],p=P2(P2(P2(t2*t)+P2(Z*c))+P2(W*B)),d=U2[(n=(f=u2<<2)+e|0)>>2],u=U2[16+n>>2],h=U2[32+n>>2],V=P2(P2(P2(t*d)+P2(c*u))+P2(B*h)),N=U2[f+k>>2],R=P2(V*N),F=P2(p+R),G=U2[($=(f=s2<<2)+e|0)>>2],D=U2[16+$>>2],b2=U2[32+$>>2],Y=P2(P2(P2(t*G)+P2(c*D))+P2(B*b2)),o2=U2[f+k>>2],t=P2(Y*o2),I=P2(F-t),c=U2[(r=(f=r<<2)+_|0)>>2],B=U2[r+16>>2],s=U2[r+32>>2],m=P2(P2(P2(t2*c)+P2(Z*B))+P2(W*s)),C=P2(P2(P2(c*d)+P2(B*u))+P2(s*h)),J=P2(C*N),u=P2(m+J),D=P2(P2(P2(c*G)+P2(B*D))+P2(s*b2)),G=P2(D*o2),d=P2(u-G),N=P2(F+t),u=P2(u+G),c=P2(p-R),h=P2(c+t),F=P2(m-J),s=P2(F+G),R=P2(c-t),B=U2[w+k2>>2],c=U2[f+k2>>2],t=P2(-c);e:{r:{f:{i:{a:{n:{b:{t:{o:{c:{k:{u:{s:{l:{G=P2(F-G);B:{if(!(_=c>P2(-G))){if(w=1,r=f=272+b|(k=0),c>P2(-s))break B;break u;}if(U2[276+b>>2]=R,U2[272+b>>2]=G,r=272+b|8,w=2,c>P2(-s))break l;}if(U2[(f=r)>>2]=t,U2[f+4>>2]=R+P2(P2(t-G)*P2(P2(h-R)/P2(s-G))),r=f+8|0,_){k=w,f=r;break u;}U2[f+12>>2]=h,U2[f+8>>2]=s,k=w+1|0;break s;}U2[284+b>>2]=h,U2[280+b>>2]=s,k=2;}if(f=r+8|0,r=0,c>P2(-u))break o;break k;}if(r=1,!(c>P2(-u)))break c;}if(U2[f>>2]=t,U2[f+4>>2]=h+P2(P2(t-s)*P2(P2(N-h)/P2(u-s))),8&(k=k+1|0)){r=k;break e;}if(f=f+8|0,r)break o;}if(r=1,c>P2(-d))break t;break b;}if(U2[f+4>>2]=N,U2[f>>2]=u,8&(k=k+1|0)){r=k;break e;}if(f=f+8|0,r=0,c>P2(-d))break n;}if(U2[f>>2]=t,U2[f+4>>2]=N+P2(P2(t-u)*P2(P2(I-N)/P2(d-u))),8&(k=k+1|0)){r=k;break e;}if(f=f+8|0,r)break n;}if(_)break a;if(((r=0)|k)<=0)break f;break i;}if(U2[f+4>>2]=I,U2[f>>2]=d,8&(k=k+1|0)){r=k;break e;}if(_)break i;f=f+8|0;}if(U2[f>>2]=t,U2[f+4>>2]=I+P2(P2(t-d)*P2(P2(R-I)/P2(G-d))),8&(r=k=k+1|0))break e;}for(f2=272+b|4,f=272+b|(r=0),_=176+b|0;;){if((t=U2[f>>2])<c){if(U2[_>>2]=t,U2[_+4>>2]=U2[f+4>>2],8&(r=r+1|0))break f;_=_+8|0,t=U2[f>>2];}if(w=f+8|0,(t<c|0)!=((d=U2[((c2=1<(0|k))?w:272+b|0)>>2])<c|0)){if(u=U2[(c2?f+12|0:f2)>>2],s=U2[f+4>>2],U2[_>>2]=c,U2[_+4>>2]=s+P2(P2(c-t)*P2(P2(u-s)/P2(d-t))),8&(r=r+1|0))break f;_=_+8|0;}if(k=k-1|0,f=w,!c2)break;}if((0|r)<1)r=0;else {for(s=P2(-B),i2=176+b|4,k=272+b|(_=0),f=176+b|0;;){if(t=U2[(w=f+4|0)>>2],(c=P2(-t))<B){if(U2[k>>2]=U2[f>>2],U2[k+4>>2]=U2[w>>2],8&(_=_+1|0)){r=_;break r;}t=U2[w>>2],c=P2(-t),k=k+8|0;}if(w=f+8|0,d=U2[((c2=1<(0|r))?f+12|0:i2)>>2],(c<B|0)!=(B>P2(-d)|0)){if(u=U2[(c2?w:176+b|0)>>2],c=U2[f>>2],U2[k+4>>2]=s,U2[k>>2]=c+P2(P2(s-t)*P2(P2(u-c)/P2(d-t))),8&(_=_+1|0)){r=_;break r;}k=k+8|0;}if(r=r-1|0,f=w,!c2)break;}if(!(((r=0)|_)<1))for(f=272+b|0,k=176+b|0;;){if((c=U2[(w=f+4|0)>>2])<B){if(U2[k>>2]=U2[f>>2],U2[k+4>>2]=U2[w>>2],8&(r=r+1|0))break f;c=U2[w>>2],k=k+8|0;}if(w=f+8|0,(c<B|0)!=((s=U2[((c2=1<(0|_))?f+12|0:f2)>>2])<B|0)){if(d=U2[(c2?w:272+b|0)>>2],t=U2[f>>2],U2[k+4>>2]=B,U2[k>>2]=t+P2(P2(B-c)*P2(P2(d-t)/P2(s-c))),8&(r=r+1|0))break f;k=k+8|0;}if(_=_-1|0,f=w,!c2)break;}}}$2(272+b|0,176+b|0,r<<3);}if((0|r)<1)break A;}for(t=P2(P2(1)/P2(P2(C*Y)-P2(V*D))),B=P2(t*P2(-V)),s=P2(Y*t),d=P2(D*t),u=P2(C*t),h=U2[(l2<<2)+k2>>2],I=U2[e+(32|(f=s2<<2))>>2],N=U2[e+(32|(k=u2<<2))>>2],R=U2[e+(16|f)>>2],G=U2[e+(16|k)>>2],V=U2[$>>2],Y=U2[n>>2],e=272+b|(k=0);;)if(f=(176+b|0)+H2(k,12)|0,C=U2[e>>2],c=P2(C-m),D=U2[e+4>>2],F=P2(D-p),t=P2(P2(s*c)-P2(d*F)),c=P2(P2(B*c)+P2(u*F)),F=P2(P2(t2+P2(t*Y))+P2(c*V)),U2[f>>2]=F,b2=P2(P2(Z+P2(t*G))+P2(c*R)),U2[f+4>>2]=b2,t=P2(P2(W+P2(t*N))+P2(c*I)),U2[f+8>>2]=t,t=P2(h-P2(P2(P2(o*F)+P2(Q*b2))+P2(l*t))),(U2[(144+b|0)+(k<<2)>>2]=t)>=P2(0)&&(U2[(f=k<<3)+(272+b|0)>>2]=C,U2[(272+b|0)+(4|f)>>2]=D,k=k+1|0),e=e+8|0,!(r=r-1|0))break;if(!((0|k)<1))if((0|k)<=(0|(k2=1<(0|(_=(0|k)<4?k:4))?_:1))){if(4<=(0|A)){for(o=P2(-v),l=P2(-g),Q=P2(-E),f=144+b|0,e=176+b|0;;)if(t=U2[f>>2],U2[416+b>>2]=P2(U2[e>>2]+U2[T>>2])-P2(E*t),U2[420+b>>2]=P2(U2[e+4>>2]+U2[T+4>>2])-P2(g*t),U2[424+b>>2]=P2(U2[e+8>>2]+U2[T+8>>2])-P2(v*t),X2[396+b>>2]=0,U2[392+b>>2]=o,U2[388+b>>2]=l,U2[384+b>>2]=Q,N2[X2[X2[x>>2]+16>>2]](x,384+b|0,416+b|0,P2(-t)),e=e+12|0,f=f+4|0,!(k=k-1|0))break;}else for(t=P2(-v),o=P2(-g),v=P2(-E),f=144+b|0,e=176+b|0;;)if(U2[416+b>>2]=U2[e>>2]+U2[T>>2],U2[420+b>>2]=U2[e+4>>2]+U2[T+4>>2],U2[424+b>>2]=U2[e+8>>2]+U2[T+8>>2],X2[396+b>>2]=0,U2[392+b>>2]=t,U2[388+b>>2]=o,U2[384+b>>2]=v,N2[X2[X2[x>>2]+16>>2]](x,384+b|0,416+b|0,P2(-U2[f>>2])),e=e+12|0,f=f+4|0,!(k=k-1|0))break;}else {for(e=144+b|4,w=0,c=U2[144+b>>2],f=1;;)if(c=(r=c<(t=U2[e>>2]))?t:c,w=r?f:w,e=e+4|0,(0|k)==(0|(f=f+1|0)))break;e:{r:{f:{i:switch(0|(f=k-1|0)){case 1:break f;case 0:break i;default:break r;}c=U2[276+b>>2],t=U2[272+b>>2];break e;}c=P2(P2(U2[276+b>>2]+U2[284+b>>2])*P2(.5)),t=P2(P2(U2[272+b>>2]+U2[280+b>>2])*P2(.5));break e;}for(t=P2(0),e=272+b|0,u=P2(0),o=P2(0);;)if(s=t,t=U2[e+12>>2],l=U2[e+4>>2],c=P2(t+l),Q=U2[e>>2],Z=U2[(e=e+8|0)>>2],l=P2(P2(Q*t)-P2(Z*l)),t=P2(s+P2(c*l)),o=P2(o+l),u=P2(u+P2(P2(Q+Z)*l)),!(f=f-1|0))break;l=P2(0xde0b6b000000000),s=o,Q=U2[(e=(272+b|0)+(k<<3)|0)-8>>2],Z=U2[276+b>>2],B=U2[272+b>>2],c=U2[e-4>>2],o=P2(P2(Q*Z)-P2(B*c)),s=P2(s+o),P2(j2(s))>P2(1.1920928955078125e-7)&&(l=P2(P2(1)/P2(s*P2(3)))),c=P2(P2(t+P2(P2(Z+c)*o))*l),t=P2(P2(u+P2(P2(Q+B)*o))*l);}for(f=416+b|0,e=272+b|0,r=k;;)if(a2=f,n2=B2(P2(U2[e+4>>2]-c),P2(U2[e>>2]-t)),U2[a2>>2]=n2,e=e+8|0,f=f+4|0,!(r=r-1|0))break;for(e=384+b|0,f=k;;)if(X2[e>>2]=1,e=e+4|0,!(f=f-1|0))break;if(X2[112+b>>2]=w,2<=((X2[(e=w<<2)+(384+b|0)>>2]=0)|_))for(l=P2(P2(6.2831854820251465)/P2(0|k2)),Q=U2[e+(416+b|0)>>2],_=112+b|0,u2=1;;){for(X2[_+4>>2]=w,Z=(t=P2(P2(l*P2(0|u2))+Q))>P2(3.1415927410125732)?P2(t+P2(-6.2831854820251465)):t,_=_+4|0,r=0,t=P2(1e9),f=416+b|0,e=384+b|0,s2=w;;)if(X2[e>>2]&&(o=(o=P2(j2(P2(U2[f>>2]-Z))))>P2(3.1415927410125732)?P2(P2(6.2831854820251465)-o):o)<t&&(s2=X2[_>>2]=r,t=o),e=e+4|0,f=f+4|0,(0|k)==(0|(r=r+1|0)))break;if(((X2[(384+b|0)+(s2<<2)>>2]=0)|k2)==(0|(u2=u2+1|0)))break;}if(o=P2(-v),l=P2(-g),Q=P2(-E),4<=(0|A))for(f=k2-1|0,A=112+b|4;;){if(e=(176+b|0)+H2(w,12)|0,Z=P2(U2[e>>2]+U2[T>>2]),U2[416+b>>2]=Z,c=P2(U2[e+4>>2]+U2[T+4>>2]),U2[420+b>>2]=c,t=P2(U2[e+8>>2]+U2[T+8>>2]),U2[424+b>>2]=t,X2[396+b>>2]=0,U2[392+b>>2]=o,U2[388+b>>2]=l,U2[384+b>>2]=Q,X2[108+b>>2]=0,s=t,t=U2[(144+b|0)+(w<<2)>>2],U2[104+b>>2]=s-P2(v*t),U2[100+b>>2]=c-P2(g*t),U2[96+b>>2]=Z-P2(E*t),N2[X2[X2[x>>2]+16>>2]](x,384+b|0,96+b|0,P2(-t)),!f)break A;f=f-1|0,w=X2[A>>2],A=A+4|0;}for(f=k2-1|0,A=112+b|4;;){if(e=(176+b|0)+H2(w,12)|0,U2[416+b>>2]=U2[e>>2]+U2[T>>2],U2[420+b>>2]=U2[e+4>>2]+U2[T+4>>2],U2[424+b>>2]=U2[e+8>>2]+U2[T+8>>2],X2[396+b>>2]=0,U2[392+b>>2]=o,U2[388+b>>2]=l,U2[384+b>>2]=Q,N2[X2[X2[x>>2]+16>>2]](x,384+b|0,416+b|0,P2(-U2[(144+b|0)+(w<<2)>>2])),!f)break A;f=f-1|0,w=X2[A>>2],A=A+4|0;}}}}K2=448+b|0;}function f4(A,e,r){var f,i,a,n,b,t,o,c,x,y,V,p,M,S,X,J,U,H,k,u=P2(0),s=0,l=P2(0),B=0,v=0,d=P2(0),Z=P2(0),_=P2(0),g=0,E=P2(0),Q=P2(0),w=0,G=P2(0),C=0,h=P2(0),F=P2(0),Y=P2(0),m=0,N=P2(0),R=P2(0),D=P2(0),T=0,W=(P2(0),P2(0),0),I=P2(0),P=(P2(0),P2(0),P2(0),0),j=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0)),z=(P2(0),P2(0),P2(0),0),O=0;K2=k=K2-128|0,X2[A+376>>2]=0,X2[A+364>>2]=4,X2[A+368>>2]=0,X2[A+360>>2]=g=A+316|0,X2[A+356>>2]=A+284,X2[A+352>>2]=A+252,X2[A+348>>2]=A+220,B=X2[e+4>>2],X2[A>>2]=X2[e>>2],X2[A+4>>2]=B,B=X2[(s=e+16|0)+4>>2],X2[(v=A+16|0)>>2]=X2[s>>2],X2[v+4>>2]=B,B=X2[e+12>>2],X2[A+8>>2]=X2[e+8>>2],X2[A+12>>2]=B,B=X2[(s=e+32|0)+4>>2],X2[(v=A+32|0)>>2]=X2[s>>2],X2[v+4>>2]=B,B=X2[(s=e+24|0)+4>>2],X2[(v=A+24|0)>>2]=X2[s>>2],X2[v+4>>2]=B,B=X2[(s=e+48|0)+4>>2],X2[(v=A+48|0)>>2]=X2[s>>2],X2[v+4>>2]=B,B=X2[(s=e+40|0)+4>>2],X2[(v=A+40|0)>>2]=X2[s>>2],X2[v+4>>2]=B,B=X2[(s=e- -64|0)+4>>2],X2[(v=A- -64|0)>>2]=X2[s>>2],X2[v+4>>2]=B,B=X2[e+60>>2],X2[A+56>>2]=X2[e+56>>2],X2[A+60>>2]=B,B=X2[(s=e+80|0)+4>>2],X2[(v=A+80|0)>>2]=X2[s>>2],X2[v+4>>2]=B,B=X2[(s=e+72|0)+4>>2],X2[(v=A+72|0)>>2]=X2[s>>2],X2[v+4>>2]=B,B=X2[(s=e+96|0)+4>>2],X2[(v=A+96|0)>>2]=X2[s>>2],X2[v+4>>2]=B,B=X2[(s=e+88|0)+4>>2],X2[(v=A+88|0)>>2]=X2[s>>2],X2[v+4>>2]=B,B=X2[(s=e+104|0)+4>>2],X2[(v=A+104|0)>>2]=X2[s>>2],X2[v+4>>2]=B,B=X2[(s=e+112|0)+4>>2],X2[(v=A+112|0)>>2]=X2[s>>2],X2[v+4>>2]=B,s=X2[e+120>>2],e=X2[e+124>>2],X2[A+144>>2]=0,X2[(B=A+180|0)>>2]=0,X2[A+120>>2]=s,X2[A+124>>2]=e,e=X2[r+4>>2],X2[A+128>>2]=X2[r>>2],X2[A+132>>2]=e,e=X2[(r=r+8|0)+4>>2],X2[(s=v=A+136|0)>>2]=X2[r>>2],X2[s+4>>2]=e,Z=U2[s>>2],u=U2[(r=A+132|0)>>2],l=U2[A+128>>2],X2[A+364>>2]=3,X2[(e=A+164|0)>>2]=0,X2[B>>2]=1,X2[(X=A+148|0)>>2]=g,d=P2(-l),K(A,(B=(l=P2(P2(P2(l*l)+P2(u*u))+P2(Z*Z)))>P2(0))?d:P2(1),P2(B?-u:0),P2(B?-Z:0),g),X2[e>>2]=1065353216,s=X2[X>>2],e=X2[s+20>>2],X2[A+128>>2]=X2[s+16>>2],X2[A+132>>2]=e,e=X2[(B=s+24|0)+4>>2],X2[v>>2]=X2[B>>2],X2[v+4>>2]=e,w=X2[B+4>>2],B=X2[B>>2],X2[(e=88+k|0)>>2]=B,X2[e+4>>2]=w,X2[(e=72+k|0)>>2]=B,X2[e+4>>2]=w,X2[(e=56+k|0)>>2]=B,X2[e+4>>2]=w,g=X2[s+20>>2],e=X2[s+16>>2],X2[80+k>>2]=e,X2[84+k>>2]=g,X2[64+k>>2]=e,X2[68+k>>2]=g,X2[48+k>>2]=e,X2[52+k>>2]=g,X2[40+k>>2]=B,X2[44+k>>2]=w,X2[32+k>>2]=e,X2[36+k>>2]=g,B=A+128|0,F=U2[r>>2],u=U2[v>>2],m=X2[A+368>>2],Y=U2[A+128>>2];A:{e:{r:{for(;;){if((Z=P2(O2(P2(P2(P2(Y*Y)+P2(F*F))+P2(u*u)))))<P2(9999999747378752e-20)){X2[A+376>>2]=1;break r;}if(e=X2[A+364>>2]-1|0,X2[A+364>>2]=e,P=H2(m,36),r=X2[(W=180+(n=P+A|0)|0)>>2],X2[W>>2]=r+1,e=X2[348+((e<<2)+A|0)>>2],X2[(r=(C=148+n|0)+(r<<2)|0)>>2]=e,X2[r+16>>2]=0,K(A,P2(-Y),P2(-F),P2(-u),e),v=X2[W>>2],e=X2[(C+(v<<2)|0)-4>>2],E=U2[e+16>>2],u=P2(E-U2[32+k>>2]),d=P2(u*u),Q=U2[e+20>>2],u=P2(Q-U2[36+k>>2]),d=P2(d+P2(u*u)),_=U2[e+24>>2],u=P2(_-U2[40+k>>2]),P2(d+P2(u*u))<P2(9999999747378752e-20)||(u=P2(E-U2[48+k>>2]),d=P2(u*u),u=P2(Q-U2[52+k>>2]),d=P2(d+P2(u*u)),u=P2(_-U2[56+k>>2]),P2(d+P2(u*u))<P2(9999999747378752e-20)||(u=P2(E-U2[64+k>>2]),d=P2(u*u),u=P2(Q-U2[68+k>>2]),d=P2(d+P2(u*u)),u=P2(_-U2[72+k>>2]),P2(d+P2(u*u))<P2(9999999747378752e-20)||(u=P2(E-U2[80+k>>2]),d=P2(u*u),u=P2(Q-U2[84+k>>2]),d=P2(d+P2(u*u)),u=P2(_-U2[88+k>>2]),P2(d+P2(u*u))<P2(9999999747378752e-20)))))break;if(e=X2[(r=(g=e+16|0)+8|0)+4>>2],X2[(s=w=(32+k|0)+((z=z+1&3)<<4)|0)+8>>2]=X2[r>>2],X2[s+12>>2]=e,e=X2[g+4>>2],X2[s>>2]=X2[g>>2],X2[s+4>>2]=e,u=P2(P2(P2(P2(U2[A+128>>2]*E)+P2(U2[A+132>>2]*Q))+P2(U2[A+136>>2]*_))/Z),P2(P2(Z-(j=j<u?u:j))+P2(Z*P2(-9999999747378752e-20)))<=P2(0)){B=X2[A+364>>2],X2[A+364>>2]=B+1,m=X2[A+368>>2],r=H2(m,36)+A|0,s=X2[(e=r+180|0)>>2]-1|0,X2[e>>2]=s,X2[348+((B<<2)+A|0)>>2]=X2[148+(r+(s<<2)|0)>>2];break r;}f:{i:{a:{n:{b:switch(v-2|(X2[12+k>>2]=0)){case 0:if(r=X2[152+n>>2],_=U2[r+16>>2],e=X2[C>>2],h=U2[e+16>>2],D=P2(_-h),Z=U2[r+20>>2],N=U2[e+20>>2],E=P2(Z-N),u=U2[r+24>>2],R=U2[e+24>>2],Q=P2(u-R),!((l=P2(P2(P2(D*D)+P2(E*E))+P2(Q*Q)))>P2(0)))break i;if((G=P2(P2(-P2(P2(P2(h*D)+P2(N*E))+P2(R*Q)))/l))>=P2(1)){X2[16+k>>2]=0,X2[20+k>>2]=1065353216,X2[12+k>>2]=2,l=P2(P2(P2(_*_)+P2(Z*Z))+P2(u*u));break a;}if(!(G<=P2(0)))break n;X2[16+k>>2]=1065353216,X2[20+k>>2]=0,X2[12+k>>2]=1,l=P2(P2(P2(h*h)+P2(N*N))+P2(R*R));break a;case 1:l=i4(X2[C>>2]+16|0,X2[152+n>>2]+16|0,X2[156+n>>2]+16|0,16+k|0,12+k|0);break a;case 2:break b;default:break a;}if(T=X2[C>>2],J=U2[T+16>>2],f=X2[160+n>>2],F=U2[f+16>>2],x=P2(J-F),C=X2[152+n>>2],c=U2[C+20>>2],Y=U2[f+20>>2],y=P2(c-Y),i=P2(x*y),w=X2[156+n>>2],G=U2[w+24>>2],I=U2[f+24>>2],b=P2(G-I),U=U2[T+20>>2],V=P2(U-Y),H=U2[C+24>>2],p=P2(H-I),h=P2(V*p),u=U2[w+16>>2],t=P2(u-F),d=U2[T+24>>2],M=P2(d-I),Z=U2[C+16>>2],S=P2(Z-F),N=P2(M*S),l=U2[w+20>>2],o=P2(l-Y),R=P2(x*p),D=P2(V*S),E=P2(M*y),!((a=P2(P2(P2(i*b)+P2(P2(P2(P2(h*t)+P2(N*o))-P2(R*o))-P2(D*b)))-P2(E*t)))>P2(0)|a<P2(0)))break i;if(Q=P2(U-c),_=P2(Z-u),Z=P2(J-Z),l=P2(c-l),c=P2(d*P2(P2(Q*_)-P2(Z*l))),u=P2(d-H),d=P2(u*l),l=P2(H-G),!(P2(a*P2(c+P2(P2(J*P2(d-P2(Q*l)))+P2(U*P2(P2(Z*l)-P2(u*_))))))<=P2(0)))break i;if(v=T+16|0,g=f+16|0,s=C+16|0,X2[120+k>>2]=0,X2[112+k>>2]=0,X2[116+k>>2]=0,X2[108+k>>2]=0,l=P2(-1),P2(a*P2(P2(P2(P2(h-E)*F)+P2(Y*P2(N-R)))+P2(P2(i-D)*I)))>P2(0)&&(l=i4(v,s,g,112+k|0,108+k|0),X2[24+k>>2]=0,e=X2[116+k>>2],X2[16+k>>2]=X2[112+k>>2],X2[20+k>>2]=e,U2[28+k>>2]=U2[120+k>>2],e=X2[108+k>>2],X2[12+k>>2]=2&e|e<<1&8|1&e,Y=U2[f+20>>2],F=U2[f+16>>2],I=U2[f+24>>2]),r=w+16|0,P2(a*P2(P2(P2(P2(P2(y*b)-P2(p*o))*F)+P2(Y*P2(P2(p*t)-P2(b*S))))+P2(P2(P2(o*S)-P2(y*t))*I)))>P2(0)&&((u=i4(s,r,g,112+k|0,108+k|0))<l||l<P2(0))&&(U2[20+k>>2]=U2[112+k>>2],X2[16+k>>2]=0,e=X2[120+k>>2],X2[24+k>>2]=X2[116+k>>2],X2[28+k>>2]=e,X2[12+k>>2]=X2[108+k>>2]<<1&14,l=u),P2(a*P2(P2(P2(P2(P2(o*M)-P2(b*V))*U2[f+16>>2])+P2(U2[f+20>>2]*P2(P2(b*x)-P2(M*t))))+P2(P2(P2(V*t)-P2(o*x))*U2[f+24>>2])))>P2(0)&&((u=i4(r,v,g,112+k|0,108+k|0))<l||l<P2(0))&&(U2[24+k>>2]=U2[112+k>>2],X2[20+k>>2]=0,U2[16+k>>2]=U2[116+k>>2],U2[28+k>>2]=U2[120+k>>2],e=X2[108+k>>2],X2[12+k>>2]=e>>>1&1|e<<1&8|e<<2&4,l=u),!(l<P2(0)))break a;X2[12+k>>2]=15,N=U2[T+20>>2],R=U2[w+24>>2],i=U2[f+16>>2],D=U2[T+24>>2],u=U2[w+16>>2],G=U2[f+20>>2],E=U2[T+16>>2],h=U2[f+24>>2],l=U2[w+20>>2],Z=P2(P2(P2(P2(P2(P2(P2(P2(N*R)*i)+P2(P2(D*u)*G))-P2(G*P2(R*E)))-P2(P2(N*u)*h))+P2(h*P2(E*l)))-P2(i*P2(D*l)))/a),U2[20+k>>2]=Z,Q=U2[C+24>>2],_=U2[C+16>>2],d=P2(P2(P2(P2(i*P2(l*Q))+P2(G*P2(R*_)))-P2(G*P2(Q*u)))-P2(h*P2(l*_))),l=U2[C+20>>2],u=P2(P2(P2(d+P2(h*P2(u*l)))-P2(i*P2(R*l)))/a),U2[16+k>>2]=u,l=P2(P2(P2(P2(P2(P2(P2(i*P2(l*D))+P2(G*P2(Q*E)))-P2(G*P2(D*_)))-P2(h*P2(l*E)))+P2(h*P2(_*N)))-P2(i*P2(Q*N)))/a),U2[24+k>>2]=l,U2[28+k>>2]=P2(1)-P2(P2(u+Z)+l),l=P2(0);break a;}X2[12+k>>2]=3,U2[20+k>>2]=G,U2[16+k>>2]=P2(1)-G,l=P2(R+P2(Q*G)),d=P2(l*l),l=P2(h+P2(D*G)),u=P2(l*l),l=P2(N+P2(E*G)),l=P2(d+P2(u+P2(l*l)));}if(l>=P2(0)){if(w=H2(m=1-m|0,36)+A|0,X2[(g=w+180|0)>>2]=0,X2[B>>2]=0,X2[B+4>>2]=0,X2[A+368>>2]=m,X2[(e=B+8|0)>>2]=0,X2[e+4>>2]=0,C=X2[12+k>>2],!(v=X2[W>>2])){u=P2(0),F=P2(0),Y=P2(0);break f;}for(e=P+X|0,u=P2(0),W=16+k|(T=0),F=P2(0),Y=P2(0),r=0;;)if(P=X2[e>>2],C>>>r&1?(X2[(s=w+(T<<2)|0)+148>>2]=P,_=U2[W>>2],U2[s+164>>2]=_,X2[g>>2]=T=T+1|0,s=X2[e>>2],Z=U2[s+24>>2],u=U2[s+20>>2],Y=P2(P2(_*U2[s+16>>2])+U2[A+128>>2]),U2[A+128>>2]=Y,F=P2(P2(_*u)+U2[A+132>>2]),U2[A+132>>2]=F,u=P2(P2(_*Z)+U2[A+136>>2]),U2[A+136>>2]=u):(s=X2[A+364>>2],X2[A+364>>2]=s+1,X2[348+((s<<2)+A|0)>>2]=P),e=e+4|0,W=W+4|0,(0|v)==(0|(r=r+1|0)))break;break f;}}B=X2[A+364>>2],X2[A+364>>2]=B+1,m=X2[A+368>>2],r=H2(m,36)+A|0,s=X2[(e=r+180|0)>>2]-1|0,X2[e>>2]=s,X2[348+((B<<2)+A|0)>>2]=X2[148+(r+(s<<2)|0)>>2];break r;}if(15==(0|C)&&(X2[A+376>>2]=1),127==(0|O)){X2[A+376>>(e=2)]=2,X2[A+372>>2]=148+(H2(m,36)+A|0);break A;}if(O=O+1|0,e=X2[A+376>>2])break e;}B=X2[A+364>>2],X2[A+364>>2]=B+1,m=X2[A+368>>2],r=H2(m,36)+A|0,s=X2[(e=r+180|0)>>2]-1|0,X2[e>>2]=s,X2[348+((B<<2)+A|0)>>2]=X2[148+(r+(s<<2)|0)>>2];}e=X2[A+376>>2];}X2[A+372>>2]=148+(H2(m,36)+A|0);e:switch(0|e){case 0:l=U2[A+128>>2],u=P2(l*l),l=U2[A+132>>2],u=P2(u+P2(l*l)),l=U2[A+136>>2],U2[A+144>>2]=O2(P2(u+P2(l*l))),e=0;break A;case 1:break e;default:break A;}X2[A+144>>2]=0,e=1;}return K2=128+k|0,e;}function K(A,e,r,f,i){var a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_=0;P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);K2=Z=K2-48|0,X2[i+12>>2]=0,a=P2(P2(1)/P2(O2(P2(P2(P2(e*e)+P2(r*r))+P2(f*f))))),U2[i+8>>2]=a*f,U2[i+4>>2]=a*r,U2[i>>2]=a*e,_=X2[A+120>>2],o=X2[A+124>>2],t=X2[A>>2]+(o>>1)|0,1&o&&(_=X2[_+X2[t>>2]>>2]),N2[0|_](Z,t,i),f=U2[i+8>>2],r=U2[i>>2],_=X2[A+124>>2],o=X2[A+4>>2]+(_>>1)|0,e=P2(-U2[i+4>>2]),t=X2[A+120>>2],t=1&_?X2[X2[o>>2]+t>>2]:t,X2[28+Z>>2]=0,U2[24+Z>>2]=P2(P2(U2[A+44>>2]*e)-P2(r*U2[A+40>>2]))-P2(f*U2[A+48>>2]),U2[20+Z>>2]=P2(P2(U2[A+28>>2]*e)-P2(r*U2[A+24>>2]))-P2(f*U2[A+32>>2]),U2[16+Z>>2]=P2(P2(U2[A+12>>2]*e)-P2(r*U2[A+8>>2]))-P2(f*U2[A+16>>2]),N2[0|t](32+Z|0,o,16+Z|0),_=U2[A+104>>2],t=U2[A- -64>>2],o=U2[A+60>>2],c=U2[A+108>>2],k=U2[A+80>>2],u=U2[A+72>>2],s=U2[A+76>>2],l=U2[A+112>>2],B=U2[A+96>>2],v=U2[A+88>>2],d=U2[A+92>>2],a=U2[A+56>>2],A=U2[40+Z>>2],n=U2[32+Z>>2],b=U2[36+Z>>2],f=U2[Z>>2],r=U2[4+Z>>2],e=U2[8+Z>>2],X2[i+28>>2]=0,U2[i+24>>2]=e-P2(l+P2(P2(P2(n*v)+P2(b*d))+P2(A*B))),U2[i+20>>2]=r-P2(c+P2(P2(P2(n*u)+P2(b*s))+P2(A*k))),U2[i+16>>2]=f-P2(_+P2(P2(P2(n*a)+P2(b*o))+P2(A*t))),K2=48+Z|0;}function i4(A,e,r,f,i){var a,n=P2(0),b=P2(0),t=P2(0),o=P2(0),c=P2(0),k=P2(0),u=P2(0),s=(P2(0),P2(0)),l=P2(0),B=P2(0),v=(P2(0),P2(0),P2(0)),d=0,Z=P2(0),_=P2(0),g=P2(0),E=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0)),n=(P2(0),P2(-1)),u=U2[A>>2],t=U2[e>>2],b=P2(u-t),k=U2[e+4>>2],Z=U2[r+4>>2],Q=P2(k-Z),w=U2[A+4>>2],c=P2(w-k),_=U2[r>>2],G=P2(t-_),C=P2(P2(b*Q)-P2(c*G)),o=U2[e+8>>2],g=U2[r+8>>2],h=P2(o-g),F=U2[A+8>>2],l=P2(F-o),Y=P2(P2(c*h)-P2(l*Q)),m=P2(P2(l*G)-P2(b*h));return (a=P2(P2(C*C)+P2(P2(Y*Y)+P2(m*m))))>P2(0)&&(P2(P2(P2(u*P2(P2(C*c)-P2(m*l)))+P2(w*P2(P2(Y*l)-P2(C*b))))+P2(P2(P2(m*b)-P2(Y*c))*F))>P2(0)?(c=P2(-1),l=P2(t-u),s=P2(k-w),B=P2(o-F),(n=P2(P2(P2(l*l)+P2(s*s))+P2(B*B)))>P2(0)?(b=P2(1),(n=P2(P2(-P2(P2(P2(u*l)+P2(w*s))+P2(F*B)))/n))>=P2(1)?(c=P2(P2(P2(t*t)+P2(k*k))+P2(o*o)),d=2):(b=P2(0),d=1,n<=P2(0)?(c=P2(P2(P2(u*u)+P2(w*w))+P2(F*F)),v=P2(1)):(b=P2(F+P2(B*n)),c=P2(b*b),b=P2(u+P2(l*n)),t=P2(b*b),b=P2(w+P2(s*n)),c=P2(c+P2(t+P2(b*b))),v=P2(P2(1)-n),d=3,b=n))):b=P2(0),X2[f+8>>2]=0,U2[f+4>>2]=b,U2[f>>2]=v,X2[i>>2]=d,o=U2[e+8>>2],k=U2[e+4>>2],t=U2[e>>2]):(c=P2(-1),b=P2(0)),F=P2(g-F),w=P2(Z-w),l=P2(_-u),P2(P2(P2(t*P2(P2(C*Q)-P2(m*h)))+P2(k*P2(P2(Y*h)-P2(C*G))))+P2(P2(P2(m*G)-P2(Y*Q))*o))>P2(0)&&(Z=U2[r>>2],u=P2(Z-t),_=U2[r+4>>2],s=P2(_-k),g=U2[r+8>>2],B=P2(g-o),E=P2(P2(P2(u*u)+P2(s*s))+P2(B*B)),n=P2(-1),E>P2(0)&&(b=P2(1),n=(n=P2(P2(-P2(P2(P2(t*u)+P2(k*s))+P2(o*B)))/E))>=P2(1)?(v=P2(0),d=2,P2(P2(P2(Z*Z)+P2(_*_))+P2(g*g))):(b=P2(0),d=1,n<=P2(0)?(v=P2(1),P2(P2(P2(t*t)+P2(k*k))+P2(o*o))):(v=P2(P2(1)-n),d=3,n=P2(o+P2(B*(b=n))),o=P2(n*n),n=P2(t+P2(u*b)),t=P2(n*n),n=P2(k+P2(s*b)),P2(o+P2(t+P2(n*n)))))),c<P2(0)||n<c)?(U2[f+8>>2]=b,U2[f+4>>2]=v,X2[f>>2]=0,X2[i>>2]=d<<1):n=c,k=U2[r>>2],o=U2[r+4>>2],u=U2[r+8>>2],P2(P2(P2(k*P2(P2(C*w)-P2(m*F)))+P2(o*P2(P2(Y*F)-P2(C*l))))+P2(P2(P2(m*l)-P2(Y*w))*u))>P2(0)&&(t=P2(-1),_=U2[A>>2],s=P2(_-k),g=U2[A+4>>2],B=P2(g-o),E=U2[A+8>>2],Z=P2(E-u),(c=P2(P2(P2(s*s)+P2(B*B))+P2(Z*Z)))>P2(0)&&(b=P2(1),(c=P2(P2(-P2(P2(P2(k*s)+P2(o*B))+P2(u*Z)))/c))>=P2(1)?(t=P2(P2(P2(_*_)+P2(g*g))+P2(E*E)),v=P2(0),d=2):(b=P2(0),c<=P2(0)?(t=P2(P2(P2(k*k)+P2(o*o))+P2(u*u)),v=P2(1),d=1):(b=P2(u+P2(Z*c)),t=P2(b*b),b=P2(k+P2(s*c)),k=P2(b*b),b=P2(o+P2(B*c)),t=P2(t+P2(k+P2(b*b))),v=P2(P2(1)-c),d=3,b=c))),(t<n||n<P2(0))&&(U2[f+8>>2]=v,X2[f+4>>2]=0,U2[f>>2]=b,X2[i>>2]=d<<2&4|d>>>1,n=t)),n<P2(0)&&(c=P2(P2(P2(P2(Y*U2[A>>2])+P2(m*U2[A+4>>2]))+P2(C*U2[A+8>>2]))/a),n=P2(m*c),t=P2(U2[e+4>>2]-n),b=P2(Y*c),k=P2(U2[e>>2]-b),o=P2(P2(G*t)-P2(Q*k)),u=P2(o*o),c=P2(C*c),o=P2(U2[e+8>>2]-c),t=P2(P2(Q*o)-P2(t*h)),C=P2(t*t),t=P2(P2(k*h)-P2(G*o)),o=P2(O2(P2(u+P2(C+P2(t*t))))),t=P2(O2(a)),k=P2(o/t),U2[f>>2]=k,X2[i>>2]=7,o=P2(U2[r+4>>2]-n),v=P2(U2[r>>2]-b),C=P2(P2(l*o)-P2(v*w)),u=P2(C*C),C=P2(U2[r+8>>2]-c),o=P2(P2(w*C)-P2(o*F)),s=P2(o*o),o=P2(P2(v*F)-P2(l*C)),t=P2(P2(O2(P2(u+P2(s+P2(o*o)))))/t),U2[f+4>>2]=t,U2[f+8>>2]=P2(1)-P2(k+t),n=P2(P2(c*c)+P2(P2(b*b)+P2(n*n))))),n;}function a4(A,e,r,f,i){var a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g=P2(0),E=(P2(0),P2(0),P2(0),P2(0),0);P2(0),P2(0),P2(0),P2(0);if(_=X2[A+18504>>2]){if((a=X2[_+48>>2])&&(X2[a+44>>2]=X2[_+44>>2]),(a=X2[_+44>>2])&&(X2[a+48>>2]=X2[_+48>>2]),X2[A+18504>>2]==(0|_)&&(X2[A+18504>>2]=X2[_+48>>2]),X2[_+44>>2]=0,X2[_+48>>2]=X2[A+18496>>2],X2[(a=A+18508|0)>>2]=X2[a>>2]-1,(a=X2[A+18496>>2])&&(X2[a+44>>2]=_),X2[A+18496>>2]=_,X2[(a=A+18500|0)>>2]=X2[a>>2]+1,S2[_+55|0]=0,X2[_+28>>2]=f,X2[_+24>>2]=r,X2[_+20>>2]=e,t=U2[f+16>>2],o=U2[(a=r+16|0)>>2],b=U2[(c=e+16|0)>>2],u=U2[(k=r+20|0)>>2],s=U2[f+24>>2],l=U2[(B=r+24|0)>>2],g=U2[(v=e+24|0)>>2],n=U2[(d=e+20|0)>>2],Z=U2[f+20>>2],X2[_+12>>2]=0,u=P2(u-n),s=P2(s-g),l=P2(l-g),n=P2(Z-n),g=P2(P2(u*s)-P2(l*n)),U2[_>>2]=g,t=P2(t-b),o=P2(o-b),b=P2(P2(l*t)-P2(o*s)),U2[_+4>>2]=b,n=P2(P2(o*n)-P2(u*t)),U2[_+8>>2]=n,E=2,(t=P2(O2(P2(P2(P2(g*g)+P2(b*b))+P2(n*n)))))>P2(9999999747378752e-20)){if(o=U2[a>>2],n4(g,b,n,U2[c>>2],U2[d>>2],U2[v>>2],o,U2[k>>2],U2[B>>2],a=_+16|0)||(g=U2[r+16>>2],n=U2[r+20>>2],b=U2[r+24>>2],n4(U2[_>>2],U2[(E=_+4|0)>>2],U2[(c=_+8|0)>>2],g,n,b,U2[(r=f+16|0)>>2],U2[(k=f+20|0)>>2],U2[(f=f+24|0)>>2],a)||n4(U2[_>>2],U2[E>>2],U2[c>>2],U2[r>>2],U2[k>>2],U2[f>>2],U2[e+16>>2],U2[e+20>>2],U2[e+24>>2],a)||(U2[_+16>>2]=P2(P2(P2(U2[e+16>>2]*U2[_>>2])+P2(U2[e+20>>2]*U2[_+4>>2]))+P2(U2[e+24>>2]*U2[_+8>>2]))/t)),g=P2(P2(1)/t),U2[_>>2]=g*U2[_>>2],U2[(e=_+4|0)>>2]=g*U2[e>>2],U2[(e=_+8|0)>>2]=g*U2[e>>2],i)return _;if(E=3,U2[a>>2]>=P2(-9999999747378752e-21))return _;}X2[A>>2]=E,(e=X2[_+48>>2])&&(X2[e+44>>2]=X2[_+44>>2]),(e=X2[_+44>>2])&&(X2[e+48>>2]=X2[_+48>>2]),X2[A+18496>>2]==(0|_)&&(X2[A+18496>>2]=X2[_+48>>2]),X2[_+44>>2]=0,X2[_+48>>2]=X2[A+18504>>2],X2[A+18500>>2]=X2[A+18500>>2]-1,(e=X2[A+18504>>2])&&(X2[e+44>>2]=_),X2[A+18504>>2]=_,X2[A+18508>>2]=X2[A+18508>>2]+1;}else X2[A>>2]=5;return 0;}function n4(A,e,r,f,i,a,n,b,t,o){P2(0),P2(0),P2(0);var c=P2(n-f),k=P2(b-i),u=P2(t-a);return (e=P2(P2(P2(P2(c*e)-P2(k*A))*a)+P2(P2(P2(P2(k*r)-P2(u*e))*f)+P2(P2(P2(u*A)-P2(c*r))*i)))<P2(0))&&(A=P2(P2(P2(f*f)+P2(i*i))+P2(a*a)),P2(P2(P2(c*f)+P2(k*i))+P2(u*a))>P2(0)||(A=P2(P2(P2(n*n)+P2(b*b))+P2(t*t)),P2(P2(P2(c*n)+P2(k*b))+P2(u*t))<P2(0)||(A=P2(P2(P2(n*f)+P2(b*i))+P2(t*a)),A=(A=P2(P2(P2(P2(P2(P2(n*n)+P2(b*b))+P2(t*t))*P2(P2(P2(f*f)+P2(i*i))+P2(a*a)))-P2(A*A))/P2(P2(P2(c*c)+P2(k*k))+P2(u*u))))>P2(0)?A:P2(0))),U2[o>>2]=O2(A)),e;}function b4(){J2[26480]||(X2[6538]=1062847606,X2[6539]=0,X2[6536]=1042701022,X2[6537]=1056964440,X2[6534]=1062847606,X2[6535]=0,X2[6532]=-1093024784,X2[6533]=1050556081,X2[6530]=1062847606,X2[6531]=0,X2[6528]=-1093024784,X2[6529]=-1096927567,X2[6526]=1062847606,X2[6527]=0,X2[6524]=1042701022,X2[6525]=-1090519208,X2[6522]=1062847572,X2[6523]=0,X2[6520]=1057396286,X2[6521]=0,X2[6518]=1057396386,X2[6519]=0,X2[6516]=1060121912,X2[6517]=1056964507,X2[6514]=1057396420,X2[6515]=0,X2[6512]=-1098475836,X2[6513]=1062148969,X2[6510]=1057396386,X2[6511]=0,X2[6508]=-1084636143,X2[6509]=0,X2[6506]=1057396420,X2[6507]=0,X2[6504]=-1098475836,X2[6505]=-1085334679,X2[6502]=1057396386,X2[6503]=0,X2[6500]=1060121912,X2[6501]=-1090519141,X2[6498]=-2147483648,X2[6499]=0,X2[6496]=1058437413,X2[6497]=1062149053,X2[6494]=-2147483648,X2[6495]=0,X2[6492]=-2147483648,X2[6493]=1065353216,X2[6490]=-2147483648,X2[6491]=0,X2[6488]=-1089046235,X2[6489]=1062149053,X2[6486]=-2147483648,X2[6487]=0,X2[6484]=-1082951543,X2[6485]=1050556148,X2[6482]=-2147483648,X2[6483]=0,X2[6480]=-1082951543,X2[6481]=-1096927500,X2[6478]=0,X2[6479]=0,X2[6476]=-1089046235,X2[6477]=-1085334595,X2[6474]=0,X2[6475]=0,X2[6472]=0,X2[6473]=-1082130432,X2[6470]=0,X2[6471]=0,X2[6468]=1058437413,X2[6469]=-1085334595,X2[6466]=0,X2[6467]=0,X2[6464]=1064532105,X2[6465]=-1096927500,X2[6462]=0,X2[6463]=0,X2[6460]=1064532105,X2[6461]=1050556148,X2[6458]=-1090087228,X2[6459]=0,X2[6456]=1049007812,X2[6457]=1062148969,X2[6454]=-1090087262,X2[6455]=0,X2[6452]=-1087361736,X2[6453]=1056964507,X2[6450]=-1084636042,X2[6451]=0,X2[6448]=-1104782626,X2[6449]=1056964440,X2[6446]=-1090087262,X2[6447]=0,X2[6444]=-1087361736,X2[6445]=-1090519141,X2[6442]=-1084636076,X2[6443]=0,X2[6440]=-1090087362,X2[6441]=-2147483648,X2[6438]=-1090087262,X2[6439]=0,X2[6436]=1062847505,X2[6437]=-2147483648,X2[6434]=-1084636042,X2[6435]=0,X2[6432]=1054458864,X2[6433]=1050556081,X2[6430]=-1090087228,X2[6431]=0,X2[6428]=1049007812,X2[6429]=-1085334679,X2[6426]=-1084636042,X2[6427]=0,X2[6424]=-1104782626,X2[6425]=-1090519208,X2[6422]=-1084636042,X2[6423]=0,X2[6420]=1054458864,X2[6421]=-1096927567,X2[6418]=1065353216,X2[6419]=0,X2[6416]=-2147483648,X2[6417]=0,X2[6414]=1055193471,X2[6415]=0,X2[6412]=1063581978,X2[6413]=0,X2[6410]=1055193572,X2[6411]=0,X2[6408]=1049461434,X2[6409]=1062847522,X2[6406]=1055193572,X2[6407]=0,X2[6404]=-1086767520,X2[6405]=1057396202,X2[6402]=1055193572,X2[6403]=0,X2[6400]=-1086767520,X2[6401]=-1090087446,X2[6398]=1055193605,X2[6399]=0,X2[6396]=1049461434,X2[6397]=-1084636126,X2[6394]=-1092290076,X2[6395]=0,X2[6392]=1060716128,X2[6393]=1057396202,X2[6390]=-1092290043,X2[6391]=0,X2[6388]=-1098022214,X2[6389]=1062847522,X2[6386]=-1092290177,X2[6387]=0,X2[6384]=-1083901670,X2[6385]=-2147483648,X2[6382]=-1092290076,X2[6383]=0,X2[6380]=-1098022214,X2[6381]=-1084636126,X2[6378]=-1092290076,X2[6379]=0,X2[6376]=1060716128,X2[6377]=-1090087446,X2[6374]=-1082130432,X2[6375]=0,X2[6372]=0,X2[6373]=-2147483648,S2[26480]=1);}function t4(A){var e,r=0,f=0,i=0,a=0,n=0,b=0;if(X2[6801]=17760,a=X2[6258],r=X2[A+20>>2],(n=L2(23))&&(X2[(i=n+19&-16)-4>>2]=n),X2[6807]=i,X2[i>>2]=r?17368:17692,X2[6258]=a+2,(r=L2(39))&&(X2[(f=r+19&-16)-4>>2]=r,i=X2[6807]),X2[f+12>>2]=0,X2[f+16>>2]=3,X2[f>>2]=15248,S2[f+4|(n=0)]=0,X2[f+8>>2]=i,X2[6808]=f,f=0,(r=L2(27))&&(X2[(f=r+19&-16)-4>>2]=r),X2[f>>2]=17792,S2[f+4|0]=0,X2[6809]=f,(r=L2(27))&&(X2[(n=r+19&-16)-4>>2]=r),X2[n>>2]=17812,S2[n+4|(f=0)]=0,X2[6810]=n,X2[6258]=a+5,i=0,(r=L2(27))&&(X2[(i=r+19&-16)-4>>2]=r),X2[i>>2]=17832,S2[i+4|0]=0,X2[6811]=i,(r=L2(27))&&(X2[(f=r+19&-16)-4>>2]=r),X2[f>>2]=17852,S2[f+4|(i=0)]=0,X2[6812]=f,f=0,(r=L2(27))&&(X2[(f=r+19&-16)-4>>2]=r),X2[f>>2]=17872,S2[f+4|0]=0,X2[6813]=f,X2[6258]=a+8,(r=L2(27))&&(X2[(i=r+19&-16)-4>>2]=r),X2[i>>2]=17892,S2[i+4|(f=0)]=0,X2[6814]=i,i=0,(r=L2(27))&&(X2[(i=r+19&-16)-4>>2]=r),X2[i>>2]=17912,S2[i+4|0]=0,X2[6815]=i,(r=L2(27))&&(X2[(f=r+19&-16)-4>>2]=r),X2[f>>2]=17932,S2[f+4|(i=0)]=0,X2[6819]=f,X2[6258]=a+11,f=0,(r=L2(27))&&(X2[(f=r+19&-16)-4>>2]=r),X2[6820]=f,X2[f>>2]=17932,S2[f+4|0]=1,(r=L2(27))&&(X2[(i=r+19&-16)-4>>2]=r),X2[i>>2]=17952,S2[i+4|(f=0)]=0,X2[6818]=i,i=0,(r=L2(35))&&(X2[(i=r+19&-16)-4>>2]=r),X2[i+8>>2]=1,X2[i+12>>2]=0,X2[i>>2]=17972,S2[i+4|0]=0,X2[6822]=i,X2[6258]=b=a+14|0,(r=L2(35))&&(X2[(f=r+19&-16)-4>>2]=r),X2[f+8>>2]=1,X2[f+12>>2]=0,X2[f>>2]=17972,X2[6821]=f,S2[f+4|0]=1,e=X2[A+16>>2],r=X2[A>>2])X2[6803]=r,S2[27216]=0;else {if(S2[27216]=1,f=0,X2[6258]=a+15,a=0,(r=L2(43))&&(X2[(a=r+19&-16)-4>>2]=r),X2[a>>2]=868,X2[a+20>>2]=0,n=X2[A+8>>2],X2[a+4>>2]=n,b=X2[6258]+1|0,X2[6258]=b,(r=L2(H2(n,868)+19|0))&&(X2[(f=r+19&-16)-4>>2]=r),X2[a+12>>2]=f,X2[a+16>>2]=f,i=(X2[a+8>>2]=n)-1|0){for(n=X2[a>>2];;)if(f=X2[f>>2]=r=f+n|0,!(i=i-1|0))break;}else r=f;X2[r>>2]=0,X2[6803]=a;}if(r=X2[A+4>>2])X2[6805]=r,S2[27224]=0;else {if(n=116<(0|(r=80<(0|e)?e:80))?r+16&-16:128,S2[27224]=1,f=0,X2[6258]=b+1,a=0,(r=L2(43))&&(X2[(a=r+19&-16)-4>>2]=r),X2[a>>2]=n,X2[a+20>>2]=0,r=X2[A+12>>2],X2[a+4>>2]=r,X2[6258]=X2[6258]+1,(A=L2(16+(3|H2(r,n))|0))&&(X2[(f=A+19&-16)-4>>2]=A),X2[a+12>>2]=f,X2[a+16>>2]=f,i=(X2[a+8>>2]=r)-1|0){for(A=X2[a>>2];;)if(f=X2[f>>2]=r=A+f|0,!(i=i-1|0))break;}else r=f;X2[r>>2]=0,X2[6805]=a;}}function o4(A){var e=0,r=0;return X2[(A|=0)>>2]=17760,J2[A+20|0]&&(e=X2[A+16>>2],(r=X2[e+16>>2])&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2]),e=X2[A+16>>2]),e&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),J2[A+12|0]&&(e=X2[A+8>>2],(r=X2[e+16>>2])&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2]),e=X2[A+8>>2]),e&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),e=X2[A+28>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+28>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+32>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+32>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+36>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+36>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+40>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+40>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+44>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+44>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+48>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+48>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+52>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+52>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+56>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+56>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+72>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+72>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+76>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+76>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+68>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+68>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+84>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+84>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+80>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+80>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),e=X2[A+24>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+24>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),0|A;}function c4(A){return X2[(A|=0)+72>>2];}function k4(A){var e,r,f,i,a=0,n=0,b=0,t=0,o=0;if(!((0|(e=X2[A+12>>2]))<=(0|(r=X2[A+32>>2])))){A:if(X2[A+36>>2]>=(0|e))b=X2[A+40>>2];else {if(e&&(X2[6258]=X2[6258]+1,(n=L2(19+(e<<2)|0))&&(X2[(b=n+19&-16)-4>>2]=n)),a=X2[A+40>>2],1<=(0|r)){for(n=b,o=a,t=r;;)if(X2[n>>2]=X2[o>>2],n=n+4|0,o=o+4|0,!(t=t-1|0))break;}else if(!a){X2[A+40>>2]=b,X2[A+36>>2]=e,S2[A+44|0]=1;break A;}J2[A+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[a-4>>2])),X2[A+40>>2]=b,S2[A+44|0]=1,X2[A+36>>2]=e;}if(v2((r<<2)+b|0,0,e-r<<2),f=(X2[A+32>>2]=e)<<2,(0|(a=X2[A+52>>2]))<(0|e)){A:if(X2[A+56>>2]>=(0|e))b=X2[A+60>>2];else {if(b=0,e&&(X2[6258]=X2[6258]+1,(n=L2(16+(3|f)|0))&&(X2[(b=n+19&-16)-4>>2]=n)),i=X2[A+60>>2],1<=(0|a)){for(n=b,o=i,t=a;;)if(X2[n>>2]=X2[o>>2],n=n+4|0,o=o+4|0,!(t=t-1|0))break;}else if(!i){X2[A+60>>2]=b,X2[A+56>>2]=e,S2[A- -64|0]=1;break A;}J2[A- -64|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+60>>2]=b,S2[A+64|0]=1,X2[A+56>>2]=e;}v2((a<<2)+b|0,0,e-a<<2);}if(1<=(0|(X2[A+52>>2]=e))&&(v2(X2[A+40>>2],255,f),v2(X2[A+60>>2],255,f)),!((0|r)<1))for(o=X2[A+60>>2],n=X2[A+16>>2],b=X2[A+40>>2],t=0;;)if(a=X2[X2[n>>2]+12>>2]|X2[X2[n+4>>2]+12>>2]<<16,a=H2((a=(a<<15^-1)+a|0)>>>10^a,9),a=b+((X2[A+12>>2]-1&((a=((a^=a>>>6)<<11^-1)+a|0)>>>16^a))<<2)|0,X2[o>>2]=X2[a>>2],n=n+16|0,o=o+4|0,(0|r)==(0|(t=(X2[a>>2]=t)+1|0)))break;}}function u4(A,e,r){for(var f,i,a,n,b,t=0,o=0,c=0,k=0,u=0,s=0,l=0,B=0,v=0,d=0,Z=0;;){for(n=e,d=X2[A+12>>2],a=X2[(u=d+((e+r|0)/2<<4)|0)+8>>2],f=X2[u+4>>2],i=X2[u>>2],s=r;;){A:{if(!i)for(c=(e<<4)+d|0;;){o=k=-1,(l=X2[c>>2])&&(o=X2[l+12>>2]),(u=X2[c+4>>2])&&(k=X2[u+12>>2]),t=f?X2[f+12>>2]:-1;e:if(!(-1<(0|o))){if(!((0|t)<(0|k)||l)){if((0|f)!=(0|u))break A;if(X[c+8>>2]>a>>>0)break e;u=f;break A;}if(l)break A;if((0|k)<=(0|t))break A;}c=c+16|0,e=e+1|0;}for(c=(e<<4)+d|0,B=X2[i+12>>2];;){o=k=-1,(l=X2[c>>2])&&(o=X2[l+12>>2]),(u=X2[c+4>>2])&&(k=X2[u+12>>2]),t=f?X2[f+12>>2]:-1;e:if(!((0|B)<(0|o))){if(!((0|t)<(0|k))&&(0|i)==(0|l)){if((0|f)!=(0|u))break A;if(X[c+8>>2]>a>>>0)break e;u=f;break A;}if((0|i)!=(0|l))break A;if((0|k)<=(0|t))break A;}c=c+16|0,e=e+1|0;}}A:{if(!i)for(o=(s<<4)+d|0;;){k=-1,(v=X2[o>>2])&&(k=X2[v+12>>2]),B=f?X2[f+12>>2]:-1,t=-1,(Z=X2[o+4>>2])&&(t=X2[Z+12>>2]);e:if(!((0|k)<-1)){if(!((0|t)<(0|B)||v)){if((0|f)!=(0|Z))break A;if(X[o+8>>2]<a>>>0)break e;break A;}if(v)break A;if((0|B)<=(0|t))break A;}o=o-16|0,s=s-1|0;}for(o=(s<<4)+d|0,b=X2[i+12>>2];;){if(k=-1,(v=X2[o>>2])&&(k=X2[v+12>>2]),B=f?X2[f+12>>2]:-1,t=-1,(Z=X2[o+4>>2])&&(t=X2[Z+12>>2]),!((0|k)<(0|b)))if((0|t)<(0|B)||(0|i)!=(0|v)){if((0|i)!=(0|v))break A;if((0|B)<=(0|t))break A;}else {if((0|f)!=(0|Z))break A;if(X[o+8>>2]>=a>>>0)break A;}o=o-16|0,s=s-1|0;}}if((0|e)<=(0|s)&&(k=X2[(t=(e<<4)+d|0)+8>>2],B=X2[t+12>>2],t=X2[o+4>>2],X2[c>>2]=X2[o>>2],X2[c+4>>2]=t,t=c+8|0,c=X2[(o=o+8|0)+4>>2],X2[t>>2]=X2[o>>2],X2[t+4>>2]=c,t=X2[A+12>>2]+(s<<4)|0,X2[t+4>>2]=u,X2[t+8>>2]=k,X2[t+12>>2]=B,X2[t>>2]=l,s=s-1|0,e=e+1|0),!((0|e)<=(0|s)))break;d=X2[A+12>>2];}if((0|n)<(0|s)&&u4(A,n,s),!((0|e)<(0|r)))break;}}function s4(A){var e,r,f,i=0,a=0;if(X2[(A|=0)>>2]=19460,J2[A+152|0]&&(i=X2[A+96>>2],N2[X2[X2[i>>2]>>2]](i),(i=X2[A+96>>2])&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2]))),1<=(0|(a=X2[A+160>>2])))for(i=8;;)if(e=X2[A+168>>2]+i|0,(f=X2[(r=4+e|0)>>2])&&J2[8+e|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[r>>2]=0,S2[8+e|0]=1,X2[(e=e-4|0)>>2]=0,i=i+20|(X2[4+e>>2]=0),!(a=a-1|0))break;return (i=X2[A+168>>2])&&J2[A+172|0]&&(X2[6259]=X2[6259]+1,q2(X2[i-4>>2])),X2[A+168>>2]=0,X2[A+160>>2]=0,X2[A+164>>2]=0,S2[A+172|0]=1,$0(A+44|0),$0(A+4|0),0|A;}function l4(A,e,r){var f,i,a,n,b,t,o,c=0,k=0,u=0,s=0,l=0,B=0,v=0,d=0;P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);if(K2=o=K2-256|0,A){for(f=U2[e+24>>2],i=U2[e+20>>2],a=U2[e+16>>2],n=U2[e+8>>2],b=U2[e+4>>2],t=U2[e>>2],X2[o>>2]=A,u=64,A=o,e=1;;){A:{e:{r:{if(l=X2[(d=(k=e-1|0)<<2)+A>>2],U2[l>>2]<=a&&U2[l+16>>2]>=t&&U2[l+4>>2]<=i&&U2[l+20>>2]>=b&&U2[l+8>>2]<=f&&U2[l+24>>2]>=n){if(X2[l+40>>2]){if((0|k)!=(0|u))break r;if((0|(c=u?u<<1:1))<(0|e))break r;if(k=0,c&&(X2[6258]=X2[6258]+1,(s=L2(19+(c<<2)|0))&&(X2[(k=s+19&-16)-4>>2]=s)),2<=(0|e))for(B=k,s=A;;)if(X2[B>>2]=X2[s>>2],B=B+4|0,s=s+4|0,!(u=u-1|0))break;if(!v){v=1;break e;}X2[6259]=X2[6259]+(v=1),q2(X2[A-4>>2]);break e;}N2[X2[X2[r>>2]+12>>2]](r,l);}e=k;break A;}c=u,k=A;}if(X2[k+d>>2]=X2[l+36>>2],(0|e)!=(0|c))u=c,A=k;else if((0|(u=e<<1))<=(0|e))u=e,A=k;else {if(A=0,X2[6258]=X2[6258]+1,(c=L2(19+(e<<3)|0))&&(X2[(A=c+19&-16)-4>>2]=c),1<=(0|e))for(B=A,c=k,s=e;;)if(X2[B>>2]=X2[c>>2],B=B+4|0,c=c+4|0,!(s=s-1|0))break;v?(X2[6259]=X2[6259]+(v=1),q2(X2[k-4>>2])):v=1;}X2[(e<<2)+A>>2]=X2[l+40>>2],e=e+1|0;}if(!(0<(0|e)))break;}v&&A&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2]));}K2=256+o|0;}function B4(A,e,r,f){var i,a,n,b,t=0,o=0,c=0,k=0,u=0,s=0;if(e&&r){if(!(127<(0|(k=X2[A+24>>2]))||127<X2[A+28>>2])){if(X2[6258]=X2[6258]+1,(t=L2(1043))&&(X2[(o=t+19&-16)-4>>2]=t),1<=(0|k))for(;;)if(u=X2[A+32>>2]+c|0,s=X2[u+4>>2],X2[(t=o+c|0)>>2]=X2[u>>2],X2[t+4>>2]=s,c=c+8|0,!(k=k-1|0))break;(t=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[t-4>>2])),X2[A+32>>2]=o,X2[A+28>>2]=128,S2[A+36|0]=1;}for(X2[A+24>>2]=128,t=X2[A+32>>2],X2[t+4>>2]=r,X2[t>>2]=e,k=124,e=1;;){if(u=X2[A+32>>2],o=X2[(t=u+(i=(e=(r=e)-1|0)<<3)|0)+4>>2],t=X2[t>>2],(0|k)<(0|e)){if(!((0|(s=(k=X2[A+24>>2])<<1))<=(0|k)||X2[A+28>>2]>=(0|s))){if(u=0,k&&(X2[6258]=X2[6258]+1,(c=L2(19+(k<<4)|0))&&(X2[(u=c+19&-16)-4>>2]=c),!((0|k)<1)))for(c=0;;)if(a=X2[A+32>>2]+c|0,b=X2[4+a>>2],X2[(n=c+u|0)>>2]=X2[a>>2],X2[4+n>>2]=b,c=c+8|0,!(k=k-1|0))break;(k=X2[A+32>>2])&&J2[A+36|0]&&(X2[6259]=X2[6259]+1,q2(X2[k-4>>2])),X2[A+32>>2]=u,S2[A+36|0]=1,X2[A+28>>2]=s;}k=(X2[A+24>>2]=s)-4|0;}if((0|t)==(0|o)?X2[t+40>>2]&&(o=X2[t+36>>2],X2[(e=u+i|0)+4>>2]=o,X2[e>>2]=o,o=(e=r<<3)+X2[A+32>>2]|0,c=X2[t+40>>2],X2[o+4>>2]=c,X2[o>>2]=c,o=X2[t+40>>2],e=8+(e+X2[A+32>>2]|0)|0,X2[e>>2]=X2[t+36>>2],X2[e+4>>2]=o,e=r+2|0):U2[t>>2]<=U2[o+16>>2]&&U2[t+16>>2]>=U2[o>>2]&&U2[t+4>>2]<=U2[o+20>>2]&&U2[t+20>>2]>=U2[o+4>>2]&&U2[t+8>>2]<=U2[o+24>>2]&&U2[t+24>>2]>=U2[o+8>>2]&&(c=X2[o+40>>2],X2[t+40>>2]?(e=X2[t+36>>2],e=c?(X2[(c=u+i|0)+4>>2]=X2[o+36>>2],X2[c>>2]=e,c=X2[t+40>>2],u=(e=r<<3)+X2[A+32>>2]|0,X2[u+4>>2]=X2[o+36>>2],X2[u>>2]=c,c=X2[t+36>>2],u=e+X2[A+32>>2]|0,X2[u+12>>2]=X2[o+40>>2],X2[u+8>>2]=c,t=X2[t+40>>2],e=e+X2[A+32>>2]|0,X2[e+20>>2]=X2[o+40>>2],X2[e+16>>2]=t,r+3|0):(X2[(c=u+i|0)+4>>2]=o,X2[c>>2]=e,e=X2[t+40>>2],t=X2[A+32>>2]+(r<<3)|0,X2[t+4>>2]=o,X2[t>>2]=e,r+1|0)):c?(X2[(e=u+i|0)+4>>2]=X2[o+36>>2],X2[e>>2]=t,e=X2[A+32>>2]+(r<<3)|0,X2[e+4>>2]=X2[o+40>>2],X2[e>>2]=t,e=r+1|0):N2[X2[X2[f>>2]+8>>2]](f,t,o)),!e)break;}}}function v4(A,e,r,f,i,a,n,b,t){var o,c,k,u,s,l,B,v,d,Z,_=0,g=0,E=0,Q=0,w=(P2(0),0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);if(K2=Z=K2-32|0,A){if((0|(_=X2[b+4>>2]))<=127){if(X2[b+8>>2]<=127){if(X2[6258]=X2[6258]+1,(E=L2(531))&&(X2[(g=E+19&-16)-4>>2]=E),1<=(0|_))for(E=_;;)if(X2[g+Q>>2]=X2[X2[b+12>>2]+Q>>2],Q=Q+4|0,!(E=E-1|0))break;(E=X2[b+12>>2])&&J2[b+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[E-4>>2])),X2[b+12>>2]=g,S2[b+16|0]=1,X2[b+8>>2]=128;}for(Q=_<<2,E=_-128|0;;)if(Q=Q+4|(X2[X2[b+12>>2]+Q>>2]=0),!((_=E)>>>0<=(E=_+1|0)>>>0))break;}for(X2[b+4>>2]=128,X2[X2[b+12>>2]>>2]=A,A=126,E=1;;){X2[12+Z>>2]=0,w=X2[b+12>>2],Q=X2[w+(v=(_=E-1|0)<<2)>>2],U2[8+Z>>2]=U2[Q+8>>2]-U2[n+8>>2],U2[4+Z>>2]=U2[Q+4>>2]-U2[n+4>>2],U2[Z>>2]=U2[Q>>2]-U2[n>>2],c=U2[Q+24>>2],k=U2[Q+16>>2],o=U2[a+8>>2],s=U2[a>>2],U2[20+Z>>2]=U2[Q+20>>2]-U2[a+4>>2],U2[16+Z>>2]=k-s,U2[24+Z>>2]=c-o,g=X2[f+4>>2],s=U2[e+4>>2],l=U2[r+4>>2],c=P2(P2(U2[4+((g<<4)+Z|0)>>2]-s)*l),o=U2[r>>2],u=X2[f>>2],B=U2[e>>2],k=P2(o*P2(U2[(1-u<<4)+Z>>2]-B));A:if(!(k<c||(o=P2(P2(U2[(u<<4)+Z>>2]-B)*o),(s=P2(l*P2(U2[4+((1-g<<4)+Z|0)>>2]-s)))<o||(g=X2[f+8>>2],B=U2[e+8>>2],d=U2[r+8>>2],(k=s<k?s:k)<(l=P2(P2(U2[8+((g<<4)+Z|0)>>2]-B)*d))||(c=o<c?c:o,!(!((o=P2(d*P2(U2[8+((1-g<<4)+Z|0)>>2]-B)))<c)&&(c<l?l:c)<i&&(o<k?o:k)>P2(0))))))){if(X2[Q+40>>2]){if((0|A)<(0|_)){if((0|(_=X2[b+4>>2]))<(0|(u=_<<1))){if((0|u)>X2[b+8>>2]){if(w=0,_&&(X2[6258]=X2[6258]+1,(A=L2(19+(_<<3)|0))&&(X2[(w=A+19&-16)-4>>2]=A),!((0|_)<1)))for(g=0,A=_;;)if(X2[g+w>>2]=X2[X2[b+12>>2]+g>>2],g=g+4|0,!(A=A-1|0))break;(A=X2[b+12>>2])&&J2[b+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),X2[b+12>>2]=w,S2[b+16|0]=1,X2[b+8>>2]=u;}if(((X2[(g=_<<2)+w>>2]=0)|u)!=(_+1|0))for(A=_-1|0,g=g+4|0;;)if(g=g+4|(X2[X2[b+12>>2]+g>>2]=0),!(A=A-1|0))break;w=X2[b+12>>2];}A=(X2[b+4>>2]=u)-2|0;}X2[w+v>>2]=X2[Q+36>>2],X2[X2[b+12>>2]+(E<<2)>>2]=X2[Q+40>>2],_=E+1|0;break A;}N2[X2[X2[t>>2]+12>>2]](t,Q);}if(!(E=_))break;}}K2=32+Z|0;}function d4(A){return X2[(A|=0)+96>>2];}function Z4(A){}function _4(A,e){A=X2[(A|=0)+4>>2],N2[X2[X2[A>>2]+8>>2]](A,X2[(e|=0)+36>>2]);}function g4(A,e){var r,f,i,a,n,b,t,o,c,k,u,s,l,B=0,v=0,d=0,Z=(P2(0),P2(0));P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);K2=l=K2-16|0,X2[A+372>>2]=0,X2[A+376>>2]=0,X2[A+252>>2]=2,X2[A+604>>2]=1065353216,X2[A+608>>2]=1065353216,X2[A+408>>2]=1065353216,X2[A+412>>2]=1065353216,X2[A+472>>2]=0,X2[A+476>>2]=0,X2[(B=A+380|0)>>2]=0,X2[B+4>>2]=0,X2[(B=A+388|0)>>2]=0,X2[B+4>>2]=0,X2[(B=A+396|0)>>2]=0,X2[B+4>>2]=0,X2[(B=A+612|0)>>2]=1065353216,X2[B+4>>2]=0,X2[(B=A+420|0)>>2]=0,X2[B+4>>2]=0,X2[A+416>>2]=1065353216,X2[(B=A+428|0)>>2]=0,X2[B+4>>2]=0,X2[(B=A+436|0)>>2]=0,X2[B+4>>2]=0,X2[(B=A+444|0)>>2]=0,X2[B+4>>2]=0,X2[A+452>>2]=0,X2[(B=A+480|0)>>2]=0,X2[B+4>>2]=0,X2[(B=A+488|0)>>2]=0,X2[B+4>>2]=0,X2[(B=A+496|0)>>2]=0,X2[B+4>>2]=0,Z=U2[e+96>>2],r=U2[e+92>>2],U2[12+l>>2]=r,U2[8+l>>2]=Z,X2[4+l>>2]=0,X2[l>>2]=1065353216,U2[A+504>>2]=U2[(r<P2(0)?4+l|0:r>P2(1)?l:12+l|0)>>2],X2[4+l>>2]=0,X2[l>>2]=1065353216,U2[A+508>>2]=U2[(Z<P2(0)?4+l|0:Z>P2(1)?l:8+l|0)>>2],X2[A+668>>2]=0,X2[A+672>>2]=0,B=X2[e+120>>2],X2[A+532>>2]=X2[e+116>>2],X2[A+536>>2]=B,v=X2[e+4>>2],X2[A+540>>2]=v,S2[A+512|0]=J2[e+124|0],B=X2[e+132>>2],X2[A+516>>2]=X2[e+128>>2],X2[A+520>>2]=B,B=X2[e+140>>2],X2[A+524>>2]=X2[e+136>>2],X2[A+528>>2]=B,v?N2[X2[X2[v>>2]+8>>2]](v,B=A+4|0):(B=X2[e+12>>2],X2[A+4>>2]=X2[e+8>>2],X2[A+8>>2]=B,d=X2[(v=e+16|0)+4>>2],X2[(B=A+12|0)>>2]=X2[v>>2],X2[B+4>>2]=d,d=X2[(v=e+32|0)+4>>2],X2[(B=A+28|0)>>2]=X2[v>>2],X2[B+4>>2]=d,d=X2[(v=e+24|0)+4>>2],X2[(B=A+20|0)>>2]=X2[v>>2],X2[B+4>>2]=d,d=X2[(v=e+40|0)+4>>2],X2[(B=A+36|0)>>2]=X2[v>>2],X2[B+4>>2]=d,d=X2[(v=e+48|0)+4>>2],X2[(B=A+44|0)>>2]=X2[v>>2],X2[B+4>>2]=d,d=X2[(v=e- -64|0)+4>>2],X2[(B=A+60|0)>>2]=X2[v>>2],X2[B+4>>2]=d,d=X2[(v=e+56|0)+4>>2],X2[(B=A+52|0)>>2]=X2[v>>2],X2[B+4>>2]=d,B=A+4|0),X2[A+132>>2]=0,X2[A+136>>2]=0,v=X2[B+4>>2],X2[A+68>>2]=X2[B>>2],X2[A+72>>2]=v,X2[(v=A+156|0)>>2]=0,X2[v+4>>2]=0,X2[(v=A+148|0)>>2]=0,X2[v+4>>2]=0,X2[(v=A+140|0)>>2]=0,X2[v+4>>2]=0,s=X2[(d=A+20|0)+4>>2],X2[(v=A+84|0)>>2]=X2[d>>2],X2[v+4>>2]=s,d=X2[(B=B+8|0)+4>>2],X2[(v=A+76|0)>>2]=X2[B>>2],X2[v+4>>2]=d,d=X2[(v=A+28|0)+4>>2],X2[(B=A+92|0)>>2]=X2[v>>2],X2[B+4>>2]=d,d=X2[(v=A+36|0)+4>>2],X2[(B=A+100|0)>>2]=X2[v>>2],X2[B+4>>2]=d,d=X2[(v=A+44|0)+4>>2],X2[(B=A+108|0)>>2]=X2[v>>2],X2[B+4>>2]=d,d=X2[(v=A+52|0)+4>>2],X2[(B=A+116|0)>>2]=X2[v>>2],X2[B+4>>2]=d,d=X2[(v=A+60|0)+4>>2],X2[(B=A+124|0)>>2]=X2[v>>2],X2[B+4>>2]=d,U2[A+228>>2]=U2[e+100>>2],U2[A+236>>2]=U2[e+104>>2],U2[A+240>>2]=U2[e+108>>2],U2[A+232>>2]=U2[e+112>>2],N2[X2[X2[A>>2]+8>>2]](A,X2[e+72>>2]),B=X2[6626],X2[A+568>>2]=B,X2[6626]=B+1,Z=P2(0),B=X2[A+204>>2],(r=U2[e>>2])==P2(0)?X2[A+204>>2]=1|B:(X2[A+204>>2]=-2&B,Z=P2(P2(1)/r)),U2[A+404>>2]=Z,X2[A+436>>2]=0,U2[A+424>>2]=r*U2[A+440>>2],U2[A+432>>2]=r*U2[A+448>>2],U2[A+428>>2]=r*U2[A+444>>2],r=U2[e+84>>2],s=U2[e+80>>2],v=U2[e+76>>2],X2[A+468>>2]=0,d=v!=P2(0)?P2(P2(1)/v):P2(0),U2[A+456>>2]=d,B=s!=P2(0)?P2(P2(1)/s):P2(0),U2[A+460>>2]=B,o=r!=P2(0)?P2(P2(1)/r):P2(0),U2[A+464>>2]=o,X2[A+368>>2]=0,X2[A+352>>2]=0,X2[A+336>>2]=0,r=U2[A+44>>2],s=U2[A+36>>2],v=U2[A+40>>2],c=U2[A+28>>2],k=U2[A+20>>2],u=U2[A+24>>2],n=U2[A+12>>2],b=U2[A+8>>2],t=U2[A+4>>2],X2[A+564>>2]=8,f=P2(d*t),i=P2(B*b),a=P2(o*n),U2[A+324>>2]=P2(P2(t*f)+P2(b*i))+P2(n*a),U2[A+328>>2]=P2(P2(f*k)+P2(i*u))+P2(a*c),U2[A+332>>2]=P2(P2(f*s)+P2(i*v))+P2(a*r),f=P2(d*k),i=P2(B*u),a=P2(o*c),U2[A+340>>2]=P2(P2(t*f)+P2(b*i))+P2(n*a),U2[A+344>>2]=P2(P2(k*f)+P2(u*i))+P2(c*a),U2[A+348>>2]=P2(P2(f*s)+P2(i*v))+P2(a*r),f=t,t=P2(d*s),i=b,b=P2(B*v),a=n,n=P2(o*r),U2[A+356>>2]=P2(P2(f*t)+P2(i*b))+P2(a*n),U2[A+360>>2]=P2(P2(k*t)+P2(u*b))+P2(c*n),U2[A+364>>2]=P2(P2(s*t)+P2(v*b))+P2(r*n),X2[(e=A+596|0)>>2]=0,X2[e+4>>2]=0,X2[(e=A+588|0)>>2]=0,X2[e+4>>2]=0,X2[(e=A+580|0)>>2]=0,X2[e+4>>2]=0,X2[A+572>>2]=0,X2[A+576>>2]=0,r=U2[A+408>>2],s=U2[A+412>>2],U2[A+628>>2]=Z*U2[A+416>>2],U2[A+624>>2]=Z*s,U2[A+620>>2]=Z*r,X2[A+664>>2]=0,X2[(e=A+656|0)>>2]=0,X2[e+4>>2]=0,X2[(e=A+648|0)>>2]=0,X2[e+4>>2]=0,X2[(e=A+640|0)>>2]=0,X2[e+4>>2]=0,X2[(A=A+632|0)>>2]=0,X2[A+4>>2]=0,K2=16+l|0;}function E4(A,e,r,f){var i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h=P2(0),F=P2(0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);K2=C=K2+-64|0,u=U2[e+24>>2],s=U2[e+20>>2],l=U2[e+40>>2],B=U2[e+36>>2],n=U2[A+40>>2],b=U2[A+20>>2],t=U2[A+36>>2],o=U2[A+24>>2],v=U2[e+8>>2],d=U2[e>>2],Z=U2[e+4>>2],_=U2[e+16>>2],g=U2[e+32>>2],F=U2[A+8>>2],i=U2[A+4>>2],k=U2[A+32>>2],c=U2[A+16>>2],a=U2[A>>2],X2[60+C>>2]=0,X2[44+C>>2]=0,Q=P2(P2(b*n)-P2(o*t)),w=P2(P2(o*k)-P2(n*c)),G=P2(P2(t*c)-P2(b*k)),h=P2(P2(1)/P2(P2(P2(a*Q)+P2(i*w))+P2(F*G))),E=P2(P2(P2(o*i)-P2(b*F))*h),o=P2(P2(P2(c*F)-P2(o*a))*h),b=P2(P2(P2(b*a)-P2(c*i))*h),U2[56+C>>2]=P2(P2(g*E)+P2(B*o))+P2(l*b),c=P2(P2(P2(t*F)-P2(n*i))*h),F=P2(P2(P2(n*a)-P2(k*F))*h),i=P2(P2(P2(k*i)-P2(t*a))*h),U2[52+C>>2]=P2(P2(g*c)+P2(B*F))+P2(l*i),U2[40+C>>2]=P2(P2(E*_)+P2(o*s))+P2(b*u),U2[36+C>>2]=P2(P2(c*_)+P2(F*s))+P2(i*u),X2[28+C>>2]=0,a=P2(Q*h),n=P2(w*h),h=P2(G*h),U2[48+C>>2]=P2(P2(g*a)+P2(B*n))+P2(l*h),U2[32+C>>2]=P2(P2(a*_)+P2(n*s))+P2(h*u),U2[24+C>>2]=P2(v*b)+P2(P2(d*E)+P2(Z*o)),U2[20+C>>2]=P2(v*i)+P2(P2(d*c)+P2(Z*F)),U2[16+C>>2]=P2(h*v)+P2(P2(d*a)+P2(Z*n)),Q4(16+C|0,C),a=U2[C>>2],n=U2[4+C>>2],b=U2[8+C>>2],h=U2[12+C>>2],i=P2(P2(1)/P2(O2(P2(P2(P2(P2(a*a)+P2(n*n))+P2(b*b))+P2(h*h))))),m(F=P2(m2(P2(z2(P2(h*i),P2(-1))),P2(1))));A:if(1065353216<=(A=2147483647&(e=S[2]))>>>0)h=P2((0|e)<0?3.141592502593994:0),1065353216!=(0|A)&&(h=P2(P2(0)/P2(F-F)));else e:{if(A>>>0<=1056964607){if(h=P2(1.570796251296997),A>>>0<847249409)break e;h=P2(F*F),h=P2(P2(P2(P2(7.549789415861596e-8)-P2(P2(P2(h*P2(P2(h*P2(P2(h*P2(-.008656363002955914))+P2(-.04274342209100723)))+P2(.16666586697101593)))/P2(P2(h*P2(-.7066296339035034))+P2(1)))*F))-F)+P2(1.570796251296997));break A;}if((0|e)<=-1){h=P2(P2(F+P2(1))*P2(.5)),F=P2(O2(h)),h=P2(P2(1.570796251296997)-P2(F+P2(P2(F*P2(P2(h*P2(P2(h*P2(P2(h*P2(-.008656363002955914))+P2(-.04274342209100723)))+P2(.16666586697101593)))/P2(P2(h*P2(-.7066296339035034))+P2(1))))+P2(-7.549789415861596e-8)))),h=P2(h+h);break A;}h=P2(P2(P2(1)-F)*P2(.5)),z(2,-4096&(m(t=P2(O2(h))),S[2])),F=N(),h=P2(P2(P2(t*P2(P2(h*P2(P2(h*P2(P2(h*P2(-.008656363002955914))+P2(-.04274342209100723)))+P2(.16666586697101593)))/P2(P2(h*P2(-.7066296339035034))+P2(1))))+P2(P2(h-P2(F*F))/P2(t+F)))+F),h=P2(h+h);}U2[f>>2]=h+h,X2[r+12>>2]=0,h=P2(a*i),F=P2(n*i),i=P2(b*i),(a=P2(P2(P2(h*h)+P2(F*F))+P2(i*i)))<P2(14210854715202004e-30)?(X2[r+8>>2]=0,X2[r+12>>2]=0,X2[r>>2]=1065353216,X2[r+4>>2]=0):(n=i,i=P2(P2(1)/P2(O2(a))),U2[r+8>>2]=n*i,U2[r+4>>2]=F*i,U2[r>>2]=h*i),K2=C+64|0;}function Q4(A,e){var r,f,i,a,n=P2(0),b=P2(0),t=0,o=P2(0),c=P2(0),k=K2-16|0,n=U2[A>>2],o=U2[A+20>>2],c=U2[A+40>>2];n=(b=P2(P2(n+o)+c))>P2(0)?(b=P2(O2(P2(b+P2(1)))),n=P2(P2(.5)/b),o=P2(n*P2(U2[A+16>>2]-U2[A+4>>2])),c=P2(n*P2(U2[A+8>>2]-U2[A+32>>2])),b=P2(b*P2(.5)),P2(n*P2(U2[A+36>>2]-U2[A+24>>2]))):(f=(r=n<o?o<c?2:1:(n<c)<<1)<<2,i=(r<<4)+A|0,a=((t=(1+r>>>0)%3|0)<<4)+A|0,r=A+((A=(2+r>>>0)%3|0)<<4)|0,A<<=2,n=P2(O2(P2(P2(P2(U2[i+f>>2]-U2[a+(t<<=2)>>2])-U2[r+A>>2])+P2(1)))),U2[(f|k)>>2]=n*P2(.5),n=P2(P2(.5)/n),U2[12+k>>2]=P2(U2[r+t>>2]-U2[A+a>>2])*n,U2[(k|t)>>2]=n*P2(U2[f+a>>2]+U2[t+i>>2]),U2[(A|k)>>2]=n*P2(U2[r+f>>2]+U2[A+i>>2]),b=U2[12+k>>2],o=U2[8+k>>2],c=U2[4+k>>2],U2[k>>2]),U2[e+12>>2]=b,U2[e+8>>2]=o,U2[e+4>>2]=c,U2[e>>2]=n;}function w4(A,e){var r,f,i,a,n,b,t,o,c,k=0,u=0,s=0,l=0,B=0;P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);2&J2[A+204|0]?(k=X2[A+8>>2],X2[A+68>>2]=X2[A+4>>2],X2[A+72>>2]=k,s=X2[(u=A+12|0)+4>>2],X2[(k=A+76|0)>>2]=X2[u>>2],X2[k+4>>2]=s,s=X2[(u=A+20|0)+4>>2],X2[(k=A+84|0)>>2]=X2[u>>2],X2[k+4>>2]=s,s=X2[(u=A+28|0)+4>>2],X2[(k=A+92|0)>>2]=X2[u>>2],X2[k+4>>2]=s,s=X2[(u=A+36|0)+4>>2],X2[(k=A+100|0)>>2]=X2[u>>2],X2[k+4>>2]=s,s=X2[(u=A+44|0)+4>>2],X2[(k=A+108|0)>>2]=X2[u>>2],X2[k+4>>2]=s,s=X2[(u=A+52|0)+4>>2],X2[(k=A+116|0)>>2]=X2[u>>2],X2[k+4>>2]=s,s=X2[(u=A+60|0)+4>>2],X2[(k=A+124|0)>>2]=X2[u>>2],X2[k+4>>2]=s):(k=X2[e+4>>2],X2[A+68>>2]=X2[e>>2],X2[A+72>>2]=k,s=X2[(u=e+8|0)+4>>2],X2[(k=A+76|0)>>2]=X2[u>>2],X2[k+4>>2]=s,s=X2[(u=e+24|0)+4>>2],X2[(k=A+92|0)>>2]=X2[u>>2],X2[k+4>>2]=s,u=X2[e+20>>2],X2[(k=A+84|0)>>2]=X2[e+16>>2],X2[k+4>>2]=u,u=X2[e+36>>2],X2[(k=A+100|0)>>2]=X2[e+32>>2],X2[k+4>>2]=u,s=X2[(u=e+40|0)+4>>2],X2[(k=A+108|0)>>2]=X2[u>>2],X2[k+4>>2]=s,s=X2[(u=e+56|0)+4>>2],X2[(k=A+124|0)>>2]=X2[u>>2],X2[k+4>>2]=s,u=X2[e+52>>2],X2[(k=A+116|0)>>2]=X2[e+48>>2],X2[k+4>>2]=u),k=X2[A+392>>2],X2[A+148>>2]=X2[A+388>>2],X2[A+152>>2]=k,k=X2[A+376>>2],X2[A+132>>2]=X2[A+372>>2],X2[A+136>>2]=k,s=X2[(u=A+396|0)+4>>2],X2[(k=A+156|0)>>2]=X2[u>>2],X2[k+4>>2]=s,s=X2[(u=A+380|0)+4>>2],X2[(k=A+140|0)>>2]=X2[u>>2],X2[k+4>>2]=s,a=X2[(s=e+8|0)+4>>2],X2[(k=A+12|0)>>2]=X2[s>>2],X2[k+4>>2]=a,u=X2[e+4>>2],X2[A+4>>2]=X2[e>>2],X2[A+8>>2]=u,B=X2[4+(a=e+24|0)>>2],X2[(u=A+28|0)>>2]=X2[a>>2],X2[u+4>>2]=B,B=X2[e+20>>2],X2[(s=A+20|0)>>2]=X2[e+16>>2],X2[s+4>>2]=B,n=X2[4+(l=e+40|0)>>2],X2[(B=a=A+44|0)>>2]=X2[l>>2],X2[4+B>>2]=n,n=X2[e+36>>2],X2[(l=B=A+36|0)>>2]=X2[e+32>>2],X2[4+l>>2]=n,c=X2[4+(n=e+56|0)>>2],X2[(l=A+60|0)>>2]=X2[n>>2],X2[4+l>>2]=c,n=X2[e+52>>2],X2[(l=A+52|0)>>2]=X2[e+48>>2],X2[4+l>>2]=n,c=U2[A+8>>2],e=U2[k>>2],l=U2[u>>2],n=U2[s>>2],k=U2[A+24>>2],u=U2[a>>2],s=U2[A+464>>2],a=U2[B>>2],B=U2[A+40>>2],t=U2[A+460>>2],b=U2[A+4>>2],o=U2[A+456>>2],X2[A+368>>2]=0,X2[A+352>>2]=0,X2[A+336>>2]=0,r=P2(o*a),f=P2(t*B),i=P2(s*u),U2[A+364>>2]=P2(P2(a*r)+P2(B*f))+P2(u*i),U2[A+360>>2]=P2(P2(n*r)+P2(k*f))+P2(l*i),U2[A+356>>2]=P2(P2(b*r)+P2(c*f))+P2(e*i),r=P2(o*n),f=P2(t*k),i=P2(s*l),U2[A+348>>2]=P2(P2(a*r)+P2(B*f))+P2(u*i),U2[A+344>>2]=P2(P2(n*r)+P2(k*f))+P2(l*i),U2[A+340>>2]=P2(P2(b*r)+P2(c*f))+P2(e*i),r=a,a=P2(b*o),f=B,B=P2(c*t),i=u,u=P2(e*s),U2[A+332>>2]=P2(P2(r*a)+P2(f*B))+P2(i*u),U2[A+328>>2]=P2(P2(a*n)+P2(B*k))+P2(u*l),U2[A+324>>2]=P2(P2(b*a)+P2(c*B))+P2(e*u);}function G4(A,e){var r=0,f=0,i=0,a=0,n=0;A:{f=X2[A+548>>2];e:if(!((0|f)<1)){for(i=X2[A+556>>2],r=f;;){if(X2[i>>2]==(0|e))break;if(i=i+4|0,!(r=r-1|0))break e;}if(r)break A;}if(X2[A+552>>2]==(0|f)&&!((0|(a=f?f<<1:1))<=(0|f))){if(a&&(X2[6258]=X2[6258]+1,(r=L2(19+(a<<2)|0))&&(X2[(n=r+19&-16)-4>>2]=r)),1<=(0|f))for(i=0,r=f;;)if(X2[i+n>>2]=X2[X2[A+556>>2]+i>>2],i=i+4|0,!(r=r-1|0))break;(r=X2[A+556>>2])&&J2[A+560|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2]),f=X2[A+548>>2]),X2[A+556>>2]=n,X2[A+552>>2]=a,S2[A+560|0]=1;}if(X2[X2[A+556>>2]+(f<<2)>>2]=e,X2[A+548>>2]=f+1,r=X2[e+32>>2],(0|(n=X2[e+28>>2]))==(0|A)){if((0|(e=X2[A+288>>2]))==X2[A+292>>2]&&!((0|(a=e?e<<1:1))<=(0|e))){if(n=0,a&&(X2[6258]=X2[6258]+1,(f=L2(19+(a<<2)|0))&&(X2[(n=f+19&-16)-4>>2]=f)),1<=(0|e))for(i=0,f=e;;)if(X2[i+n>>2]=X2[X2[A+296>>2]+i>>2],i=i+4|0,!(f=f-1|0))break;(f=X2[A+296>>2])&&J2[A+300|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2]),e=X2[A+288>>2]),X2[A+296>>2]=n,X2[A+292>>2]=a,S2[A+300|0]=1;}}else {if((0|(e=X2[r+288>>2]))==X2[r+292>>2]&&!((0|(a=e?e<<1:1))<=(0|e))){if(f=0,a&&(X2[6258]=X2[6258]+1,(A=L2(19+(a<<2)|0))&&(X2[(f=A+19&-16)-4>>2]=A)),1<=(0|e))for(i=0,A=e;;)if(X2[f+i>>2]=X2[X2[r+296>>2]+i>>2],i=i+4|0,!(A=A-1|0))break;(A=X2[r+296>>2])&&J2[r+300|0]&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2]),e=X2[r+288>>2]),X2[r+296>>2]=f,X2[r+292>>2]=a,S2[r+300|0]=1;}A=r,r=n;}X2[A+288>>2]=e+1,X2[A+280>>2]=(-1^e)>>>31,X2[X2[A+296>>2]+(e<<2)>>2]=r;}}function C4(A,e){var r=0,f=0,i=0,a=0;A:if(!((0|(a=X2[A+548>>2]))<1)){for(f=i=X2[A+556>>2];;){if(X2[f>>2]==(0|e))break;if(f=f+4|0,(0|a)==(0|(r=r+1|0)))break A;}if(!((0|a)<=(0|r))){r=0,f=i;e:{for(;;){if(X2[f>>2]==(0|e))break;if(f=f+4|0,(0|a)==(0|(r=r+1|0)))break e;}(0|a)<=(0|r)||(r=i,X2[f>>2]=X2[r+(i=(f=a-1|0)<<2)>>2],X2[A+548>>2]=f,X2[i+X2[A+556>>2]>>2]=e);}if(a=X2[e+32>>2],(0|(i=X2[e+28>>2]))==(0|A)){e=X2[A+288>>2];e:if(!((0|e)<1)){for(r=0,f=i=X2[A+296>>2];;){if(X2[f>>2]==(0|a))break;if(f=f+4|0,(0|(r=r+1|0))==(0|e))break e;}(0|e)<=(0|r)||(r=i,X2[f>>2]=X2[r+(i=(e=e-1|0)<<2)>>2],X2[A+288>>2]=e,X2[i+X2[A+296>>2]>>2]=a);}return void(X2[A+280>>2]=0<(0|e));}e=X2[a+288>>2];e:if(!((0|e)<1)){for(r=0,f=A=X2[a+296>>2];;){if((0|i)==X2[f>>2])break;if(f=f+4|0,(0|(r=r+1|0))==(0|e))break e;}(0|e)<=(0|r)||(r=A,X2[f>>2]=X2[r+(A=(e=e-1|0)<<2)>>2],X2[a+288>>2]=e,X2[A+X2[a+296>>2]>>2]=i);}X2[a+280>>2]=0<(0|e);}}}function h4(A){var e;return X2[(A|=0)>>2]=19888,(e=X2[A+204>>2])&&J2[A+208|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+204>>2]=0,S2[A+208|0]=1,X2[(e=A+196|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+176>>2])&&J2[A+180|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+176>>2]=0,S2[A+180|0]=1,X2[(e=A+168|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+156>>2])&&J2[A+160|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+156>>2]=0,S2[A+160|0]=1,X2[(e=A+148|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+136>>2])&&J2[A+140|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+136>>2]=0,S2[A+140|0]=1,X2[(e=A+128|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+116>>2])&&J2[A+120|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+116>>2]=0,S2[A+120|0]=1,X2[(e=A+108|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+96>>2])&&J2[A+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+96>>2]=0,S2[A+100|0]=1,X2[(e=A+88|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+76>>2])&&J2[A+80|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+76>>2]=0,S2[A+80|0]=1,X2[(e=A+68|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+56>>2])&&J2[A+60|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+56>>2]=0,S2[A+60|0]=1,X2[(e=A+48|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+36>>2])&&J2[A+40|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+36>>2]=0,S2[A+40|0]=1,X2[(e=A+28|0)>>2]=0,X2[4+e>>2]=0,(e=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+16>>2]=0,S2[A+20|0]=1,X2[(e=A+8|0)>>2]=0,(X2[4+e>>2]=0)|A;}function F4(A,e,r){var f,i,a,n,b,t,o,c,k,u,s=0,l=(P2(0),0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);return K2=u=K2-256|0,-1<(0|(l=X2[e+212>>2]))||(2&(s=X2[e+252>>2])&&(2&J2[(s=s<<30>>31&e)+204|0]||U2[s+404>>2]!=P2(0))?(l=X2[A+8>>2],v2(8+u|0,0,244),A=R4(A+4|0,8+u|0),s=X2[e+252>>2],X2[(o=A+88|0)>>2]=0,X2[4+o>>2]=0,X2[(o=A+80|0)>>2]=0,X2[4+o>>2]=0,X2[(o=A+72|0)>>2]=0,X2[4+o>>2]=0,X2[A+64>>2]=0,X2[A+68>>2]=0,X2[A+144>>2]=0,X2[A+148>>2]=0,X2[(o=A+152|0)>>2]=0,X2[4+o>>2]=0,X2[(o=A+160|0)>>2]=0,X2[4+o>>2]=0,X2[(o=A+168|0)>>2]=0,X2[4+o>>2]=0,2&s?(o=X2[(s=s<<30>>31&e)+8>>2],X2[A>>2]=X2[s+4>>2],X2[A+4>>2]=o,c=X2[4+(t=s+12|0)>>2],X2[(o=A+8|0)>>2]=X2[t>>2],X2[4+o>>2]=c,c=X2[4+(t=s+28|0)>>2],X2[(o=A+24|0)>>2]=X2[t>>2],X2[4+o>>2]=c,t=X2[4+(o=s+20|0)>>2],X2[A+16>>2]=X2[o>>2],X2[A+20>>2]=t,c=X2[4+(t=s+44|0)>>2],X2[(o=A+40|0)>>2]=X2[t>>2],X2[4+o>>2]=c,t=X2[4+(o=s+36|0)>>2],X2[A+32>>2]=X2[o>>2],X2[A+36>>2]=t,t=X2[4+(o=s+52|0)>>2],X2[A+48>>2]=X2[o>>2],X2[A+52>>2]=t,c=X2[4+(t=s+60|0)>>2],X2[(o=A+56|0)>>2]=X2[t>>2],X2[4+o>>2]=c,i=U2[s+412>>2],a=U2[(o=s+416|0)>>2],n=U2[s+408>>2],f=U2[s+404>>2],X2[A+140>>2]=0,U2[A+136>>2]=f*a,U2[A+132>>2]=f*i,U2[A+128>>2]=f*n,X2[A+240>>2]=s,b=X2[4+(c=s+612|0)>>2],X2[(t=A+104|0)>>2]=X2[c>>2],X2[4+t>>2]=b,t=X2[s+608>>2],X2[A+96>>2]=X2[s+604>>2],X2[A+100>>2]=t,c=X2[4+o>>2],X2[(t=A+120|0)>>2]=X2[o>>2],X2[4+t>>2]=c,o=X2[s+412>>2],X2[A+112>>2]=X2[s+408>>2],X2[A+116>>2]=o,c=X2[4+(t=s+380|0)>>2],X2[(o=A+184|0)>>2]=X2[t>>2],X2[4+o>>2]=c,o=X2[s+376>>2],X2[A+176>>2]=X2[s+372>>2],X2[A+180>>2]=o,o=X2[s+392>>2],X2[A+192>>2]=X2[s+388>>2],X2[A+196>>2]=o,c=X2[4+(t=s+396|0)>>2],X2[(o=A+200|0)>>2]=X2[t>>2],X2[4+o>>2]=c,i=U2[s+476>>2],a=U2[s+480>>2],n=U2[s+472>>2],f=U2[s+404>>2],X2[A+220>>2]=0,U2[A+216>>2]=P2(f*a)*r,U2[A+212>>2]=P2(f*i)*r,U2[A+208>>2]=P2(f*n)*r,n=U2[s+340>>2],b=U2[s+356>>2],t=U2[s+328>>2],o=U2[s+344>>2],c=U2[s+360>>2],k=U2[s+324>>2],f=U2[s+488>>2],i=U2[s+492>>2],a=U2[s+496>>2],U2[A+232>>2]=P2(P2(P2(f*U2[s+332>>2])+P2(i*U2[s+348>>2]))+P2(a*U2[s+364>>2]))*r,U2[A+228>>2]=P2(P2(P2(f*t)+P2(i*o))+P2(a*c))*r,U2[A+224>>2]=P2(P2(P2(k*f)+P2(n*i))+P2(b*a))*r):(X2[A+4>>2]=0,X2[A+8>>2]=0,X2[A>>2]=1065353216,X2[A+240>>2]=0,X2[A+128>>2]=0,X2[A+132>>2]=0,X2[A+112>>2]=1065353216,X2[A+116>>2]=1065353216,X2[A+96>>2]=1065353216,X2[A+100>>2]=1065353216,X2[A+176>>2]=0,X2[A+180>>2]=0,X2[(s=A+12|0)>>2]=0,X2[s+4>>2]=0,X2[(s=A+24|0)>>2]=0,X2[s+4>>2]=0,X2[A+20>>2]=1065353216,X2[(s=A+32|0)>>2]=0,X2[s+4>>2]=0,X2[(s=A+44|0)>>2]=0,X2[s+4>>2]=0,X2[A+40>>2]=1065353216,X2[(s=A+52|0)>>2]=0,X2[s+4>>2]=0,X2[A+60>>2]=0,X2[(s=A+136|0)>>2]=0,X2[s+4>>2]=0,X2[(s=A+120|0)>>2]=1065353216,X2[s+4>>2]=0,X2[(s=A+104|0)>>2]=1065353216,X2[s+4>>2]=0,X2[A+232>>2]=0,X2[(s=A+224|0)>>2]=0,X2[s+4>>2]=0,X2[(s=A+216|0)>>2]=0,X2[s+4>>2]=0,X2[(s=A+208|0)>>2]=0,X2[s+4>>2]=0,X2[(s=A+200|0)>>2]=0,X2[s+4>>2]=0,X2[(s=A+192|0)>>2]=0,X2[s+4>>2]=0,X2[(s=A+184|0)>>2]=0,X2[s+4>>2]=0),X2[A+236>>2]=0,X2[e+212>>2]=l):-1<(0|(l=X2[A+188>>2]))||(X2[A+188>>2]=X2[A+8>>2],v2(8+u|0,0,244),e=R4(A+4|0,8+u|0),X2[(s=e+88|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+80|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+72|0)>>2]=0,X2[s+4>>2]=0,X2[e+64>>2]=0,X2[e+68>>2]=0,X2[e+144>>2]=0,X2[e+148>>2]=0,X2[(s=e+152|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+160|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+168|0)>>2]=0,X2[s+4>>2]=0,X2[e+4>>2]=0,X2[e+8>>2]=0,X2[e>>2]=1065353216,X2[(s=e+12|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+24|0)>>2]=0,X2[s+4>>2]=0,X2[e+20>>2]=1065353216,X2[(s=e+32|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+44|0)>>2]=0,X2[s+4>>2]=0,X2[e+40>>2]=1065353216,X2[(s=e+52|0)>>2]=0,X2[s+4>>2]=0,X2[e+60>>2]=0,X2[(s=e+136|0)>>2]=0,X2[s+4>>2]=0,X2[e+128>>2]=0,X2[e+132>>2]=0,X2[(s=e+120|0)>>2]=1065353216,X2[s+4>>2]=0,X2[e+112>>2]=1065353216,X2[e+116>>2]=1065353216,X2[(s=e+104|0)>>2]=1065353216,X2[s+4>>2]=0,X2[e+96>>2]=1065353216,X2[e+100>>2]=1065353216,X2[(s=e+232|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+224|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+216|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+208|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+200|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+192|0)>>2]=0,X2[s+4>>2]=0,X2[(s=e+184|0)>>2]=0,X2[s+4>>2]=0,X2[e+176>>2]=0,X2[e+180>>2]=0,X2[e+240>>2]=0,l=X2[A+188>>2])),K2=256+u|0,l;}function Y4(A,e,r,f,i,a){var n,b,t,o,c,k=0,u=0,s=P2(0),l=P2(0),B=P2(0),v=P2(0),d=P2(0),Z=0,_=(P2(0),P2(0),0),g=P2(0),E=P2(0),Q=P2(0),w=P2(0),G=P2(0),C=P2(0),h=(P2(0),P2(0),P2(0)),F=P2(0),Y=P2(0),m=P2(0),k=c=X2[A+88>>2];if((0|k)==X2[A+92>>2]&&!((0|(Z=(k=c)?k<<1:1))<=(0|k))){if(Z&&(X2[6258]=X2[6258]+1,(k=L2(H2(Z,152)+19|0))&&(X2[(_=k+19&-16)-4>>2]=k)),1<=(0|c))for(k=0,u=c;;)if($2(k+_|0,X2[A+96>>2]+k|0,152),k=k+152|0,!(u=u-1|0))break;(k=X2[A+96>>2])&&J2[A+100|0]&&(X2[6259]=X2[6259]+1,q2(X2[k-4>>2])),X2[A+96>>2]=_,X2[A+92>>2]=Z,S2[A+100|0]=1,k=X2[A+88>>2];}X2[A+88>>2]=k+1,k=(Z=X2[A+96>>2])+H2(c,152)|0,X2[k+16>>2]=0,X2[k+20>>2]=0,X2[k+48>>2]=-2147483648,X2[k+52>>2]=-2147483648,X2[(u=k+24|0)>>2]=0,X2[u+4>>2]=0,X2[(u=k+56|0)>>2]=-2147483648,X2[u+4>>2]=0,U2[k+104>>2]=a,X2[k+96>>2]=0,X2[k+100>>2]=0,_=X2[A+16>>2],A=X2[240+(_+H2(r,244)|0)>>2],u=X2[240+(_+H2(f,244)|0)>>2],X2[k+132>>2]=0,X2[k+140>>2]=i,X2[k+148>>2]=f,X2[k+144>>2]=r,n=U2[e+8>>2],t=U2[e+4>>2],l=U2[e>>2],X2[k+12>>2]=0,o=P2(-l),U2[k>>2]=o,B=P2(-t),U2[k+4>>2]=B,U2[k+8>>2]=-n,i=k,s=A?(v=P2(P2(P2(P2(U2[A+360>>2]*B)-P2(l*U2[A+356>>2]))-P2(n*U2[A+364>>2]))*U2[A+612>>2]),d=P2(P2(P2(P2(U2[A+344>>2]*B)-P2(l*U2[A+340>>2]))-P2(n*U2[A+348>>2]))*U2[A+608>>2]),P2(P2(P2(P2(U2[A+328>>2]*B)-P2(l*U2[A+324>>2]))-P2(n*U2[A+332>>2]))*U2[A+604>>2])):P2(0),U2[i+64>>2]=s,X2[k+76>>2]=0,U2[k+72>>2]=v,U2[k+68>>2]=d,b=U2[e>>2],v=U2[e+4>>2],d=U2[e+8>>2],U2[k+44>>2]=U2[e+12>>2],U2[k+40>>2]=d,U2[k+36>>2]=v,U2[k+32>>2]=b,i=e=Z+H2(c,152)|0,s=u?(Q=P2(P2(P2(P2(b*U2[u+356>>2])+P2(v*U2[u+360>>2]))+P2(d*U2[u+364>>2]))*U2[u+612>>2]),g=P2(P2(P2(P2(b*U2[u+340>>2])+P2(v*U2[u+344>>2]))+P2(d*U2[u+348>>2]))*U2[u+608>>2]),P2(P2(P2(P2(b*U2[u+324>>2])+P2(v*U2[u+328>>2]))+P2(d*U2[u+332>>2]))*U2[u+604>>2])):P2(0),U2[i+80>>2]=s,X2[e+92>>2]=0,U2[e+88>>2]=Q,U2[e+84>>2]=g,g=P2(0),Q=P2(0),e=Z+H2(c,152)|0,s=A?(w=P2(P2(P2(U2[A+360>>2]*B)-P2(l*U2[A+356>>2]))-P2(n*U2[A+364>>2])),g=P2(P2(P2(U2[A+328>>2]*B)-P2(l*U2[A+324>>2]))-P2(n*U2[A+332>>2])),P2(P2(P2(U2[A+344>>2]*B)-P2(l*U2[A+340>>2]))-P2(n*U2[A+348>>2]))):P2(0),s=P2(P2(P2(P2(s*B)-P2(l*g))-P2(n*w))+P2(0)),E=u?(G=P2(P2(P2(b*U2[u+356>>2])+P2(v*U2[u+360>>2]))+P2(d*U2[u+364>>2])),C=P2(P2(P2(b*U2[u+340>>2])+P2(v*U2[u+344>>2]))+P2(d*U2[u+348>>2])),P2(P2(P2(U2[u+324>>2]*b)+P2(U2[u+328>>2]*v))+P2(U2[u+332>>2]*d))):P2(0),E=P2(P2(1)/P2(s+P2(P2(P2(E*b)+P2(C*v))+P2(G*d)))),U2[e+108>>2]=E,l=P2(0),B=P2(0),g=P2(0),w=P2(0),A&&(A=_+H2(r,244)|0,l=P2(P2(U2[A+176>>2]+U2[A+208>>2])*P2(0)),w=U2[A+192>>2],g=U2[A+200>>2],Q=U2[A+196>>2],h=P2(P2(U2[A+184>>2]+U2[A+216>>2])*P2(0)),B=P2(P2(U2[A+180>>2]+U2[A+212>>2])*P2(0))),C=u?(A=_+H2(f,244)|0,G=P2(P2(U2[A+176>>2]+U2[A+208>>2])*P2(-0)),F=U2[A+192>>2],Y=U2[A+200>>2],m=U2[A+196>>2],s=P2(P2(U2[A+180>>2]+U2[A+212>>2])*P2(-0)),P2(P2(U2[A+184>>2]+U2[A+216>>2])*P2(-0))):(G=P2(-0),s=P2(-0),P2(-0)),A=Z+H2(c,152)|0,U2[A+124>>2]=a,U2[A+120>>2]=-a,X2[A+116>>2]=0,U2[A+112>>2]=E*P2(P2(0)-P2(P2(P2(P2(l+B)+h)+P2(P2(P2(w*o)-P2(t*Q))-P2(n*g)))+P2(P2(P2(G+s)+C)+P2(P2(d*Y)+P2(P2(v*m)+P2(b*F))))));}function m4(A,e,x,y,r,f,i,a,n,V,p,M){var b,t,o,c,k=0,u=0,s=P2(0),l=P2(0),B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=P2(0),g=P2(0),E=P2(0),Q=0,w=0,G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=P2(0),R=P2(0),D=P2(0),T=P2(0),W=P2(0),I=(P2(0),P2(0)),S=P2(0),X=P2(0),J=P2(0),U=P2(0),k=(P2(0),P2(0),c=X2[A+68>>2]);if((0|k)==X2[A+72>>2]&&!((0|(Q=(k=c)?k<<1:1))<=(0|k))){if(Q&&(X2[6258]=X2[6258]+1,(k=L2(H2(Q,152)+19|0))&&(X2[(u=k+19&-16)-4>>2]=k)),1<=(0|c))for(k=0,w=c;;)if($2(k+u|0,X2[A+76>>2]+k|0,152),k=k+152|0,!(w=w-1|0))break;(k=X2[A+76>>2])&&J2[A+80|0]&&(X2[6259]=X2[6259]+1,q2(X2[k-4>>2])),X2[A+76>>2]=u,X2[A+72>>2]=Q,S2[A+80|0]=1,k=X2[A+68>>2];}X2[A+68>>2]=k+1,k=(w=X2[A+76>>2])+H2(c,152)|0,X2[k+140>>2]=r,X2[k+148>>2]=y,X2[k+144>>2]=x,b=U2[f+84>>2],U2[k+104>>2]=b,X2[k+96>>2]=0,X2[k+100>>2]=0,Q=X2[A+16>>2],A=X2[240+(Q+H2(x,244)|0)>>2],r=X2[240+(Q+H2(y,244)|0)>>2],X2[k+132>>2]=0,A?(u=X2[e+4>>2],X2[k+16>>2]=X2[e>>2],X2[k+20>>2]=u,o=X2[4+(t=e+8|0)>>2],X2[(u=k+24|0)>>2]=X2[t>>2],X2[u+4>>2]=o,B=U2[i>>2],s=U2[i+4>>2],l=U2[i+8>>2],X2[k+12>>2]=0,I=U2[u>>2],S=U2[k+20>>2],m=P2(P2(s*I)-P2(l*S)),U2[k>>2]=m,X=U2[k+16>>2],N=P2(P2(S*B)-P2(s*X)),U2[k+8>>2]=N,R=P2(P2(l*X)-P2(I*B)),U2[k+4>>2]=R,B=U2[A+332>>2],s=U2[A+328>>2],l=U2[A+608>>2],v=U2[A+348>>2],Z=U2[A+340>>2],E=U2[A+344>>2],d=U2[A+612>>2],G=U2[A+364>>2],_=U2[A+356>>2],g=U2[A+360>>2],D=U2[A+604>>2],F=U2[A+324>>2],X2[k+76>>2]=0,d=P2(d*P2(P2(P2(m*_)+P2(R*g))+P2(N*G))),U2[k+72>>2]=d,Z=P2(l*P2(P2(P2(m*Z)+P2(R*E))+P2(N*v))),U2[k+68>>2]=Z,E=P2(D*P2(P2(P2(m*F)+P2(R*s))+P2(N*B))),U2[k+64>>2]=E):(X2[k>>2]=0,X2[k+4>>2]=0,X2[(u=k+8|0)>>2]=0,X2[u+4>>2]=0,X2[(u=k+16|0)>>2]=0,X2[u+4>>2]=0,X2[(u=k+24|0)>>2]=0,X2[u+4>>2]=0,X2[k+64>>2]=0,X2[k+68>>2]=0,X2[(k=k+72|0)>>2]=0,X2[k+4>>2]=0),r?(B=U2[e+4>>2],s=U2[e+8>>2],k=w+H2(c,152)|0,l=U2[e>>2],D=P2(-l),U2[k+48>>2]=D,X2[k+60>>2]=0,J=P2(-s),U2[k+56>>2]=J,U=P2(-B),U2[k+52>>2]=U,v=U2[a+8>>2],g=U2[a+4>>2],_=U2[a>>2],X2[k+44>>2]=0,G=P2(P2(l*g)-P2(B*_)),U2[k+40>>2]=G,_=P2(P2(s*_)-P2(l*v)),U2[k+36>>2]=_,g=P2(P2(B*v)-P2(s*g)),U2[k+32>>2]=g,B=U2[r+332>>2],v=U2[r+328>>2],l=U2[r+608>>2],F=U2[r+348>>2],h=U2[r+340>>2],C=U2[r+344>>2],s=U2[r+612>>2],Y=U2[r+364>>2],T=U2[r+356>>2],W=U2[r+360>>2],t=U2[r+604>>2],o=U2[r+324>>2],X2[k+92>>2]=0,s=P2(s*P2(P2(P2(g*T)+P2(_*W))+P2(G*Y))),U2[k+88>>2]=s,l=P2(l*P2(P2(P2(g*h)+P2(_*C))+P2(G*F))),U2[k+84>>2]=l,v=P2(t*P2(P2(P2(g*o)+P2(_*v))+P2(G*B))),U2[k+80>>2]=v):(k=w+H2(c,152)|0,X2[k+80>>2]=0,X2[k+84>>2]=0,X2[k+32>>2]=0,X2[k+36>>2]=0,X2[(u=k+88|0)>>2]=0,X2[u+4>>2]=0,X2[(u=k+40|0)>>2]=0,X2[u+4>>2]=0,X2[(u=k+48|0)>>2]=0,X2[u+4>>2]=0,X2[(k=k+56|0)>>2]=0,X2[k+4>>2]=0,G=P2(0),_=P2(0),g=P2(0),D=P2(0),s=P2(0),l=P2(0),v=P2(0)),F=P2(0),k=w+H2(c,152)|0,B=n,n=A?(n=U2[i+8>>2],h=U2[i+4>>2],Y=P2(P2(P2(Z*n)-P2(d*h))*U2[e>>2]),C=d,d=U2[i>>2],P2(U2[A+404>>2]+P2(P2(Y+P2(P2(P2(C*d)-P2(n*E))*U2[e+4>>2]))+P2(P2(P2(h*E)-P2(Z*d))*U2[e+8>>2])))):P2(0),s=r?(d=U2[a+4>>2],Z=U2[a+8>>2],E=P2(P2(P2(s*d)-P2(l*Z))*U2[e>>2]),C=s,s=U2[a>>2],P2(U2[r+404>>2]+P2(P2(E+P2(P2(P2(v*Z)-P2(C*s))*U2[e+4>>2]))+P2(P2(P2(l*s)-P2(v*d))*U2[e+8>>2])))):P2(0),B=P2(B/P2(n+s)),U2[k+108>>2]=B,h=P2(0),d=P2(0),Z=P2(0),E=P2(0),s=P2(0),l=P2(0),A&&(A=Q+H2(x,244)|0,Z=P2(U2[A+176>>2]+U2[A+208>>2]),h=P2(U2[A+184>>2]+U2[A+216>>2]),E=U2[A+192>>2],l=U2[A+200>>2],d=P2(U2[A+180>>2]+U2[A+212>>2]),s=U2[A+196>>2]),v=P2(0),n=P2(0),C=P2(0),Y=P2(0),T=P2(0),r&&(A=Q+H2(y,244)|0,F=P2(U2[A+176>>2]+U2[A+208>>2]),v=P2(U2[A+180>>2]+U2[A+212>>2]),T=U2[A+192>>2],C=U2[A+200>>2],Y=U2[A+196>>2],n=P2(U2[A+184>>2]+U2[A+216>>2])),W=P2(0),16&J2[f+128|0]&&(W=P2(B*P2(P2(U2[V+44>>2]*P2(-P2(P2(P2(P2(U2[f+48>>2]-U2[f+32>>2])*U2[e>>2])+P2(P2(U2[f+52>>2]-U2[f+36>>2])*U2[e+4>>2]))+P2(P2(U2[f+56>>2]-U2[f+40>>2])*U2[e+8>>2]))))/U2[V+12>>2]))),A=w+H2(c,152)|0,X2[A+128>>2]=0,U2[A+124>>2]=b,U2[A+120>>2]=-b,U2[A+116>>2]=M,U2[A+112>>2]=P2(B*P2(p-P2(P2(P2(P2(P2(Z*X)+P2(d*S))+P2(h*I))+P2(P2(P2(E*m)+P2(s*R))+P2(l*N)))+P2(P2(P2(P2(F*D)+P2(v*U))+P2(n*J))+P2(P2(P2(T*g)+P2(Y*_))+P2(C*G))))))+W;}function N4(A,e,r,f,i,a,n){var b,t,o,c,k,u,s,l=P2(0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);K2=s=K2-16|0,l=U2[A+52>>2],b=U2[A+56>>2],t=U2[A+48>>2],X2[n+60>>2]=0,U2[n+48>>2]=t+P2(e*a),U2[n+56>>2]=b+P2(f*a),U2[n+52>>2]=l+P2(r*a),f=U2[i>>2],k=U2[i+4>>2],u=U2[i+8>>2],e=(e=P2(P2(P2(f*f)+P2(k*k))+P2(u*u)))>P2(1.1920928955078125e-7)?P2(O2(e)):P2(0),e=(r=P2(e*a)>P2(.7853981852531433)?P2(P2(.7853981852531433)/a):e)<P2(.0010000000474974513)?P2(P2(a*P2(.5))+P2(r*P2(P2(P2(P2(a*a)*a)*P2(-.02083333395421505))*r))):P2(o0(P2(P2(r*P2(.5))*a))/r),Q4(A,s),l=U2[4+s>>2],b=U2[12+s>>2],r=c0(P2(P2(r*a)*P2(.5))),t=P2(f*e),o=U2[s>>2],k=P2(k*e),u=P2(u*e),c=U2[8+s>>2],f=P2(P2(P2(P2(b*r)-P2(t*o))-P2(l*k))-P2(u*c)),e=P2(P2(P2(P2(u*b)+P2(r*c))+P2(t*l))-P2(k*o)),a=P2(P2(P2(P2(r*o)+P2(t*b))+P2(k*c))-P2(u*l)),r=P2(P2(P2(u*o)+P2(P2(k*b)+P2(r*l)))-P2(t*c)),(l=P2(P2(f*f)+P2(P2(e*e)+P2(P2(a*a)+P2(r*r)))))>P2(1.1920928955078125e-7)&&(l=P2(P2(1)/P2(O2(l))),f=P2(f*l),e=P2(e*l),r=P2(r*l),a=P2(a*l),l=P2(P2(f*f)+P2(P2(e*e)+P2(P2(r*r)+P2(a*a))))),l>P2(1.1920928955078125e-7)?(X2[n+12>>2]=0,X2[n+44>>2]=0,X2[n+28>>2]=0,b=P2(P2(2)/l),l=P2(e*b),t=P2(r*l),o=P2(a*b),k=P2(f*o),U2[n+36>>2]=t+k,u=P2(a*l),b=P2(r*b),c=P2(f*b),U2[n+32>>2]=u-c,U2[n+24>>2]=t-k,t=P2(a*b),f=P2(f*l),U2[n+16>>2]=t+f,U2[n+8>>2]=u+c,U2[n+4>>2]=t-f,f=P2(a*o),r=P2(r*b),U2[n+40>>2]=P2(1)-P2(f+r),e=P2(e*l),U2[n+20>>2]=P2(1)-P2(f+e),U2[n>>2]=P2(1)-P2(r+e)):(i=X2[A+4>>2],X2[n>>2]=X2[A>>2],X2[n+4>>2]=i,u=X2[4+(k=A+8|0)>>2],X2[(i=n+8|0)>>2]=X2[k>>2],X2[i+4>>2]=u,i=X2[A+20>>2],X2[n+16>>2]=X2[A+16>>2],X2[n+20>>2]=i,u=X2[4+(k=A+24|0)>>2],X2[(i=n+24|0)>>2]=X2[k>>2],X2[i+4>>2]=u,i=X2[A+36>>2],X2[n+32>>2]=X2[A+32>>2],X2[n+36>>2]=i,i=n+40|0,n=X2[(A=A+40|0)+4>>2],X2[i>>2]=X2[A>>2],X2[i+4>>2]=n),K2=16+s|0;}function R4(A,e){var r,f,i,a,n,b,t,o=0,c=0,k=0,u=0,s=0,c=t=X2[A+4>>2];if((0|t)==X2[A+8>>2]&&!((0|(n=(c=t)?t<<1:1))<=(0|t))){if(n&&(X2[6258]=X2[6258]+1,(c=L2(H2(n,244)+19|0))&&(X2[(s=c+19&-16)-4>>2]=c)),1<=(0|t))for(o=64,c=t;;)if(u=X2[A+12>>2]+o|0,a=X2[4+(f=u+-64|0)>>2],X2[(r=(k=o+s|0)+-64|0)>>2]=X2[f>>2],X2[4+r>>2]=a,i=X2[4+(f=8+f|0)>>2],X2[(r=8+r|0)>>2]=X2[f>>2],X2[4+r>>2]=i,b=X2[4+(a=8+(r=u-48|0)|0)>>2],X2[(i=8+(f=k-48|0)|0)>>2]=X2[a>>2],X2[4+i>>2]=b,i=X2[4+r>>2],X2[f>>2]=X2[r>>2],X2[4+f>>2]=i,b=X2[4+(a=8+(r=u-32|0)|0)>>2],X2[(i=8+(f=k-32|0)|0)>>2]=X2[a>>2],X2[4+i>>2]=b,i=X2[4+r>>2],X2[f>>2]=X2[r>>2],X2[4+f>>2]=i,a=X2[4+(f=u-16|0)>>2],X2[(r=k-16|0)>>2]=X2[f>>2],X2[4+r>>2]=a,i=X2[4+(f=8+f|0)>>2],X2[(r=8+r|0)>>2]=X2[f>>2],X2[4+r>>2]=i,$2(k,u,180),o=o+244|0,!(c=c-1|0))break;(c=X2[A+12>>2])&&J2[A+16|0]&&(X2[6259]=X2[6259]+1,q2(X2[c-4>>2])),X2[A+12>>2]=s,S2[A+16|0]=1,X2[A+8>>2]=n,c=X2[A+4>>2];}return X2[A+4>>2]=c+1,u=X2[(k=e+8|0)+4>>2],t=(c=H2(t,244))+X2[A+12>>2]|0,X2[(o=8+t|0)>>2]=X2[k>>2],X2[o+4>>2]=u,o=X2[e+4>>2],X2[t>>2]=X2[e>>2],X2[4+t>>2]=o,u=X2[(k=e+24|0)+4>>2],X2[(o=24+t|0)>>2]=X2[k>>2],X2[o+4>>2]=u,o=X2[e+20>>2],X2[16+t>>2]=X2[e+16>>2],X2[20+t>>2]=o,o=X2[e+36>>2],X2[32+t>>2]=X2[e+32>>2],X2[36+t>>2]=o,u=X2[(k=e+40|0)+4>>2],X2[(o=40+t|0)>>2]=X2[k>>2],X2[o+4>>2]=u,o=X2[e+52>>2],X2[48+t>>2]=X2[e+48>>2],X2[52+t>>2]=o,u=X2[(k=e+56|0)+4>>2],X2[(o=56+t|0)>>2]=X2[k>>2],X2[o+4>>2]=u,$2(t+64|0,e- -64|0,180),c+X2[A+12>>2]|0;}function D4(A,e,r,f,i,a){A|=0,e|=0,r|=0,f|=0,i|=0,a|=0;var n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C=P2(0),h=P2(0),F=(P2(0),P2(0),P2(0),P2(0)),Y=P2(0),m=P2(0),N=P2(0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);K2=G=K2-272|0,Y=U2[e+52>>2],m=U2[r+52>>2],N=U2[e+56>>2],k=U2[r+56>>2],u=U2[e+48>>2],s=U2[r+48>>2],E4(e,r,112+G|0,48+G|0),X2[268+G>>2]=r=0,C=U2[48+G>>2],h=P2(C*U2[120+G>>2]),U2[264+G>>2]=h,t=P2(C*U2[116+G>>2]),U2[260+G>>2]=t,C=P2(C*U2[112+G>>2]),U2[256+G>>2]=C,l=U2[f+52>>2],B=U2[i+52>>2],_=U2[f+56>>2],g=U2[i+56>>2],v=U2[f+48>>2],E=U2[i+48>>2],E4(f,i,112+G|0,48+G|0),X2[252+G>>2]=0,b=U2[48+G>>2],o=P2(b*U2[120+G>>2]),U2[248+G>>2]=o,F=P2(b*U2[116+G>>2]),U2[244+G>>2]=F,b=P2(b*U2[112+G>>2]),U2[240+G>>2]=b,i=X2[A+12>>2],C=P2(P2(N2[X2[X2[i>>2]+16>>2]](i))*P2(O2(P2(P2(P2(C*C)+P2(t*t))+P2(h*h))))),i=X2[A+16>>2],h=P2(i?N2[X2[X2[i>>2]+16>>2]](i):0),d=P2(C+P2(h*P2(O2(P2(P2(P2(b*b)+P2(F*F))+P2(o*o)))))),v=P2(E-v),u=P2(s-u),t=P2(v-u),s=P2(B-l),l=P2(m-Y),b=P2(s-l),B=P2(g-_),k=P2(k-N),o=P2(B-k);A:if(P2(d+P2(O2(P2(P2(P2(t*t)+P2(b*b))+P2(o*o)))))!=P2(0)&&(S2[216+G|0]=0,X2[212+G>>2]=1566444395,X2[176+G>>2]=15108,T4(A,e,f,176+G|0),n=X2[4+(c=204+G|0)>>2],X2[(i=232+G|0)>>2]=X2[c>>2],X2[i+4>>2]=n,i=X2[200+G>>2],X2[224+G>>2]=X2[196+G>>2],X2[228+G>>2]=i,J2[216+G|0]&&(F=U2[180+G>>2],Y=U2[184+G>>2],m=U2[188+G>>2],!(P2(d+P2(P2(P2(t*F)+P2(b*Y))+P2(o*m)))<=P2(1.1920928955078125e-7))))){r=1;e:{if((N=P2(U2[212+G>>2]+U2[a+172>>2]))>P2(.0010000000474974513)){for(c=20+G|0,Q=160+G|0,h=P2(i=0);;){if((n=X2[a+168>>2])&&(X2[120+G>>2]=1065353216,X2[124+G>>2]=0,X2[112+G>>2]=1065353216,X2[116+G>>2]=1065353216,N2[X2[X2[n>>2]+28>>2]](n,224+G|0,P2(.20000000298023224),112+G|0)),(C=P2(d+P2(P2(P2(t*F)+P2(b*Y))+P2(o*m))))<=P2(1.1920928955078125e-7)){r=0;break A;}if((C=P2(h+P2(N/C)))<=h){r=0;break A;}if(C>P2(1)){r=0;break A;}if(C<P2(0)){r=0;break A;}if(N4(e,u,l,k,256+G|0,C,112+G|0),N4(f,v,s,B,240+G|0,C,48+G|0),(n=X2[a+168>>2])&&(X2[8+G>>2]=0,X2[12+G>>2]=0,X2[G>>2]=1065353216,X2[4+G>>2]=0,N2[X2[X2[n>>2]+28>>2]](n,Q,P2(.20000000298023224),G)),N2[X2[X2[a>>2]>>2]](a,C),S2[40+G|0]=0,X2[36+G>>2]=1566444395,X2[G>>2]=15108,T4(A,112+G|0,48+G|0,G),!J2[40+G|0])break e;if(w=X2[4+(Z=8+c|0)>>2],X2[(n=232+G|0)>>2]=X2[Z>>2],X2[4+n>>2]=w,n=X2[4+c>>2],X2[224+G>>2]=X2[c>>2],X2[228+G>>2]=n,64==(0|i)){N2[X2[X2[a>>2]+8>>2]](a,-2,65),r=0;break A;}if(i=i+1|0,F=U2[4+G>>2],Y=U2[8+G>>2],m=U2[12+G>>2],h=C,!((N=P2(U2[36+G>>2]+U2[a+172>>2]))>P2(.0010000000474974513)))break;}h=U2[16+G>>2];}else C=P2(0),h=U2[192+G>>2];U2[a+132>>2]=F,U2[a+164>>2]=C,A=X2[228+G>>2],X2[a+148>>2]=X2[224+G>>2],X2[a+152>>2]=A,U2[a+144>>2]=h,U2[a+140>>2]=m,U2[a+136>>2]=Y,f=X2[(e=232+G|0)+4>>2],X2[(A=a+156|0)>>2]=X2[e>>2],X2[A+4>>2]=f;break A;}N2[X2[X2[a>>2]+8>>2]](a,-1,i),r=0;}return K2=272+G|0,0|r;}function T4(A,e,r,f){var i,a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h,F,x,y,V,p,M,S,X,J,U,Y,m=0,N=0,R=(P2(0),P2(0)),D=(P2(0),P2(0)),T=(P2(0),P2(0),P2(0),P2(0),P2(0),0),W=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),0),I=(P2(0),0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);K2=Y=K2-240|0,X2[A+16>>2]?(m=X2[A+4>>2],S2[m+312|0]=0,S2[m+356|0]=1,X2[m>>2]=0,X2[m+292>>2]=1566444395,X2[m+296>>2]=1566444395,X2[(N=m+336|0)>>2]=0,X2[N+4>>2]=0,X2[(N=m+300|0)>>2]=1566444395,X2[N+4>>2]=0,X2[(N=m+344|0)>>2]=0,X2[N+4>>2]=0,S2[m+352|0]=0,S2[0|(m=m+332|0)]=240&J2[0|m],m=X2[A+12>>2],N=X2[m+4>>2],W=X2[A+16>>2],I=X2[W+4>>2],D=P2(N2[X2[X2[m>>2]+48>>2]](m)),T=X2[A+16>>2],R=P2(N2[X2[X2[T>>2]+48>>2]](T)),X2[(T=172+Y|0)>>2]=0,X2[T+4>>2]=0,X2[232+Y>>2]=1,X2[236+Y>>2]=1,X2[220+Y>>2]=-1,S2[212+Y|0]=0,U2[208+Y>>2]=R,U2[204+Y>>2]=D,X2[200+Y>>2]=I,X2[196+Y>>2]=N,X2[192+Y>>2]=W,X2[188+Y>>2]=m,X2[164+Y>>2]=0,X2[168+Y>>2]=1065353216,X2[160+Y>>2]=14952,H=X2[A+4>>2],X2[180+Y>>2]=X2[A+8>>2],X2[184+Y>>2]=H,m=X2[(A=e+8|0)+4>>2],X2[(N=32+Y|0)>>2]=X2[A>>2],X2[N+4>>2]=m,m=X2[(A=e+24|0)+4>>2],X2[(N=48+Y|0)>>2]=X2[A>>2],X2[N+4>>2]=m,m=X2[(A=e+40|0)+4>>2],X2[(N=Y+64|0)>>2]=X2[A>>2],X2[N+4>>2]=m,m=X2[(A=e+56|0)+4>>2],X2[(N=80+Y|0)>>2]=X2[A>>2],X2[N+4>>2]=m,m=X2[(A=r+8|0)+4>>2],X2[(N=96+Y|0)>>2]=X2[A>>2],X2[N+4>>2]=m,X2[152+Y>>2]=1566444395,A=X2[e+4>>2],X2[24+Y>>2]=X2[e>>2],X2[28+Y>>2]=A,A=X2[e+20>>2],X2[40+Y>>2]=X2[e+16>>2],X2[44+Y>>2]=A,A=X2[e+36>>2],X2[56+Y>>2]=X2[e+32>>2],X2[60+Y>>2]=A,A=X2[e+52>>2],X2[72+Y>>2]=X2[e+48>>2],X2[76+Y>>2]=A,A=X2[r+4>>2],X2[88+Y>>2]=X2[r>>2],X2[92+Y>>2]=A,e=X2[(A=r+24|0)+4>>2],X2[(m=112+Y|0)>>2]=X2[A>>2],X2[m+4>>2]=e,A=X2[r+20>>2],X2[(e=104+Y|0)>>2]=X2[r+16>>2],X2[e+4>>2]=A,A=X2[r+36>>2],X2[(e=120+Y|0)>>2]=X2[r+32>>2],X2[e+4>>2]=A,e=X2[(A=r+40|0)+4>>2],X2[(m=128+Y|0)>>2]=X2[A>>2],X2[m+4>>2]=e,A=X2[r+52>>2],X2[(e=136+Y|0)>>2]=X2[r+48>>2],X2[e+4>>2]=A,e=X2[(A=r+56|0)+4>>2],X2[(r=144+Y|0)>>2]=X2[A>>2],X2[r+4>>2]=e,I1(160+Y|0,24+Y|0,f,0,0)):(U=U2[(N=r+52|0)>>2],Z=U2[(W=r+56|0)>>2],_=U2[e+52>>2],C=U2[e+56>>2],o=U2[e+20>>2],c=U2[e+36>>2],D=U2[(I=r+20|0)>>2],R=U2[(T=r+36|0)>>2],i=U2[(x=r+24|0)>>2],a=U2[e+24>>2],n=U2[(y=r+40|0)>>2],l=U2[e+40>>2],h=U2[r+48>>2],F=U2[e+48>>2],m=X2[A+12>>2],B=U2[e+32>>2],v=U2[e>>2],g=U2[e+16>>2],E=U2[e+4>>2],t=U2[r+32>>2],b=U2[r+16>>2],k=U2[r>>2],u=U2[r+4>>2],A=X2[A+20>>2],s=U2[r+8>>2],Q=U2[e+8>>2],X2[172+Y>>2]=0,V=P2(P2(P2(Q*u)+P2(a*D))+P2(l*R)),w=P2(-U2[(e=A+60|0)>>2]),p=P2(P2(P2(Q*k)+P2(a*b))+P2(l*t)),G=U2[A+56>>2],Q=P2(P2(P2(Q*s)+P2(a*i))+P2(l*n)),a=U2[(M=A- -64|0)>>2],U2[168+Y>>2]=P2(P2(V*w)-P2(p*G))-P2(Q*a),S=P2(P2(P2(E*u)+P2(o*D))+P2(c*R)),X=P2(P2(P2(E*k)+P2(o*b))+P2(c*t)),E=P2(P2(P2(E*s)+P2(o*i))+P2(c*n)),U2[164+Y>>2]=P2(P2(S*w)-P2(G*X))-P2(a*E),J=P2(P2(P2(v*u)+P2(g*D))+P2(B*R)),d=P2(J*w),w=P2(P2(P2(v*k)+P2(g*b))+P2(B*t)),g=P2(P2(P2(v*s)+P2(g*i))+P2(B*n)),U2[160+Y>>2]=P2(d-P2(G*w))-P2(a*g),N2[X2[X2[m>>2]+64>>2]](24+Y|0,m,160+Y|0),o=U2[e>>2],c=U2[M>>2],G=U2[A+72>>2],a=U2[A+56>>2],l=U2[24+Y>>2],B=U2[28+Y>>2],v=U2[32+Y>>2],X2[172+Y>>2]=0,m=P2(P2(P2(F*k)+P2(_*b))+P2(C*t)),d=b,b=P2(-U),t=P2(P2(m+P2(P2(P2(d*b)-P2(k*h))-P2(t*Z)))+P2(P2(P2(w*l)+P2(X*B))+P2(p*v))),n=P2(P2(P2(P2(P2(F*s)+P2(_*i))+P2(C*n))+P2(P2(P2(i*b)-P2(s*h))-P2(n*Z)))+P2(P2(P2(g*l)+P2(E*B))+P2(Q*v))),i=P2(P2(P2(P2(P2(F*u)+P2(_*D))+P2(C*R))+P2(P2(P2(D*b)-P2(u*h))-P2(R*Z)))+P2(P2(P2(J*l)+P2(S*B))+P2(V*v))),D=P2(P2(P2(c*n)+P2(P2(a*t)+P2(o*i)))-G),R=P2(t-P2(a*D)),t=U2[r+32>>2],i=P2(i-P2(o*D)),b=U2[T>>2],n=P2(n-P2(c*D)),k=U2[y>>2],U2[168+Y>>2]=P2(P2(P2(R*t)+P2(i*b))+P2(n*k))+U2[W>>2],u=U2[r+16>>2],s=U2[I>>2],Z=U2[x>>2],U2[164+Y>>2]=P2(P2(P2(R*u)+P2(i*s))+P2(n*Z))+U2[N>>2],_=U2[r>>2],d=P2(_*R),R=U2[r+4>>2],d=P2(d+P2(i*R)),i=U2[r+8>>2],U2[160+Y>>2]=P2(d+P2(n*i))+U2[r+48>>2],X2[20+Y>>2]=0,U2[16+Y>>2]=P2(P2(a*t)+P2(o*b))+P2(c*k),U2[12+Y>>2]=P2(P2(a*u)+P2(o*s))+P2(c*Z),U2[8+Y>>2]=P2(P2(a*_)+P2(o*R))+P2(c*i),N2[X2[X2[f>>2]+16>>2]](f,8+Y|0,160+Y|0,D)),K2=240+Y|0;}function W4(A){var e,r,f=0,i=0,a=0;if(X2[(A|=0)>>2]=20204,1<=(0|(f=X2[A+8>>2])))for(;;)if(r=X2[X2[A+16>>2]+i>>2],(e=X2[r+188>>2])&&(f=X2[A+68>>2],f=0|N2[X2[X2[f>>2]+36>>2]](f),N2[X2[X2[f>>2]+40>>2]](f,e,X2[A+24>>2]),f=X2[A+68>>2],N2[X2[X2[f>>2]+12>>2]](f,e,X2[A+24>>2]),X2[r+188>>2]=0,f=X2[A+8>>2]),i=i+4|0,!((0|(a=a+1|0))<(0|f)))break;return (f=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[f-4>>2])),X2[A+16>>2]=0,X2[A+8>>2]=0,X2[A+12>>2]=0,S2[A+20|0]=1,0|A;}function I4(A){A|=0;var e,r,f,i,a,n,b,t,o=0,c=0,k=0,u=0,s=0,l=(P2(0),0),B=0,v=0,d=0,Z=(P2(0),P2(0),P2(0),P2(0),P2(0),0);if(K2=t=K2-192|0,0|N2[X2[X2[A>>2]+20>>2]](A)){if(c=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[c>>2]+100>>2]](c),c=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[c>>2]+8>>2]](80+t|0,c),c=0|N2[X2[X2[A>>2]+20>>2]](A),8&N2[X2[X2[c>>2]+56>>2]](c)&&(c=X2[A+24>>2])&&!((0|(B=0|N2[X2[X2[c>>2]+36>>2]](c)))<1))for(d=176+t|0,c=0;;){if(u=X2[A+24>>2],u=0|N2[X2[X2[u>>2]+40>>2]](u,c),1<=(0|(l=X2[u+844>>2])))for(u=u+168|0;;)if(v=0|N2[X2[X2[A>>2]+20>>2]](A),N2[X2[X2[v>>2]+40>>2]](v,u-132|0,u-100|0,U2[u-84>>2],X2[u>>2],d),u=u+208|0,!(l=l-1|0))break;if((0|B)==(0|(c=c+1|0)))break;}if(c=0|N2[X2[X2[A>>2]+20>>2]](A),3&N2[X2[X2[c>>2]+56>>2]](c)&&!(X2[A+8>>2]<1))for(l=160+t|0,B=96+t|0,d=112+t|0,v=128+t|0,r=144+t|0,u=0;;){if(c=X2[X2[A+16>>2]+u>>2],!(32&J2[c+204|0])){if(0|N2[X2[X2[A>>2]+20>>2]](A)&&(o=0|N2[X2[X2[A>>2]+20>>2]](A),1&N2[X2[X2[o>>2]+56>>2]](o))){A:{e:switch(X2[c+220>>2]-1|0){case 0:s=X2[(k=88+t|0)+4>>2],X2[(o=72+t|0)>>2]=X2[k>>2],X2[o+4>>2]=s,o=X2[84+t>>2],X2[64+t>>2]=X2[80+t>>2],X2[68+t>>2]=o;break A;case 1:s=X2[(k=B+8|0)+4>>2],X2[(o=72+t|0)>>2]=X2[k>>2],X2[o+4>>2]=s,o=X2[B+4>>2],X2[64+t>>2]=X2[B>>2],X2[68+t>>2]=o;break A;case 2:s=X2[(k=d+8|0)+4>>2],X2[(o=72+t|0)>>2]=X2[k>>2],X2[o+4>>2]=s,o=X2[d+4>>2],X2[64+t>>2]=X2[d>>2],X2[68+t>>2]=o;break A;case 3:s=X2[(k=v+8|0)+4>>2],X2[(o=72+t|0)>>2]=X2[k>>2],X2[o+4>>2]=s,o=X2[v+4>>2],X2[64+t>>2]=X2[v>>2],X2[68+t>>2]=o;break A;case 4:s=X2[(k=8+r|0)+4>>2],X2[(o=72+t|0)>>2]=X2[k>>2],X2[o+4>>2]=s,o=X2[4+r>>2],X2[64+t>>2]=X2[r>>2],X2[68+t>>2]=o;break A;default:break e;}X2[72+t>>2]=1050253722,X2[76+t>>2]=0,X2[64+t>>2]=1050253722,X2[68+t>>2]=1050253722;}1&S2[c+205|0]&&(s=X2[(k=c+316|0)+4>>2],X2[(o=72+t|0)>>2]=X2[k>>2],X2[o+4>>2]=s,o=X2[c+312>>2],X2[64+t>>2]=X2[c+308>>2],X2[68+t>>2]=o),N2[X2[X2[A>>2]+28>>2]](A,c+4|0,X2[c+192>>2],t+64|0);}(o=X2[A+72>>2])&&2&N2[X2[X2[o>>2]+56>>2]](o)&&(s=X2[(k=l+8|0)+4>>2],X2[(o=40+t|0)>>2]=X2[k>>2],X2[o+4>>2]=s,o=X2[l+4>>2],X2[32+t>>2]=X2[l>>2],X2[36+t>>2]=o,o=X2[c+192>>2],N2[X2[X2[o>>2]+8>>2]](o,c+4|0,t+64|0,48+t|0),U2[64+t>>2]=U2[64+t>>2]+P2(-.019999999552965164),U2[68+t>>2]=U2[68+t>>2]+P2(-.019999999552965164),U2[72+t>>2]=U2[72+t>>2]+P2(-.019999999552965164),U2[48+t>>2]=U2[48+t>>2]+P2(.019999999552965164),U2[52+t>>2]=U2[52+t>>2]+P2(.019999999552965164),U2[56+t>>2]=U2[56+t>>2]+P2(.019999999552965164),!J2[A+44|0]||2!=X2[c+252>>2]||3&J2[c+204|0]||(o=X2[c+192>>2],N2[X2[X2[o>>2]+8>>2]](o,c+68|0,16+t|0,t),e=P2(U2[16+t>>2]+P2(-.019999999552965164)),U2[16+t>>2]=e,f=P2(U2[20+t>>2]+P2(-.019999999552965164)),U2[20+t>>2]=f,i=P2(U2[24+t>>2]+P2(-.019999999552965164)),U2[24+t>>2]=i,a=P2(U2[t>>2]+P2(.019999999552965164)),U2[t>>2]=a,n=P2(U2[4+t>>2]+P2(.019999999552965164)),U2[4+t>>2]=n,b=P2(U2[8+t>>2]+P2(.019999999552965164)),U2[8+t>>2]=b,e<U2[64+t>>2]&&(U2[64+t>>2]=e),U2[68+t>>2]>f&&(U2[68+t>>2]=f),U2[72+t>>2]>i&&(U2[72+t>>2]=i),(e=U2[28+t>>2])<U2[76+t>>2]&&(U2[76+t>>2]=e),U2[48+t>>2]<a&&(U2[48+t>>2]=a),U2[52+t>>2]<n&&(U2[52+t>>2]=n),U2[56+t>>2]<b&&(U2[56+t>>2]=b),(e=U2[12+t>>2])>U2[60+t>>2]&&(U2[60+t>>2]=e)),c=X2[A+72>>2],N2[X2[X2[c>>2]+60>>2]](c,t+64|0,48+t|0,32+t|0));}if(u=u+4|0,!((0|(Z=Z+1|0))<X2[A+8>>2]))break;}}K2=192+t|0;}function x4(A,e,r,f){A|=0,e|=0,r|=0,f|=0;var i=0,a=0,n=0,b=0,t=0,o=K2-96|0;if(K2=o,i=X2[A+8>>2],X2[e+216>>2]=i,X2[A+12>>2]==(0|i)&&!((0|(n=i?i<<1:1))<=(0|i))){if(n&&(X2[6258]=X2[6258]+1,(a=L2(19+(n<<2)|0))&&(X2[(b=a+19&-16)-4>>2]=a)),1<=(0|i))for(a=i;;)if(X2[t+b>>2]=X2[X2[A+16>>2]+t>>2],t=t+4|0,!(a=a-1|0))break;(a=X2[A+16>>2])&&J2[A+20|0]&&(X2[6259]=X2[6259]+1,q2(X2[a-4>>2]),i=X2[A+8>>2]),X2[A+16>>2]=b,X2[A+12>>2]=n,S2[A+20|0]=1;}X2[A+8>>2]=i+1,X2[X2[A+16>>2]+(i<<2)>>2]=e,n=X2[(a=e+12|0)+4>>2],X2[(i=40+o|0)>>2]=X2[a>>2],X2[i+4>>2]=n,n=X2[(a=e+28|0)+4>>2],X2[(i=56+o|0)>>2]=X2[a>>2],X2[i+4>>2]=n,n=X2[(a=e+44|0)+4>>2],X2[(i=72+o|0)>>2]=X2[a>>2],X2[i+4>>2]=n,n=X2[(a=e+60|0)+4>>2],X2[(i=88+o|0)>>2]=X2[a>>2],X2[i+4>>2]=n,i=X2[e+8>>2],X2[32+o>>2]=X2[e+4>>2],X2[36+o>>2]=i,a=X2[(i=e+20|0)+4>>2],X2[48+o>>2]=X2[i>>2],X2[52+o>>2]=a,a=X2[(i=e+36|0)+4>>2],X2[64+o>>2]=X2[i>>2],X2[68+o>>2]=a,a=X2[(i=e+52|0)+4>>2],X2[80+o>>2]=X2[i>>2],X2[84+o>>2]=a,i=X2[e+192>>2],N2[X2[X2[i>>2]+8>>2]](i,32+o|0,16+o|0,o),i=X2[A+68>>2],n=e,i=0|N2[X2[X2[i>>2]+8>>2]](i,16+o|0,o,X2[X2[e+192>>2]+4>>2],e,r,f,X2[A+24>>2]),X2[n+188>>2]=i,K2=96+o|0;}function y4(A,e){A|=0;var r,f,i,a=0,n=0,b=0,t=0,o=0;(n=X2[(e|=0)+188>>2])&&(a=X2[A+68>>2],a=0|N2[X2[X2[a>>2]+36>>2]](a),N2[X2[X2[a>>2]+40>>2]](a,n,X2[A+24>>2]),a=X2[A+68>>2],N2[X2[X2[a>>2]+12>>2]](a,n,X2[A+24>>2]),X2[e+188>>2]=0),n=X2[A+8>>2];A:if((0|(a=X2[e+216>>2]))<0||(0|n)<=(0|a)){if(!((0|n)<1)){for(a=o=X2[A+16>>2];;){if(X2[a>>2]==(0|e))break;if(a=a+4|0,(0|n)==(0|(t=t+1|0)))break A;}(0|n)<=(0|t)||(X2[(b=a)>>2]=X2[(a=(n=n-1|0)<<2)+o>>2],X2[A+8>>2]=n,X2[a+X2[A+16>>2]>>2]=e);}}else b=X2[(o=A+16|0)>>2],f=X2[(r=(t=a<<2)+b|0)>>2],i=b,X2[r>>2]=X2[i+(b=(n=n-1|0)<<2)>>2],X2[A+8>>2]=n,X2[b+X2[o>>2]>>2]=f,(0|n)<=(0|a)||(X2[X2[X2[A+16>>2]+t>>2]+216>>2]=a);X2[e+216>>2]=-1;}function V4(A,e){var r,f,i,a=0,n=0,b=0,t=0,o=0,c=0,k=0,u=0,s=0,l=0,B=0,v=0,d=0,Z=0,_=0,g=0,E=0,Q=0,w=0,G=0;if(!((0|(n=X2[A+8>>2]))<1)){for(;;){r=X2[X2[X2[A+16>>2]+(Q<<2)>>2]+192>>2],a=H2((a=r+(r<<15^-1)|0)>>>10^a,9),a=v>>>0<=(k=(f=(a=((a^=a>>>6)<<11^-1)+a|0)>>>16^a)&u-1)>>>0;A:{e:if(!a&&-1!=(0|(b=X2[(k<<2)+l>>2]))){for(;;){if(X2[(b<<3)+t>>2]==(0|r))break;if(-1==(0|(b=X2[(b<<2)+o>>2])))break e;}if(s)break A;}e:{r:{if(!a&&-1!=(0|(b=X2[(k<<2)+l>>2])))for(;;){if(X2[(b<<3)+t>>2]==(0|r))break r;if(-1==(0|(b=X2[(b<<2)+o>>2])))break;}if((0|u)!=(0|E))a=u,Z=s,n=E;else {f:if((0|(a=u?u<<1:1))<=(0|u))a=u,Z=s;else {if(Z=0,a&&(X2[6258]=X2[6258]+1,(n=L2(19+(a<<2)|0))&&(X2[(Z=n+19&-16)-4>>2]=n)),1<=(0|u)){for(b=Z,n=s,c=u;;)if(X2[b>>2]=X2[n>>2],b=b+4|0,n=n+4|0,!(c=c-1|0))break;}else if(!s)break f;X2[6259]=X2[6259]+1,q2(X2[s-4>>2]);}n=u;}X2[((s=n)<<2)+Z>>2]=r;f:if((0|B)!=(0|_))d=t;else if((0|(_=B?B<<1:1))<=(0|B))_=B,d=t;else {if(d=0,_&&(X2[6258]=X2[6258]+1,(n=L2(19+(_<<3)|0))&&(X2[(d=n+19&-16)-4>>2]=n)),1<=(0|B)){for(b=d,n=t,c=B;;)if(i=X2[n+4>>2],X2[b>>2]=X2[n>>2],X2[b+4>>2]=i,b=b+8|0,n=n+8|0,!(c=c-1|0))break;}else if(!t)break f;X2[6259]=X2[6259]+1,q2(X2[t-4>>2]);}if(X2[(B<<3)+d>>2]=r,(0|u)<(0|a)){if((0|v)<(0|a)){if((0|a)<=(0|w))c=l;else {c=0,a&&(X2[6258]=X2[6258]+1,(t=L2(19+(a<<2)|0))&&(X2[(c=t+19&-16)-4>>2]=t));f:{if(1<=(0|v)){for(b=c,n=l,t=v;;)if(X2[b>>2]=X2[n>>2],b=b+4|0,n=n+4|0,!(t=t-1|0))break;}else if(!l)break f;X2[6259]=X2[6259]+1,q2(X2[l-4>>2]);}w=a;}if(v2((v<<2)+c|0,0,a-v<<2),u=a<<2,(0|a)<=(0|g))k=o;else {if((0|a)<=(0|G))k=o;else {k=0,a&&(X2[6258]=X2[6258]+1,(t=L2(16+(3|u)|0))&&(X2[(k=t+19&-16)-4>>2]=t));f:{if(1<=(0|g)){for(b=k,n=o,t=g;;)if(X2[b>>2]=X2[n>>2],b=b+4|0,n=n+4|0,!(t=t-1|0))break;}else if(!o)break f;X2[6259]=X2[6259]+1,q2(X2[o-4>>2]);}G=a;}v2((g<<2)+k|0,0,a-g<<2);}if(1<=(0|a)&&(v2(c,255,u),v2(k,255,u)),1<=(0|v))for(u=a-1|0,b=0,n=d,t=k;;)if(o=X2[n>>2],o=H2((o=(o<<15^-1)+o|0)>>>10^o,9),o^=o>>>6,X2[t>>2]=X2[(o=((u&((o=(o<<11^-1)+o|0)>>>16^o))<<2)+c|0)>>2],n=n+8|0,t=t+4|0,(0|v)==(0|(b=(X2[o>>2]=b)+1|0)))break;l=c,v=g=a,o=k;}k=a-1&f;}B=B+1|0,X2[(E<<2)+o>>2]=X2[(t=(k<<2)+l|0)>>2],X2[t>>2]=E,u=a,E=s+1|0,s=Z,t=d;break e;}X2[(b<<2)+s>>2]=r;}N2[X2[X2[r>>2]+60>>2]](r,e),n=X2[A+8>>2];}if(!((0|(Q=Q+1|0))<(0|n)))break;}if(1<=(0|n))for(c=b=0;;)if(a=X2[X2[A+16>>2]+b>>2],1!=(0|(k=X2[a+252>>2]))&&64!=(0|k)||(N2[X2[X2[a>>2]+24>>2]](a,e),n=X2[A+8>>2]),b=b+4|0,!((0|(c=c+1|0))<(0|n)))break;t&&(X2[6259]=X2[6259]+1,q2(X2[t-4>>2])),s&&(X2[6259]=X2[6259]+1,q2(X2[s-4>>2])),o&&(X2[6259]=X2[6259]+1,q2(X2[o-4>>2])),l&&(X2[6259]=X2[6259]+1,q2(X2[l-4>>2]));}}function p4(A,e,r,f){var i,a,n,x,y,V,p,M,S,X,J,b,t=0,o=P2(0),c=P2(0),k=P2(0),u=P2(0),s=0,l=0,B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=P2(0),g=P2(0),E=P2(0),Q=P2(0),w=0,G=P2(0),C=P2(0),h=P2(0),F=P2(0),Y=0,m=P2(0),N=P2(0),R=P2(0),D=P2(0),T=0,W=P2(0),I=(P2(0),P2(0),0);P2(0);X2[(t=264+(K2=b=K2-832|0)|0)>>2]=0,X2[t+4>>2]=0,X2[(t=272+b|0)>>2]=0,X2[t+4>>2]=0,X2[(t=280+b|0)>>2]=0,X2[t+4>>2]=0,X2[288+b>>2]=0,X2[260+b>>2]=1065353216,X2[252+b>>2]=1065353216,X2[256+b>>2]=1065353216,X2[236+b>>2]=8,X2[240+b>>2]=0,X2[244+b>>2]=0,X2[248+b>>2]=0,X2[232+b>>2]=14616,t=X2[r+12>>2];A:if(l=X2[r+4>>2],(0|(s=X2[l+4>>2]))<=19)X2[216+b>>2]=0,X2[220+b>>2]=0,X2[48+b>>2]=15320,U2[212+b>>2]=U2[f+4>>2],S2[652+b|0]=0,X2[628+b>>2]=953267991,X2[308+b>>2]=l,X2[296+b>>2]=15936,X2[304+b>>2]=232+b,X2[300+b>>2]=320+b,X2[32+b>>2]=15076,X2[44+b>>2]=l,s=8&X2[f+16>>2]?32+b|0:296+b|0,l=X2[s>>2],X2[40+b>>2]=232+b,l=X2[l+8>>2],X2[36+b>>2]=320+b,0|N2[0|l](s,A,e,t,t,48+b|0)&&(k=U2[180+b>>2],o=U2[184+b>>2],c=U2[188+b>>2],(d=P2(P2(P2(k*k)+P2(o*o))+P2(c*c)))>P2(9999999747378752e-20)&&(B=U2[212+b>>2])<U2[f+4>>2]&&(m=c,c=P2(P2(1)/P2(O2(d))),U2[188+b>>2]=m*c,U2[184+b>>2]=o*c,U2[180+b>>2]=k*c,s=X2[(t=(A=180+b|0)+8|0)+4>>2],X2[(e=16+b|0)>>2]=X2[t>>2],X2[e+4>>2]=s,U2[24+b>>2]=B,e=X2[A+4>>2],X2[8+b>>2]=X2[A>>2],X2[12+b>>2]=e,X2[4+b>>2]=0,X2[b>>2]=X2[r+8>>2],P2(N2[X2[X2[f>>2]+12>>2]](f,b,1))));else if(s-21>>>0<=8)o=U2[t+20>>2],c=U2[t+36>>2],k=U2[(s=t+24|0)>>2],d=U2[t+52>>2],u=U2[(Y=t+56|0)>>2],v=U2[(w=t+40|0)>>2],Z=U2[t+32>>2],Q=U2[t+16>>2],G=U2[t>>2],C=U2[t+4>>2],g=U2[t+48>>2],_=U2[t+8>>2],X2[308+b>>2]=0,E=P2(-d),R=P2(P2(P2(k*E)-P2(_*g))-P2(v*u)),F=U2[A+48>>2],h=U2[A+52>>2],N=U2[A+56>>2],d=P2(R+P2(P2(P2(_*F)+P2(k*h))+P2(v*N))),U2[304+b>>2]=d,D=P2(P2(P2(o*E)-P2(C*g))-P2(c*u)),B=P2(D+P2(P2(P2(C*F)+P2(o*h))+P2(c*N))),U2[300+b>>2]=B,E=P2(P2(P2(Q*E)-P2(G*g))-P2(Z*u)),u=P2(E+P2(P2(P2(G*F)+P2(Q*h))+P2(Z*N))),U2[296+b>>2]=u,g=U2[e+48>>2],h=P2(_*g),_=U2[e+52>>2],m=v,v=U2[e+56>>2],k=P2(R+P2(P2(h+P2(k*_))+P2(m*v))),o=P2(D+P2(P2(P2(C*g)+P2(o*_))+P2(c*v))),c=P2(E+P2(P2(P2(G*g)+P2(Q*_))+P2(Z*v))),21==X2[l+4>>2]?(X2[352+b>>2]=0,U2[348+b>>2]=k,U2[344+b>>2]=o,T=X2[(e=304+b|0)+4>>2],X2[(A=332+b|0)>>2]=X2[e>>2],X2[A+4>>2]=T,A=X2[300+b>>2],X2[324+b>>2]=X2[296+b>>2],X2[328+b>>2]=A,X2[360+b>>2]=1065353216,U2[340+b>>2]=c,X2[320+b>>2]=20304,X2[368+b>>2]=X2[r+8>>2],X2[364+b>>2]=f,X2[356+b>>2]=X2[f+16>>2],X2[372+b>>2]=l,r=X2[(e=t+8|0)+4>>2],X2[(A=384+b|0)>>2]=X2[e>>2],X2[A+4>>2]=r,A=X2[t+4>>2],X2[376+b>>2]=X2[t>>2],X2[380+b>>2]=A,e=X2[s+4>>2],X2[(A=400+b|0)>>2]=X2[s>>2],X2[A+4>>2]=e,e=X2[t+20>>2],X2[(A=392+b|0)>>2]=X2[t+16>>2],X2[A+4>>2]=e,e=X2[t+36>>2],X2[(A=408+b|0)>>2]=X2[t+32>>2],X2[A+4>>2]=e,e=X2[w+4>>2],X2[(A=416+b|0)>>2]=X2[w>>2],X2[A+4>>2]=e,e=X2[t+52>>2],X2[(A=424+b|0)>>2]=X2[t+48>>2],X2[A+4>>2]=e,e=X2[Y+4>>2],X2[(A=432+b|0)>>2]=X2[Y>>2],X2[A+4>>2]=e,U2[360+b>>2]=U2[f+4>>2],X2[32+b>>2]=13404,X2[36+b>>2]=X2[l+56>>2],X2[40+b>>2]=320+b,A=X2[l+60>>2],X2[(e=56+b|0)>>2]=0,X2[e+4>>2]=0,X2[48+b>>2]=0,X2[52+b>>2]=0,X2[(e=8+b|0)>>2]=0,X2[e+4>>2]=0,X2[b>>2]=0,X2[4+b>>2]=0,J2[A+60|0]?Z1(A,32+b|0,296+b|0,c,o,k,48+b|0,b,X2[A+56>>2]):d1(A,32+b|0,296+b|0,c,o,k,48+b|0,b)):(X2[352+b>>2]=0,U2[348+b>>2]=k,U2[344+b>>2]=o,X2[336+b>>2]=0,U2[332+b>>2]=d,U2[328+b>>2]=B,X2[360+b>>2]=1065353216,U2[324+b>>2]=u,X2[372+b>>2]=l,X2[320+b>>2]=20304,X2[368+b>>2]=X2[r+8>>2],X2[364+b>>2]=f,X2[356+b>>2]=X2[f+16>>2],U2[340+b>>2]=c,r=X2[(e=t+8|0)+4>>2],X2[(A=384+b|0)>>2]=X2[e>>2],X2[A+4>>2]=r,A=X2[t+4>>2],X2[376+b>>2]=X2[t>>2],X2[380+b>>2]=A,e=X2[s+4>>2],X2[(A=400+b|0)>>2]=X2[s>>2],X2[A+4>>2]=e,e=X2[t+20>>2],X2[(A=392+b|0)>>2]=X2[t+16>>2],X2[A+4>>2]=e,e=X2[t+36>>2],X2[(A=408+b|0)>>2]=X2[t+32>>2],X2[A+4>>2]=e,e=X2[w+4>>2],X2[(A=416+b|0)>>2]=X2[w>>2],X2[A+4>>2]=e,e=X2[t+52>>2],X2[(A=424+b|0)>>2]=X2[t+48>>2],X2[A+4>>2]=e,e=X2[Y+4>>2],X2[(A=432+b|0)>>2]=X2[Y>>2],X2[A+4>>2]=e,U2[360+b>>2]=U2[f+4>>2],X2[60+b>>2]=0,U2[56+b>>2]=d,U2[52+b>>2]=B,c<(U2[48+b>>2]=u)&&(U2[48+b>>2]=c),o<B&&(U2[52+b>>2]=o),k<d&&(U2[56+b>>2]=k),X2[12+b>>2]=0,U2[8+b>>2]=d,U2[4+b>>2]=B,(U2[b>>2]=u)<c&&(U2[b>>2]=c),B<o&&(U2[4+b>>2]=o),d<k&&(U2[8+b>>2]=k),N2[X2[X2[l>>2]+64>>2]](l,320+b|0,48+b|0,b));else if(31==(0|s))if(s=X2[l+72>>2],X2[24+b>>2]=f,X2[20+b>>2]=e,X2[16+b>>2]=A,X2[12+b>>2]=t,X2[8+b>>2]=l,X2[b>>2]=20328,X2[4+b>>2]=X2[r+8>>2],s){if(r=X2[s>>2]){for(k=U2[t+56>>2],h=U2[A+56>>2],o=U2[t+40>>2],c=U2[t+52>>2],N=U2[A+52>>2],d=U2[t+24>>2],B=U2[t+48>>2],R=U2[A+48>>2],u=U2[t+8>>2],v=U2[t+36>>2],Z=U2[t+20>>2],Q=U2[t+4>>2],G=U2[t+32>>2],C=U2[t+16>>2],g=U2[t>>2],_=U2[e+56>>2],E=U2[e+52>>2],F=U2[e+48>>2],X2[320+b>>2]=r,_=P2(_-k),E=P2(E-c),F=P2(F-B),W=P2(P2(o*_)+P2(P2(d*E)+P2(u*F))),B=P2(R-B),c=P2(N-c),m=o,o=P2(h-k),d=P2(P2(P2(u*B)+P2(d*c))+P2(m*o)),h=u=P2(W-d),m=P2(P2(G*_)+P2(P2(C*E)+P2(F*g))),G=P2(P2(P2(B*g)+P2(c*C))+P2(o*G)),k=P2(m-G),B=P2(P2(P2(B*Q)+P2(c*Z))+P2(o*v)),o=P2(P2(P2(v*_)+P2(P2(Z*E)+P2(F*Q)))-B),u=P2(P2(1)/P2(O2(P2(P2(P2(k*k)+P2(o*o))+P2(u*u))))),c=P2(h*u),k=P2((v=k)*u),o=P2((m=o)*u),g=P2(P2(h*c)+P2(P2(v*k)+P2(m*o))),x=(48+b|0)+((A=(c=c==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/c))<P2(0))<<4)|8,y=(48+b|0)+((e=(o=o==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/o))<P2(0))<<4)|4,V=(48+b|0)+(!A<<4)|8,p=(48+b|0)+(!e<<4)|4,M=(48+b|0)+((A=(k=k==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/k))<P2(0))<<4)|0,S=(48+b|0)+(!A<<4)|0,T=b+64|0,Y=126,A=320+b|0,e=r=128,l=1;;){if(w=X2[(n=(f=l-1|0)<<2)+A>>2],s=X2[(t=w)+20>>2],X2[T>>2]=X2[t+16>>2],X2[T+4>>2]=s,X=X2[(t=t+24|0)+4>>2],X2[(s=T+8|0)>>2]=X2[t>>2],X2[s+4>>2]=X,t=X2[w+4>>2],X2[48+b>>2]=X2[w>>2],X2[52+b>>2]=t,s=X2[(t=w+8|0)+4>>2],X2[56+b>>2]=X2[t>>2],X2[60+b>>2]=s,u=P2(o*P2(U2[y>>2]-B)),!((v=P2(k*P2(U2[S>>2]-G)))<u||(Z=P2(k*P2(U2[M>>2]-G)),(Q=P2(o*P2(U2[p>>2]-B)))<Z||(v=Q<v?Q:v)<(C=P2(c*P2(U2[x>>2]-d)))||(u=Z<u?u:Z,!(!((Z=P2(c*P2(U2[V>>2]-d)))<u)&&(u<C?C:u)<g&&(Z<v?Z:v)>P2(0))))))if(X2[w+40>>2]){if((0|Y)<(0|f)){if((0|e)<(0|(t=e<<1))){if((0|r)<(0|t)){if(s=0,e&&(X2[6258]=X2[6258]+1,(r=L2(19+(e<<3)|0))&&(X2[(s=r+19&-16)-4>>2]=r),!((0|e)<1)))for(f=s,Y=A,r=e;;)if(X2[f>>2]=X2[Y>>2],f=f+4|0,Y=Y+4|0,!(r=r-1|0))break;I&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2])),I=1,r=t,A=s;}v2((e<<=2)+A|0,0,e);}Y=t-2|0,e=t;}X2[A+n>>2]=X2[w+36>>2],X2[(l<<2)+A>>2]=X2[w+40>>2],f=l+1|0;}else N2[X2[X2[b>>2]+12>>2]](b,w);if(!(l=f))break;}I&&A&&(X2[6259]=X2[6259]+1,q2(X2[A-4>>2]));}}else if(!((0|(A=X2[l+24>>2]))<1))for(s=A-1|0,A=32,r=0;;){if(e=X2[l+32>>2]+A|0,f=X2[e+32>>2],J=U2[t+52>>2],W=U2[t+56>>2],G=U2[e+16>>2],C=U2[e+20>>2],g=U2[e+24>>2],k=U2[t+20>>2],o=U2[t+24>>2],_=U2[e-32>>2],E=U2[e-16>>2],F=U2[e>>2],h=U2[e-28>>2],N=U2[e-12>>2],R=U2[e+4>>2],D=U2[e-24>>2],c=U2[t+36>>2],i=U2[e-8>>2],d=U2[t+40>>2],a=U2[e+8>>2],m=U2[t+48>>2],B=U2[t+8>>2],u=U2[t>>2],v=U2[t+4>>2],Z=U2[t+16>>2],Q=U2[t+32>>2],X2[380+b>>2]=0,X2[364+b>>2]=0,X2[348+b>>2]=0,X2[332+b>>2]=0,U2[360+b>>2]=P2(P2(D*Q)+P2(i*c))+P2(a*d),U2[356+b>>2]=P2(P2(h*Q)+P2(N*c))+P2(R*d),U2[352+b>>2]=P2(P2(_*Q)+P2(E*c))+P2(F*d),U2[344+b>>2]=P2(P2(D*Z)+P2(i*k))+P2(a*o),U2[340+b>>2]=P2(P2(h*Z)+P2(N*k))+P2(R*o),U2[336+b>>2]=P2(P2(_*Z)+P2(E*k))+P2(F*o),U2[328+b>>2]=P2(P2(u*D)+P2(v*i))+P2(B*a),U2[324+b>>2]=P2(P2(u*h)+P2(v*N))+P2(B*R),U2[320+b>>2]=P2(P2(_*u)+P2(E*v))+P2(F*B),U2[376+b>>2]=W+P2(P2(P2(Q*G)+P2(c*C))+P2(d*g)),U2[372+b>>2]=J+P2(P2(P2(Z*G)+P2(k*C))+P2(o*g)),U2[368+b>>2]=m+P2(P2(P2(u*G)+P2(v*C))+P2(B*g)),X2[316+b>>2]=r,X2[312+b>>2]=-1,X2[304+b>>2]=X2[4+b>>2],X2[300+b>>2]=f,X2[296+b>>2]=0,X2[308+b>>2]=320+b,X2[52+b>>2]=1065353216,X2[56+b>>2]=0,X2[64+b>>2]=0,X2[76+b>>2]=r,X2[68+b>>2]=f,X2[48+b>>2]=20364,e=X2[24+b>>2],X2[72+b>>2]=e,U2[52+b>>2]=U2[e+4>>2],X2[64+b>>2]=X2[e+16>>2],p4(X2[16+b>>2],X2[20+b>>2],296+b|0,48+b|0),(0|r)==(0|s))break A;r=r+1|0,A=A+80|0,t=X2[12+b>>2],l=X2[8+b>>2];}K2=832+b|0;}function M4(A,e,r,f,i,a){var n,x,y,V,b,t=0,o=P2(0),c=0,k=P2(0),u=P2(0),s=P2(0),l=0,B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=P2(0),g=P2(0),E=P2(0),Q=P2(0),w=P2(0),G=0,C=0,h=P2(0),F=P2(0),Y=P2(0),m=P2(0),N=P2(0),R=P2(0),D=P2(0),T=P2(0),W=P2(0),p=0,I=P2(0),M=P2(0),S=0,X=0,J=0,U=0,H=0,P=0,j=0;P2(0),P2(0),P2(0);K2=b=K2-672|0,t=X2[f+12>>2],n=X2[f+4>>2];A:if((0|(p=X2[n+4>>2]))<=19)U2[644+b>>2]=a,X2[640+b>>2]=0,X2[472+b>>2]=15320,U2[636+b>>2]=U2[i+4>>2],S2[444+b|0]=0,X2[420+b>>2]=953267991,X2[32+b>>2]=17368,X2[668+b>>2]=0,X2[664+b>>2]=n,X2[660+b>>2]=A,X2[648+b>>2]=20032,X2[656+b>>2]=32+b,X2[652+b>>2]=112+b,D4(648+b|0,e,r,t,t,472+b|0)&&(a=U2[604+b>>2],o=U2[608+b>>2],k=U2[612+b>>2],(u=P2(P2(P2(a*a)+P2(o*o))+P2(k*k)))>P2(9999999747378752e-20)&&(B=U2[636+b>>2])<U2[i+4>>2]&&(s=k,k=P2(P2(1)/P2(O2(u))),U2[612+b>>2]=s*k,U2[608+b>>2]=o*k,U2[604+b>>2]=a*k,X2[56+b>>2]=n,r=X2[(e=628+b|0)+4>>2],X2[(A=96+b|0)>>2]=X2[e>>2],X2[A+4>>2]=r,t=X2[(r=(A=604+b|0)+8|0)+4>>2],X2[(e=80+b|0)>>2]=X2[r>>2],X2[e+4>>2]=t,e=X2[624+b>>2],X2[88+b>>2]=X2[620+b>>2],X2[92+b>>2]=e,U2[104+b>>2]=B,e=X2[A+4>>2],X2[72+b>>2]=X2[A>>2],X2[76+b>>2]=e,X2[64+b>>2]=X2[f+8>>2],X2[68+b>>2]=48+b,P2(N2[X2[X2[i>>2]+12>>2]](i,b+64|0,1))));else if((X=p-21|0)>>>0<=8){e:switch(0|X){case 0:if(o=U2[t+20>>2],k=U2[t+36>>2],u=U2[(p=t+8|0)>>2],B=U2[(X=t+24|0)>>2],Q=U2[t+52>>2],g=U2[(G=t+56|0)>>2],_=U2[(J=t+40|0)>>2],d=U2[t+32>>2],Z=U2[t+16>>2],v=U2[t>>2],s=U2[t+4>>2],E=U2[t+48>>2],X2[76+b>>2]=0,Q=P2(-Q),I=P2(P2(P2(B*Q)-P2(u*E))-P2(_*g)),w=U2[e+48>>2],h=U2[e+52>>2],F=U2[(C=e+56|0)>>2],U2[72+b>>2]=I+P2(P2(P2(u*w)+P2(B*h))+P2(_*F)),M=P2(P2(P2(o*Q)-P2(s*E))-P2(k*g)),U2[68+b>>2]=M+P2(P2(P2(s*w)+P2(o*h))+P2(k*F)),m=P2(P2(P2(Z*Q)-P2(v*E))-P2(d*g)),U2[64+b>>2]=m+P2(P2(P2(v*w)+P2(Z*h))+P2(d*F)),g=U2[r+52>>2],E=U2[(U=r+56|0)>>2],Q=U2[r+48>>2],X2[500+b>>2]=0,w=U2[(H=r+8|0)>>2],h=U2[(P=r+24|0)>>2],F=U2[(j=r+40|0)>>2],U2[512+b>>2]=P2(P2(u*w)+P2(B*h))+P2(_*F),N=U2[r+4>>2],R=U2[r+20>>2],Y=U2[r+36>>2],U2[508+b>>2]=P2(P2(u*N)+P2(B*R))+P2(_*Y),U2[496+b>>2]=P2(P2(s*w)+P2(o*h))+P2(k*F),U2[492+b>>2]=P2(P2(s*N)+P2(o*R))+P2(k*Y),X2[484+b>>2]=0,D=U2[r>>2],T=U2[r+16>>2],W=U2[r+32>>2],U2[504+b>>2]=P2(P2(u*D)+P2(B*T))+P2(_*W),U2[488+b>>2]=P2(P2(s*D)+P2(o*T))+P2(k*W),U2[480+b>>2]=P2(P2(v*w)+P2(Z*h))+P2(d*F),U2[476+b>>2]=P2(P2(v*N)+P2(Z*R))+P2(d*Y),U2[472+b>>2]=P2(P2(v*D)+P2(Z*T))+P2(d*W),X2[532+b>>2]=0,X2[(c=524+b|0)>>2]=0,X2[c+4>>2]=0,X2[(c=516+b|0)>>2]=0,X2[c+4>>2]=0,f=X2[f+8>>2],w=P2(N2[X2[X2[n>>2]+48>>2]](n)),S=X2[(l=e+8|0)+4>>2],X2[(c=128+b|0)>>2]=X2[l>>2],X2[c+4>>2]=S,l=X2[e+20>>2],X2[(c=136+b|0)>>2]=X2[e+16>>2],X2[c+4>>2]=l,S=X2[(l=e+24|0)+4>>2],X2[(c=144+b|0)>>2]=X2[l>>2],X2[c+4>>2]=S,l=X2[e+36>>2],X2[(c=152+b|0)>>2]=X2[e+32>>2],X2[c+4>>2]=l,S=X2[(l=e+40|0)+4>>2],X2[(c=160+b|0)>>2]=X2[l>>2],X2[c+4>>2]=S,l=X2[e+52>>2],X2[(c=168+b|0)>>2]=X2[e+48>>2],X2[c+4>>2]=l,l=X2[C+4>>2],X2[(c=176+b|0)>>2]=X2[C>>2],X2[c+4>>2]=l,c=X2[H+4>>2],X2[(C=192+b|0)>>2]=X2[H>>2],X2[C+4>>2]=c,X2[116+b>>2]=A,X2[112+b>>2]=20136,C=X2[e+4>>2],X2[120+b>>2]=X2[e>>2],X2[124+b>>2]=C,e=X2[r+4>>2],X2[184+b>>2]=X2[r>>2],X2[188+b>>2]=e,C=X2[r+36>>2],X2[(e=216+b|0)>>2]=X2[r+32>>2],X2[e+4>>2]=C,C=X2[P+4>>2],X2[(e=208+b|0)>>2]=X2[P>>2],X2[e+4>>2]=C,C=X2[r+20>>2],X2[(e=200+b|0)>>2]=X2[r+16>>2],X2[e+4>>2]=C,C=X2[j+4>>2],X2[(e=224+b|0)>>2]=X2[j>>2],X2[e+4>>2]=C,C=X2[r+52>>2],X2[(e=232+b|0)>>2]=X2[r+48>>2],X2[e+4>>2]=C,r=X2[U+4>>2],X2[(e=240+b|0)>>2]=X2[U>>2],X2[e+4>>2]=r,r=X2[p+4>>2],X2[(e=256+b|0)>>2]=X2[p>>2],X2[e+4>>2]=r,e=X2[t+4>>2],X2[248+b>>2]=X2[t>>2],X2[252+b>>2]=e,r=X2[X+4>>2],X2[(e=272+b|0)>>2]=X2[X>>2],X2[e+4>>2]=r,r=X2[t+20>>2],X2[(e=264+b|0)>>2]=X2[t+16>>2],X2[e+4>>2]=r,r=X2[J+4>>2],X2[(e=288+b|0)>>2]=X2[J>>2],X2[e+4>>2]=r,r=X2[t+36>>2],X2[(e=280+b|0)>>2]=X2[t+32>>2],X2[e+4>>2]=r,r=X2[G+4>>2],X2[(e=304+b|0)>>2]=X2[G>>2],X2[e+4>>2]=r,r=X2[t+52>>2],X2[(e=296+b|0)>>2]=X2[t+48>>2],X2[e+4>>2]=r,U2[316+b>>2]=w,X2[328+b>>2]=f,X2[332+b>>2]=n,X2[112+b>>2]=21244,U2[320+b>>2]=a,X2[324+b>>2]=i,U2[312+b>>2]=U2[i+4>>2],N2[X2[X2[A>>2]+8>>2]](A,472+b|0,648+b|0,48+b|0),X2[32+b>>2]=13540,X2[36+b>>2]=X2[n+56>>2],a=P2(I+P2(P2(P2(u*Q)+P2(B*g))+P2(_*E))),o=P2(M+P2(P2(P2(s*Q)+P2(o*g))+P2(k*E))),k=P2(m+P2(P2(P2(v*Q)+P2(Z*g))+P2(d*E))),X2[40+b>>2]=112+b,A=X2[n+60>>2],J2[A+60|0]){Z1(A,32+b|0,b+64|0,k,o,a,648+b|0,48+b|0,X2[A+56>>2]);break A;}d1(A,32+b|0,b+64|0,k,o,a,648+b|0,48+b|0);break A;case 7:if(U2[284+b>>2]=a,X2[280+b>>2]=0,X2[112+b>>2]=15320,U2[276+b>>2]=U2[i+4>>2],X2[84+b>>2]=n,X2[80+b>>2]=0,X2[76+b>>2]=A,X2[68+b>>2]=0,X2[72+b>>2]=0,X2[64+b>>2]=20032,!D4(b+64|0,e,r,t,t,112+b|0))break A;if(a=U2[244+b>>2],o=U2[248+b>>2],k=U2[252+b>>2],!((u=P2(P2(P2(a*a)+P2(o*o))+P2(k*k)))>P2(9999999747378752e-20)))break A;if(!((B=U2[276+b>>2])<U2[i+4>>2]))break A;s=k,k=P2(P2(1)/P2(O2(u))),U2[252+b>>2]=s*k,U2[248+b>>2]=o*k,U2[244+b>>2]=a*k,X2[656+b>>2]=n,r=X2[(e=268+b|0)+4>>2],X2[(A=504+b|0)>>2]=X2[e>>2],X2[A+4>>2]=r,t=X2[(r=(A=244+b|0)+8|0)+4>>2],X2[(e=488+b|0)>>2]=X2[r>>2],X2[e+4>>2]=t,e=X2[264+b>>2],X2[496+b>>2]=X2[260+b>>2],X2[500+b>>2]=e,U2[512+b>>2]=B,e=X2[A+4>>2],X2[480+b>>2]=X2[A>>2],X2[484+b>>2]=e,X2[472+b>>2]=X2[f+8>>2],X2[476+b>>2]=648+b,P2(N2[X2[X2[i>>2]+12>>2]](i,472+b|0,1));break A;default:break e;}g=U2[(p=r+56|0)>>2],E=U2[r+52>>2],Q=U2[(X=t+56|0)>>2],V=U2[t+52>>2],w=U2[(G=e+56|0)>>2],h=U2[e+52>>2],o=U2[t+20>>2],k=U2[t+36>>2],u=U2[(J=t+40|0)>>2],B=U2[(C=t+8|0)>>2],_=U2[(U=t+24|0)>>2],F=U2[r+48>>2],N=U2[t+48>>2],R=U2[e+48>>2],d=U2[t+32>>2],Z=U2[t>>2],v=U2[t+16>>2],s=U2[t+4>>2],X2[500+b>>2]=0,Y=U2[(H=r+8|0)>>2],D=U2[(P=r+24|0)>>2],T=U2[(j=r+40|0)>>2],U2[512+b>>2]=P2(P2(B*Y)+P2(_*D))+P2(u*T),W=U2[r+4>>2],I=U2[r+20>>2],M=U2[r+36>>2],U2[508+b>>2]=P2(P2(B*W)+P2(_*I))+P2(u*M),U2[496+b>>2]=P2(P2(s*Y)+P2(o*D))+P2(k*T),U2[492+b>>2]=P2(P2(s*W)+P2(o*I))+P2(k*M),X2[484+b>>2]=0,m=U2[r>>2],x=U2[r+16>>2],y=U2[r+32>>2],U2[504+b>>2]=P2(P2(B*m)+P2(_*x))+P2(u*y),U2[488+b>>2]=P2(P2(s*m)+P2(o*x))+P2(k*y),U2[480+b>>2]=P2(P2(Z*Y)+P2(v*D))+P2(d*T),U2[476+b>>2]=P2(P2(Z*W)+P2(v*I))+P2(d*M),U2[472+b>>2]=P2(P2(Z*m)+P2(v*x))+P2(d*y),X2[532+b>>2]=0,X2[(c=524+b|0)>>2]=0,X2[c+4>>2]=0,X2[(c=516+b|0)>>2]=0,X2[c+4>>2]=0,f=X2[f+8>>2],Y=P2(N2[X2[X2[n>>2]+48>>2]](n)),S=X2[(l=e+8|0)+4>>2],X2[(c=128+b|0)>>2]=X2[l>>2],X2[c+4>>2]=S,l=X2[e+20>>2],X2[(c=136+b|0)>>2]=X2[e+16>>2],X2[c+4>>2]=l,S=X2[(l=e+24|0)+4>>2],X2[(c=144+b|0)>>2]=X2[l>>2],X2[c+4>>2]=S,l=X2[e+36>>2],X2[(c=152+b|0)>>2]=X2[e+32>>2],X2[c+4>>2]=l,S=X2[(l=e+40|0)+4>>2],X2[(c=160+b|0)>>2]=X2[l>>2],X2[c+4>>2]=S,l=X2[e+52>>2],X2[(c=168+b|0)>>2]=X2[e+48>>2],X2[c+4>>2]=l,l=X2[G+4>>2],X2[(c=176+b|0)>>2]=X2[G>>2],X2[c+4>>2]=l,c=X2[H+4>>2],X2[(G=192+b|0)>>2]=X2[H>>2],X2[G+4>>2]=c,X2[116+b>>2]=A,X2[112+b>>2]=20136,G=X2[e+4>>2],X2[120+b>>2]=X2[e>>2],X2[124+b>>2]=G,e=X2[r+4>>2],X2[184+b>>2]=X2[r>>2],X2[188+b>>2]=e,G=X2[r+36>>2],X2[(e=216+b|0)>>2]=X2[r+32>>2],X2[e+4>>2]=G,G=X2[P+4>>2],X2[(e=208+b|0)>>2]=X2[P>>2],X2[e+4>>2]=G,G=X2[r+20>>2],X2[(e=200+b|0)>>2]=X2[r+16>>2],X2[e+4>>2]=G,G=X2[j+4>>2],X2[(e=224+b|0)>>2]=X2[j>>2],X2[e+4>>2]=G,G=X2[r+52>>2],X2[(e=232+b|0)>>2]=X2[r+48>>2],X2[e+4>>2]=G,r=X2[p+4>>2],X2[(e=240+b|0)>>2]=X2[p>>2],X2[e+4>>2]=r,r=X2[C+4>>2],X2[(e=256+b|0)>>2]=X2[C>>2],X2[e+4>>2]=r,e=X2[t+4>>2],X2[248+b>>2]=X2[t>>2],X2[252+b>>2]=e,r=X2[U+4>>2],X2[(e=272+b|0)>>2]=X2[U>>2],X2[e+4>>2]=r,r=X2[t+20>>2],X2[(e=264+b|0)>>2]=X2[t+16>>2],X2[e+4>>2]=r,r=X2[J+4>>2],X2[(e=288+b|0)>>2]=X2[J>>2],X2[e+4>>2]=r,r=X2[t+36>>2],X2[(e=280+b|0)>>2]=X2[t+32>>2],X2[e+4>>2]=r,r=X2[X+4>>2],X2[(e=304+b|0)>>2]=X2[X>>2],X2[e+4>>2]=r,r=X2[t+52>>2],X2[(e=296+b|0)>>2]=X2[t+48>>2],X2[e+4>>2]=r,U2[316+b>>2]=Y,X2[328+b>>2]=f,X2[332+b>>2]=n,X2[112+b>>2]=21268,U2[320+b>>2]=a,X2[324+b>>2]=i,U2[312+b>>2]=U2[i+4>>2],N2[X2[X2[A>>2]+8>>2]](A,472+b|0,b+64|0,648+b|0),X2[60+b>>2]=0,X2[44+b>>2]=0,Y=P2(-V),D=P2(P2(P2(v*Y)-P2(Z*N))-P2(d*Q)),a=P2(D+P2(P2(P2(Z*F)+P2(v*E))+P2(d*g))),d=P2(D+P2(P2(P2(Z*R)+P2(v*h))+P2(d*w))),U2[48+b>>2]=U2[64+b>>2]+(a<d?a:d),v=P2(P2(P2(o*Y)-P2(s*N))-P2(k*Q)),Z=P2(v+P2(P2(P2(s*F)+P2(o*E))+P2(k*g))),o=P2(v+P2(P2(P2(s*R)+P2(o*h))+P2(k*w))),U2[52+b>>2]=U2[68+b>>2]+(Z<o?Z:o),v=P2(P2(P2(_*Y)-P2(B*N))-P2(u*Q)),k=P2(v+P2(P2(P2(B*F)+P2(_*E))+P2(u*g))),u=P2(v+P2(P2(P2(B*R)+P2(_*h))+P2(u*w))),U2[56+b>>2]=U2[72+b>>2]+(k<u?k:u),U2[32+b>>2]=U2[648+b>>2]+(d<a?a:d),U2[36+b>>2]=U2[652+b>>2]+(o<Z?Z:o),U2[40+b>>2]=U2[656+b>>2]+(u<k?k:u),N2[X2[X2[n>>2]+64>>2]](n,112+b|0,48+b|0,32+b|0);}else if(31==(0|p)){if(m=U2[(p=t+52|0)>>2],g=U2[(X=t+56|0)>>2],E=U2[e+52>>2],Q=U2[e+56>>2],o=U2[(G=t+20|0)>>2],k=U2[(J=t+36|0)>>2],w=U2[e+20>>2],h=U2[e+36>>2],F=U2[e+24>>2],u=U2[(C=t+24|0)>>2],N=U2[e+40>>2],B=U2[(U=t+40|0)>>2],_=U2[t+32>>2],d=U2[t>>2],Z=U2[t+16>>2],R=U2[e+32>>2],Y=U2[e>>2],D=U2[e+16>>2],T=U2[t+48>>2],W=U2[e+48>>2],v=U2[t+4>>2],I=U2[e+4>>2],M=U2[e+8>>2],s=U2[t+8>>2],X2[(H=172+b|0)>>2]=0,X2[(P=156+b|0)>>2]=0,X2[(j=140+b|0)>>2]=0,U2[(c=152+b|0)>>2]=P2(P2(s*M)+P2(u*F))+P2(B*N),U2[(l=148+b|0)>>2]=P2(P2(s*I)+P2(u*w))+P2(B*h),U2[(S=136+b|0)>>2]=P2(P2(v*M)+P2(o*F))+P2(k*N),U2[(x=132+b|0)>>2]=P2(P2(v*I)+P2(o*w))+P2(k*h),y=168+b|0,m=P2(-m),U2[y>>2]=P2(P2(P2(u*m)-P2(s*T))-P2(B*g))+P2(P2(P2(s*W)+P2(u*E))+P2(B*Q)),U2[(V=164+b|0)>>2]=P2(P2(P2(o*m)-P2(v*T))-P2(k*g))+P2(P2(P2(v*W)+P2(o*E))+P2(k*Q)),X2[124+b>>2]=0,U2[144+b>>2]=P2(P2(s*Y)+P2(u*D))+P2(B*R),U2[128+b>>2]=P2(P2(v*Y)+P2(o*D))+P2(k*R),U2[120+b>>2]=P2(P2(d*M)+P2(Z*F))+P2(_*N),U2[160+b>>2]=P2(P2(P2(Z*m)-P2(d*T))-P2(_*g))+P2(P2(P2(d*W)+P2(Z*E))+P2(_*Q)),U2[116+b>>2]=P2(P2(d*I)+P2(Z*w))+P2(_*h),U2[112+b>>2]=P2(P2(d*Y)+P2(Z*D))+P2(_*R),N2[X2[X2[A>>2]+8>>2]](A,112+b|0,48+b|0,32+b|0),m=U2[p>>2],g=U2[X>>2],E=U2[r+52>>2],Q=U2[r+56>>2],o=U2[G>>2],k=U2[J>>2],w=U2[r+20>>2],h=U2[r+36>>2],F=U2[r+24>>2],u=U2[C>>2],N=U2[r+40>>2],B=U2[U>>2],_=U2[t+32>>2],d=U2[t>>2],Z=U2[t+16>>2],R=U2[r+32>>2],Y=U2[r>>2],D=U2[r+16>>2],T=U2[t+48>>2],W=U2[r+48>>2],v=U2[t+4>>2],I=U2[r+4>>2],M=U2[r+8>>2],s=U2[t+8>>2],X2[H>>2]=0,X2[P>>2]=0,X2[j>>2]=0,U2[c>>2]=P2(P2(s*M)+P2(u*F))+P2(B*N),U2[l>>2]=P2(P2(s*I)+P2(u*w))+P2(B*h),U2[S>>2]=P2(P2(v*M)+P2(o*F))+P2(k*N),U2[x>>2]=P2(P2(v*I)+P2(o*w))+P2(k*h),m=P2(-m),U2[y>>2]=P2(P2(P2(u*m)-P2(s*T))-P2(B*g))+P2(P2(P2(s*W)+P2(u*E))+P2(B*Q)),U2[V>>2]=P2(P2(P2(o*m)-P2(v*T))-P2(k*g))+P2(P2(P2(v*W)+P2(o*E))+P2(k*Q)),X2[124+b>>2]=0,U2[144+b>>2]=P2(P2(s*Y)+P2(u*D))+P2(B*R),U2[128+b>>2]=P2(P2(v*Y)+P2(o*D))+P2(k*R),U2[120+b>>2]=P2(P2(d*M)+P2(Z*F))+P2(_*N),U2[160+b>>2]=P2(P2(P2(Z*m)-P2(d*T))-P2(_*g))+P2(P2(P2(d*W)+P2(Z*E))+P2(_*Q)),U2[116+b>>2]=P2(P2(d*I)+P2(Z*w))+P2(_*h),U2[112+b>>2]=P2(P2(d*Y)+P2(Z*D))+P2(_*R),N2[X2[X2[A>>2]+8>>2]](A,112+b|0,16+b|0,b),(o=U2[16+b>>2])<U2[48+b>>2]&&(U2[48+b>>2]=o),(o=U2[20+b>>2])<U2[52+b>>2]&&(U2[52+b>>2]=o),(o=U2[24+b>>2])<U2[56+b>>2]&&(U2[56+b>>2]=o),(o=U2[28+b>>2])<U2[60+b>>2]&&(U2[60+b>>2]=o),(o=U2[b>>2])>U2[32+b>>2]&&(U2[32+b>>2]=o),(o=U2[4+b>>2])>U2[36+b>>2]&&(U2[36+b>>2]=o),(o=U2[8+b>>2])>U2[40+b>>2]&&(U2[40+b>>2]=o),(o=U2[12+b>>2])>U2[44+b>>2]&&(U2[44+b>>2]=o),X2[504+b>>2]=i,X2[500+b>>2]=t,U2[492+b>>2]=a,X2[488+b>>2]=r,X2[484+b>>2]=e,X2[480+b>>2]=A,X2[476+b>>2]=f,X2[472+b>>2]=21292,X2[496+b>>2]=n,!(A=X2[n+72>>2])){if(X2[n+24>>2]<1)break A;for(A=32,e=1;;){if(r=X2[n+32>>2]+A|0,f=X2[r+32>>2],a=U2[r+16>>2],o=U2[r+20>>2],k=U2[r+24>>2],u=U2[r-32>>2],B=U2[r-16>>2],_=U2[r>>2],d=U2[r-28>>2],Z=U2[r-12>>2],v=U2[r+4>>2],s=U2[r-24>>2],g=U2[r-8>>2],E=U2[r+8>>2],X2[172+b>>2]=0,X2[156+b>>2]=0,X2[140+b>>2]=0,X2[124+b>>2]=0,Q=U2[t+32>>2],w=U2[t+36>>2],h=U2[t+40>>2],U2[152+b>>2]=P2(P2(s*Q)+P2(g*w))+P2(E*h),U2[148+b>>2]=P2(P2(d*Q)+P2(Z*w))+P2(v*h),U2[144+b>>2]=P2(P2(u*Q)+P2(B*w))+P2(_*h),F=U2[t+16>>2],N=U2[t+20>>2],R=U2[t+24>>2],U2[136+b>>2]=P2(P2(s*F)+P2(g*N))+P2(E*R),U2[132+b>>2]=P2(P2(d*F)+P2(Z*N))+P2(v*R),U2[128+b>>2]=P2(P2(u*F)+P2(B*N))+P2(_*R),Y=s,s=U2[t>>2],m=g,g=U2[t+4>>2],D=E,E=U2[t+8>>2],U2[120+b>>2]=P2(P2(Y*s)+P2(m*g))+P2(D*E),U2[116+b>>2]=P2(P2(d*s)+P2(Z*g))+P2(v*E),U2[112+b>>2]=P2(P2(u*s)+P2(B*g))+P2(_*E),U2[168+b>>2]=P2(P2(P2(a*Q)+P2(o*w))+P2(k*h))+U2[t+56>>2],U2[164+b>>2]=P2(P2(P2(a*F)+P2(o*N))+P2(k*R))+U2[t+52>>2],U2[160+b>>2]=P2(P2(P2(a*s)+P2(o*g))+P2(k*E))+U2[t+48>>2],X2[68+b>>2]=1065353216,X2[72+b>>2]=1,X2[76+b>>2]=-1,X2[88+b>>2]=r=e-1|0,i=X2[504+b>>2],X2[84+b>>2]=i,X2[80+b>>2]=f,X2[64+b>>2]=21328,U2[68+b>>2]=U2[i+4>>2],X2[668+b>>2]=r,X2[664+b>>2]=-1,X2[652+b>>2]=f,r=X2[476+b>>2],X2[648+b>>2]=r,X2[656+b>>2]=X2[r+8>>2],X2[660+b>>2]=112+b,M4(X2[480+b>>2],X2[484+b>>2],X2[488+b>>2],648+b|0,b+64|0,U2[492+b>>2]),X2[n+24>>2]<=(0|e))break A;A=A+80|0,e=e+1|0,t=X2[500+b>>2];}}f=X2[(r=56+b|0)+4>>2],X2[(e=120+b|0)>>2]=X2[r>>2],X2[e+4>>2]=f,f=X2[(r=40+b|0)+4>>2],X2[(e=136+b|0)>>2]=X2[r>>2],X2[e+4>>2]=f,e=X2[52+b>>2],X2[112+b>>2]=X2[48+b>>2],X2[116+b>>2]=e,e=X2[36+b>>2],X2[128+b>>2]=X2[32+b>>2],X2[132+b>>2]=e,l4(X2[A>>2],112+b|0,472+b|0);}K2=672+b|0;}function S4(A,e,r,f,i,a){A|=0,e|=0,r|=0,f=P2(f),i|=0;var n,b,t;return X2[52+(K2=t=K2+-64|0)>>2]=a|=0,X2[48+t>>2]=i,X2[56+t>>2]=X2[A+220>>2],i=X2[A+212>>2],U2[i+4>>2]>=f&&(b=X2[4+(n=r+8|0)>>2],X2[(a=32+t|0)>>2]=X2[n>>2],X2[a+4>>2]=b,b=X2[4+(n=e+8|0)>>2],X2[(a=16+t|0)>>2]=X2[n>>2],X2[a+4>>2]=b,a=X2[r+4>>2],X2[24+t>>2]=X2[r>>2],X2[28+t>>2]=a,r=X2[e+4>>2],X2[8+t>>2]=X2[e>>2],X2[12+t>>2]=r,U2[40+t>>2]=f,X2[t>>2]=X2[A+216>>2],X2[4+t>>2]=48+t,f=P2(N2[X2[X2[i>>2]+12>>2]](i,t,1))),K2=t+64|0,P2(f);}function X4(A,e,r,f,x,i){var a,n,b,t,o,c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C,h,F,Y,m,N,y,V,R,D=0,T=(P2(0),0),W=0,I=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),0);P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);K2=R=K2-368|0,T=X2[4+(k=r+8|0)>>2],X2[(D=312+R|0)>>2]=X2[(W=k)>>2],X2[4+D>>2]=T,n=X2[4+(W=r+24|0)>>2],X2[(D=328+R|0)>>2]=X2[(T=W)>>2],X2[4+D>>2]=n,Z=X2[4+(T=r+40|0)>>2],X2[(D=344+R|0)>>2]=X2[T>>2],X2[4+D>>2]=Z,u=X2[4+(n=r+56|0)>>2],X2[(D=360+R|0)>>2]=X2[n>>2],X2[4+D>>2]=u,_=X2[4+(Z=f+8|0)>>2],X2[(D=248+R|0)>>2]=X2[Z>>2],X2[4+D>>2]=_,D=X2[r+4>>2],X2[304+R>>2]=X2[r>>2],X2[308+R>>2]=D,D=X2[r+20>>2],X2[320+R>>2]=X2[r+16>>2],X2[324+R>>2]=D,D=X2[r+36>>2],X2[336+R>>2]=X2[r+32>>2],X2[340+R>>2]=D,D=X2[r+52>>2],X2[352+R>>2]=X2[r+48>>2],X2[356+R>>2]=D,D=X2[f+4>>2],X2[240+R>>2]=X2[f>>2],X2[244+R>>2]=D,s=X2[4+(u=f+24|0)>>2],X2[(D=264+R|0)>>2]=X2[u>>2],X2[4+D>>2]=s,g=X2[4+(_=f+40|0)>>2],X2[(D=280+R|0)>>2]=X2[_>>2],X2[4+D>>2]=g,E=X2[4+(s=f+56|0)>>2],X2[(D=296+R|0)>>2]=X2[s>>2],X2[4+D>>2]=E,D=X2[f+20>>2],X2[256+R>>2]=X2[f+16>>2],X2[260+R>>2]=D,D=X2[f+36>>2],X2[272+R>>2]=X2[f+32>>2],X2[276+R>>2]=D,D=X2[f+52>>2],X2[288+R>>2]=X2[f+48>>2],X2[292+R>>2]=D,E4(304+R|0,240+R|0,8+R|0,224+R|0),N=U2[16+R>>2],y=U2[8+R>>2],V=U2[12+R>>2],l=U2[224+R>>2],X2[(D=g=20+R|0)>>2]=0,X2[4+D>>2]=0,X2[(D=E=32+R|0)>>2]=0,X2[4+D>>2]=0,X2[(Q=28+R|0)>>2]=1065353216,X2[(D=C=40+R|0)>>2]=0,X2[4+D>>2]=0,X2[(D=52+R|0)>>2]=0,X2[4+D>>2]=0,X2[(h=48+R|0)>>2]=1065353216,X2[(I=G=60+R|0)>>2]=0,X2[4+I>>2]=0,X2[(I=68+R|0)>>2]=0,X2[12+R>>2]=0,X2[16+R>>2]=0,X2[8+R>>2]=1065353216,Q4(304+R|0,224+R|0),X2[D>>2]=0,X2[(F=36+R|0)>>2]=0,X2[g>>2]=0,a=U2[224+R>>2],b=U2[228+R>>2],o=U2[232+R>>2],t=U2[236+R>>2],c=P2(P2(2)/P2(P2(P2(P2(a*a)+P2(b*b))+P2(o*o))+P2(t*t))),B=P2(o*c),v=P2(b*B),w=P2(a*c),d=P2(t*w),U2[44+R>>2]=v+d,Y=P2(a*B),c=P2(b*c),m=P2(t*c),U2[C>>2]=Y-m,U2[E>>2]=v-d,v=P2(a*w),b=P2(b*c),U2[h>>2]=P2(1)-P2(v+b),o=P2(o*B),U2[Q>>2]=P2(1)-P2(v+o),a=P2(a*c),t=P2(t*B),U2[24+R>>2]=a+t,U2[16+R>>2]=Y+m,U2[12+R>>2]=a-t,U2[8+R>>2]=P2(1)-P2(b+o),N2[X2[X2[e>>2]+8>>2]](e,8+R|0,224+R|0,208+R|0),b=U2[208+R>>2],t=U2[212+R>>2],o=U2[216+R>>2],c=U2[224+R>>2],B=U2[228+R>>2],a=U2[232+R>>2],v=P2(N2[X2[X2[e>>2]+16>>2]](e)),X2[220+R>>2]=0,X2[236+R>>2]=0,w=P2(a+P2(0)),a=P2(y*l),d=P2(a*a),a=P2(l*V),d=P2(d+P2(a*a)),a=P2(l*N),a=P2(v*P2(O2(P2(d+P2(a*a))))),U2[232+R>>2]=w-a,U2[228+R>>2]=P2(B+P2(0))-a,U2[224+R>>2]=P2(c+P2(0))-a,U2[216+R>>2]=a+o,U2[212+R>>2]=a+t,U2[208+R>>2]=a+b,Q=X2[4+k>>2],X2[D>>2]=X2[k>>2],X2[4+D>>2]=Q,D=X2[r+20>>2],X2[G>>2]=X2[r+16>>2],X2[4+G>>2]=D,D=X2[4+W>>2],X2[I>>2]=X2[W>>2],X2[4+I>>2]=D,k=X2[r+36>>2],X2[(D=76+R|0)>>2]=X2[r+32>>2],X2[4+D>>2]=k,k=X2[4+T>>2],X2[(D=84+R|0)>>2]=X2[T>>2],X2[4+D>>2]=k,W=X2[r+52>>2],X2[(D=92+R|0)>>2]=X2[r+48>>2],X2[4+D>>2]=W,T=X2[4+n>>2],X2[(W=k=100+R|0)>>2]=X2[n>>2],X2[4+W>>2]=T,T=X2[4+Z>>2],X2[(W=116+R|0)>>2]=X2[Z>>2],X2[4+W>>2]=T,X2[8+R>>2]=22200,W=X2[r+4>>2],X2[44+R>>2]=X2[r>>2],X2[48+R>>2]=W,r=X2[f+4>>2],X2[108+R>>2]=X2[f>>2],X2[112+R>>2]=r,T=X2[f+52>>2],X2[(r=156+R|0)>>2]=X2[f+48>>2],X2[r+4>>2]=T,n=X2[4+s>>2],X2[(T=W=164+R|0)>>2]=X2[s>>2],X2[4+T>>2]=n,n=X2[4+u>>2],X2[(T=132+R|0)>>2]=X2[u>>2],X2[4+T>>2]=n,n=X2[f+20>>2],X2[(T=124+R|0)>>2]=X2[f+16>>2],X2[4+T>>2]=n,n=X2[4+_>>2],X2[(T=148+R|0)>>2]=X2[_>>2],X2[4+T>>2]=n,n=X2[f+36>>2],X2[(T=140+R|0)>>2]=X2[f+32>>2],X2[4+T>>2]=n,X2[192+R>>2]=x,U2[196+R>>2]=i,X2[200+R>>2]=e,a=U2[96+R>>2],b=U2[160+R>>2],i=U2[D>>2],t=U2[r>>2],l=U2[k>>2],o=U2[W>>2],X2[188+R>>2]=A,i=P2(t-i),a=P2(b-a),b=P2(o-l),t=P2(P2(1)/P2(O2(P2(P2(P2(i*i)+P2(a*a))+P2(b*b))))),c=(l=P2(b*t))==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/l),X2[F>>2]=c<P2(0),B=(o=P2(a*t))==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/o),X2[E>>2]=B<P2(0),U2[g>>2]=c,U2[16+R>>2]=B,i=P2((c=i)*t),U2[40+R>>2]=P2(b*l)+P2(P2(c*i)+P2(a*o)),i=i==P2(0)?P2(0xde0b6b000000000):P2(P2(1)/i),U2[12+R>>2]=i,X2[28+R>>2]=i<P2(0),A=X2[A+68>>2],N2[X2[X2[A>>2]+24>>2]](A,352+R|0,288+R|0,8+R|0,224+R|0,208+R|0),K2=368+R|0;}function J4(A,e,r){var f=0,i=0,i=e|=0,a=0|N2[X2[X2[(r|=0)>>2]+28>>2]](r,X2[(A|=0)+28>>2]);if(X2[i>>2]=a,i=e,a=0|N2[X2[X2[r>>2]+28>>2]](r,X2[A+32>>2]),X2[i+4>>2]=a,f=0|N2[X2[X2[r>>2]+40>>2]](r,A),i=0|N2[X2[X2[r>>2]+28>>2]](r,f),(X2[e+8>>2]=i)&&N2[X2[X2[r>>2]+48>>2]](r,f),X2[e+12>>2]=X2[A+4>>2],X2[e+24>>2]=J2[A+21|0],X2[e+40>>2]=X2[A+24>>2],U2[e+44>>2]=U2[A+16>>2],X2[e+48>>2]=J2[A+20|0],r=X2[A+12>>2],f=X2[A+40>>2],X2[e+28>>2]=X2[A+36>>2],X2[e+32>>2]=f,X2[e+20>>2]=r,X2[e+36>>2]=0,X2[e+16>>2]=X2[A+8>>2],r=X2[A+28>>2],!((0|(f=X2[r+548>>2]))<1)&&(r=X2[r+556>>2],X2[r>>2]==(0|A)&&(X2[e+36>>2]=1),1!=(0|f)))for(r=r+4|0,f=f-1|0;;)if(X2[r>>2]==(0|A)&&(X2[e+36>>2]=1),r=r+4|0,!(f=f-1|0))break;if(r=X2[A+32>>2],!((0|(f=X2[r+548>>2]))<1)&&(r=X2[r+556>>2],X2[r>>2]==(0|A)&&(X2[e+36>>2]=1),1!=(0|f)))for(r=r+4|0,f=f-1|0;;)if(X2[r>>2]==(0|A)&&(X2[e+36>>2]=1),r=r+4|0,!(f=f-1|0))break;return 22384;}function U4(A,e,r,f,i,a,n,b,t,o){P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var c,k,u,s,l,B,v,d,Z,_,g,E,Q,w,G,C=X2[a+4>>2];X2[A>>2]=X2[a>>2],X2[A+4>>2]=C,Q=X2[(a=a+8|0)+4>>2],X2[(C=A+8|0)>>2]=X2[a>>2],X2[4+C>>2]=Q,a=U2[e+24>>2],Q=U2[e+20>>2],k=U2[e+40>>2],c=U2[e+36>>2],B=U2[e+8>>2],v=U2[e>>2],d=U2[e+4>>2],Z=U2[e+16>>2],e=U2[e+32>>2],s=U2[f+4>>2],u=U2[f+8>>2],f=U2[f>>2],X2[A+28>>2]=0,_=e,e=U2[C>>2],C=U2[A+4>>2],l=P2(P2(s*e)-P2(u*C)),g=c,E=u,u=U2[A>>2],c=P2(P2(E*u)-P2(e*f)),s=P2(P2(C*f)-P2(s*u)),f=P2(P2(P2(_*l)+P2(g*c))+P2(k*s)),U2[A+24>>2]=f,a=P2(P2(P2(l*Z)+P2(c*Q))+P2(s*a)),U2[A+20>>2]=a,s=P2(P2(P2(l*v)+P2(d*c))+P2(s*B)),U2[A+16>>2]=s,B=U2[r+24>>2],v=U2[r+20>>2],d=U2[r+40>>2],Z=U2[r+36>>2],w=U2[r+8>>2],G=U2[r>>2],_=U2[r+4>>2],g=U2[r+16>>2],k=U2[r+32>>2],l=U2[i+4>>2],c=U2[i>>2],Q=U2[i+8>>2],X2[A+44>>2]=0,E=k,k=P2(P2(C*Q)-P2(e*l)),e=P2(P2(e*c)-P2(u*Q)),C=P2(P2(u*l)-P2(C*c)),u=P2(P2(P2(E*k)+P2(Z*e))+P2(d*C)),U2[A+40>>2]=u,l=P2(P2(P2(k*g)+P2(e*v))+P2(C*B)),U2[A+36>>2]=l,e=P2(P2(P2(G*k)+P2(_*e))+P2(C*w)),U2[A+32>>2]=e,C=U2[n+8>>2],c=U2[n+4>>2],Q=U2[n>>2],X2[A+60>>2]=0,Q=P2(Q*s),U2[A+48>>2]=Q,c=P2(c*a),U2[A+52>>2]=c,C=P2(C*f),U2[A+56>>2]=C,k=U2[t+8>>2],B=U2[t+4>>2],v=U2[t>>2],X2[A+76>>2]=0,v=P2(v*e),U2[A+64>>2]=v,B=P2(B*l),U2[A+68>>2]=B,k=P2(k*u),U2[A+72>>2]=k,U2[A+80>>2]=P2(P2(P2(P2(P2(s*Q)+P2(a*c))+P2(f*C))+b)+o)+P2(P2(P2(e*v)+P2(l*B))+P2(u*k));}function H4(A){return X2[(A|=0)>>2]=22316,0|A;}function P4(A){var e=0,r=0,f=0,i=0,a=0,a=f=X2[A+8>>2],n=(r=X2[A+32>>2])?X2[A+40>>2]:0,b=r,t=(e=X2[A+52>>2])?X2[A+60>>2]:0;if(r=e,i=0,(e=X2[A+72>>2])&&(i=X2[A+80>>2]),P2(N2[X2[X2[f>>2]+12>>2]](a,n,b,t,r,i,e,X2[A+4>>2],X2[A+20>>2],X2[A+24>>2])),(0|(e=X2[A+32>>2]))<=-1)for(X2[A+36>>2]<=-1&&((r=X2[A+40>>2])&&J2[A+44|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+36>>2]=0,X2[A+40>>2]=0,S2[A+44|0]=1),f=e<<2;;)if(f=f+4|(X2[X2[A+40>>2]+f>>2]=0),!((r=e)>>>0<=(e=e+1|0)>>>0))break;if(((X2[A+32>>2]=0)|(e=X2[A+52>>2]))<=-1)for(X2[A+56>>2]<=-1&&((r=X2[A+60>>2])&&J2[A- -64|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+56>>2]=0,X2[A+60>>2]=0,S2[A- -64|0]=1),f=e<<2;;)if(f=f+4|(X2[X2[A+60>>2]+f>>2]=0),!((r=e)>>>0<=(e=e+1|0)>>>0))break;if(((X2[A+52>>2]=0)|(e=X2[A+72>>2]))<=-1)for(X2[A+76>>2]<=-1&&((r=X2[A+80>>2])&&J2[A+84|0]&&(X2[6259]=X2[6259]+1,q2(X2[r-4>>2])),X2[A+76>>2]=0,X2[A+80>>2]=0,S2[A+84|0]=1),f=e<<2;;)if(f=f+4|(X2[X2[A+80>>2]+f>>2]=0),!((r=e)>>>0<=(e=e+1|0)>>>0))break;X2[A+72>>2]=0;}function j4(A){var e=0;return X2[(A|=0)>>2]=22464,J2[A+288|0]&&(e=X2[A+220>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+220>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),(e=X2[A+212>>2])&&(N2[X2[X2[e>>2]>>2]](e),(e=X2[A+212>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),J2[A+289|0]&&(e=X2[A+216>>2],N2[X2[X2[e>>2]>>2]](e),(e=X2[A+216>>2])&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2]))),(e=X2[A+332>>2])&&J2[A+336|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+332>>2]=0,S2[A+336|0]=1,X2[(e=A+324|0)>>2]=0,X2[e+4>>2]=0,(e=X2[A+304>>2])&&J2[A+308|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+304>>2]=0,S2[A+308|0]=1,X2[(e=A+296|0)>>2]=0,X2[e+4>>2]=0,(e=X2[A+256>>2])&&J2[A+260|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+256>>2]=0,S2[A+260|0]=1,X2[(e=A+248|0)>>2]=0,X2[e+4>>2]=0,(e=X2[A+236>>2])&&J2[A+240|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+236>>2]=0,S2[A+240|0]=1,X2[(e=A+228|0)>>2]=0,X2[e+4>>2]=0,(e=X2[A+204>>2])&&J2[A+208|0]&&(X2[6259]=X2[6259]+1,q2(X2[e-4>>2])),X2[A+204>>2]=0,S2[A+208|0]=1,X2[(e=A+196|0)>>2]=0,X2[e+4>>2]=0,W4(A),0|A;}function z4(A,e){return X2[X2[(A|=0)+236>>2]+((e|=0)<<2)>>2];}function O4(A,e){N2[X2[X2[(A|=0)>>2]+68>>2]](A,e|=0);}function K4(A,e,r){var f,i,a,n,b,t,o,c,k,u,s,l,B,v,d;P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);(d=U2[A+404>>2])!=P2(0)&&(i=U2[e+8>>2],f=U2[e+4>>2],a=U2[A+408>>2],U2[A+372>>2]=P2(d*P2(U2[e>>2]*a))+U2[A+372>>2],n=f,f=U2[A+412>>2],U2[(o=A+376|0)>>2]=P2(d*P2(n*f))+U2[o>>2],n=d,d=U2[A+416>>2],U2[(o=A+380|0)>>2]=P2(n*P2(i*d))+U2[o>>2],o=U2[A+612>>2],c=U2[A+364>>2],k=U2[A+356>>2],u=U2[A+360>>2],s=U2[A+608>>2],l=U2[A+348>>2],B=U2[A+340>>2],v=U2[A+344>>2],t=U2[r+4>>2],i=P2(d*U2[e+8>>2]),f=P2(f*U2[e+4>>2]),b=U2[r+8>>2],d=P2(P2(t*i)-P2(f*b)),a=P2(a*U2[e>>2]),n=P2(a*b),b=U2[r>>2],i=P2(n-P2(i*b)),f=P2(P2(f*b)-P2(a*t)),U2[A+388>>2]=P2(P2(P2(P2(U2[A+324>>2]*d)+P2(U2[A+328>>2]*i))+P2(f*U2[A+332>>2]))*U2[A+604>>2])+U2[A+388>>2],U2[(e=A+392|0)>>2]=P2(s*P2(P2(P2(d*B)+P2(i*v))+P2(f*l)))+U2[e>>2],U2[(A=A+396|0)>>2]=P2(o*P2(P2(P2(d*k)+P2(i*u))+P2(f*c)))+U2[A>>2]);}function L4(A){X2[(A|=0)>>2]=22316,X2[6259]=X2[6259]+1,q2(X2[A-4>>2]);}function q4(A,e,r){P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0);var f,i,a=U2[A+552>>2],n=U2[e>>2],b=U2[A+568>>2],t=U2[e+4>>2],o=U2[A+584>>2],c=U2[e+8>>2],k=U2[A+620>>2],u=U2[A+636>>2],s=U2[A+652>>2],l=P2(P2(P2(k*U2[r>>2])+P2(u*U2[r+4>>2]))+P2(s*U2[r+8>>2])),B=U2[e+16>>2],v=U2[e+20>>2],d=U2[e+24>>2],Z=P2(P2(P2(k*U2[r+16>>2])+P2(u*U2[r+20>>2]))+P2(s*U2[r+24>>2])),_=P2(P2(P2(P2(P2(a*n)+P2(b*t))+P2(o*c))*l)+P2(P2(P2(P2(a*B)+P2(b*v))+P2(o*d))*Z)),g=a;return a=U2[e+32>>2],f=b,b=U2[e+36>>2],i=o,o=U2[e+40>>2],s=P2(P2(P2(k*U2[r+32>>2])+P2(u*U2[r+36>>2]))+P2(s*U2[r+40>>2])),k=n,n=U2[A+556>>2],u=t,t=U2[A+572>>2],e=c,c=U2[A+588>>2],P2(B2(P2(_+P2(P2(P2(P2(g*a)+P2(f*b))+P2(i*o))*s)),P2(P2(P2(P2(P2(P2(k*n)+P2(u*t))+P2(e*c))*l)+P2(P2(P2(P2(B*n)+P2(v*t))+P2(d*c))*Z))+P2(P2(P2(P2(a*n)+P2(b*t))+P2(o*c))*s)))*U2[A+732>>2]);}function $4(A,e,r){var f,i,a,x,y,V,p,M,S,n,X,b,t,o,c=P2(0),k=P2(0),u=P2(0),s=P2(0),l=P2(0),B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=(P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),P2(0),0),g=P2(0),E=U2[e+52>>2],Q=U2[e+56>>2],w=U2[A+96>>2],G=U2[A+100>>2],C=U2[A+104>>2],c=U2[e+20>>2],B=U2[e+24>>2],h=U2[A- -64>>2],F=U2[A+80>>2],Y=U2[A+52>>2],m=U2[A+68>>2],N=U2[A+84>>2],R=U2[A+56>>2],l=U2[e+36>>2],D=U2[A+72>>2],k=U2[e+40>>2],T=U2[A+88>>2],W=U2[e+48>>2],u=U2[e+8>>2],s=U2[e>>2],v=U2[e+4>>2],Z=U2[e+16>>2],I=U2[A+48>>2],d=U2[e+32>>2];X2[A+1296>>2]=e=0,X2[A+1280>>2]=0,X2[A+1264>>2]=0,X2[A+1248>>2]=0,U2[(x=A+1276|0)>>2]=P2(P2(R*d)+P2(D*l))+P2(T*k),U2[(y=A+1272|0)>>2]=P2(P2(Y*d)+P2(m*l))+P2(N*k),U2[(V=A+1268|0)>>2]=P2(P2(I*d)+P2(h*l))+P2(F*k),U2[(p=A+1260|0)>>2]=P2(P2(R*Z)+P2(D*c))+P2(T*B),U2[(M=A+1256|0)>>2]=P2(P2(Y*Z)+P2(m*c))+P2(N*B),U2[(S=A+1252|0)>>2]=P2(P2(I*Z)+P2(h*c))+P2(F*B),U2[(n=A+1244|0)>>2]=P2(P2(s*R)+P2(v*D))+P2(u*T),U2[(X=A+1240|0)>>2]=P2(P2(s*Y)+P2(v*m))+P2(u*N),U2[A+1236>>2]=P2(P2(I*s)+P2(h*v))+P2(F*u),U2[(b=A+1292|0)>>2]=Q+P2(P2(P2(d*w)+P2(l*G))+P2(k*C)),U2[(t=A+1288|0)>>2]=E+P2(P2(P2(Z*w)+P2(c*G))+P2(B*C)),U2[(o=A+1284|0)>>2]=W+P2(P2(P2(s*w)+P2(v*G))+P2(u*C)),Q=U2[r+52>>2],W=U2[r+56>>2],w=U2[A+160>>2],G=U2[A+164>>2],C=U2[A+168>>2],c=U2[r+20>>2],B=U2[r+24>>2],h=U2[A+128>>2],F=U2[A+144>>2],Y=U2[A+116>>2],m=U2[A+132>>2],N=U2[A+148>>2],R=U2[A+120>>2],T=U2[A+136>>2],l=U2[r+36>>2],I=U2[A+152>>2],k=U2[r+40>>2],f=U2[r+48>>2],u=U2[r+8>>2],s=U2[r>>2],v=U2[r+4>>2],Z=U2[r+16>>2],E=U2[A+112>>2],d=U2[r+32>>2],X2[A+1360>>2]=0,X2[A+1344>>2]=0,X2[A+1328>>2]=0,X2[A+1312>>2]=0,D=P2(P2(P2(R*d)+P2(T*l))+P2(I*k)),U2[A+1340>>2]=D,U2[A+1336>>2]=P2(P2(Y*d)+P2(m*l))+P2(N*k),U2[A+1332>>2]=P2(P2(E*d)+P2(h*l))+P2(F*k),U2[A+1324>>2]=P2(P2(R*Z)+P2(T*c))+P2(I*B),U2[A+1320>>2]=P2(P2(Y*Z)+P2(m*c))+P2(N*B),U2[A+1316>>2]=P2(P2(E*Z)+P2(h*c))+P2(F*B),U2[A+1308>>2]=P2(P2(s*R)+P2(v*T))+P2(u*I),U2[A+1304>>2]=P2(P2(s*Y)+P2(v*m))+P2(u*N),U2[A+1300>>2]=P2(P2(E*s)+P2(h*v))+P2(F*u),l=P2(W+P2(P2(P2(d*w)+P2(l*G))+P2(k*C))),U2[A+1356>>2]=l,k=P2(Q+P2(P2(P2(Z*w)+P2(c*G))+P2(B*C))),U2[A+1352>>2]=k,s=P2(f+P2(P2(P2(s*w)+P2(v*G))+P2(u*C))),U2[A+1348>>2]=s,c=U2[b>>2],v=U2[o>>2],Z=U2[t>>2],w=U2[n>>2],h=U2[M>>2],F=U2[y>>2],G=U2[X>>2],Y=U2[p>>2],m=U2[V>>2],N=U2[x>>2],R=U2[S>>2],C=U2[A+1236>>2],X2[A+1440>>2]=0,u=P2(l-c),T=P2(P2(h*N)-P2(Y*F)),I=P2(P2(Y*m)-P2(N*R)),l=P2(P2(F*R)-P2(h*m)),c=P2(P2(1)/P2(P2(P2(C*T)+P2(G*I))+P2(w*l))),B=P2(P2(P2(h*C)-P2(R*G))*c),s=P2(s-v),d=P2(l*c),v=P2(k-Z),E=P2(P2(P2(m*G)-P2(F*C))*c),l=P2(P2(u*B)+P2(P2(s*d)+P2(v*E))),U2[A+1436>>2]=l,W=P2(P2(P2(R*w)-P2(Y*C))*c),f=P2(I*c),b=P2(P2(P2(N*C)-P2(m*w))*c),k=P2(P2(u*W)+P2(P2(s*f)+P2(v*b))),U2[A+1432>>2]=k,o=P2(P2(P2(Y*G)-P2(h*w))*c),t=P2(T*c),n=P2(P2(P2(F*w)-P2(N*G))*c),c=P2(P2(u*o)+P2(P2(s*t)+P2(v*n))),U2[A+1428>>2]=c,U2[A+940>>2]=c,u=U2[A+680>>2],(s=U2[A+696>>2])<u?X2[A+908>>2]=0:(U2[A+908>>2]=c-u,e=3,u!=s&&(U2[A+924>>2]=c-s,e=4)),U2[A+944>>2]=k,X2[A+956>>2]=e,c=U2[A+684>>2],(u=U2[A+700>>2])<c?e=X2[A+912>>2]=0:(U2[A+912>>2]=k-c,e=3,c!=u&&(U2[A+928>>2]=k-u,e=4)),U2[A+948>>2]=l,X2[A+960>>2]=e,r=A+964|0,c=U2[A+688>>2],(k=U2[A+704>>2])<c?e=X2[A+916>>2]=0:(U2[A+916>>2]=l-c,e=3,c!=k&&(U2[A+932>>2]=l-k,e=4)),X2[r>>2]=e,T=U2[A+1308>>2],I=U2[A+1324>>2],l=P2(P2(P2(d*T)+P2(E*I))+P2(B*D)),k=U2[A+1304>>2],u=U2[A+1320>>2],s=U2[A+1336>>2],a=P2(P2(P2(d*k)+P2(E*u))+P2(B*s)),v=U2[A+1332>>2],Z=U2[A+1300>>2],c=P2(Z*d),d=U2[A+1316>>2],c=P2(P2(v*B)+P2(c+P2(d*E))),Q=P2(P2(P2(f*T)+P2(b*I))+P2(W*D)),i=P2(P2(P2(f*k)+P2(b*u))+P2(W*s)),B=P2(P2(v*W)+P2(P2(Z*f)+P2(d*b))),W=P2(P2(P2(t*T)+P2(n*I))+P2(o*D)),f=P2(P2(P2(t*k)+P2(n*u))+P2(o*s)),E=P2(P2(v*o)+P2(P2(Z*t)+P2(d*n)));A:{e:{r:{f:{i:{a:{n:{b:{t:{o:{c:{k:{u:{s:{l:{B:switch(X2[A+1232>>2]){case 0:if(c<P2(1)){if(!(c>P2(-1)))break l;_=A,g=B2(P2(-a),l),U2[_+1364>>2]=g,_=A+1368|0,g=q(P2(m2(P2(z2(c,P2(-1))),P2(1)))),U2[_>>2]=g,c=B2(P2(-B),E);break u;}X2[A+1368>>2]=1070141403,_=A,g=B2(f,i),U2[_+1364>>2]=g;break s;case 1:if(B<P2(1)){if(!(B>P2(-1)))break k;_=A,g=B2(Q,i),U2[_+1364>>2]=g,_=A+1368|0,g=B2(c,E),U2[_>>2]=g,c=q(P2(m2(P2(z2(P2(-B),P2(-1))),P2(1))));break c;}X2[A+1368>>2]=0,_=A,g=B2(P2(-W),l),U2[_+1364>>2]=g,c=P2(-1.5707963705062866);break c;case 2:if(a<P2(1)){if(!(a>P2(-1)))break o;_=A,g=q(P2(m2(P2(z2(P2(-a),P2(-1))),P2(1)))),U2[_+1364>>2]=g,_=A+1368|0,g=B2(c,l),U2[_>>2]=g,c=B2(f,i);break b;}X2[A+1364>>2]=-1077342245,_=A+1368|0,g=B2(P2(-B),E),U2[_>>2]=g;break t;case 3:if(f<P2(1)){if(!(f>P2(-1)))break n;_=A,g=B2(P2(-a),i),U2[_+1364>>2]=g,_=A+1368|0,g=B2(P2(-W),E),U2[_>>2]=g,c=q(P2(m2(P2(z2(f,P2(-1))),P2(1))));break a;}_=A+1368|(X2[A+1364>>2]=0),g=B2(Q,l),U2[_>>2]=g,c=P2(1.5707963705062866);break a;case 4:if(Q<P2(1)){if(!(Q>P2(-1)))break i;_=A,g=q(P2(m2(P2(z2(Q,P2(-1))),P2(1)))),U2[_+1364>>2]=g,_=A+1368|0,g=B2(P2(-W),l),U2[_>>2]=g,c=B2(P2(-B),i);break f;}X2[A+1364>>2]=1070141403,X2[A+1368>>2]=0,c=B2(c,E);break f;case 5:if(W<P2(1)){if(!(W>P2(-1)))break r;_=A,g=B2(Q,l),U2[_+1364>>2]=g,_=A+1368|0,g=q(P2(m2(P2(z2(P2(-W),P2(-1))),P2(1)))),U2[_>>2]=g,c=B2(f,E);break e;}X2[A+1364>>2]=0,X2[A+1368>>2]=-1077342245,c=B2(P2(-B),P2(-c));break e;default:break B;}c=U2[A+1420>>2],B=U2[A+1416>>2],l=U2[A+1412>>2],k=U2[A+1404>>2],u=U2[A+1400>>2],s=U2[A+1396>>2],v=U2[A+1388>>2],Z=U2[A+1384>>2],d=U2[A+1380>>2];break A;}X2[A+1368>>2]=-1077342245,_=A,g=P2(-B2(f,i)),U2[_+1364>>2]=g;}c=P2(0);}X2[A+1408>>2]=0,U2[A+1372>>2]=c,X2[A+1424>>2]=0,X2[A+1392>>2]=0,u=P2(P2(Z*N)-P2(v*w)),s=P2(P2(v*Y)-P2(d*N)),c=P2(P2(Z*u)-P2(d*s)),k=P2(P2(d*w)-P2(Z*Y)),B=P2(P2(v*s)-P2(Z*k)),l=P2(P2(d*k)-P2(v*u)),v=P2(P2(Y*s)-P2(w*u)),Z=P2(P2(w*k)-P2(N*s)),d=P2(P2(N*u)-P2(Y*k));break A;}X2[A+1368>>2]=0,_=A,g=P2(-B2(P2(-W),l)),U2[_+1364>>2]=g,c=P2(1.5707963705062866);}X2[A+1424>>2]=0,U2[A+1372>>2]=c,X2[A+1408>>2]=0,X2[A+1392>>2]=0,l=P2(P2(d*F)-P2(v*h)),B=P2(P2(v*G)-P2(Z*F)),k=P2(P2(d*l)-P2(Z*B)),c=P2(P2(Z*h)-P2(d*G)),u=P2(P2(Z*c)-P2(v*l)),s=P2(P2(v*B)-P2(d*c)),v=P2(P2(G*B)-P2(h*l)),Z=P2(P2(F*l)-P2(G*c)),d=P2(P2(h*c)-P2(F*B));break A;}X2[A+1364>>2]=1070141403,_=A+1368|0,g=P2(-B2(P2(-B),E)),U2[_>>2]=g;}c=P2(0);}X2[A+1424>>2]=0,X2[A+1408>>2]=0,X2[A+1392>>2]=0,U2[A+1372>>2]=c,d=P2(P2(u*N)-P2(s*Y)),Z=P2(P2(s*w)-P2(k*N)),c=P2(P2(u*d)-P2(k*Z)),v=P2(P2(k*Y)-P2(u*w)),B=P2(P2(k*v)-P2(s*d)),l=P2(P2(s*Z)-P2(u*v)),k=P2(P2(w*Z)-P2(Y*d)),u=P2(P2(N*d)-P2(w*v)),s=P2(P2(Y*v)-P2(N*Z));break A;}_=A+1368|(X2[A+1364>>2]=0),g=P2(-B2(Q,l)),U2[_>>2]=g,c=P2(-1.5707963705062866);}X2[A+1424>>2]=0,U2[A+1372>>2]=c,X2[A+1408>>2]=0,X2[A+1392>>2]=0,c=P2(P2(C*u)-P2(R*k)),U2[A+1420>>2]=c,B=P2(P2(m*k)-P2(C*s)),U2[A+1416>>2]=B,l=P2(P2(R*s)-P2(m*u)),U2[A+1412>>2]=l,v=P2(P2(k*B)-P2(u*l)),U2[A+1388>>2]=v,Z=P2(P2(s*l)-P2(k*c)),U2[A+1384>>2]=Z,d=P2(P2(u*c)-P2(s*B)),U2[A+1380>>2]=d,k=P2(P2(R*l)-P2(C*B)),u=P2(P2(C*c)-P2(m*l)),s=P2(P2(m*B)-P2(R*c));break A;}X2[A+1364>>2]=-1077342245,X2[A+1368>>2]=0,c=P2(-B2(c,E));}X2[A+1424>>2]=0,X2[A+1408>>2]=0,X2[A+1392>>2]=0,U2[A+1372>>2]=c,v=P2(P2(G*I)-P2(h*T)),U2[A+1388>>2]=v,Z=P2(P2(F*T)-P2(G*D)),U2[A+1384>>2]=Z,d=P2(P2(h*D)-P2(F*I)),U2[A+1380>>2]=d,c=P2(P2(h*d)-P2(G*Z)),U2[A+1420>>2]=c,B=P2(P2(G*v)-P2(F*d)),U2[A+1416>>2]=B,l=P2(P2(F*Z)-P2(h*v)),U2[A+1412>>2]=l,k=P2(P2(T*Z)-P2(I*d)),U2[A+1404>>2]=k,u=P2(P2(D*d)-P2(T*v)),U2[A+1400>>2]=u,s=P2(P2(I*v)-P2(D*Z)),U2[A+1396>>2]=s;break A;}X2[A+1364>>2]=0,X2[A+1368>>2]=1070141403,c=P2(-B2(B,c));}X2[A+1408>>2]=0,U2[A+1372>>2]=c,X2[A+1424>>2]=0,X2[A+1392>>2]=0,k=P2(P2(R*T)-P2(C*I)),U2[A+1404>>2]=k,u=P2(P2(C*D)-P2(m*T)),U2[A+1400>>2]=u,s=P2(P2(m*I)-P2(R*D)),U2[A+1396>>2]=s,c=P2(P2(C*u)-P2(R*s)),U2[A+1420>>2]=c,B=P2(P2(m*s)-P2(C*k)),U2[A+1416>>2]=B,l=P2(P2(R*k)-P2(m*u)),U2[A+1412>>2]=l,v=P2(P2(I*s)-P2(T*u)),U2[A+1388>>2]=v,Z=P2(P2(T*k)-P2(D*s)),U2[A+1384>>2]=Z,d=P2(P2(D*u)-P2(I*k)),U2[A+1380>>2]=d;}T=c,c=P2(P2(1)/P2(O2(P2(P2(P2(l*l)+P2(B*B))+P2(c*c))))),U2[A+1420>>2]=T*c,U2[A+1416>>2]=B*c,U2[A+1412>>2]=l*c,c=P2(P2(1)/P2(O2(P2(P2(P2(s*s)+P2(u*u))+P2(k*k))))),U2[A+1404>>2]=k*c,U2[A+1400>>2]=u*c,U2[A+1396>>2]=s*c,c=P2(P2(1)/P2(O2(P2(P2(P2(d*d)+P2(Z*Z))+P2(v*v))))),U2[A+1388>>2]=v*c,U2[A+1384>>2]=Z*c,U2[A+1380>>2]=d*c,B=U2[X2[A+28>>2]+404>>2],c=U2[X2[A+32>>2]+404>>2],S2[A+1452|0]=B<P2(1.1920928955078125e-7)|c<P2(1.1920928955078125e-7),c=(c=P2(B+(T=c)))>P2(0)?P2(T/c):P2(.5),U2[A+1444>>2]=c,U2[A+1448>>2]=P2(1)-c;}function A6(A,e){var r,f=P2(0),i=P2(0),a=(P2(0),P2(0),P2(0)),i=U2[1364+((e<<2)+A|0)>>2],n=H2(e,88)+A|0,b=U2[968+n>>2];(r=U2[972+n>>2])<=b||(i<b?((f=b2(P2(b-i)))<P2(-3.1415927410125732)?f=P2(f+P2(6.2831854820251465)):f>P2(3.1415927410125732)&&(f=P2(f+P2(-6.2831854820251465))),a=P2(j2(f)),(f=b2(P2(r-i)))<P2(-3.1415927410125732)?f=P2(f+P2(6.2831854820251465)):f>P2(3.1415927410125732)&&(f=P2(f+P2(-6.2831854820251465))),i=a<P2(j2(f))?i:P2(i+P2(6.2831854820251465))):r<i&&((f=b2(P2(i-r)))<P2(-3.1415927410125732)?f=P2(f+P2(6.2831854820251465)):f>P2(3.1415927410125732)&&(f=P2(f+P2(-6.2831854820251465))),a=P2(j2(f)),(f=b2(P2(i-b)))<P2(-3.1415927410125732)?f=P2(f+P2(6.2831854820251465)):f>P2(3.1415927410125732)&&(f=P2(f+P2(-6.2831854820251465))),i=a>P2(j2(f))?P2(i+P2(-6.2831854820251465)):i)),U2[1048+n>>2]=i,r<b?(A=H2(e,88)+A|0,X2[A+1040>>2]=0,X2[A+1052>>2]=0):(A=H2(e,88)+A|0,U2[A+1040>>2]=i-b,b==r?X2[A+1052>>2]=3:(X2[A+1052>>2]=4,U2[A+1044>>2]=i-r));}function e6(A,e,r,f,i,a,n,b,t,o,c,k,u){var s,l=P2(0),B=P2(0),v=P2(0),d=P2(0),Z=P2(0),_=0,g=P2(0),E=0,Q=P2(0),w=P2(0),G=P2(0);P2(0);o=H2(X2[t+24>>2],o);A:{e:{r:switch(X2[e+84>>2]-3|0){case 1:_=k?(B=U2[c>>2],Z=U2[c+4>>2],v=P2(P2(U2[n>>2]*B)+P2(U2[n+4>>2]*Z)),d=U2[c+8>>2],g=P2(U2[n+8>>2]*d),l=P2(-1),E=1,b):(B=U2[c>>2],Z=U2[c+4>>2],v=P2(P2(U2[i>>2]*B)+P2(U2[i+4>>2]*Z)),d=U2[c+8>>2],g=P2(U2[i+8>>2]*d),l=P2(1),a),w=U2[_+8>>2],G=U2[_>>2],s=U2[_+4>>2],r6(A,r,f,t,o,c,E,u),_=X2[t+28>>2]+(o<<2)|0,Q=P2(l*P2(P2(U2[t>>2]*U2[e+12>>2])*U2[e+72>>2])),U2[_>>2]=Q,Z=P2(P2(v+g)-P2(P2(P2(B*G)+P2(Z*s))+P2(d*w))),d=P2(Q-P2(Z*U2[e+12>>2])),k?(v=P2(0),B=P2(34028234663852886e22),d>P2(0)&&Q<(d=P2(Z*P2(-U2[e+8>>2])))&&(U2[_>>2]=d)):(B=P2(0),v=P2(-34028234663852886e22),d<P2(0)&&(d=P2(Z*P2(-U2[e+8>>2])))<Q&&(U2[_>>2]=d)),U2[(_=o<<2)+X2[t+36>>2]>>2]=v,U2[_+X2[t+40>>2]>>2]=B,U2[_+X2[t+32>>2]>>2]=U2[e+16>>2],r6(A,r,f,t,o=X2[t+24>>2]+o|0,c,k,u),_=X2[t+28>>2]+(o<<2)|0,l=P2(l*P2(P2(U2[t>>2]*U2[e+12>>2])*U2[e+76>>2])),U2[_>>2]=l,d=P2(l-P2(Z*U2[e+12>>2])),k?(B=P2(0),v=P2(-34028234663852886e22),d<P2(0)&&(g=l,(l=P2(Z*P2(-U2[e+8>>2])))<g&&(U2[_>>2]=l))):(v=P2(0),B=P2(34028234663852886e22),d>P2(0)&&(g=l)<(l=P2(Z*P2(-U2[e+8>>2])))&&(U2[_>>2]=l)),E=e+16|0,U2[(_=o<<2)+X2[t+36>>2]>>2]=v,U2[_+X2[t+40>>2]>>2]=B,_=2;break e;case 0:break r;default:break A;}r6(A,r,f,t,o,c,k,u),U2[(_=o<<2)+X2[t+28>>2]>>2]=P2(P2(U2[t>>2]*U2[e+12>>2])*U2[e+72>>2])*P2(0|(k?-1:1)),X2[_+X2[t+36>>2]>>2]=-8388609,X2[_+X2[t+40>>2]>>2]=2139095039,E=e+16|0,_=1;}U2[X2[t+32>>2]+(o<<2)>>2]=U2[E>>2],o=X2[t+24>>2]+o|0;}A:if(J2[e+28|0]){if(!J2[e+40|0]){r6(A,r,f,t,o,c,k,u),g=U2[e+32>>2],l=P2(1),v=U2[e>>2],Z=U2[e+4>>2];e:if(!(Z<v)&&(l=P2(0),v!=Z)){if(B=U2[e+80>>2],(d=P2((k?g:P2(-g))/P2(U2[t>>2]*U2[e+20>>2])))<P2(0)){if(v<=B&&B<P2(v-d)){l=P2(P2(v-B)/d);break e;}if(B<v)break e;}else {if(!(d>P2(0)))break e;if(B<=Z&&B>P2(Z-d)){l=P2(P2(Z-B)/d);break e;}if(Z<B)break e;}l=P2(1);}if(U2[(E=o<<2)+X2[t+28>>2]>>2]=l*g,U2[E+X2[t+36>>2]>>2]=-U2[e+36>>2],U2[E+X2[t+40>>2]>>2]=U2[e+36>>2],U2[E+X2[t+32>>2]>>2]=U2[e+24>>2],_=_+1|0,o=X2[t+24>>2]+o|0,!J2[e+28|0])break A;if(!J2[e+40|0])break A;}B=U2[e+44>>2],l=P2(U2[e+80>>2]-B),k&&(B=(E=l>P2(3.1415927410125732))?P2(B+P2(6.2831854820251465)):B,(l=E?P2(l+P2(-6.2831854820251465)):l)<P2(-3.1415927410125732)&&(B=P2(B+P2(-6.2831854820251465)),l=P2(l+P2(6.2831854820251465)))),r6(A,r,f,t,o,c,k,u),Z=P2(0),v=U2[e+32>>2],g=l<P2(0)?P2(-v):v;e:if(l!=P2(0)){if(d=U2[e>>2],B=(v=U2[e+4>>2])<d?(v=l<P2(0)?B:P2(34028234663852886e22),l>P2(0)?B:P2(-34028234663852886e22)):(v=l<P2(0)&&B<v?B:v,l>P2(0)&&d<B?B:d),!(v<B)){if(B==v)break e;if(l=U2[e+80>>2],(d=P2(P2(-g)/P2(U2[t>>2]*U2[e+20>>2])))<P2(0)){if(B<=l&&l<P2(B-d)){Z=P2(P2(B-l)/d);break e;}if(l<B)break e;}else {if(!(d>P2(0)))break e;if(l<=v&&l>P2(v-d)){Z=P2(P2(v-l)/d);break e;}if(v<l)break e;}}Z=P2(1);}U2[(E=o<<2)+X2[t+28>>2]>>2]=P2(g*Z)*P2(0|(k?-1:1)),U2[E+X2[t+36>>2]>>2]=-U2[e+36>>2],U2[E+X2[t+40>>2]>>2]=U2[e+36>>2],U2[E+X2[t+32>>2]>>2]=U2[e+24>>2],_=_+1|0,o=X2[t+24>>2]+o|0;}return J2[e+48|0]&&(v=U2[e+68>>2],Z=U2[e+80>>2],r6(A,r,f,t,o,c,k,u),l=P2(P2(1)/U2[t>>2]),B=U2[e+52>>2],G=P2(Z-v),Q=U2[e+60>>2],g=k?(v=U2[c>>2],Z=U2[c+4>>2],w=P2(P2(U2[n>>2]*v)+P2(U2[n+4>>2]*Z)),d=U2[c+8>>2],P2(U2[n+8>>2]*d)):(b=a,v=U2[c>>2],Z=U2[c+4>>2],w=P2(P2(U2[i>>2]*v)+P2(U2[i+4>>2]*Z)),d=U2[c+8>>2],P2(U2[i+8>>2]*d)),Z=P2(P2(w+g)-P2(P2(P2(v*U2[b>>2])+P2(Z*U2[b+4>>2]))+P2(d*U2[b+8>>2]))),v=(v=P2(P2(1)/U2[X2[A+32>>2]+404>>2]))<(d=P2(P2(1)/U2[X2[A+28>>2]+404>>2]))?v:d,J2[e+56|0]&&P2(l*P2(O2(P2(B/v))))>P2(.25)&&(B=P2(P2(P2(P2(P2(1)/l)/l)*P2(.0625))*v)),A=o<<2,g=P2(l*P2(G*B)),B=P2(Z*P2(-(v<P2(Q*l)&&J2[e+64|0]?P2(v/l):Q))),v=P2(0|(k?-1:1)),B=P2(l*P2(B*v)),l=P2(g+B),U2[A+X2[t+28>>2]>>2]=Z+P2(l*v),Z=(e=l<B)?B:l,B=e?l:B,k?(U2[A+X2[t+36>>2]>>2]=m2(P2(-Z),P2(0)),Z=P2(-B)):U2[A+X2[t+36>>2]>>2]=m2(B,P2(0)),U2[(A=o<<2)+X2[t+40>>2]>>2]=z2(Z,P2(0)),_=_+1|(X2[A+X2[t+32>>2]>>2]=0)),_;}function r6(A,e,r,f,i,a,n,b){P2(0);var t,o,c,k,u,s=P2(0),l=P2(0),B=P2(0),v=(P2(0),P2(0)),d=P2(0),Z=P2(0),_=(P2(0),P2(0),X2[(n?12:8)+f>>2]);U2[(u=i<<2)+_>>2]=U2[a>>2],U2[_+(k=(t=i+1|0)<<2)>>2]=U2[a+4>>2],U2[_+(c=(o=i+2|0)<<2)>>2]=U2[a+8>>2],_=X2[(n?20:16)+f>>2],U2[_+u>>2]=-U2[a>>2],U2[_+k>>2]=-U2[a+4>>2],U2[_+c>>2]=-U2[a+8>>2],n||(u=P2(U2[A+1352>>2]-U2[r+52>>2]),s=U2[a+8>>2],B=P2(U2[A+1356>>2]-U2[r+56>>2]),l=U2[a+4>>2],d=P2(P2(u*s)-P2(B*l)),k=P2(U2[A+1288>>2]-U2[e+52>>2]),_=P2(U2[A+1292>>2]-U2[e+56>>2]),Z=P2(P2(k*s)-P2(_*l)),c=P2(U2[A+1348>>2]-U2[r+48>>2]),v=u,u=U2[a>>2],v=P2(P2(c*l)-P2(v*u)),B=P2(P2(B*u)-P2(c*s)),c=P2(U2[A+1284>>2]-U2[e+48>>2]),l=P2(P2(c*l)-P2(k*u)),s=P2(P2(_*u)-P2(c*s)),b||J2[A+1452|0]&&(u=U2[A+1448>>2],v=P2(v*u),B=P2(B*u),d=P2(d*u),u=U2[A+1444>>2],l=P2(l*u),s=P2(s*u),Z=P2(Z*u)),A=(e=i<<2)+X2[f+12>>2]|0,U2[A+8>>2]=l,U2[A+4>>2]=s,U2[A>>2]=Z,A=X2[f+20>>2],U2[A+e>>2]=-d,U2[A+(t<<2)>>2]=-B,U2[A+(o<<2)>>2]=-v);}function f6(A){return P2(U2[(A|=0)>>2]);}function i6(A){return P2(U2[(A|=0)+4>>2]);}function a6(A){return P2(U2[(A|=0)+8>>2]);}function n6(A,e,r,f,i){A|=0,e=P2(e),r=P2(r),f=P2(f),i=P2(i),U2[A+12>>2]=i,U2[A+8>>2]=f,U2[A+4>>2]=r,U2[A>>2]=e;}function P(A,e,r,f){var i,a,n,b,t,o=H2(i=r>>>16|0,a=A>>>16|0);return i=(65535&(a=((t=H2(n=65535&r,b=65535&A))>>>16|0)+H2(a,n)|0))+H2(i,b)|0,H=(H2(e,r)+o|0)+H2(A,f)+(a>>>16)+(i>>>16)|0,65535&t|i<<16;}function b6(A,e,r){var f,i,a,n=0,b=0,t=0,o=0,c=0,k=0;A:{e:{r:{f:{i:{a:{if(!e){A=(A>>>0)/(r>>>0)|0,H=0;break A;}if(r){if(!(r-1&r))break a;t=0-(b=(B(r)+33|0)-B(e)|0)|0;break f;}if(!A){A=(e>>>0)/0|0,H=0;break A;}if((n=32-B(e)|0)>>>0<31)break i;break r;}if(1==(0|r))break e;r=31&(n=r?31-B(r-1^r)|0:32),A=32<=(63&n)>>>0?e>>>r|(n=0):(n=e>>>r|0,((1<<r)-1&e)<<32-r|A>>>r),H=n;break A;}b=n+1|0,t=63-n|0;}if(f=31&(n=63&b),o=32<=n>>>0?e>>>f|(n=0):(n=e>>>f|0,((1<<f)-1&e)<<32-f|A>>>f),f=31&(t&=63),32<=t>>>0?(e=A<<f,A=0):(e=(1<<f)-1&A>>>32-f|e<<f,A<<=f),b)for(t=-1!=(0|(f=r-1|0))?0:-1;;)if(c=n<<1|o>>>31,o=(n=o<<1|e>>>31)-(a=r&(i=(o=t-(c+(f>>>0<n>>>0)|0)|0)>>31))|0,n=c-(n>>>0<a>>>0)|0,e=e<<1|A>>>31,A=k|A<<1,k=c=1&i,!(b=b-1|0))break;H=e<<1|A>>>31,A=c|A<<1;break A;}e=A=0;}H=e;}return A;}function s(A){var e;return (-1>>>(e=31&A)&-2)<<e|(-1<<(A=0-A&31)&-2)>>>A;}function t6(){return l.byteLength/65536|0;}function o6(A){var e=0|t6(),A=e+(A|=0)|0;return e<A&&A<65536&&(A=new ArrayBuffer(H2(A,65536)),new Int8Array(A).set(S2),S2=new Int8Array(A),$=new Int16Array(A),X2=new Int32Array(A),J2=new Uint8Array(A),A2=new Uint16Array(A),X=new Uint32Array(A),U2=new Float32Array(A),M=new Float64Array(A),l=A,u.buffer=l,a=J2),e;}}const bullet=instantiate;var _default=bullet;_exports.default=_default;});});var Bullet = unwrapExports(bullet_cocos);

      const pageSize = 65536;
      const pageCount = 250;
      const importFunc = {
        syncPhysicsToGraphics(id) {
          const bt = globalThis.Bullet;
          const body = bt.CACHE.getWrapper(id, bt.BODY_CACHE_NAME);
          body.syncPhysicsToGraphics();
        }

      };

      let bulletLibs = Bullet;

      if (globalThis.BULLET) {
        console.log('[Physics][Bullet]: Using the external Bullet libs.');
        bulletLibs = globalThis.BULLET;
      }

      let EBulletType;

      (function (EBulletType) {
        EBulletType[EBulletType["EBulletTypeVec3"] = 0] = "EBulletTypeVec3";
        EBulletType[EBulletType["EBulletTypeQuat"] = 1] = "EBulletTypeQuat";
        EBulletType[EBulletType["EBulletTypeTransform"] = 2] = "EBulletTypeTransform";
        EBulletType[EBulletType["EBulletTypeMotionState"] = 3] = "EBulletTypeMotionState";
        EBulletType[EBulletType["EBulletTypeCollisionObject"] = 4] = "EBulletTypeCollisionObject";
        EBulletType[EBulletType["EBulletTypeCollisionShape"] = 5] = "EBulletTypeCollisionShape";
        EBulletType[EBulletType["EBulletTypeStridingMeshInterface"] = 6] = "EBulletTypeStridingMeshInterface";
        EBulletType[EBulletType["EBulletTypeTriangleMesh"] = 7] = "EBulletTypeTriangleMesh";
        EBulletType[EBulletType["EBulletTypeCollisionDispatcher"] = 8] = "EBulletTypeCollisionDispatcher";
        EBulletType[EBulletType["EBulletTypeDbvtBroadPhase"] = 9] = "EBulletTypeDbvtBroadPhase";
        EBulletType[EBulletType["EBulletTypeSequentialImpulseConstraintSolver"] = 10] = "EBulletTypeSequentialImpulseConstraintSolver";
        EBulletType[EBulletType["EBulletTypeCollisionWorld"] = 11] = "EBulletTypeCollisionWorld";
        EBulletType[EBulletType["EBulletTypeTypedConstraint"] = 12] = "EBulletTypeTypedConstraint";
      })(EBulletType || (EBulletType = exports('eI', {})));

      let EBulletTriangleRaycastFlag;

      (function (EBulletTriangleRaycastFlag) {
        EBulletTriangleRaycastFlag[EBulletTriangleRaycastFlag["NONE"] = 0] = "NONE";
        EBulletTriangleRaycastFlag[EBulletTriangleRaycastFlag["FilterBackfaces"] = 1] = "FilterBackfaces";
        EBulletTriangleRaycastFlag[EBulletTriangleRaycastFlag["KeepUnflippedNormal"] = 2] = "KeepUnflippedNormal";
        EBulletTriangleRaycastFlag[EBulletTriangleRaycastFlag["UseSubSimplexConvexCastRaytest"] = 4] = "UseSubSimplexConvexCastRaytest";
        EBulletTriangleRaycastFlag[EBulletTriangleRaycastFlag["UseGjkConvexCastRaytest"] = 8] = "UseGjkConvexCastRaytest";
      })(EBulletTriangleRaycastFlag || (EBulletTriangleRaycastFlag = exports('eJ', {})));

      const bt = exports('eG', {});
      globalThis.Bullet = bt;
      bt.BODY_CACHE_NAME = 'body';
      function waitForAmmoInstantiation() {
        const supported = (() => {
          const isiOS15_4 = (sys.os === sys.OS.IOS || sys.os === sys.OS.OSX) && sys.isBrowser && /(OS 15_4)|(Version\/15.4)/.test(window.navigator.userAgent);

          if (isiOS15_4) {
            return false;
          }

          try {
            if (typeof WebAssembly === 'object' && typeof WebAssembly.instantiate === 'function') {
              const module = new WebAssembly.Module(new Uint8Array([0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00]));

              if (module instanceof WebAssembly.Module) {
                return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;
              }
            }
          } catch (e) {
            return false;
          }

          return false;
        })();

        return Promise.resolve().then(() => {

          return bulletLibs;
        }).then(module => {
          if (typeof module === 'string') {
            console.info('[Physics][Bullet]: Using wasm Bullet libs.');

            const infoReport = msg => {
              console.info(msg);
            };

            const errorReport = msg => {
              console.error(msg);
            };

            const memory = new WebAssembly.Memory({
              initial: pageCount
            });
            const importObject = {
              cc: importFunc,
              wasi_snapshot_preview1: {
                fd_close: infoReport,
                fd_seek: infoReport,
                fd_write: infoReport
              },
              env: {
                memory
              }
            };
            return new Promise((resolve, reject) => {
              function instantiateWasm(buff) {
                WebAssembly.instantiate(buff, importObject).then(results => {
                  const btInstance = results.instance.exports;
                  Object.assign(bt, btInstance);
                  resolve();
                }, errorReport);
              }

              {
                fetch(module).then(response => {
                  response.arrayBuffer().then(buff => {
                    instantiateWasm(buff);
                  }, errorReport);
                }, errorReport);
              }
            });
          } else {
            console.info('[Physics][Bullet]: Using asmjs Bullet libs.');
            const env = importFunc;
            const wasmMemory = {};
            wasmMemory.buffer = new ArrayBuffer(pageSize * pageCount);
            env.memory = wasmMemory;
            const btInstance = module(env, wasmMemory);
            Object.assign(bt, btInstance);
            return new Promise((resolve, reject) => {
              resolve();
            });
          }
        });
      }
      game.onPostInfrastructureInitDelegate.add(waitForAmmoInstantiation);

    }
  };
});
